/**
 * Note! This file is exported to `dist/scss/` in the published
 * node module, for consumer projects to import.
 * That means this file cannot import from any file that isn't
 * also exported, keeping the same relative path.
 *
 * Or, just don't import anything, that works too.
 */

@mixin visualize-keyboard-focus {
    &:focus {
        outline: none;
    }

    &:focus-visible {
        outline: none;
        box-shadow: var(--shadow-depth-8-focused);
    }
}

@mixin in($media) {
    // ⛔️ As long as we don't have a script that generates a
    // `.css` files automatically, we cannot use this mixin.
    // we need to manually write the dark-mode CSS variables
    // inside this file: /style/color-palette-extended.css
    //
    // ⚠️ Also note that this mixin only puts styles
    // on the `:root` which means the `<html` level.
    // Therefore, it cannot be used inside components
    // to generate custom dark-mode styles.

    @if $media == dark-mode {
        @media (prefers-color-scheme: dark) {
            :root:not([data-theme='force-light']) {
                @content;
            }
        }
        :root[data-theme='force-dark'] {
            @content;
        }

        // @media (prefers-color-scheme: dark) {
        //     :host(:not([data-theme='force-light'])) & {
        //         @content;
        //     }
        // }
        // :host([data-theme='force-dark']) & {
        //     @content;
        // }
    }
}

@mixin is-elevated-clickable(
    $color: var(--mdc-theme-on-surface),
    $color--hovered: var(--mdc-theme-on-surface),
    $background-color: var(--lime-elevated-surface-background-color),
    $background-color--hovered: var(--lime-elevated-surface-background-color)
) {
    transition: color 0.2s ease, background-color 0.2s ease,
        box-shadow 0.2s ease, transform 0.1s ease-out;

    cursor: pointer;
    color: $color;
    background-color: $background-color;
    box-shadow: var(--button-shadow-normal);

    &:hover {
        color: $color--hovered;
        background-color: $background-color--hovered;
        box-shadow: var(--button-shadow-hovered);
    }

    &:active {
        box-shadow: var(--button-shadow-pressed);

        transform: translate3d(0, 0.08rem, 0);
    }
}

@mixin is-elevated-inset-clickable(
    $color: var(--mdc-theme-on-surface),
    $color--hovered: var(--mdc-theme-on-surface),
    $background-color: var(--lime-elevated-surface-background-color),
    $background-color--hovered: var(--lime-elevated-surface-background-color),
    $background-color--inset: var(--mdc-theme-surface)
) {
    transition: color 0.2s ease, background-color 0.2s ease,
        box-shadow 0.2s ease, transform 0.1s ease-out;

    cursor: pointer;
    color: $color;
    background-color: $background-color;
    box-shadow: var(--button-shadow-normal);

    &:hover {
        color: $color--hovered;
        background-color: $background-color--hovered;
        box-shadow: var(--button-shadow-hovered);
    }

    &:active {
        background-color: $background-color--inset;
        box-shadow: var(--button-shadow-inset-pressed);
        transform: translate3d(0, 0.05rem, 0);
    }
}

@mixin is-flat-clickable(
    $color: var(--mdc-theme-on-surface),
    $background-color: transparent,
    $color--hovered: var(--mdc-theme-on-surface),
    $background-color--hovered: var(--lime-elevated-surface-background-color)
) {
    transition: color 0.2s ease, background-color 0.2s ease,
        box-shadow 0.2s ease, transform 0.1s ease-out;

    cursor: pointer;
    color: $color;
    background-color: $background-color;

    &:hover {
        color: $color--hovered;
        background-color: $background-color--hovered;
        box-shadow: var(--button-shadow-hovered);
    }

    &:active {
        box-shadow: var(--button-shadow-pressed);

        transform: translate3d(0, 0.08rem, 0);
    }
}

@mixin is-flat-inset-clickable(
    $color: var(--mdc-theme-on-surface),
    $background-color: transparent,
    $color--hovered: var(--mdc-theme-on-surface),
    $background-color--hovered: var(--lime-elevated-surface-background-color),
    $background-color--inset: var(--mdc-theme-surface)
) {
    transition: color 0.2s ease, background-color 0.2s ease,
        box-shadow 0.2s ease, transform 0.1s ease-out;

    cursor: pointer;
    color: $color;
    background-color: $background-color;

    &:hover {
        color: $color--hovered;
        background-color: $background-color--hovered;
        box-shadow: var(--button-shadow-hovered);
    }

    &:active {
        background-color: $background-color--inset;
        box-shadow: var(--button-shadow-inset-pressed);
        transform: translate3d(0, 0.05rem, 0);
    }
}

@mixin clear-all-button() {
    // NOTE: you may need to specify "position: absolute" and align the position where you use this mixin
    @include is-flat-clickable(
        $background-color: rgb(var(--contrast-900)),
        $background-color--hovered: rgb(var(--contrast-1100))
    );

    cursor: pointer;

    height: 1.25rem;
    width: 1.25rem;
    border-radius: 50%;

    background: {
        repeat: no-repeat;
        position: center;
        size: 0.75rem;
        image: url("data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><defs/><path fill='rgb(255,255,255)' d='M7.219 5.781L5.78 7.22 14.563 16 5.78 24.781 7.22 26.22 16 17.437l8.781 8.782 1.438-1.438L17.437 16l8.782-8.781L24.78 5.78 16 14.563z'/></svg>");
    }
}

@mixin truncate-text() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

/**
 * This mixin will mask out the content that is close to
 * the edges of a scrollable area.
 * - If the scrollable content has `overflow-y`, use `vertically`
 * as an argument for `$direction`.
 - If the scrollable content has `overflow-x`, use `horizontally`
 * as an argument for `$direction`.
 *
 * For the visual effect to work smoothly, we need to make sure that
 * the size of the fade-out edge effect is the same as the
 * internal paddings of the scrollable area. Otherwise, content of a
 * scrollable area that does not have a padding will fade out before
 * any scrolling has been done.
 * This is why this mixin already adds paddings, which automatically
 * default to the size of the fade-out effect.
 * This size defaults to `1rem`, but to override the size use
 * `--limel-top-edge-fade-height` & `--limel-bottom-edge-fade-height`
 * when `vertically` argument is set, and use
 * `--limel-left-edge-fade-width` & `--limel-right-edge-fade-width`
 * when `horizontally` argument is set.
 * Of course you can also programmatically increase and decrease the
 * size of these variables for each edge, based on the amount of
 * scrolling that has been done by the user. In this case, make sure
 * to add a custom padding where the mixin is used, to override
 * the paddings that are automatically added by the mixin in the
 * compiled CSS code.
 */
@mixin fade-out-overflowed-content-on-edges($direction) {
    @if $direction == vertically {
        --limel-overflow-mask-vertical: linear-gradient(
            to bottom,
            transparent 0%,
            black calc(0% + var(--limel-top-edge-fade-height, 1rem)),
            black calc(100% - var(--limel-bottom-edge-fade-height, 1rem)),
            transparent 100%
        );

        -webkit-mask-image: var(--limel-overflow-mask-vertical);
        mask-image: var(--limel-overflow-mask-vertical);

        padding-top: var(--limel-top-edge-fade-height, 1rem);
        padding-bottom: var(--limel-bottom-edge-fade-height, 1rem);
    } @else if $direction == horizontally {
        --limel-overflow-mask-horizontal: linear-gradient(
            to right,
            transparent 0%,
            black calc(0% + var(--limel-left-edge-fade-width, 1rem)),
            black calc(100% - var(--limel-right-edge-fade-width, 1rem)),
            transparent 100%
        );

        -webkit-mask-image: var(--limel-overflow-mask-horizontal);
        mask-image: var(--limel-overflow-mask-horizontal);

        padding-left: var(--limel-left-edge-fade-width, 1rem);
        padding-right: var(--limel-right-edge-fade-width, 1rem);
    } @else {
        @error "Please specify the direction #{$direction}!";
    }
}
