@use '../../style/mixins';

@import '../../../node_modules/codemirror/lib/codemirror.css';
@import '../../../node_modules/codemirror/addon/lint/lint.css';
@import '../../../node_modules/codemirror/addon/fold/foldgutter.css';
@import '../../../node_modules/codemirror/addon/hint/show-hint.css';

/**
 * @prop --code-editor-max-height: Defines how tall the code editor can get before content becomes scrollable, defaults to `10rem`.
 * @prop --code-editor-font-size: Defines the font size of the code, defaults to `0.8125rem`.
 */

@mixin light-mode-styles {
    --code-editor-neutral-text-color: var(--contrast-1100);
    --code-editor-background-color: var(--contrast-200);
    --code-editor-gutter-background-color: var(--contrast-300);
    --code-editor-line-number-text-color: var(--contrast-700);
    --code-editor-cursor-color: var(--color-amber-dark);

    --code-editor-selection-highlight-color: var(--color-cyan-default);
    --code-editor-selection-lowlight-color: var(--contrast-600);

    .cm-attribute,
    .cm-property,
    .cm-keyword {
        color: rgb(var(--color-violet-light));
    }
    .cm-operator {
        color: rgb(var(--color-sky-dark));
    }
    .cm-variable {
        color: rgb(var(--color-pink-light));
    }
    .cm-variable-2 {
        color: rgb(var(--contrast-1100));
    }
    .cm-variable-3,
    .cm-type {
        color: rgb(var(--color-amber-darker));
    }
    .cm-builtin,
    .cm-meta {
        color: rgb(var(--color-amber-default));
    }
    .cm-atom {
        color: rgb(var(--color-coral-default));
    }
    .cm-tag,
    .cm-number {
        color: rgb(var(--color-magenta-default));
    }
    .cm-def {
        color: rgb(var(--color-sky-default));
    }
    .cm-string {
        color: rgb(var(--color-green-dark));
    }
    .cm-string-2 {
        color: rgb(var(--color-pink-default));
    }
    .cm-qualifier {
        color: rgb(var(--color-grass-default));
    }
    .cm-error {
        color: rgb(var(--color-white));
        background-color: rgb(var(--color-red-default));
    }
    .cm-comment {
        color: rgba(var(--code-editor-neutral-text-color), 0.7);
    }
}

@mixin dark-mode-styles {
    --code-editor-neutral-text-color: var(--contrast-1600);
    // --code-editor-background-color: { same as light };
    // --code-editor-gutter-background-color: { same as light };
    --code-editor-line-number-text-color: var(--contrast-800);
    --code-editor-cursor-color: var(--color-amber-default);

    --code-editor-selection-highlight-color: var(--color-cyan-light);
    --code-editor-selection-lowlight-color: var(--contrast-100);

    .cm-attribute,
    .cm-property,
    .cm-keyword {
        color: rgb(var(--color-purple-lighter));
    }
    .cm-operator {
        color: rgb(var(--color-sky-lighter));
    }
    // .cm-variable { same as light }
    // .cm-variable-2 { same as light }
    .cm-variable-3,
    .cm-type {
        color: rgb(var(--color-yellow-light));
    }
    // .cm-builtin,
    // .cm-meta { same as light }
    .cm-atom {
        color: rgb(var(--color-coral-light));
    }
    .cm-tag,
    .cm-number {
        color: rgb(var(--color-magenta-light));
    }
    .cm-def {
        color: rgb(var(--color-sky-light));
    }
    .cm-string {
        color: rgb(var(--color-lime-light));
    }
    .cm-string-2 {
        color: rgb(var(--color-pink-lighter));
    }
    .cm-qualifier {
        color: rgb(var(--color-grass-light));
    }
    // .cm-error { same as light }
    .cm-comment {
        color: rgba(var(--code-editor-neutral-text-color), 0.4);
    }
}

:host {
    display: flex;
    font-size: var(--code-editor-font-size, 0.8125rem); // 13px
    @include light-mode-styles;
}

@include mixins.in(dark-mode) {
    :host {
        @include dark-mode-styles;
    }
}

.editor {
    display: flex;
    align-items: stretch;
    width: 100%;

    &.readonly {
        .CodeMirror-focused {
            .CodeMirror-cursors {
                visibility: visible !important;
            }
        }
    }
}

.cm-s-lime {
    &.CodeMirror {
        @include mixins.font-family(monospace);
        color: rgb(var(--code-editor-neutral-text-color));
        background-color: rgb(var(--code-editor-background-color));
        border-radius: 0.25rem;
        height: auto;
        width: 100%;
    }

    .CodeMirror-scroll {
        max-height: var(--code-editor-max-height, 10rem);
    }

    &.CodeMirror-focused {
        div.CodeMirror-selected {
            background: rgba(
                var(--code-editor-selection-highlight-color),
                0.15
            );
        }
    }
    div.CodeMirror-selected {
        background: rgba(var(--code-editor-selection-highlight-color), 0.05);
    }

    .CodeMirror {
        &-gutters {
            background-color: rgb(var(--code-editor-gutter-background-color));
            color: rgb(var(--code-editor-line-number-text-color));
            border: none;
        }

        &-guttermarker,
        &-guttermarker-subtle,
        &-linenumber {
            color: rgb(var(--code-editor-line-number-text-color));
        }

        &-cursor {
            border-left: 1px solid rgb(var(--code-editor-cursor-color));

            .editor.readonly & {
                border-color: rgba(var(--code-editor-neutral-text-color), 0.5);
                border-width: 0.125rem;
            }
        }

        &-line {
        }

        &-activeline-background {
            background: rgba(var(--code-editor-selection-lowlight-color), 0.5);
        }

        &-matchingbracket {
            font-weight: bold;
            color: rgb(var(--code-editor-neutral-text-color)) !important;
            background: rgba(
                var(--code-editor-selection-highlight-color),
                0.15
            );
            position: relative;

            &:before {
                content: '_';
                color: rgb(var(--code-editor-selection-highlight-color), 0.8);
                position: absolute;
                bottom: -0.4rem;
                left: 0;
                right: 0;
            }
        }
    }
    .CodeMirror-lint-marker-error,
    .CodeMirror-lint-message-error {
        background: {
            image: url("data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><defs/><path fill='rgb(255,255,255)' d='M7.219 5.781L5.78 7.22 14.563 16 5.78 24.781 7.22 26.22 16 17.437l8.781 8.782 1.438-1.438L17.437 16l8.782-8.781L24.78 5.78 16 14.563z'/></svg>");
            color: rgb(var(--color-red-default));
            size: 0.75rem;
        }
        border-radius: 50%;
    }

    .CodeMirror-foldmarker {
        position: relative;
        @include mixins.is-elevated-clickable($color: transparent);
        text-shadow: none;

        padding: 0 0.5rem;
        border-radius: 1rem;

        background: {
            image: url("data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' xml:space='preserve'><circle fill='rgba(186,186,192,0.7)' cx='16' cy='16' r='2'/><circle fill='rgba(186,186,192,0.7)' cx='26' cy='16' r='2'/><circle fill='rgba(186,186,192,0.7)' cx='6' cy='16' r='2'/></svg>");
            size: contain;
            repeat: no-repeat;
            position: center;
        }
    }

    [class^='CodeMirror-foldgutter'] {
        color: var(--code-editor-neutral-text-color);
        transition: opacity 0.2s ease;
        opacity: 0.4;

        &:hover {
            opacity: 1;
        }
    }

    .CodeMirror-foldgutter-folded {
        opacity: 0.7;
    }
}
