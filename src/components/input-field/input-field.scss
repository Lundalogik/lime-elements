@use '../../style/internal/z-index';
@use '../../style/functions';
@use '../../style/internal/shared_input-select-picker';
@use '../../style/mixins';

@use '../../style/internal/lime-theme';

@use '@material/textfield';
@use '@material/textfield/icon';
@use '@material/notched-outline/mdc-notched-outline';
@use '@material/floating-label';
@use '@material/floating-label/mdc-floating-label';
@use '@material/ripple';
@use '@material/list';
@use '@material/elevation';
@use '@material/menu-surface';

/**
 * @prop --textarea-height: Height of the field when type is set to `textarea`
 */

:host {
    position: relative;
    display: block;
}

:host([hidden]) {
    display: none;
}

:host([type='textarea']) {
    height: var(--textarea-height, 100%);

    .mdc-text-field.mdc-text-field--textarea {
        height: var(--textarea-height, 100%);

        .mdc-text-field__input {
            margin-top: functions.pxToRem(8);
            margin-bottom: 0;
        }

        &.has-helper-line {
            --heightOfHelperText: 0.9375rem;
            height: calc(
                var(--textarea-height, 100%) - var(--heightOfHelperText)
            );
        }
    }
}

@include textfield.core-styles;
@include icon.icon-core-styles;

@include shared_input-select-picker.outlined-style-overrides;
@include shared_input-select-picker.readonly-overrides;
@include shared_input-select-picker.cropped-label-hack;
@include shared_input-select-picker.disabled-overrides;
@include shared_input-select-picker.leading-icon;
@include shared_input-select-picker.trailing-icon;
@include shared_input-select-picker.floating-label-overrides;
@include shared_input-select-picker.helper-text-color;
@include shared_input-select-picker.lime-empty-value-for-readonly;
@include shared_input-select-picker.lime-looks-like-input-value;

.mdc-text-field--with-trailing-icon {
    .mdc-text-field__icon--trailing {
        margin-right: functions.pxToRem(8);
    }
}

.lime-text-field--empty {
    .mdc-text-field__icon--trailing {
        @include shared_input-select-picker.looks-disabled;
        box-shadow: none !important;
    }
}

.mdc-text-field {
    width: 100%;

    &:not(.mdc-text-field--disabled) {
        .mdc-text-field__affix,
        .mdc-text-field__icon {
            color: rgb(var(--contrast-900));
        }
    }
    &.mdc-text-field--disabled {
        .mdc-text-field__affix,
        .mdc-text-field__icon {
            color: rgb(var(--contrast-700));
        }
    }
}

.lime-formatted-input {
    display: none;
    width: calc(100% - #{functions.pxToRem(20)});
    z-index: z-index.$input-field--formatted-value;

    pointer-events: none;

    :not(.mdc-text-field--focused):not(.mdc-text-field--invalid) & {
        display: block;
    }

    + .mdc-text-field__input {
        z-index: z-index.$input-field--input-with-formatted-value;
    }
}

:not(.mdc-text-field--focused):not(.mdc-text-field--invalid) {
    .mdc-text-field__input[type='number'] {
        color: transparent;
        -webkit-text-fill-color: transparent;
    }

    &.lime-text-field--readonly {
        .mdc-text-field__input[type='number'] {
            visibility: hidden;
            // Not having `visibility: hidden;` makes the unformatted
            // value selectable; which is not so nice when users
            // click drag to select content on the screen.
            // The reason to have it only on `readonly` mode is
            // 1. This is the use case where it makes most sense
            // 2. We don't want to repeat the same thing in the
            // accessibility tree, and make it readable for assistive
            // technologies.
            // 3. When not readonly, clicking on the `<input />`
            // element sets the focus and activates the edit mode.
            // So we cannot always have it `hidden` on.
            // which is why we have instead
            // `color: transparent` a few lines before this.
        }
    }
}

.autocomplete-list-container {
    position: relative;
}

.autocomplete-list {
    background-color: var(--lime-elevated-surface-background-color);
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    max-height: functions.pxToRem(200);
    overflow-y: auto;
}

.mdc-deprecated-list-item {
    cursor: pointer;
}

input.mdc-text-field__input {
    @include shared_input-select-picker.input-field-placeholder;

    &::-webkit-search-cancel-button {
        @include mixins.clear-all-button;

        -webkit-appearance: none;

        position: absolute;
        right: functions.pxToRem(8);
        top: 0;
        bottom: 0;
        margin: auto;

        &:active {
            transform: none; //Makes the "clear-all button" work
        }
    }
}

.mdc-text-field-character-counter {
    transition: opacity 0.2s ease;
    opacity: 0;

    .mdc-text-field--focused + .mdc-text-field-helper-line & {
        opacity: 1;
    }

    &:before {
        height: shared_input-select-picker.$height-of-helper-text-pseudo-before;
    }
}

.mdc-text-field-helper-text {
    &:before {
        height: shared_input-select-picker.$height-of-helper-text-pseudo-before;
    }
}

@import './partial-styles/trailing-icon.scss';
@import './partial-styles/readonly';
