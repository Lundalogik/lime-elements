@use '../../style/functions';
@use '../../style/internal/shared_input-select-picker';
@use '../../style/mixins';

@use '@material/select/styles';
@use '@material/floating-label';
@use '@material/floating-label/mdc-floating-label';

// Note! The `--dropdown-z-index` property is used from `select.tsx`.
/**
 * @prop --dropdown-z-index: z-index of the dropdown menu.
 */

:host {
    display: block;
    position: relative;
}

:host([hidden]) {
    display: none;
}

.mdc-select--outlined .mdc-floating-label {
    left: functions.pxToRem(16);
}

.mdc-select__anchor,
.mdc-floating-label,
.mdc-select__selected-text {
    // As long as this component is depended on MDC,
    // we need to force it to be font-agnostic.
    // When MDC-dependency is removed, this block can also be removed.
    // However, on removal of MDC-dependency, we should also make sure to check
    // other font-related styles that might be set by MDC,
    // such as `letter-spacing` or `font-size`.
    font-family: inherit;
}

.mdc-select__dropdown-icon-graphic {
    transition: transform 0.2s ease;
}

.limel-select__selected-option {
    display: flex;
    align-items: center;

    box-sizing: border-box;
    outline: none;

    align-self: center;
    min-width: 0; // makes it truncate and prevents the select to grow wider than its container
    padding: 0 0.25rem 0 1rem;
}

.limel-select__selected-option__icon {
    margin-right: functions.pxToRem(8);
    margin-left: functions.pxToRem(-8);
    flex-shrink: 0;
}

.limel-select__selected-option__text {
    .mdc-select:not(.mdc-select--disabled) & {
        @include shared_input-select-picker.looks-like-input-label;
    }
    @include mixins.truncate-text;
}

.limel-select {
    flex-wrap: wrap;
    width: 100%;

    &:not(.limel-select--readonly) {
        .limel-select-trigger {
            background-color: shared_input-select-picker.$background-color-focused;
        }
    }

    .mdc-select__anchor {
        height: functions.pxToRem(36);
        padding-left: functions.pxToRem(0);
    }
    .limel-select-trigger {
        border: none;
        height: shared_input-select-picker.$height-of-mdc-text-field;
        display: inline-flex;
        align-items: center;

        border-radius: functions.pxToRem(5);

        .mdc-floating-label {
            color: shared_input-select-picker.$label-color;
            width: calc(
                100% - #{functions.pxToRem(16)}
            ); //This forces the label to truncate when container is too little.
            &.mdc-floating-label--float-above {
                font-size: shared_input-select-picker.$cropped-label-hack--font-size;
                transform: translateY(functions.pxToRem(-27)) scale(0.75);
            }
        }
    }

    .limel-select-trigger,
    .limel-select__selected-option {
        width: 100%;
    }

    .mdc-select__dropdown-icon {
        margin-right: 0.25rem;
        margin-left: 0.25rem;
    }

    &.mdc-select--disabled {
        .limel-select-trigger {
            @include shared_input-select-picker.looks-disabled;
            box-shadow: var(--button-shadow-normal);
        }
        .mdc-select__dropdown-icon {
            svg {
                fill: rgb(var(--contrast-800));
            }
        }
    }

    &:not(.mdc-select--disabled) {
        .mdc-select__dropdown-icon {
            svg {
                fill: rgb(var(--contrast-1000));
            }
        }

        .limel-select-trigger {
            @include mixins.is-elevated-clickable;
            @include mixins.visualize-keyboard-focus;

            &.limel-select--focused {
                background-color: shared_input-select-picker.$background-color-focused;

                .mdc-floating-label {
                    color: var(--mdc-theme-primary);
                }

                .mdc-select__dropdown-icon {
                    svg {
                        fill: var(--mdc-theme-primary);
                    }
                }

                .mdc-select__dropdown-icon-graphic {
                    transform: rotate(-180deg);
                }
            }

            &[aria-expanded]:not([aria-expanded='false']),
            &[aria-expanded='true'] {
                box-shadow: var(--button-shadow-inset-pressed);
            }
        }
    }

    &.limel-select--required {
        .mdc-floating-label::after {
            content: '*';
        }
    }

    &.limel-select--invalid {
        .limel-select__selected-option__text,
        .invalid-icon {
            color: var(--lime-error-text-color);
        }
        .mdc-floating-label:not(.mdc-floating-label--float-above) {
            max-width: calc(
                100% - #{functions.pxToRem(64)}
            ); // leaves space for the invalid-icon
        }
    }
}

.invalid-icon {
    flex-shrink: 0;
}

select.limel-select__native-control {
    position: absolute;
    top: 0;
    left: 0;

    width: 100%;
    height: 100%;
    opacity: 0;
    border: 0;
}

@import './partial-styles/_readonly';
@import './partial-styles/_helper-text';
