/**
* :::important
* The `CheckboxTemplate` can be imported and used in the HTML of
* other components, to render a non-functional and decorative checkbox in
* their UI. An example of this is the list component.
* This means the content of `CheckboxTemplate` will become a part of the
* consumer's DOM structure.
*
* Additionally, the consumer components' also need to import the current `.scss`
* file into their own styles file, for the checkbox to be rendered correctly!
* This means, if the styles in this file are not "specific" enough,
* there is a risk that the consumer component's styles are affected by
* our styles here.
*
* For instance if the consumer has a `<label>` or `<svg>` element,
* it might unintentionally inherit styles from the checkbox; unless we
* make the such styles more specific here.
*
* Naturally, we cannot mitigate all sorts of potential styling problems.
* The consumer component should be aware of this issue too.
* But we can ensure that our styles here both make sense,
* are readable, and are as specific as possible to avoid unintended side effects.
* :::
*/

@use '../../style/mixins';

/**
* @prop --checkbox-unchecked-border-color: Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`.
*/

@forward '../../style/internal/boolean-input.scss';

:host(limel-checkbox) {
    min-height: var(--limel-checkbox-min-height, 2.5rem); // prevents flickering
    // when switching between `readonly` and normal states in `limel-checkbox`,
    // but not where `CheckboxTemplate` is imported & used.
}

.box {
    &:after {
        .indeterminate & {
            opacity: 1;
            width: calc(var(--limel-boolean-input-box-size) - 0.5rem);
        }
    }
}

.checkbox {
    svg.check-mark {
        position: absolute;
        z-index: 1;
        inset: 0;

        transform: translate3d(-0.125rem, -0.125rem, 0);

        width: var(--limel-boolean-input-box-size);
        height: var(--limel-boolean-input-box-size);

        padding: 0.25rem;

        color: rgb(var(--color-white));
        opacity: 0;

        stroke-width: 0.1875rem; // 3px
        stroke: currentColor;
        stroke-linecap: round;
        stroke-linejoin: round;

        path {
            stroke-dashoffset: 29.7833;
            stroke-dasharray: 29.7833;
            transition: stroke-dashoffset 180ms cubic-bezier(0.4, 0, 0.6, 1);
        }
    }

    &:not(.indeterminate):has(input[type='checkbox']:checked) {
        svg.check-mark {
            opacity: 1;

            path {
                stroke-dashoffset: 0;
            }
        }
    }
}

limel-dynamic-label {
    margin-top: 0.375rem;
    margin-left: -0.25rem;
}

@include mixins.hide-helper-line-when-not-needed(limel-checkbox);
