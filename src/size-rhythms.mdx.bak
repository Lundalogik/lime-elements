---
name: Size rhythms
route: /size-rhythms
menu: Design Guidelines
---

# Size rhythms

To generate a consistent layout and visual expression, we only use sizes that are submultiples of four (4 * x). For example 4, 8, 12, 16, 20, and so on. The only exceptions are numbers 1 and 2 which are needed for some visual details such as borders.

It is very important to follow this convention, specially for creation of custom components which are not directly using a Lime Element. For instance, if you want to create a custom row of buttons (not directly using Lime Elements) with this sizing convention, its `height` and `line-height` can be 40 units, the `padding-left` and `padding-right` can be 12 units, and its `margin-left` and `margin-right` which set the distance to the next or previous buttons can be for example 4 or 2, or even 6. Even though 6 is not a submultiple of 4, it sums up to a 12 units distance between two buttons in a row; and since 12 is a submultiple of 4, the result will be moaðŸ‘Œ anyway.

<limel-example name="limel-example-size" />

### REM
**Note** that we only use `rem` units. By using our custom SASS function, you can effortlessly leave the job of unit conversion to the system. So if you think something should be rendered 40px wide on the screen, you you don't need to calculate the respective value in REM. Just type `width: pxToRem(40);` in your SCSS code.

### Exceptions
There are exceptions where we do not follow the abovementioned sizing convention (submultiples of 4). These exceptions are:
* `font-size`: how fonts are rendered are dependent on the typography and design of the font itself. Fonts not follow the same logic of simple geometric shapes of the UI. Therefore, using incremental rhythm based on 4 for font sizes (e.g. for H1, H2, H3, etc...) will generate huge font sizes which won't be usable. Also other numbers such as 14 may appear more appealing as a balanced and readable font size compared to 16, or 12.
* `border-radius`: how a value of 4 is rendered as a border radius is slightly too-little for the type of visual expression we want to achieve for example for a small clickable element like a button. This is while a value of 8 is too much. Thus
* `box-shadow` or `drop-shadow`: These values should also be flexible depending on the style needs.
