# Natural language in which you want CodeRabbit to write the review.
language: en-US

# Set the tone of reviews and chat.
# Example: 'You must use talk like Mr. T. I pity the fool who doesn't!'
tone_instructions: ''

# Enable early-access features.
early_access: false

# Enable free tier features for users not on a paid plan.
enable_free_tier: true

reviews:
  # Set the profile for reviews. Assertive profile yields more feedback,
  # that may be considered nitpicky.
  profile: assertive

  # Approve the review once CodeRabbit's comments are resolved.
  request_changes_workflow: false

  # Generate a high level summary of the changes in the PR/MR description.
  high_level_summary: true

  # Placeholder in the PR/MR description that gets replaced with the high level
  # summary.
  high_level_summary_placeholder: '@coderabbitai summary'

  # Include the high level summary in the walkthrough comment.
  high_level_summary_in_walkthrough: false

  # Add this keyword in the PR title to auto-generate the title.
  auto_title_placeholder: '@coderabbitai'

  # Custom instructions for auto-generating the PR title.
  auto_title_instructions: ''

  # Post review details on each review.
  # Additionally, post a review status when a review is skipped in
  # certain cases.
  review_status: true

  # Set the commit status to 'pending' when the review is in progress and
  #  'success' when it is complete.
  commit_status: true

  # Set the commit status to 'failure' when the PR cannot be reviewed
  # by CodeRabbit for any reason.
  fail_commit_status: false

  # Generate walkthrough in a markdown collapsible section.
  collapse_walkthrough: false

  # Generate a summary of the changed files in the walkthrough.
  changed_files_summary: true

  # Generate sequence diagrams in the walkthrough.
  sequence_diagrams: true

  # Generate an assessment of how well the changes address the linked
  # issues in the walkthrough.
  assess_linked_issues: true

  # Include possibly related issues in the walkthrough.
  related_issues: true

  # Include possibly related pull requests in the walkthrough.
  related_prs: true

  # Suggest labels based on the changes in the pull request in the walkthrough.
  suggested_labels: true

  # Automatically apply the suggested labels to the PR.
  auto_apply_labels: false

  # Suggest reviewers based on the changes in the pull request in
  # the walkthrough.
  suggested_reviewers: true

  # Generate a poem in the walkthrough comment.
  poem: false

  # Provide guidelines for suggesting labels for the PR/MR.
  # When specific labels or instructions are provided, only those labels are
  # considered, though previous examples are still used to inform
  # the suggestions. If no such labels are provided, suggestions are based
  # solely on previous PRs.
  labeling_instructions: []

  # Specify file patterns to include or exclude in a review using glob
  # patterns (e.g., !dist/**, src/**). These patterns also apply to
  # 'git sparse-checkout', including specified patterns and ignoring excluded
  # ones (starting with '!') when cloning the repository.
  path_filters: ['!etc/lime-elements.api.md']

  path_instructions: []

  # Abort the in-progress review if the pull request is closed or merged.
  abort_on_close: true

  auto_review:
    # Automatic code review
    enabled: true

    # Automatic incremental code review on each push
    auto_incremental_review: false

    # Ignore reviewing if the title of the pull request contains any of these
    # keywords (case-insensitive).
    ignore_title_keywords: []

    # Restrict automatic reviews to only those pull requests that match one of
    # the specified labels.
    labels: []

    # Review draft PRs.
    drafts: false

    # Base branches (other than the default branch) to review.
    # Accepts regex patterns.
    base_branches: []

  finishing_touches:
    docstrings:
      # Allow CodeRabbit to generate docstrings for PRs.
      enabled: true

  tools:
    shellcheck:
      enabled: true
    ruff:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_only: false
      level: default
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
    biome:
      enabled: true
    hadolint:
      enabled: true
    swiftlint:
      enabled: false
    phpstan:
      enabled: false
      level: default
    golangci-lint:
      enabled: false
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    detekt:
      enabled: false
    eslint:
      enabled: true
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    actionlint:
      enabled: true
    pmd:
      enabled: false
    cppcheck:
      enabled: false
    semgrep:
      enabled: true
    circleci:
      enabled: false
    ast-grep:
      packages: []
      rule_dirs: []
      util_dirs: []
      essential_rules: true
chat:
  # Enable the bot to reply automatically without requiring the user to tag it.
  auto_reply: true
  integrations:
    jira:
      # Enable the Jira integration for opening issues, etc. 'auto' disables
      # the integration for public repositories.
      usage: disabled
    linear:
      # Enable the Linear integration for opening issues, etc. 'auto' disables
      # the integration for public repositories.
      usage: disabled
knowledge_base:
  # Opt out of all knowledge base features that require data retention.
  opt_out: false
  web_search:
    # Enable the web search integration.
    enabled: true
  learnings:
    # Specify the scope of learnings to use for the knowledge base.
    # 'local' uses the repository's learnings,
    # 'global' uses the organization's learnings, and
    # 'auto' uses repository's learnings for public repositories and
    # organization's learnings for private repositories.
    scope: auto
  issues:
    # Specify the scope of git platform (GitHub/GitLab) issues to use for the
    # knowledge base.
    # 'local' uses the repository's issues,
    # 'global' uses the organization's issues, and
    # 'auto' uses repository's issues for public repositories and
    # organization's issues for private repositories.
    scope: auto
  jira:
    usage: disabled
    project_keys: []
  linear:
    usage: disabled
    team_keys: []
  pull_requests:
    # Specify the scope of pull requests to use for the knowledge base.
    # 'local' uses the repository's pull requests,
    # 'global' uses the organization's pull requests, and
    # 'auto' uses repository's pull requests for public repositories and
    # organization's pull requests for private repositories.
    scope: auto
code_generation:
  docstrings:
    # Natural language in which you want CodeRabbit to generate docstrings.
    language: en-US
