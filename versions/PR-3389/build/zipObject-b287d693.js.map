{"version":3,"names":["baseZipObject","props","values","assignFunc","index","length","valsLength","result","value","undefined","zipObject","assignValue"],"sources":["./node_modules/lodash-es/_baseZipObject.js","./node_modules/lodash-es/zipObject.js"],"sourcesContent":["/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n"],"mappings":"+CASA,SAASA,EAAcC,EAAOC,EAAQC,GACpC,IAAIC,GAAS,EACTC,EAASJ,EAAMI,OACfC,EAAaJ,EAAOG,OACpBE,EAAS,GAEb,QAASH,EAAQC,EAAQ,CACvB,IAAIG,EAAQJ,EAAQE,EAAaJ,EAAOE,GAASK,UACjDN,EAAWI,EAAQN,EAAMG,GAAQI,EACrC,CACE,OAAOD,CACT,CCDA,SAASG,EAAUT,EAAOC,GACxB,OAAOF,EAAcC,GAAS,GAAIC,GAAU,GAAIS,EAClD,Q"}