{"version":3,"names":["CollapsibleSectionInvalidExample","this","onChange","event","value","detail","isInvalid","endsWith","getHelperText","render","h","header","invalid","isOpen","label","placeholder","helperText"],"sources":["./src/components/collapsible-section/examples/collapsible-section-invalid.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n\n/**\n * Using the `invalid` prop\n * When a section's `invalid` prop is set to `true`, it can display a visual feedback,\n * as well as an accessible indication to the assistive technologies,\n * to indicate that the content inside the section is invalid.\n */\n\n@Component({\n    tag: 'limel-example-collapsible-section-invalid',\n    shadow: true,\n})\nexport class CollapsibleSectionInvalidExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-collapsible-section\n                header=\"This section can become invalid\"\n                invalid={this.isInvalid()}\n                isOpen={true}\n            >\n                <p>\n                    Typing an invalid email address here would result in failing\n                    the simple validation script, and accordingly will set the\n                    section as invalid as well.\n                </p>\n                <limel-input-field\n                    label=\"Field with custom validation\"\n                    placeholder=\"Type an email address here\"\n                    helperText={this.getHelperText()}\n                    value={this.value}\n                    onChange={this.onChange}\n                    invalid={this.isInvalid()}\n                />\n                <p>\n                    This way, if the collapsible section is closed, the user\n                    will still get informed about potential problems or nested\n                    invalid fields within the section.\n                </p>\n            </limel-collapsible-section>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private isInvalid = () => {\n        return !!(this.value && !this.value.endsWith('@test.com'));\n    };\n\n    private getHelperText = () => {\n        if (this.isInvalid()) {\n            return 'Please type a valid email address';\n        }\n    };\n}\n"],"mappings":"qDAaaA,EAAgC,M,yBAiCjCC,KAAAC,SAAYC,IAChBF,KAAKG,MAAQD,EAAME,MAAM,EAGrBJ,KAAAK,UAAY,OACNL,KAAKG,QAAUH,KAAKG,MAAMG,SAAS,cAGzCN,KAAAO,cAAgB,KACpB,GAAIP,KAAKK,YAAa,CAClB,MAAO,mC,wBAvCRG,SACH,OACIC,EAAA,6BACIC,OAAO,kCACPC,QAASX,KAAKK,YACdO,OAAQ,MAERH,EAAA,gKAKAA,EAAA,qBACII,MAAM,+BACNC,YAAY,6BACZC,WAAYf,KAAKO,gBACjBJ,MAAOH,KAAKG,MACZF,SAAUD,KAAKC,SACfU,QAASX,KAAKK,cAElBI,EAAA,mK"}