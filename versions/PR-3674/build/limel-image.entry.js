import{r as t,h as i}from"./index-2714248e.js";const s=":host{display:inline-block}img{width:100%}";const e=class{constructor(i){t(this,i);this.intersectionObserver=null;this.currentImageElement=null;this.setCurrentImageElement=t=>{this.currentImageElement=t};this.handleImageIntersection=t=>{var i;for(const s of t){if(s.isIntersecting){const t=s.target;const e=t.dataset.src;if(e){t.setAttribute("src",e);delete t.dataset.src}(i=this.intersectionObserver)===null||i===void 0?void 0:i.unobserve(t)}}};this.image=undefined}componentDidRender(){this.teardownImageIntersectionObserver();this.setupImageIntersectionObserver()}disconnectedCallback(){this.teardownImageIntersectionObserver()}render(){var t;if(!((t=this.image)===null||t===void 0?void 0:t.src)){return null}const{src:s,alt:e="",loading:n="eager"}=this.image;const r=n==="lazy";const o=Object.assign(Object.assign({alt:e},r?{"data-src":s}:{src:s}),{ref:this.setCurrentImageElement});return i("img",Object.assign({},o))}setupImageIntersectionObserver(){var t;if(!this.image||this.image.loading!=="lazy"){return}if(!this.currentImageElement){return}if(!this.intersectionObserver){this.intersectionObserver=new IntersectionObserver(this.handleImageIntersection)}(t=this.intersectionObserver)===null||t===void 0?void 0:t.observe(this.currentImageElement)}teardownImageIntersectionObserver(){var t;(t=this.intersectionObserver)===null||t===void 0?void 0:t.disconnect();this.intersectionObserver=null;this.currentImageElement=null}};e.style=s;export{e as limel_image};
//# sourceMappingURL=limel-image.entry.js.map