import{r as i,h as t,g as s}from"./index-2714248e.js";const e="limel-image{box-sizing:border-box;display:inline-block;max-width:100%}limel-image img{display:block;max-width:100%;height:auto}";const n=class{constructor(t){i(this,t);this.intersectionObserver=null;this.handleImageIntersection=i=>{var t;for(const s of i){if(s.isIntersecting){const i=s.target;const e=i.dataset.src;if(e){i.setAttribute("src",e);delete i.dataset.src}(t=this.intersectionObserver)===null||t===void 0?void 0:t.unobserve(i)}}};this.src=undefined;this.alt="";this.lazyLoad=false}componentDidRender(){this.setupImageIntersectionObserver()}disconnectedCallback(){this.teardownImageIntersectionObserver()}render(){if(!this.src){return null}const i=Object.assign({alt:this.alt},this.lazyLoad?{"data-src":this.src}:{src:this.src});return t("img",Object.assign({},i))}setupImageIntersectionObserver(){var i,t,s;if(!this.src||!this.lazyLoad){return}if(!this.intersectionObserver){this.intersectionObserver=new IntersectionObserver(this.handleImageIntersection)}const e=(i=this.host.shadowRoot)!==null&&i!==void 0?i:this.host;const n=(t=e===null||e===void 0?void 0:e.querySelectorAll("img"))!==null&&t!==void 0?t:[];for(const i of n){(s=this.intersectionObserver)===null||s===void 0?void 0:s.observe(i)}}teardownImageIntersectionObserver(){var i;(i=this.intersectionObserver)===null||i===void 0?void 0:i.disconnect();this.intersectionObserver=null}get host(){return s(this)}};n.style=e;export{n as limel_image};
//# sourceMappingURL=limel-image.entry.js.map