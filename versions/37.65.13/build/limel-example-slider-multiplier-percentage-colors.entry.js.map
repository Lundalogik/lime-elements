{"version":3,"names":["SliderMultiplierPercentageColorsExample","this","factor","minValue","maxValue","changeHandler","event","value","detail","setDisabled","stopPropagation","disabled","setReadonly","readonly","render","h","class","label","unit","valuemax","valuemin","onChange","checked"],"sources":["./src/components/slider/examples/slider-multiplier-percentage-colors.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n\n/**\n * With percentage colors\n * You can add the `displays-percentage-colors` class to your slider component\n * and it will automatically visualize current percentage colors in real-time.\n *\n * The colors change with intervals of 10 as users drags the slider pin.\n * The color spectrum is not modifiable, and looks like red → orange → yellow\n * → green → teal.\n */\n@Component({\n    tag: 'limel-example-slider-multiplier-percentage-colors',\n    shadow: true,\n})\nexport class SliderMultiplierPercentageColorsExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value = 0.25;\n\n    private factor = 100;\n    private minValue = 0;\n    private maxValue = 1;\n\n    public render() {\n        return [\n            <limel-slider\n                class=\"displays-percentage-colors\"\n                label=\"Slider with percentage colors\"\n                unit=\" %\"\n                value={this.value}\n                factor={this.factor}\n                valuemax={this.maxValue}\n                valuemin={this.minValue}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.changeHandler}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"],"mappings":"qDAeaA,EAAuC,M,yBAUxCC,KAAAC,OAAS,IACTD,KAAAE,SAAW,EACXF,KAAAG,SAAW,EAgCXH,KAAAI,cAAiBC,IACrBL,KAAKM,MAAQD,EAAME,MAAM,EAGrBP,KAAAQ,YAAeH,IACnBA,EAAMI,kBACNT,KAAKU,SAAWL,EAAME,MAAM,EAGxBP,KAAAW,YAAeN,IACnBA,EAAMI,kBACNT,KAAKY,SAAWP,EAAME,MAAM,E,cArDb,M,cAGA,M,WAGH,G,CAMTM,SACH,MAAO,CACHC,EAAA,gBACIC,MAAM,6BACNC,MAAM,gCACNC,KAAK,KACLX,MAAON,KAAKM,MACZL,OAAQD,KAAKC,OACbiB,SAAUlB,KAAKG,SACfgB,SAAUnB,KAAKE,SACfQ,SAAUV,KAAKU,SACfE,SAAUZ,KAAKY,SACfQ,SAAUpB,KAAKI,gBAEnBU,EAAA,8BACIA,EAAA,kBACIO,QAASrB,KAAKU,SACdM,MAAM,WACNI,SAAUpB,KAAKQ,cAEnBM,EAAA,kBACIO,QAASrB,KAAKY,SACdI,MAAM,WACNI,SAAUpB,KAAKW,eAGvBG,EAAA,uBAAqBR,MAAON,KAAKM,Q"}