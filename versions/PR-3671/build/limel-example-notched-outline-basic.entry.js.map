{"version":3,"names":["notchedOutlineBasicCss","NotchedOutlineBasicExample","this","handleInput","event","input","target","inputValue","value","hasValue","setDisabled","stopPropagation","disabled","detail","setReadonly","readonly","setRequired","required","setInvalid","invalid","setHasValue","setHasLeadingIcon","hasLeadingIcon","setHasFloatingLabel","hasFloatingLabel","render","id","h","labelId","label","slot","type","onInput","checked","onChange","style","gridColumn"],"sources":["./src/components/notched-outline/examples/notched-outline-basic.scss?tag=limel-example-notched-outline-basic&encapsulation=shadow","./src/components/notched-outline/examples/notched-outline-basic.tsx"],"sourcesContent":["@use '../../../style/mixins';\n\n* {\n    box-sizing: border-box;\n}\n\nsection {\n    padding: 1rem;\n    @include mixins.add-chessboard-background();\n}\n\ninput[type='text'] {\n    // Overriding some of the native input styles for the\n    // sake of this example.\n    border: none;\n    outline: none;\n\n    height: 2.5rem;\n    width: 100%;\n    padding: 0 1rem;\n\n    background-color: transparent;\n}\n","import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n *\n * Notice that the wrapping div has a hardcoded height,\n * which results in the notched outline to wrap around\n * the div.\n */\n@Component({\n    tag: 'limel-example-notched-outline-basic',\n    shadow: true,\n    styleUrl: 'notched-outline-basic.scss',\n})\nexport class NotchedOutlineBasicExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private hasValue = false;\n\n    @State()\n    private hasLeadingIcon = false;\n\n    @State()\n    private hasFloatingLabel = false;\n\n    @State()\n    private inputValue: string;\n\n    public render() {\n        const id = 'abcd';\n\n        return [\n            <section>\n                <limel-notched-outline\n                    labelId={id}\n                    label=\"Label\"\n                    required={this.required}\n                    invalid={this.invalid}\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                    hasValue={this.hasValue}\n                    hasLeadingIcon={this.hasLeadingIcon}\n                    hasFloatingLabel={this.hasFloatingLabel}\n                >\n                    <input\n                        slot=\"content\"\n                        id={id}\n                        type=\"text\"\n                        required={this.required}\n                        disabled={this.disabled}\n                        readonly={this.readonly}\n                        value={this.inputValue}\n                        onInput={this.handleInput}\n                    />\n                </limel-notched-outline>\n            </section>,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <hr\n                    style={{\n                        gridColumn: '1/-1',\n                    }}\n                />\n                <limel-checkbox\n                    checked={this.hasValue}\n                    label=\"Has value\"\n                    onChange={this.setHasValue}\n                />\n                <limel-checkbox\n                    checked={this.hasLeadingIcon}\n                    label=\"Has leading icon\"\n                    onChange={this.setHasLeadingIcon}\n                />\n                <limel-checkbox\n                    checked={this.hasFloatingLabel}\n                    label=\"Has floating label\"\n                    onChange={this.setHasFloatingLabel}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.hasValue} />,\n        ];\n    }\n\n    private handleInput = (event: Event) => {\n        const input = event.target as HTMLInputElement;\n        this.inputValue = input.value;\n        this.hasValue = !!input.value;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private setHasValue = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.hasValue = event.detail;\n    };\n\n    private setHasLeadingIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.hasLeadingIcon = event.detail;\n    };\n\n    private setHasFloatingLabel = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.hasFloatingLabel = event.detail;\n    };\n}\n"],"mappings":"+CAAA,MAAMA,EAAyB,id,MCclBC,EAA0B,M,yBAmG3BC,KAAAC,YAAeC,IACnB,MAAMC,EAAQD,EAAME,OACpBJ,KAAKK,WAAaF,EAAMG,MACxBN,KAAKO,WAAaJ,EAAMG,KAAK,EAGzBN,KAAAQ,YAAeN,IACnBA,EAAMO,kBACNT,KAAKU,SAAWR,EAAMS,MAAM,EAGxBX,KAAAY,YAAeV,IACnBA,EAAMO,kBACNT,KAAKa,SAAWX,EAAMS,MAAM,EAGxBX,KAAAc,YAAeZ,IACnBA,EAAMO,kBACNT,KAAKe,SAAWb,EAAMS,MAAM,EAGxBX,KAAAgB,WAAcd,IAClBA,EAAMO,kBACNT,KAAKiB,QAAUf,EAAMS,MAAM,EAGvBX,KAAAkB,YAAehB,IACnBA,EAAMO,kBACNT,KAAKO,SAAWL,EAAMS,MAAM,EAGxBX,KAAAmB,kBAAqBjB,IACzBA,EAAMO,kBACNT,KAAKoB,eAAiBlB,EAAMS,MAAM,EAG9BX,KAAAqB,oBAAuBnB,IAC3BA,EAAMO,kBACNT,KAAKsB,iBAAmBpB,EAAMS,MAAM,E,cAvIrB,M,cAGA,M,cAGA,M,aAGD,M,cAGC,M,oBAGM,M,sBAGE,M,0BAKpBY,SACH,MAAMC,EAAK,OAEX,MAAO,CACHC,EAAA,eACIA,EAAA,yBACIC,QAASF,EACTG,MAAM,QACNZ,SAAUf,KAAKe,SACfE,QAASjB,KAAKiB,QACdP,SAAUV,KAAKU,SACfG,SAAUb,KAAKa,SACfN,SAAUP,KAAKO,SACfa,eAAgBpB,KAAKoB,eACrBE,iBAAkBtB,KAAKsB,kBAEvBG,EAAA,SACIG,KAAK,UACLJ,GAAIA,EACJK,KAAK,OACLd,SAAUf,KAAKe,SACfL,SAAUV,KAAKU,SACfG,SAAUb,KAAKa,SACfP,MAAON,KAAKK,WACZyB,QAAS9B,KAAKC,gBAI1BwB,EAAA,8BACIA,EAAA,kBACIM,QAAS/B,KAAKU,SACdiB,MAAM,WACNK,SAAUhC,KAAKQ,cAEnBiB,EAAA,kBACIM,QAAS/B,KAAKa,SACdc,MAAM,WACNK,SAAUhC,KAAKY,cAEnBa,EAAA,kBACIM,QAAS/B,KAAKe,SACdY,MAAM,WACNK,SAAUhC,KAAKc,cAEnBW,EAAA,kBACIM,QAAS/B,KAAKiB,QACdU,MAAM,UACNK,SAAUhC,KAAKgB,aAEnBS,EAAA,MACIQ,MAAO,CACHC,WAAY,UAGpBT,EAAA,kBACIM,QAAS/B,KAAKO,SACdoB,MAAM,YACNK,SAAUhC,KAAKkB,cAEnBO,EAAA,kBACIM,QAAS/B,KAAKoB,eACdO,MAAM,mBACNK,SAAUhC,KAAKmB,oBAEnBM,EAAA,kBACIM,QAAS/B,KAAKsB,iBACdK,MAAM,qBACNK,SAAUhC,KAAKqB,uBAGvBI,EAAA,uBAAqBnB,MAAON,KAAKO,W"}