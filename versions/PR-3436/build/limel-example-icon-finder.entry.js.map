{"version":3,"names":["IconFinder","this","indexedIcons","loadIconIndex","async","response","fetch","json","_a","call","renderIconButton","icon","iconName","id","replace","label","h","onClick","copyIconName","onInput","event","CustomEvent","textValue","detail","onKeyUp","key","ENTER","keyCode","ENTER_KEY_CODE","trim","value","createChip","searchIcons","icons","forEach","search","hits","tags","filter","tag","includes","text","length","push","Set","chipSetOnChange","componentWillLoad","render","type","onChange","searchLabel","emptyInputOnBlur","leadingIcon","map","target","element","document","createElement","body","appendChild","select","execCommand","removeChild","console","log","name","removable"],"sources":["./src/components/icon/examples/icon-finder.tsx"],"sourcesContent":["import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\ninterface Icon {\n    id: string;\n    tags: string[];\n}\n\n/**\n * Icon Finder\n *\n * Used in the docs for `limel-icon`.\n */\n@Component({\n    tag: 'limel-example-icon-finder',\n    shadow: true,\n})\nexport class IconFinder {\n    @State()\n    private value: Chip[] = [];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private icons: Icon[] = [];\n\n    private indexedIcons: any[] = [];\n\n    public componentWillLoad() {\n        this.loadIconIndex();\n    }\n\n    private loadIconIndex = async () => {\n        const response = await fetch(\n            'https://lundalogik.github.io/lime-icons8/assets/icon-index.json',\n        );\n        const json = await response?.json?.();\n        this.indexedIcons = json;\n    };\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Icon finder\"\n                type=\"input\"\n                value={this.value}\n                onChange={this.chipSetOnChange}\n                onInput={this.onInput}\n                onKeyUp={this.onKeyUp}\n                searchLabel=\"Type and press enter to search\"\n                emptyInputOnBlur={true}\n                leadingIcon={'search'}\n            />,\n            <div> {this.icons.map(this.renderIconButton)}</div>,\n        ];\n    }\n\n    private renderIconButton = (icon: Icon) => {\n        const iconName = icon.id.replace('.svg', '');\n        const label = `Copy ${iconName}`;\n\n        return (\n            <limel-icon-button\n                label={label}\n                icon={iconName}\n                onClick={this.copyIconName}\n            />\n        );\n    };\n\n    private copyIconName(event) {\n        const iconName = event.target.icon;\n        const element = document.createElement('textarea');\n        element.value = iconName;\n        document.body.appendChild(element);\n        element.select();\n        document.execCommand('copy');\n        document.body.removeChild(element);\n        console.log(`copied icon name '${iconName}' to clipboard`);\n    }\n\n    private onInput = (event: LimelChipSetCustomEvent<string> | InputEvent) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.searchIcons();\n            this.textValue = '';\n        }\n    };\n\n    private searchIcons = () => {\n        this.icons = [];\n        this.indexedIcons.forEach((icon: Icon) => {\n            this.value.forEach((search: Chip) => {\n                const hits = icon.tags.filter((tag) =>\n                    tag.includes(search.text),\n                );\n                if (hits.length || icon.id.includes(search.text)) {\n                    this.icons.push(icon);\n                }\n            });\n        });\n        this.icons = [...new Set(this.icons)];\n    };\n\n    private chipSetOnChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n        this.searchIcons();\n    };\n\n    private createChip(name: string): Chip {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n        };\n    }\n}\n"],"mappings":"uGAkBaA,EAAU,M,yBAUXC,KAAAC,aAAsB,GAMtBD,KAAAE,cAAgBC,U,MACpB,MAAMC,QAAiBC,MACnB,mEAEJ,MAAMC,SAAaC,EAAAH,IAAQ,MAARA,SAAQ,SAARA,EAAUE,QAAI,MAAAC,SAAA,SAAAA,EAAAC,KAAAJ,IACjCJ,KAAKC,aAAeK,CAAI,EAoBpBN,KAAAS,iBAAoBC,IACxB,MAAMC,EAAWD,EAAKE,GAAGC,QAAQ,OAAQ,IACzC,MAAMC,EAAQ,QAAQH,IAEtB,OACII,EAAA,qBACID,MAAOA,EACPJ,KAAMC,EACNK,QAAShB,KAAKiB,cAChB,EAeFjB,KAAAkB,QAAWC,IACf,GAAIA,aAAiBC,YAAa,CAC9BpB,KAAKqB,UAAYF,EAAMG,M,GAIvBtB,KAAAuB,QAAWJ,IACf,IACKA,EAAMK,MAAQC,GAASN,EAAMO,UAAYC,IAC1C3B,KAAKqB,UAAUO,OACjB,CACE5B,KAAK6B,MAAQ,IACN7B,KAAK6B,MACR7B,KAAK8B,WAAW9B,KAAKqB,UAAUO,SAEnC5B,KAAK+B,cACL/B,KAAKqB,UAAY,E,GAIjBrB,KAAA+B,YAAc,KAClB/B,KAAKgC,MAAQ,GACbhC,KAAKC,aAAagC,SAASvB,IACvBV,KAAK6B,MAAMI,SAASC,IAChB,MAAMC,EAAOzB,EAAK0B,KAAKC,QAAQC,GAC3BA,EAAIC,SAASL,EAAOM,QAExB,GAAIL,EAAKM,QAAU/B,EAAKE,GAAG2B,SAASL,EAAOM,MAAO,CAC9CxC,KAAKgC,MAAMU,KAAKhC,E,IAEtB,IAENV,KAAKgC,MAAQ,IAAI,IAAIW,IAAI3C,KAAKgC,OAAO,EAGjChC,KAAA4C,gBAAmBzB,IACvBnB,KAAK6B,MAAQV,EAAMG,OACnBtB,KAAK+B,aAAa,E,WApGE,G,eAGJ,G,WAGI,E,CAIjBc,oBACH7C,KAAKE,e,CAWF4C,SACH,MAAO,CACH/B,EAAA,kBACID,MAAM,cACNiC,KAAK,QACLlB,MAAO7B,KAAK6B,MACZmB,SAAUhD,KAAK4C,gBACf1B,QAASlB,KAAKkB,QACdK,QAASvB,KAAKuB,QACd0B,YAAY,iCACZC,iBAAkB,KAClBC,YAAa,WAEjBpC,EAAA,eAAOf,KAAKgC,MAAMoB,IAAIpD,KAAKS,mB,CAiB3BQ,aAAaE,GACjB,MAAMR,EAAWQ,EAAMkC,OAAO3C,KAC9B,MAAM4C,EAAUC,SAASC,cAAc,YACvCF,EAAQzB,MAAQlB,EAChB4C,SAASE,KAAKC,YAAYJ,GAC1BA,EAAQK,SACRJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,GAC1BQ,QAAQC,IAAI,qBAAqBpD,kB,CA2C7BmB,WAAWkC,GACf,MAAO,CACHpD,GAAIoD,EACJxB,KAAMwB,EACNC,UAAW,K"}