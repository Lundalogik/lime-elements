{"version":3,"names":["profilePictureCss","ProfilePicture","this","removeButtonId","createRandomString","handleNewFiles","event","stopPropagation","disabled","file","_a","detail","isTypeAccepted","accept","filesRejected","emit","revokeObjectUrl","href","fileContent","File","objectUrl","URL","createObjectURL","change","handleRejectedFiles","handleClear","value","undefined","getTranslation","key","translate","get","language","disconnectedCallback","handleValueChange","render","hostClassNames","hasValue","readonly","h","Host","class","renderAvatar","onFilesSelected","onFilesRejected","renderBrowseButton","renderClearButton","type","label","required","invalid","src","getImageSrc","alt","style","fit","loading","renderIcon","icon","getIconName","name","color","_b","backgroundColor","id","onClick","elementId","revokeObjectURL"],"sources":["./src/components/profile-picture/profile-picture.scss?tag=limel-profile-picture&encapsulation=shadow","./src/components/profile-picture/profile-picture.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --profile-picture-border-radius: Border radius of the profile picture. Defaults to `50%`.\n* @prop --profile-picture-size: Defines both the width & height of the profile picture. Defaults to `2rem`.\n* @prop --profile-picture-background-color: Background color of the component; visible when it is empty, or displays a transparent png. Defaults to `rgb(var(--contrast-400))`.\n*/\n\n:host {\n    position: relative;\n\n    display: inline-block;\n\n    border-radius: var(--profile-picture-border-radius, 50%);\n    background-color: var(\n        --profile-picture-background-color,\n        rgb(var(--contrast-400))\n    );\n}\n\n* {\n    box-sizing: border-box;\n}\n\nbutton {\n    all: unset;\n    display: block;\n    @include mixins.visualize-keyboard-focus();\n\n    &.avatar {\n        overflow: hidden;\n        border-radius: var(--profile-picture-border-radius, 50%);\n\n        :host(:not([disabled]):not([disabled='true'])) & {\n            @include mixins.is-flat-clickable();\n        }\n\n        :host([invalid]:not([invalid='false'])) & {\n            box-shadow: var(--shadow-error-state);\n        }\n    }\n\n    &.remove {\n        @include mixins.clear-all-button();\n        position: absolute;\n        top: 0;\n        left: 0;\n        opacity: 0;\n\n        :host(:hover) &,\n        :host(:focus) &,\n        :host(:focus-visible) &,\n        :host(:focus-within) &,\n        :host(:active) & {\n            animation: show 0.4s ease-in-out forwards;\n        }\n    }\n}\n\n@keyframes show {\n    0% {\n        transform: scale(0.9);\n        opacity: 0;\n    }\n    100% {\n        transform: scale(1);\n        opacity: 1;\n    }\n}\n\n// :host(limel-profile-picture[disabled]:not([disabled='false'])) {}\n// :host(limel-profile-picture[readonly]:not([readonly='false'])) {}\n\nlimel-icon {\n    padding: max(1rem, 10%);\n    color: var(--mdc-theme-text-secondary-on-background);\n}\n\nbutton.avatar,\nlimel-icon,\nimg {\n    border-radius: var(--profile-picture-border-radius, 50%);\n\n    width: var(--profile-picture-size, 2rem);\n    height: var(--profile-picture-size, 2rem);\n}\n\nimg {\n    object-fit: var(--limel-profile-picture-object-fit);\n}\n","import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { isTypeAccepted } from '../../util/files';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { getIconName } from '../icon/get-icon-props';\nimport translate from '../../global/translations';\nimport { Languages } from '../date-picker/date.types';\nimport { createRandomString } from '../../util/random-string';\n\ntype ProfilePictureValue = string | FileInfo | undefined;\n\n/**\n * This component displays a profile picture, while allowing the user\n * to change it via a file input or drag-and-drop.\n *\n * @exampleComponent limel-example-profile-picture-basic\n * @exampleComponent limel-example-profile-picture-icon\n * @exampleComponent limel-example-profile-picture-with-value\n * @exampleComponent limel-example-profile-picture-composite\n * @beta\n */\n@Component({\n    tag: 'limel-profile-picture',\n    shadow: true,\n    styleUrl: 'profile-picture.scss',\n})\nexport class ProfilePicture {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Accessible label for the the browse button.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Placeholder icon of the component, displayed when no image is present.\n     */\n    @Prop()\n    public icon: string | Icon = 'user';\n\n    /**\n     * Helper text shown on drag overlay.\n     */\n    @Prop()\n    public helperText?: string;\n\n    /**\n     * Disables user interaction.\n     * Prevents uploading new pictures or removing existing ones.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Readonly prevents changing the value but allows interaction like focus.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Marks the control as required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * Marks the control as invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Current image to display. Either a URL string or a FileInfo with an href.\n     */\n    @Prop()\n    public value?: ProfilePictureValue;\n\n    /**\n     * How the image should fit within the container.\n     * - `cover` will fill the container and crop excess parts.\n     * - `contain` will scale the image to fit within the container without cropping.\n     */\n    @Prop({ reflect: true })\n    public fit: 'cover' | 'contain' = 'cover';\n\n    /**\n     * Accepted file types.\n     */\n    @Prop({ reflect: true })\n    public accept: string =\n        'image/jpeg,image/png,image/heic,.jpg,.jpeg,.png,.heic';\n\n    /**\n     * Emitted when the picture changes (first FileInfo only).\n     */\n    @Event()\n    public change: EventEmitter<FileInfo | undefined>;\n\n    /**\n     * Emitted when a file is rejected by accept filter.\n     */\n    @Event()\n    public filesRejected: EventEmitter<FileInfo[]>;\n\n    @State()\n    private objectUrl?: string;\n\n    private removeButtonId = createRandomString();\n\n    public disconnectedCallback() {\n        this.revokeObjectUrl();\n    }\n\n    @Watch('value')\n    protected handleValueChange() {\n        // Clear previously created object URL when value changes\n        this.revokeObjectUrl();\n    }\n\n    public render() {\n        const hostClassNames = {\n            'has-value': this.hasValue,\n        };\n\n        if (this.readonly) {\n            return <Host class={hostClassNames}>{this.renderAvatar()}</Host>;\n        }\n\n        return (\n            <Host class={hostClassNames}>\n                <limel-file-dropzone\n                    disabled={this.disabled}\n                    accept={this.accept}\n                    onFilesSelected={this.handleNewFiles}\n                    onFilesRejected={this.handleRejectedFiles}\n                >\n                    <limel-file-input\n                        accept={this.accept}\n                        disabled={this.disabled}\n                    >\n                        {this.renderBrowseButton()}\n                    </limel-file-input>\n                </limel-file-dropzone>\n                {this.renderClearButton()}\n            </Host>\n        );\n    }\n\n    private get hasValue(): boolean {\n        if (typeof this.value === 'string') {\n            return !!this.value;\n        }\n\n        if (this.value && (this.value.href || this.value.fileContent)) {\n            return true;\n        }\n\n        return !!this.objectUrl;\n    }\n\n    private renderBrowseButton() {\n        return (\n            <button\n                class=\"avatar\"\n                disabled={this.disabled}\n                type=\"button\"\n                aria-label={this.label}\n                aria-required={this.required ? true : undefined}\n                aria-invalid={this.invalid ? true : undefined}\n            >\n                {this.renderAvatar()}\n            </button>\n        );\n    }\n\n    private renderAvatar() {\n        const src = this.getImageSrc();\n\n        if (src) {\n            return (\n                <img\n                    src={src}\n                    alt=\"\"\n                    style={{\n                        '--limel-profile-picture-object-fit': this.fit,\n                    }}\n                    loading=\"lazy\"\n                />\n            );\n        }\n\n        return this.renderIcon();\n    }\n\n    private renderIcon() {\n        const icon = getIconName(this.icon);\n\n        return (\n            <limel-icon\n                name={icon}\n                style={{\n                    color: `${(this.icon as Icon)?.color}`,\n                    'background-color': `${\n                        (this.icon as Icon)?.backgroundColor\n                    }`,\n                }}\n            />\n        );\n    }\n\n    private renderClearButton() {\n        if (!this.hasValue || this.disabled) {\n            return;\n        }\n\n        return [\n            <button\n                class=\"remove\"\n                id={this.removeButtonId}\n                onClick={this.handleClear}\n            />,\n            <limel-tooltip\n                label={this.getTranslation('profile-picture.remove')}\n                elementId={this.removeButtonId}\n            />,\n        ];\n    }\n\n    private handleNewFiles = (event: CustomEvent<FileInfo[]>) => {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n\n        const file = event.detail?.[0];\n        if (!file) {\n            return;\n        }\n\n        if (!isTypeAccepted(file, this.accept)) {\n            this.filesRejected.emit([file]);\n            return;\n        }\n\n        this.revokeObjectUrl();\n\n        // Create an object URL for immediate preview if no href present\n        if (!file.href && file.fileContent instanceof File) {\n            this.objectUrl = URL.createObjectURL(file.fileContent);\n        }\n\n        this.change.emit(file);\n    };\n\n    private handleRejectedFiles = (event: CustomEvent<FileInfo[]>) => {\n        event.stopPropagation();\n        this.filesRejected.emit(event.detail);\n    };\n\n    private getImageSrc(): string | undefined {\n        if (!this.value) {\n            return this.objectUrl; // Could be set from last selection before parent consumes\n        }\n\n        if (typeof this.value === 'string') {\n            return this.value;\n        }\n\n        if (this.value.href) {\n            return this.value.href;\n        }\n\n        if (this.value.fileContent instanceof File) {\n            if (!this.objectUrl) {\n                this.objectUrl = URL.createObjectURL(this.value.fileContent);\n            }\n\n            return this.objectUrl;\n        }\n\n        return undefined;\n    }\n\n    private revokeObjectUrl() {\n        if (this.objectUrl) {\n            URL.revokeObjectURL(this.objectUrl);\n            this.objectUrl = undefined;\n        }\n    }\n\n    private handleClear = (event: Event) => {\n        event.stopPropagation();\n        this.value = undefined;\n        this.change.emit(undefined);\n    };\n\n    private getTranslation = (key: string) => {\n        return translate.get(key, this.language);\n    };\n}\n"],"mappings":"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"}