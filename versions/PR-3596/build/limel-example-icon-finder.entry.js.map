{"version":3,"names":["IconFinder","this","indexedIcons","loadIconIndex","async","response","fetch","json","_a","call","renderIconButton","icon","iconName","id","replace","label","h","onClick","copyIconName","event","target","copyToClipboard","console","log","onInput","CustomEvent","textValue","detail","onKeyUp","key","ENTER","trim","value","createChip","searchIcons","icons","forEach","search","hits","tags","filter","tag","includes","text","length","push","Set","chipSetOnChange","componentWillLoad","render","Host","type","onChange","searchLabel","emptyInputOnBlur","leadingIcon","map","navigator","clipboard","writeText","err","error","name","removable"],"sources":["./src/components/icon/examples/icon-finder.tsx"],"sourcesContent":["import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\nimport { ENTER } from '../../../util/keycodes';\n\ninterface Icon {\n    id: string;\n    tags: string[];\n}\n\n/**\n * Icon Finder\n *\n * Used in the docs for `limel-icon`.\n */\n@Component({\n    tag: 'limel-example-icon-finder',\n    shadow: true,\n})\nexport class IconFinder {\n    @State()\n    private value: Chip[] = [];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private icons: Icon[] = [];\n\n    private indexedIcons: any[] = [];\n\n    public componentWillLoad() {\n        this.loadIconIndex();\n    }\n\n    private readonly loadIconIndex = async () => {\n        const response = await fetch(\n            'https://lundalogik.github.io/lime-icons8/assets/icon-index.json'\n        );\n        const json = await response?.json?.();\n        this.indexedIcons = json;\n    };\n\n    public render() {\n        return (\n            <Host>\n                <limel-chip-set\n                    label=\"Icon finder\"\n                    type=\"input\"\n                    value={this.value}\n                    onChange={this.chipSetOnChange}\n                    onInput={this.onInput}\n                    onKeyUp={this.onKeyUp}\n                    searchLabel=\"Type and press enter to search\"\n                    emptyInputOnBlur={true}\n                    leadingIcon={'search'}\n                />\n                <div> {this.icons.map(this.renderIconButton)}</div>\n            </Host>\n        );\n    }\n\n    private readonly renderIconButton = (icon: Icon) => {\n        const iconName = icon.id.replace('.svg', '');\n        const label = `Copy ${iconName}`;\n\n        return (\n            <limel-icon-button\n                label={label}\n                icon={iconName}\n                onClick={this.copyIconName}\n            />\n        );\n    };\n\n    private async copyToClipboard(text: string) {\n        try {\n            await navigator.clipboard.writeText(text);\n        } catch (err) {\n            console.error('Failed to copy text: ', err);\n        }\n    }\n\n    private readonly copyIconName = (event: MouseEvent) => {\n        const iconName = (event.target as HTMLLimelIconButtonElement).icon;\n        this.copyToClipboard(iconName);\n        console.log(`copied icon name '${iconName}' to clipboard`);\n    };\n\n    private readonly onInput = (\n        event: LimelChipSetCustomEvent<string> | InputEvent\n    ) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private readonly onKeyUp = (event: KeyboardEvent) => {\n        if (event.key === ENTER && this.textValue.trim()) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.searchIcons();\n            this.textValue = '';\n        }\n    };\n\n    private readonly searchIcons = () => {\n        this.icons = [];\n        this.indexedIcons.forEach((icon: Icon) => {\n            this.value.forEach((search: Chip) => {\n                const hits = icon.tags.filter((tag) =>\n                    tag.includes(search.text)\n                );\n                if (hits.length || icon.id.includes(search.text)) {\n                    this.icons.push(icon);\n                }\n            });\n        });\n        this.icons = [...new Set(this.icons)];\n    };\n\n    private readonly chipSetOnChange = (\n        event: LimelChipSetCustomEvent<Chip[]>\n    ) => {\n        this.value = event.detail;\n        this.searchIcons();\n    };\n\n    private createChip(name: string): Chip {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n        };\n    }\n}\n"],"mappings":"uGAkBaA,EAAU,M,yBAUXC,KAAAC,aAAsB,GAMbD,KAAAE,cAAgBC,U,MAC7B,MAAMC,QAAiBC,MACnB,mEAEJ,MAAMC,SAAaC,EAAAH,IAAQ,MAARA,SAAQ,SAARA,EAAUE,QAAI,MAAAC,SAAA,SAAAA,EAAAC,KAAAJ,IACjCJ,KAAKC,aAAeK,CAAI,EAsBXN,KAAAS,iBAAoBC,IACjC,MAAMC,EAAWD,EAAKE,GAAGC,QAAQ,OAAQ,IACzC,MAAMC,EAAQ,QAAQH,IAEtB,OACII,EAAA,qBACID,MAAOA,EACPJ,KAAMC,EACNK,QAAShB,KAAKiB,cAChB,EAYOjB,KAAAiB,aAAgBC,IAC7B,MAAMP,EAAYO,EAAMC,OAAsCT,KAC9DV,KAAKoB,gBAAgBT,GACrBU,QAAQC,IAAI,qBAAqBX,kBAAyB,EAG7CX,KAAAuB,QACbL,IAEA,GAAIA,aAAiBM,YAAa,CAC9BxB,KAAKyB,UAAYP,EAAMQ,M,GAId1B,KAAA2B,QAAWT,IACxB,GAAIA,EAAMU,MAAQC,GAAS7B,KAAKyB,UAAUK,OAAQ,CAC9C9B,KAAK+B,MAAQ,IACN/B,KAAK+B,MACR/B,KAAKgC,WAAWhC,KAAKyB,UAAUK,SAEnC9B,KAAKiC,cACLjC,KAAKyB,UAAY,E,GAIRzB,KAAAiC,YAAc,KAC3BjC,KAAKkC,MAAQ,GACblC,KAAKC,aAAakC,SAASzB,IACvBV,KAAK+B,MAAMI,SAASC,IAChB,MAAMC,EAAO3B,EAAK4B,KAAKC,QAAQC,GAC3BA,EAAIC,SAASL,EAAOM,QAExB,GAAIL,EAAKM,QAAUjC,EAAKE,GAAG6B,SAASL,EAAOM,MAAO,CAC9C1C,KAAKkC,MAAMU,KAAKlC,E,IAEtB,IAENV,KAAKkC,MAAQ,IAAI,IAAIW,IAAI7C,KAAKkC,OAAO,EAGxBlC,KAAA8C,gBACb5B,IAEAlB,KAAK+B,MAAQb,EAAMQ,OACnB1B,KAAKiC,aAAa,E,WA1GE,G,eAGJ,G,WAGI,E,CAIjBc,oBACH/C,KAAKE,e,CAWF8C,SACH,OACIjC,EAACkC,EAAI,KACDlC,EAAA,kBACID,MAAM,cACNoC,KAAK,QACLnB,MAAO/B,KAAK+B,MACZoB,SAAUnD,KAAK8C,gBACfvB,QAASvB,KAAKuB,QACdI,QAAS3B,KAAK2B,QACdyB,YAAY,iCACZC,iBAAkB,KAClBC,YAAa,WAEjBvC,EAAA,eAAOf,KAAKkC,MAAMqB,IAAIvD,KAAKS,mB,CAkB/BN,sBAAsBuC,GAC1B,UACUc,UAAUC,UAAUC,UAAUhB,E,CACtC,MAAOiB,GACLtC,QAAQuC,MAAM,wBAAyBD,E,EAmDvC3B,WAAW6B,GACf,MAAO,CACHjD,GAAIiD,EACJnB,KAAMmB,EACNC,UAAW,K"}