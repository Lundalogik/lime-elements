{"version":3,"names":["TextEditorUiExample","this","availableUis","text","value","handleChange","event","detail","handleNewSelection","selectedUi","render","placeholderText","h","Host","onChange","ui","placeholder","style","label","options"],"sources":["./src/components/text-editor/examples/text-editor-ui.tsx"],"sourcesContent":["import {\n    EditorUiType,\n    LimelSelectCustomEvent,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * UI\n * By configuring the `ui` prop, you can define how the editor should be\n * rendered for the end users. The following options are available:\n * - `standard`: The default editor appearance with a full toolbar and\n *    standard layout.\n * - `minimal`: A compact editor appearance, ideal for limited space\n *    scenarios such as mobile devices. In this mode, the toolbar is hidden\n *    until the editor is focused.\n * - `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n *    This mode is suitable for scenarios where you want to provide a simple\n *    text input without any visible formatting options; but still provide\n *    support for markdown syntax and rich text, using hotkeys or when pasting.\n *\n * :::important\n * It's very important to add a `placeholder` or `label` when using\n * the `minimal` or `no-toolbar` UI. The reason is that without a placeholder or a label,\n * there is no visual clue for the user to realize that the grey box is\n * actually an input field that they can type in,\n * since the toolbar would not be shown unless the input filed is focused.\n * :::\n */\n@Component({\n    tag: 'limel-example-text-editor-ui',\n    shadow: true,\n})\nexport class TextEditorUiExample {\n    @State()\n    private selectedUi: Option<EditorUiType> = {\n        text: 'standard',\n        value: 'standard',\n    };\n\n    private readonly availableUis: Array<Option<EditorUiType>> = [\n        { text: 'standard', value: 'standard' },\n        { text: 'minimal', value: 'minimal' },\n        { text: 'no-toolbar', value: 'no-toolbar' },\n    ];\n\n    @State()\n    private value: string;\n\n    public render() {\n        const placeholderText =\n            this.selectedUi.value === 'standard' ? '' : 'Write a commentâ€¦';\n\n        return (\n            <Host>\n                <limel-text-editor\n                    value={this.value}\n                    onChange={this.handleChange}\n                    ui={this.selectedUi.value}\n                    placeholder={placeholderText}\n                />\n                <limel-example-controls\n                    style={{ '--example-controls-column-layout': 'auto-fit' }}\n                >\n                    <limel-example-value value={this.value} />\n                    <limel-select\n                        label=\"ui\"\n                        options={this.availableUis}\n                        value={this.selectedUi}\n                        onChange={this.handleNewSelection}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private readonly handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private readonly handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<EditorUiType>>\n    ) => {\n        this.selectedUi = event.detail;\n    };\n}\n"],"mappings":"4DAiCaA,EAAmB,M,yBAOXC,KAAAC,aAA4C,CACzD,CAAEC,KAAM,WAAYC,MAAO,YAC3B,CAAED,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,aAAcC,MAAO,eAiChBH,KAAAI,aAAgBC,IAC7BL,KAAKG,MAAQE,EAAMC,MAAM,EAGZN,KAAAO,mBACbF,IAEAL,KAAKQ,WAAaH,EAAMC,MAAM,E,gBAhDS,CACvCJ,KAAM,WACNC,MAAO,Y,qBAYJM,SACH,MAAMC,EACFV,KAAKQ,WAAWL,QAAU,WAAa,GAAK,mBAEhD,OACIQ,EAACC,EAAI,KACDD,EAAA,qBACIR,MAAOH,KAAKG,MACZU,SAAUb,KAAKI,aACfU,GAAId,KAAKQ,WAAWL,MACpBY,YAAaL,IAEjBC,EAAA,0BACIK,MAAO,CAAE,mCAAoC,aAE7CL,EAAA,uBAAqBR,MAAOH,KAAKG,QACjCQ,EAAA,gBACIM,MAAM,KACNC,QAASlB,KAAKC,aACdE,MAAOH,KAAKQ,WACZK,SAAUb,KAAKO,sB"}