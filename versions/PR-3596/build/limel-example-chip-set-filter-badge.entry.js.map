{"version":3,"names":["CHIP_SELECET_ALL_ID","ChipSetFilterBadgeExample","constructor","hostRef","this","handleChange","event","updatedChips","chips","detail","id","selected","chip","index","findIndex","setDisabled","disabled","text","badge","setAllBadgeValue","render","h","label","type","onChange","value","checked","badgeValue"],"sources":["./src/components/chip-set/examples/chip-set-filter-badge.tsx"],"sourcesContent":["import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nconst CHIP_SELECET_ALL_ID = 1;\n\n/**\n * Filter chip set with badge.\n * The badge can be used to visulize the number of results using each filter.\n */\n@Component({\n    tag: 'limel-example-chip-set-filter-badge',\n    shadow: true,\n})\nexport class ChipSetFilterBadgeExample {\n    @State()\n    private chips: Chip[] = [\n        {\n            id: 1,\n            text: 'All',\n        },\n        {\n            id: 2,\n            text: 'Lime',\n            badge: 5,\n        },\n        {\n            id: 3,\n            text: 'Apple',\n            selected: true,\n            badge: 0,\n        },\n        {\n            id: 4,\n            text: 'Banana',\n            badge: 1,\n        },\n    ];\n\n    @State()\n    private disabled: boolean = false;\n\n    constructor() {\n        this.setAllBadgeValue();\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Include fruits of type:\"\n                disabled={this.disabled}\n                type=\"filter\"\n                onChange={this.handleChange}\n                value={this.chips}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip>) => {\n        const updatedChips = [...this.chips];\n        if (event.detail.id !== CHIP_SELECET_ALL_ID) {\n            updatedChips[0].selected = false;\n        }\n\n        if (event.detail.id === CHIP_SELECET_ALL_ID && event.detail.selected) {\n            for (const chip of updatedChips) {\n                chip.selected = false;\n            }\n        }\n\n        const index = this.chips.findIndex(\n            (chips) => chips.id === event.detail.id\n        );\n        updatedChips[index] = event.detail;\n        this.chips = updatedChips;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setAllBadgeValue() {\n        let badgeValue = 0;\n        for (const chip of this.chips) {\n            if (chip.id !== CHIP_SELECET_ALL_ID) {\n                badgeValue += chip.badge;\n            }\n        }\n        this.chips[0].badge = badgeValue;\n    }\n}\n"],"mappings":"+CAEA,MAAMA,EAAsB,E,MAUfC,EAAyB,MA4BlCC,YAAAC,G,UAuBQC,KAAAC,aAAgBC,IACpB,MAAMC,EAAe,IAAIH,KAAKI,OAC9B,GAAIF,EAAMG,OAAOC,KAAOV,EAAqB,CACzCO,EAAa,GAAGI,SAAW,K,CAG/B,GAAIL,EAAMG,OAAOC,KAAOV,GAAuBM,EAAMG,OAAOE,SAAU,CAClE,IAAK,MAAMC,KAAQL,EAAc,CAC7BK,EAAKD,SAAW,K,EAIxB,MAAME,EAAQT,KAAKI,MAAMM,WACpBN,GAAUA,EAAME,KAAOJ,EAAMG,OAAOC,KAEzCH,EAAaM,GAASP,EAAMG,OAC5BL,KAAKI,MAAQD,CAAY,EAGrBH,KAAAW,YAAeT,IACnBF,KAAKY,SAAWV,EAAMG,MAAM,E,WArER,CACpB,CACIC,GAAI,EACJO,KAAM,OAEV,CACIP,GAAI,EACJO,KAAM,OACNC,MAAO,GAEX,CACIR,GAAI,EACJO,KAAM,QACNN,SAAU,KACVO,MAAO,GAEX,CACIR,GAAI,EACJO,KAAM,SACNC,MAAO,I,cAKa,MAGxBd,KAAKe,kB,CAGFC,SACH,MAAO,CACHC,EAAA,kBACIC,MAAM,0BACNN,SAAUZ,KAAKY,SACfO,KAAK,SACLC,SAAUpB,KAAKC,aACfoB,MAAOrB,KAAKI,QAEhBa,EAAA,8BACIA,EAAA,kBACIC,MAAM,WACNE,SAAUpB,KAAKW,YACfW,QAAStB,KAAKY,Y,CA6BtBG,mBACJ,IAAIQ,EAAa,EACjB,IAAK,MAAMf,KAAQR,KAAKI,MAAO,CAC3B,GAAII,EAAKF,KAAOV,EAAqB,CACjC2B,GAAcf,EAAKM,K,EAG3Bd,KAAKI,MAAM,GAAGU,MAAQS,C"}