{"version":3,"names":["arrayAggregator","array","setter","iteratee","accumulator","index","length","value","createBaseEach","eachFunc","fromRight","collection","isArrayLike","iterable","Object","baseEach","baseForOwn","baseAggregator","key","createAggregator","initializer","func","isArray","baseIteratee","partition","result","push","fileCss","DEFAULT_FILE_CHIP","id","text","removable","File","this","dropZoneTip","getTranslation","handleNewFiles","event","preventAndStop","change","emit","detail","handleChipSetChange","stopPropagation","file","handleChipInteract","interact","render","h","disabled","readonly","accept","onFilesSelected","renderChipset","renderDragAndDropTip","class","role","label","getChipArray","filename","icon","name","getFileIcon","title","getFileExtensionTitle","color","getFileColor","backgroundColor","getFileBackgroundColor","href","chipset","invalid","leadingIcon","language","onChange","onInteract","required","type","preventDefault","translate","get","fileDropzoneCss","FileDropzone","renderOnDragLayout","hasFileToDrop","renderText","renderHelperText","helperText","handleDrop","files","Array","from","dataTransfer","fileInfos","map","createFileInfo","acceptedFileInfos","rejectedFileInfos","isTypeAccepted","filesSelected","filesRejected","handleDragOver","handleDragLeave","Host","onDrop","onDragOver","onDragLeave","FileInput","fileInputId","createRandomString","handleClick","triggerFileDialog","handleKeyUp","code","handleFileChange","fileInput","componentDidLoad","element","shadowRoot","getElementById","onClick","onKeyUp","onKeyDown","handleKeyDown","hidden","multiple","click"],"sources":["./node_modules/lodash-es/_arrayAggregator.js","./node_modules/lodash-es/_createBaseEach.js","./node_modules/lodash-es/_baseEach.js","./node_modules/lodash-es/_baseAggregator.js","./node_modules/lodash-es/_createAggregator.js","./node_modules/lodash-es/partition.js","./src/components/file/file.scss?tag=limel-file&encapsulation=shadow","./src/components/file/file.tsx","./src/components/file-dropzone/file-dropzone.scss?tag=limel-file-dropzone&encapsulation=shadow","./src/components/file-dropzone/file-dropzone.tsx","./src/components/file-input/file-input.tsx"],"sourcesContent":["/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import isArrayLike from './isArrayLike.js';\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nexport default createBaseEach;\n","import baseForOwn from './_baseForOwn.js';\nimport createBaseEach from './_createBaseEach.js';\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nexport default baseEach;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import createAggregator from './_createAggregator.js';\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nexport default partition;\n","@use '../../style/mixins';\n\n/**\n * @prop --icon-background-color: Background color of the icon. Defaults to `--contrast-400`.\n * @prop --icon-color: Color of the icon. Defaults to `--contrast-1100`.\n */\n\n:host(limel-file) {\n    position: relative;\n}\n\n.drag-and-drop-tip {\n    pointer-events: none;\n    position: absolute;\n    box-sizing: border-box;\n    margin: 0.25rem;\n    inset: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    flex-wrap: nowrap;\n\n    border-radius: 0.25rem;\n    border: 1px dashed rgb(var(--contrast-700));\n\n    padding: 0 0.5rem;\n\n    .invisible-label-mock {\n        flex-shrink: 0;\n        opacity: 0;\n        padding-right: 1rem;\n        padding-left: 1.5rem;\n    }\n\n    .tip {\n        font-size: smaller;\n        color: var(--mdc-theme-text-secondary-on-background);\n\n        // Below tries to render text in two lines,\n        // and then truncate if there is no more space\n        height: auto;\n        max-height: 3rem;\n        line-height: 1;\n        @include mixins.truncate-text-on-line(2);\n    }\n}\n","import translate from '../../global/translations';\nimport { Chip } from '../chip-set/chip.types';\nimport { Languages } from '../date-picker/date.types';\nimport { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from '../../util/file-metadata';\nimport { FileInfo } from '../../global/shared-types/file.types';\n\nconst DEFAULT_FILE_CHIP: Chip = {\n    id: null,\n    text: null,\n    removable: true,\n};\n\n/**\n * This component lets end-users select a *single* file from their device\n * storage. Regardless of the user's device or operating system, this component\n * opens up a file picker dialog that allows the user to choose a file.\n *\n * ## Using correct labels\n *\n * This file picker can be used in different contexts. The component's distinct\n * visual design including the upload icon hints end-users that this is not a\n * normal input field like other fields in the form for example.\n *\n * :::important\n * you need to use a descriptive `label` that clarifies the\n * functionality of the file picker, and/or provides users with clear\n * instructions.\n *\n * Depending on the context, you may need to avoid labels such as:\n * - File\n * - Document\n *\n * and instead consider using labels like:\n * - Attach a file\n * - Upload a file\n * - Choose a document\n * - Choose a file\n *\n * and similar phrases...\n * :::\n *\n * @exampleComponent limel-example-file\n * @exampleComponent limel-example-file-custom-icon\n * @exampleComponent limel-example-file-accepted-types\n * @exampleComponent limel-example-file-composite\n */\n@Component({\n    tag: 'limel-file',\n    shadow: true,\n    styleUrl: 'file.scss',\n})\nexport class File {\n    /**\n     * The selected file.\n     */\n    @Prop()\n    public value: FileInfo;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * True if the input should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing files, but allow interaction\n     * with any already existing file.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the chosen file is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Defines the localisation for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a file is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<FileInfo>;\n\n    /**\n     * Dispatched when clicking on a chip\n     */\n    @Event()\n    private interact: EventEmitter<number | string>;\n\n    public render() {\n        return [\n            <limel-file-dropzone\n                disabled={this.disabled || this.readonly || !!this.value}\n                accept={this.accept}\n                onFilesSelected={this.handleNewFiles}\n            >\n                {this.renderChipset()}\n            </limel-file-dropzone>,\n            this.renderDragAndDropTip(),\n        ];\n    }\n\n    private renderDragAndDropTip() {\n        if (this.value || this.disabled || this.readonly) {\n            return;\n        }\n\n        return (\n            <div class=\"drag-and-drop-tip\">\n                <span class=\"invisible-label-mock\" role=\"presentation\">\n                    {this.label}\n                </span>\n                <span class=\"tip\">{this.dropZoneTip()}</span>\n            </div>\n        );\n    }\n\n    private dropZoneTip = (): string => {\n        return this.getTranslation('drag-and-drop-tips');\n    };\n\n    private handleNewFiles = (event: CustomEvent<FileInfo[]>) => {\n        this.preventAndStop(event);\n        this.change.emit(event.detail[0]);\n    };\n\n    private getChipArray(): Chip[] {\n        if (!this.value) {\n            return [];\n        }\n\n        return [\n            {\n                ...DEFAULT_FILE_CHIP,\n                text: this.value.filename,\n                id: this.value.id,\n                icon: {\n                    name: getFileIcon(this.value),\n                    title: getFileExtensionTitle(this.value),\n                    color: getFileColor(this.value),\n                    backgroundColor: getFileBackgroundColor(this.value),\n                },\n                href: this.value.href,\n            },\n        ];\n    }\n\n    private renderChipset() {\n        const chipset = (\n            <limel-chip-set\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                label={this.label}\n                leadingIcon=\"upload_to_cloud\"\n                language={this.language}\n                onChange={this.handleChipSetChange}\n                onInteract={this.handleChipInteract}\n                required={this.required}\n                type=\"input\"\n                value={this.getChipArray()}\n            />\n        );\n\n        if (this.value) {\n            return chipset;\n        }\n\n        return (\n            <limel-file-input\n                accept={this.accept}\n                disabled={this.disabled || this.readonly}\n            >\n                {chipset}\n            </limel-file-input>\n        );\n    }\n\n    private handleChipSetChange = (event: CustomEvent) => {\n        event.stopPropagation();\n        const file = !event.detail.length ? event.detail[0] : null;\n        if (!file) {\n            this.change.emit(file);\n        }\n    };\n\n    private handleChipInteract = (event: CustomEvent<Chip>) => {\n        this.preventAndStop(event);\n        this.interact.emit(event.detail.id);\n    };\n\n    private preventAndStop(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private getTranslation(key: string) {\n        return translate.get(`file.${key}`, this.language);\n    }\n}\n",":host(limel-file-dropzone) {\n    display: block;\n    position: relative;\n}\n\n.has-file-to-drop {\n    animation: display-drop-zone 0.6s ease forwards;\n\n    box-sizing: border-box;\n    isolation: isolate;\n    z-index: 1;\n    position: absolute;\n    inset: 0.25rem;\n\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 0.5rem;\n\n    color: rgb(var(--contrast-700));\n\n    border: 0.125rem dashed rgb(var(--color-cyan-light));\n    border-radius: 0.75rem;\n}\n\n.text-helpertext {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.icon {\n    width: clamp(2rem, 5vh, 7rem);\n}\n\n.text {\n    font-size: clamp(1rem, 2vh, 1.75rem);\n}\n\n.helper-text {\n    font-size: clamp(0.75rem, 1.5vh, 1rem);\n}\n\n@keyframes display-drop-zone {\n    0% {\n        background-color: rgb(var(--contrast-1100), 0);\n        backdrop-filter: blur(0);\n        -webkit-backdrop-filter: blur(0);\n        scale: 0.9;\n        opacity: 0;\n    }\n\n    50% {\n        scale: 1;\n        opacity: 1;\n    }\n\n    100% {\n        background-color: rgb(var(--contrast-1100), 0.8);\n        backdrop-filter: blur(0.25rem);\n        -webkit-backdrop-filter: blur(0.25rem);\n    }\n}\n","import {\n    Component,\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo, isTypeAccepted } from '../../util/files';\nimport { partition } from 'lodash-es';\n\n/**\n * This component enables you to seamlessly convert any region of the user interface into\n * a file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n *\n * The file dropzone can then be used to allow end-users to upload files\n * by dragging and dropping them into the specified area, for example to trigger an upload process.\n *\n * After receiving the files, the component emits a `filesSelected` event. For unsupported\n * files (specified with the `accept` prop) a `filesRejected` event will be emitted.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-dropzone\n * @exampleComponent limel-example-file-dropzone-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzone {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable the file dropzone.\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Is displayed when the user is dragging a file over the dropzone.\n     * A suitable text could for instance be \"Drop your files here\".\n     */\n    @Prop()\n    public text: string;\n\n    /**\n     * Is displayed to provide supplementary information to the end users,\n     * for instance, which filetypes or file sizes are accepted.\n     */\n    @Prop()\n    public helperText?: string = '';\n\n    /**\n     * Sets to true when there is a file to drop\n     */\n    @State()\n    private hasFileToDrop: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    /**\n     * Emitted when files are selected but do not conform with the `accept` property specifications.\n     * This can happen when the file types or formats of the selected files are not among the ones allowed by the dropzone,\n     * as defined by the `accept` property.\n     *\n     * @see `accept` for details on how to specify acceptable file types.\n     */\n    @Event()\n    filesRejected: EventEmitter<FileInfo[]>;\n\n    public render() {\n        return (\n            <Host\n                onDrop={this.handleDrop}\n                onDragOver={this.handleDragOver}\n                onDragLeave={this.handleDragLeave}\n            >\n                <slot />\n                {this.renderOnDragLayout()}\n            </Host>\n        );\n    }\n\n    private renderOnDragLayout = () => {\n        if (this.disabled || !this.hasFileToDrop) {\n            return;\n        }\n\n        return (\n            <div class=\"has-file-to-drop\">\n                <limel-icon class=\"icon\" name=\"upload_2\" />\n                <div class=\"text-helpertext\">\n                    {this.renderText()}\n                    {this.renderHelperText()}\n                </div>\n            </div>\n        );\n    };\n\n    private renderText = () => {\n        if (!this.text) {\n            return;\n        }\n\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return <span class=\"helper-text\">{this.helperText}</span>;\n    };\n\n    private handleDrop = (event: DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.hasFileToDrop = false;\n\n        if (this.disabled) {\n            return;\n        }\n\n        const files: File[] = Array.from(event.dataTransfer.files);\n        const fileInfos: FileInfo[] = files.map(createFileInfo);\n\n        const [acceptedFileInfos, rejectedFileInfos] = partition(\n            fileInfos,\n            (file) => isTypeAccepted(file, this.accept)\n        );\n\n        if (acceptedFileInfos.length > 0) {\n            this.filesSelected.emit(acceptedFileInfos);\n        }\n\n        if (rejectedFileInfos.length > 0) {\n            this.filesRejected.emit(rejectedFileInfos);\n        }\n    };\n\n    private handleDragOver = (event: DragEvent) => {\n        this.hasFileToDrop = true;\n        event.preventDefault();\n    };\n\n    private handleDragLeave = (event: DragEvent) => {\n        this.hasFileToDrop = false;\n        event.preventDefault();\n    };\n}\n","import {\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Component,\n    Element,\n    Prop,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo } from '../../util/files';\n\n/**\n * This component enables you to seamlessly transform any other clickable component that\n * generates a `click` event into a file input selector.\n *\n * To use it, just wrap any clickable component inside the `limel-file-input` component.\n * Upon reception of the `click` event this component will open the native file selection\n * dialog.\n *\n * After receiving the files, the component emits a `filesSelected` event.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-input\n * @exampleComponent limel-example-file-input-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-input',\n    shadow: true,\n})\nexport class FileInput {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable file input selection.\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to enable selection of multiple files\n     */\n    @Prop({ reflect: true })\n    public multiple: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    @Element()\n    private element: HTMLLimelFileElement;\n\n    private fileInput: HTMLInputElement;\n    private fileInputId = createRandomString();\n\n    public componentDidLoad() {\n        this.fileInput = this.element.shadowRoot.getElementById(\n            this.fileInputId\n        ) as HTMLInputElement;\n    }\n\n    public render() {\n        return (\n            <Host\n                onClick={this.handleClick}\n                onKeyUp={this.handleKeyUp}\n                onKeyDown={this.handleKeyDown}\n            >\n                <input\n                    hidden={true}\n                    id={this.fileInputId}\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept={this.accept}\n                    disabled={this.disabled}\n                    multiple={this.multiple}\n                />\n                <slot />\n            </Host>\n        );\n    }\n\n    private handleClick = (event: Event) => {\n        if (this.disabled) {\n            event.stopPropagation();\n            event.preventDefault();\n\n            return;\n        }\n\n        this.triggerFileDialog();\n\n        event.stopPropagation();\n    };\n\n    private handleKeyUp = (event: KeyboardEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (event.code === 'Enter') {\n            this.triggerFileDialog();\n        }\n    };\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (\n            event.code === 'Tab' ||\n            event.code === 'Backspace' ||\n            event.code === 'Enter'\n        ) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    private triggerFileDialog() {\n        this.fileInput.click();\n    }\n\n    private handleFileChange = (event: Event) => {\n        const files = Array.from(this.fileInput.files);\n        if (files.length > 0) {\n            event.stopPropagation();\n            this.filesSelected.emit(files.map(createFileInfo));\n            this.fileInput.value = '';\n        }\n    };\n}\n"],"mappings":"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"}