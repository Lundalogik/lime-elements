{"version":3,"names":["TextEditorWithInlineImagesExample","this","metadata","links","images","handleFailedThumbnailChange","event","uploadImageFails","detail","handleChange","value","handleImagePasted","async","imageInserter","insertThumbnail","imageSrc","uploadImage","fileInfo","insertImage","insertFailedThumbnail","Promise","resolve","reject","setTimeout","error","console","filename","handleMetadataChange","removedImages","getRemovedImages","forEach","image","state","removeImage","render","h","Host","onChange","onImagePasted","onMetadataChange","label","oldMetadata","newMetadata","newImageIds","Set","map","fileInfoId","filter","has","log"],"sources":["./src/components/text-editor/examples/text-editor-with-inline-images-file-storage.tsx"],"sourcesContent":["import { Component, h, State, Host } from '@stencil/core';\nimport {\n    ImageInserter,\n    FileInfo,\n    EditorImage,\n    LimelTextEditorCustomEvent,\n    LimelCheckboxCustomEvent,\n    EditorMetadata,\n} from '@limetech/lime-elements';\n/**\n * Handling inline images (with external file storage)\n *\n * To allow users to paste images directly into the text editor, you can\n * listen to the `imagePasted` event, which is triggered when an image file\n * is pasted into the editor.\n *\n * The `imagePasted` event contains an `ImageInserter` object, which you can\n * use to insert a thumbnail of the pasted image into the editor.\n * After the thumbnail is inserted, you can upload the image to an external\n * file storage and insert the src url of the uploaded image using the\n * `insertImage` method.\n *\n * If the image upload fails, you can insert a failed thumbnail using the\n * `insertFailedThumbnail` method.\n *\n * :::note\n * In this example, because we don't actually upload the image you paste\n * anywhere, once the \"upload\" is done, we will replace the image you\n * pasted with a url to an image of the Lime CRM logo.\n *\n * In reality, you would of course insert the url to the newly uploaded\n * image instead.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-inline-images-file-storage',\n    shadow: true,\n})\nexport class TextEditorWithInlineImagesExample {\n    @State()\n    private value = 'Copy an image file and paste it here.';\n\n    @State()\n    private uploadImageFails = false;\n\n    private metadata: EditorMetadata = { links: [], images: [] };\n\n    public render() {\n        return (\n            <Host>\n                <limel-text-editor\n                    value={this.value}\n                    onChange={this.handleChange}\n                    onImagePasted={this.handleImagePasted}\n                    onMetadataChange={this.handleMetadataChange}\n                />\n                <limel-checkbox\n                    label=\"Upload image fails - insert failed thumbnail\"\n                    onChange={this.handleFailedThumbnailChange}\n                />\n                <limel-example-value label=\"Value\" value={this.value} />\n            </Host>\n        );\n    }\n\n    private handleFailedThumbnailChange = (\n        event: LimelCheckboxCustomEvent<boolean>,\n    ) => {\n        this.uploadImageFails = event.detail;\n    };\n\n    private handleChange = (event: LimelTextEditorCustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleImagePasted = async (\n        event: LimelTextEditorCustomEvent<ImageInserter>,\n    ) => {\n        const imageInserter = event.detail;\n\n        imageInserter.insertThumbnail();\n\n        const imageSrc = await this.uploadImage(imageInserter.fileInfo);\n        if (imageSrc) {\n            imageInserter.insertImage(imageSrc);\n        } else {\n            imageInserter.insertFailedThumbnail();\n        }\n    };\n\n    private uploadImage = async (fileInfo: FileInfo): Promise<string> => {\n        try {\n            // Upload image to external file storage.\n            // fileInfo.fileContent contains the image data.\n\n            // Simulate upload delay.\n            const imageSrc: string = await new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    if (this.uploadImageFails) {\n                        reject('Server error');\n                    } else {\n                        resolve('https://cdn.lime-crm.com/mail-addin-logo.png');\n                    }\n                }, 2000);\n            });\n\n            // Return the src url of the uploaded image.\n            return imageSrc;\n        } catch (error) {\n            console.error(\n                `Failed to upload image ${fileInfo.filename}: ${error}`,\n            );\n        }\n    };\n\n    private handleMetadataChange = (\n        event: LimelTextEditorCustomEvent<EditorMetadata>,\n    ) => {\n        const removedImages = this.getRemovedImages(\n            this.metadata,\n            event.detail,\n        );\n\n        removedImages.forEach((image) => {\n            if (image.state === 'success') {\n                this.removeImage(image);\n            }\n        });\n\n        this.metadata = event.detail;\n    };\n\n    private getRemovedImages(\n        oldMetadata: EditorMetadata,\n        newMetadata: EditorMetadata,\n    ): EditorImage[] {\n        const newImageIds = new Set(\n            newMetadata.images.map((image) => image.fileInfoId),\n        );\n\n        return oldMetadata.images.filter(\n            (image) => !newImageIds.has(image.fileInfoId),\n        );\n    }\n\n    private removeImage(image: EditorImage) {\n        // Remove image from external file storage if desired.\n        console.log(`Image removed: ${image.fileInfoId}`);\n    }\n}\n"],"mappings":"4DAqCaA,EAAiC,M,yBAOlCC,KAAAC,SAA2B,CAAEC,MAAO,GAAIC,OAAQ,IAoBhDH,KAAAI,4BACJC,IAEAL,KAAKM,iBAAmBD,EAAME,MAAM,EAGhCP,KAAAQ,aAAgBH,IACpBL,KAAKS,MAAQJ,EAAME,MAAM,EAGrBP,KAAAU,kBAAoBC,MACxBN,IAEA,MAAMO,EAAgBP,EAAME,OAE5BK,EAAcC,kBAEd,MAAMC,QAAiBd,KAAKe,YAAYH,EAAcI,UACtD,GAAIF,EAAU,CACVF,EAAcK,YAAYH,E,KACvB,CACHF,EAAcM,uB,GAIdlB,KAAAe,YAAcJ,MAAOK,IACzB,IAKI,MAAMF,QAAyB,IAAIK,SAAQ,CAACC,EAASC,KACjDC,YAAW,KACP,GAAItB,KAAKM,iBAAkB,CACvBe,EAAO,e,KACJ,CACHD,EAAQ,+C,IAEb,IAAK,IAIZ,OAAON,C,CACT,MAAOS,GACLC,QAAQD,MACJ,0BAA0BP,EAASS,aAAaF,I,GAKpDvB,KAAA0B,qBACJrB,IAEA,MAAMsB,EAAgB3B,KAAK4B,iBACvB5B,KAAKC,SACLI,EAAME,QAGVoB,EAAcE,SAASC,IACnB,GAAIA,EAAMC,QAAU,UAAW,CAC3B/B,KAAKgC,YAAYF,E,KAIzB9B,KAAKC,SAAWI,EAAME,MAAM,E,WAzFhB,wC,sBAGW,K,CAIpB0B,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,qBACIzB,MAAOT,KAAKS,MACZ2B,SAAUpC,KAAKQ,aACf6B,cAAerC,KAAKU,kBACpB4B,iBAAkBtC,KAAK0B,uBAE3BQ,EAAA,kBACIK,MAAM,+CACNH,SAAUpC,KAAKI,8BAEnB8B,EAAA,uBAAqBK,MAAM,QAAQ9B,MAAOT,KAAKS,Q,CAwEnDmB,iBACJY,EACAC,GAEA,MAAMC,EAAc,IAAIC,IACpBF,EAAYtC,OAAOyC,KAAKd,GAAUA,EAAMe,cAG5C,OAAOL,EAAYrC,OAAO2C,QACrBhB,IAAWY,EAAYK,IAAIjB,EAAMe,a,CAIlCb,YAAYF,GAEhBN,QAAQwB,IAAI,kBAAkBlB,EAAMe,a"}