{"version":3,"names":["ImageState"],"sources":["./src/components/text-editor/text-editor.types.ts"],"sourcesContent":["import { CustomElement } from '../../global/shared-types/custom-element.types';\nimport { FileInfo } from '../../global/shared-types/file.types';\n\n/**\n * Represents a trigger character and its position in the text.\n *\n * @alpha\n */\nexport type Trigger = {\n    character: TriggerCharacter;\n    position: number;\n};\n\n/**\n * A character that triggers a specific action in the text editor.\n *\n * @alpha\n */\nexport type TriggerCharacter =\n    | '@'\n    | '#'\n    | '$'\n    | '!'\n    | '?'\n    | '&'\n    | '*'\n    | '%'\n    | '+'\n    | '-'\n    | '='\n    | '/'\n    | '\\\\'\n    | '^'\n    | '~'\n    | '`'\n    | ':'\n    | ';'\n    | '|'\n    | '.'\n    | ','\n    | '<'\n    | '>'\n    | '['\n    | ']'\n    | '{'\n    | '}'\n    | '('\n    | ')'\n    | \"'\";\n\n/**\n * @alpha\n */\nexport type TextEditorNode = {\n    /**\n     * The top node\n     */\n    node: CustomElement | string;\n\n    /**\n     * One more more children under the top node\n     */\n    children?: Array<TextEditorNode | string>;\n};\n\n/**\n * @alpha\n */\nexport interface ImageInserter {\n    fileInfo: FileInfo;\n\n    /**\n     * Method to insert a thumbnail at the cursor position.\n     */\n    insertThumbnail: () => void;\n\n    /**\n     * Method to insert the image at the thumbnail position.\n     * Thumbnail must be inserted before calling this method.\n     *\n     * @param src - The src url of the uploaded image.\n     * If not provided, the image will be inserted with base64 data.\n     *\n     */\n    insertImage: (src?: string) => void;\n\n    /**\n     * Method to insert a failed thumbnail at the thumbnail position.\n     * Thumbnail must be inserted before calling this method.\n     */\n    insertFailedThumbnail: () => void;\n}\n\n/**\n * @alpha\n */\nexport enum ImageState {\n    LOADING = 'loading',\n    FAILED = 'failed',\n    SUCCESS = 'success',\n}\n\n/**\n * @alpha\n */\nexport interface EditorImage {\n    /**\n     * Unique ID of the image file.\n     */\n    fileInfoId: string;\n    /**\n     * The source of the image.\n     * Can either be a URL pointing to the image or a base64 encoded string.\n     */\n    src: string;\n    /**\n     * The current state of the image.\n     */\n    state: ImageState;\n}\n\n/**\n * @alpha\n */\nexport interface EditorLink {\n    /**\n     * The URL of the link.\n     */\n    href: string;\n\n    /**\n     * The text associated with the link.\n     */\n    text: string;\n}\n\n/**\n * @alpha\n */\nexport interface TextEditor {\n    /**\n     * Method to insert either text or a node at the cursor position\n     */\n    insert: (input: TextEditorNode | string) => void;\n\n    /**\n     * Method to insert an HTML string at the cursor position\n     */\n    insertHtml: (input: string) => Promise<void>;\n\n    stopTrigger: () => void;\n}\n\n/**\n * @alpha\n */\nexport interface TriggerEventDetail {\n    /**\n     * The trigger that triggered this event\n     *\n     */\n    trigger: TriggerCharacter;\n\n    /**\n     * The text editor\n     */\n    textEditor: TextEditor;\n\n    /**\n     * Current value of the trigger\n     */\n    value: string;\n}\n\n/**\n *\n * @alpha\n *\n * Interface representing metadata extracted from the editor document\n */\nexport interface EditorMetadata {\n    /**\n     * Collection of image elements found in the document\n     */\n    images: EditorImage[];\n\n    /**\n     * Collection of link elements found in the document\n     */\n    links: EditorLink[];\n}\n"],"mappings":"IAgGYA,GAAZ,SAAYA,GACRA,EAAA,qBACAA,EAAA,mBACAA,EAAA,oBACH,EAJD,CAAYA,MAAU,Y"}