{"version":3,"names":["IconFinder","this","indexedIcons","loadIconIndex","async","response","fetch","json","_a","call","renderIconButton","icon","iconName","id","replace","label","h","onClick","copyIconName","onInput","event","CustomEvent","textValue","detail","onKeyUp","key","ENTER","trim","value","createChip","searchIcons","icons","forEach","search","hits","tags","filter","tag","includes","text","length","push","Set","chipSetOnChange","componentWillLoad","render","Host","type","onChange","searchLabel","emptyInputOnBlur","leadingIcon","map","navigator","clipboard","writeText","err","console","error","target","element","document","createElement","body","appendChild","select","copyToClipboard","removeChild","log","name","removable"],"sources":["./src/components/icon/examples/icon-finder.tsx"],"sourcesContent":["import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\nimport { ENTER } from '../../../util/keycodes';\n\ninterface Icon {\n    id: string;\n    tags: string[];\n}\n\n/**\n * Icon Finder\n *\n * Used in the docs for `limel-icon`.\n */\n@Component({\n    tag: 'limel-example-icon-finder',\n    shadow: true,\n})\nexport class IconFinder {\n    @State()\n    private value: Chip[] = [];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private icons: Icon[] = [];\n\n    private indexedIcons: any[] = [];\n\n    public componentWillLoad() {\n        this.loadIconIndex();\n    }\n\n    private readonly loadIconIndex = async () => {\n        const response = await fetch(\n            'https://lundalogik.github.io/lime-icons8/assets/icon-index.json',\n        );\n        const json = await response?.json?.();\n        this.indexedIcons = json;\n    };\n\n    public render() {\n        return (\n            <Host>\n                <limel-chip-set\n                    label=\"Icon finder\"\n                    type=\"input\"\n                    value={this.value}\n                    onChange={this.chipSetOnChange}\n                    onInput={this.onInput}\n                    onKeyUp={this.onKeyUp}\n                    searchLabel=\"Type and press enter to search\"\n                    emptyInputOnBlur={true}\n                    leadingIcon={'search'}\n                />\n                <div> {this.icons.map(this.renderIconButton)}</div>\n            </Host>\n        );\n    }\n\n    private readonly renderIconButton = (icon: Icon) => {\n        const iconName = icon.id.replace('.svg', '');\n        const label = `Copy ${iconName}`;\n\n        return (\n            <limel-icon-button\n                label={label}\n                icon={iconName}\n                onClick={this.copyIconName}\n            />\n        );\n    };\n\n    private async copyToClipboard(text: string) {\n        try {\n            await navigator.clipboard.writeText(text);\n        } catch (err) {\n            console.error('Failed to copy text: ', err);\n        }\n    }\n\n    private copyIconName(event) {\n        const iconName = event.target.icon;\n        const element = document.createElement('textarea');\n        element.value = iconName;\n        document.body.appendChild(element);\n        element.select();\n        this.copyToClipboard(iconName);\n        document.body.removeChild(element);\n        console.log(`copied icon name '${iconName}' to clipboard`);\n    }\n\n    private readonly onInput = (\n        event: LimelChipSetCustomEvent<string> | InputEvent,\n    ) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private readonly onKeyUp = (event: KeyboardEvent) => {\n        if (event.key === ENTER && this.textValue.trim()) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.searchIcons();\n            this.textValue = '';\n        }\n    };\n\n    private readonly searchIcons = () => {\n        this.icons = [];\n        this.indexedIcons.forEach((icon: Icon) => {\n            this.value.forEach((search: Chip) => {\n                const hits = icon.tags.filter((tag) =>\n                    tag.includes(search.text),\n                );\n                if (hits.length || icon.id.includes(search.text)) {\n                    this.icons.push(icon);\n                }\n            });\n        });\n        this.icons = [...new Set(this.icons)];\n    };\n\n    private readonly chipSetOnChange = (\n        event: LimelChipSetCustomEvent<Chip[]>,\n    ) => {\n        this.value = event.detail;\n        this.searchIcons();\n    };\n\n    private createChip(name: string): Chip {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n        };\n    }\n}\n"],"mappings":"uGAkBaA,EAAU,M,yBAUXC,KAAAC,aAAsB,GAMbD,KAAAE,cAAgBC,U,MAC7B,MAAMC,QAAiBC,MACnB,mEAEJ,MAAMC,SAAaC,EAAAH,IAAQ,MAARA,SAAQ,SAARA,EAAUE,QAAI,MAAAC,SAAA,SAAAA,EAAAC,KAAAJ,IACjCJ,KAAKC,aAAeK,CAAI,EAsBXN,KAAAS,iBAAoBC,IACjC,MAAMC,EAAWD,EAAKE,GAAGC,QAAQ,OAAQ,IACzC,MAAMC,EAAQ,QAAQH,IAEtB,OACII,EAAA,qBACID,MAAOA,EACPJ,KAAMC,EACNK,QAAShB,KAAKiB,cAChB,EAuBOjB,KAAAkB,QACbC,IAEA,GAAIA,aAAiBC,YAAa,CAC9BpB,KAAKqB,UAAYF,EAAMG,M,GAIdtB,KAAAuB,QAAWJ,IACxB,GAAIA,EAAMK,MAAQC,GAASzB,KAAKqB,UAAUK,OAAQ,CAC9C1B,KAAK2B,MAAQ,IACN3B,KAAK2B,MACR3B,KAAK4B,WAAW5B,KAAKqB,UAAUK,SAEnC1B,KAAK6B,cACL7B,KAAKqB,UAAY,E,GAIRrB,KAAA6B,YAAc,KAC3B7B,KAAK8B,MAAQ,GACb9B,KAAKC,aAAa8B,SAASrB,IACvBV,KAAK2B,MAAMI,SAASC,IAChB,MAAMC,EAAOvB,EAAKwB,KAAKC,QAAQC,GAC3BA,EAAIC,SAASL,EAAOM,QAExB,GAAIL,EAAKM,QAAU7B,EAAKE,GAAGyB,SAASL,EAAOM,MAAO,CAC9CtC,KAAK8B,MAAMU,KAAK9B,E,IAEtB,IAENV,KAAK8B,MAAQ,IAAI,IAAIW,IAAIzC,KAAK8B,OAAO,EAGxB9B,KAAA0C,gBACbvB,IAEAnB,KAAK2B,MAAQR,EAAMG,OACnBtB,KAAK6B,aAAa,E,WA/GE,G,eAGJ,G,WAGI,E,CAIjBc,oBACH3C,KAAKE,e,CAWF0C,SACH,OACI7B,EAAC8B,EAAI,KACD9B,EAAA,kBACID,MAAM,cACNgC,KAAK,QACLnB,MAAO3B,KAAK2B,MACZoB,SAAU/C,KAAK0C,gBACfxB,QAASlB,KAAKkB,QACdK,QAASvB,KAAKuB,QACdyB,YAAY,iCACZC,iBAAkB,KAClBC,YAAa,WAEjBnC,EAAA,eAAOf,KAAK8B,MAAMqB,IAAInD,KAAKS,mB,CAkB/BN,sBAAsBmC,GAC1B,UACUc,UAAUC,UAAUC,UAAUhB,E,CACtC,MAAOiB,GACLC,QAAQC,MAAM,wBAAyBF,E,EAIvCtC,aAAaE,GACjB,MAAMR,EAAWQ,EAAMuC,OAAOhD,KAC9B,MAAMiD,EAAUC,SAASC,cAAc,YACvCF,EAAQhC,MAAQhB,EAChBiD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAQK,SACRhE,KAAKiE,gBAAgBtD,GACrBiD,SAASE,KAAKI,YAAYP,GAC1BH,QAAQW,IAAI,qBAAqBxD,kB,CA4C7BiB,WAAWwC,GACf,MAAO,CACHxD,GAAIwD,EACJ9B,KAAM8B,EACNC,UAAW,K"}