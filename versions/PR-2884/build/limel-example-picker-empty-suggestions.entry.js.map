{"version":3,"names":["NETWORK_DELAY","PickerExample","this","allItems","text","value","search","async","query","Promise","resolve","setTimeout","slice","filteredItems","filter","item","toLowerCase","includes","onChange","event","selectedItem","detail","onInteract","console","log","render","h","label","searcher","emptyResultMessage"],"sources":["./src/components/picker/examples/picker-empty-suggestions.tsx"],"sourcesContent":["import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\nconst NETWORK_DELAY = 500;\n\n/**\n * With a custom search function\n *\n * The custom search function returns two suggestions if the query is empty.\n * Otherwise, it filters the items based on the query.\n *\n * :::important\n * This example simulates that searching is done on the server. Because these\n * examples do not _actually_ send requests to the server, we simulate a small\n * delay, using `setTimeout`. **Please do NOT copy that to production code!**\n * See the other examples for code that does not include this artificial delay.\n * :::\n */\n@Component({\n    tag: 'limel-example-picker-empty-suggestions',\n    shadow: true,\n})\nexport class PickerExample {\n    @State()\n    private selectedItem: ListItem<number>;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Sk√∏lldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItem}\n                searcher={this.search}\n                emptyResultMessage=\"No results\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        // Simulate network delay\n        await new Promise((resolve) => setTimeout(resolve, NETWORK_DELAY));\n\n        if (query === '') {\n            return this.allItems.slice(8, 10);\n        }\n\n        const filteredItems = this.allItems.filter((item) => {\n            return item.text.toLowerCase().includes(query.toLowerCase());\n        });\n\n        return filteredItems;\n    };\n\n    private onChange = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        this.selectedItem = event.detail;\n    };\n\n    private onInteract = (event) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"],"mappings":"+CAGA,MAAMA,EAAgB,I,MAmBTC,EAAa,M,yBAIdC,KAAAC,SAAoC,CACxC,CAAEC,KAAM,mBAAoBC,MAAO,GACnC,CAAED,KAAM,OAAQC,MAAO,GACvB,CAAED,KAAM,QAASC,MAAO,GACxB,CAAED,KAAM,OAAQC,MAAO,GACvB,CAAED,KAAM,QAASC,MAAO,GACxB,CAAED,KAAM,WAAYC,MAAO,GAC3B,CAAED,KAAM,OAAQC,MAAO,GACvB,CAAED,KAAM,WAAYC,MAAO,GAC3B,CAAED,KAAM,OAAQC,MAAO,GACvB,CAAED,KAAM,UAAWC,MAAO,IAC1B,CAAED,KAAM,WAAYC,MAAO,IAC3B,CAAED,KAAM,SAAUC,MAAO,IACzB,CAAED,KAAM,OAAQC,MAAO,KAiBnBH,KAAAI,OAASC,MAAOC,UAEd,IAAIC,SAASC,GAAYC,WAAWD,EAASV,KAEnD,GAAIQ,IAAU,GAAI,CACd,OAAON,KAAKC,SAASS,MAAM,EAAG,G,CAGlC,MAAMC,EAAgBX,KAAKC,SAASW,QAAQC,GACjCA,EAAKX,KAAKY,cAAcC,SAAST,EAAMQ,iBAGlD,OAAOH,CAAa,EAGhBX,KAAAgB,SAAYC,IAChBjB,KAAKkB,aAAeD,EAAME,MAAM,EAG5BnB,KAAAoB,WAAcH,IAClBI,QAAQC,IAAI,yBAA0BL,EAAME,OAAO,E,4BAlChDI,SACH,MAAO,CACHC,EAAA,gBACIC,MAAM,uBACNtB,MAAOH,KAAKkB,aACZQ,SAAU1B,KAAKI,OACfuB,mBAAmB,aACnBX,SAAUhB,KAAKgB,SACfI,WAAYpB,KAAKoB,aAErBI,EAAA,uBAAqBrB,MAAOH,KAAKkB,e"}