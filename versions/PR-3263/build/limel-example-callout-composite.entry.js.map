{"version":3,"names":["CalloutCompositeExample","this","handleFormChange","event","props","Object","assign","detail","heading","icon","content","type","language","style","componentWillLoad","properties","schema","title","lime","layout","rowSpan","colSpan","component","description","name","render","_b","_a","replace","_d","_c","h","innerHTML","renderForm","value","onChange"],"sources":["./src/components/callout/examples/callout-composite.tsx"],"sourcesContent":["import { FormSchema } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n */\n@Component({\n    tag: 'limel-example-callout-composite',\n    shadow: true,\n})\nexport class CalloutCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props: any = {\n        heading: '',\n        icon: '',\n        content: 'This is my very nice [type]',\n        type: 'tip',\n        language: 'en',\n        style: {\n            '--callout-color': '',\n            '--callout-text-color': '',\n            '--callout-background-color': '',\n        },\n    };\n\n    public componentWillLoad() {\n        const properties = {\n            ...this.schema.properties,\n            content: {\n                type: 'string',\n                title: 'Content',\n                lime: {\n                    layout: {\n                        rowSpan: 2,\n                        colSpan: 'all',\n                    },\n                    component: {\n                        props: {\n                            type: 'textarea',\n                        },\n                    },\n                },\n            },\n            style: {\n                type: 'object',\n                title: 'Styles',\n                properties: {\n                    '--callout-color': {\n                        type: 'string',\n                        title: 'Callout Color',\n                        description: '--callout-color',\n                        lime: {\n                            component: {\n                                name: 'limel-color-picker',\n                            },\n                        },\n                    },\n                    '--callout-text-color': {\n                        type: 'string',\n                        title: 'Text Color',\n                        description: '--callout-text-color',\n                        lime: {\n                            component: {\n                                name: 'limel-color-picker',\n                            },\n                        },\n                    },\n                    '--callout-background-color': {\n                        type: 'string',\n                        title: 'Background Color',\n                        description: '--callout-background-color',\n                        lime: {\n                            component: {\n                                name: 'limel-color-picker',\n                            },\n                        },\n                    },\n                },\n            },\n        };\n\n        this.schema = {\n            ...this.schema,\n            properties: properties,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n    }\n\n    public render() {\n        const content = this.props?.content?.replace(\n            '[type]',\n            this.props?.type ?? '',\n        );\n\n        return [\n            <limel-callout {...this.props}>\n                <div innerHTML={content} />\n            </limel-callout>,\n            this.renderForm(),\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"],"mappings":"qDAUaA,EAAuB,M,yBAiHxBC,KAAAC,iBAAoBC,IACxBF,KAAKG,MAAKC,OAAAC,OAAA,GAAQH,EAAMI,OAAQ,E,iCA7Gf,CACjBC,QAAS,GACTC,KAAM,GACNC,QAAS,8BACTC,KAAM,MACNC,SAAU,KACVC,MAAO,CACH,kBAAmB,GACnB,uBAAwB,GACxB,6BAA8B,I,CAI/BC,oBACH,MAAMC,EAAUV,OAAAC,OAAAD,OAAAC,OAAA,GACTL,KAAKe,OAAOD,YAAU,CACzBL,QAAS,CACLC,KAAM,SACNM,MAAO,UACPC,KAAM,CACFC,OAAQ,CACJC,QAAS,EACTC,QAAS,OAEbC,UAAW,CACPlB,MAAO,CACHO,KAAM,eAKtBE,MAAO,CACHF,KAAM,SACNM,MAAO,SACPF,WAAY,CACR,kBAAmB,CACfJ,KAAM,SACNM,MAAO,gBACPM,YAAa,kBACbL,KAAM,CACFI,UAAW,CACPE,KAAM,wBAIlB,uBAAwB,CACpBb,KAAM,SACNM,MAAO,aACPM,YAAa,uBACbL,KAAM,CACFI,UAAW,CACPE,KAAM,wBAIlB,6BAA8B,CAC1Bb,KAAM,SACNM,MAAO,mBACPM,YAAa,6BACbL,KAAM,CACFI,UAAW,CACPE,KAAM,4BAQ9BvB,KAAKe,OAAMX,OAAAC,OAAAD,OAAAC,OAAA,GACJL,KAAKe,QAAM,CACdD,WAAYA,EACZG,KAAM,CACFC,OAAQ,CACJR,KAAM,U,CAMfc,S,YACH,MAAMf,GAAUgB,GAAAC,EAAA1B,KAAKG,SAAK,MAAAuB,SAAA,SAAAA,EAAEjB,WAAO,MAAAgB,SAAA,SAAAA,EAAEE,QACjC,UACAC,GAAAC,EAAA7B,KAAKG,SAAK,MAAA0B,SAAA,SAAAA,EAAEnB,QAAI,MAAAkB,SAAA,EAAAA,EAAI,IAGxB,MAAO,CACHE,EAAA,gBAAA1B,OAAAC,OAAA,GAAmBL,KAAKG,OACpB2B,EAAA,OAAKC,UAAWtB,KAEpBT,KAAKgC,a,CAILA,aACJ,OACIF,EAAA,0BACIlB,MAAO,CAAE,mCAAoC,aAE7CkB,EAAA,cACIf,OAAQf,KAAKe,OACbkB,MAAOjC,KAAKG,MACZ+B,SAAUlC,KAAKC,mB"}