{"version":3,"names":["ChipSetInputExample","constructor","hostRef","this","handleInput","event","CustomEvent","textValue","detail","onKeyUp","key","ENTER","keyCode","ENTER_KEY_CODE","trim","value","createChip","handleChange","name","id","text","removable","icon","toLowerCase","render","h","type","inputType","label","helperText","maxItems","onChange","onInput","emptyInputOnBlur"],"sources":["./src/components/chip-set/examples/chip-set-input-type-text.tsx"],"sourcesContent":["import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER, ENTER_KEY_CODE } from '../../../util/keycodes';\n\n/**\n * Input chip set with `inputType` of `text`\n *\n * There is a slight difference in the way browsers treat `input` field\n * with `type=\"text\"` and `type=\"search\"`. You can read more about this\n * difference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\n * but the most important difference in this case is activation of the\n * autocorrection feature on most smart devices.\n *\n * When a user makes a spelling mistake while typing in an input field with\n * `type=\"text\"`, the mistake will be corrected automatically, right after they\n * press <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\n * do not auto correct the user's input.\n *\n * If you want to use limel-chip-set in a form context, where autocorrection is\n * a good thing, use `text` as `inputType`. It is important to know that the\n * chip-set component creates a chip from the autocorrected value, after the\n * user has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\n * existing typos! For example, for a question like \"Please type five of your\n * favorite fruits\", you would want to avoid misspellings, to collect higher\n * quality data.\n */\n@Component({\n    tag: 'limel-example-chip-set-input-type-text',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private maxItems = 5;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    constructor() {\n        this.value = [\n            this.createChip('Apple'),\n            this.createChip('Pear'),\n            this.createChip('Strawberry'),\n            this.createChip('Banana'),\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"text\"\n                label=\"Type five of your favorite fruits.\"\n                helperText=\"For some fruit names, icons are displayed on the chips\"\n                value={this.value}\n                maxItems={this.maxItems}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n            />,\n        ];\n    }\n\n    private handleInput = (\n        event: LimelChipSetCustomEvent<string> | InputEvent,\n    ) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (\n            (event.key === ENTER || event.keyCode === ENTER_KEY_CODE) &&\n            this.textValue.trim()\n        ) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n            icon: `${name}`.toLowerCase(),\n        };\n    };\n}\n"],"mappings":"uGA8BaA,EAAmB,MAa5BC,YAAAC,G,UA0BQC,KAAAC,YACJC,IAEA,GAAIA,aAAiBC,YAAa,CAC9BH,KAAKI,UAAYF,EAAMG,M,GAIvBL,KAAAM,QAAWJ,IACf,IACKA,EAAMK,MAAQC,GAASN,EAAMO,UAAYC,IAC1CV,KAAKI,UAAUO,OACjB,CACEX,KAAKY,MAAQ,IACNZ,KAAKY,MACRZ,KAAKa,WAAWb,KAAKI,UAAUO,SAEnCX,KAAKI,UAAY,E,GAIjBJ,KAAAc,aAAgBZ,IACpBF,KAAKY,MAAQV,EAAMG,MAAM,EAGrBL,KAAAa,WAAcE,IACX,CACHC,GAAID,EACJE,KAAMF,EACNG,UAAW,KACXC,KAAM,GAAGJ,IAAOK,gB,oCAhEJ,G,cAGD,E,sBAGiB,KAGhCpB,KAAKY,MAAQ,CACTZ,KAAKa,WAAW,SAChBb,KAAKa,WAAW,QAChBb,KAAKa,WAAW,cAChBb,KAAKa,WAAW,U,CAIjBQ,SACH,MAAO,CACHC,EAAA,kBACIC,KAAK,QACLC,UAAU,OACVC,MAAM,qCACNC,WAAW,yDACXd,MAAOZ,KAAKY,MACZe,SAAU3B,KAAK2B,SACfC,SAAU5B,KAAKc,aACfe,QAAS7B,KAAKC,YACdK,QAASN,KAAKM,QACdwB,iBAAkB9B,KAAK8B,mB"}