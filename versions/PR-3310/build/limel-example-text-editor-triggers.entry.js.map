{"version":3,"names":["textEditorCustomTriggersCss","TextEditorCustomTriggersExample","this","insertModeButtons","id","title","selected","outputModeButtons","handleKeyPress","event","capturedKeys","ESCAPE","ARROW_UP","ARROW_DOWN","ENTER","TAB","includes","key","stopPropagation","preventDefault","moveSelection","selectedItem","visibleItems","find","item","insertItem","isPickerOpen","_a","triggerFunction","stopTrigger","direction","increment","numberOfItems","length","currentSelectionIndex","findIndex","selectionIndex","removeAllSelections","setSelection","items","map","currentItem","Object","assign","selectedItemId","undefined","index","isSelected","value","renderPicker","h","open","openDirection","onClose","handleTriggerStop","renderList","style","padding","onInteract","handleListInteraction","handleTriggerStart","triggerState","detail","textEditor","tagValue","handleTriggerChange","toLowerCase","handleChange","handleInsertModeChange","insertMode","handleOutputModeChange","outputMode","insertHtml","text","then","console","log","catch","error","insert","node","tagName","attributes","icon","children","watchOpen","setupEventHandlers","watchTagValue","filter","componentWillLoad","host","addEventListener","capture","removeEventListener","render","class","onChange","display","customElements","triggers","onTriggerStart","onTriggerStop","onTriggerChange","contentType","label"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.scss?tag=limel-example-text-editor-triggers&encapsulation=shadow","./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["limel-button-group {\n    min-width: 8rem;\n}\n\nlimel-example-controls {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.mode {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.value {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-portal {\n    width: auto;\n}\n","import {\n    Button,\n    LimelMenuListCustomEvent,\n    MenuItem,\n} from '@limetech/lime-elements';\nimport { Component, h, State, Element, Watch } from '@stencil/core';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    TAB,\n} from '../../../util/keycodes';\nimport { TextEditor, TriggerEventDetail } from '../text-editor.types';\n\n/**\n * Custom triggers\n *\n * A trigger is a character or sequence of characters that if typed in the text editor\n * will initiate a trigger session. The session is initialized with a `triggerStart`\n * event. Subsequent characters written after the trigger sequence will be sent in a\n * `triggerChange` event. When the focus is removed from the trigger a `triggerStop`\n * event will be sent.\n *\n * The `triggerStart` event contains a `TextEditorInserter` object containing functions\n * to manipulate the state of the text editor around the trigger. Using any of the\n * supplied methods will effectivly replace the trigger content in the text editor with\n * the content of choice.\n *\n * In this example we pass either plain text, HTML string, or a `limel-chip`\n * representing some chosen user in a mention like situation.\n *\n * :::note\n * Changing the output mode resets the text editor with an empty value.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n    styleUrl: 'text-editor-custom-triggers.scss',\n})\nexport class TextEditorCustomTriggersExample {\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private tagValue: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private insertMode: 'text' | 'chip' | 'html' = 'text';\n\n    @State()\n    private outputMode: 'markdown' | 'html' = 'markdown';\n\n    @State()\n    private items: Array<MenuItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf', selected: true },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    @State()\n    private visibleItems: Array<MenuItem<number>>;\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n        {\n            id: '3',\n            title: 'html',\n        },\n    ];\n\n    private outputModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'markdown',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'html',\n        },\n    ];\n\n    private triggerFunction?: TextEditor;\n\n    @Watch('isPickerOpen')\n    protected watchOpen() {\n        this.setupEventHandlers();\n    }\n\n    @Watch('tagValue')\n    protected watchTagValue() {\n        if (this.isPickerOpen) {\n            this.visibleItems = this.items.filter((item: MenuItem<number>) =>\n                item.text.toLowerCase().includes(this.tagValue),\n            );\n        }\n    }\n    public componentWillLoad() {\n        this.visibleItems = this.items;\n        this.setupEventHandlers();\n    }\n\n    private setupEventHandlers() {\n        if (this.isPickerOpen) {\n            this.host.addEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        } else {\n            this.host.removeEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        }\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        const capturedKeys = [ESCAPE, ARROW_UP, ARROW_DOWN, ENTER, TAB];\n        if (capturedKeys.includes(event.key)) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if (event.key === ARROW_DOWN || event.key === ARROW_UP) {\n            this.moveSelection(event.key);\n        }\n\n        if (event.key === ENTER || event.key === TAB) {\n            const selectedItem: MenuItem | undefined = this.visibleItems.find(\n                (item) => item.selected,\n            );\n\n            if (selectedItem) {\n                this.insertItem(selectedItem);\n            }\n        }\n\n        if (event.key === ESCAPE) {\n            this.isPickerOpen = false;\n            this.triggerFunction?.stopTrigger();\n        }\n    };\n\n    private moveSelection = (\n        direction: typeof ARROW_UP | typeof ARROW_DOWN,\n    ) => {\n        const increment = direction === ARROW_DOWN ? 1 : -1;\n        const numberOfItems = this.visibleItems.length;\n        const currentSelectionIndex = this.visibleItems.findIndex(\n            (item) => item.selected,\n        );\n\n        const selectionIndex =\n            (currentSelectionIndex + increment + numberOfItems) % numberOfItems;\n\n        this.removeAllSelections();\n        this.setSelection(selectionIndex);\n    };\n\n    private removeAllSelections = () => {\n        this.items = this.items.map((currentItem) => {\n            currentItem.selected = false;\n\n            return { ...currentItem };\n        });\n    };\n\n    private setSelection = (selectionIndex: number) => {\n        let selectedItemId = undefined;\n        this.visibleItems = this.visibleItems.map((item, index) => {\n            const isSelected = index === selectionIndex;\n\n            if (isSelected) {\n                selectedItemId = item.value;\n            }\n\n            return { ...item, selected: isSelected };\n        });\n\n        if (selectedItemId) {\n            this.items[selectedItemId - 1].selected = true;\n        }\n    };\n\n    public render() {\n        return [\n            <limel-example-controls>\n                <label>\n                    Output mode:\n                    <limel-button-group\n                        class=\"mode\"\n                        value={this.outputModeButtons}\n                        onChange={this.handleOutputModeChange}\n                    />\n                </label>\n            </limel-example-controls>,\n            this.renderPicker(),\n            <limel-text-editor\n                style={{ display: 'block' }}\n                value={this.value}\n                customElements={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n                onChange={this.handleChange}\n                contentType={this.outputMode}\n                key={this.outputMode}\n            />,\n            <limel-example-controls>\n                <label>\n                    Insert mode:\n                    <limel-button-group\n                        class=\"mode\"\n                        value={this.insertModeButtons}\n                        onChange={this.handleInsertModeChange}\n                    />\n                </label>\n                <div class=\"value\">\n                    <limel-example-value\n                        label=\"Action\"\n                        value={this.triggerState}\n                    />\n                    <limel-example-value\n                        label=\"Tag value\"\n                        value={this.tagValue}\n                    />\n                </div>\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private renderPicker = () => {\n        return (\n            <limel-popover\n                open={this.isPickerOpen}\n                openDirection=\"top-start\"\n                onClose={this.handleTriggerStop}\n            >\n                {this.renderList(this.visibleItems)}\n            </limel-popover>\n        );\n    };\n\n    private renderList = (items: Array<MenuItem<number>>) => {\n        if (items.length === 0) {\n            return (\n                <div style={{ padding: '0.5rem' }}>\n                    Couldn't find. Not a hero yet! 🥲\n                </div>\n            );\n        }\n\n        return (\n            <limel-menu-list\n                items={items}\n                onInteract={this.handleListInteraction}\n            />\n        );\n    };\n\n    private handleTriggerStart = (event: CustomEvent<TriggerEventDetail>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail.textEditor;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.tagValue = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<TriggerEventDetail>) => {\n        this.tagValue = event.detail.value.toLowerCase();\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleListInteraction = (\n        event: LimelMenuListCustomEvent<MenuItem<number>>,\n    ) => {\n        this.insertItem(event.detail);\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n\n    private handleOutputModeChange = (event: CustomEvent<Button>) => {\n        this.outputMode = event.detail.title as any;\n        this.value = '';\n    };\n\n    private insertItem = (item: MenuItem) => {\n        this.removeAllSelections();\n        this.visibleItems = this.items;\n\n        if (this.insertMode === 'html') {\n            this.triggerFunction\n                .insertHtml(`<strong>${item.text}</strong>`)\n                .then(() => console.log('HTML inserted successfully'))\n                .catch((error) =>\n                    console.error('Error inserting HTML:', error),\n                );\n\n            return;\n        }\n\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insert('@' + item.text);\n\n            return;\n        }\n\n        this.triggerFunction.insert({\n            node: {\n                tagName: 'limel-chip',\n                attributes: {\n                    icon: item.icon,\n                    text: item.text,\n                },\n            },\n            children: [\"I'm a teapot\"],\n        });\n    };\n}\n"],"mappings":"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"}