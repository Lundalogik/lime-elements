{"version":3,"names":["textEditorCustomTriggersCss","TextEditorCustomTriggersExample","constructor","hostRef","this","handleGlobalKeyPress","event","key","ESCAPE","stopPropagation","preventDefault","close","emit","insertModeButtons","id","title","selected","items","text","value","icon","handleTriggerStart","triggerState","isPickerOpen","triggerFunction","detail","textEditor","handleTriggerStop","inputText","handleTriggerChange","toLowerCase","handleChange","renderPicker","filter","item","includes","dropdownZIndex","getComputedStyle","host","getPropertyValue","h","containerStyle","containerId","portalId","visible","openDirection","inheritParentWidth","anchor","textEditorElement","renderList","length","style","padding","onChange","handleListChange","type","async","insertMode","insertHtml","insert","node","tagName","attributes","children","handleInsertModeChange","createRandomString","globalClickListener","bind","watchOpen","setupGlobalHandlers","componentWillLoad","document","addEventListener","capture","removeEventListener","render","display","ref","el","customElements","triggers","onTriggerStart","onTriggerStop","onTriggerChange","class","label","element","target","clickedInside","portalContains"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.scss?tag=limel-example-text-editor-triggers&encapsulation=shadow","./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["limel-button-group {\n    min-width: 8rem;\n}\n\nlimel-example-controls {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.mode {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.value {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-portal {\n    width: auto;\n}\n","import {\n    Button,\n    LimelListCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\nimport {\n    Component,\n    h,\n    State,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from 'src/util/random-string';\nimport { portalContains } from '../../portal/contains';\nimport { ESCAPE } from '../../../util/keycodes';\nimport { TextEditor, TriggerEventDetail } from '../text-editor.types';\n\n/**\n * Custom triggers\n *\n * A trigger is a character or sequence of characters that if typed in the text editor\n * will initiate a trigger session. The session is initialized with a `triggerStart`\n * event. Subsequent characters written after the trigger sequence will be sent in a\n * `triggerChange` event. When the focus is removed from the trigger a `triggerStop`\n * event will be sent.\n *\n * The `triggerStart` event contains a `TextEditorInserter` object containing functions\n * to manipulate the state of the text editor around the trigger. Using any of the\n * supplied methods will effectivly replace the trigger content in the text editor with\n * the content of choice.\n *\n * In this example we pass either plain text, HTML string, or a `limel-chip`\n * representing some chosen user in a mention like situation.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n    styleUrl: 'text-editor-custom-triggers.scss',\n})\nexport class TextEditorCustomTriggersExample {\n    constructor() {\n        this.portalId = createRandomString();\n        this.globalClickListener = this.globalClickListener.bind(this);\n    }\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private inputText: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private textEditorElement: HTMLElement;\n\n    @State()\n    private insertMode: 'text' | 'chip' | 'html' = 'text';\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    /**\n     * Emits an event when the component is closing\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    @Watch('isPickerOpen')\n    protected watchOpen() {\n        this.setupGlobalHandlers();\n    }\n\n    public componentWillLoad() {\n        this.setupGlobalHandlers();\n    }\n\n    private setupGlobalHandlers() {\n        if (this.isPickerOpen) {\n            document.addEventListener('click', this.globalClickListener, {\n                capture: true,\n            });\n            document.addEventListener('keyup', this.handleGlobalKeyPress);\n        } else {\n            document.removeEventListener('click', this.globalClickListener);\n            document.removeEventListener('keyup', this.handleGlobalKeyPress);\n        }\n    }\n\n    private handleGlobalKeyPress = (event: KeyboardEvent) => {\n        if (event.key !== ESCAPE) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n        this.close.emit();\n    };\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n        {\n            id: '3',\n            title: 'html',\n        },\n    ];\n\n    private portalId: string;\n    private items: Array<ListItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf' },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    private triggerFunction?: TextEditor;\n\n    public render() {\n        return [\n            <limel-text-editor\n                style={{ display: 'block' }}\n                ref={(el) => (this.textEditorElement = el)}\n                value={this.value}\n                customElements={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                Insert mode:\n                <limel-button-group\n                    class=\"mode\"\n                    value={this.insertModeButtons}\n                    onChange={this.handleInsertModeChange}\n                />\n                <div class=\"value\">\n                    <limel-example-value\n                        label=\"Action\"\n                        value={this.triggerState}\n                    />\n                    <limel-example-value\n                        label=\"Tag value\"\n                        value={this.inputText}\n                    />\n                </div>\n            </limel-example-controls>,\n            this.renderPicker(),\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleTriggerStart = (event: CustomEvent<TriggerEventDetail>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail.textEditor;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.inputText = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<TriggerEventDetail>) => {\n        this.inputText = event.detail.value.toLowerCase();\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private renderPicker = () => {\n        if (!this.isPickerOpen) {\n            return;\n        }\n\n        const items = this.items.filter((item: ListItem<number>) =>\n            item.text.toLowerCase().includes(this.inputText),\n        );\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index',\n        );\n\n        return [\n            <limel-portal\n                containerStyle={{\n                    'background-color': 'rgb(var(--contrast-100))',\n                    'border-radius': '0.5rem',\n                    'box-shadow': 'var(--shadow-depth-16)',\n                    'z-index': dropdownZIndex,\n                }}\n                containerId={this.portalId}\n                visible={this.isPickerOpen}\n                openDirection=\"bottom-start\"\n                inheritParentWidth={true}\n                anchor={this.textEditorElement}\n            >\n                {this.renderList(items)}\n            </limel-portal>,\n        ];\n    };\n\n    private globalClickListener(event: MouseEvent) {\n        const element: HTMLElement = event.target as HTMLElement;\n        const clickedInside = portalContains(this.host, element);\n        if (this.isPickerOpen && !clickedInside) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.isPickerOpen = false;\n            this.close.emit();\n        }\n    }\n\n    private renderList = (items: Array<ListItem<number>>) => {\n        if (items.length === 0) {\n            return (\n                <div style={{ padding: '0.5rem' }}>\n                    Couldn't find. Not a hero yet! ðŸ¥²\n                </div>\n            );\n        }\n\n        return (\n            <limel-list\n                items={items}\n                onChange={this.handleListChange}\n                type=\"selectable\"\n            />\n        );\n    };\n\n    private handleListChange = async (\n        event: LimelListCustomEvent<ListItem<number>>,\n    ) => {\n        if (this.insertMode === 'html') {\n            await this.triggerFunction.insertHtml(\n                `<strong>${event.detail.text}</strong>`,\n            );\n\n            return;\n        }\n\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insert('@' + event.detail.text);\n\n            return;\n        }\n\n        this.triggerFunction.insert({\n            node: {\n                tagName: 'limel-chip',\n                attributes: {\n                    icon: event.detail.icon,\n                    text: event.detail.text,\n                },\n            },\n            children: [\"I'm a teapot\"],\n        });\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n}\n"],"mappings":"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"}