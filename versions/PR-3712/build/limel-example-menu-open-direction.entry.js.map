{"version":3,"names":["menuOpenDirectionCss","MenuOpenDirectionExample","constructor","hostRef","this","items","text","separator","handleNewSelection","event","selectedOpenDirection","detail","openDirections","availableOpenDirections","map","value","find","v","render","h","openDirection","_a","label","slot","class","options","onChange"],"sources":["./src/components/menu/examples/menu-open-direction.scss?tag=limel-example-menu-open-direction&encapsulation=shadow","./src/components/menu/examples/menu-open-direction.tsx"],"sourcesContent":[":host(limel-example-menu-open-direction) {\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\nlimel-select {\n    min-width: 8.75rem;\n}\n","import {\n    MenuItem,\n    ListSeparator,\n    OpenDirection,\n    Option,\n    LimelSelectCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * openDirection\n *\n * The value of the `openDirection` property defines how the menu content\n * is aligned with its trigger element, and in which direction it opens.\n */\n@Component({\n    tag: 'limel-example-menu-open-direction',\n    shadow: true,\n    styleUrl: 'menu-open-direction.scss',\n})\nexport class MenuOpenDirectionExample {\n    @State()\n    private selectedOpenDirection: Option<OpenDirection>;\n\n    private availableOpenDirections: Array<Option<OpenDirection>>;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy' },\n        { text: 'Cut' },\n        { separator: true },\n        { text: 'Paste' },\n    ];\n\n    constructor() {\n        const openDirections: OpenDirection[] = [\n            'left-start',\n            'left',\n            'left-end',\n            'right-start',\n            'right',\n            'right-end',\n            'top-start',\n            'top',\n            'top-end',\n            'bottom-start',\n            'bottom',\n            'bottom-end',\n        ];\n        this.availableOpenDirections = openDirections.map((value) => {\n            return {\n                text: value as string,\n                value: value,\n            } as Option<OpenDirection>;\n        });\n        this.selectedOpenDirection = this.availableOpenDirections.find(\n            (v) => v.value === 'bottom-start'\n        );\n    }\n\n    public render() {\n        return [\n            <limel-menu\n                items={this.items}\n                openDirection={this.selectedOpenDirection?.value}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-select\n                class=\"is-narrow\"\n                label=\"openDirection\"\n                options={this.availableOpenDirections}\n                value={this.selectedOpenDirection}\n                onChange={this.handleNewSelection}\n            />,\n        ];\n    }\n\n    private handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<OpenDirection>>\n    ) => {\n        this.selectedOpenDirection = event.detail;\n    };\n}\n"],"mappings":"+CAAA,MAAMA,EAAuB,+H,MCoBhBC,EAAwB,MAajCC,YAAAC,G,UAPQC,KAAAC,MAAyC,CAC7C,CAAEC,KAAM,QACR,CAAEA,KAAM,OACR,CAAEC,UAAW,MACb,CAAED,KAAM,UA+CJF,KAAAI,mBACJC,IAEAL,KAAKM,sBAAwBD,EAAME,MAAM,E,qCA9CzC,MAAMC,EAAkC,CACpC,aACA,OACA,WACA,cACA,QACA,YACA,YACA,MACA,UACA,eACA,SACA,cAEJR,KAAKS,wBAA0BD,EAAeE,KAAKC,IACxC,CACHT,KAAMS,EACNA,MAAOA,MAGfX,KAAKM,sBAAwBN,KAAKS,wBAAwBG,MACrDC,GAAMA,EAAEF,QAAU,gB,CAIpBG,S,MACH,MAAO,CACHC,EAAA,cACId,MAAOD,KAAKC,MACZe,eAAeC,EAAAjB,KAAKM,yBAAqB,MAAAW,SAAA,SAAAA,EAAEN,OAE3CI,EAAA,gBAAcG,MAAM,OAAOC,KAAK,aAEpCJ,EAAA,gBACIK,MAAM,YACNF,MAAM,gBACNG,QAASrB,KAAKS,wBACdE,MAAOX,KAAKM,sBACZgB,SAAUtB,KAAKI,qB"}