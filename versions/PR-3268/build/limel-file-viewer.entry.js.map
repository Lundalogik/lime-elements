{"version":3,"names":["detectExtension","fileName","url","pathLike","extension","split","pop","toLowerCase","extensionsToTypes","pdf","jpg","jpeg","heic","bmp","png","gif","svg","svgz","ep","eps","avi","flv","h264","mov","mp4","mwv","mkv","mp3","wav","wma","ogg","txt","json","html","xml","doc","docx","odt","dot","dotx","docm","dotm","pot","ppt","pptx","odp","potx","potm","pps","ppsx","ppsm","pptm","ppam","pages","xls","xlsx","xlsm","xlsb","ods","csv","numbers","Fullscreen","constructor","element","this","requestFullscreen","enter","exitFullscreen","exit","bind","window","document","toggle","isFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","isSupported","fileViewerCss","FileViewer","hostRef","renderPdf","h","class","renderActionMenu","src","fileUrl","loading","renderImage","renderButtons","alt","renderVideo","controls","renderAudio","renderText","data","type","renderOffice","getOfficeViewerUrl","isOfficeFileAccessibleViaURL","fileType","startsWith","officeViewers","officeViewer","renderNoFileSupportMessage","name","size","role","getTranslation","renderDownloadButton","renderToggleFullscreenButton","renderOpenInNewTabButton","allowFullscreen","fullscreen","icon","label","id","onClick","handleToggleFullscreen","elementId","openDirection","allowDownload","download","filename","href","target","allowOpenInNewTab","rel","actions","items","onSelect","emitOnAction","slot","createURL","async","includes","response","fetch","blob","URL","createObjectURL","event","stopPropagation","action","emit","detail","HostElement","render","limeBranded","renderFileViewer","newUrl","oldUrl","fileViewerFunctions","image","video","audio","text","office","fileViewerFunction","key","translate","get","language"],"sources":["./src/components/file-viewer/extension-mapping.tsx","./src/components/file-viewer/fullscreen.ts","./src/components/file-viewer/file-viewer.scss?tag=limel-file-viewer&encapsulation=shadow","./src/components/file-viewer/file-viewer.tsx"],"sourcesContent":["export function detectExtension(fileName, url): any {\n    const pathLike = fileName || url;\n    if (!pathLike) {\n        return 'unknown';\n    }\n\n    const extension = pathLike.split('.').pop().toLowerCase();\n    const extensionsToTypes = {\n        pdf: 'pdf',\n        jpg: 'image',\n        jpeg: 'image',\n        heic: 'image',\n        bmp: 'image',\n        png: 'image',\n        gif: 'image',\n        svg: 'image',\n        svgz: 'image',\n        ep: 'image',\n        eps: 'image',\n        avi: 'video',\n        flv: 'video',\n        h264: 'video',\n        mov: 'video',\n        mp4: 'video',\n        mwv: 'video',\n        mkv: 'video',\n        mp3: 'audio',\n        wav: 'audio',\n        wma: 'audio',\n        ogg: 'audio',\n        txt: 'text',\n        json: 'text',\n        html: 'text',\n        xml: 'text',\n        // Word\n        doc: 'office',\n        docx: 'office',\n        odt: 'office',\n        dot: 'office',\n        dotx: 'office',\n        docm: 'office', // not supported\n        dotm: 'office', // not yet tested\n        // Presentation\n        pot: 'office', // not tested\n        ppt: 'office',\n        pptx: 'office',\n        odp: 'office',\n        potx: 'office', // not supported\n        potm: 'office', // not supported\n        pps: 'office',\n        ppsx: 'office',\n        ppsm: 'office', // not supported\n        pptm: 'office', // not supported\n        ppam: 'office', // not tested\n        pages: 'office', // not supported (Apple)\n        // Spreadsheet\n        xls: 'office',\n        xlsx: 'office',\n        xlsm: 'office',\n        xlsb: 'office',\n        ods: 'office',\n        csv: 'office', // not supported\n        numbers: 'office', // not supported (Apple)\n    };\n\n    return extensionsToTypes[extension] || 'unknown';\n}\n","export class Fullscreen {\n    private enter: () => void;\n    private exit: () => void;\n\n    constructor(element: any) {\n        this.enter =\n            element.requestFullscreen ||\n            element.msRequestFullscreen ||\n            element.mozRequestFullScreen ||\n            element.webkitRequestFullscreen;\n        this.enter = this.enter.bind(element);\n        const doc: any = window.document;\n        this.exit =\n            doc.exitFullscreen ||\n            doc.msExitFullscreen ||\n            doc.mozCancelFullScreen ||\n            doc.webkitExitFullscreen;\n    }\n\n    public requestFullscreen = () => {\n        if (this.enter) {\n            this.enter();\n        }\n    };\n\n    public exitFullscreen = () => {\n        if (this.exit) {\n            this.exit.bind(window.document)();\n        }\n    };\n\n    public toggle = () => {\n        const doc: any = window.document;\n        const isFullscreen =\n            doc.fullscreenElement ||\n            doc.mozFullScreenElement ||\n            doc.webkitFullscreenElement ||\n            doc.msFullscreenElement;\n\n        if (isFullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    };\n\n    public isSupported(): boolean {\n        return !!this.requestFullscreen;\n    }\n}\n","@use '../../style/internal/variables';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n$size-of-buttons: 2rem;\n\n:host {\n    isolation: isolate;\n    position: relative;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nimg,\nvideo,\naudio,\nobject,\niframe {\n    max-height: 100%;\n    max-width: 100%;\n    box-sizing: border-box;\n}\n\niframe {\n    border: none;\n    width: 100%;\n    height: 100%;\n    min-height: 20rem; // makes sure to get minimum comfortable space for viewing office files, and Microsoft Office viewers toolbars\n}\n\nimg {\n    min-width: 7rem;\n    object-fit: contain; // increases or decreases the size of the image to fill the box whilst preserving its aspect-ratio.\n}\n\nvideo {\n    width: 100%;\n    height: auto;\n}\n\naudio {\n    width: 100%;\n}\n\nobject {\n    width: 100%;\n    height: 100%;\n}\n\nobject[type='application/pdf'] {\n    min-height: 20rem;\n    // makes sure to get browsers' native controls for the PDF\n}\n\nobject[type='text/plain'] {\n    border-radius: 0.25rem;\n    padding-right: $size-of-buttons;\n\n    overflow-y: auto;\n}\n\n@mixin plain-text-in-fullscreen {\n    background-color: rgb(var(--color-gray-darker));\n\n    object[type='text/plain'] {\n        max-width: 50rem;\n        max-height: calc(100% - 2rem);\n    }\n}\n\n:host(:fullscreen) {\n    @include plain-text-in-fullscreen;\n}\n:host(:-webkit-full-screen) {\n    // this is repetition of the previous block,\n    // but needed for Safari to work.\n    // Cannot write SCSS rules for `:host` using commas for some reason.\n    // e.g.: `:host(:fullscreen), :host(:-webkit-full-screen)`.\n    // So you have to repeat it sadly.\n    @include plain-text-in-fullscreen;\n}\n\n@import './partial-styles/ui-controls.scss';\n","import {\n    Component,\n    Element,\n    h,\n    Prop,\n    State,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { Languages } from '../date-picker/date.types';\nimport { ListItem } from '../list/list-item.types';\nimport translate from '../../global/translations';\nimport { detectExtension } from './extension-mapping';\nimport { Fullscreen } from './fullscreen';\nimport { FileType, OfficeViewer } from './file-viewer.types';\nimport { LimelMenuCustomEvent } from '../../components';\n\n/**\n * This is a smart component that automatically detects\n * the most common file types such as image, audio, video, and text,\n * and properly displays them in the browser.\n * The component is also capable to render the most common office files.\n *\n * :::note\n * Image files will always be contained in their containers, which means\n * they automatically increase or decrease in size to fill their containing box\n * whilst preserving their aspect-ratio.\n *\n * Text and PDF files will also always respect the width and height of the\n * container in which the `limel-file-viewer` is loaded.\n * :::\n *\n * For some file types such as text and images, the component will display a\n * download button and a button to open the file in a new browser tab.\n * This will allow users to preview the file in a fullscreen mode with the\n * browser and take advantage of for example native zooming and panning\n * functionalities.\n *\n * @exampleComponent limel-example-file-viewer\n * @exampleComponent limel-example-file-viewer-office\n * @exampleComponent limel-example-file-viewer-filename\n * @exampleComponent limel-example-file-viewer-inbuilt-actions\n * @exampleComponent limel-example-file-viewer-custom-actions\n * @exampleComponent limel-example-file-viewer-with-picker\n * @private\n */\n\n@Component({\n    tag: 'limel-file-viewer',\n    shadow: true,\n    styleUrl: 'file-viewer.scss',\n})\nexport class FileViewer {\n    /**\n     * Link to the file\n     */\n    @Prop({ reflect: true })\n    public url: string;\n\n    /**\n     * The name of the file that must also contains its extension.\n     * This overrides the filename that the `url` ends with.\n     * Useful when the `url` does not contain the filename.\n     * When specified, the `filename` will be used as filename of\n     * the downloaded file.\n     */\n    @Prop({ reflect: true })\n    public filename?: string;\n\n    /**\n     * An optional alternative text, mainly for assistive technologies and screen readers.\n     * It is used for only image files, as an `alt` attribute.\n     * Should optimally hold a description of the image,\n     * which is also displayed on the page if the image can't be loaded for some reason.\n     */\n    @Prop({ reflect: true })\n    public alt?: string;\n\n    /**\n     * Displays a button that allows the user to view the file\n     * in fullscreen mode.\n     * Not displayed for office files!\n     */\n    @Prop({ reflect: true })\n    public allowFullscreen?: boolean = false;\n\n    /**\n     * Displays a button that allows the user to open the file\n     * in a new browser tab.\n     * Not displayed for office files!\n     */\n    @Prop({ reflect: true })\n    public allowOpenInNewTab?: boolean = false;\n\n    /**\n     * Displays a button that allows the user to download the file.\n     * Note that due to the browser's security policies,\n     * the file should be hosted on the same domain\n     * for the download button to work properly.\n     * Not displayed for office files!\n     */\n    @Prop({ reflect: true })\n    public allowDownload?: boolean = false;\n\n    /**\n     * Defines the localization for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Defines the third-party viewer that should be used to render\n     * the content of office files, such as word processing documents,\n     * presentations, or spreadsheets.\n     */\n    @Prop({ reflect: true })\n    public officeViewer: OfficeViewer = 'microsoft-office';\n\n    /**\n     * An array of custom actions that can be displayed\n     * as an action menu on the file which is being displayed.\n     */\n    @Prop()\n    public actions: ListItem[];\n\n    /**\n     * Emitted when a custom action is selected from the action menu.\n     */\n    @Event()\n    public action: EventEmitter<ListItem>;\n\n    @Element()\n    public HostElement: HTMLLimelFileViewerElement;\n\n    private fullscreen: Fullscreen;\n\n    @State()\n    private isFullscreen: boolean = false;\n\n    @State()\n    private fileType: FileType;\n\n    /**\n     * True while the file is being loaded.\n     */\n    @State()\n    private loading: boolean = true;\n\n    @State()\n    private fileUrl: string = '';\n\n    constructor() {\n        this.fullscreen = new Fullscreen(this.HostElement);\n    }\n\n    public async componentWillLoad() {\n        this.fileType = detectExtension(this.filename, this.url);\n        await this.createURL(this.fileType);\n    }\n\n    public render() {\n        if (!this.isOfficeFileAccessibleViaURL) {\n            return this.renderNoFileSupportMessage();\n        }\n\n        if (this.loading) {\n            return <limel-spinner size=\"x-small\" limeBranded={false} />;\n        }\n\n        return this.renderFileViewer();\n    }\n\n    @Watch('url')\n    protected async watchUrl(newUrl: string, oldUrl: string) {\n        if (newUrl === oldUrl) {\n            return;\n        }\n\n        this.loading = true;\n        this.fileType = detectExtension(this.filename, this.fileUrl);\n        await this.createURL(this.fileType);\n    }\n\n    private renderFileViewer() {\n        const fileViewerFunctions = {\n            pdf: this.renderPdf,\n            image: this.renderImage,\n            video: this.renderVideo,\n            audio: this.renderAudio,\n            text: this.renderText,\n            office: this.renderOffice,\n        };\n        const fileViewerFunction =\n            fileViewerFunctions[this.fileType] ||\n            this.renderNoFileSupportMessage;\n\n        return fileViewerFunction();\n    }\n\n    private renderPdf = () => {\n        return [\n            <div class=\"action-menu-for-pdf-files\">\n                {this.renderActionMenu()}\n            </div>,\n            <iframe src={this.fileUrl} loading=\"lazy\" />,\n        ];\n    };\n\n    private renderImage = () => {\n        return [\n            this.renderButtons(),\n            <img src={this.fileUrl} alt={this.alt} loading=\"lazy\" />,\n        ];\n    };\n\n    private renderVideo = () => {\n        return (\n            <video controls>\n                <source src={this.fileUrl} />\n            </video>\n        );\n    };\n\n    private renderAudio = () => {\n        return (\n            <audio controls>\n                <source src={this.fileUrl} />\n            </audio>\n        );\n    };\n\n    private renderText = () => {\n        return [\n            this.renderButtons(),\n            <object data={this.fileUrl} type=\"text/plain\" />,\n        ];\n    };\n\n    private renderOffice = () => {\n        return [\n            <div class=\"action-menu-for-office-files\">\n                {this.renderActionMenu()}\n            </div>,\n            <iframe\n                src={\n                    this.getOfficeViewerUrl() + this.fileUrl + '&embedded=true'\n                }\n                loading=\"lazy\"\n            />,\n        ];\n    };\n\n    private isOfficeFileAccessibleViaURL = () => {\n        return (\n            this.fileType === 'office' &&\n            !(\n                this.fileUrl.startsWith('http://') ||\n                this.fileUrl.startsWith('https://')\n            )\n        );\n    };\n\n    private getOfficeViewerUrl = () => {\n        const officeViewers = {\n            'microsoft-office':\n                'https://view.officeapps.live.com/op/embed.aspx?src=',\n            'google-drive': 'https://docs.google.com/gview?url=',\n        };\n\n        return officeViewers[this.officeViewer];\n    };\n\n    private renderNoFileSupportMessage = () => {\n        return (\n            <div class=\"no-support\">\n                <limel-icon\n                    class=\"icon--warning\"\n                    name=\"brake_warning\"\n                    size=\"large\"\n                    role=\"presentation\"\n                />\n                <p>{this.getTranslation('message.unsupported-filetype')}</p>\n                {this.renderDownloadButton()}\n            </div>\n        );\n    };\n\n    private renderButtons = () => {\n        return (\n            <div class=\"buttons\">\n                {this.renderActionMenu()}\n                {this.renderToggleFullscreenButton()}\n                {this.renderDownloadButton()}\n                {this.renderOpenInNewTabButton()}\n            </div>\n        );\n    };\n\n    private renderToggleFullscreenButton = () => {\n        if (!this.allowFullscreen || !this.fullscreen.isSupported()) {\n            return;\n        }\n\n        const icon = this.isFullscreen ? 'multiply' : 'fit_to_width';\n        // eslint-disable-next-line multiline-ternary\n        const label = this.isFullscreen\n            ? // eslint-disable-next-line multiline-ternary\n              this.getTranslation('exit-fullscreen')\n            : this.getTranslation('open-in-fullscreen');\n\n        return [\n            <button\n                class=\"button--toggle-fullscreen\"\n                id=\"tooltip-toggle-fullscreen\"\n                role=\"button\"\n                onClick={this.handleToggleFullscreen}\n            >\n                <limel-icon name={icon} />\n                <limel-tooltip\n                    label={label}\n                    elementId=\"tooltip-toggle-fullscreen\"\n                    openDirection=\"left\"\n                />\n            </button>,\n        ];\n    };\n\n    private renderDownloadButton = () => {\n        if (!this.allowDownload || this.isFullscreen) {\n            return;\n        }\n\n        return (\n            <a\n                class=\"button--download\"\n                id=\"tooltip-download\"\n                role=\"button\"\n                download={this.filename ? this.filename : ''}\n                href={this.fileUrl}\n                target=\"_blank\"\n            >\n                <limel-icon name=\"download_2\" />\n                <limel-tooltip\n                    label={this.getTranslation('download')}\n                    elementId=\"tooltip-download\"\n                    openDirection=\"left\"\n                />\n            </a>\n        );\n    };\n\n    private renderOpenInNewTabButton = () => {\n        if (!this.allowOpenInNewTab || this.isFullscreen) {\n            return;\n        }\n\n        return (\n            <a\n                class=\"button--new-tab\"\n                id=\"tooltip-new-tab\"\n                role=\"button\"\n                href={this.fileUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <limel-icon name=\"external_link\" />\n                <limel-tooltip\n                    label={this.getTranslation('open-in-new-tab')}\n                    elementId=\"tooltip-new-tab\"\n                    openDirection=\"left\"\n                />\n            </a>\n        );\n    };\n\n    private renderActionMenu = () => {\n        if (!this.actions || this.isFullscreen) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class=\"action-menu\"\n                items={this.actions}\n                onSelect={this.emitOnAction}\n                open-direction=\"left\"\n            >\n                <button\n                    class=\"button--action\"\n                    id=\"tooltip-more\"\n                    role=\"button\"\n                    slot=\"trigger\"\n                >\n                    <limel-icon name=\"menu_2\" />\n                    <limel-tooltip\n                        label={this.getTranslation('more-actions')}\n                        elementId=\"tooltip-more\"\n                        openDirection=\"left\"\n                    />\n                </button>\n            </limel-menu>\n        );\n    };\n\n    private createURL = async (fileType: string) => {\n        if (['pdf'].includes(fileType)) {\n            const response = await fetch(this.url);\n            const blob = await response.blob();\n\n            this.fileUrl = URL.createObjectURL(blob);\n        } else {\n            this.fileUrl = this.url;\n        }\n\n        this.loading = false;\n    };\n\n    private handleToggleFullscreen = () => {\n        if (this.fullscreen.isSupported()) {\n            this.fullscreen.toggle();\n            this.isFullscreen = !this.isFullscreen;\n        }\n    };\n\n    private emitOnAction = (event: LimelMenuCustomEvent<ListItem>) => {\n        event.stopPropagation();\n        this.action.emit(event.detail);\n    };\n\n    private getTranslation(key: string) {\n        return translate.get(`file-viewer.${key}`, this.language);\n    }\n}\n"],"mappings":"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"}