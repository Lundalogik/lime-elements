{"version":3,"names":["TextEditorCustomElementExample","this","handleChange","event","value","detail","render","h","onChange","customElements","tagName","attributes"],"sources":["./src/components/text-editor/examples/text-editor-custom-element.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n/**\n * A custom element can be configured\n *\n * The default behavior of the text editor is to only allow standard HTML element\n * like `em` and `h`. To add your own custom elements one can add custom elements\n * passing them to the `plugins` property.\n *\n * In this example we pass `limel-chip` as a custom element along with the allowed\n * attributes `text` and `icon`.\n */\n@Component({\n    tag: 'limel-example-text-editor-custom-element',\n    shadow: true,\n})\nexport class TextEditorCustomElementExample {\n    @State()\n    private value: string =\n        \"This chip doesn't fit \" +\n        '<limel-chip text=\"Github\" icon=\"github_copyrighted\"/>';\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                customElements={[\n                    {\n                        tagName: 'limel-chip',\n                        attributes: ['text', 'icon'],\n                    },\n                ]}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"],"mappings":"qDAeaA,EAA8B,M,yBAsB/BC,KAAAC,aAAgBC,IACpBF,KAAKG,MAAQD,EAAME,MAAM,E,WApBzB,yBACA,uD,CAEGC,SACH,MAAO,CACHC,EAAA,qBACIH,MAAOH,KAAKG,MACZI,SAAUP,KAAKC,aACfO,eAAgB,CACZ,CACIC,QAAS,aACTC,WAAY,CAAC,OAAQ,YAIjCJ,EAAA,uBAAqBH,MAAOH,KAAKG,Q"}