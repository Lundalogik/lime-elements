{"version":3,"names":["TextEditorCustomTriggersExample","constructor","hostRef","this","insertModeButtons","id","title","selected","items","text","value","icon","handleTriggerStart","event","triggerState","isPickerOpen","triggerFunction","detail","handleTriggerStop","inputText","handleTriggerChange","toLowerCase","renderPicker","filter","item","includes","h","onChange","handleListChange","type","insertMode","insertText","insertNode","handleInsertModeChange","portalId","createRandomString","render","style","display","ref","el","textEditorElement","plugins","tagName","attributes","triggers","onTriggerStart","onTriggerStop","onTriggerChange"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["import { Button, ListItem, TextEditorInserter } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { createRandomString } from 'src/util/random-string';\n/**\n * A custom element can be configured\n *\n * The default behavior of the text editor is to only allow standard HTML element\n * like `em` and `h`. To add your own custom elements one can add custom elements\n * passing them to the `plugins` property.\n *\n * In this example we pass `limel-chip` as a custom element along with the allowed\n * attributes `text` and `icon`.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n})\nexport class TextEditorCustomTriggersExample {\n    constructor() {\n        this.portalId = createRandomString();\n    }\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private inputText: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private textEditorElement: HTMLElement;\n\n    @State()\n    private insertMode: 'text' | 'chip' = 'text';\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n    ];\n\n    private portalId: string;\n    private items: Array<ListItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf' },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    private triggerFunction?: TextEditorInserter;\n\n    public render() {\n        return [\n            <limel-text-editor\n                style={{ display: 'block' }}\n                ref={(el) => (this.textEditorElement = el)}\n                value={this.value}\n                plugins={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n            />,\n            <limel-example-controls>\n                Insert mode:{' '}\n                <limel-button-group\n                    value={this.insertModeButtons}\n                    onChange={this.handleInsertModeChange}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.triggerState} />,\n            <limel-example-value value={this.inputText} />,\n            this.renderPicker(),\n        ];\n    }\n\n    private handleTriggerStart = (event: CustomEvent<TextEditorInserter>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.inputText = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<string>) => {\n        this.inputText = event.detail.toLowerCase();\n    };\n\n    private renderPicker = () => {\n        if (!this.isPickerOpen) {\n            return;\n        }\n\n        const items = this.items.filter((item: ListItem<number>) =>\n            item.text.toLowerCase().includes(this.inputText),\n        );\n\n        return (\n            <limel-list\n                items={items}\n                onChange={this.handleListChange}\n                type=\"selectable\"\n            />\n        );\n\n        // return (\n        //     <limel-portal\n        //         containerId={this.portalId}\n        //         visible={this.isPickerOpen}\n        //         openDirection=\"top\"\n        //         inheritParentWidth={true}\n        //         anchor={this.textEditorElement}\n        //     ></limel-portal>\n        // );\n    };\n\n    private handleListChange = (event: CustomEvent<ListItem<number>>) => {\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insertText('@' + event.detail.text);\n\n            return;\n        }\n\n        this.triggerFunction.insertNode('limel-chip', {\n            icon: event.detail.icon,\n            text: event.detail.text,\n        });\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n}\n"],"mappings":"qGAiBaA,EAA+B,MACxCC,YAAAC,G,UAqBQC,KAAAC,kBAA8B,CAClC,CACIC,GAAI,IACJC,MAAO,OACPC,SAAU,MAEd,CACIF,GAAI,IACJC,MAAO,SAKPH,KAAAK,MAAiC,CACrC,CAAEC,KAAM,YAAaC,MAAO,EAAGC,KAAM,QACrC,CAAEF,KAAM,kBAAmBC,MAAO,EAAGC,KAAM,mBAC3C,CAAEF,KAAM,WAAYC,MAAO,EAAGC,KAAM,YACpC,CAAEF,KAAM,aAAcC,MAAO,EAAGC,KAAM,YACtC,CAAEF,KAAM,SAAUC,MAAO,EAAGC,KAAM,eAgC9BR,KAAAS,mBAAsBC,IAC1BV,KAAKW,aAAe,QACpBX,KAAKY,aAAe,KACpBZ,KAAKa,gBAAkBH,EAAMI,MAAM,EAG/Bd,KAAAe,kBAAoB,KACxBf,KAAKW,aAAe,OACpBX,KAAKgB,UAAY,GACjBhB,KAAKY,aAAe,KAAK,EAGrBZ,KAAAiB,oBAAuBP,IAC3BV,KAAKgB,UAAYN,EAAMI,OAAOI,aAAa,EAGvClB,KAAAmB,aAAe,KACnB,IAAKnB,KAAKY,aAAc,CACpB,M,CAGJ,MAAMP,EAAQL,KAAKK,MAAMe,QAAQC,GAC7BA,EAAKf,KAAKY,cAAcI,SAAStB,KAAKgB,aAG1C,OACIO,EAAA,cACIlB,MAAOA,EACPmB,SAAUxB,KAAKyB,iBACfC,KAAK,cACP,EAcF1B,KAAAyB,iBAAoBf,IACxB,GAAIV,KAAK2B,aAAe,OAAQ,CAC5B3B,KAAKa,gBAAgBe,WAAW,IAAMlB,EAAMI,OAAOR,MAEnD,M,CAGJN,KAAKa,gBAAgBgB,WAAW,aAAc,CAC1CrB,KAAME,EAAMI,OAAON,KACnBF,KAAMI,EAAMI,OAAOR,MACrB,EAGEN,KAAA8B,uBAA0BpB,IAC9BV,KAAK2B,WAAajB,EAAMI,OAAOX,KAAY,E,WA7HvB,G,kBAGO,G,eAGH,G,kBAGI,M,iDAMM,OAlBlCH,KAAK+B,SAAWC,G,CA2CbC,SACH,MAAO,CACHV,EAAA,qBACIW,MAAO,CAAEC,QAAS,SAClBC,IAAMC,GAAQrC,KAAKsC,kBAAoBD,EACvC9B,MAAOP,KAAKO,MACZgC,QAAS,CACL,CAAEC,QAAS,aAAcC,WAAY,CAAC,OAAQ,UAElDC,SAAU,CAAC,KACXC,eAAgB3C,KAAKS,mBACrBmC,cAAe5C,KAAKe,kBACpB8B,gBAAiB7C,KAAKiB,sBAE1BM,EAAA,6CACiB,IACbA,EAAA,sBACIhB,MAAOP,KAAKC,kBACZuB,SAAUxB,KAAK8B,0BAGvBP,EAAA,uBAAqBhB,MAAOP,KAAKW,eACjCY,EAAA,uBAAqBhB,MAAOP,KAAKgB,YACjChB,KAAKmB,e"}