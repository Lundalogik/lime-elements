{"version":3,"names":["TextEditorCustomTriggersExample","constructor","hostRef","this","items","text","value","handleTriggerStart","event","triggerState","isPickerOpen","triggerFunction","detail","handleTriggerStop","inputText","handleTriggerChange","toLowerCase","renderPicker","filter","item","includes","h","onChange","handleListChange","type","portalId","createRandomString","render","style","display","ref","el","textEditorElement","triggers","onTriggerStart","onTriggerStop","onTriggerChange"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["import { ListItem, TextInserter } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { createRandomString } from 'src/util/random-string';\n/**\n * A custom element can be configured\n *\n * The default behavior of the text editor is to only allow standard HTML element\n * like `em` and `h`. To add your own custom elements one can add custom elements\n * passing them to the `plugins` property.\n *\n * In this example we pass `limel-chip` as a custom element along with the allowed\n * attributes `text` and `icon`.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n})\nexport class TextEditorCustomTriggersExample {\n    constructor() {\n        this.portalId = createRandomString();\n    }\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private inputText: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private textEditorElement: HTMLElement;\n\n    private portalId: string;\n    private items: Array<ListItem<number>> = [\n        { text: 'King of Tokyo', value: 1 },\n        { text: 'Smash Up!', value: 2 },\n        { text: 'Pandemic', value: 3 },\n        { text: 'Catan', value: 4 },\n        { text: 'Ticket to Ride', value: 5 },\n    ];\n    private triggerFunction?: TextInserter;\n\n    public render() {\n        return [\n            <limel-text-editor\n                style={{ display: 'block' }}\n                ref={(el) => (this.textEditorElement = el)}\n                value={this.value}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n            />,\n            <limel-example-value value={this.triggerState} />,\n            <limel-example-value value={this.inputText} />,\n            this.renderPicker(),\n        ];\n    }\n\n    private handleTriggerStart = (event: CustomEvent<TextInserter>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.inputText = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<string>) => {\n        this.inputText = event.detail.toLowerCase();\n    };\n\n    private renderPicker = () => {\n        if (!this.isPickerOpen) {\n            return;\n        }\n\n        const items = this.items.filter((item: ListItem<number>) =>\n            item.text.toLowerCase().includes(this.inputText),\n        );\n\n        return (\n            <limel-list\n                items={items}\n                onChange={this.handleListChange}\n                type=\"selectable\"\n            />\n        );\n\n        // return (\n        //     <limel-portal\n        //         containerId={this.portalId}\n        //         visible={this.isPickerOpen}\n        //         openDirection=\"top\"\n        //         inheritParentWidth={true}\n        //         anchor={this.textEditorElement}\n        //     ></limel-portal>\n        // );\n    };\n\n    private handleListChange = (event: CustomEvent<ListItem<number>>) => {\n        this.triggerFunction('@' + event.detail.text);\n    };\n}\n"],"mappings":"qGAiBaA,EAA+B,MACxCC,YAAAC,G,UAmBQC,KAAAC,MAAiC,CACrC,CAAEC,KAAM,gBAAiBC,MAAO,GAChC,CAAED,KAAM,YAAaC,MAAO,GAC5B,CAAED,KAAM,WAAYC,MAAO,GAC3B,CAAED,KAAM,QAASC,MAAO,GACxB,CAAED,KAAM,iBAAkBC,MAAO,IAqB7BH,KAAAI,mBAAsBC,IAC1BL,KAAKM,aAAe,QACpBN,KAAKO,aAAe,KACpBP,KAAKQ,gBAAkBH,EAAMI,MAAM,EAG/BT,KAAAU,kBAAoB,KACxBV,KAAKM,aAAe,OACpBN,KAAKW,UAAY,GACjBX,KAAKO,aAAe,KAAK,EAGrBP,KAAAY,oBAAuBP,IAC3BL,KAAKW,UAAYN,EAAMI,OAAOI,aAAa,EAGvCb,KAAAc,aAAe,KACnB,IAAKd,KAAKO,aAAc,CACpB,M,CAGJ,MAAMN,EAAQD,KAAKC,MAAMc,QAAQC,GAC7BA,EAAKd,KAAKW,cAAcI,SAASjB,KAAKW,aAG1C,OACIO,EAAA,cACIjB,MAAOA,EACPkB,SAAUnB,KAAKoB,iBACfC,KAAK,cACP,EAcFrB,KAAAoB,iBAAoBf,IACxBL,KAAKQ,gBAAgB,IAAMH,EAAMI,OAAOP,KAAK,E,WAtFzB,G,kBAGO,G,eAGH,G,kBAGI,M,iCAZ5BF,KAAKsB,SAAWC,G,CA2BbC,SACH,MAAO,CACHN,EAAA,qBACIO,MAAO,CAAEC,QAAS,SAClBC,IAAMC,GAAQ5B,KAAK6B,kBAAoBD,EACvCzB,MAAOH,KAAKG,MACZ2B,SAAU,CAAC,KACXC,eAAgB/B,KAAKI,mBACrB4B,cAAehC,KAAKU,kBACpBuB,gBAAiBjC,KAAKY,sBAE1BM,EAAA,uBAAqBf,MAAOH,KAAKM,eACjCY,EAAA,uBAAqBf,MAAOH,KAAKW,YACjCX,KAAKc,e"}