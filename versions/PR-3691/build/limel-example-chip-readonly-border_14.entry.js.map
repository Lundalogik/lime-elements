{"version":3,"names":["chipReadonlyBorderCss","ChipReadonlyBorderExample","render","icon","name","color","h","text","readonly","chipLoadingCss","ChipSizeExample","this","sizeOptions","value","getSelectedSize","find","option","size","handleSizeChange","event","detail","secondaryText","Host","removable","menuItems","badge","label","options","onChange","CollapsibleSectionIconExample","title","header","CollapsibleSectionInvalidExample","isInvalid","endsWith","getHelperText","invalid","isOpen","placeholder","helperText","ColorPickerCompositeExample","setRequired","stopPropagation","required","setDisabled","disabled","setInvalid","setReadonly","setManualInput","manualInput","setPlaceholder","checked","style","gridColumn","marginTop","ColorPickerCustomPaletteExample","customPalette","setPaletteColumnCount","paletteColumnCount","undefined","palette","tooltipLabel","ColorPickerManualInputExample","IconButtonIconExample","toggleFavorite","isFavorite","elevated","getLabel","getIcon","onClick","defaultIcon","toggledIcon","infoTileCss","InfoTilePrimarySlotExample","link","href","target","progress","suffix","slot","items","chartItems","type","profilePictureBasicCss","ProfilePictureExample","handleChange","console","log","TextEditorUiExample","availableUis","handleNewSelection","selectedUi","placeholderText","ui","whatsNewCardCss","WhatsNewCard","heading","subheading","class","renderBadge","date","versionLink","version","description","renderLink","RadioButtonBasicExample","selected","separator","item","selectedItem","componentWillLoad","WhatsNewSliderExample","minValue","maxValue","unit","valuemax","valuemin","display","gap"],"sources":["./src/components/chip/examples/chip-readonly-border.scss?tag=limel-example-chip-readonly-border&encapsulation=shadow","./src/components/chip/examples/chip-readonly-border.tsx","./src/components/chip/examples/chip-loading.scss?tag=limel-example-chip-size&encapsulation=shadow","./src/components/chip/examples/chip-size.tsx","./src/components/collapsible-section/examples/collapsible-section-icon.tsx","./src/components/collapsible-section/examples/collapsible-section-invalid.tsx","./src/components/color-picker/examples/color-picker-composite.tsx","./src/components/color-picker/examples/color-picker-custom-palette.tsx","./src/components/color-picker/examples/color-picker-manual-input.tsx","./src/components/icon-button/examples/icon-button-icon.tsx","./src/components/info-tile/examples/info-tile.scss?tag=limel-example-info-tile-primary-slot&encapsulation=shadow","./src/components/info-tile/examples/info-tile-primary-slot.tsx","./src/components/profile-picture/examples/profile-picture-basic.scss?tag=limel-example-profile-picture-basic&encapsulation=shadow","./src/components/profile-picture/examples/profile-picture-basic.tsx","./src/components/text-editor/examples/text-editor-ui.tsx","./src/whats-new/whats-new-card.scss?tag=limel-whats-new-card&encapsulation=shadow","./src/whats-new/whats-new-card.tsx","./src/whats-new/examples/whats-new-example-radio-button-group.tsx","./src/whats-new/examples/whats-new-example-slider.tsx"],"sourcesContent":["limel-chip {\n    --chip-readonly-border-color: rgb(var(--color-green-default));\n}\n","import { Component, h } from '@stencil/core';\n\n/**\n * Border color\n * In readonly state, the border color of the chip can be customized,\n * using `--chip-readonly-border-color`.\n */\n@Component({\n    tag: 'limel-example-chip-readonly-border',\n    shadow: true,\n    styleUrl: 'chip-readonly-border.scss',\n})\nexport class ChipReadonlyBorderExample {\n    public render() {\n        const icon = {\n            name: 'sent',\n            color: 'rgb(var(--color-green-default))',\n        };\n\n        return <limel-chip text=\"Delivered\" icon={icon} readonly={true} />;\n    }\n}\n",":host {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n","import {\n    ListSeparator,\n    MenuItem,\n    Option,\n    LimelSelectCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, Host, State, h } from '@stencil/core';\n\n/**\n * Size\n * When the `size` property is set to `small`, the chip will render\n * with a smaller height and gap.\n */\n@Component({\n    tag: 'limel-example-chip-size',\n    shadow: true,\n    styleUrl: 'chip-loading.scss',\n})\nexport class ChipSizeExample {\n    @State()\n    private size: 'small' | 'default' = 'default';\n\n    @State()\n    private menuItems: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Email',\n            secondaryText: 'beffie@lime.tech',\n            icon: 'email_sign',\n            value: 1,\n        },\n        {\n            text: 'Direct phone',\n            secondaryText: '+46 987 654 321',\n            icon: 'phone',\n            value: 2,\n        },\n        {\n            text: 'Mobile',\n            secondaryText: '+46 123 456 789',\n            icon: 'touchscreen_smartphone',\n            value: 3,\n        },\n    ];\n\n    private sizeOptions: Option[] = [\n        { text: 'Default', value: 'default' },\n        { text: 'Small', value: 'small' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-chip\n                    text=\"Chip with menu\"\n                    removable={true}\n                    menuItems={this.menuItems}\n                    size={this.size}\n                />\n                <limel-chip\n                    text=\"Chip with badge\"\n                    icon=\"flower\"\n                    badge=\"badge\"\n                    size={this.size}\n                />\n                <limel-chip\n                    text=\"Removable chip\"\n                    removable={true}\n                    icon=\"trash\"\n                    size={this.size}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"Size\"\n                        value={this.getSelectedSize()}\n                        options={this.sizeOptions}\n                        onChange={this.handleSizeChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedSize = (): Option => {\n        return this.sizeOptions.find((option) => option.value === this.size);\n    };\n\n    private handleSizeChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.size = event.detail.value as 'small' | 'default';\n    };\n}\n","import { Component, h } from '@stencil/core';\n\n/**\n * Icon\n */\n@Component({\n    tag: 'limel-example-collapsible-section-icon',\n    shadow: true,\n})\nexport class CollapsibleSectionIconExample {\n    public render() {\n        const icon = {\n            name: 'ok',\n            title: 'Checkmark icon',\n            color: 'rgb(var(--color-green-default))',\n        };\n\n        return (\n            <limel-collapsible-section header=\"Header\" icon={icon}>\n                <p>Body</p>\n            </limel-collapsible-section>\n        );\n    }\n}\n","import { Component, h, State } from '@stencil/core';\n\n/**\n * Using the `invalid` prop\n * When a section's `invalid` prop is set to `true`, it can display a visual feedback,\n * as well as an accessible indication to the assistive technologies,\n * to indicate that the content inside the section is invalid.\n */\n\n@Component({\n    tag: 'limel-example-collapsible-section-invalid',\n    shadow: true,\n})\nexport class CollapsibleSectionInvalidExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-collapsible-section\n                header=\"This section can become invalid\"\n                invalid={this.isInvalid()}\n                isOpen={true}\n            >\n                <p>\n                    Typing an invalid email address here would result in failing\n                    the simple validation script, and accordingly will set the\n                    section as invalid as well.\n                </p>\n                <limel-input-field\n                    label=\"Field with custom validation\"\n                    placeholder=\"Type an email address here\"\n                    helperText={this.getHelperText()}\n                    value={this.value}\n                    onChange={this.onChange}\n                    invalid={this.isInvalid()}\n                />\n                <p>\n                    This way, if the collapsible section is closed, the user\n                    will still get informed about potential problems or nested\n                    invalid fields within the section.\n                </p>\n            </limel-collapsible-section>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private isInvalid = () => {\n        return !!(this.value && !this.value.endsWith('@test.com'));\n    };\n\n    private getHelperText = () => {\n        if (this.isInvalid()) {\n            return 'Please type a valid email address';\n        }\n    };\n}\n","import { Component, h, Host, State } from '@stencil/core';\n/**\n * Composite example\n */\n\n@Component({\n    tag: 'limel-example-color-picker-composite',\n    shadow: true,\n})\nexport class ColorPickerCompositeExample {\n    @State()\n    private value = 'rgba(var(--color-red-default), 0.4)';\n\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private manualInput = true;\n\n    @State()\n    private placeholder = 'Any valid CSS color format is accepted';\n\n    public render() {\n        return (\n            <Host>\n                <limel-color-picker\n                    label=\"Select a beautiful color\"\n                    value={this.value}\n                    placeholder={this.placeholder}\n                    readonly={this.readonly}\n                    required={this.required}\n                    disabled={this.disabled}\n                    invalid={this.invalid}\n                    manualInput={this.manualInput}\n                    onChange={this.onChange}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.required}\n                        label=\"Required\"\n                        onChange={this.setRequired}\n                    />\n                    <limel-checkbox\n                        checked={this.disabled}\n                        label=\"Disabled\"\n                        onChange={this.setDisabled}\n                    />\n                    <limel-checkbox\n                        checked={this.invalid}\n                        label=\"Invalid\"\n                        onChange={this.setInvalid}\n                    />\n                    <limel-checkbox\n                        checked={this.readonly}\n                        label=\"Readonly\"\n                        onChange={this.setReadonly}\n                    />\n                    <limel-checkbox\n                        checked={this.manualInput}\n                        label=\"manualInput\"\n                        onChange={this.setManualInput}\n                    />\n                    <limel-input-field\n                        label=\"Placeholder\"\n                        value={this.placeholder}\n                        onChange={this.setPlaceholder}\n                        style={{\n                            gridColumn: '1/-1',\n                            marginTop: '1rem',\n                        }}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setManualInput = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.manualInput = event.detail;\n    };\n\n    private setPlaceholder = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.placeholder = event.detail;\n    };\n}\n","import { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Custom palette example\n * You can easily provide your own array of colors, to be rendered\n * as a palette of swatches. To improve accessibility, we recommend that you\n * also provide a name for each color, which will be used as tooltip\n * and screen reader text.\n *\n * :::note\n * The number of provided colors will determine the number of columns\n * in the palette.\n *\n * However, if the provided array includes many colors,\n * the grid will render at the maximum only 25 columns to avoid\n * unusable UI.\n *\n * If you want to control the number of columns, you can\n * use the `paletteColumnCount` prop.\n * :::\n */\n@Component({\n    tag: 'limel-example-color-picker-custom-palette',\n    shadow: true,\n})\nexport class ColorPickerCustomPaletteExample {\n    @State()\n    private value: string;\n\n    @State()\n    private paletteColumnCount: number;\n\n    private customPalette = [\n        { name: 'Brand Primary', value: '#0055ff' },\n        { name: 'Brand Secondary', value: '#ff0099' },\n        '#ffbf00',\n        'rebeccapurple',\n        { name: 'Deprecated Green', value: 'hsl(150 60% 45%)', disabled: true },\n        { name: 'Soft Gray', value: 'rgb(120 130 140 / 60%)' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-color-picker\n                    value={this.value}\n                    palette={this.customPalette}\n                    tooltipLabel=\"Click to pick a custom palette color\"\n                    label=\"Brand color\"\n                    onChange={this.onChange}\n                    paletteColumnCount={this.paletteColumnCount}\n                />\n                <limel-example-controls\n                    style={{\n                        '--example-controls-column-layout': 'auto-fit',\n                    }}\n                >\n                    <limel-checkbox\n                        checked={this.paletteColumnCount === 3}\n                        label=\"Set `paletteColumnCount` to 3\"\n                        onChange={this.setPaletteColumnCount}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setPaletteColumnCount = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.paletteColumnCount = event.detail ? 3 : undefined;\n    };\n}\n","import { Component, h, Host, State } from '@stencil/core';\n/**\n * Disallowing manual input\n * By default, users can not only pick a color from the palette,\n * but also type in any valid color name or color value.\n *\n * By setting the `manualInput` to `false` you can easily prevent users from\n * typing a custom color value into the input field.\n *\n * Naturally, setting this prop to `false` does not completely disable the color picker.\n * It will only allow users to pick from the provided color palette.\n */\n\n@Component({\n    tag: 'limel-example-color-picker-manual-input',\n    shadow: true,\n})\nexport class ColorPickerManualInputExample {\n    @State()\n    private value = 'rgb(var(--color-cyan-default))';\n\n    @State()\n    private manualInput = false;\n\n    private customPalette = [\n        { name: 'red', value: 'rgb(var(--color-red-default))' },\n        { name: 'pink', value: 'rgb(var(--color-pink-default))' },\n        { name: 'magenta', value: 'rgb(var(--color-magenta-default))' },\n        { name: 'purple', value: 'rgb(var(--color-purple-default))' },\n        { name: 'violet', value: 'rgb(var(--color-violet-default))' },\n        { name: 'indigo', value: 'rgb(var(--color-indigo-default))' },\n        { name: 'blue', value: 'rgb(var(--color-blue-default))' },\n        { name: 'sky', value: 'rgb(var(--color-sky-default))' },\n        { name: 'cyan', value: 'rgb(var(--color-cyan-default))' },\n        { name: 'teal', value: 'rgb(var(--color-teal-default))' },\n        { name: 'green', value: 'rgb(var(--color-green-default))' },\n        { name: 'lime', value: 'rgb(var(--color-lime-default))' },\n        { name: 'grass', value: 'rgb(var(--color-grass-default))' },\n        { name: 'yellow', value: 'rgb(var(--color-yellow-default))' },\n        { name: 'amber', value: 'rgb(var(--color-amber-default))' },\n        { name: 'orange', value: 'rgb(var(--color-orange-default))' },\n        { name: 'coral', value: 'rgb(var(--color-coral-default))' },\n        { name: 'brown', value: 'rgb(var(--color-brown-default))' },\n        { name: 'gray', value: 'rgb(var(--color-gray-default))' },\n        { name: 'glaucous', value: 'rgb(var(--color-glaucous-default))' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-color-picker\n                    value={this.value}\n                    palette={this.customPalette}\n                    placeholder=\"Typing custom colors is not allowed\"\n                    manualInput={this.manualInput}\n                    onChange={this.onChange}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.manualInput}\n                        label=\"manualInput\"\n                        onChange={this.setManualInput}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setManualInput = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.manualInput = event.detail;\n    };\n}\n","import { Component, h, State } from '@stencil/core';\n\n/**\n * Styling\n * Using the `Icon` interface, you can easily customize the\n * appearance of icons within the button, tweaking its `color`,\n * `backgroundColor`, or adding an accessible `title` to it.\n */\n@Component({\n    tag: 'limel-example-icon-button-icon',\n    shadow: true,\n})\nexport class IconButtonIconExample {\n    @State()\n    private isFavorite = false;\n\n    public render() {\n        return (\n            <limel-icon-button\n                elevated={true}\n                label={this.getLabel()}\n                icon={this.getIcon()}\n                onClick={this.toggleFavorite}\n            />\n        );\n    }\n\n    private getLabel() {\n        return this.isFavorite ? 'Remove Favorite' : 'Add Favorite';\n    }\n\n    private getIcon() {\n        const defaultIcon = 'heart_outlined';\n        const toggledIcon = {\n            name: 'heart_filled',\n            color: 'rgb(var(--color-red-default))',\n        };\n        return this.isFavorite ? toggledIcon : defaultIcon;\n    }\n\n    private toggleFavorite = () => {\n        this.isFavorite = !this.isFavorite;\n    };\n}\n","@use '../../../style/mixins';\n\ndiv {\n    @include mixins.is-resizable(\n        $direction: both,\n        $width: 12rem,\n        $min-width: 8rem,\n        $max-width: 40rem,\n        $height: 12rem,\n        $min-height: 8rem,\n        $max-height: 40rem\n    );\n}\n","import { Component, h } from '@stencil/core';\nimport { InfoTileProgress } from '@limetech/lime-elements';\nimport { chartItems } from '../../chart/examples/chart-items-stack';\n\n/**\n * Using the primary slot\n * The component offers a primary slot that can be used to display\n * any custom content.\n *\n * :::important\n * 1. If there is a component to be displayed in the primary slot,\n * the info tile won't render the inbuilt progress bar.\n * 1. The primary slot has an aspect ratio of 1:1, so the content\n * will be displayed in a square area.\n * :::\n */\n@Component({\n    tag: 'limel-example-info-tile-primary-slot',\n    shadow: true,\n    styleUrl: 'info-tile.scss',\n})\nexport class InfoTilePrimarySlotExample {\n    public render() {\n        const link = {\n            href: '#',\n            title: 'Click to see further details',\n            target: '_blank',\n        };\n\n        const progress: InfoTileProgress = {\n            value: 76,\n        };\n\n        return (\n            <div>\n                <limel-info-tile\n                    icon=\"cloud_storage\"\n                    label=\"Cloud storage usage\"\n                    value=\"215\"\n                    suffix=\"GB\"\n                    link={link}\n                    progress={progress} // won't be rendered\n                >\n                    <limel-chart\n                        slot=\"primary\"\n                        items={chartItems}\n                        type=\"doughnut\"\n                    />\n                </limel-info-tile>\n            </div>\n        );\n    }\n}\n","limel-profile-picture {\n    width: 8rem;\n    height: 8rem;\n}\n","import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Basic profile picture\n *\n * This component can be both used as a placeholder for an avatar,\n * and in the same time act as an interactive element that enables\n * users to upload a new profile picture.\n *\n * :::note\n * You must add a proper `width` and `height` to the component.\n * :::\n */\n@Component({\n    tag: 'limel-example-profile-picture-basic',\n    shadow: true,\n    styleUrl: 'profile-picture-basic.scss',\n})\nexport class ProfilePictureExample {\n    @State()\n    private value?: FileInfo | string = undefined;\n\n    public render() {\n        return (\n            <Host>\n                <limel-profile-picture\n                    label=\"Profile picture\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </Host>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo | undefined>) => {\n        this.value = event.detail;\n        console.log('onChange', this.value);\n    };\n}\n","import {\n    EditorUiType,\n    LimelSelectCustomEvent,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * UI\n * By configuring the `ui` prop, you can define how the editor should be\n * rendered for the end users. The following options are available:\n * - `standard`: The default editor appearance with a full toolbar and\n *    standard layout.\n * - `minimal`: A compact editor appearance, ideal for limited space\n *    scenarios such as mobile devices. In this mode, the toolbar is hidden\n *    until the editor is focused.\n * - `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n *    This mode is suitable for scenarios where you want to provide a simple\n *    text input without any visible formatting options; but still provide\n *    support for markdown syntax and rich text, using hotkeys or when pasting.\n *\n * :::important\n * It's very important to add a `placeholder` or `label` when using\n * the `minimal` or `no-toolbar` UI. The reason is that without a placeholder or a label,\n * there is no visual clue for the user to realize that the grey box is\n * actually an input field that they can type in,\n * since the toolbar would not be shown unless the input filed is focused.\n * :::\n */\n@Component({\n    tag: 'limel-example-text-editor-ui',\n    shadow: true,\n})\nexport class TextEditorUiExample {\n    @State()\n    private selectedUi: Option<EditorUiType> = {\n        text: 'standard',\n        value: 'standard',\n    };\n\n    private readonly availableUis: Array<Option<EditorUiType>> = [\n        { text: 'standard', value: 'standard' },\n        { text: 'minimal', value: 'minimal' },\n        { text: 'no-toolbar', value: 'no-toolbar' },\n    ];\n\n    @State()\n    private value: string;\n\n    public render() {\n        const placeholderText =\n            this.selectedUi.value === 'standard' ? '' : 'Write a comment…';\n\n        return (\n            <Host>\n                <limel-text-editor\n                    value={this.value}\n                    onChange={this.handleChange}\n                    ui={this.selectedUi.value}\n                    placeholder={placeholderText}\n                />\n                <limel-example-controls\n                    style={{ '--example-controls-column-layout': 'auto-fit' }}\n                >\n                    <limel-example-value value={this.value} />\n                    <limel-select\n                        label=\"ui\"\n                        options={this.availableUis}\n                        value={this.selectedUi}\n                        onChange={this.handleNewSelection}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private readonly handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private readonly handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<EditorUiType>>\n    ) => {\n        this.selectedUi = event.detail;\n    };\n}\n","*,\n:host(limel-whats-new-card) {\n    box-sizing: border-box;\n    min-width: 0;\n    min-height: 0;\n}\n\n:host(limel-whats-new-card) {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    align-items: flex-start;\n    width: auto;\n    height: auto;\n    border-radius: 0.95rem;\n    border: 1px solid rgb(var(--contrast-500));\n    padding: 1rem 0.75rem;\n    background-color: rgb(var(--contrast-200));\n    box-shadow: var(--shadow-depth-8);\n    --badge-max-width: auto;\n}\n\n:host(limel-whats-new-card[type='feature']) {\n    --badge-background-color: rgb(var(--color-lime-lighter));\n}\n\n:host(limel-whats-new-card[type='bugfix']) {\n    --badge-background-color: rgb(var(--color-amber-lighter));\n}\n\n:host(limel-whats-new-card[type='component']) {\n    --badge-background-color: rgb(var(--color-orange-lighter));\n}\n\nlimel-badge {\n    pointer-events: none;\n}\n\n.date-badge,\n.version-badge {\n    --badge-background-color: none;\n    --badge-text-color: rgb(var(--contrast-900));\n    margin-left: 0.5rem;\n}\n\na {\n    text-decoration: none;\n    color: rgb(var(--contrast-900));\n    font-size: 0.69rem;\n}\n\na:hover {\n    color: var(--markdown-hyperlink-color, rgb(var(--color-blue-dark)));\n}\n.news-card-content {\n    width: 100%;\n    padding: 1rem;\n    background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.2)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n    background-size: 0.5rem;\n    border-radius: 0.95rem;\n}\n\nh2,\nh3 {\n    margin: 0;\n}\n\nh2 {\n    font-size: 1.125rem;\n    font-weight: 500;\n    color: var(--card-heading-color, rgb(var(--contrast-1100)));\n}\n\nh3 {\n    font-size: 0.75rem;\n    font-weight: 500;\n    color: var(--card-heading-color, rgb(var(--contrast-800)));\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport type { Link } from '../global/shared-types/link.types';\n\n/**\n * @private\n */\n\n@Component({\n    tag: 'limel-whats-new-card',\n    shadow: true,\n    styleUrl: 'whats-new-card.scss',\n})\nexport class WhatsNewCard {\n    @Prop()\n    public heading: string;\n\n    @Prop()\n    public subheading: string;\n\n    @Prop({ reflect: true })\n    public type: 'feature' | 'bugfix' | 'component' = 'feature';\n\n    @Prop()\n    public date: string;\n\n    @Prop()\n    public version: string;\n\n    @Prop()\n    public versionLink: string;\n\n    @Prop()\n    public description: string;\n\n    @Prop()\n    public link: Link;\n\n    public render() {\n        return (\n            <Host>\n                <div>\n                    <h2>{this.heading}</h2>\n                    <h3>{this.subheading}</h3>\n                </div>\n                <div class=\"news-card-content\">\n                    <slot name=\"demo\" />\n                </div>\n                <div>\n                    {this.renderBadge()}\n                    <limel-badge class=\"date-badge\" label={this.date} />\n                    <a\n                        class=\"version-badge\"\n                        href={this.versionLink}\n                        target=\"_blank\"\n                    >\n                        {this.version}\n                    </a>\n                </div>\n                <limel-markdown value={this.description} />\n                {this.renderLink()}\n            </Host>\n        );\n    }\n\n    private renderBadge() {\n        if (this.type === 'feature') {\n            return <limel-badge label=\"Feature\" />;\n        }\n        if (this.type === 'bugfix') {\n            return <limel-badge label=\"Bugfix\" />;\n        }\n        return <limel-badge label=\"Component\" />;\n    }\n\n    private renderLink() {\n        return (\n            <limel-chip text={`Go to ${this.subheading}`} link={this.link} />\n        );\n    }\n}\n","import {\n    ListItem,\n    LimelRadioButtonGroupCustomEvent,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-whats-new-example-radio-button-group',\n    shadow: true,\n})\nexport class RadioButtonBasicExample {\n    @State()\n    private selectedItem: ListItem<string>;\n\n    public componentWillLoad() {\n        this.selectedItem = this.items.find((item) => item.selected);\n    }\n\n    private items: Array<ListItem | ListSeparator> = [\n        { text: 'First Option', value: 'option1', selected: false },\n        { text: 'Second Option', value: 'option2', selected: true },\n        { separator: true },\n        { text: 'Third Option', value: 'option3', selected: false },\n        { text: 'Disabled Option', value: 'option4', disabled: true },\n    ];\n\n    public render() {\n        return [\n            <limel-radio-button-group\n                items={this.items}\n                selectedItem={this.selectedItem}\n                onChange={this.handleChange}\n            />,\n        ];\n    }\n\n    private handleChange = (\n        event: LimelRadioButtonGroupCustomEvent<ListItem<string | number>>\n    ) => {\n        const item = event.detail;\n        if (item.selected) {\n            this.selectedItem = item;\n        }\n    };\n}\n","import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-whats-new-example-slider',\n    shadow: true,\n})\nexport class WhatsNewSliderExample {\n    @State()\n    private required = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value = 25;\n\n    private minValue = 15;\n    private maxValue = 75;\n\n    public render() {\n        return [\n            <limel-slider\n                label=\"Basic slider\"\n                unit=\" %\"\n                value={this.value}\n                valuemax={this.maxValue}\n                valuemin={this.minValue}\n                required={this.required}\n                invalid={this.invalid}\n                onChange={this.handleChange}\n            />,\n            <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </div>,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"],"mappings":"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"}