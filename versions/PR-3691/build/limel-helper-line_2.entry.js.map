{"version":3,"names":["helperLineCss","HelperLine","this","hasContent","maxLength","helperText","length","renderHelperText","h","class","id","helperTextId","renderCharacterCounter","counter","render","Host","tabIndex","invalid","style","display","ListRenderer","constructor","defaultConfig","isOpen","badgeIcons","getAriaOrientation","role","getIndexForWhichToApplyTabIndex","items","result","i","max","item","disabled","selected","undefined","renderListItem","index","key","renderTextForSeparator","attributes","applyTabIndexToItemAtIndex","tabindex","itemType","config","type","_a","classNames","Object","assign","text","secondaryText","icon","image","primaryComponent","badgeIcon","iconSize","actions","map","listCss","ACTION_EVENT","listStrings","List","listRenderer","setup","setupList","setupListeners","mdcList","teardown","element","shadowRoot","querySelector","MDCList","hasTypeahead","unlisten","handleAction","selectable","includes","multiple","listen","singleSelection","_b","destroy","event","handleSingleSelect","detail","handleMultiSelect","listItems","filter","isListItem","selectedItem","find","interactedItem","selectedIndex","change","emit","interact","selectedItems","listIndex","connectedCallback","disconnectedCallback","componentDidLoad","triggerIconColorWarning","maxLinesSecondaryText","toFixed","html","handleType","itemsChanged","setTimeout","indexOf","findIndex","initializeListType","some","console","warn"],"sources":["./src/components/helper-line/helper-line.scss?tag=limel-helper-line&encapsulation=shadow","./src/components/helper-line/helper-line.tsx","./src/components/list/list-renderer.tsx","./src/components/list/list.scss?tag=limel-list&encapsulation=shadow","./src/components/list/list.tsx"],"sourcesContent":[":host(limel-helper-line) {\n    transition: opacity 0.2s ease;\n\n    box-sizing: border-box;\n    display: grid;\n\n    min-width: 0; // prevents overflowing, if component is placed in flex containers\n\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.6875rem;\n    line-height: normal;\n\n    color: rgb(var(--contrast-1200));\n}\n\ndiv {\n    display: flex;\n    justify-content: space-between;\n    gap: 0.75rem;\n    overflow: hidden;\n    padding: 0 1rem;\n}\n\n:host(limel-helper-line.invalid) {\n    --limel-h-l-grid-template-rows-transition-speed: 0.46s;\n    --limel-h-l-grid-template-rows: 1fr;\n\n    .helper-text {\n        color: var(--limel-theme-error-color);\n    }\n}\n\n.counter {\n    flex-shrink: 0;\n    margin-left: auto;\n}\n\n.helper-text,\n.counter {\n    padding-top: 0.125rem;\n}\n\n// This animates height of the helper line, from `0` to `auto`.\n// To get this animation effect, the consumer component should\n// add `hide` classed accordingly.\n:host(limel-helper-line) {\n    transition: grid-template-rows\n        var(--limel-h-l-grid-template-rows-transition-speed, 0.46s)\n        cubic-bezier(1, 0.09, 0, 0.89);\n    grid-template-rows: var(--limel-h-l-grid-template-rows, 1fr);\n}\n\n:host(limel-helper-line.hide) {\n    --limel-h-l-grid-template-rows-transition-speed: 0.3s;\n    --limel-h-l-grid-template-rows: 0fr;\n}\n// End: animating height\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n/**\n * This is an internal and private component that many input fields\n * use to display a helper text, along with a character counter below the\n * input field.\n *\n * We created this to keep the visual styles the same everywhere\n * and to avoid importing styles separately.\n *\n * Also this enables us to open the helper line in limel-portal,\n * more easily without having to send the styles to the portal.\n *\n * @exampleComponent limel-example-helper-line\n * @exampleComponent limel-example-helper-line-invalid\n * @exampleComponent limel-example-helper-line-long-text\n * @exampleComponent limel-example-helper-line-long-text-no-counter\n * @exampleComponent limel-example-helper-line-character-counter\n * @exampleComponent limel-example-helper-line-empty\n * @exampleComponent limel-example-helper-line-animation\n * @private\n */\n@Component({\n    tag: 'limel-helper-line',\n    shadow: true,\n    styleUrl: 'helper-line.scss',\n})\nexport class HelperLine {\n    /**\n     * The helper text that is displayed on the left side.\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Length of the current input value, coming from the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public length?: number;\n\n    /**\n     * Maximum length of the characters, defined on the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public maxLength?: number;\n\n    /**\n     * Turns `true`, when the parent component is invalid.\n     * For example, when the parent component is `required` but is left empty.\n     * Or when the input format is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid?: boolean = false;\n\n    /**\n     * Used by `aria-controls` and `aria-describedby` in the parent component.\n     */\n    @Prop({ reflect: true })\n    public helperTextId?: string;\n\n    public render() {\n        return (\n            <Host\n                tabIndex={-1}\n                class={{\n                    invalid: this.invalid,\n                }}\n                style={this.hasContent() ? {} : { display: 'none' }}\n                aria-hidden={!this.hasContent()}\n            >\n                <div>\n                    {this.renderHelperText()}\n                    {this.renderCharacterCounter()}\n                </div>\n            </Host>\n        );\n    }\n\n    private hasContent = () => {\n        return !!(\n            this.maxLength > 0 ||\n            (this.helperText && this.helperText.length > 0)\n        );\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <span class=\"helper-text\" id={this.helperTextId}>\n                {this.helperText}\n            </span>\n        );\n    };\n\n    private renderCharacterCounter = () => {\n        const counter = `${this.length} / ${this.maxLength}`;\n\n        if (!this.maxLength) {\n            return;\n        }\n\n        return <span class=\"counter\">{counter}</span>;\n    };\n}\n","import { ListItem } from '../list-item/list-item.types';\nimport { ListSeparator } from '../../global/shared-types/separator.types';\nimport { h } from '@stencil/core';\nimport { ListRendererConfig } from './list-renderer-config';\n\nexport class ListRenderer {\n    private defaultConfig: ListRendererConfig = {\n        isOpen: true,\n        badgeIcons: false,\n    };\n\n    private config: ListRendererConfig;\n\n    private applyTabIndexToItemAtIndex: number;\n\n    public render(\n        items: Array<ListItem | ListSeparator>,\n        config: ListRendererConfig = {}\n    ) {\n        items = items || [];\n        this.config = { ...this.defaultConfig, ...config };\n\n        let role;\n        switch (this.config.type) {\n            case 'checkbox': {\n                role = 'group';\n                break;\n            }\n            case 'radio': {\n                role = 'radiogroup';\n                break;\n            }\n            default: {\n                role = 'listbox';\n            }\n        }\n\n        this.applyTabIndexToItemAtIndex =\n            this.getIndexForWhichToApplyTabIndex(items);\n\n        return (\n            <ul\n                class=\"mdc-deprecated-list\"\n                role={role}\n                aria-orientation={this.getAriaOrientation(role)}\n            >\n                {items.map(this.renderListItem)}\n            </ul>\n        );\n    }\n\n    /**\n     * `aria-orientation` is valid for `listbox` and `radiogroup`,\n     * but not for group (used for checkboxes).\n     * @param role\n     */\n    private getAriaOrientation = (role: string) => {\n        if (role === 'listbox' || role === 'radiogroup') {\n            return 'vertical';\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Determine which ListItem should have the `tab-index` attribute set,\n     * and return the index at which that ListItem is located in `items`.\n     * Returns `undefined` if no item should have the attribute set.\n     * See https://github.com/material-components/material-components-web/tree/e66a43a75fef4f9179e24856649518e15e279a04/packages/mdc-list#accessibility\n     *\n     * @param items - the items of the list, including any `ListSeparator`:s\n     * @returns the index as per the description\n     */\n    private getIndexForWhichToApplyTabIndex = (\n        items: Array<ListItem | ListSeparator>\n    ) => {\n        let result;\n        for (let i = 0, max = items.length; i < max; i += 1) {\n            if ('separator' in items[i]) {\n                // Ignore ListSeparator\n            } else {\n                const item = items[i] as ListItem<any>;\n                if (item.disabled) {\n                    // Skip disabled items - they should never get tabindex\n                    continue;\n                }\n\n                if (item.selected) {\n                    result = i;\n                    break;\n                }\n\n                if (result === undefined) {\n                    result = i;\n                    // Do NOT break, as any later item with\n                    // `selected=true` should get the tab-index instead!\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Render a single list item\n     *\n     * @param item - the item to render\n     * @param index - the index the item had in the `items` array\n     * @returns the list item\n     */\n    private renderListItem = (\n        item: ListItem | ListSeparator,\n        index: number\n    ) => {\n        if ('separator' in item) {\n            return (\n                <li\n                    class=\"mdc-deprecated-list-divider\"\n                    role=\"separator\"\n                    key={`sep-${index}`}\n                >\n                    {this.renderTextForSeparator(item)}\n                    <div class=\"limel-list-divider-line\" />\n                </li>\n            );\n        }\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        let itemType: 'radio' | 'checkbox' | 'option' | 'listitem';\n        if (this.config.type === 'radio' || this.config.type === 'checkbox') {\n            itemType = this.config.type;\n        } else if (this.config.type === 'selectable') {\n            itemType = 'option';\n        } else {\n            itemType = 'listitem';\n        }\n\n        const key = (item as any).id ?? `item-${index}`;\n        const classNames = {\n            'mdc-deprecated-list-item': true, // required for keyboard navigation with arrow keys\n            'mdc-deprecated-list-item--disabled': !!item.disabled, // MDC’s foundation checks for the disabled class before toggling selected state\n        };\n        return (\n            <limel-list-item\n                key={key}\n                class={classNames}\n                {...attributes}\n                data-index={index}\n                type={itemType}\n                text={item.text}\n                secondaryText={item.secondaryText}\n                icon={item.icon}\n                image={item.image}\n                primaryComponent={item.primaryComponent}\n                badgeIcon={this.config.badgeIcons}\n                iconSize={this.config.iconSize}\n                selected={item.selected}\n                disabled={item.disabled}\n                actions={item.actions}\n            />\n        );\n    };\n\n    private renderTextForSeparator = (item: ListSeparator) => {\n        if ('text' in item) {\n            return <h2 class=\"limel-list-divider-title\">{item.text}</h2>;\n        }\n    };\n}\n","@use '../../style/mixins';\n\n$list-border-radius: 0.5rem;\n\n/**\n * @prop --icon-background-color: Color to use for icon background when `badgeIcons=true`.\n * @prop --icon-color: Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`.\n * @prop --list-grid-max-width: Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`.\n * @prop --list-grid-item-max-width: Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`.\n * @prop --list-background-color-of-odd-interactive-items: Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`.\n * @prop --list-background-color-of-even-interactive-items:  Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`.\n * @prop --list-margin: Space around the list. Defaults to `0.25rem`, which visualizes keyboard-focused items in a better way, as it adds some space for the outline effect;\n */\n\n:host(limel-list) {\n    display: block;\n    isolation: isolate;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\nul {\n    --mdc-theme-text-icon-on-background: var(\n        --icon-color,\n        rgb(var(--contrast-900))\n    );\n    margin: var(\n        --list-margin,\n        0.25rem\n    ); // added space to visualize keyboard-focused items\n    border-radius: $list-border-radius;\n    padding: 0;\n    list-style: none;\n}\n\n.mdc-deprecated-list-divider {\n    border-bottom-color: transparent;\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    height: auto;\n    padding: 0 0.5rem;\n}\n\n.limel-list-divider-line {\n    background-color: rgb(var(--contrast-400));\n    height: 0.125rem;\n    border-radius: 1rem;\n    min-width: 1rem;\n    flex-grow: 1;\n}\n\n.limel-list-divider-title {\n    all: unset;\n    @include mixins.truncate-text;\n    color: rgb(var(--contrast-900));\n    font-size: var(--limel-theme-default-small-font-size);\n}\n\n@import './partial-styles/custom-styles.scss';\n@import './partial-styles/_has-grid-layout.scss';\n@import './partial-styles/_static-actions.scss';\n","import { IconSize } from '../icon/icon.types';\nimport { ListItem, ListSeparator } from '../list-item/list-item.types';\nimport { ListType } from './list.types';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { strings as listStrings } from '@material/list/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { ListRenderer } from './list-renderer';\nimport { ListRendererConfig } from './list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\n\n/**\n * @exampleComponent limel-example-list\n * @exampleComponent limel-example-list-secondary\n * @exampleComponent limel-example-list-separator\n * @exampleComponent limel-example-list-icons\n * @exampleComponent limel-example-list-badge-icons\n * @exampleComponent limel-example-list-pictures\n * @exampleComponent limel-example-list-selectable\n * @exampleComponent limel-example-list-checkbox-icons\n * @exampleComponent limel-example-list-radio-button-icons\n * @exampleComponent limel-example-list-action\n * @exampleComponent limel-example-list-striped\n * @exampleComponent limel-example-list-badge-icons-with-multiple-lines\n * @exampleComponent limel-example-list-grid\n * @exampleComponent limel-example-list-primary-component\n */\n@Component({\n    tag: 'limel-list',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'list.scss',\n})\nexport class List {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<ListItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the list, omit to get a regular list. Available types are:\n     * `selectable`: regular list with single selection.\n     * `radio`: radio button list with single selection.\n     * `checkbox`: checkbox list with multiple selection.\n     */\n    @Prop()\n    public type: ListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelListElement;\n\n    private config: ListRendererConfig;\n    private listRenderer = new ListRenderer();\n    private mdcList: MDCList;\n    private multiple: boolean;\n    private selectable: boolean;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     * Only fired if `type` is set to `selectable`, `radio` or `checkbox`.\n     */\n    @Event()\n    private change: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fired when an action has been selected from the action menu of a list item\n     */\n    @Event()\n    protected select: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fires when a user interacts with an item in the list (e.g., click,\n     * keyboard select).\n     */\n    @Event()\n    interact: EventEmitter<ListItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n        let maxLinesSecondaryText = +this.maxLinesSecondaryText?.toFixed();\n        if (this.maxLinesSecondaryText < 1) {\n            maxLinesSecondaryText = 1;\n        }\n\n        const html = this.listRenderer.render(this.items, this.config);\n\n        return (\n            <Host\n                style={{\n                    '--maxLinesSecondaryText': `${maxLinesSecondaryText}`,\n                }}\n            >\n                {html}\n            </Host>\n        );\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.setup();\n\n            const listItems = this.items.filter(this.isListItem);\n\n            if (this.multiple) {\n                this.mdcList.selectedIndex = listItems\n                    .filter((item: ListItem) => item.selected)\n                    .map((item: ListItem) => listItems.indexOf(item));\n            } else {\n                const selectedIndex = listItems.findIndex(\n                    (item: ListItem) => item.selected\n                );\n\n                if (selectedIndex === -1) {\n                    this.mdcList.initializeListType();\n                } else {\n                    this.mdcList.selectedIndex = selectedIndex;\n                }\n            }\n        }, 0);\n    }\n\n    private setup = () => {\n        this.setupList();\n\n        this.setupListeners();\n    };\n\n    private setupList = () => {\n        if (this.mdcList) {\n            this.teardown();\n            this.mdcList = null;\n        }\n\n        const element = this.element.shadowRoot.querySelector(\n            '.mdc-deprecated-list'\n        );\n        if (!element) {\n            return;\n        }\n\n        this.mdcList = new MDCList(element);\n        this.mdcList.hasTypeahead = true;\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcList) {\n            return;\n        }\n\n        this.mdcList.unlisten(ACTION_EVENT, this.handleAction);\n\n        this.selectable = ['selectable', 'radio', 'checkbox'].includes(\n            this.type\n        );\n        this.multiple = this.type === 'checkbox';\n\n        if (!this.selectable) {\n            return;\n        }\n\n        this.mdcList.listen(ACTION_EVENT, this.handleAction);\n        this.mdcList.singleSelection = !this.multiple;\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        if (!this.multiple) {\n            this.handleSingleSelect(event.detail.index);\n\n            return;\n        }\n\n        this.handleMultiSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: ListItem = listItems.find((item: ListItem) => {\n            return !!item.selected;\n        });\n\n        let interactedItem: ListItem;\n\n        if (selectedItem) {\n            if (this.type !== 'radio') {\n                this.mdcList.selectedIndex = -1;\n            }\n\n            interactedItem = { ...selectedItem, selected: false };\n            this.change.emit(interactedItem);\n        }\n\n        if (listItems[index] !== selectedItem) {\n            interactedItem = { ...listItems[index], selected: true };\n            this.change.emit(interactedItem);\n        }\n\n        this.interact.emit(interactedItem);\n    };\n\n    private handleMultiSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItems: ListItem[] = listItems\n            .filter((item: ListItem, listIndex: number) => {\n                if (listIndex === index) {\n                    // This is the item that was selected or deselected,\n                    // so we negate its previous selection status.\n                    return !item.selected;\n                }\n\n                // This is an item that didn't change, so we keep its selection status.\n                return item.selected;\n            })\n            .map((item: ListItem) => {\n                return { ...item, selected: true };\n            });\n\n        this.change.emit(selectedItems);\n        this.interact.emit({ ...selectedItems[index] });\n    };\n\n    private isListItem = (item: ListItem): boolean => {\n        return !('separator' in item);\n    };\n\n    private triggerIconColorWarning() {\n        if (this.items?.some((item) => 'iconColor' in item)) {\n            console.warn(\n                \"The `iconColor` prop is deprecated, has no visual effect anymore, and will soon be removed! Use the new `Icon` interface, and instead of `iconColor: 'color-name'` write `icon: { name: 'icon-name', color: 'color-name' }`.\"\n            );\n        }\n    }\n}\n"],"mappings":"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"}