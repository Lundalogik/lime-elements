{"version":3,"names":["ColorPickerCustomPaletteExample","this","customPalette","name","value","disabled","onChange","event","detail","setPaletteColumnCount","stopPropagation","paletteColumnCount","undefined","render","h","Host","palette","tooltipLabel","label","style","checked","IconButtonIconExample","toggleFavorite","isFavorite","elevated","getLabel","icon","getIcon","onClick","defaultIcon","toggledIcon","color","profilePictureBasicCss","ProfilePictureExample","handleChange","console","log","whatsNewCardCss","WhatsNewCard","heading","subheading","class","renderBadge","date","version","description","renderLink","type","text","link","RadioButtonBasicExample","items","selected","separator","item","selectedItem","componentWillLoad","find","WhatsNewSliderExample","minValue","maxValue","setRequired","required","setInvalid","invalid","unit","valuemax","valuemin","display","gap","marginTop"],"sources":["./src/components/color-picker/examples/color-picker-custom-palette.tsx","./src/components/icon-button/examples/icon-button-icon.tsx","./src/components/profile-picture/examples/profile-picture-basic.scss?tag=limel-example-profile-picture-basic&encapsulation=shadow","./src/components/profile-picture/examples/profile-picture-basic.tsx","./src/whats-new/whats-new-card.scss?tag=limel-whats-new-card&encapsulation=shadow","./src/whats-new/whats-new-card.tsx","./src/whats-new/examples/whats-new-example-radio-button-group.tsx","./src/whats-new/examples/whats-new-example-slider.tsx"],"sourcesContent":["import { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Custom palette example\n * You can easily provide your own array of colors, to be rendered\n * as a palette of swatches. To improve accessibility, we recommend that you\n * also provide a name for each color, which will be used as tooltip\n * and screen reader text.\n *\n * :::note\n * The number of provided colors will determine the number of columns\n * in the palette.\n *\n * However, if the provided array includes many colors,\n * the grid will render at the maximum only 25 columns to avoid\n * unusable UI.\n *\n * If you want to control the number of columns, you can\n * use the `paletteColumnCount` prop.\n * :::\n */\n@Component({\n    tag: 'limel-example-color-picker-custom-palette',\n    shadow: true,\n})\nexport class ColorPickerCustomPaletteExample {\n    @State()\n    private value: string;\n\n    @State()\n    private paletteColumnCount: number;\n\n    private customPalette = [\n        { name: 'Brand Primary', value: '#0055ff' },\n        { name: 'Brand Secondary', value: '#ff0099' },\n        '#ffbf00',\n        'rebeccapurple',\n        { name: 'Deprecated Green', value: 'hsl(150 60% 45%)', disabled: true },\n        { name: 'Soft Gray', value: 'rgb(120 130 140 / 60%)' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-color-picker\n                    value={this.value}\n                    palette={this.customPalette}\n                    tooltipLabel=\"Click to pick a custom palette color\"\n                    label=\"Brand color\"\n                    onChange={this.onChange}\n                    paletteColumnCount={this.paletteColumnCount}\n                />\n                <limel-example-controls\n                    style={{\n                        '--example-controls-column-layout': 'auto-fit',\n                    }}\n                >\n                    <limel-checkbox\n                        checked={this.paletteColumnCount === 3}\n                        label=\"Set `paletteColumnCount` to 3\"\n                        onChange={this.setPaletteColumnCount}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setPaletteColumnCount = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.paletteColumnCount = event.detail ? 3 : undefined;\n    };\n}\n","import { Component, h, State } from '@stencil/core';\n\n/**\n * Styling\n * Using the `Icon` interface, you can easily customize the\n * appearance of icons within the button, tweaking its `color`,\n * `backgroundColor`, or adding an accessible `title` to it.\n */\n@Component({\n    tag: 'limel-example-icon-button-icon',\n    shadow: true,\n})\nexport class IconButtonIconExample {\n    @State()\n    private isFavorite = false;\n\n    public render() {\n        return (\n            <limel-icon-button\n                elevated={true}\n                label={this.getLabel()}\n                icon={this.getIcon()}\n                onClick={this.toggleFavorite}\n            />\n        );\n    }\n\n    private getLabel() {\n        return this.isFavorite ? 'Remove Favorite' : 'Add Favorite';\n    }\n\n    private getIcon() {\n        const defaultIcon = 'heart_outlined';\n        const toggledIcon = {\n            name: 'heart_filled',\n            color: 'rgb(var(--color-red-default))',\n        };\n        return this.isFavorite ? toggledIcon : defaultIcon;\n    }\n\n    private toggleFavorite = () => {\n        this.isFavorite = !this.isFavorite;\n    };\n}\n","limel-profile-picture {\n    width: 8rem;\n    height: 8rem;\n}\n","import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Basic profile picture\n *\n * This component can be both used as a placeholder for an avatar,\n * and in the same time act as an interactive element that enables\n * users to upload a new profile picture.\n *\n * :::note\n * You must add a proper `width` and `height` to the component.\n * :::\n */\n@Component({\n    tag: 'limel-example-profile-picture-basic',\n    shadow: true,\n    styleUrl: 'profile-picture-basic.scss',\n})\nexport class ProfilePictureExample {\n    @State()\n    private value?: FileInfo | string = undefined;\n\n    public render() {\n        return (\n            <Host>\n                <limel-profile-picture\n                    label=\"Profile picture\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </Host>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo | undefined>) => {\n        this.value = event.detail;\n        console.log('onChange', this.value);\n    };\n}\n","*,\n:host(limel-whats-new-card) {\n    box-sizing: border-box;\n    min-width: 0;\n    min-height: 0;\n}\n\n:host(limel-whats-new-card) {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n    align-items: flex-start;\n    width: auto;\n    height: auto;\n    border-radius: 0.95rem;\n    border: 1px solid rgb(var(--contrast-500));\n    padding: 1rem 0.75rem;\n    background-color: rgb(var(--contrast-200));\n    box-shadow: var(--shadow-depth-8);\n    --badge-max-width: auto;\n}\n\n:host(limel-whats-new-card[type='feature']) {\n    --badge-background-color: rgb(var(--color-lime-lighter));\n}\n\n:host(limel-whats-new-card[type='bugfix']) {\n    --badge-background-color: rgb(var(--color-amber-lighter));\n}\n\n:host(limel-whats-new-card[type='component']) {\n    --badge-background-color: rgb(var(--color-orange-lighter));\n}\nlimel-badge {\n    pointer-events: none;\n}\n.date-badge,\n.version-badge {\n    --badge-background-color: none;\n    --badge-text-color: rgb(var(--contrast-900));\n    margin-left: 0.5rem;\n}\n\n.news-card-content {\n    width: 100%;\n    padding: 1rem;\n    background-color: rgb(var(--contrast-400));\n    border-radius: 0.95rem;\n}\n\nh2,\nh3 {\n    margin: 0;\n}\n\nh2 {\n    font-size: 1.125rem;\n    font-weight: 500;\n    color: var(--card-heading-color, rgb(var(--contrast-1100)));\n    letter-spacing: -0.03125rem;\n}\n\nh3 {\n    font-size: 0.75rem;\n    font-weight: 500;\n    color: var(--card-heading-color, rgb(var(--contrast-800)));\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\nimport type { Link } from '../global/shared-types/link.types';\n\n/**\n * @private\n */\n\n@Component({\n    tag: 'limel-whats-new-card',\n    shadow: true,\n    styleUrl: 'whats-new-card.scss',\n})\nexport class WhatsNewCard {\n    @Prop()\n    public heading: string;\n\n    @Prop()\n    public subheading: string;\n\n    @Prop({ reflect: true })\n    public type: 'feature' | 'bugfix' | 'component' = 'feature';\n\n    @Prop()\n    public date: string;\n\n    @Prop()\n    public version: string;\n\n    @Prop()\n    public description: string;\n\n    @Prop()\n    public link: Link;\n\n    public render() {\n        return (\n            <Host>\n                <h2>{this.heading}</h2>\n                <h3>{this.subheading}</h3>\n                <div class=\"news-card-content\">\n                    <slot name=\"demo\" />\n                </div>\n                <div class=\"badge-container\">\n                    {this.renderBadge()}\n                    <limel-badge class=\"date-badge\" label={this.date} />\n                    <limel-badge class=\"version-badge\" label={this.version} />\n                </div>\n                <limel-markdown value={this.description} />\n                {this.renderLink()}\n            </Host>\n        );\n    }\n\n    private renderBadge() {\n        if (this.type === 'feature') {\n            return <limel-badge label=\"Feature\" />;\n        }\n        if (this.type === 'bugfix') {\n            return <limel-badge label=\"Bugfix\" />;\n        }\n        return <limel-badge label=\"Component\" />;\n    }\n\n    private renderLink() {\n        return (\n            <limel-chip text={`Go to ${this.subheading}`} link={this.link} />\n        );\n    }\n}\n","import {\n    ListItem,\n    LimelRadioButtonGroupCustomEvent,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-whats-new-example-radio-button-group',\n    shadow: true,\n})\nexport class RadioButtonBasicExample {\n    @State()\n    private selectedItem: ListItem<string>;\n\n    public componentWillLoad() {\n        this.selectedItem = this.items.find((item) => item.selected);\n    }\n\n    private items: Array<ListItem | ListSeparator> = [\n        { text: 'First Option', value: 'option1', selected: false },\n        { text: 'Second Option', value: 'option2', selected: true },\n        { separator: true },\n        { text: 'Third Option', value: 'option3', selected: false },\n        { text: 'Disabled Option', value: 'option4', disabled: true },\n    ];\n\n    public render() {\n        return [\n            <limel-radio-button-group\n                items={this.items}\n                selectedItem={this.selectedItem}\n                onChange={this.handleChange}\n            />,\n        ];\n    }\n\n    private handleChange = (\n        event: LimelRadioButtonGroupCustomEvent<ListItem<string | number>>\n    ) => {\n        const item = event.detail;\n        if (item.selected) {\n            this.selectedItem = item;\n        }\n    };\n}\n","import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-whats-new-example-slider',\n    shadow: true,\n})\nexport class WhatsNewSliderExample {\n    @State()\n    private required = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value = 25;\n\n    private minValue = 15;\n    private maxValue = 75;\n\n    public render() {\n        return [\n            <limel-slider\n                label=\"Basic slider\"\n                unit=\" %\"\n                value={this.value}\n                valuemax={this.maxValue}\n                valuemin={this.minValue}\n                required={this.required}\n                invalid={this.invalid}\n                onChange={this.handleChange}\n            />,\n            <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </div>,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"],"mappings":"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"}