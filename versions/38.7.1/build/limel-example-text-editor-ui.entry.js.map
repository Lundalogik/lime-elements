{"version":3,"names":["TextEditorUiExample","this","availableUis","text","value","handleChange","event","detail","handleNewSelection","selectedUi","render","placeholderText","h","onChange","ui","placeholder","style","label","options"],"sources":["./src/components/text-editor/examples/text-editor-ui.tsx"],"sourcesContent":["import { Option, LimelSelectCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * UI\n * By configuring the `ui` prop, you can define how the editor should be\n * rendered for the end users. The following options are available:\n * - `standard`: The default editor appearance with a full toolbar and\n *    standard layout.\n * - `minimal`: A compact editor appearance, ideal for limited space\n *    scenarios such as mobile devices. In this mode, the toolbar is hidden\n *    until the editor is focused.\n *\n * :::important\n * It's very important to add a `placeholder` or `label` when using\n * the `minimal` UI. The reason is that without a placeholder or a label,\n * there is no visual clue for the user to realize that the grey box is\n * actually an input field that they can type in,\n * since the toolbar would not be shown unless the input filed is focused.\n * :::\n */\n@Component({\n    tag: 'limel-example-text-editor-ui',\n    shadow: true,\n})\nexport class TextEditorUiExample {\n    @State()\n    private selectedUi: Option<'standard' | 'minimal'> = {\n        text: 'standard',\n        value: 'standard',\n    };\n\n    private availableUis: Array<Option<'standard' | 'minimal'>> = [\n        { text: 'standard', value: 'standard' },\n        { text: 'minimal', value: 'minimal' },\n    ];\n\n    @State()\n    private value: string;\n\n    public render() {\n        const placeholderText =\n            this.selectedUi.value === 'minimal' ? 'Write a commentâ€¦' : '';\n\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                ui={this.selectedUi.value}\n                placeholder={placeholderText}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-example-value value={this.value} />\n                <limel-select\n                    label=\"ui\"\n                    options={this.availableUis}\n                    value={this.selectedUi}\n                    onChange={this.handleNewSelection}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<'standard' | 'minimal'>>,\n    ) => {\n        this.selectedUi = event.detail;\n    };\n}\n"],"mappings":"qDAyBaA,EAAmB,M,yBAOpBC,KAAAC,aAAsD,CAC1D,CAAEC,KAAM,WAAYC,MAAO,YAC3B,CAAED,KAAM,UAAWC,MAAO,YA+BtBH,KAAAI,aAAgBC,IACpBL,KAAKG,MAAQE,EAAMC,MAAM,EAGrBN,KAAAO,mBACJF,IAEAL,KAAKQ,WAAaH,EAAMC,MAAM,E,gBA7CmB,CACjDJ,KAAM,WACNC,MAAO,Y,qBAWJM,SACH,MAAMC,EACFV,KAAKQ,WAAWL,QAAU,UAAY,mBAAqB,GAE/D,MAAO,CACHQ,EAAA,qBACIR,MAAOH,KAAKG,MACZS,SAAUZ,KAAKI,aACfS,GAAIb,KAAKQ,WAAWL,MACpBW,YAAaJ,IAEjBC,EAAA,0BACII,MAAO,CAAE,mCAAoC,aAE7CJ,EAAA,uBAAqBR,MAAOH,KAAKG,QACjCQ,EAAA,gBACIK,MAAM,KACNC,QAASjB,KAAKC,aACdE,MAAOH,KAAKQ,WACZI,SAAUZ,KAAKO,sB"}