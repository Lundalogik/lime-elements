{"version":3,"names":["checkboxCss","Checkbox","this","shouldReinitialize","id","createRandomString","helperTextId","destroyMDCInstances","input","getCheckboxElement","dataset","indeterminate","isInvalid","invalid","required","modified","checked","initialize","limelCheckbox","shadowRoot","querySelector","onChange","event","stopPropagation","target","isChecked","_a","change","emit","handleCheckedChange","newValue","handleIndeterminateChange","handleReadonlyChange","componentDidRender","connectedCallback","componentDidLoad","disconnectedCallback","render","h","CheckboxTemplate","disabled","readonly","label","readonlyLabels","helperText"],"sources":["./src/components/checkbox/checkbox.scss?tag=limel-checkbox&encapsulation=shadow","./src/components/checkbox/checkbox.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --checkbox-unchecked-border-color: Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`.\n*/\n$box-size: 1.25rem;\n$gap-size: 0.5rem;\n\n:host(limel-checkbox) {\n    min-height: var(--limel-checkbox-min-height, 2.5rem); // prevents flickering\n    // when switching between `readonly` and normal states in `limel-checkbox`,\n    // but not where `CheckboxTemplate` is imported & used.\n}\n\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\n.checkbox {\n    position: relative;\n    isolation: isolate;\n\n    display: flex;\n    align-items: center;\n\n    min-height: var(\n        --limel-checkbox-min-height,\n        2.5rem\n    ); // helps align with other fields in the form, or within table rows\n    width: 100%;\n}\n\ninput[type='checkbox'] {\n    // Hide the native checkbox\n    @include mixins.visually-hidden;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n}\n\nlabel {\n    // Ensure the label is always clickable, even when empty\n    min-width: $box-size;\n    min-height: $box-size;\n    padding-top: 0.125rem;\n    // ====\n\n    cursor: pointer;\n    position: relative;\n    width: 100%;\n\n    font-size: var(--limel-theme-default-small-font-size);\n    color: var(--limel-theme-text-primary-on-background-color);\n\n    padding-left: calc($box-size + $gap-size);\n\n    .disabled:not([readonly]):not([readonly='true']) & {\n        cursor: not-allowed;\n        color: var(--limel-theme-text-disabled-color);\n    }\n\n    .required & {\n        &:after {\n            margin-left: 0.0625rem;\n            content: '*';\n        }\n    }\n\n    .invalid:not(.readonly) & {\n        color: var(--limel-theme-error-text-color);\n    }\n\n    :host(limel-checkbox.hide-label) &,\n    .hide-label & {\n        // this helper class of `hide-label` can be added for example to the `host` element,\n        // or if the `CheckboxTemplate` is imported to other components, the class can be\n        // added to the `checkbox` element itself\n        // and be used internally by other components such as `limel-table`\n        // to hide the `<label>`, while still keeping the checkbox\n        // both clickable for the users, and accessible for screen readers\n        @include mixins.truncate-text();\n        opacity: 0;\n        width: $box-size;\n    }\n}\n\n.box {\n    position: absolute; // since `label` is the clickable part,\n    // and thus needs to\n    // stretch below the checkbox\n    pointer-events: none;\n\n    transition:\n        border-color 0.4s ease 0.2s,\n        background-color 0.2s ease,\n        box-shadow var(--limel-clickable-transform-speed, 0.4s) ease;\n\n    display: inline-block;\n    vertical-align: middle;\n\n    width: $box-size;\n    height: $box-size;\n\n    margin-right: $gap-size;\n    border-radius: 0.25rem;\n    border: 0.125rem solid;\n\n    border-color: var(\n        --checkbox-unchecked-border-color,\n        rgb(var(--contrast-900))\n    );\n    background-color: var(\n        --limel-checkbox-background-color,\n        rgb(var(--contrast-300))\n    );\n\n    .checked &,\n    .checkbox:has(input[type='checkbox']:checked) & {\n        background-color: var(\n            --lime-primary-color,\n            var(--limel-theme-primary-color)\n        );\n        border-color: var(\n            --lime-primary-color,\n            var(--limel-theme-primary-color)\n        );\n    }\n\n    .disabled & {\n        opacity: 0.4;\n    }\n\n    .checkbox:not(.disabled):has(label:hover) & {\n        will-change: box-shadow;\n        box-shadow: var(--button-shadow-hovered);\n    }\n\n    .checkbox:not(.disabled):has(label:active) & {\n        will-change: box-shadow;\n        box-shadow: var(--button-shadow-pressed);\n    }\n\n    &:before {\n        // For indicating the hover or focused state\n        transition: mixins.$clickable-normal-state-transitions;\n        content: '';\n        position: absolute;\n        inset: -0.1875rem; // 3px\n        border-radius: inherit;\n\n        .checkbox:has(input[type='checkbox']:focus-visible) & {\n            will-change: box-shadow;\n\n            box-shadow: var(--shadow-depth-8-focused);\n        }\n    }\n\n    &:after {\n        // For indicating the indeterminate state\n        transition:\n            opacity 0.2s ease,\n            width 0.4s ease;\n        content: '';\n        position: absolute;\n        inset: 0;\n        margin: auto;\n\n        height: 0.125rem;\n        width: 0.25rem;\n\n        border-radius: 1rem;\n        opacity: 0;\n\n        background-color: rgb(var(--color-white));\n\n        .indeterminate & {\n            opacity: 1;\n            width: calc($box-size - 0.5rem);\n        }\n    }\n}\n\nsvg {\n    position: absolute;\n    z-index: 1;\n    inset: 0;\n\n    transform: translate3d(-0.125rem, -0.125rem, 0);\n\n    width: $box-size;\n    height: $box-size;\n\n    padding: 0.25rem;\n\n    color: rgb(var(--color-white));\n    opacity: 0;\n\n    stroke-width: 0.1875rem; // 3px\n    stroke: currentColor;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n\n    path {\n        stroke-dashoffset: 29.7833;\n        stroke-dasharray: 29.7833;\n        transition: stroke-dashoffset 180ms cubic-bezier(0.4, 0, 0.6, 1);\n    }\n\n    .checkbox:not(.indeterminate):has(input[type='checkbox']:checked) & {\n        opacity: 1;\n\n        path {\n            stroke-dashoffset: 0;\n        }\n    }\n}\n\nlimel-dynamic-label {\n    margin-top: 0.375rem;\n    margin-left: -0.25rem;\n}\n\n@include mixins.hide-helper-line-when-not-needed(limel-checkbox);\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { CheckboxTemplate } from './checkbox.template';\nimport { Label } from '../dynamic-label/label.types';\n\n/**\n * The Checkbox component is a classic and essential element in UI design that allows\n * users to make multiple selections from a predefined list of options. The Checkbox component is commonly used in forms and settings interfaces to enable users to\n * select one or more items from a list of choices.\n *\n * ## States of a Checkbox\n * When a user clicks or taps on the box, it toggles between two states:\n * Checked and Unchecked.\n *\n * However, a Checkbox can visualize a third state called the \"Indeterminate\" state.\n * In this state, the checkbox appears as a filled box with a horizontal line or dash inside it.\n *\n * The Indeterminate state is typically used when dealing with checkbox groups\n * that have hierarchical relationships or when the group contains sub-items.\n * This state is used to indicate that that some, but not all, of the items in a group are selected.\n *\n * :::important\n * Checkboxes are sometimes used interchangeably with switches in user interfaces.\n * But there is an important difference between the two! Please read our guidelines about\n * [Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).\n *\n * @exampleComponent limel-example-checkbox\n * @exampleComponent limel-example-checkbox-helper-text\n * @exampleComponent limel-example-checkbox-readonly\n */\n@Component({\n    tag: 'limel-checkbox',\n    shadow: true,\n    styleUrl: 'checkbox.scss',\n})\nexport class Checkbox {\n    /**\n     * Disables the checkbox when `true`. Works exactly the same as `readonly`.\n     * If either property is `true`, the checkbox will be disabled.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\n     * But shows no visual sign indicating that the checkbox is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid: boolean;\n\n    /**\n     * The checkbox label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the checkbox\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * The value of the checkbox. Set to `true` to make the checkbox checked.\n     */\n    @Prop({ reflect: true })\n    public checked = false;\n\n    /**\n     * Enables indeterminate state. Set to `true` to signal indeterminate check.\n     */\n    @Prop({ reflect: true })\n    public indeterminate = false;\n\n    /**\n     * Set to `true` to indicate that the checkbox must be checked.\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * The labels to use to clarify what kind of data is being visualized,\n     * when the component is `readonly`.\n     */\n    @Prop()\n    public readonlyLabels?: Array<Label<boolean>> = [];\n\n    @State()\n    private modified = false;\n    private shouldReinitialize = false;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<boolean>;\n\n    @Element()\n    private limelCheckbox: HTMLLimelCheckboxElement;\n    private id: string = createRandomString();\n    private helperTextId: string = createRandomString();\n\n    @Watch('checked')\n    protected handleCheckedChange(newValue: boolean) {\n        const input = this.getCheckboxElement();\n        if (!input) {\n            return;\n        }\n\n        input.checked = newValue || this.indeterminate;\n    }\n\n    @Watch('indeterminate')\n    protected handleIndeterminateChange(newValue: boolean) {\n        const input = this.getCheckboxElement();\n        if (!input) {\n            return;\n        }\n\n        input.checked = this.checked || newValue;\n        input.indeterminate = newValue;\n    }\n\n    @Watch('readonly')\n    protected handleReadonlyChange() {\n        this.destroyMDCInstances();\n        this.shouldReinitialize = true;\n    }\n\n    componentDidRender() {\n        if (this.shouldReinitialize) {\n            this.initialize();\n            this.shouldReinitialize = false;\n        }\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private destroyMDCInstances = () => {\n        const input = this.getCheckboxElement();\n        if (input) {\n            delete input.dataset['indeterminate'];\n            input.indeterminate = false;\n        }\n    };\n\n    public disconnectedCallback() {\n        this.destroyMDCInstances();\n    }\n\n    public render() {\n        return (\n            <CheckboxTemplate\n                disabled={this.disabled || this.readonly}\n                label={this.label}\n                readonlyLabels={this.readonlyLabels}\n                helperText={this.helperText}\n                helperTextId={this.helperTextId}\n                checked={this.checked || this.indeterminate}\n                indeterminate={this.indeterminate}\n                required={this.required}\n                readonly={this.readonly}\n                invalid={this.isInvalid()}\n                onChange={this.onChange}\n                id={this.id}\n            />\n        );\n    }\n\n    private isInvalid = () => {\n        if (this.invalid) {\n            return true;\n        }\n\n        if (this.required && this.modified && !this.checked) {\n            return true;\n        }\n    };\n\n    private initialize = () => {\n        const input = this.getCheckboxElement();\n        if (!input) {\n            return;\n        }\n\n        input.indeterminate = this.indeterminate;\n        input.checked = this.checked || this.indeterminate;\n    };\n\n    private getCheckboxElement = () => {\n        return this.limelCheckbox.shadowRoot.querySelector(\n            'input[type=\"checkbox\"]'\n        ) as HTMLInputElement;\n    };\n\n    private onChange = (event: Event) => {\n        event.stopPropagation();\n        const input = event.target as HTMLInputElement;\n        const isChecked = input?.checked ?? this.checked;\n        this.change.emit(isChecked);\n        this.modified = true;\n    };\n}\n"],"mappings":"iKAAA,MAAMA,EAAc,i4H,MC4CPC,EAAQ,M,wDA6DTC,KAAAC,mBAAqB,MAUrBD,KAAAE,GAAaC,IACbH,KAAAI,aAAuBD,IA4CvBH,KAAAK,oBAAsB,KAC1B,MAAMC,EAAQN,KAAKO,qBACnB,GAAID,EAAO,QACAA,EAAME,QAAQ,iBACrBF,EAAMG,cAAgB,K,GA2BtBT,KAAAU,UAAY,KAChB,GAAIV,KAAKW,QAAS,CACd,OAAO,I,CAGX,GAAIX,KAAKY,UAAYZ,KAAKa,WAAab,KAAKc,QAAS,CACjD,OAAO,I,GAIPd,KAAAe,WAAa,KACjB,MAAMT,EAAQN,KAAKO,qBACnB,IAAKD,EAAO,CACR,M,CAGJA,EAAMG,cAAgBT,KAAKS,cAC3BH,EAAMQ,QAAUd,KAAKc,SAAWd,KAAKS,aAAa,EAG9CT,KAAAO,mBAAqB,IAClBP,KAAKgB,cAAcC,WAAWC,cACjC,0BAIAlB,KAAAmB,SAAYC,I,MAChBA,EAAMC,kBACN,MAAMf,EAAQc,EAAME,OACpB,MAAMC,GAAYC,EAAAlB,IAAK,MAALA,SAAK,SAALA,EAAOQ,WAAO,MAAAU,SAAA,EAAAA,EAAIxB,KAAKc,QACzCd,KAAKyB,OAAOC,KAAKH,GACjBvB,KAAKa,SAAW,IAAI,E,cA5KN,M,cAQA,M,mFAwBD,M,mBAMM,M,cAMI,M,oBAOqB,G,cAG7B,K,CAeTc,oBAAoBC,GAC1B,MAAMtB,EAAQN,KAAKO,qBACnB,IAAKD,EAAO,CACR,M,CAGJA,EAAMQ,QAAUc,GAAY5B,KAAKS,a,CAI3BoB,0BAA0BD,GAChC,MAAMtB,EAAQN,KAAKO,qBACnB,IAAKD,EAAO,CACR,M,CAGJA,EAAMQ,QAAUd,KAAKc,SAAWc,EAChCtB,EAAMG,cAAgBmB,C,CAIhBE,uBACN9B,KAAKK,sBACLL,KAAKC,mBAAqB,I,CAG9B8B,qBACI,GAAI/B,KAAKC,mBAAoB,CACzBD,KAAKe,aACLf,KAAKC,mBAAqB,K,EAI3B+B,oBACHhC,KAAKe,Y,CAGFkB,mBACHjC,KAAKe,Y,CAWFmB,uBACHlC,KAAKK,qB,CAGF8B,SACH,OACIC,EAACC,EAAgB,CACbC,SAAUtC,KAAKsC,UAAYtC,KAAKuC,SAChCC,MAAOxC,KAAKwC,MACZC,eAAgBzC,KAAKyC,eACrBC,WAAY1C,KAAK0C,WACjBtC,aAAcJ,KAAKI,aACnBU,QAASd,KAAKc,SAAWd,KAAKS,cAC9BA,cAAeT,KAAKS,cACpBG,SAAUZ,KAAKY,SACf2B,SAAUvC,KAAKuC,SACf5B,QAASX,KAAKU,YACdS,SAAUnB,KAAKmB,SACfjB,GAAIF,KAAKE,I"}