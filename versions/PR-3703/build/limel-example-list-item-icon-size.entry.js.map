{"version":3,"names":["listItemBasicCss","ListItemIconSizeExample","this","handleSizeChange","event","stopPropagation","option","detail","iconSize","_a","value","setBadgeIcon","badgeIcon","render","h","Host","tabindex","text","secondaryText","icon","name","color","backgroundColor","label","getSelectedOption","options","getIconSizeOptions","onChange","checked","sizes","map","s"],"sources":["./src/components/list-item/examples/list-item-basic.scss?tag=limel-example-list-item-icon-size&encapsulation=shadow","./src/components/list-item/examples/list-item-icon-size.tsx"],"sourcesContent":["@use '../../../style/mixins';\n\n:host {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.25rem;\n}\n\nul {\n    position: relative;\n    list-style: none;\n    padding: 1rem 1rem 2rem 1rem;\n    margin: 0;\n\n    background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n    background-size: 0.5rem;\n\n    &.is-resizable {\n        overflow: hidden;\n        resize: horizontal;\n        max-width: calc(100% - 2rem);\n        min-width: 10rem;\n\n        &::after {\n            content: 'Resize me â¤µ';\n            font-size: 0.75rem;\n            position: absolute;\n            right: 0.25rem;\n            bottom: 0.25rem;\n        }\n    }\n}\n","import { Component, h, Host, State } from '@stencil/core';\nimport {\n    IconSize,\n    type Option,\n    type LimelSelectCustomEvent,\n} from '@limetech/lime-elements';\n\n/**\n * Icon size\n *\n * Control the icon size of list items via the `iconSize` prop.\n * By default, the icon size is set to `small`, but some\n * components may allow setting a different size.\n */\n@Component({\n    tag: 'limel-example-list-item-icon-size',\n    shadow: true,\n    styleUrl: 'list-item-basic.scss',\n})\nexport class ListItemIconSizeExample {\n    @State()\n    private badgeIcon = false;\n\n    @State()\n    private iconSize: IconSize = 'small';\n\n    public render() {\n        return (\n            <Host>\n                <ul>\n                    <limel-list-item\n                        value={1}\n                        tabindex=\"0\"\n                        text=\"Apple\"\n                        secondaryText=\"a delicious fruit\"\n                        icon={{\n                            name: 'apple',\n                            color: 'rgb(var(--color-red-default))',\n                        }}\n                        badgeIcon={this.badgeIcon}\n                        iconSize={this.iconSize}\n                    />\n                    <limel-list-item\n                        value={2}\n                        tabindex=\"0\"\n                        text=\"Dragon\"\n                        secondaryText=\"a mythical creature\"\n                        icon={{\n                            name: 'dragon',\n                            color: 'rgb(var(--color-white))',\n                            backgroundColor: 'rgb(var(--color-gray-default))',\n                        }}\n                        badgeIcon={this.badgeIcon}\n                        iconSize={this.iconSize}\n                    />\n                </ul>\n                <limel-example-controls>\n                    <limel-select\n                        label=\"iconSize\"\n                        value={this.getSelectedOption()}\n                        options={this.getIconSizeOptions()}\n                        onChange={this.handleSizeChange}\n                    />\n                    <limel-checkbox\n                        checked={this.badgeIcon}\n                        label=\"badgeIcon\"\n                        onChange={this.setBadgeIcon}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private handleSizeChange = (\n        event: LimelSelectCustomEvent<Option<IconSize>>\n    ) => {\n        event.stopPropagation();\n        const option = event.detail;\n        this.iconSize = option?.value ?? 'small';\n    };\n\n    private getIconSizeOptions(): Array<Option<IconSize>> {\n        const sizes: IconSize[] = ['x-small', 'small', 'medium', 'large'];\n        return sizes.map((s) => ({ text: s, value: s }));\n    }\n\n    private getSelectedOption(): Option<IconSize> {\n        return { text: this.iconSize, value: this.iconSize };\n    }\n\n    private setBadgeIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.badgeIcon = event.detail;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAmB,slB,MCmBZC,EAAuB,M,yBAsDxBC,KAAAC,iBACJC,I,MAEAA,EAAMC,kBACN,MAAMC,EAASF,EAAMG,OACrBL,KAAKM,UAAWC,EAAAH,IAAM,MAANA,SAAM,SAANA,EAAQI,SAAK,MAAAD,SAAA,EAAAA,EAAI,OAAO,EAYpCP,KAAAS,aAAgBP,IACpBA,EAAMC,kBACNH,KAAKU,UAAYR,EAAMG,MAAM,E,eAvEb,M,cAGS,O,CAEtBM,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,UACIA,EAAA,mBACIJ,MAAO,EACPM,SAAS,IACTC,KAAK,QACLC,cAAc,oBACdC,KAAM,CACFC,KAAM,QACNC,MAAO,iCAEXT,UAAWV,KAAKU,UAChBJ,SAAUN,KAAKM,WAEnBM,EAAA,mBACIJ,MAAO,EACPM,SAAS,IACTC,KAAK,SACLC,cAAc,sBACdC,KAAM,CACFC,KAAM,SACNC,MAAO,0BACPC,gBAAiB,kCAErBV,UAAWV,KAAKU,UAChBJ,SAAUN,KAAKM,YAGvBM,EAAA,8BACIA,EAAA,gBACIS,MAAM,WACNb,MAAOR,KAAKsB,oBACZC,QAASvB,KAAKwB,qBACdC,SAAUzB,KAAKC,mBAEnBW,EAAA,kBACIc,QAAS1B,KAAKU,UACdW,MAAM,YACNI,SAAUzB,KAAKS,gB,CAe3Be,qBACJ,MAAMG,EAAoB,CAAC,UAAW,QAAS,SAAU,SACzD,OAAOA,EAAMC,KAAKC,IAAC,CAAQd,KAAMc,EAAGrB,MAAOqB,K,CAGvCP,oBACJ,MAAO,CAAEP,KAAMf,KAAKM,SAAUE,MAAOR,KAAKM,S"}