{"version":3,"names":["actionBarCss","ActionBar","this","hasRendered","isFirstIntersectionCheck","actionBarItems","renderActionBarItem","item","index","h","onSelect","handleSelect","isVisible","role","renderOverflowMenu","items","actions","length","overflowCutoff","shrunkOverFlowIcon","name","color","title","getTranslation","openDirection","overFlowIcon","actionBarIsShrunk","undefined","handleCollapseExpandClick","event","stopPropagation","isItem","detail","itemSelected","emit","key","translate","get","language","handleIntersection","entries","intersectingItems","filter","entry","isIntersecting","notIntersectingItems","document","documentElement","lang","connectedCallback","createIntersectionObserver","componentDidRender","haveItemsChanged","_a","intersectionObserver","disconnect","disconnectedCallback","render","overflowActions","slice","Host","accessibleLabel","class","layout","collapsible","map","renderCollapseExpandButton","tooltipLabel","type","onClick","id","label","elementId","options","root","host","shadowRoot","querySelector","rootMargin","threshold","IntersectionObserver","actionBarItem","querySelectorAll","observe","push","someItemRemoved","some","contains","someItemAdded","includes","actionBarItemCss","ActionBarButton","constructor","hostRef","handleClick","select","tooltipId","createRandomString","componentWillLoad","makeEnterClickable","componentDidLoad","triggerIconColorWarning","removeEnterClickable","separator","disabled","isDisabled","selected","renderIcon","renderLabel","renderTooltip","icon","getIconName","getIconColor","iconColor","getIconTitle","style","iconOnly","text","getTooltipLabel","helperLabel","commandText","iconTitle","console","warn","ActionBarOverflowMenu","getOverflowTriggerContent","numberOfMenuItems","slot","isMenuItem"],"sources":["./src/components/action-bar/action-bar.scss?tag=limel-action-bar&encapsulation=shadow","./src/components/action-bar/action-bar.tsx","./src/components/action-bar/action-bar-item/action-bar-item.scss?tag=limel-action-bar-item","./src/components/action-bar/action-bar-item/action-bar-item.tsx","./src/components/action-bar/action-bar-item/action-bar-overflow-menu.tsx"],"sourcesContent":["/**\n* @prop --action-bar-item-text-color: Text color of action bar items, defaults to `--contrast-1100`.\n* @prop --action-bar-item-icon-color: Color of the icons displayed on each action bar item. Defaults to the text color. To specify a color for an individual item, use the `iconColor` prop instead.\n* @prop --action-bar-item-max-width: Maximum width of a button in the action bar. Defaults to `10rem`. Keep in mind that the buttons should not appear too big.\n* @prop --action-bar-border-radius: Defines the roundness of the corners of the action bar. Defaults to `0`.\n* @prop --action-bar-background-color: Background color of the whole component. Defaults to `--contrast-100`.\n* @prop --action-bar-shrink-icon-color: Color of the shrink icon. Defaults to `--contrast-1000`.\n\n*/\n\n@use '../../style/mixins';\n\n:host(limel-action-bar) {\n    --action-bar-item-height: 2rem;\n\n    --limel-action-bar-item-text-color: var(\n        --action-bar-item-text-color,\n        rgb(var(--contrast-1100))\n    );\n\n    box-sizing: border-box;\n\n    display: inline-flex;\n    align-items: center;\n    padding: 0.125rem 0.25rem;\n    max-width: 100%;\n    border-radius: var(--action-bar-border-radius);\n\n    background-color: var(\n        --action-bar-background-color,\n        rgb(var(--contrast-100))\n    );\n\n    transition: max-width 0.3s ease;\n}\n\n:host(limel-action-bar),\n.items {\n    gap: 0.25rem;\n    @media (pointer: coarse) {\n        gap: 0.5rem;\n    }\n}\n\n.items {\n    display: inline-flex;\n    max-width: 100%;\n    min-width: 0;\n}\n\n:host(limel-action-bar.is-shrunk) .items {\n    opacity: 0;\n}\n\n:host(limel-action-bar:not(.is-shrunk)) .items {\n    opacity: 1;\n}\n\n:host(limel-action-bar.is-full-width) {\n    width: 100%;\n}\n\n:host(limel-action-bar.is-floating) {\n    --action-bar-border-radius: 100vw;\n    border: 1px solid rgb(var(--contrast-400));\n\n    padding-right: 0.125rem;\n    padding-left: 0.125rem;\n\n    max-width: calc(100% - 2rem);\n    box-shadow: var(--shadow-depth-16), var(--shadow-depth-8);\n}\n\n:host(limel-action-bar.is-shrunk) {\n    max-width: 5rem;\n    transition: max-width 0.3s ease-in-out;\n\n    .expand-shrink {\n        transition: transform 0.3s ease;\n        transform: rotateY(180deg);\n    }\n}\n\n:host(limel-action-bar:not(.is-shrunk)) {\n    max-width: 100%;\n    transition: max-width 0.3s ease-in-out;\n\n    .expand-shrink {\n        transition: transform 0.3s ease;\n        transform: rotateY(0deg);\n    }\n}\n\n:host(limel-action-bar.can-be-shrunk.is-full-width) {\n    .expand-shrink {\n        margin-left: auto;\n    }\n}\n\n.expand-shrink {\n    all: unset;\n    box-sizing: border-box;\n    border-radius: 50%;\n\n    @include mixins.is-flat-clickable();\n    @include mixins.visualize-keyboard-focus;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    limel-icon {\n        width: 1.5rem;\n        height: 1.5rem;\n        padding: 0.125rem;\n        color: var(--action-bar-shrink-icon-color, rgb(var(--contrast-1000)));\n    }\n}\n","import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n} from '@stencil/core';\nimport { ListSeparator } from '../list-item/list-item.types';\nimport { MenuItem, OpenDirection } from '../menu/menu.types';\nimport { ActionBarItem } from './action-bar.types';\nimport { Languages } from './../date-picker/date.types';\nimport translate from './../../global/translations';\nimport { isItem } from './is-item';\nimport { Icon } from '../../global/shared-types/icon.types';\n\n/**\n * An action bar is a user interface element commonly found in software applications and websites.\n * It typically appears at the top of the screen or within a specific section\n * and serves as a centralized hub for accessing various actions and commands\n * relevant to the current context or page.\n *\n * The action bar often contains a set of clickable icons or buttons (icons + labels)\n * that represent specific actions, such as saving, deleting, editing, sharing,\n * or bulk operations for selected items.\n *\n * The purpose of an action bar is to provide quick and convenient access to\n * frequently used functionalities, enabling users to perform common tasks efficiently.\n * It enhances usability by organizing important actions in a visually prominent and easily accessible location.\n *\n * The action bar's design and layout can vary based on the platform or application,\n * but its primary goal remains consistentâ€”to\n * empower users to interact with the software and perform desired actions effortlessly.\n *\n * @exampleComponent limel-example-action-bar-basic\n * @exampleComponent limel-example-action-bar-overflow-menu\n * @exampleComponent limel-example-action-bar-selected-item\n * @exampleComponent limel-example-action-bar-colors\n * @exampleComponent limel-example-action-bar-floating\n * @exampleComponent limel-example-action-bar-floating-expand\n * @exampleComponent limel-example-action-bar-styling\n * @exampleComponent limel-example-action-bar-as-primary-component\n * @exampleComponent limel-example-action-bar-icon-title\n */\n@Component({\n    tag: 'limel-action-bar',\n    shadow: true,\n    styleUrl: 'action-bar.scss',\n})\nexport class ActionBar {\n    /**\n     * Items that are placed in the action bar.\n     * These represent primary actions.\n     */\n    @Prop()\n    public actions: Array<ActionBarItem | ListSeparator> = [];\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = document.documentElement.lang as Languages;\n\n    /**\n     * A label used to describe the purpose of the element to users\n     * of assistive technologies, like screen readers.\n     * Example value: \"toolbar\"\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    /**\n     * - When set to `fullWidth`, the component will take the\n     * entire width of its container.\n     * - When set to `floating`, the component will get basic stylings\n     * to visualize the floating state.\n     * :::note\n     * You should still properly position the component\n     * according to the structure of your user interface.\n     * For example, use an `absolute` or `fixed` position.\n     * :::\n     */\n    @Prop({ reflect: true })\n    public layout?: 'fullWidth' | 'floating';\n\n    /**\n     * When set to `true`, the action bar will be collapsible.\n     */\n    @Prop({ reflect: true })\n    public collapsible = false;\n\n    /**\n     * Defines the location that the content of the overflow menu\n     * appears, in relation to its trigger.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection;\n\n    /**\n     * Fired when a action bar item has been clicked.\n     * @public\n     */\n    @Event()\n    public itemSelected: EventEmitter<ActionBarItem>;\n\n    @Element()\n    private readonly host: HTMLElement;\n\n    @State()\n    private overflowCutoff: number = this.actions.length;\n\n    /**\n     * Indicates whether the action bar is currently in a collapsed state.\n     */\n    @State()\n    private actionBarIsShrunk = false;\n\n    private hasRendered = false;\n    private intersectionObserver: IntersectionObserver;\n    private isFirstIntersectionCheck = true;\n    private actionBarItems: HTMLLimelActionBarItemElement[] = [];\n\n    public connectedCallback() {\n        if (this.hasRendered) {\n            this.createIntersectionObserver();\n        }\n    }\n\n    public componentDidRender() {\n        if (this.haveItemsChanged()) {\n            this.intersectionObserver?.disconnect();\n            this.createIntersectionObserver();\n        }\n    }\n\n    public disconnectedCallback() {\n        this.intersectionObserver?.disconnect();\n        this.intersectionObserver = undefined;\n        this.actionBarItems = [];\n    }\n\n    public render() {\n        this.hasRendered = true;\n        let overflowActions: Array<MenuItem | ListSeparator> = [];\n        if (this.actions.length > 0) {\n            overflowActions = this.actions.slice(this.overflowCutoff);\n        }\n\n        return (\n            <Host\n                aria-label={this.accessibleLabel}\n                class={{\n                    'is-full-width': this.layout === 'fullWidth',\n                    'is-floating': this.layout === 'floating',\n                    'is-shrunk': this.actionBarIsShrunk && this.collapsible,\n                    'can-be-shrunk': !!this.collapsible,\n                }}\n                role=\"grid\"\n            >\n                <div class=\"items\" role=\"rowgroup\">\n                    {this.actions.map(this.renderActionBarItem)}\n                </div>\n                {this.renderOverflowMenu(overflowActions)}\n                {this.renderCollapseExpandButton()}\n            </Host>\n        );\n    }\n\n    private readonly renderActionBarItem = (\n        item: ActionBarItem,\n        index: number\n    ) => {\n        return (\n            <limel-action-bar-item\n                item={item}\n                onSelect={this.handleSelect}\n                isVisible={this.isVisible(index)}\n                role=\"gridcell\"\n            />\n        );\n    };\n\n    private readonly renderOverflowMenu = (\n        items: Array<MenuItem | ListSeparator>\n    ) => {\n        if (!(this.actions.length - this.overflowCutoff)) {\n            return;\n        }\n\n        const shrunkOverFlowIcon: Icon = {\n            name: 'more',\n            color: 'rgb(var(--contrast-1000))',\n            title: this.getTranslation('action-bar.actions'),\n        };\n\n        return (\n            <limel-action-bar-overflow-menu\n                openDirection={this.openDirection}\n                items={items}\n                onSelect={this.handleSelect}\n                role=\"gridcell\"\n                overFlowIcon={\n                    this.actionBarIsShrunk ? shrunkOverFlowIcon : undefined\n                }\n            />\n        );\n    };\n\n    private renderCollapseExpandButton() {\n        if (!this.collapsible || this.actions.length <= 1) {\n            return;\n        }\n\n        return (\n            <button\n                class={{\n                    'expand-shrink': true,\n                }}\n                aria-label={this.tooltipLabel}\n                type=\"button\"\n                onClick={this.handleCollapseExpandClick}\n            >\n                <limel-icon\n                    name=\"double_left\"\n                    id=\"tooltip-expand-shrink-button\"\n                />\n                <limel-tooltip\n                    label={this.tooltipLabel}\n                    elementId=\"tooltip-expand-shrink-button\"\n                />\n            </button>\n        );\n    }\n\n    private handleCollapseExpandClick = () => {\n        this.actionBarIsShrunk = !this.actionBarIsShrunk;\n    };\n\n    private isVisible(index: number) {\n        return index < this.overflowCutoff;\n    }\n\n    private readonly handleSelect = (\n        event: CustomEvent<ActionBarItem | ListSeparator>\n    ) => {\n        event.stopPropagation();\n        if (isItem(event.detail)) {\n            this.itemSelected.emit(event.detail);\n        }\n    };\n\n    private get tooltipLabel() {\n        let key = 'action-bar.collapse';\n        if (this.actionBarIsShrunk) {\n            key = 'action-bar.expand';\n        }\n\n        return this.getTranslation(key);\n    }\n\n    private getTranslation = (key: string) => {\n        return translate.get(key, this.language);\n    };\n\n    private readonly handleIntersection = (\n        entries: IntersectionObserverEntry[]\n    ) => {\n        const intersectingItems = entries.filter(\n            (entry) => entry.isIntersecting\n        );\n\n        const notIntersectingItems = entries.filter(\n            (entry) => !entry.isIntersecting\n        );\n\n        if (this.isFirstIntersectionCheck) {\n            this.overflowCutoff = intersectingItems.length;\n        } else {\n            this.overflowCutoff =\n                this.overflowCutoff +\n                intersectingItems.length -\n                notIntersectingItems.length;\n        }\n\n        this.isFirstIntersectionCheck = false;\n    };\n\n    private createIntersectionObserver() {\n        const options = {\n            root: this.host.shadowRoot.querySelector('.items'),\n            rootMargin: '0px',\n            threshold: 1,\n        };\n\n        this.overflowCutoff = this.actions.length;\n        this.isFirstIntersectionCheck = true;\n\n        this.actionBarItems = [];\n\n        this.intersectionObserver = new IntersectionObserver(\n            this.handleIntersection,\n            options\n        );\n\n        for (const actionBarItem of this.host.shadowRoot.querySelectorAll(\n            'limel-action-bar-item'\n        )) {\n            this.observe(actionBarItem);\n        }\n    }\n\n    private observe(actionBarItem: HTMLLimelActionBarItemElement) {\n        this.intersectionObserver.observe(actionBarItem);\n        this.actionBarItems.push(actionBarItem);\n    }\n\n    private haveItemsChanged() {\n        const someItemRemoved = this.actionBarItems.some(\n            (actionBarItem: HTMLLimelActionBarItemElement) =>\n                !this.host.shadowRoot.contains(actionBarItem)\n        );\n\n        const someItemAdded = [\n            ...this.host.shadowRoot.querySelectorAll('limel-action-bar-item'),\n        ].some(\n            (actionBarItem: HTMLLimelActionBarItemElement) =>\n                !this.actionBarItems.includes(actionBarItem)\n        );\n\n        return someItemRemoved || someItemAdded;\n    }\n}\n","@use '../../../style/mixins';\n@use '../../../style/functions';\n\nlimel-action-bar-item {\n    transition: opacity 0.2s ease-in-out;\n    position: relative;\n    display: flex;\n    align-items: center;\n\n    &:not([is-visible]) {\n        opacity: 0;\n        pointer-events: none;\n    }\n}\n\nbutton {\n    all: unset;\n\n    &:not([disabled]) {\n        @include mixins.is-flat-inset-clickable(\n            $color: var(--limel-action-bar-item-text-color),\n            $color--hovered: var(--limel-action-bar-item-text-color),\n            $background-color: var(--action-bar-background-color),\n            $background-color--hovered: var(--action-bar-background-color),\n            $background-color--inset: var(--action-bar-background-color)\n        );\n        @include mixins.visualize-keyboard-focus;\n    }\n\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    width: 100%;\n    min-width: var(--action-bar-item-height);\n    max-width: var(--action-bar-item-max-width, 10rem);\n    height: var(--action-bar-item-height);\n    color: var(--limel-action-bar-item-text-color);\n\n    border-radius: var(--action-bar-item-height);\n    font-size: var(--limel-theme-default-font-size);\n    padding: 0 0.25rem;\n\n    &:has(.text) {\n        padding: 0 0.5rem;\n    }\n\n    &[disabled] {\n        opacity: 0.4;\n    }\n\n    &.is-selected {\n        &:not(:hover) {\n            box-shadow: var(--button-shadow-inset);\n        }\n        color: var(\n            --lime-primary-color,\n            var(--limel-theme-primary-color)\n        ) !important;\n    }\n}\n\n.text {\n    @include mixins.truncate-text();\n    padding: 0 0.25rem;\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--action-bar-item-height) - 0.75rem);\n    height: calc(var(--action-bar-item-height) - 0.75rem);\n    color: var(\n        --action-bar-item-icon-color,\n        var(--limel-action-bar-item-text-color)\n    );\n}\n\nhr {\n    all: unset;\n    width: 1px;\n    height: 1.5rem;\n    border-radius: var(--action-bar-item-height);\n    background-color: var(--limel-action-bar-item-text-color);\n    opacity: 0.2;\n\n    @media (pointer: fine) {\n        margin-right: 0.5rem;\n        margin-left: 0.5rem;\n    }\n}\n\n// ðŸ‘‡ Overflow menu\n\nlimel-menu {\n    --notification-badge-background-color: rgb(var(--contrast-600));\n    --notification-badge-text-color: rgb(var(--contrast-1200));\n\n    &[open] {\n        button {\n            box-shadow: var(--button-shadow-inset);\n        }\n    }\n}\n\nbutton[slot='trigger'] {\n    animation: fade-in ease-out 0.25s;\n    font-size: 0.75rem;\n    font-weight: bold;\n    transform: translate3d(0, 0, 0);\n}\n\n@keyframes fade-in {\n    0% {\n        scale: 0.8;\n        opacity: 0;\n    }\n    100% {\n        scale: 1;\n        opacity: 1;\n    }\n}\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { ActionBarItem } from '../../action-bar/action-bar.types';\nimport { ListSeparator } from '../../list-item/list-item.types';\nimport { createRandomString } from '../../../util/random-string';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../../util/make-enter-clickable';\nimport {\n    getIconColor,\n    getIconName,\n    getIconTitle,\n} from '../../icon/get-icon-props';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-action-bar-item',\n    shadow: false,\n    styleUrl: 'action-bar-item.scss',\n})\nexport class ActionBarButton {\n    /**\n     * Item that is placed in the action bar.\n     */\n    @Prop()\n    public item!: ActionBarItem | ListSeparator;\n\n    /**\n     * Fired when a action bar item has been clicked.\n     * @public\n     */\n    @Event()\n    public select: EventEmitter<ActionBarItem | ListSeparator>;\n\n    /**\n     * When the item is displayed in the available width,\n     * this will be `false`.\n     */\n    @Prop({ reflect: true })\n    public isVisible: boolean = true;\n\n    /**\n     * When the item is selected, this will be `true`.\n     */\n    @Prop({ reflect: true })\n    public selected: boolean = false;\n\n    @Element()\n    private readonly host: HTMLLimelActionBarItemElement;\n\n    /**\n     * Used to attach the right tooltip to the right button\n     */\n    private readonly tooltipId: string;\n\n    constructor() {\n        this.tooltipId = createRandomString();\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public componentDidLoad() {\n        this.triggerIconColorWarning();\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    public render() {\n        if (!this.isItem(this.item) && this.item.separator) {\n            return <hr />;\n        }\n\n        return (\n            <button\n                id={this.tooltipId}\n                type=\"button\"\n                onClick={this.handleClick}\n                disabled={this.isDisabled()}\n                class={{\n                    'is-selected': this.isItem(this.item) && this.item.selected,\n                }}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderTooltip()}\n            </button>\n        );\n    }\n\n    private readonly handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.select.emit(this.item);\n    };\n\n    private isItem(item: ActionBarItem | ListSeparator): item is ActionBarItem {\n        return !('separator' in item);\n    }\n\n    private isDisabled() {\n        if (this.isItem(this.item) && this.item.disabled) {\n            return true;\n        }\n\n        if (!this.isVisible) {\n            return true;\n        }\n    }\n\n    private renderIcon() {\n        if (this.isItem(this.item) && !this.item.icon) {\n            return;\n        }\n\n        if ('icon' in this.item) {\n            const name = getIconName(this.item.icon);\n\n            const color = getIconColor(this.item.icon, this.item.iconColor);\n            const title = getIconTitle(this.item.icon);\n\n            return (\n                <limel-icon\n                    name={name}\n                    aria-label={title}\n                    aria-hidden={title ? null : 'true'}\n                    style={{\n                        '--action-bar-item-icon-color': `${color}`,\n                    }}\n                />\n            );\n        }\n    }\n\n    private renderLabel() {\n        if (!this.isItem(this.item) || this.item.iconOnly) {\n            return;\n        }\n\n        return <span class=\"text\">{this.item.text}</span>;\n    }\n\n    private renderTooltip() {\n        if (!this.isItem(this.item)) {\n            return;\n        }\n\n        return (\n            <limel-tooltip\n                elementId={this.tooltipId}\n                label={this.getTooltipLabel(this.item)}\n                helperLabel={this.item.commandText}\n            />\n        );\n    }\n\n    private getTooltipLabel(item: ActionBarItem): string {\n        const iconTitle = getIconTitle(item.icon);\n        const tooltipLabel = item.text;\n\n        if (iconTitle && tooltipLabel) {\n            return `${iconTitle} ${tooltipLabel}`;\n        }\n\n        return tooltipLabel;\n    }\n\n    private triggerIconColorWarning() {\n        if (this.isItem(this.item) && this.item.iconColor) {\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\"\n            );\n        }\n    }\n}\n","import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\nimport { ActionBarItem } from '../../action-bar/action-bar.types';\nimport { ListSeparator } from '../../list-item/list-item.types';\nimport { MenuItem, OpenDirection } from '../../menu/menu.types';\nimport { LimelMenuCustomEvent } from '../../../components';\nimport { Icon } from '../../../global/shared-types/icon.types';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-action-bar-overflow-menu',\n    shadow: false,\n})\nexport class ActionBarOverflowMenu {\n    /**\n     * List of the items that should be rendered in the overflow menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator>;\n\n    /**\n     * Defines the location that the content of the overflow menu\n     * appears, in relation to its trigger.\n     * It defaults to `bottom-end`, since in normal scenarios\n     * (for example when the action bar is not floating at the bottom of the screen)\n     * this menu is the right-most item in the user interface of the component.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom-end';\n\n    /**\n     * Icon to display in the overflow menu trigger.\n     * If not provided, the number of items in the overflow menu will be displayed.\n     */\n    @Prop()\n    public overFlowIcon?: Icon;\n\n    /**\n     * Fired when an item in the action bar overflow menu has been clicked.\n     * @public\n     */\n    @Event()\n    public select: EventEmitter<ActionBarItem>;\n\n    public render() {\n        return [\n            <limel-menu\n                openDirection={this.openDirection}\n                items={this.items}\n                onSelect={this.handleSelect}\n            >\n                <button slot=\"trigger\">\n                    {this.getOverflowTriggerContent()}\n                </button>\n            </limel-menu>,\n        ];\n    }\n\n    private getOverflowTriggerContent = () => {\n        if (this.overFlowIcon) {\n            const { color, name, title } = this.overFlowIcon;\n\n            return (\n                <limel-icon\n                    style={{\n                        color: color,\n                    }}\n                    name={name}\n                    aria-label={title}\n                />\n            );\n        }\n\n        return `+${this.numberOfMenuItems}`;\n    };\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        this.select.emit(event.detail);\n    };\n\n    private get numberOfMenuItems() {\n        return this.items.filter((item) => this.isMenuItem(item)).length;\n    }\n\n    private isMenuItem(item: MenuItem | ListSeparator): item is MenuItem {\n        return !('separator' in item);\n    }\n}\n"],"mappings":"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"}