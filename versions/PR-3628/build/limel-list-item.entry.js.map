{"version":3,"names":["listItemCss","ListItem","constructor","hostRef","this","renderLabel","h","id","labelId","label","renderDescription","description","class","descriptionId","renderIcon","icon","iconName","getIconName","iconColor","iconBackgroundColor","color","backgroundColor","iconProps","role","name","style","Object","assign","renderImage","image","src","alt","loading","createRandomString","render","Host","undefined","disabled","selected"],"sources":["./src/components/list-item/list-item.scss?tag=limel-list-item&encapsulation=shadow","./src/components/list-item/list-item.tsx"],"sourcesContent":[null,"import { Component, Host, Prop, h } from '@stencil/core';\nimport { Icon } from '../../interface';\nimport { getIconName } from '../icon/get-icon-props';\nimport { Image } from '../../global/shared-types/image.types';\nimport { createRandomString } from '../../util/random-string';\n\n// The props should probably be imported from `list-item.types.ts` instead\n\n/**\n * This components displays the list item.\n * This centralizes styles and functionality, and helps reduce redundant code\n * in consumer components such as `limel-list` and `limel-menu-list`.\n * @exampleComponent limel-example-list-item-basic\n * @private\n */\n@Component({\n    tag: 'limel-list-item',\n    shadow: true,\n    styleUrl: 'list-item.scss',\n})\nexport class ListItem {\n    /**\n     * The label of the list item.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The description of the list item.\n     */\n    @Prop({ reflect: true })\n    public description?: string;\n\n    /**\n     * Icon of the list item.\n     */\n    @Prop()\n    public icon?: string | Icon;\n\n    /**\n     * A picture to be displayed together with the icon\n     * or on its own, in the list item.\n     */\n    @Prop()\n    public image?: Image;\n\n    /**\n     * Set to `true` to disable the list item.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to visualize the chip in a \"selected\" state.\n     * This is typically used when the chip is used in a chip-set\n     * along with other chips.\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * Used to describe the list item for assistive technology.\n     */\n    private readonly descriptionId: string;\n\n    /**\n     * Used to label the list item for assistive technology.\n     */\n    private readonly labelId: string;\n\n    constructor() {\n        this.labelId = createRandomString();\n        this.descriptionId = createRandomString();\n    }\n\n    public render() {\n        return (\n            <Host\n                aria-role=\"listitem\"\n                aria-labelledby={this.labelId}\n                aria-describedby={\n                    this.description ? this.descriptionId : undefined\n                }\n                aria-disabled={this.disabled ? 'true' : 'false'}\n                aria-selected={this.selected ? 'true' : 'false'}\n            >\n                {this.renderIcon()}\n                {this.renderImage()}\n                <div class=\"text\">\n                    {this.renderLabel()}\n                    {this.renderDescription()}\n                </div>\n            </Host>\n        );\n    }\n\n    private renderLabel = () => {\n        return <label id={this.labelId}>{this.label}</label>;\n    };\n\n    private renderDescription = () => {\n        if (!this.description) {\n            return;\n        }\n\n        return (\n            <span class=\"description\" id={this.descriptionId}>\n                {this.description}\n            </span>\n        );\n    };\n\n    private renderIcon = (icon?: string | Icon) => {\n        const iconName = getIconName(icon);\n        if (!iconName) {\n            return;\n        }\n\n        let iconColor: string | undefined;\n        let iconBackgroundColor: string | undefined;\n\n        if (typeof icon === 'object') {\n            iconColor = icon.color;\n            iconBackgroundColor = icon.backgroundColor;\n        }\n\n        const iconProps = {\n            role: 'presentation',\n            name: iconName,\n            style: {\n                color: iconColor,\n                'background-color': iconBackgroundColor,\n            },\n        };\n\n        return <limel-icon {...iconProps} />;\n    };\n\n    private renderImage = () => {\n        if (!!this.image) {\n            return;\n        }\n\n        return <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />;\n    };\n}\n"],"mappings":"uJAAA,MAAMA,EAAc,G,MCoBPC,EAAQ,MAkDjBC,YAAAC,G,UA0BQC,KAAAC,YAAc,IACXC,EAAA,SAAOC,GAAIH,KAAKI,SAAUJ,KAAKK,OAGlCL,KAAAM,kBAAoB,KACxB,IAAKN,KAAKO,YAAa,CACnB,M,CAGJ,OACIL,EAAA,QAAMM,MAAM,cAAcL,GAAIH,KAAKS,eAC9BT,KAAKO,YACH,EAIPP,KAAAU,WAAcC,IAClB,MAAMC,EAAWC,EAAYF,GAC7B,IAAKC,EAAU,CACX,M,CAGJ,IAAIE,EACJ,IAAIC,EAEJ,UAAWJ,IAAS,SAAU,CAC1BG,EAAYH,EAAKK,MACjBD,EAAsBJ,EAAKM,e,CAG/B,MAAMC,EAAY,CACdC,KAAM,eACNC,KAAMR,EACNS,MAAO,CACHL,MAAOF,EACP,mBAAoBC,IAI5B,OAAOb,EAAA,aAAAoB,OAAAC,OAAA,GAAgBL,GAAa,EAGhClB,KAAAwB,YAAc,KAClB,KAAMxB,KAAKyB,MAAO,CACd,M,CAGJ,OAAOvB,EAAA,OAAKwB,IAAK1B,KAAKyB,MAAMC,IAAKC,IAAK3B,KAAKyB,MAAME,IAAKC,QAAQ,QAAS,E,uGA7FzD,M,cAQA,MAad5B,KAAKI,QAAUyB,IACf7B,KAAKS,cAAgBoB,G,CAGlBC,SACH,OACI5B,EAAC6B,EAAI,aACS,WAAU,kBACH/B,KAAKI,QAAO,mBAEzBJ,KAAKO,YAAcP,KAAKS,cAAgBuB,UAAS,gBAEtChC,KAAKiC,SAAW,OAAS,QAAO,gBAChCjC,KAAKkC,SAAW,OAAS,SAEvClC,KAAKU,aACLV,KAAKwB,cACNtB,EAAA,OAAKM,MAAM,QACNR,KAAKC,cACLD,KAAKM,qB"}