{"version":3,"names":["listItemBasicCss","NOTIFICATION_ICON","name","title","color","backgroundColor","ListItemCheckboxExample","this","items","value","text","secondaryText","onListItemInteraction","event","itemValue","detail","item","isSelected","selected","selectedValues","Set","filter","id","lastInteraction","setBadgeIcon","stopPropagation","badgeIcon","setIcon","icon","undefined","render","h","Host","role","map","key","type","selectable","has","onInteract","label","checked","onChange"],"sources":["./src/components/list-item/examples/list-item-basic.scss?tag=limel-example-list-item-checkbox&encapsulation=shadow","./src/components/list-item/examples/list-item-checkbox.tsx"],"sourcesContent":["@use '../../../style/mixins';\n\n:host {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.25rem;\n}\n\nul {\n    position: relative;\n    list-style: none;\n    padding: 1rem 1rem 2rem 1rem;\n    margin: 0;\n\n    background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n    background-size: 0.5rem;\n\n    &.is-resizable {\n        overflow: hidden;\n        resize: horizontal;\n        max-width: 100%;\n        min-width: 10rem;\n\n        &::after {\n            content: 'Resize me â¤µ';\n            font-size: 0.75rem;\n            position: absolute;\n            right: 0.25rem;\n            bottom: 0.25rem;\n        }\n    }\n}\n\nlimel-list-item:not([disabled]):not([disabled='true']) {\n    @include mixins.is-flat-clickable(\n        $background-color: rgb(var(--contrast-100))\n    );\n    @include mixins.visualize-keyboard-focus();\n\n    &:hover,\n    &:focus,\n    &:focus-within,\n    &:focus-visible,\n    &:active {\n        z-index: 1;\n    }\n\n    &:first-of-type {\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n    }\n\n    &:last-of-type {\n        border-bottom-left-radius: 0.5rem;\n        border-bottom-right-radius: 0.5rem;\n    }\n}\n","import { ListItem } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\nconst NOTIFICATION_ICON = {\n    name: 'notification_alert',\n    title: 'Notification alert icon',\n    color: 'rgb(var(--color-yellow-default))',\n    backgroundColor: 'rgb(var(--color-pink-default))',\n};\n\n/**\n * Checkbox list items\n *\n * This example shows how list items can be displayed as checkboxes.\n * Checkboxes allow users to select multiple options from a group.\n *\n * :::important\n * - The consumer component should set `role=\"group\"` for the `ul` or\n * the container of the `limel-list-item`s\n * :::\n *\n * :::note\n * - The checkboxes are purely visual - the selection logic\n * is handled by the parent component through the interact events.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-item-checkbox',\n    shadow: true,\n    styleUrl: 'list-item-basic.scss',\n})\nexport class ListItemCheckboxExample {\n    @State()\n    private selectedValues: Set<number> = new Set([2]); // Pre-select second item\n\n    @State()\n    private lastInteraction: string = '';\n\n    @State()\n    private icon?: {\n        name: string;\n        title: string;\n        color: string;\n        backgroundColor: string;\n    } = NOTIFICATION_ICON;\n\n    @State()\n    private badgeIcon = true;\n\n    private items = [\n        {\n            value: 1,\n            text: 'Email notifications',\n            secondaryText: 'Receive updates via email',\n        },\n        {\n            value: 2,\n            text: 'Push notifications',\n            secondaryText: 'Receive updates on your device',\n        },\n        {\n            value: 3,\n            text: 'SMS notifications',\n            secondaryText: 'Receive updates via text message',\n        },\n        {\n            value: 4,\n            text: 'Newsletter',\n            secondaryText: 'Weekly product updates and tips',\n        },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <div role=\"group\" aria-labelledby=\"notification-heading\">\n                    {this.items.map((item) => (\n                        <limel-list-item\n                            key={item.value}\n                            value={item.value}\n                            text={item.text}\n                            secondaryText={item.secondaryText}\n                            type=\"checkbox\"\n                            selectable={true}\n                            selected={this.selectedValues.has(item.value)}\n                            onInteract={this.onListItemInteraction}\n                            icon={this.icon}\n                            badgeIcon={this.badgeIcon}\n                        />\n                    ))}\n                </div>\n                <limel-example-value\n                    label=\"Last interaction\"\n                    value={this.lastInteraction}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={!!this.icon}\n                        label=\"icon\"\n                        onChange={this.setIcon}\n                    />\n                    <limel-checkbox\n                        checked={this.badgeIcon}\n                        label=\"badgeIcon\"\n                        onChange={this.setBadgeIcon}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private onListItemInteraction = (\n        event: CustomEvent<{ selected: boolean; item: ListItem }>\n    ) => {\n        const itemValue = event.detail.item.value as number;\n        const isSelected = event.detail.selected;\n\n        // For checkboxes, toggle the selection state\n        if (isSelected) {\n            this.selectedValues = new Set([...this.selectedValues, itemValue]);\n        } else {\n            this.selectedValues = new Set(\n                [...this.selectedValues].filter((id) => id !== itemValue)\n            );\n        }\n\n        this.lastInteraction = `${isSelected ? 'Selected' : 'Deselected'} \"${event.detail.item.text}\"`;\n    };\n\n    private setBadgeIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.badgeIcon = event.detail;\n    };\n\n    private setIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.icon = event.detail ? NOTIFICATION_ICON : undefined;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAmB,ssFCGzB,MAAMC,EAAoB,CACtBC,KAAM,qBACNC,MAAO,0BACPC,MAAO,mCACPC,gBAAiB,kC,MAwBRC,EAAuB,M,yBAkBxBC,KAAAC,MAAQ,CACZ,CACIC,MAAO,EACPC,KAAM,sBACNC,cAAe,6BAEnB,CACIF,MAAO,EACPC,KAAM,qBACNC,cAAe,kCAEnB,CACIF,MAAO,EACPC,KAAM,oBACNC,cAAe,oCAEnB,CACIF,MAAO,EACPC,KAAM,aACNC,cAAe,oCA2CfJ,KAAAK,sBACJC,IAEA,MAAMC,EAAYD,EAAME,OAAOC,KAAKP,MACpC,MAAMQ,EAAaJ,EAAME,OAAOG,SAGhC,GAAID,EAAY,CACZV,KAAKY,eAAiB,IAAIC,IAAI,IAAIb,KAAKY,eAAgBL,G,KACpD,CACHP,KAAKY,eAAiB,IAAIC,IACtB,IAAIb,KAAKY,gBAAgBE,QAAQC,GAAOA,IAAOR,I,CAIvDP,KAAKgB,gBAAkB,GAAGN,EAAa,WAAa,iBAAiBJ,EAAME,OAAOC,KAAKN,OAAO,EAG1FH,KAAAiB,aAAgBX,IACpBA,EAAMY,kBACNlB,KAAKmB,UAAYb,EAAME,MAAM,EAGzBR,KAAAoB,QAAWd,IACfA,EAAMY,kBACNlB,KAAKqB,KAAOf,EAAME,OAASd,EAAoB4B,SAAS,E,oBAvGtB,IAAIT,IAAI,CAAC,I,qBAGb,G,UAQ9BnB,E,eAGgB,I,CAyBb6B,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,OAAKE,KAAK,QAAO,kBAAiB,wBAC7B1B,KAAKC,MAAM0B,KAAKlB,GACbe,EAAA,mBACII,IAAKnB,EAAKP,MACVA,MAAOO,EAAKP,MACZC,KAAMM,EAAKN,KACXC,cAAeK,EAAKL,cACpByB,KAAK,WACLC,WAAY,KACZnB,SAAUX,KAAKY,eAAemB,IAAItB,EAAKP,OACvC8B,WAAYhC,KAAKK,sBACjBgB,KAAMrB,KAAKqB,KACXF,UAAWnB,KAAKmB,eAI5BK,EAAA,uBACIS,MAAM,mBACN/B,MAAOF,KAAKgB,kBAEhBQ,EAAA,8BACIA,EAAA,kBACIU,UAAWlC,KAAKqB,KAChBY,MAAM,OACNE,SAAUnC,KAAKoB,UAEnBI,EAAA,kBACIU,QAASlC,KAAKmB,UACdc,MAAM,YACNE,SAAUnC,KAAKiB,gB"}