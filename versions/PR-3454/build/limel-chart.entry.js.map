{"version":3,"names":["chartCss","PERCENT","DEFAULT_INCREMENT_SIZE","Chart","this","handleClick","event","item","getClickableItem","currentTarget","stopPropagation","interact","emit","handleKeyDown","key","preventDefault","componentWillLoad","recalculateRangeData","render","loading","h","limeBranded","style","items","length","toString","renderCaption","renderTableHeader","renderAxises","class","renderItems","accessibleLabel","scope","accessibleItemsLabel","translate","get","language","includes","type","minValue","maxValue","range","lines","adjustedMinRange","Math","floor","axisIncrement","adjustedMaxRange","ceil","value","push","role","label","_a","cumulativeOffset","map","index","itemId","createRandomString","sizeAndOffset","calculateSizeAndOffset","size","offset","getItemStyle","getItemClass","id","tabIndex","clickable","onClick","onKeyDown","getItemText","getFormattedValue","renderTooltip","color","nextItem","Array","isArray","getMaximumValue","isRangeItem","totalRange","startValue","getMinimumValue","normalizedStart","normalizedEnd","formattedValue","text","PERCENT_DECIMAL","tooltipProps","helperLabel","elementId","toFixed","Object","assign","openDirection","orientation","calculateRange","minRange","min","maxRange","max","totalSum","reduce","sum","finalMaxRange","calculateAxisIncrement","visualMaxValue","visualMinValue","steps","roughStep","magnitude","log10","handleChange","target","dataset","undefined","Number"],"sources":["./src/components/chart/chart.scss?tag=limel-chart&encapsulation=shadow","./src/components/chart/chart.tsx"],"sourcesContent":["@use '../../style/mixins';\n$min-item-size: 0.5rem;\n$default-item-color: var(--chart-item-color, rgb(var(--contrast-1100), 0.8));\n\n/**\n* @prop --chart-background-color: Defines the background color of the chart. Defaults to `transparent` for _most_ chart types.\n* @prop --chart-item-color: If no color is defined for chart items, this color will be use. Defaults to `rgb(var(--contrast-1100), 0.8)`.\n* @prop --chart-item-divider-color: Defines the color that visually separates items in some charts, such as `stacked-bar` chart items. Defaults to `rgb(var(--color-white), 0.6)`.\n* @prop --chart-axis-line-color: Defines color of the axis lines. Defaults to `--contrast-900`. Note that lines have opacity as well, and get opaque on hover.\n* @prop --chart-item-border-radius: Defines the roundness of corners of items in a chart. Defaults to different values depending on the chart type. Does not have any effect on `pie` and `doughnut` types.\n*/\n\n:host(limel-chart) {\n    --chart-axis-line-color: var(\n        --limel-chart-axis-line-color,\n        rgb(var(--contrast-900))\n    );\n    box-sizing: border-box;\n    isolation: isolate;\n\n    display: flex;\n    width: 100%;\n    height: 100%;\n    min-width: 0;\n    min-height: 0;\n    padding: var(--limel-chart-padding);\n}\n\ntable {\n    // Since these are mainly \"resets\", no styles should be before them.\n    all: unset;\n    border-collapse: collapse;\n    border-spacing: 0;\n    empty-cells: show;\n\n    position: relative;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    min-width: 0;\n    min-height: 0;\n\n    colgroup,\n    thead,\n    tbody,\n    tr,\n    th,\n    td {\n        all: unset;\n    }\n\n    caption,\n    colgroup,\n    thead,\n    tfoot,\n    th,\n    td {\n        @include mixins.visually-hidden;\n    }\n}\n\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\n.chart {\n    position: relative;\n    flex-grow: 1;\n    width: 100%;\n    height: 100%;\n    min-height: 0;\n    min-width: 0;\n\n    &:has(.item:hover),\n    &:has(.item:focus-visible) {\n        .item {\n            opacity: 0.4;\n        }\n    }\n}\n\n.item {\n    @include mixins.visualize-keyboard-focus;\n    transition:\n        background-color 0.2s ease,\n        box-shadow 0.2s ease,\n        filter 0.2s ease,\n        opacity 0.4s ease;\n    cursor: help;\n\n    &:focus-visible,\n    &:hover {\n        opacity: 1 !important;\n    }\n\n    &[role='button'] {\n        cursor: pointer;\n    }\n}\n\nlimel-spinner {\n    margin: auto;\n}\n\n@mixin line(\n    $direction: vertical,\n    $color: rgb(var(--contrast-800), 0.4),\n    $position: center\n) {\n    @if $direction == vertical {\n        background: linear-gradient(to bottom, $color 0%, $color 100%)\n            $position/1px\n            100%\n            no-repeat;\n    } @else if $direction == horizontal {\n        background: linear-gradient(to right, $color 0%, $color 100%)\n            $position/100%\n            1px\n            no-repeat;\n    }\n}\n\n@import './partial-styles/_layout-for-charts-with-x-y-axises';\n@import './partial-styles/_layout-for-charts-with-circular-shape';\n@import './partial-styles/_bar-gantt-dot';\n@import './partial-styles/_area_line';\n@import './partial-styles/_pie-doughnut';\n@import './partial-styles/_ring';\n@import './partial-styles/_stacked-bar';\n@import './partial-styles/_nps';\n@import './partial-styles/_axises';\n","import { Component, Event, EventEmitter, h, Prop, Watch } from '@stencil/core';\nimport { Languages } from '../date-picker/date.types';\nimport translate from '../../global/translations';\nimport { createRandomString } from '../../util/random-string';\nimport { ChartItem } from './chart.types';\n\nconst PERCENT = 100;\nconst DEFAULT_INCREMENT_SIZE = 10;\n\n/**\n * A chart is a graphical representation of data, in which\n * visual symbols such as such bars, dots, lines, or slices, represent\n * each data point, in comparison to others.\n *\n * @exampleComponent limel-example-chart-stacked-bar\n * @exampleComponent limel-example-chart-orientation\n * @exampleComponent limel-example-chart-max-value\n * @exampleComponent limel-example-chart-type-bar\n * @exampleComponent limel-example-chart-type-dot\n * @exampleComponent limel-example-chart-type-area\n * @exampleComponent limel-example-chart-type-line\n * @exampleComponent limel-example-chart-type-pie\n * @exampleComponent limel-example-chart-type-doughnut\n * @exampleComponent limel-example-chart-type-ring\n * @exampleComponent limel-example-chart-type-gantt\n * @exampleComponent limel-example-chart-type-nps\n * @exampleComponent limel-example-chart-multi-axis\n * @exampleComponent limel-example-chart-multi-axis-with-negative-start-values\n * @exampleComponent limel-example-chart-multi-axis-area-with-negative-start-values\n * @exampleComponent limel-example-chart-axis-increment\n * @exampleComponent limel-example-chart-clickable-items\n * @exampleComponent limel-example-chart-accessibility\n * @exampleComponent limel-example-chart-styling\n * @exampleComponent limel-example-chart-creative-styling\n * @beta\n */\n\n@Component({\n    tag: 'limel-chart',\n    shadow: true,\n    styleUrl: 'chart.scss',\n})\nexport class Chart {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Helps users of assistive technologies to understand\n     * the context of the chart, and what is being displayed.\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    /**\n     * Helps users of assistive technologies to understand\n     * what the items in the chart represent.\n     */\n    @Prop({ reflect: true })\n    public accessibleItemsLabel?: string;\n\n    /**\n     * List of items in the chart,\n     * each representing a data point.\n     */\n    @Prop()\n    public items!: ChartItem[];\n\n    /**\n     * Defines how items are visualized in the chart.\n     */\n    @Prop({ reflect: true })\n    public type?:\n        | 'area'\n        | 'bar'\n        | 'doughnut'\n        | 'line'\n        | 'nps'\n        | 'pie'\n        | 'ring'\n        | 'dot'\n        | 'stacked-bar' = 'stacked-bar';\n\n    /**\n     * Defines whether the chart is intended to be displayed wide or tall.\n     * Does not have any effect on chart types which generate circular forms.\n     */\n    @Prop({ reflect: true })\n    public orientation?: 'landscape' | 'portrait' = 'landscape';\n\n    /**\n     * Specifies the range that items' values could be in.\n     * This is used in calculation of the size of the items in the chart.\n     * When not provided, the sum of all values in the items will be considered as the range.\n     */\n    @Prop({ reflect: true })\n    public maxValue?: number;\n\n    /**\n     * Specifies the increment for the axis lines.\n     */\n    @Prop({ reflect: true })\n    public axisIncrement?: number;\n\n    /**\n     * Indicates whether the chart is in a loading state.\n     */\n    @Prop({ reflect: true })\n    public loading: boolean = false;\n\n    private range: {\n        minValue: number;\n        maxValue: number;\n        totalRange: number;\n    };\n\n    /**\n     * Fired when a chart item with `clickable` set to `true` is clicked\n     */\n    @Event()\n    public interact: EventEmitter<ChartItem>;\n\n    public componentWillLoad() {\n        this.recalculateRangeData();\n    }\n\n    public render() {\n        if (this.loading) {\n            return <limel-spinner limeBranded={false} />;\n        }\n\n        return (\n            <table\n                aria-busy={this.loading ? 'true' : 'false'}\n                aria-live=\"polite\"\n                style={{\n                    '--limel-chart-number-of-items':\n                        this.items.length.toString(),\n                }}\n            >\n                {this.renderCaption()}\n                {this.renderTableHeader()}\n                {this.renderAxises()}\n                <tbody class=\"chart\">{this.renderItems()}</tbody>\n            </table>\n        );\n    }\n\n    private renderCaption() {\n        if (!this.accessibleLabel) {\n            return;\n        }\n\n        return <caption>{this.accessibleLabel}</caption>;\n    }\n\n    private renderTableHeader() {\n        return (\n            <thead>\n                <tr>\n                    <th scope=\"col\">{this.accessibleItemsLabel}</th>\n                    <th scope=\"col\">{translate.get('value', this.language)}</th>\n                </tr>\n            </thead>\n        );\n    }\n\n    private renderAxises() {\n        if (!['bar', 'dot', 'area', 'line'].includes(this.type)) {\n            return;\n        }\n\n        const { minValue, maxValue } = this.range;\n        const lines = [];\n        const adjustedMinRange =\n            Math.floor(minValue / this.axisIncrement) * this.axisIncrement;\n        const adjustedMaxRange =\n            Math.ceil(maxValue / this.axisIncrement) * this.axisIncrement;\n\n        for (\n            let value = adjustedMinRange;\n            value <= adjustedMaxRange;\n            value += this.axisIncrement\n        ) {\n            lines.push(\n                <div\n                    class={{\n                        'axis-line': true,\n                        'zero-line': value === 0,\n                    }}\n                    role=\"presentation\"\n                >\n                    <limel-badge label={value} />\n                </div>,\n            );\n        }\n\n        return (\n            <div class=\"axises\" role=\"presentation\">\n                {lines}\n            </div>\n        );\n    }\n\n    private renderItems() {\n        if (!this.items?.length) {\n            return;\n        }\n\n        let cumulativeOffset = 0;\n\n        return this.items.map((item, index) => {\n            const itemId = createRandomString();\n            const sizeAndOffset = this.calculateSizeAndOffset(item);\n            const size = sizeAndOffset.size;\n            let offset = sizeAndOffset.offset;\n\n            if (this.type === 'pie' || this.type === 'doughnut') {\n                offset = cumulativeOffset;\n                cumulativeOffset += size;\n            }\n\n            return (\n                <tr\n                    style={this.getItemStyle(item, index, size, offset)}\n                    class={this.getItemClass(item)}\n                    key={itemId}\n                    id={itemId}\n                    data-index={index}\n                    tabIndex={0}\n                    role={item.clickable ? 'button' : null}\n                    onClick={this.handleClick}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    <th>{this.getItemText(item)}</th>\n                    <td>{this.getFormattedValue(item)}</td>\n                    {this.renderTooltip(item, itemId, size)}\n                </tr>\n            );\n        });\n    }\n\n    private getItemStyle(\n        item: ChartItem,\n        index: number,\n        size: number,\n        offset: number,\n    ): Record<string, string> {\n        const style: Record<string, string> = {\n            '--limel-chart-item-offset': `${offset}`,\n            '--limel-chart-item-size': `${size}`,\n            '--limel-chart-item-index': `${index}`,\n            '--limel-chart-item-value': `${item.value}`,\n        };\n\n        if (item.color) {\n            style['--limel-chart-item-color'] = item.color;\n        }\n\n        if (this.type === 'line' || this.type === 'area') {\n            const nextItem = this.calculateSizeAndOffset(this.items[index + 1]);\n\n            style['--limel-chart-next-item-size'] = `${nextItem.size}`;\n            style['--limel-chart-next-item-offset'] = `${nextItem.offset}`;\n        }\n\n        return style;\n    }\n\n    private getItemClass(item: ChartItem) {\n        return {\n            item: true,\n            'has-start-value': Array.isArray(item.value),\n            'has-negative-value-only':\n                this.getMaximumValue(item) < 0 && !this.isRangeItem(item),\n        };\n    }\n\n    private calculateSizeAndOffset(item?: ChartItem) {\n        const { minValue, totalRange } = this.range;\n        if (!item) {\n            return {\n                size: 0,\n                offset: 0,\n            };\n        }\n\n        let startValue = 0;\n        if (this.isRangeItem(item)) {\n            startValue = this.getMinimumValue(item);\n        }\n\n        const normalizedStart =\n            ((startValue - minValue) / totalRange) * PERCENT;\n        const normalizedEnd =\n            ((this.getMaximumValue(item) - minValue) / totalRange) * PERCENT;\n\n        return {\n            size: normalizedEnd - normalizedStart,\n            offset: normalizedStart,\n        };\n    }\n\n    private getFormattedValue(item: ChartItem): string {\n        const { value, formattedValue } = item;\n\n        if (formattedValue) {\n            return formattedValue;\n        }\n\n        if (Array.isArray(value)) {\n            return `${value[0]} — ${value[1]}`;\n        }\n\n        return `${value}`;\n    }\n\n    private getItemText(item: ChartItem): string {\n        return item.text;\n    }\n\n    private renderTooltip(item: ChartItem, itemId: string, size: number) {\n        const text = this.getItemText(item);\n        const PERCENT_DECIMAL = 2;\n        const formattedValue = this.getFormattedValue(item);\n\n        const tooltipProps: any = {\n            label: text,\n            helperLabel: formattedValue,\n            elementId: itemId,\n        };\n\n        if (this.type !== 'bar' && this.type !== 'dot' && this.type !== 'nps') {\n            tooltipProps.label = `${text} (${size.toFixed(PERCENT_DECIMAL)}%)`;\n        }\n\n        return (\n            <limel-tooltip\n                {...tooltipProps}\n                openDirection={\n                    this.orientation === 'portrait' ? 'right' : 'top'\n                }\n            />\n        );\n    }\n\n    private calculateRange() {\n        if (this.range) {\n            return this.range;\n        }\n\n        const minRange = Math.min(0, ...this.items.map(this.getMinimumValue));\n        const maxRange = Math.max(...this.items.map(this.getMaximumValue));\n        const totalSum = this.items.reduce(\n            (sum, item) => sum + this.getMaximumValue(item),\n            0,\n        );\n\n        let finalMaxRange = this.maxValue ?? maxRange;\n        if (\n            (this.type === 'pie' || this.type === 'doughnut') &&\n            !this.maxValue\n        ) {\n            finalMaxRange = totalSum;\n        }\n\n        if (!this.axisIncrement) {\n            this.axisIncrement = this.calculateAxisIncrement(this.items);\n        }\n\n        const visualMaxValue =\n            Math.ceil(finalMaxRange / this.axisIncrement) * this.axisIncrement;\n        const visualMinValue =\n            Math.floor(minRange / this.axisIncrement) * this.axisIncrement;\n        const totalRange = visualMaxValue - visualMinValue;\n\n        return {\n            minValue: visualMinValue,\n            maxValue: visualMaxValue,\n            totalRange: totalRange,\n        };\n    }\n\n    private calculateAxisIncrement(\n        items: ChartItem[],\n        steps: number = DEFAULT_INCREMENT_SIZE,\n    ) {\n        const maxValue = Math.max(\n            ...items.map((item) => {\n                const value = item.value;\n                if (Array.isArray(value)) {\n                    return Math.max(...value);\n                }\n\n                return value;\n            }),\n        );\n\n        const roughStep = maxValue / steps;\n        // eslint-disable-next-line no-magic-numbers\n        const magnitude = 10 ** Math.floor(Math.log10(roughStep));\n\n        return Math.ceil(roughStep / magnitude) * magnitude;\n    }\n\n    private getMinimumValue(item: ChartItem): number {\n        const value = item.value;\n\n        return Array.isArray(value) ? Math.min(...value) : value;\n    }\n\n    private getMaximumValue(item: ChartItem): number {\n        const value = item.value;\n\n        return Array.isArray(value) ? Math.max(...value) : value;\n    }\n\n    private isRangeItem(item: ChartItem): item is ChartItem<[number, number]> {\n        return Array.isArray(item.value);\n    }\n\n    @Watch('items')\n    @Watch('axisIncrement')\n    @Watch('maxValue')\n    handleChange() {\n        this.range = null;\n        this.recalculateRangeData();\n    }\n\n    private recalculateRangeData() {\n        this.range = this.calculateRange();\n    }\n\n    private getClickableItem(target: HTMLElement): ChartItem | undefined {\n        const index = target.dataset.index;\n        if (index === undefined) {\n            return;\n        }\n\n        const item = this.items[Number(index)];\n        if (!item.clickable) {\n            return;\n        }\n\n        return item;\n    }\n\n    private readonly handleClick = (event: MouseEvent) => {\n        const item = this.getClickableItem(event.currentTarget as HTMLElement);\n        if (!item) {\n            return;\n        }\n\n        event.stopPropagation();\n        this.interact.emit(item);\n    };\n\n    private readonly handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key !== 'Enter' && event.key !== ' ') {\n            return;\n        }\n\n        const item = this.getClickableItem(event.currentTarget as HTMLElement);\n        if (!item) {\n            return;\n        }\n\n        event.preventDefault();\n        this.interact.emit(item);\n    };\n}\n"],"mappings":"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"}