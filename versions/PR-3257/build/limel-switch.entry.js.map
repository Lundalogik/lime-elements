{"version":3,"names":["CssClasses","Selectors","observeProperty","target","property","observer","targetObservers","installObserver","observers","getObservers","push","splice","indexOf","allTargetObservers","WeakMap","observersMap","Map","has","set","isEnabled","key","get","installedProperties","Set","descriptor","getDescriptor","configurable","enumerable","value","writable","observedDescriptor","__assign","descGet","descSet","value_1","newValue","call","this","e_4","_a","previous","_b","__values","_c","next","done","e_4_1","error","return","add","Object","defineProperty","descriptorTarget","getOwnPropertyDescriptor","getPrototypeOf","setObserversEnabled","enabled","MDCObserverFoundation","_super","__extends","adapter","_this","unobserves","prototype","destroy","unobserve","observe","e_1","cleanup","keys","bind","e_1_1","e_2","cleanup_1","cleanup_1_1","cleanupFn","e_2_1","delete","e_3","__spreadArray","__read","e_3_1","MDCFoundation","MDCSwitchFoundation","handleClick","init","state","disabled","stopProcessingIfDisabled","processing","selected","MDCSwitchRenderFoundation","apply","arguments","onDisabledChange","onProcessingChange","onSelectedChange","initFromDOM","hasClass","SELECTED","isDisabled","PROCESSING","setDisabled","toggleClass","setAriaChecked","String","UNSELECTED","addClass","className","removeClass","MDCSwitch","root","foundation","attachTo","initialize","ripple","MDCRipple","createRippleFoundation","initialSyncWithDOM","rippleElement","querySelector","RIPPLE","Error","addEventListener","removeEventListener","getDefaultFoundation","createAdapter","classList","contains","remove","ariaChecked","setAttribute","MDCRippleFoundation","createRippleAdapter","computeBoundingRect","getBoundingClientRect","isUnbounded","MDCComponent","switchCss","Switch","helperTextId","createRandomString","renderHelperLine","hasHelperText","h","helperText","invalid","undefined","event","stopPropagation","change","emit","connectedCallback","componentWillLoad","makeEnterClickable","host","componentDidLoad","element","shadowRoot","mdcSwitch","disconnectedCallback","removeEnterClickable","render","readonly","icon","name","color","defaultLabel","text","label","labels","readonlyLabels","id","fieldId","class","type","role","onClick","viewBox","d","htmlFor","valueWatcher"],"sources":["./node_modules/@material/switch/constants.js","./node_modules/@material/base/observer.js","./node_modules/@material/base/observer-foundation.js","./node_modules/@material/switch/foundation.js","./node_modules/@material/switch/component.js","./src/components/switch/switch.scss?tag=limel-switch&encapsulation=shadow","./src/components/switch/switch.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * CSS classes used for switch.\n */\nexport var CssClasses;\n(function (CssClasses) {\n    CssClasses[\"PROCESSING\"] = \"mdc-switch--processing\";\n    CssClasses[\"SELECTED\"] = \"mdc-switch--selected\";\n    CssClasses[\"UNSELECTED\"] = \"mdc-switch--unselected\";\n})(CssClasses || (CssClasses = {}));\n/**\n * Query selectors used for switch.\n */\nexport var Selectors;\n(function (Selectors) {\n    Selectors[\"RIPPLE\"] = \".mdc-switch__ripple\";\n})(Selectors || (Selectors = {}));\n//# sourceMappingURL=constants.js.map","/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __read, __spreadArray, __values } from \"tslib\";\n/**\n * Mixin to add `MDCObserver` functionality to an optional base class.\n *\n * @deprecated Prefer MDCObserverFoundation for stricter closure compliance.\n * @template C Optional base class constructor type.\n * @param baseClass - Optional base class.\n * @return A class that extends the optional base class with `MDCObserver`\n *     functionality.\n */\nexport function mdcObserver(baseClass) {\n    if (baseClass === void 0) { baseClass = /** @class */ (function () {\n        function class_1() {\n        }\n        return class_1;\n    }()); }\n    // Mixin classes cannot use private members and Symbol() cannot be used in 3P\n    // for IE11.\n    var unobserveMap = new WeakMap();\n    return /** @class */ (function (_super) {\n        __extends(MDCObserver, _super);\n        function MDCObserver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MDCObserver.prototype.observe = function (target, observers) {\n            var e_1, _a;\n            var _this = this;\n            var cleanup = [];\n            try {\n                for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var property = _c.value;\n                    var observer = observers[property].bind(this);\n                    cleanup.push(observeProperty(target, property, observer));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var unobserve = function () {\n                var e_2, _a;\n                try {\n                    for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {\n                        var cleanupFn = cleanup_1_1.value;\n                        cleanupFn();\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                var unobserves = unobserveMap.get(_this) || [];\n                var index = unobserves.indexOf(unobserve);\n                if (index > -1) {\n                    unobserves.splice(index, 1);\n                }\n            };\n            var unobserves = unobserveMap.get(this);\n            if (!unobserves) {\n                unobserves = [];\n                unobserveMap.set(this, unobserves);\n            }\n            unobserves.push(unobserve);\n            return unobserve;\n        };\n        MDCObserver.prototype.setObserversEnabled = function (target, enabled) {\n            setObserversEnabled(target, enabled);\n        };\n        MDCObserver.prototype.unobserve = function () {\n            var e_3, _a;\n            // Iterate over a copy since unobserve() will remove themselves from the\n            // array\n            var unobserves = unobserveMap.get(this) || [];\n            try {\n                for (var _b = __values(__spreadArray([], __read(unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var unobserve = _c.value;\n                    unobserve();\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        };\n        return MDCObserver;\n    }(baseClass));\n}\n/**\n * Observe a target's property for changes. When a property changes, the\n * provided `Observer` function will be invoked with the properties current and\n * previous values.\n *\n * The returned cleanup function will stop listening to changes for the\n * provided `Observer`.\n *\n * @template T The observed target type.\n * @template K The observed property.\n * @param target - The target to observe.\n * @param property - The property of the target to observe.\n * @param observer - An observer function to invoke each time the property\n *     changes.\n * @return A cleanup function that will stop observing changes for the provided\n *     `Observer`.\n */\nexport function observeProperty(target, property, observer) {\n    var targetObservers = installObserver(target, property);\n    var observers = targetObservers.getObservers(property);\n    observers.push(observer);\n    return function () {\n        observers.splice(observers.indexOf(observer), 1);\n    };\n}\n/**\n * A Map of all `TargetObservers` that have been installed.\n */\nvar allTargetObservers = new WeakMap();\n/**\n * Installs a `TargetObservers` for the provided target (if not already\n * installed), and replaces the given property with a getter and setter that\n * will respond to changes and call `TargetObservers`.\n *\n * Subsequent calls to `installObserver()` with the same target and property\n * will not override the property's previously installed getter/setter.\n *\n * @template T The observed target type.\n * @template K The observed property to create a getter/setter for.\n * @param target - The target to observe.\n * @param property - The property to create a getter/setter for, if needed.\n * @return The installed `TargetObservers` for the provided target.\n */\nfunction installObserver(target, property) {\n    var observersMap = new Map();\n    if (!allTargetObservers.has(target)) {\n        allTargetObservers.set(target, {\n            isEnabled: true,\n            getObservers: function (key) {\n                var observers = observersMap.get(key) || [];\n                if (!observersMap.has(key)) {\n                    observersMap.set(key, observers);\n                }\n                return observers;\n            },\n            installedProperties: new Set()\n        });\n    }\n    var targetObservers = allTargetObservers.get(target);\n    if (targetObservers.installedProperties.has(property)) {\n        // The getter/setter has already been replaced for this property\n        return targetObservers;\n    }\n    // Retrieve (or create if it's a plain property) the original descriptor from\n    // the target...\n    var descriptor = getDescriptor(target, property) || {\n        configurable: true,\n        enumerable: true,\n        value: target[property],\n        writable: true\n    };\n    // ...and create a copy that will be used for the observer.\n    var observedDescriptor = __assign({}, descriptor);\n    var descGet = descriptor.get, descSet = descriptor.set;\n    if ('value' in descriptor) {\n        // The descriptor is a simple value (not a getter/setter).\n        // For our observer descriptor that we copied, delete the value/writable\n        // properties, since they are incompatible with the get/set properties\n        // for descriptors.\n        delete observedDescriptor.value;\n        delete observedDescriptor.writable;\n        // Set up a simple getter...\n        var value_1 = descriptor.value;\n        descGet = function () { return value_1; };\n        // ...and setter (if the original property was writable).\n        if (descriptor.writable) {\n            descSet = function (newValue) {\n                value_1 = newValue;\n            };\n        }\n    }\n    if (descGet) {\n        observedDescriptor.get = function () {\n            // `this as T` needed for closure conformance\n            return descGet.call(this);\n        };\n    }\n    if (descSet) {\n        observedDescriptor.set = function (newValue) {\n            var e_4, _a;\n            // `thus as T` needed for closure conformance\n            var previous = descGet ? descGet.call(this) : newValue;\n            descSet.call(this, newValue);\n            if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {\n                try {\n                    for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var observer = _c.value;\n                        observer(newValue, previous);\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            }\n        };\n    }\n    targetObservers.installedProperties.add(property);\n    Object.defineProperty(target, property, observedDescriptor);\n    return targetObservers;\n}\n/**\n * Retrieves the descriptor for a property from the provided target. This\n * function will walk up the target's prototype chain to search for the\n * descriptor.\n *\n * @template T The target type.\n * @template K The property type.\n * @param target - The target to retrieve a descriptor from.\n * @param property - The name of the property to retrieve a descriptor for.\n * @return the descriptor, or undefined if it does not exist. Keep in mind that\n *     plain properties may not have a descriptor defined.\n */\nexport function getDescriptor(target, property) {\n    var descriptorTarget = target;\n    var descriptor;\n    while (descriptorTarget) {\n        descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);\n        if (descriptor) {\n            break;\n        }\n        // Walk up the instance's prototype chain in case the property is declared\n        // on a superclass.\n        descriptorTarget = Object.getPrototypeOf(descriptorTarget);\n    }\n    return descriptor;\n}\n/**\n * Enables or disables all observers for a provided target. Changes to observed\n * properties will not call any observers when disabled.\n *\n * @template T The observed target type.\n * @param target - The target to enable or disable observers for.\n * @param enabled - True to enable or false to disable observers.\n */\nexport function setObserversEnabled(target, enabled) {\n    var targetObservers = allTargetObservers.get(target);\n    if (targetObservers) {\n        targetObservers.isEnabled = enabled;\n    }\n}\n//# sourceMappingURL=observer.js.map","/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends, __read, __spreadArray, __values } from \"tslib\";\nimport { MDCFoundation } from './foundation';\nimport { observeProperty, setObserversEnabled } from './observer';\nvar MDCObserverFoundation = /** @class */ (function (_super) {\n    __extends(MDCObserverFoundation, _super);\n    function MDCObserverFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        /** A set of cleanup functions to unobserve changes. */\n        _this.unobserves = new Set();\n        return _this;\n    }\n    MDCObserverFoundation.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.unobserve();\n    };\n    /**\n     * Observe a target's properties for changes using the provided map of\n     * property names and observer functions.\n     *\n     * @template T The target type.\n     * @param target - The target to observe.\n     * @param observers - An object whose keys are target properties and values\n     *     are observer functions that are called when the associated property\n     *     changes.\n     * @return A cleanup function that can be called to unobserve the\n     *     target.\n     */\n    MDCObserverFoundation.prototype.observe = function (target, observers) {\n        var e_1, _a;\n        var _this = this;\n        var cleanup = [];\n        try {\n            for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var property = _c.value;\n                var observer = observers[property].bind(this);\n                cleanup.push(this.observeProperty(target, property, observer));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var unobserve = function () {\n            var e_2, _a;\n            try {\n                for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {\n                    var cleanupFn = cleanup_1_1.value;\n                    cleanupFn();\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            _this.unobserves.delete(unobserve);\n        };\n        this.unobserves.add(unobserve);\n        return unobserve;\n    };\n    /**\n     * Observe a target's property for changes. When a property changes, the\n     * provided `Observer` function will be invoked with the properties current\n     * and previous values.\n     *\n     * The returned cleanup function will stop listening to changes for the\n     * provided `Observer`.\n     *\n     * @template T The observed target type.\n     * @template K The observed property.\n     * @param target - The target to observe.\n     * @param property - The property of the target to observe.\n     * @param observer - An observer function to invoke each time the property\n     *     changes.\n     * @return A cleanup function that will stop observing changes for the\n     *     provided `Observer`.\n     */\n    MDCObserverFoundation.prototype.observeProperty = function (target, property, observer) {\n        return observeProperty(target, property, observer);\n    };\n    /**\n     * Enables or disables all observers for the provided target. Disabling\n     * observers will prevent them from being called until they are re-enabled.\n     *\n     * @param target - The target to enable or disable observers for.\n     * @param enabled - Whether or not observers should be called.\n     */\n    MDCObserverFoundation.prototype.setObserversEnabled = function (target, enabled) {\n        setObserversEnabled(target, enabled);\n    };\n    /**\n     * Clean up all observers and stop listening for property changes.\n     */\n    MDCObserverFoundation.prototype.unobserve = function () {\n        var e_3, _a;\n        try {\n            // Iterate over a copy since unobserve() will remove themselves from the set\n            for (var _b = __values(__spreadArray([], __read(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var unobserve = _c.value;\n                unobserve();\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    return MDCObserverFoundation;\n}(MDCFoundation));\nexport { MDCObserverFoundation };\n//# sourceMappingURL=observer-foundation.js.map","/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCObserverFoundation } from '@material/base/observer-foundation';\nimport { CssClasses } from './constants';\n/**\n * `MDCSwitchFoundation` provides a state-only foundation for a switch\n * component.\n *\n * State observers and event handler entrypoints update a component's adapter's\n * state with the logic needed for switch to function.\n */\nvar MDCSwitchFoundation = /** @class */ (function (_super) {\n    __extends(MDCSwitchFoundation, _super);\n    function MDCSwitchFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        _this.handleClick = _this.handleClick.bind(_this);\n        return _this;\n    }\n    /**\n     * Initializes the foundation and starts observing state changes.\n     */\n    MDCSwitchFoundation.prototype.init = function () {\n        this.observe(this.adapter.state, {\n            disabled: this.stopProcessingIfDisabled,\n            processing: this.stopProcessingIfDisabled,\n        });\n    };\n    /**\n     * Event handler for switch click events. Clicking on a switch will toggle its\n     * selected state.\n     */\n    MDCSwitchFoundation.prototype.handleClick = function () {\n        if (this.adapter.state.disabled) {\n            return;\n        }\n        this.adapter.state.selected = !this.adapter.state.selected;\n    };\n    MDCSwitchFoundation.prototype.stopProcessingIfDisabled = function () {\n        if (this.adapter.state.disabled) {\n            this.adapter.state.processing = false;\n        }\n    };\n    return MDCSwitchFoundation;\n}(MDCObserverFoundation));\nexport { MDCSwitchFoundation };\n/**\n * `MDCSwitchRenderFoundation` provides a state and rendering foundation for a\n * switch component.\n *\n * State observers and event handler entrypoints update a component's\n * adapter's state with the logic needed for switch to function.\n *\n * In response to state changes, the rendering foundation uses the component's\n * render adapter to keep the component's DOM updated with the state.\n */\nvar MDCSwitchRenderFoundation = /** @class */ (function (_super) {\n    __extends(MDCSwitchRenderFoundation, _super);\n    function MDCSwitchRenderFoundation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the foundation and starts observing state changes.\n     */\n    MDCSwitchRenderFoundation.prototype.init = function () {\n        _super.prototype.init.call(this);\n        this.observe(this.adapter.state, {\n            disabled: this.onDisabledChange,\n            processing: this.onProcessingChange,\n            selected: this.onSelectedChange,\n        });\n    };\n    /**\n     * Initializes the foundation from a server side rendered (SSR) component.\n     * This will sync the adapter's state with the current state of the DOM.\n     *\n     * This method should be called after `init()`.\n     */\n    MDCSwitchRenderFoundation.prototype.initFromDOM = function () {\n        // Turn off observers while setting state\n        this.setObserversEnabled(this.adapter.state, false);\n        this.adapter.state.selected = this.adapter.hasClass(CssClasses.SELECTED);\n        // Ensure aria-checked is set if attribute is not present\n        this.onSelectedChange();\n        this.adapter.state.disabled = this.adapter.isDisabled();\n        this.adapter.state.processing =\n            this.adapter.hasClass(CssClasses.PROCESSING);\n        // Re-observe state\n        this.setObserversEnabled(this.adapter.state, true);\n        this.stopProcessingIfDisabled();\n    };\n    MDCSwitchRenderFoundation.prototype.onDisabledChange = function () {\n        this.adapter.setDisabled(this.adapter.state.disabled);\n    };\n    MDCSwitchRenderFoundation.prototype.onProcessingChange = function () {\n        this.toggleClass(this.adapter.state.processing, CssClasses.PROCESSING);\n    };\n    MDCSwitchRenderFoundation.prototype.onSelectedChange = function () {\n        this.adapter.setAriaChecked(String(this.adapter.state.selected));\n        this.toggleClass(this.adapter.state.selected, CssClasses.SELECTED);\n        this.toggleClass(!this.adapter.state.selected, CssClasses.UNSELECTED);\n    };\n    MDCSwitchRenderFoundation.prototype.toggleClass = function (addClass, className) {\n        if (addClass) {\n            this.adapter.addClass(className);\n        }\n        else {\n            this.adapter.removeClass(className);\n        }\n    };\n    return MDCSwitchRenderFoundation;\n}(MDCSwitchFoundation));\nexport { MDCSwitchRenderFoundation };\n//# sourceMappingURL=foundation.js.map","/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { Selectors } from './constants';\nimport { MDCSwitchRenderFoundation } from './foundation';\n/**\n * `MDCSwitch` provides a component implementation of a Material Design switch.\n */\nvar MDCSwitch = /** @class */ (function (_super) {\n    __extends(MDCSwitch, _super);\n    function MDCSwitch(root, foundation) {\n        var _this = _super.call(this, root, foundation) || this;\n        _this.root = root;\n        return _this;\n    }\n    /**\n     * Creates a new `MDCSwitch` and attaches it to the given root element.\n     * @param root The root to attach to.\n     * @return the new component instance.\n     */\n    MDCSwitch.attachTo = function (root) {\n        return new MDCSwitch(root);\n    };\n    MDCSwitch.prototype.initialize = function () {\n        this.ripple = new MDCRipple(this.root, this.createRippleFoundation());\n    };\n    MDCSwitch.prototype.initialSyncWithDOM = function () {\n        var rippleElement = this.root.querySelector(Selectors.RIPPLE);\n        if (!rippleElement) {\n            throw new Error(\"Switch \" + Selectors.RIPPLE + \" element is required.\");\n        }\n        this.rippleElement = rippleElement;\n        this.root.addEventListener('click', this.foundation.handleClick);\n        this.foundation.initFromDOM();\n    };\n    MDCSwitch.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.ripple.destroy();\n        this.root.removeEventListener('click', this.foundation.handleClick);\n    };\n    MDCSwitch.prototype.getDefaultFoundation = function () {\n        return new MDCSwitchRenderFoundation(this.createAdapter());\n    };\n    MDCSwitch.prototype.createAdapter = function () {\n        var _this = this;\n        return {\n            addClass: function (className) {\n                _this.root.classList.add(className);\n            },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            isDisabled: function () { return _this.root.disabled; },\n            removeClass: function (className) {\n                _this.root.classList.remove(className);\n            },\n            setAriaChecked: function (ariaChecked) {\n                return _this.root.setAttribute('aria-checked', ariaChecked);\n            },\n            setDisabled: function (disabled) {\n                _this.root.disabled = disabled;\n            },\n            state: this,\n        };\n    };\n    MDCSwitch.prototype.createRippleFoundation = function () {\n        return new MDCRippleFoundation(this.createRippleAdapter());\n    };\n    MDCSwitch.prototype.createRippleAdapter = function () {\n        var _this = this;\n        return __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function () { return _this.rippleElement.getBoundingClientRect(); }, isUnbounded: function () { return true; } });\n    };\n    return MDCSwitch;\n}(MDCComponent));\nexport { MDCSwitch };\n//# sourceMappingURL=component.js.map","@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/internal/lime-theme';\n@use '../../style/internal/lime-typography';\n\n@use '@material/switch/styles';\n\n$scale-factor: 0.8;\n\n:host(limel-switch) {\n    isolation: isolate;\n\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n\n    --mdc-switch-selected-icon-color: transparent;\n    --mdc-switch-unselected-icon-color: transparent;\n\n    --mdc-switch-disabled-selected-icon-opacity: 1;\n    --mdc-switch-disabled-unselected-icon-opacity: 1;\n\n    --mdc-switch-selected-icon-size: 0.75rem;\n    --mdc-switch-unselected-icon-size: 0.75rem;\n\n    --mdc-switch-track-height: 1.25rem;\n    --mdc-switch-track-shape: var(--mdc-switch-track-height);\n\n    --mdc-switch-unselected-focus-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-focus-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-pressed-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-pressed-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-hover-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-hover-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n\n    --mdc-switch-unselected-track-color: rgb(var(--contrast-700));\n    --mdc-switch-unselected-focus-track-color: rgb(var(--contrast-800));\n    --mdc-switch-unselected-pressed-track-color: rgb(var(--contrast-800));\n    --mdc-switch-unselected-hover-track-color: rgb(var(--contrast-800));\n    --mdc-switch-selected-focus-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-pressed-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-hover-track-color: var(--mdc-theme-primary);\n\n    --mdc-switch-handle-elevation: var(--button-shadow-normal);\n    --mdc-switch-disabled-track-opacity: 0.4;\n\n    --mdc-switch-disabled-selected-handle-color: rgb(var(--contrast-1000));\n    --mdc-switch-disabled-unselected-handle-color: rgb(var(--contrast-1000));\n}\n\n.mdc-switch {\n    margin-right: functions.pxToRem(8);\n    &:hover {\n        --mdc-switch-handle-elevation: var(--button-shadow-hovered);\n    }\n}\n\nlabel {\n    @include lime-typography.typography(body2);\n    color: var(--mdc-theme-on-surface);\n\n    &:not(.disabled) {\n        cursor: pointer;\n    }\n}\n\nlabel {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-switch {\n    &.mdc-switch--selected,\n    &.mdc-switch.mdc-switch--unselected {\n        .mdc-switch__handle {\n            &:after,\n            &:before {\n                transform: scale($scale-factor);\n            }\n        }\n    }\n    .mdc-switch__shadow {\n        transform: scale($scale-factor);\n    }\n}\n\n@import './partial-styles/_helper-text.scss';\n","import { MDCSwitch } from '@material/switch';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { Label } from '../dynamic-label/label.types';\nimport { Icon } from '../../interface';\n\n/**\n * The Switch component is a fundamental element in UI design that serves as a toggle switch\n * to control the state of a specific setting or option in an application or website.\n * The two distinct positions of the Switch are visually indicative of the two states:\n * ON and OFF; making it easy for users to understand the current state of the controlled feature.\n *\n * The Switch component is widely used in user interfaces to enable users to\n * quickly and intuitively change binary settings.\n *\n * :::important\n * Checkboxes are sometimes used interchangeably with switches in user interfaces.\n * But there is an important difference between the two! Please read our guidelines about\n * [Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).\n *\n * @exampleComponent limel-example-switch\n * @exampleComponent limel-example-switch-helper-text\n * @exampleComponent limel-example-switch-readonly\n */\n@Component({\n    tag: 'limel-switch',\n    shadow: true,\n    styleUrl: 'switch.scss',\n})\nexport class Switch {\n    /**\n     * Label to display next to the switch\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Disables the switch when `true`,\n     * and visually shows that the switch is editable but disabled.\n     * This tells the users that if certain requirements are met,\n     * the switch may become interactable.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the switch when `true`. This visualizes the switch slightly differently.\n     * But shows no visual sign indicating that the switch is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid: boolean;\n\n    /**\n     * The value of the switch\n     */\n    @Prop({ reflect: true })\n    public value = false;\n\n    /**\n     * Optional helper text to display below the switch\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * The labels to use to clarify what kind of data is being visualized,\n     * when the component is `readonly`.\n     * @beta\n     */\n    @Prop()\n    public readonlyLabels?: Array<Label<boolean>> = [];\n\n    /**\n     * Emitted when the value has changed\n     */\n    @Event()\n    private change: EventEmitter<boolean>;\n\n    @Element()\n    private host: HTMLLimelSwitchElement;\n    private helperTextId: string = createRandomString();\n\n    @State()\n    private fieldId = createRandomString();\n\n    private mdcSwitch: MDCSwitch;\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector(\n            '.mdc-switch',\n        ) as HTMLButtonElement;\n        if (!element) {\n            return;\n        }\n\n        this.mdcSwitch = new MDCSwitch(element);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n        this.mdcSwitch?.destroy();\n    }\n\n    public render() {\n        if (this.readonly) {\n            let icon: string | Icon = 'minus';\n            if (this.value) {\n                icon = {\n                    name: 'ok',\n                    color: 'var(--mdc-theme-primary)',\n                };\n            }\n\n            return [\n                <limel-dynamic-label\n                    value={this.value}\n                    aria-controls={this.helperTextId}\n                    defaultLabel={{ text: this.label, icon: icon }}\n                    labels={this.readonlyLabels}\n                />,\n                this.renderHelperLine(),\n            ];\n        }\n\n        return [\n            <button\n                id={this.fieldId}\n                class={{\n                    'mdc-switch': true,\n                    'mdc-switch--unselected': !this.value,\n                    'mdc-switch--selected': this.value,\n                }}\n                type=\"button\"\n                role=\"switch\"\n                aria-checked={this.value}\n                disabled={this.disabled}\n                onClick={this.handleClick}\n                aria-controls={this.helperTextId}\n            >\n                <div class=\"mdc-switch__track\" />\n                <div class=\"mdc-switch__handle-track\">\n                    <div class=\"mdc-switch__handle\">\n                        <div class=\"mdc-switch__shadow\">\n                            <div class=\"mdc-elevation-overlay\"></div>\n                        </div>\n                        <div class=\"mdc-switch__ripple\"></div>\n                        <div class=\"mdc-switch__icons\">\n                            <svg\n                                class=\"mdc-switch__icon mdc-switch__icon--on\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z\" />\n                            </svg>\n                            <svg\n                                class=\"mdc-switch__icon mdc-switch__icon--off\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M20 13H4v-2h16v2z\" />\n                            </svg>\n                        </div>\n                    </div>\n                </div>\n            </button>,\n            <label\n                class={`${this.disabled ? 'disabled' : ''}`}\n                htmlFor={this.fieldId}\n            >\n                {this.label}\n            </label>,\n            this.renderHelperLine(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: boolean) {\n        if (!this.mdcSwitch) {\n            return;\n        }\n\n        this.mdcSwitch.selected = newValue;\n    }\n\n    private renderHelperLine = () => {\n        if (!this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperTextId={this.helperTextId}\n                helperText={this.helperText}\n                invalid={this.invalid}\n            />\n        );\n    };\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.change.emit(!this.value);\n    };\n}\n"],"mappings":"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"}