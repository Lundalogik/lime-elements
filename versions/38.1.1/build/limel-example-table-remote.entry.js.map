{"version":3,"names":["tableCss","NETWORK_DELAY","TableExampleRemote","this","columns","allData","data","pageSize","addUnit","unit","value","handleLoad","event","console","log","detail","sorter","sorters","currentPage","page","sort","compareBy","loadData","a","b","column","fieldA","field","fieldB","direction","String","localeCompare","componentWillLoad","title","formatter","capitalize","horizontalAlign","aggregator","calculateAverage","values","rowsData","total","reduce","sum","length","setTimeout","start","end","currentData","slice","render","h","mode","totalRows","onLoad"],"sources":["./src/components/table/examples/table.scss?tag=limel-example-table-remote&encapsulation=shadow","./src/components/table/examples/table-remote.tsx"],"sourcesContent":[":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n","import { Component, h, State } from '@stencil/core';\nimport { Column, TableParams, ColumnSorter } from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\nconst NETWORK_DELAY = 500;\n\n/**\n * Remote sorting and pagination\n *\n * @sourceFile birds.ts\n */\n@Component({\n    tag: 'limel-example-table-remote',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleRemote {\n    private columns: Array<Column<Bird>> = [];\n\n    @State()\n    private currentData: object[] = [];\n\n    private allData: object[] = data;\n\n    private pageSize = 10;\n\n    private currentPage: number;\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                horizontalAlign: 'right',\n                field: 'eggs',\n                aggregator: this.calculateAverage,\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private handleLoad = (event: CustomEvent<TableParams>) => {\n        console.log('Loading new data', event.detail);\n        const sorter = event.detail.sorters[0];\n\n        this.currentPage = event.detail.page;\n        if (sorter) {\n            this.allData = [...data].sort(this.compareBy(sorter));\n        }\n\n        this.loadData();\n    };\n\n    /**\n     * This will only handle how to compare strings. This means the two number\n     * columns in the example will not be sorted in the correct way\n     */\n    private compareBy = (sorter: ColumnSorter) => (a: Bird, b: Bird) => {\n        const column = sorter.column;\n        const fieldA = a[column.field];\n        const fieldB = b[column.field];\n\n        if (sorter.direction === 'ASC') {\n            return String(fieldA).localeCompare(String(fieldB));\n        }\n\n        return String(fieldB).localeCompare(String(fieldA));\n    };\n\n    /**\n     * Calculate the average value for a column for all the available data\n     *\n     * `values` and `rowsData` are not needed in this example since they only\n     * contain the values for the data that is currently loaded in the table\n     */\n    private calculateAverage(column: Column, values: any[], rowsData: Bird[]) {\n        console.log(values, rowsData);\n\n        const total = data.reduce((sum: number, value: Bird) => {\n            return sum + value[column.field];\n        }, 0);\n\n        return total / data.length;\n    }\n\n    /**\n     * Simulate some network delay, like loading data from a server\n     */\n    private loadData() {\n        setTimeout(() => {\n            const start = (this.currentPage - 1) * this.pageSize;\n            const end = start + this.pageSize;\n            this.currentData = this.allData.slice(start, end);\n        }, NETWORK_DELAY);\n    }\n\n    public render() {\n        return (\n            <limel-table\n                mode=\"remote\"\n                data={this.currentData}\n                columns={this.columns}\n                pageSize={this.pageSize}\n                totalRows={data.length}\n                onLoad={this.handleLoad}\n            />\n        );\n    }\n}\n"],"mappings":"qUAAA,MAAMA,EAAW,gDCKjB,MAAMC,EAAgB,I,MAYTC,EAAkB,M,yBACnBC,KAAAC,QAA+B,GAK/BD,KAAAE,QAAoBC,EAEpBH,KAAAI,SAAW,GAwBXJ,KAAAK,QAAWC,GAAkBC,GAC1B,GAAGA,KAASD,IAGfN,KAAAQ,WAAcC,IAClBC,QAAQC,IAAI,mBAAoBF,EAAMG,QACtC,MAAMC,EAASJ,EAAMG,OAAOE,QAAQ,GAEpCd,KAAKe,YAAcN,EAAMG,OAAOI,KAChC,GAAIH,EAAQ,CACRb,KAAKE,QAAU,IAAIC,GAAMc,KAAKjB,KAAKkB,UAAUL,G,CAGjDb,KAAKmB,UAAU,EAOXnB,KAAAkB,UAAaL,GAAyB,CAACO,EAASC,KACpD,MAAMC,EAAST,EAAOS,OACtB,MAAMC,EAASH,EAAEE,EAAOE,OACxB,MAAMC,EAASJ,EAAEC,EAAOE,OAExB,GAAIX,EAAOa,YAAc,MAAO,CAC5B,OAAOC,OAAOJ,GAAQK,cAAcD,OAAOF,G,CAG/C,OAAOE,OAAOF,GAAQG,cAAcD,OAAOJ,GAAQ,E,iBAzDvB,E,CAQzBM,oBACH7B,KAAKC,QAAU,CACX,CAAE6B,MAAO,OAAQN,MAAO,QACxB,CAAEM,MAAO,iBAAkBN,MAAO,iBAClC,CACIM,MAAO,WACPN,MAAO,WACPO,UAAW/B,KAAKK,QAAQ,OAE5B,CAAEyB,MAAO,YAAaN,MAAO,OAAQO,UAAWC,GAChD,CACIF,MAAO,kBACPG,gBAAiB,QACjBT,MAAO,OACPU,WAAYlC,KAAKmC,kBAErB,CAAEL,MAAO,SAAUN,MAAO,U,CA0C1BW,iBAAiBb,EAAgBc,EAAeC,GACpD3B,QAAQC,IAAIyB,EAAQC,GAEpB,MAAMC,EAAQnC,EAAKoC,QAAO,CAACC,EAAajC,IAC7BiC,EAAMjC,EAAMe,EAAOE,QAC3B,GAEH,OAAOc,EAAQnC,EAAKsC,M,CAMhBtB,WACJuB,YAAW,KACP,MAAMC,GAAS3C,KAAKe,YAAc,GAAKf,KAAKI,SAC5C,MAAMwC,EAAMD,EAAQ3C,KAAKI,SACzBJ,KAAK6C,YAAc7C,KAAKE,QAAQ4C,MAAMH,EAAOC,EAAI,GAClD9C,E,CAGAiD,SACH,OACIC,EAAA,eACIC,KAAK,SACL9C,KAAMH,KAAK6C,YACX5C,QAASD,KAAKC,QACdG,SAAUJ,KAAKI,SACf8C,UAAW/C,EAAKsC,OAChBU,OAAQnD,KAAKQ,Y"}