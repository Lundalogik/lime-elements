{"version":3,"names":["SnackbarContainer","constructor","this","snackbarElements","add","snackbar","popover","getPopover","showPopover","emitOffsets","remove","hidePopover","filter","item","offset","dispatchEvent","CustomEvent","detail","getBoundingClientRect","height","shadowRoot","querySelector","snackbarCss","container","hideAnimationDuration","Snackbar","hostRef","handleOpen","isOpen","closing","host","timeout","timeoutId","window","setTimeout","handleClose","Math","max","clearTimeout","undefined","hide","emit","handleClickAction","action","snackbarId","createRandomString","componentDidLoad","open","requestAnimationFrame","onChangeIndex","event","stopPropagation","watchOpen","async","console","warn","render","h","style","class","id","role","setAriaRoles","message","renderActions","actionText","renderDismissButton","dismissible","renderActionButton","label","onClick","translate","get","language","renderTimeoutVisualization","icon","width","viewBox","r","cx","cy","fill","d","stroke"],"sources":["./src/components/snackbar/container.ts","./src/components/snackbar/snackbar.scss?tag=limel-snackbar&encapsulation=shadow","./src/components/snackbar/snackbar.tsx"],"sourcesContent":["/**\n * Container to keep track of all snackbar elements that gets added to the page.\n * When an element gets added or removed, the container will emit a\n * `changeOffset` event on all elements in the container, letting them know\n * the new offset to where they should position themselves.\n */\nexport class SnackbarContainer {\n    private snackbarElements: HTMLLimelSnackbarElement[] = [];\n\n    /**\n     * Add a new element to the container\n     *\n     * @param snackbar - element to add\n     */\n    public add(snackbar: HTMLLimelSnackbarElement) {\n        const popover = this.getPopover(snackbar);\n\n        // @ts-expect-error Stencil does not seem to recognise the existance of showPopover\n        popover?.showPopover();\n\n        this.snackbarElements = [snackbar, ...this.snackbarElements];\n        this.emitOffsets();\n    }\n\n    /**\n     * Remove an element from the container\n     *\n     * @param snackbar - element to remove\n     */\n    public remove(snackbar: HTMLLimelSnackbarElement): void {\n        const popover = this.getPopover(snackbar);\n\n        // @ts-expect-error Stencil does not seem to recognise the existance of hidePopover\n        popover?.hidePopover();\n\n        this.snackbarElements = this.snackbarElements.filter(\n            (item) => item !== snackbar\n        );\n        this.emitOffsets();\n    }\n\n    private emitOffsets() {\n        let offset = 0;\n        for (const snackbar of this.snackbarElements) {\n            snackbar.dispatchEvent(\n                new CustomEvent('changeOffset', {\n                    detail: offset,\n                })\n            );\n            offset += this.getPopover(snackbar).getBoundingClientRect().height;\n        }\n    }\n\n    private getPopover(snackbar: HTMLLimelSnackbarElement) {\n        return snackbar.shadowRoot.querySelector('[popover]');\n    }\n}\n","* {\n    box-sizing: border-box;\n}\n\naside {\n    background: none;\n    border: none;\n    inset: unset;\n    overflow: visible;\n    padding: 0.5rem 0.5rem 0 0.5rem;\n    right: 0;\n\n    width: var(--limel-snackbar-width, 21rem);\n    top: calc(\n        var(--snackbar-distance-to-top-edge) + env(safe-area-inset-top, 0)\n    );\n\n    transition:\n        opacity var(--limel-snackbar-opacity-transition-speed, 0.2s) ease,\n        top var(--limel-snackbar-top-transition-speed, 0.46s)\n            cubic-bezier(1, 0.09, 0, 0.89),\n        transform var(--limel-snackbar-top-transition-speed, 0.46s) ease;\n    transform: translate3d(0, 0, 0);\n    opacity: 1;\n\n    &.is-closing {\n        transform: translate3d(2rem, 0, 0);\n        opacity: 0;\n        --limel-snackbar-top-transition-speed: 0.2s;\n        --limel-snackbar-opacity-transition-speed: 0.2s;\n    }\n}\n\n.surface {\n    overflow: hidden;\n\n    padding: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 0.25rem;\n\n    min-height: 3.25rem;\n    border-radius: 0.75rem;\n\n    background-color: rgb(var(--contrast-1400));\n    box-shadow: var(--shadow-depth-8), var(--shadow-depth-16);\n}\n\n.label {\n    color: rgb(var(--contrast-100));\n\n    -webkit-font-smoothing: antialiased;\n    font-size: var(--limel-theme-default-small-font-size);\n    font-weight: 400;\n    padding: 0 0.25rem;\n\n    width: 100%;\n    flex-grow: 1;\n}\n\n.actions {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    box-sizing: border-box;\n    gap: 0.5rem;\n}\n\n.dismiss,\n.actions {\n    --lime-elevated-surface-background-color: rgb(\n        var(--contrast-1300)\n    ); // background color of the buttons\n}\n\n.dismiss {\n    --limel-theme-on-surface-color: rgb(\n        var(--contrast-100)\n    ); // color of the X icon\n    --icon-background-color: var(--lime-elevated-surface-background-color);\n    --fill-color: var(--lime-primary-color, var(--limel-theme-primary-color));\n    --track-color: rgb(var(--contrast-800), 0.2);\n    transition:\n        opacity 0.1s ease,\n        transform 0.1s ease;\n    position: absolute;\n    top: -0.375rem;\n    left: -0.375rem;\n    transform: scale(0.7);\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n        position: absolute;\n        transform: rotate(90deg);\n        fill: transparent;\n        stroke-dasharray: 100;\n        stroke-linecap: round;\n\n        aside.open & {\n            animation: timeout var(--snackbar-timeout) linear forwards;\n        }\n    }\n\n    .is-closing {\n        transform: scale(0.5);\n        opacity: 0;\n    }\n}\n\n.dismiss-button {\n    transform: scale(0.8);\n    margin: 0;\n    padding: 0;\n}\n\n@keyframes timeout {\n    0% {\n        stroke-width: 4;\n        stroke-dashoffset: 0;\n        opacity: 1;\n    }\n    100% {\n        stroke-width: 1;\n        stroke-dashoffset: -100;\n        opacity: 0.7;\n    }\n}\n\n@import '../portal/partial-styles/portal-container.scss';\n","import { Languages } from '../date-picker/date.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Listen,\n    Method,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport translate from '../../global/translations';\nimport { SnackbarContainer } from './container';\nimport { createRandomString } from '../../util/random-string';\n\nconst container = new SnackbarContainer();\nconst hideAnimationDuration = 300;\n\n/**\n * A Snackbar –also known as \"Toast\"– is used to inform the end user\n * about an action or a process in the system.\n * The information could vary from announcing that a process has just started,\n * is taking place now, has ended, or has been interrupted or canceled.\n *\n * The information that you provide using a snackbar should be:\n * - temporary\n * - contextual\n * - short\n * - and most importantly, ignorable.\n *\n * It means if the user misses the information, it shouldn't be a big deal.\n *\n * :::note\n * If the information you want to display has a higher importance or priority,\n * and you need to make sure that the user takes an action to dismiss it,\n * consider using the [Banner](/#/component/limel-banner/) component instead.\n * For more complex interactions and for delivering more detailed information,\n * [Dialog](/#/component/limel-dialog/) is a better choice.\n * :::\n *\n * @exampleComponent limel-example-snackbar\n * @exampleComponent limel-example-snackbar-with-action\n * @exampleComponent limel-example-snackbar-with-changing-messages\n * @exampleComponent limel-example-snackbar-dismissible\n * @exampleComponent limel-example-snackbar-persistent\n * @exampleComponent limel-example-snackbar-persistent-non-dismissible\n */\n@Component({\n    tag: 'limel-snackbar',\n    shadow: true,\n    styleUrl: 'snackbar.scss',\n})\nexport class Snackbar {\n    /**\n     * `true` if the snackbar is open, `false` otherwise.\n     */\n    @Prop({ reflect: true })\n    public open: boolean = false;\n\n    /**\n     * The text message to display.\n     */\n    @Prop()\n    public message: string;\n\n    /**\n     * The amount of time in milliseconds to show the snackbar.\n     * If set to `-1`, the snackbar will be persistent.\n     * This means:\n     * - either the end user will need to close it manually,\n     * which requires the `dismissible` property to be set to `true`.\n     * - or the snackbar needs to be closed programmatically.\n     */\n    @Prop({ reflect: true })\n    public timeout?: number = 5000;\n\n    /**\n     * The text to display for the action button.\n     */\n    @Prop()\n    public actionText: string;\n\n    /**\n     * When `true` displays a dismiss button on the snackbar,\n     * allowing users to close it.\n     */\n    @Prop()\n    public dismissible: boolean = true;\n\n    /**\n     * Whether to show the snackbar with space for multiple lines of text\n     * @deprecated Setting this property no longer has any effect. The property will be removed in a future major version.\n     */\n    @Prop()\n    public multiline: boolean;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Element()\n    private readonly host: HTMLLimelSnackbarElement;\n\n    /**\n     * Emitted when the action button is pressed\n     */\n    @Event()\n    private readonly action: EventEmitter<void>;\n\n    /**\n     * Emitted when the snackbar hides itself\n     */\n    @Event()\n    private readonly hide: EventEmitter<void>;\n\n    @State()\n    private offset: number = 0;\n\n    @State()\n    private isOpen: boolean = false;\n\n    @State()\n    private closing: boolean = true;\n\n    private readonly snackbarId: string;\n    private timeoutId?: number;\n\n    public constructor() {\n        this.snackbarId = createRandomString();\n    }\n\n    public componentDidLoad() {\n        if (this.open) {\n            requestAnimationFrame(this.handleOpen);\n        }\n    }\n\n    @Listen('changeOffset')\n    protected onChangeIndex(event: CustomEvent<number>) {\n        event.stopPropagation();\n        this.offset = event.detail;\n    }\n\n    @Watch('open')\n    protected watchOpen() {\n        if (this.open) {\n            this.handleOpen();\n        } else {\n            this.handleClose();\n        }\n\n        this.isOpen = this.open;\n    }\n\n    /**\n     * Show the snackbar\n     * @deprecated Use the `open` property instead.\n     */\n    @Method()\n    public async show() {\n        console.warn(\n            'The `show` method in `limel-snackbar` is deprecated. Please use the `open` property instead.'\n        );\n        if (!this.open) {\n            this.handleOpen();\n        }\n    }\n\n    public handleOpen = () => {\n        if (this.isOpen) {\n            return;\n        }\n\n        this.isOpen = true;\n        this.closing = false;\n        container.add(this.host);\n\n        if (this.timeout && this.timeout !== -1) {\n            this.timeoutId = window.setTimeout(\n                this.handleClose,\n                Math.max(\n                    this.timeout - hideAnimationDuration,\n                    hideAnimationDuration\n                )\n            );\n        }\n    };\n\n    private readonly handleClose = () => {\n        if (!this.isOpen) {\n            return;\n        }\n\n        this.closing = true;\n\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n        }\n\n        setTimeout(() => {\n            this.isOpen = false;\n            container.remove(this.host);\n            this.hide.emit();\n            this.offset = 0;\n        }, hideAnimationDuration);\n    };\n\n    public render() {\n        return (\n            <aside\n                popover=\"manual\"\n                style={{\n                    '--snackbar-timeout': `${Math.max(this.timeout || 0, 0)}ms`,\n                    '--snackbar-distance-to-top-edge': `${this.offset}px`,\n                }}\n                class={{\n                    open: this.open,\n                    'is-closing': this.closing,\n                    'limel-portal--parent': true,\n                }}\n                id={this.snackbarId}\n                role={this.setAriaRoles()}\n                aria-relevant={this.open ? 'additions' : undefined}\n            >\n                <div class=\"surface\" aria-atomic=\"false\">\n                    <div class=\"label\">{this.message}</div>\n                    {this.renderActions(this.actionText)}\n                    {this.renderDismissButton(this.dismissible)}\n                </div>\n            </aside>\n        );\n    }\n\n    private setAriaRoles() {\n        if (!this.open) {\n            return;\n        }\n\n        if (!this.timeout || this.timeout === -1) {\n            return 'alertdialog';\n        }\n\n        return 'status';\n    }\n\n    private readonly handleClickAction = () => {\n        this.action.emit();\n    };\n\n    private renderActions(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\" aria-atomic=\"true\">\n                {this.renderActionButton(actionText)}\n            </div>\n        );\n    }\n\n    private renderActionButton(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <limel-button label={actionText} onClick={this.handleClickAction} />\n        );\n    }\n\n    private renderDismissButton(dismissible: boolean) {\n        if (!dismissible) {\n            return;\n        }\n\n        const label = translate.get('snackbar.dismiss', this.language);\n\n        return (\n            <div class=\"dismiss\">\n                {this.renderTimeoutVisualization()}\n                <limel-icon-button\n                    class=\"dismiss-button\"\n                    icon=\"multiply\"\n                    label={label}\n                    onClick={this.handleClose}\n                    aria-controls={this.snackbarId}\n                />\n            </div>\n        );\n    }\n\n    private renderTimeoutVisualization() {\n        if (!this.timeout || this.timeout === -1) {\n            return;\n        }\n\n        return (\n            <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <circle r=\"18\" cx=\"18\" cy=\"18\" fill=\"var(--track-color)\" />\n                <path\n                    class=\"track\"\n                    d=\"M 18,18 m -16,0 a 16,16 0 1,0 32,0 a 16,16 0 1,0 -32,0\"\n                    stroke=\"var(--fill-color)\"\n                />\n            </svg>\n        );\n    }\n}\n"],"mappings":"kKAMaA,EAAbC,cACYC,KAAAC,iBAA+C,E,CAOhDC,IAAIC,GACP,MAAMC,EAAUJ,KAAKK,WAAWF,GAGhCC,IAAO,MAAPA,SAAO,SAAPA,EAASE,cAETN,KAAKC,iBAAmB,CAACE,KAAaH,KAAKC,kBAC3CD,KAAKO,a,CAQFC,OAAOL,GACV,MAAMC,EAAUJ,KAAKK,WAAWF,GAGhCC,IAAO,MAAPA,SAAO,SAAPA,EAASK,cAETT,KAAKC,iBAAmBD,KAAKC,iBAAiBS,QACzCC,GAASA,IAASR,IAEvBH,KAAKO,a,CAGDA,cACJ,IAAIK,EAAS,EACb,IAAK,MAAMT,KAAYH,KAAKC,iBAAkB,CAC1CE,EAASU,cACL,IAAIC,YAAY,eAAgB,CAC5BC,OAAQH,KAGhBA,GAAUZ,KAAKK,WAAWF,GAAUa,wBAAwBC,M,EAI5DZ,WAAWF,GACf,OAAOA,EAASe,WAAWC,cAAc,Y,ECtDjD,MAAMC,EAAc,uvHCiBpB,MAAMC,EAAY,IAAIvB,EACtB,MAAMwB,EAAwB,I,MAoCjBC,EAAQ,MA6EjBxB,YAAAyB,G,oEAyCOxB,KAAAyB,WAAa,KAChB,GAAIzB,KAAK0B,OAAQ,CACb,M,CAGJ1B,KAAK0B,OAAS,KACd1B,KAAK2B,QAAU,MACfN,EAAUnB,IAAIF,KAAK4B,MAEnB,GAAI5B,KAAK6B,SAAW7B,KAAK6B,WAAa,EAAG,CACrC7B,KAAK8B,UAAYC,OAAOC,WACpBhC,KAAKiC,YACLC,KAAKC,IACDnC,KAAK6B,QAAUP,EACfA,G,GAMCtB,KAAAiC,YAAc,KAC3B,IAAKjC,KAAK0B,OAAQ,CACd,M,CAGJ1B,KAAK2B,QAAU,KAEf,GAAI3B,KAAK8B,UAAW,CAChBM,aAAapC,KAAK8B,WAClB9B,KAAK8B,UAAYO,S,CAGrBL,YAAW,KACPhC,KAAK0B,OAAS,MACdL,EAAUb,OAAOR,KAAK4B,MACtB5B,KAAKsC,KAAKC,OACVvC,KAAKY,OAAS,CAAC,GAChBU,EAAsB,EAyCZtB,KAAAwC,kBAAoB,KACjCxC,KAAKyC,OAAOF,MAAM,E,UAhMC,M,oCAiBG,I,2CAaI,K,uCAaD,K,YAkBJ,E,YAGC,M,aAGC,KAMvBvC,KAAK0C,WAAaC,G,CAGfC,mBACH,GAAI5C,KAAK6C,KAAM,CACXC,sBAAsB9C,KAAKyB,W,EAKzBsB,cAAcC,GACpBA,EAAMC,kBACNjD,KAAKY,OAASoC,EAAMjC,M,CAIdmC,YACN,GAAIlD,KAAK6C,KAAM,CACX7C,KAAKyB,Y,KACF,CACHzB,KAAKiC,a,CAGTjC,KAAK0B,OAAS1B,KAAK6C,I,CAQhBM,aACHC,QAAQC,KACJ,gGAEJ,IAAKrD,KAAK6C,KAAM,CACZ7C,KAAKyB,Y,EA4CN6B,SACH,OACIC,EAAA,SACInD,QAAQ,SACRoD,MAAO,CACH,qBAAsB,GAAGtB,KAAKC,IAAInC,KAAK6B,SAAW,EAAG,OACrD,kCAAmC,GAAG7B,KAAKY,YAE/C6C,MAAO,CACHZ,KAAM7C,KAAK6C,KACX,aAAc7C,KAAK2B,QACnB,uBAAwB,MAE5B+B,GAAI1D,KAAK0C,WACTiB,KAAM3D,KAAK4D,eAAc,gBACV5D,KAAK6C,KAAO,YAAcR,WAEzCkB,EAAA,OAAKE,MAAM,UAAS,cAAa,SAC7BF,EAAA,OAAKE,MAAM,SAASzD,KAAK6D,SACxB7D,KAAK8D,cAAc9D,KAAK+D,YACxB/D,KAAKgE,oBAAoBhE,KAAKiE,c,CAMvCL,eACJ,IAAK5D,KAAK6C,KAAM,CACZ,M,CAGJ,IAAK7C,KAAK6B,SAAW7B,KAAK6B,WAAa,EAAG,CACtC,MAAO,a,CAGX,MAAO,Q,CAOHiC,cAAcC,GAClB,IAAKA,EAAY,CACb,M,CAGJ,OACIR,EAAA,OAAKE,MAAM,UAAS,cAAa,QAC5BzD,KAAKkE,mBAAmBH,G,CAK7BG,mBAAmBH,GACvB,IAAKA,EAAY,CACb,M,CAGJ,OACIR,EAAA,gBAAcY,MAAOJ,EAAYK,QAASpE,KAAKwC,mB,CAI/CwB,oBAAoBC,GACxB,IAAKA,EAAa,CACd,M,CAGJ,MAAME,EAAQE,EAAUC,IAAI,mBAAoBtE,KAAKuE,UAErD,OACIhB,EAAA,OAAKE,MAAM,WACNzD,KAAKwE,6BACNjB,EAAA,qBACIE,MAAM,iBACNgB,KAAK,WACLN,MAAOA,EACPC,QAASpE,KAAKiC,YAAW,gBACVjC,KAAK0C,a,CAM5B8B,6BACJ,IAAKxE,KAAK6B,SAAW7B,KAAK6B,WAAa,EAAG,CACtC,M,CAGJ,OACI0B,EAAA,OAAKmB,MAAM,KAAKzD,OAAO,KAAK0D,QAAQ,aAChCpB,EAAA,UAAQqB,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAKC,KAAK,uBACpCxB,EAAA,QACIE,MAAM,QACNuB,EAAE,yDACFC,OAAO,sB"}