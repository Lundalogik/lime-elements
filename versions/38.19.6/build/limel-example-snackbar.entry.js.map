{"version":3,"names":["SnackbarExample","this","handleShowSnackbar","isOpen","handleHideSnackbar","console","log","render","h","label","onClick","open","message","onHide"],"sources":["./src/components/snackbar/examples/snackbar.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n *\n * Snackbars should not necessarily require a deliberate action from the user to dismiss them.\n * This is why the component has a default `timeout` and will disappear even if the user\n * does not interact with it.\n *\n * As you see in this example, there is no `timeout` specified.\n * Therefore the snackbar will automatically disappear after a few seconds.\n *\n * :::important\n * Make sure to set a proper timeout, based on the length of the text.\n * An average user must be able to read the full message within the given\n * time!\n * :::\n */\n@Component({\n    tag: 'limel-example-snackbar',\n    shadow: true,\n})\nexport class SnackbarExample {\n    @State()\n    private isOpen: boolean = false;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show snackbar\"\n                onClick={this.handleShowSnackbar}\n            />,\n            <limel-snackbar\n                open={this.isOpen}\n                message=\"Quick scan started. It takes a couple of minutesâ€¦\"\n                onHide={this.handleHideSnackbar}\n            />,\n        ];\n    }\n\n    private handleShowSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private handleHideSnackbar = () => {\n        this.isOpen = false;\n        console.log('The scan is still going on in the background.');\n    };\n}\n"],"mappings":"qDAsBaA,EAAe,M,yBAkBhBC,KAAAC,mBAAqB,KACzBD,KAAKE,OAAS,IAAI,EAGdF,KAAAG,mBAAqB,KACzBH,KAAKE,OAAS,MACdE,QAAQC,IAAI,gDAAgD,E,YAtBtC,K,CAEnBC,SACH,MAAO,CACHC,EAAA,gBACIC,MAAM,gBACNC,QAAST,KAAKC,qBAElBM,EAAA,kBACIG,KAAMV,KAAKE,OACXS,QAAQ,oDACRC,OAAQZ,KAAKG,qB"}