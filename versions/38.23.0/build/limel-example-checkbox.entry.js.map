{"version":3,"names":["checkboxCss","CheckboxExample","this","handleChange","event","value","detail","indeterminate","eventPrinter","writeEvent","setDisabled","stopPropagation","disabled","setRequired","required","setInvalid","invalid","setChecked","setIndeterminate","setReadonly","readonly","render","h","label","id","checked","onChange","ref","el"],"sources":["./src/components/checkbox/examples/checkbox.scss?tag=limel-example-checkbox&encapsulation=shadow","./src/components/checkbox/examples/checkbox.tsx"],"sourcesContent":[":host(limel-example-checkbox) {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n","import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-checkbox',\n    shadow: true,\n    styleUrl: 'checkbox.scss',\n})\nexport class CheckboxExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private required: boolean = false;\n\n    @State()\n    private value: boolean = false;\n\n    @State()\n    private indeterminate: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    @State()\n    private invalid: boolean = false;\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public render() {\n        return [\n            <limel-checkbox\n                disabled={this.disabled}\n                label=\"Subscribe to email newsletters\"\n                id=\"1\"\n                checked={this.value}\n                indeterminate={this.indeterminate}\n                required={this.required}\n                invalid={this.invalid}\n                onChange={this.handleChange}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Checked\"\n                    onChange={this.setChecked}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.indeterminate}\n                    label=\"Indeterminate\"\n                    onChange={this.setIndeterminate}\n                />\n            </limel-example-controls>,\n            <limel-example-value label=\"Checked\" value={this.value} />,\n            <limel-example-value\n                label=\"Indeterminate\"\n                value={this.indeterminate}\n            />,\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<boolean>) => {\n        this.value = event.detail;\n\n        // The only way a user can interact with the checkbox is to check it or\n        // uncheck it. The indeterminate state can only be set programmatically\n        // and will always be unset when the user interacts with the checkbox.\n        // Therefore, we must set indeterminate to `false` here.\n        this.indeterminate = false;\n\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setIndeterminate = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.indeterminate = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"],"mappings":"+CAAA,MAAMA,EAAc,6E,MCOPC,EAAe,M,yBA6EhBC,KAAAC,aAAgBC,IACpBF,KAAKG,MAAQD,EAAME,OAMnBJ,KAAKK,cAAgB,MAErBL,KAAKM,aAAaC,WAAWL,EAAM,EAG/BF,KAAAQ,YAAeN,IACnBA,EAAMO,kBACNT,KAAKU,SAAWR,EAAME,MAAM,EAGxBJ,KAAAW,YAAeT,IACnBA,EAAMO,kBACNT,KAAKY,SAAWV,EAAME,MAAM,EAGxBJ,KAAAa,WAAcX,IAClBA,EAAMO,kBACNT,KAAKc,QAAUZ,EAAME,MAAM,EAGvBJ,KAAAe,WAAcb,IAClBA,EAAMO,kBACNT,KAAKG,MAAQD,EAAME,MAAM,EAGrBJ,KAAAgB,iBAAoBd,IACxBA,EAAMO,kBACNT,KAAKK,cAAgBH,EAAME,MAAM,EAG7BJ,KAAAiB,YAAef,IACnBA,EAAMO,kBACNT,KAAKkB,SAAWhB,EAAME,MAAM,E,cAlHJ,M,cAGA,M,WAGH,M,mBAGQ,M,cAGL,M,aAGD,K,CAIpBe,SACH,MAAO,CACHC,EAAA,kBACIV,SAAUV,KAAKU,SACfW,MAAM,iCACNC,GAAG,IACHC,QAASvB,KAAKG,MACdE,cAAeL,KAAKK,cACpBO,SAAUZ,KAAKY,SACfE,QAASd,KAAKc,QACdU,SAAUxB,KAAKC,aACfiB,SAAUlB,KAAKkB,WAEnBE,EAAA,8BACIA,EAAA,kBACIG,QAASvB,KAAKU,SACdW,MAAM,WACNG,SAAUxB,KAAKQ,cAEnBY,EAAA,kBACIG,QAASvB,KAAKY,SACdS,MAAM,WACNG,SAAUxB,KAAKW,cAEnBS,EAAA,kBACIG,QAASvB,KAAKc,QACdO,MAAM,UACNG,SAAUxB,KAAKa,aAEnBO,EAAA,kBACIG,QAASvB,KAAKG,MACdkB,MAAM,UACNG,SAAUxB,KAAKe,aAEnBK,EAAA,kBACIG,QAASvB,KAAKkB,SACdG,MAAM,WACNG,SAAUxB,KAAKiB,cAEnBG,EAAA,kBACIG,QAASvB,KAAKK,cACdgB,MAAM,gBACNG,SAAUxB,KAAKgB,oBAGvBI,EAAA,uBAAqBC,MAAM,UAAUlB,MAAOH,KAAKG,QACjDiB,EAAA,uBACIC,MAAM,gBACNlB,MAAOH,KAAKK,gBAEhBe,EAAA,+BACIK,IAAMC,GAAQ1B,KAAKM,aAAeoB,I"}