{"version":3,"names":["textEditorCustomTriggersCss","TextEditorCustomTriggersExample","constructor","hostRef","this","insertModeButtons","id","title","selected","selectionIndex","handleKeyPress","event","capturedKeys","ESCAPE","ARROW_UP","ARROW_DOWN","ENTER","TAB","includes","key","stopPropagation","preventDefault","moveSelection","selectedItem","items","find","item","insertItem","close","emit","direction","increment","numberOfItems","length","map","currentItem","index","Object","assign","renderPicker","isPickerOpen","filter","text","toLowerCase","inputText","dropdownZIndex","getComputedStyle","host","getPropertyValue","h","containerStyle","containerId","portalId","visible","openDirection","inheritParentWidth","anchor","textEditorElement","renderList","style","padding","onChange","handleListChange","type","handleTriggerStart","triggerState","triggerFunction","detail","textEditor","handleTriggerStop","handleTriggerChange","value","handleChange","handleInsertModeChange","insertMode","insert","node","tagName","attributes","icon","children","createRandomString","handleClick","bind","watchOpen","setupEventHandlers","componentWillLoad","addEventListener","capture","removeEventListener","render","display","ref","el","customElements","triggers","onTriggerStart","onTriggerStop","onTriggerChange","class","label","element","target","clickedInside","portalContains"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.scss?tag=limel-example-text-editor-triggers&encapsulation=shadow","./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["limel-button-group {\n    min-width: 8rem;\n}\n\nlimel-example-controls {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.mode {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.value {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-portal {\n    width: auto;\n}\n","import {\n    Button,\n    LimelListCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\nimport {\n    Component,\n    h,\n    State,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from 'src/util/random-string';\nimport { portalContains } from '../../portal/contains';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    TAB,\n} from '../../../util/keycodes';\nimport { TextEditor, TriggerEventDetail } from '../text-editor.types';\n\n/**\n * Custom triggers\n *\n * A trigger is a character or sequence of characters that if typed in the text editor\n * will initiate a trigger session. The session is initialized with a `triggerStart`\n * event. Subsequent characters written after the trigger sequence will be sent in a\n * `triggerChange` event. When the focus is removed from the trigger a `triggerStop`\n * event will be sent.\n *\n * The `triggerStart` event contains a `TextEditorInserter` object containing functions\n * to manipulate the state of the text editor around the trigger. Using any of the\n * supplied methods will effectivly replace the trigger content in the text editor with\n * the content of choice.\n *\n * In this example we pass either a text or a `limel-chip` representing some chosen user\n * in a mention like situation.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n    styleUrl: 'text-editor-custom-triggers.scss',\n})\nexport class TextEditorCustomTriggersExample {\n    constructor() {\n        this.portalId = createRandomString();\n        this.handleClick = this.handleClick.bind(this);\n    }\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private inputText: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private textEditorElement: HTMLElement;\n\n    @State()\n    private insertMode: 'text' | 'chip' = 'text';\n\n    @State()\n    private items: Array<ListItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf', selected: true },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    /**\n     * Emits an event when the component is closing\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n    ];\n\n    private portalId: string;\n    private selectionIndex: number = 0;\n\n    private triggerFunction?: TextEditor;\n\n    @Watch('isPickerOpen')\n    protected watchOpen() {\n        this.setupEventHandlers();\n    }\n\n    public componentWillLoad() {\n        this.setupEventHandlers();\n    }\n\n    private setupEventHandlers() {\n        if (this.isPickerOpen) {\n            this.host.addEventListener('click', this.handleClick, {\n                capture: true,\n            });\n            this.host.addEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        } else {\n            this.host.removeEventListener('click', this.handleClick, {\n                capture: true,\n            });\n            this.host.removeEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        }\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        const capturedKeys = [ESCAPE, ARROW_UP, ARROW_DOWN, ENTER, TAB];\n        if (capturedKeys.includes(event.key)) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if (event.key === ARROW_DOWN || event.key === ARROW_UP) {\n            this.moveSelection(event.key);\n        }\n\n        if (event.key === ENTER || event.key === TAB) {\n            const selectedItem: ListItem | undefined = this.items.find(\n                (item) => item.selected,\n            );\n\n            if (selectedItem) {\n                this.insertItem(selectedItem);\n            }\n        }\n\n        if (event.key === ESCAPE) {\n            this.close.emit();\n        }\n    };\n\n    private moveSelection = (\n        direction: typeof ARROW_UP | typeof ARROW_DOWN,\n    ) => {\n        const increment = direction === ARROW_DOWN ? 1 : -1;\n        const numberOfItems = this.items.length;\n        this.selectionIndex =\n            (this.selectionIndex + increment + numberOfItems) % numberOfItems;\n\n        this.items = this.items.map((currentItem, index) => {\n            currentItem.selected = index === this.selectionIndex;\n\n            return { ...currentItem };\n        });\n    };\n\n    public render() {\n        return [\n            <limel-text-editor\n                style={{ display: 'block' }}\n                ref={(el) => (this.textEditorElement = el)}\n                value={this.value}\n                customElements={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                Insert mode:\n                <limel-button-group\n                    class=\"mode\"\n                    value={this.insertModeButtons}\n                    onChange={this.handleInsertModeChange}\n                />\n                <div class=\"value\">\n                    <limel-example-value\n                        label=\"Action\"\n                        value={this.triggerState}\n                    />\n                    <limel-example-value\n                        label=\"Tag value\"\n                        value={this.inputText}\n                    />\n                </div>\n            </limel-example-controls>,\n            this.renderPicker(),\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private renderPicker = () => {\n        if (!this.isPickerOpen) {\n            return;\n        }\n\n        const items = this.items.filter((item: ListItem<number>) =>\n            item.text.toLowerCase().includes(this.inputText),\n        );\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index',\n        );\n\n        return [\n            <limel-portal\n                containerStyle={{\n                    'background-color': 'rgb(var(--contrast-100))',\n                    'border-radius': '0.5rem',\n                    'box-shadow': 'var(--shadow-depth-16)',\n                    'z-index': dropdownZIndex,\n                }}\n                containerId={this.portalId}\n                visible={this.isPickerOpen}\n                openDirection=\"bottom-start\"\n                inheritParentWidth={true}\n                anchor={this.textEditorElement}\n            >\n                {this.renderList(items)}\n            </limel-portal>,\n        ];\n    };\n\n    private renderList = (items: Array<ListItem<number>>) => {\n        if (items.length === 0) {\n            return (\n                <div style={{ padding: '0.5rem' }}>\n                    Couldn't find. Not a hero yet! ðŸ¥²\n                </div>\n            );\n        }\n\n        return (\n            <limel-list\n                items={items}\n                onChange={this.handleListChange}\n                type=\"selectable\"\n            />\n        );\n    };\n\n    private handleTriggerStart = (event: CustomEvent<TriggerEventDetail>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail.textEditor;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.inputText = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<TriggerEventDetail>) => {\n        this.inputText = event.detail.value.toLowerCase();\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleClick(event: MouseEvent) {\n        const element: HTMLElement = event.target as HTMLElement;\n        const clickedInside = portalContains(this.host, element);\n        if (this.isPickerOpen && !clickedInside) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.isPickerOpen = false;\n            this.close.emit();\n        }\n    }\n\n    private handleListChange = (\n        event: LimelListCustomEvent<ListItem<number>>,\n    ) => {\n        if (event.detail.selected) {\n            this.insertItem(event.detail);\n        }\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n\n    private insertItem = (item: ListItem) => {\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insert('@' + item.text);\n\n            return;\n        }\n\n        this.triggerFunction.insert({\n            node: {\n                tagName: 'limel-chip',\n                attributes: {\n                    icon: item.icon,\n                    text: item.text,\n                },\n            },\n            children: [\"I'm a teapot\"],\n        });\n    };\n}\n"],"mappings":"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"}