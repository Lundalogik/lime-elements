{"version":3,"names":["textEditorCustomTriggersCss","TextEditorCustomTriggersExample","constructor","hostRef","this","insertModeButtons","id","title","selected","handleKeyPress","event","capturedKeys","ESCAPE","ARROW_UP","ARROW_DOWN","ENTER","TAB","includes","key","stopPropagation","preventDefault","moveSelection","selectedItem","visibleItems","find","item","insertItem","close","emit","isPickerOpen","direction","increment","numberOfItems","length","currentSelectionIndex","findIndex","selectionIndex","removeAllSelections","setSelection","items","map","currentItem","Object","assign","index","renderPicker","dropdownZIndex","getComputedStyle","host","getPropertyValue","h","containerStyle","containerId","portalId","visible","openDirection","inheritParentWidth","anchor","textEditorElement","renderList","style","padding","onChange","handleListChange","type","handleTriggerStart","triggerState","triggerFunction","detail","textEditor","handleTriggerStop","inputText","handleTriggerChange","value","toLowerCase","handleChange","handleInsertModeChange","insertMode","insert","text","node","tagName","attributes","icon","children","createRandomString","handleClick","bind","watchOpen","setupEventHandlers","watchInputText","filter","componentWillLoad","addEventListener","capture","removeEventListener","render","display","ref","el","customElements","triggers","onTriggerStart","onTriggerStop","onTriggerChange","class","label","element","target","clickedInside","portalContains"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.scss?tag=limel-example-text-editor-triggers&encapsulation=shadow","./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["limel-button-group {\n    min-width: 8rem;\n}\n\nlimel-example-controls {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.mode {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.value {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-portal {\n    width: auto;\n}\n","import {\n    Button,\n    LimelListCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\nimport {\n    Component,\n    h,\n    State,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from 'src/util/random-string';\nimport { portalContains } from '../../portal/contains';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    TAB,\n} from '../../../util/keycodes';\nimport { TextEditor, TriggerEventDetail } from '../text-editor.types';\n\n/**\n * Custom triggers\n *\n * A trigger is a character or sequence of characters that if typed in the text editor\n * will initiate a trigger session. The session is initialized with a `triggerStart`\n * event. Subsequent characters written after the trigger sequence will be sent in a\n * `triggerChange` event. When the focus is removed from the trigger a `triggerStop`\n * event will be sent.\n *\n * The `triggerStart` event contains a `TextEditorInserter` object containing functions\n * to manipulate the state of the text editor around the trigger. Using any of the\n * supplied methods will effectivly replace the trigger content in the text editor with\n * the content of choice.\n *\n * In this example we pass either a text or a `limel-chip` representing some chosen user\n * in a mention like situation.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n    styleUrl: 'text-editor-custom-triggers.scss',\n})\nexport class TextEditorCustomTriggersExample {\n    constructor() {\n        this.portalId = createRandomString();\n        this.handleClick = this.handleClick.bind(this);\n    }\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private inputText: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private textEditorElement: HTMLElement;\n\n    @State()\n    private insertMode: 'text' | 'chip' = 'text';\n\n    @State()\n    private items: Array<ListItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf', selected: true },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    @State()\n    private visibleItems: Array<ListItem<number>>;\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    /**\n     * Emits an event when the component is closing\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n    ];\n\n    private portalId: string;\n\n    private triggerFunction?: TextEditor;\n\n    @Watch('isPickerOpen')\n    protected watchOpen() {\n        this.setupEventHandlers();\n    }\n\n    @Watch('inputText')\n    protected watchInputText() {\n        if (this.isPickerOpen) {\n            this.visibleItems = this.items.filter((item: ListItem<number>) =>\n                item.text.toLowerCase().includes(this.inputText),\n            );\n        }\n    }\n    public componentWillLoad() {\n        this.visibleItems = this.items;\n        this.setupEventHandlers();\n    }\n\n    private setupEventHandlers() {\n        if (this.isPickerOpen) {\n            this.host.addEventListener('click', this.handleClick, {\n                capture: true,\n            });\n            this.host.addEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        } else {\n            this.host.removeEventListener('click', this.handleClick, {\n                capture: true,\n            });\n            this.host.removeEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        }\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        const capturedKeys = [ESCAPE, ARROW_UP, ARROW_DOWN, ENTER, TAB];\n        if (capturedKeys.includes(event.key)) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if (event.key === ARROW_DOWN || event.key === ARROW_UP) {\n            this.moveSelection(event.key);\n        }\n\n        if (event.key === ENTER || event.key === TAB) {\n            const selectedItem: ListItem | undefined = this.visibleItems.find(\n                (item) => item.selected,\n            );\n\n            if (selectedItem) {\n                this.insertItem(selectedItem);\n            }\n        }\n\n        if (event.key === ESCAPE) {\n            this.close.emit();\n            this.isPickerOpen = false;\n            // @TODO: close the trigger session\n        }\n    };\n\n    private moveSelection = (\n        direction: typeof ARROW_UP | typeof ARROW_DOWN,\n    ) => {\n        const increment = direction === ARROW_DOWN ? 1 : -1;\n        const numberOfItems = this.visibleItems.length;\n        const currentSelectionIndex = this.visibleItems.findIndex(\n            (item) => item.selected,\n        );\n\n        const selectionIndex =\n            (currentSelectionIndex + increment + numberOfItems) % numberOfItems;\n\n        this.removeAllSelections();\n        this.setSelection(selectionIndex);\n    };\n\n    private removeAllSelections = () => {\n        this.items = this.items.map((currentItem) => {\n            currentItem.selected = false;\n\n            return { ...currentItem };\n        });\n    };\n\n    private setSelection = (selectionIndex: number) => {\n        this.visibleItems = this.visibleItems.map((currentItem, index) => {\n            currentItem.selected = index === selectionIndex;\n\n            return { ...currentItem };\n        });\n    };\n\n    public render() {\n        return [\n            <limel-text-editor\n                style={{ display: 'block' }}\n                ref={(el) => (this.textEditorElement = el)}\n                value={this.value}\n                customElements={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                Insert mode:\n                <limel-button-group\n                    class=\"mode\"\n                    value={this.insertModeButtons}\n                    onChange={this.handleInsertModeChange}\n                />\n                <div class=\"value\">\n                    <limel-example-value\n                        label=\"Action\"\n                        value={this.triggerState}\n                    />\n                    <limel-example-value\n                        label=\"Tag value\"\n                        value={this.inputText}\n                    />\n                </div>\n            </limel-example-controls>,\n            this.renderPicker(),\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private renderPicker = () => {\n        if (!this.isPickerOpen) {\n            return;\n        }\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index',\n        );\n\n        return [\n            <limel-portal\n                containerStyle={{\n                    'background-color': 'rgb(var(--contrast-100))',\n                    'border-radius': '0.5rem',\n                    'box-shadow': 'var(--shadow-depth-16)',\n                    'z-index': dropdownZIndex,\n                }}\n                containerId={this.portalId}\n                visible={this.isPickerOpen}\n                openDirection=\"bottom-start\"\n                inheritParentWidth={true}\n                anchor={this.textEditorElement}\n            >\n                {this.renderList(this.visibleItems)}\n            </limel-portal>,\n        ];\n    };\n\n    private renderList = (items: Array<ListItem<number>>) => {\n        if (items.length === 0) {\n            return (\n                <div style={{ padding: '0.5rem' }}>\n                    Couldn't find. Not a hero yet! 🥲\n                </div>\n            );\n        }\n\n        return (\n            <limel-list\n                items={items}\n                onChange={this.handleListChange}\n                type=\"selectable\"\n            />\n        );\n    };\n\n    private handleTriggerStart = (event: CustomEvent<TriggerEventDetail>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail.textEditor;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.inputText = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<TriggerEventDetail>) => {\n        this.inputText = event.detail.value.toLowerCase();\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleClick(event: MouseEvent) {\n        const element: HTMLElement = event.target as HTMLElement;\n        const clickedInside = portalContains(this.host, element);\n        if (this.isPickerOpen && !clickedInside) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.isPickerOpen = false;\n            this.close.emit();\n        }\n    }\n\n    private handleListChange = (\n        event: LimelListCustomEvent<ListItem<number>>,\n    ) => {\n        if (event.detail.selected) {\n            this.insertItem(event.detail);\n        }\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n\n    private insertItem = (item: ListItem) => {\n        this.removeAllSelections();\n        this.visibleItems = this.items;\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insert('@' + item.text);\n\n            return;\n        }\n\n        this.triggerFunction.insert({\n            node: {\n                tagName: 'limel-chip',\n                attributes: {\n                    icon: item.icon,\n                    text: item.text,\n                },\n            },\n            children: [\"I'm a teapot\"],\n        });\n    };\n}\n"],"mappings":"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"}