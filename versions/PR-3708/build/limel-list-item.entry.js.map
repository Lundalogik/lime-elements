{"version":3,"names":["RadioButtonTemplate","props","h","class","checked","disabled","type","id","onChange","htmlFor","label","listItemCss","ListItemComponent","constructor","hostRef","this","renderLabel","labelId","text","renderDescription","secondaryText","descriptionId","renderIcon","iconName","getIconName","icon","iconColor","iconBackgroundColor","title","color","backgroundColor","iconProps","name","style","badge","badgeIcon","size","iconSize","Object","assign","renderPrimaryComponent","primary","primaryComponent","PrimaryComponent","renderImage","image","src","alt","loading","renderActionMenu","actions","length","stableActions","getStableActions","items","openDirection","slot","actionMenuLabel","renderRadioButton","selected","renderCheckbox","CheckboxTemplate","translate","get","language","createRandomString","render","ariaProps","undefined","Host","role","getHostRole","_a","memoizedActions"],"sources":["./src/components/radio-button-group/radio-button.template.tsx","./src/components/list-item/list-item.scss?tag=limel-list-item","./src/components/list-item/list-item.tsx"],"sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\n\n/**\n * Radio Button Template\n *\n * This is a low-level template component that renders individual radio button elements\n * using Material Design Components (MDC) styling and structure. It's used internally\n * by the list component to render radio buttons when `type=\"radio\"` is specified.\n *\n * ## Usage in the Library\n *\n * This template is primarily used by:\n * - `limel-list` component when `type=\"radio\"`\n * - `limel-radio-button-group` component (which wraps `limel-list`)\n *\n * ## Why This Exists\n *\n * While we have `limel-radio-button-group` for most use cases, this template provides\n * the actual radio button HTML structure with proper MDC classes and accessibility\n * attributes. It ensures consistent styling and behavior across all radio button\n * implementations in the library.\n *\n * ## Design Philosophy\n *\n * This follows the principle that individual radio buttons should not be standalone\n * components, as a single radio button is never useful in a UI. Instead, this template\n * is used to build groups of radio buttons through higher-level components.\n *\n * @internal\n */\ninterface RadioButtonTemplateProps {\n    disabled?: boolean;\n    id: string;\n    checked?: boolean;\n    onChange?: (event: Event) => void;\n    label?: string;\n}\n\nexport const RadioButtonTemplate: FunctionalComponent<\n    RadioButtonTemplateProps\n> = (props) => {\n    return (\n        <div\n            class={{\n                'boolean-input': true,\n                'radio-button': true,\n                checked: props.checked,\n                disabled: props.disabled,\n            }}\n        >\n            <input\n                type=\"radio\"\n                id={props.id}\n                checked={props.checked}\n                disabled={props.disabled}\n                onChange={props.onChange}\n            />\n            <div class=\"box\" />\n            <label class=\"boolean-input-label\" htmlFor={props.id}>\n                {props.label}\n            </label>\n        </div>\n    );\n};\n","/**\n * @prop --notification-badge-text-color: (Publicly documented in `limel-menu` too) Defines the text color of notification badges. Defaults to `--color-white`.\n * @prop --notification-badge-background-color: (Publicly documented in `limel-menu` too) Defines the background color of notification badges. Defaults to `--color-red-default`.\n * @prop --limel-list-item-menu-order: Defines the order of the menu, within the list item's flexbox. Defaults to `3`.\n */\n\n@use '../../style/mixins';\n@forward '../checkbox/checkbox.scss';\n@forward '../radio-button-group/radio-button.scss';\n\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\nlimel-list-item {\n    min-height: 2.5rem;\n    @include mixins.visualize-keyboard-focus();\n\n    transition: background-color 0.6s ease;\n    position: relative;\n    isolation: isolate;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    padding: 0 1rem;\n    background-color: rgb(var(--contrast-100));\n\n    &:hover {\n        z-index: 1;\n        transition: background-color 0.2s ease;\n        border-radius: 0.5rem;\n    }\n\n    &:focus,\n    &:focus-visible,\n    &:active {\n        z-index: 1;\n        border-radius: 0.5rem;\n    }\n\n    &:first-of-type {\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n    }\n\n    &:last-of-type {\n        border-bottom-left-radius: 0.5rem;\n        border-bottom-right-radius: 0.5rem;\n    }\n\n    &:not([disabled]):not([disabled='true']) {\n        cursor: pointer;\n    }\n\n    &[disabled]:not([disabled='false']) {\n        cursor: not-allowed;\n    }\n}\n\nlimel-list-item[disabled]:not([disabled='false']) {\n    cursor: not-allowed;\n\n    .text,\n    limel-icon,\n    img,\n    .boolean-input {\n        opacity: 0.4;\n    }\n}\n\nlimel-list-item:not([disabled]):not([disabled='true']):hover,\nlimel-list-item:not([disabled]):not([disabled='true']):focus-visible {\n    background-color: rgb(var(--contrast-400));\n}\n\nlimel-list-item[type='option'] {\n    &:before {\n        transition: background-color 0.6s ease;\n        content: '';\n        position: absolute;\n        inset: 0;\n\n        opacity: 0.2;\n        border-radius: 0.5rem;\n    }\n\n    &[selected]:not([selected='false']) {\n        &:before {\n            transition: background-color 0.2s ease;\n            background-color: var(--limel-theme-primary-color);\n        }\n    }\n}\n\nlimel-list-item {\n    .text {\n        flex-grow: 1;\n        min-width: 0;\n\n        display: flex;\n        flex-direction: column;\n\n        padding: 0.5rem 0;\n\n        color: var(--limel-theme-text-primary-on-background-color);\n    }\n\n    .label {\n        @include mixins.truncate-text();\n\n        font-size: var(--limel-theme-default-font-size);\n        line-height: 1rem;\n    }\n\n    .description {\n        @include mixins.truncate-text-on-line(var(--maxLinesSecondaryText));\n        line-height: 1rem;\n        font-size: var(--limel-theme-default-small-font-size);\n        opacity: 0.6;\n    }\n\n    limel-icon {\n        color: var(--limel-theme-text-secondary-on-background-color);\n        flex-shrink: 0;\n        margin-left: -0.5rem;\n\n        &:has(+ img) {\n            margin-left: 0;\n            position: absolute;\n            top: 0.125rem;\n            left: 0.125rem;\n            padding: 0.1875rem;\n            width: 1.25rem;\n            background-color: rgb(var(--contrast-200), 0.8);\n        }\n    }\n\n    img {\n        flex-shrink: 0;\n        object-fit: cover;\n        border-radius: 50%;\n        width: 2rem;\n        height: 2rem;\n        box-shadow: 0 0 0 1px rgb(var(--contrast-800), 0.5);\n    }\n\n    limel-menu {\n        margin-right: -0.5rem;\n        // Sometimes, `primaryComponent`s in list items need to get\n        // `order: 2;` to be placed after the text. But since the default `order`\n        // of all lit item children is `0`, we need to push the menu to the far right\n        // by giving it a bigger order number. Also, by making this into a variable\n        // we can handle other edge-cases in consuming components.\n        order: var(--limel-list-item-menu-order, 3);\n    }\n}\n\nlimel-list-item {\n    &[role='menuitem'] & {\n        .label {\n            font-size: var(--limel-theme-default-small-font-size);\n        }\n    }\n}\n\n// ====================\n// Checkbox and radios\n.boolean-input {\n    width: var(--limel-boolean-input-box-size);\n    margin-left: -0.25rem;\n    &.checkbox {\n        margin-right: 0.25rem;\n    }\n\n    limel-list-item:has(limel-icon) &,\n    limel-list-item:has(img) & {\n        margin-right: -0.25rem;\n        margin-left: 0;\n        order: 2;\n    }\n}\n\n.boolean-input-label {\n    @include mixins.truncate-text();\n    opacity: 0;\n    width: var(--limel-boolean-input-box-size);\n}\n// ====================\n","import { Component, Host, Prop, h } from '@stencil/core';\nimport { getIconName } from '../icon/get-icon-props';\nimport type { IconSize } from '../icon/icon.types';\nimport { createRandomString } from '../../util/random-string';\nimport { ListItem } from './list-item.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { ListSeparator } from '../../global/shared-types/separator.types';\nimport { CheckboxTemplate } from '../checkbox/checkbox.template';\nimport { RadioButtonTemplate } from '../radio-button-group/radio-button.template';\nimport translate from '../../global/translations';\nimport { Languages } from '../date-picker/date.types';\n\n/**\n * This components displays the list item.\n * This centralizes styles and functionality, and helps reduce redundant code\n * in consumer components such as `limel-list` and `limel-menu-list`.\n *\n * :::note\n * The component has `shadow: false`. There are a few reasons for it:\n * 1. This is to improve performance, and ensure that its internal elements are\n * considered as internal parts of the consumer's DOM.\n * 2. The consumer does not need to implement the interactive styles\n * (such as `visualize-keyboard-focus` mixin) on their own. Since there is no\n * shadow DOM, our mixins can be applied directly to the `limel-list-item` elements,\n * within the component's own styles.\n * 3. Most importantly, the MDCList checks the light DOM of each list item\n * to find native inputs to decide the list mode (checkbox/radio).\n * With `shadow: true`, those inputs would be hidden inside the `limel-list-items`’s\n * shadow DOM, so MDC wouldn’t detect them and therefore throw errors, when given\n * an array index (for the items).\n * With `shadow: false`, the native `<input type=\"checkbox/radio\">` from this template\n * would be visible to MDC.\n * :::\n * @exampleComponent limel-example-list-item-basic\n * @exampleComponent limel-example-list-item-icon\n * @exampleComponent limel-example-list-item-icon-size\n * @exampleComponent limel-example-list-item-pictures\n * @exampleComponent limel-example-list-item-multiple-lines\n * @exampleComponent limel-example-list-item-interactive\n * @exampleComponent limel-example-list-item-radio\n * @exampleComponent limel-example-list-item-checkbox\n * @exampleComponent limel-example-list-item-actions\n * @exampleComponent limel-example-list-item-primary-component\n * @exampleComponent limel-example-list-item-command-text\n * @private\n */\n@Component({\n    tag: 'limel-list-item',\n    shadow: false,\n    styleUrl: 'list-item.scss',\n})\nexport class ListItemComponent implements ListItem {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * {@inheritdoc ListItem.value}\n     */\n    @Prop()\n    public value?: any;\n\n    /**\n     * {@inheritdoc ListItem.text}\n     */\n    @Prop({ reflect: true })\n    public text: string;\n\n    /**\n     * {@inheritdoc ListItem.secondaryText}\n     */\n    @Prop({ reflect: true })\n    public secondaryText?: string;\n\n    /**\n     * {@inheritdoc ListItem.disabled}\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * {@inheritdoc ListItem.icon}\n     */\n    @Prop()\n    public icon?: string | ListItem['icon'];\n\n    /**\n     * Size of the icon displayed for this item.\n     */\n    @Prop({ reflect: true })\n    public iconSize: IconSize = 'small';\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop({ reflect: true })\n    public badgeIcon = false;\n\n    /**\n     * {@inheritdoc ListItem.selected}\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * {@inheritdoc ListItem.selected}\n     */\n    @Prop()\n    public actions?: ListItem['actions'];\n\n    /**\n     * {@inheritdoc ListItem.selected}\n     */\n    @Prop()\n    public primaryComponent?: ListItem['primaryComponent'];\n\n    /**\n     * {@inheritdoc ListItem.image}\n     */\n    @Prop()\n    public image?: ListItem['image'];\n\n    /**\n     * The semantic role of the list item. This affects the ARIA role\n     * and the interaction behavior.\n     *\n     * - 'option' → selectable via click/Enter/Space, aria-selected\n     * - 'radio'/'checkbox' → selectable, aria-checked\n     * - 'menuitem'/'listitem' → activation only, no selection toggle\n     */\n    @Prop({ reflect: true })\n    public type: 'listitem' | 'menuitem' | 'option' | 'radio' | 'checkbox' =\n        'listitem';\n\n    /**\n     * Used to describe the list item for assistive technology.\n     */\n    private readonly descriptionId: string;\n\n    /**\n     * Used to label the list item for assistive technology.\n     */\n    private readonly labelId: string;\n\n    // Memoized reference for the action items to avoid unnecessary updates\n    private memoizedActions?: Array<MenuItem | ListSeparator>;\n\n    constructor() {\n        this.labelId = createRandomString();\n        this.descriptionId = createRandomString();\n    }\n\n    public render() {\n        const ariaProps: any = {\n            'aria-labelledby': this.labelId,\n            'aria-describedby': this.secondaryText\n                ? this.descriptionId\n                : undefined,\n            'aria-disabled': this.disabled ? 'true' : 'false',\n        };\n\n        // ARIA state depending on `role`/`type`\n        if (this.type === 'radio' || this.type === 'checkbox') {\n            ariaProps['aria-checked'] = this.selected ? 'true' : 'false';\n        } else if (this.type === 'option' || this.type === 'menuitem') {\n            // aria-selected for `option` (spec);\n            // also keep for `menuitem` for visual state consistency\n            ariaProps['aria-selected'] = this.selected ? 'true' : 'false';\n        }\n\n        return (\n            <Host\n                role={this.getHostRole()}\n                class={{\n                    'has-primary-component': !!this.primaryComponent?.name,\n                }}\n                {...ariaProps}\n            >\n                {this.renderRadioButton()}\n                {this.renderCheckbox()}\n                {this.renderIcon()}\n                {this.renderImage()}\n                {this.renderPrimaryComponent()}\n                <div class=\"text\">\n                    {this.renderLabel()}\n                    {this.renderDescription()}\n                </div>\n                {this.renderActionMenu(this.actions)}\n            </Host>\n        );\n    }\n\n    private renderLabel = () => {\n        return (\n            <span class=\"label\" id={this.labelId}>\n                {this.text}\n            </span>\n        );\n    };\n\n    private renderDescription = () => {\n        if (!this.secondaryText) {\n            return;\n        }\n\n        return (\n            <span class=\"description\" id={this.descriptionId}>\n                {this.secondaryText}\n            </span>\n        );\n    };\n\n    private renderIcon = () => {\n        const iconName = getIconName(this.icon);\n        if (!iconName) {\n            return;\n        }\n\n        let iconColor: string | undefined;\n        let iconBackgroundColor: string | undefined;\n        let title: string | undefined;\n\n        if (typeof this.icon === 'object') {\n            iconColor = this.icon.color;\n            iconBackgroundColor = this.icon.backgroundColor;\n            title = this.icon.title;\n        }\n\n        const iconProps = {\n            'aria-label': title,\n            'aria-hidden': title ? null : 'true',\n            name: iconName,\n            style: {\n                color: iconColor,\n                'background-color': iconBackgroundColor,\n            },\n            badge: this.badgeIcon,\n            size: this.iconSize,\n        };\n\n        return <limel-icon {...iconProps} />;\n    };\n\n    private renderPrimaryComponent = () => {\n        const primary = this.primaryComponent;\n        if (!primary?.name) {\n            return;\n        }\n\n        const PrimaryComponent: any = primary.name;\n        const props = primary.props || {};\n\n        return <PrimaryComponent {...props} />;\n    };\n\n    private renderImage = () => {\n        if (!this.image) {\n            return;\n        }\n\n        return <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />;\n    };\n\n    private renderActionMenu = (actions: Array<MenuItem | ListSeparator>) => {\n        if (!actions || actions.length === 0) {\n            return;\n        }\n\n        const stableActions = this.getStableActions(actions);\n        return (\n            <limel-menu\n                class=\"mdc-deprecated-list-item__meta\"\n                items={stableActions}\n                openDirection=\"left-start\"\n            >\n                <limel-icon-button\n                    class=\"action-menu-trigger\"\n                    slot=\"trigger\"\n                    icon=\"menu_2\"\n                    label={this.actionMenuLabel()}\n                />\n            </limel-menu>\n        );\n    };\n\n    /**\n     * Returns a stable reference for the provided actions array to avoid\n     * unnecessary re-renders of the action menu when the reference is unchanged.\n     *\n     * @param actions The actions (and separators) to display in the menu\n     * @returns The same array instance that was previously seen, if unchanged\n     */\n    private getStableActions(\n        actions: Array<MenuItem | ListSeparator>\n    ): Array<MenuItem | ListSeparator> {\n        if (this.memoizedActions === actions) {\n            return this.memoizedActions;\n        }\n        this.memoizedActions = actions;\n        return actions;\n    }\n\n    private renderRadioButton = () => {\n        if (this.type !== 'radio') {\n            return;\n        }\n\n        return (\n            <RadioButtonTemplate\n                id={`radio_${this.labelId}`}\n                checked={this.selected}\n                disabled={this.disabled}\n            />\n        );\n    };\n\n    private renderCheckbox = () => {\n        if (this.type !== 'checkbox') {\n            return;\n        }\n\n        return (\n            <CheckboxTemplate\n                id={`checkbox_${this.labelId}`}\n                checked={this.selected}\n                disabled={this.disabled}\n            />\n        );\n    };\n\n    private getHostRole(): string {\n        switch (this.type) {\n            case 'option': {\n                return 'option';\n            }\n            case 'radio': {\n                return 'radio';\n            }\n            case 'checkbox': {\n                return 'checkbox';\n            }\n            case 'menuitem': {\n                return 'menuitem';\n            }\n            default: {\n                return 'listitem';\n            }\n        }\n    }\n\n    private actionMenuLabel = (): string => {\n        return translate.get('file-viewer.more-actions', this.language);\n    };\n}\n"],"mappings":"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"}