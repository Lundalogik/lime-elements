{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../src/kompendium/markdown.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,QAAQ,MAAM,cAAc,CAAC;AACpC,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,gBAAgB,MAAM,mBAAmB,CAAC;AACjD,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,aAAa,MAAM,eAAe,CAAC;AAC1C,OAAO,GAAG,MAAM,YAAY,CAAC;AAC7B,OAAO,IAAI,MAAM,kBAAkB,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAWjD,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,IAAY,EAAE,KAAK,GAAG,EAAE;IACzD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC3B,OAAO,EAAE;aACJ,GAAG,CAAC,QAAQ,CAAC;aACb,GAAG,CAAC,WAAW,CAAC;aAChB,GAAG,CAAC,gBAAgB,CAAC;aACrB,GAAG,CAAC,eAAe,CAAC;aACpB,GAAG,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;aACnC,GAAG,CAAC,aAAa,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;aAChD,GAAG,CAAC,GAAG,CAAC;aACR,GAAG,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;aAChC,GAAG,CAAC,cAAc,CAAC;aACnB,GAAG,CAAC,IAAI,CAAC;aACT,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;YACvB,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import unified from 'unified';\nimport markdown from 'remark-parse';\nimport frontmatter from 'remark-frontmatter';\nimport parseFrontmatter from 'remark-parse-yaml';\nimport admonitions from 'remark-admonitions';\nimport remark2rehype from 'remark-rehype';\nimport raw from 'rehype-raw';\nimport html from 'rehype-stringify';\nimport { saveFrontmatter } from './markdown-frontmatter';\nimport { kompendiumCode } from './markdown-code';\nimport { typeLinks } from './markdown-typelinks';\n\nexport interface File {\n    data: {\n        frontmatter?: Record<string, any>;\n        path?: string;\n    };\n\n    toString(): string;\n}\n\nexport async function markdownToHtml(text: string, types = []): Promise<File> {\n    return new Promise((resolve) => {\n        unified()\n            .use(markdown)\n            .use(frontmatter)\n            .use(parseFrontmatter)\n            .use(saveFrontmatter)\n            .use(admonitions, { icons: 'none' })\n            .use(remark2rehype, { allowDangerousHtml: true })\n            .use(raw)\n            .use(typeLinks, { types: types })\n            .use(kompendiumCode)\n            .use(html)\n            .process(text, (_, file) => {\n                resolve(file);\n            });\n    });\n}\n"]}