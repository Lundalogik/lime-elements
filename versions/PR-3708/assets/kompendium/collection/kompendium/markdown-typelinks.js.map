{"version":3,"file":"markdown-typelinks.js","sourceRoot":"","sources":["../../src/kompendium/markdown-typelinks.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAEzC,MAAM,UAAU,SAAS,CAAC,UAAe,EAAE;IACvC,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,WAAW,GACb,CAAC,QAAkB,EAAE,EAAE,EAAE,CACzB,CAAC,IAAI,EAAO,EAAE;IACV,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,OAAO,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEN,MAAM,WAAW,GACb,CAAC,QAAkB,EAAE,EAAE,EAAE,CACzB,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE;;IAChB,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;QACvB,OAAO,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAED,IAAI,MAAM,CAAC,OAAO,KAAK,MAAM,EAAE,CAAC;QAC5B,OAAO,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAED,IAAI,CAAA,MAAA,MAAM,CAAC,MAAM,0CAAE,OAAO,MAAK,KAAK,EAAE,CAAC;QACnC,OAAO,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAED,OAAO,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC,CAAC;AAEN,MAAM,UAAU,QAAQ,CAAC,IAAS,EAAE,QAAkB,EAAE;IACpD,OAAO,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,UAAU,GACZ,CAAC,QAAkB,EAAE,EAAE,EAAE,CACzB,CAAC,IAAY,EAAE,EAAE;IACb,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACxB,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC;AAEN,SAAS,cAAc,CAAC,IAAY;IAChC,OAAO;QACH,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,IAAI;KACd,CAAC;AACN,CAAC;AAED,SAAS,cAAc,CAAC,IAAY;IAChC,OAAO;QACH,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,GAAG;QACZ,UAAU,EAAE;YACR,IAAI,EAAE,UAAU,IAAI,EAAE;SACzB;QACD,QAAQ,EAAE;YACN;gBACI,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,IAAI;aACd;SACJ;KACJ,CAAC;AACN,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,UAAkB;IAC9C,MAAM,OAAO,GAAG,aAAa,CAAC;IAC9B,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACxC,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,IAAI,aAAa,GAAG,UAAU,CAAC;IAC/B,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;QAC3B,MAAM,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YACZ,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/B,CAAC;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["import flatMap from 'unist-util-flatmap';\n\nexport function typeLinks(options: any = {}): (tree) => any {\n    return transformer(options.types);\n}\n\nconst transformer =\n    (types: string[] = []) =>\n    (tree): any => {\n        if (types.length === 0) {\n            return tree;\n        }\n\n        return flatMap(tree, mapCodeNode(types));\n    };\n\nconst mapCodeNode =\n    (types: string[] = []) =>\n    (node, _, parent) => {\n        if (node.type !== 'text') {\n            return [node];\n        }\n\n        if (parent.tagName !== 'code') {\n            return [node];\n        }\n\n        if (parent.parent?.tagName === 'pre') {\n            return [node];\n        }\n\n        return wrapText(node, types);\n    };\n\nexport function wrapText(node: any, types: string[] = []) {\n    return splitTypeString(node.value).map(createNode(types));\n}\n\nconst createNode =\n    (types: string[] = []) =>\n    (type: string) => {\n        if (!types.includes(type)) {\n            return createTextNode(type);\n        }\n\n        return createLinkNode(type);\n    };\n\nfunction createTextNode(text: string) {\n    return {\n        type: 'text',\n        value: text,\n    };\n}\n\nfunction createLinkNode(type: string) {\n    return {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n            href: `#/type/${type}`,\n        },\n        children: [\n            {\n                type: 'text',\n                value: type,\n            },\n        ],\n    };\n}\n\nexport function splitTypeString(typeString: string): string[] {\n    const pattern = /(\\b\\w+\\b)+/g;\n    const types = typeString.match(pattern);\n    const result: string[] = [];\n\n    let currentString = typeString;\n    types.forEach((type: string) => {\n        const index = currentString.indexOf(type);\n        if (index > 0) {\n            result.push(currentString.substr(0, index));\n        }\n\n        result.push(type);\n        currentString = currentString.substr(index + type.length);\n    });\n\n    if (currentString.length > 0) {\n        result.push(currentString);\n    }\n\n    return result;\n}\n"]}