{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/kompendium/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonDocsComponent, JsonDocsProp } from '@stencil/core/internal';\nimport {\n    ClassDescription,\n    InterfaceDescription,\n    TypeDescription,\n} from '../types';\nimport { isExample } from './menu';\nimport negate from 'lodash/negate';\nimport startCase from 'lodash/startCase';\nimport zipObject from 'lodash/zipObject';\nimport pick from 'lodash/pick';\n\nconst ARRAY_PATTERN = /^(\\w+)(<\\w+>)?\\[\\]$|^Array<(.+)>$/;\nconst ENUM_PATTERN = /[\"'](\\w+)[\"']\\s?\\|?/g;\nconst ID_PATTERN = /^number \\| string$|string \\| number$/g;\nconst TS_UTILITY_PATTERN = /(Partial|Required|Readonly|Array)<(.+?)>/g;\n\n/**\n * Create schemas for the components that describe their interface\n * @param {JsonDocsComponent[]} components the components\n * @param {TypeDescription[]} types type definitions\n * @returns {*} list of schemas for the components\n */\nexport function createSchemas(\n    components: JsonDocsComponent[],\n    types: TypeDescription[],\n): Array<Record<string, any>> {\n    const componentSchemas =\n        components?.filter(negate(isExample)).map(createSchema(types)) || [];\n    const classSchemas = types?.filter(isClass)?.map(createSchema(types)) || [];\n\n    return [...componentSchemas, ...classSchemas];\n}\n\nconst createSchema =\n    (types: TypeDescription[]) =>\n    (object: JsonDocsComponent | ClassDescription) => {\n        const definitions = createDefinitions(types);\n        const properties = createProps(object.props, definitions);\n\n        const schema: any = {\n            type: 'object',\n            $id: getSchemaId(object),\n            properties: properties,\n        };\n\n        const data = JSON.stringify(properties);\n        const definitionKeys = Object.keys(definitions).filter(\n            isReferenceUsed(data),\n        );\n\n        if (definitionKeys.length > 0) {\n            schema.definitions = pick(definitions, definitionKeys);\n        }\n\n        return schema;\n    };\n\nfunction getSchemaId(object: JsonDocsComponent | ClassDescription): string {\n    if (isClass(object)) {\n        return object.name;\n    }\n\n    return object.tag;\n}\n\nfunction createDefinitions(types: TypeDescription[]): Record<string, any> {\n    const interfaces: InterfaceDescription[] = types.filter(\n        (type) => type.type === 'interface',\n    ) as any;\n    const keys = interfaces.map((i) => i.name);\n    const schemas = interfaces.map((i) => {\n        return {\n            type: 'object',\n            properties: createProps(i.props as JsonDocsProp[], {}),\n        };\n    });\n\n    return zipObject(keys, schemas);\n}\n\nfunction createProps(\n    props: Array<Partial<JsonDocsProp>>,\n    definitions: Record<string, any>,\n) {\n    const keys = props?.map((prop) => prop.name) || [];\n    const schemas = props?.map(createPropSchema(definitions)) || [];\n\n    return zipObject(keys, schemas);\n}\n\nconst createPropSchema =\n    (definitions: Record<string, any>) => (prop: JsonDocsProp) => {\n        const schema: any = {\n            type: getSchemaType(prop.type),\n            title: startCase(prop.name),\n            description: prop.docs,\n        };\n\n        if (prop.default) {\n            schema.default = getDefaultValue(prop.default, schema.type);\n        }\n\n        if (schema.type === 'array') {\n            schema.items = getSchemaItems(prop.type, definitions);\n        }\n\n        if (schema.type === 'object') {\n            const ref = getSchemaPropertiesRef(prop.type, definitions);\n\n            if (ref) {\n                schema.$ref = ref;\n            } else {\n                schema.additionalProperties = true;\n            }\n        }\n\n        if (schema.type === 'string') {\n            const oneOf = getOneOf(prop.type);\n\n            if (oneOf) {\n                schema.oneOf = oneOf;\n            }\n        }\n\n        return schema;\n    };\n\nfunction getDefaultValue(value: any, type: string) {\n    if (type === 'boolean') {\n        return value === 'true';\n    }\n\n    if (type === 'number') {\n        return Number(value);\n    }\n\n    if (type !== 'string') {\n        return;\n    }\n\n    if (value === 'null') {\n        return;\n    }\n\n    return value;\n}\n\nfunction getSchemaType(propType: string) {\n    if (['string', 'number', 'boolean'].includes(propType)) {\n        return propType;\n    }\n\n    if (propType.match(ARRAY_PATTERN)) {\n        return 'array';\n    }\n\n    if (propType.match(ENUM_PATTERN) || propType.match(ID_PATTERN)) {\n        return 'string';\n    }\n\n    return 'object';\n}\n\nfunction getSchemaItems(propType: string, definitions: Record<string, any>) {\n    const result = propType.match(ARRAY_PATTERN);\n    const type = getSchemaType(result[1] || result[3]);\n\n    const items: any = {\n        type: type,\n    };\n\n    if (type === 'object') {\n        const ref = getSchemaPropertiesRef(result[1] || result[3], definitions);\n\n        if (ref) {\n            items.$ref = ref;\n        } else {\n            items.additionalProperties = true;\n        }\n    }\n\n    return items;\n}\n\nfunction getSchemaPropertiesRef(\n    propType: string,\n    definitions: Record<string, any>,\n): string {\n    const definition = Object.keys(definitions).find((key) => key === propType);\n    if (definition) {\n        return '#/definitions/' + definition;\n    }\n\n    const type = propType.replace(TS_UTILITY_PATTERN, '$2');\n    if (type === propType) {\n        return;\n    }\n\n    return getSchemaPropertiesRef(type, definitions);\n}\n\nfunction getOneOf(propType: string) {\n    if (!ENUM_PATTERN.test(propType)) {\n        return;\n    }\n\n    const oneOf = propType.split('|').map((token) => {\n        const value = token.trim().replace(/[\"']/g, '');\n\n        return {\n            type: 'string',\n            const: value,\n            title: value,\n        };\n    });\n\n    if (!oneOf.length) {\n        return;\n    }\n\n    return oneOf;\n}\n\nconst isReferenceUsed = (data: string) => (name: string) => {\n    const ref = '#/definitions/' + name;\n\n    return data.includes(ref);\n};\n\nfunction isClass(type: any): type is ClassDescription {\n    return type.type === 'class';\n}\n"]}