{"version":3,"file":"basic.js","sourceRoot":"","sources":["../../../../src/kompendium/test/fixtures/basic.ts"],"names":[],"mappings":";;;;;;AAOA;;;;GAIG;AACH,6DAA6D;AAC7D,MAAM,eAAe,GAAG,CAAC,OAAwB,EAAkB,EAAE;IACjE,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;AACpB,CAAC,CAAC;AAoCF;;GAEG;AACH,MAAM,CAAN,IAAY,KAeX;AAfD,WAAY,KAAK;IACb;;OAEG;IACH,oBAAW,CAAA;IAEX;;OAEG;IACH,wBAAe,CAAA;IAEf;;OAEG;IACH,sBAAa,CAAA;AACjB,CAAC,EAfW,KAAK,KAAL,KAAK,QAehB;AAED;;;GAGG;AAEI,IAAM,GAAG,GAAT,MAAM,GAAG;CAef,CAAA;AAfY,GAAG;IADf,eAAe,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;GACnB,GAAG,CAef","sourcesContent":["type DecoratorConfig = {\n    /**\n     * This is the name\n     */\n    name: string;\n};\n\n/**\n * Use this!\n * @param {DecoratorConfig} _config how to use it\n * @returns {ClassDecorator} the decorator\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CustomDecorator = (_config: DecoratorConfig): ClassDecorator => {\n    return () => {};\n};\n\n/**\n * This is Foo\n *\n * Foo is good\n * @foo foobar\n */\nexport interface Foo {\n    /**\n     * foo is a string\n     * @deprecated this is not used\n     */\n    foo: string;\n\n    /**\n     * set if bar\n     */\n    bar?: boolean;\n\n    /**\n     * Do something\n     *\n     * From string to number\n     * @param {string} args the string\n     * @returns {number} the number\n     * @foobar baz\n     */\n    baz: (args: string) => number;\n}\n\n/**\n * The bar\n */\nexport type Bar = Record<string, any>;\n\n/**\n * The colors\n */\nexport enum Color {\n    /**\n     * The red color\n     */\n    Red = 'red',\n\n    /**\n     * Looks like green\n     */\n    Green = 'green',\n\n    /**\n     * Almost blue\n     */\n    Blue = 'blue',\n}\n\n/**\n * The Zap class\n * @deprecated\n */\n@CustomDecorator({ name: 'gg' })\nexport class Zap implements Foo {\n    /**\n     * @inheritdoc\n     */\n    foo: string;\n\n    /**\n     * @inheritdoc\n     */\n    bar?: boolean;\n\n    /**\n     * @inheritdoc\n     */\n    baz: (args: string) => number;\n}\n"]}