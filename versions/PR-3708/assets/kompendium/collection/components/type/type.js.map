{"version":3,"file":"type.js","sourceRoot":"","sources":["../../../src/components/type/type.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAG1D,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAOxC,MAAM,OAAO,IAAI;IAeN,mBAAmB;QACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED,MAAM;QACF,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACb,OAAO;QACX,CAAC;QAED,MAAM,IAAI,GAAQ,IAAI,CAAC,IAAI,CAAC;QAC5B,MAAM,YAAY,GAAqC;YACnD,SAAS,EAAE,SAAS;YACpB,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,SAAS;SACnB,CAAC;QACF,MAAM,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnD,OAAO,CACH,eAAS,KAAK,EAAC,MAAM;YACjB,eAAS,KAAK,EAAC,MAAM;gBACjB,EAAC,aAAa,IAAC,IAAI,EAAE,IAAI,GAAI,CACvB,CACJ,CACb,CAAC;IACN,CAAC;IAEO,QAAQ;QACZ,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CACxB,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CACjD,CAAC;QAEF,IAAI,IAAI,EAAE,CAAC;YACP,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC;IACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Prop, State } from '@stencil/core';\nimport { TypeDescription, TypeDescriptionType } from '../../types';\nimport { MatchResults } from '../router/router-utils';\nimport { Interface } from './templates/interface';\nimport { Alias } from './templates/alias';\nimport { Enum } from './templates/enum';\n\n@Component({\n    tag: 'kompendium-type',\n    shadow: true,\n    styleUrl: '../component/component.scss',\n})\nexport class Type {\n    /**\n     */\n    @Prop()\n    public types: TypeDescription[];\n\n    /**\n     * Matched route parameters\n     */\n    @Prop()\n    public match: MatchResults;\n\n    @State()\n    private type: TypeDescription;\n\n    public componentWillRender(): void {\n        this.findType();\n    }\n\n    render(): HTMLElement {\n        if (!this.type) {\n            return;\n        }\n\n        const type: any = this.type;\n        const componentMap: Record<TypeDescriptionType, any> = {\n            interface: Interface,\n            alias: Alias,\n            enum: Enum,\n            class: Interface,\n        };\n        const TypeComponent = componentMap[this.type.type];\n\n        return (\n            <article class=\"type\">\n                <section class=\"docs\">\n                    <TypeComponent type={type} />\n                </section>\n            </article>\n        );\n    }\n\n    private findType() {\n        const type = this.types.find(\n            (type) => type.name === this.match.params.name,\n        );\n\n        if (type) {\n            this.type = type;\n        }\n    }\n}\n"]}