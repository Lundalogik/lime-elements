{"version":3,"file":"darkmode-switch.js","sourceRoot":"","sources":["../../../src/components/darkmode-switch/darkmode-switch.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, State } from '@stencil/core';\nimport { Theme, THEME_EVENT_NAME } from './types';\n\nconst DEFAULT: Theme = 'system-default';\nconst LIGHT: Theme = 'force-light';\nconst DARK: Theme = 'force-dark';\nconst CHECKBOX_LIGHT = false;\nconst CHECKBOX_DARK = true;\nconst LOCALSTORAGE_KEY = 'kompendium-theme';\n\n/**\n * @private\n */\n@Component({\n    tag: 'kompendium-darkmode-switch',\n    styleUrl: 'darkmode-switch.scss',\n    shadow: true,\n})\nexport class DarkmodeSwitch {\n    @State()\n    private theme: Theme = 'system-default';\n\n    @State()\n    private systemSettingIsDark: boolean;\n\n    private checkbox: HTMLInputElement;\n    private colorSchemeMediaQuery: MediaQueryList;\n\n    constructor() {\n        const colorSchemeMediaQueryFallback = {\n            addEventListener: () => {},\n            matches: false,\n        } as unknown as MediaQueryList;\n\n        this.colorSchemeMediaQuery =\n            (window.matchMedia &&\n                window.matchMedia('(prefers-color-scheme: dark)')) ||\n            colorSchemeMediaQueryFallback;\n    }\n\n    public connectedCallback() {\n        this.colorSchemeMediaQuery.addEventListener(\n            'change',\n            this.handleSystemThemeChange,\n        );\n    }\n\n    public disconnectedCallback() {\n        this.colorSchemeMediaQuery.removeEventListener(\n            'change',\n            this.handleSystemThemeChange,\n        );\n    }\n\n    public componentWillLoad(): void {\n        this.systemSettingIsDark = this.colorSchemeMediaQuery.matches;\n\n        this.setTheme(\n            (localStorage.getItem(LOCALSTORAGE_KEY) || DEFAULT) as Theme,\n        );\n    }\n\n    public render(): HTMLElement {\n        const props = {\n            checked:\n                this.theme === DARK ||\n                (this.theme === DEFAULT && this.systemSettingIsDark),\n        };\n\n        return (\n            <div class=\"mode-toggle\">\n                <input\n                    type=\"checkbox\"\n                    onChange={this.handleThemeChange}\n                    ref={this.getSelectRef}\n                    {...props}\n                />\n                <div class=\"mode-visualization\">\n                    <div class=\"circle\"></div>\n                    <div class=\"ray one\"></div>\n                    <div class=\"ray two\"></div>\n                    <div class=\"ray three\"></div>\n                    <div class=\"ray four\"></div>\n                </div>\n            </div>\n        );\n    }\n\n    private getSelectRef = (element: HTMLInputElement) => {\n        this.checkbox = element;\n    };\n\n    private handleSystemThemeChange = (e: MediaQueryListEvent) => {\n        this.systemSettingIsDark = !!e.matches;\n        if (this.theme === DEFAULT) {\n            this.checkbox.checked = !this.checkbox.checked;\n        }\n    };\n\n    private handleThemeChange = () => {\n        const checkboxValue = !!this.checkbox.checked;\n\n        let newTheme: Theme = DEFAULT;\n\n        if (this.systemSettingIsDark) {\n            if (checkboxValue === CHECKBOX_LIGHT) {\n                newTheme = LIGHT;\n            }\n        } else {\n            if (checkboxValue === CHECKBOX_DARK) {\n                newTheme = DARK;\n            }\n        }\n\n        this.setTheme(newTheme);\n        document.dispatchEvent(\n            new CustomEvent<Theme>(THEME_EVENT_NAME, { detail: newTheme }),\n        );\n    };\n\n    private setTheme = (value: Theme) => {\n        this.theme = value;\n        document.querySelector('html').dataset.theme = value;\n        localStorage.setItem(LOCALSTORAGE_KEY, value);\n    };\n}\n"]}