{"version":3,"file":"debug.js","sourceRoot":"","sources":["../../../src/components/debug/debug.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAanD,MAAM,OAAO,eAAe;IAJ5B;QAuBI;;;WAGG;QAEI,wBAAmB,GAAkB,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;KAiC1D;IA/BU,MAAM;QACT,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;QACnC,MAAM,SAAS,GAAG,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAEhD,OAAO,CACH,gEAAS,KAAK,EAAC,WAAW;YACtB,gEAAS,KAAK,EAAC,YAAY,IACtB,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAC1B,CACJ,CACb,CAAC;IACN,CAAC;IAEO,eAAe,CAAC,SAA4B;QAChD,MAAM,gBAAgB,GAAG,SAAS,CAAC,GAAG,CAAC;QACvC,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QACvE,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,cAAc,CAAC,GAAG,CAAC,CAAC;QACtE,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC;QACzC,MAAM,KAAK,GAAG;YACV,MAAM,EAAE,MAAM;YACd,GAAG,OAAO,CAAC,gBAAgB,CAAC;SAC/B,CAAC;QAEF,OAAO,CACH,WAAK,KAAK,EAAC,WAAW;YAClB,WAAK,KAAK,EAAC,qBAAqB;gBAC5B,EAAC,gBAAgB,OAAK,KAAK,GAAI,CAC7B,CACJ,CACT,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ;AAED,SAAS,aAAa,CAAC,GAAW,EAAE,IAAc;IAC9C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;AAC1D,CAAC;AAED,MAAM,SAAS,GACX,CAAC,OAA0B,EAAE,EAAE,CAAC,CAAC,SAA4B,EAAE,EAAE;IAC7D,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ;SACtB,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACjC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC;AAEN,MAAM,KAAK,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,GAAgB,EAAE,EAAE;IACjD,OAAO,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,GAAgB,EAAE,EAAE;IACnD,OAAO,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import { Component, h, Prop } from '@stencil/core';\nimport {\n    JsonDocs,\n    JsonDocsComponent,\n    JsonDocsTag,\n} from '@stencil/core/internal';\nimport { MatchResults } from '../router/router-utils';\nimport { PropsFactory } from '../playground/playground.types';\n\n@Component({\n    tag: 'kompendium-debug',\n    shadow: true,\n})\nexport class KompendiumDebug {\n    /**\n     * The generated documentation data\n     */\n    @Prop()\n    public docs: JsonDocs;\n\n    /**\n     * Component schemas\n     */\n    @Prop()\n    public schemas: Array<Record<string, any>>;\n\n    /**\n     * Matched route parameters\n     */\n    @Prop()\n    public match: MatchResults;\n\n    /**\n     * Factory for creating props for example components\n     * @returns {Record<string, unknown>} props\n     */\n    @Prop()\n    public examplePropsFactory?: PropsFactory = () => ({});\n\n    public render(): HTMLElement {\n        const tag = this.match.params.name;\n        const component = findComponent(tag, this.docs);\n\n        return (\n            <article class=\"component\">\n                <section class=\"docs debug\">\n                    {this.renderComponent(component)}\n                </section>\n            </article>\n        );\n    }\n\n    private renderComponent(component: JsonDocsComponent) {\n        const ExampleComponent = component.tag;\n        const ownerComponent = this.docs.components.find(isOwnerOf(component));\n        const schema = this.schemas.find((s) => s.$id === ownerComponent.tag);\n        const factory = this.examplePropsFactory;\n        const props = {\n            schema: schema,\n            ...factory(ExampleComponent),\n        };\n\n        return (\n            <div class=\"show-case\">\n                <div class=\"show-case_component\">\n                    <ExampleComponent {...props} />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction findComponent(tag: string, docs: JsonDocs) {\n    return docs.components.find((doc) => doc.tag === tag);\n}\n\nconst isOwnerOf =\n    (example: JsonDocsComponent) => (component: JsonDocsComponent) => {\n        return !!component.docsTags\n            .filter(isTag('exampleComponent'))\n            .find(hasText(example.tag));\n    };\n\nconst isTag = (name: string) => (tag: JsonDocsTag) => {\n    return tag.name === name;\n};\n\nconst hasText = (name: string) => (tag: JsonDocsTag) => {\n    return tag.text === name;\n};\n"]}