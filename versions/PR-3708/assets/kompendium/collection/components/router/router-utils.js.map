{"version":3,"file":"router-utils.js","sourceRoot":"","sources":["../../../src/components/router/router-utils.ts"],"names":[],"mappings":"AAiBA;;;;GAIG;AACH,MAAM,UAAU,UAAU,CAAC,OAAe;IAItC,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,qDAAqD;IACrD,iEAAiE;IACjE,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IACvD,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QAC3B,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,+BAA+B;IAC/B,6EAA6E;IAC7E,6DAA6D;IAC7D,MAAM,YAAY,GAAG,OAAO;SACvB,OAAO,CAAC,aAAa,EAAE,yBAAyB,CAAC,CAAC,kCAAkC;SACpF,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,2BAA2B;SACjD,OAAO,CAAC,6BAA6B,EAAE,iBAAiB,CAAC,CAAC,yBAAyB;SACnF,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,iBAAiB;IAErD,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,YAAY,OAAO,CAAC,CAAC;IAElD,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;AAC5C,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CAAC,IAAY,EAAE,OAAe;IACpD,IAAI,CAAC,OAAO,EAAE,CAAC;QACX,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEhC,IAAI,CAAC,KAAK,EAAE,CAAC;QACT,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,WAAW,GAA2B,EAAE,CAAC;IAC/C,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QAC5B,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;AACnC,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW;IACvB,OAAO,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;AAC7C,CAAC","sourcesContent":["/**\n * Match results from route matching\n */\nexport interface MatchResults {\n    params: Record<string, string>;\n}\n\n/**\n * Route configuration\n */\nexport interface RouteConfig {\n    url?: string;\n    component?: string;\n    componentProps?: Record<string, any>;\n    exact?: boolean;\n}\n\n/**\n * Parse route URL pattern into regex and parameter names\n * @param {string} pattern - Route pattern with optional parameters (e.g., \"/component/:name\")\n * @returns {{regex: RegExp, params: string[]}} Regex and parameter names\n */\nexport function parseRoute(pattern: string): {\n    regex: RegExp;\n    params: string[];\n} {\n    const params: string[] = [];\n\n    // First, collect all parameters in order they appear\n    // Match both required (:param) and optional (:param?) parameters\n    const paramMatches = pattern.match(/:(\\w+)\\??/g) || [];\n    paramMatches.forEach((match) => {\n        const paramName = match.replace(/^:|[?]/g, '');\n        params.push(paramName);\n    });\n\n    // Then build the regex pattern\n    // Process optional params with their slashes first (before escaping slashes)\n    // This makes both the slash AND the parameter value optional\n    const regexPattern = pattern\n        .replace(/\\/:(\\w+)\\?/g, '___OPTIONAL_PARAM_$1___') // Mark optional params with slash\n        .replace(/\\//g, '\\\\/') // Escape remaining slashes\n        .replace(/___OPTIONAL_PARAM_(\\w+)___/g, '(?:\\\\/([^/]*))?') // Optional slash + param\n        .replace(/:(\\w+)/g, '([^/]+)'); // Required param\n\n    const regex = new RegExp(`^${regexPattern}\\\\/?$`);\n\n    return { regex: regex, params: params };\n}\n\n/**\n * Match a path against a route pattern\n * @param {string} path - Current path to match\n * @param {string} pattern - Route pattern to match against\n * @returns {MatchResults | null} Match results with parameters or null if no match\n */\nexport function matchRoute(path: string, pattern: string): MatchResults | null {\n    if (!pattern) {\n        return { params: {} };\n    }\n\n    const { regex, params } = parseRoute(pattern);\n    const match = path.match(regex);\n\n    if (!match) {\n        return null;\n    }\n\n    const matchParams: Record<string, string> = {};\n    params.forEach((param, index) => {\n        matchParams[param] = match[index + 1] || '';\n    });\n\n    return { params: matchParams };\n}\n\n/**\n * Get current hash path\n * @returns {string} Current hash path from URL\n */\nexport function getHashPath(): string {\n    return location.hash.substring(1) || '/';\n}\n"]}