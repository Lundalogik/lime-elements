{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n    JsonDocs,\n    JsonDocsTag,\n    JsonDocsProp,\n    JsonDocsMethod,\n    JsonDocMethodParameter,\n} from '@stencil/core/internal';\n\nexport interface KompendiumConfig {\n    /**\n     * Output path\n     */\n    path: string;\n\n    /**\n     * www\n     */\n    publicPath: string;\n\n    /**\n     * Title to display in the header\n     */\n    title?: string;\n\n    /**\n     * Logo to display of the title in the header\n     */\n    logo?: string;\n\n    typeRoot: string;\n\n    guides: Guide[];\n}\n\nexport type Guide = string | { name: string; children: Guide[] };\n\nexport interface MenuItem {\n    title?: string;\n    path: string;\n    icon?: string;\n    children?: MenuItem[];\n}\n\nexport interface KompendiumData {\n    title: string;\n    logo?: string;\n    docs: JsonDocs;\n    menu: MenuItem[];\n    readme?: string;\n    guides: KompendiumGuide[];\n    types: TypeDescription[];\n    schemas: Array<Record<string, any>>;\n    index: {\n        documents: KompendiumDocument[];\n        data: any;\n    };\n}\n\nexport interface KompendiumDocument {\n    tags?: string[];\n    title: string;\n    path: string;\n    text: string | string[];\n    props?: Array<{\n        name: string;\n        text: string;\n        tags: string[];\n        type: string;\n    }>;\n    events?: Array<{\n        name: string;\n        text: string;\n        tags: string[];\n        type: string;\n    }>;\n}\n\nexport interface KompendiumGuide {\n    dirPath?: string;\n    fileName?: string;\n    filePath?: string;\n    data: Record<string, any>;\n    content: string;\n}\n\nexport type TypeDescriptionType = 'interface' | 'alias' | 'enum' | 'class';\n\nexport interface TypeDescription {\n    type: TypeDescriptionType;\n    name: string;\n    docs: string;\n    docsTags: JsonDocsTag[];\n    sources: string[];\n}\n\nexport interface InterfaceDescription extends TypeDescription {\n    type: 'interface';\n    typeParams: TypeParam[];\n    props: Array<Partial<JsonDocsProp>>;\n    methods: MethodDescription[];\n}\n\nexport interface ClassDescription extends TypeDescription {\n    type: 'class';\n    typeParams: TypeParam[];\n    props: Array<Partial<JsonDocsProp>>;\n    methods: MethodDescription[];\n    decorators: DecoratorDescription[];\n}\n\nexport interface TypeParam {\n    name: string;\n}\n\nexport interface AliasDescription extends TypeDescription {\n    type: 'alias';\n    alias: string;\n}\n\nexport interface EnumDescription extends TypeDescription {\n    type: 'enum';\n    members: EnumMember[];\n}\n\nexport interface EnumMember {\n    name: string;\n    docs: string;\n    docsTags: JsonDocsTag[];\n    value: string;\n}\n\nexport interface MethodDescription extends Partial<JsonDocsMethod> {\n    parameters: ParameterDescription[];\n}\n\nexport interface ParameterDescription extends JsonDocMethodParameter {\n    default: string;\n    optional: boolean;\n}\n\nexport interface DecoratorDescription {\n    name: string;\n    arguments: any;\n}\n"]}