{"version":3,"names":["tableCss","TableExampleDefaultSorted","this","tableData","data","sortedColumns","addUnit","unit","value","componentWillLoad","columns","title","field","formatter","capitalize","horizontalAlign","column","direction","render","h","sorting"],"sources":["./src/components/table/examples/table.scss?tag=limel-example-table-default-sorted&encapsulation=shadow","./src/components/table/examples/table-default-sorted.tsx"],"sourcesContent":[":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n","import { Component, h, State } from '@stencil/core';\nimport { Column, ColumnSorter } from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Default sorted columns\n *\n * In this example, the table is sorted on *two* columns. Primary sorting is\n * done on the \"Eggs per clutch\" column, and secondary sorting is done on the\n * \"Name\" column. The result is that within each \"group\" of birds that have the\n * same number of eggs per clutch, the birds are sorted by name.\n */\n@Component({\n    tag: 'limel-example-table-default-sorted',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleDefaultSorted {\n    @State()\n    private columns: Array<Column<Bird>> = [];\n\n    private tableData: Bird[] = data;\n    private sortedColumns: ColumnSorter[] = [];\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                horizontalAlign: 'right',\n            },\n            {\n                title: 'Origin',\n                field: 'origin',\n                horizontalAlign: 'right',\n            },\n        ];\n\n        this.sortedColumns = [\n            { column: this.columns[0], direction: 'ASC' },\n            { column: this.columns[4], direction: 'ASC' },\n        ];\n    }\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                sorting={this.sortedColumns}\n            />\n        );\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n}\n"],"mappings":"qUAAA,MAAMA,EAAW,gD,MCkBJC,EAAyB,M,yBAI1BC,KAAAC,UAAoBC,EACpBF,KAAAG,cAAgC,GAwChCH,KAAAI,QAAWC,GAAkBC,GAC1B,GAAGA,KAASD,I,aA5CgB,E,CAKhCE,oBACHP,KAAKQ,QAAU,CACX,CAAEC,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,iBAAkBC,MAAO,iBAClC,CACID,MAAO,WACPC,MAAO,WACPC,UAAWX,KAAKI,QAAQ,OAE5B,CAAEK,MAAO,YAAaC,MAAO,OAAQC,UAAWC,GAChD,CACIH,MAAO,kBACPC,MAAO,OACPG,gBAAiB,SAErB,CACIJ,MAAO,SACPC,MAAO,SACPG,gBAAiB,UAIzBb,KAAKG,cAAgB,CACjB,CAAEW,OAAQd,KAAKQ,QAAQ,GAAIO,UAAW,OACtC,CAAED,OAAQd,KAAKQ,QAAQ,GAAIO,UAAW,O,CAI9CC,SACI,OACIC,EAAA,eACIf,KAAMF,KAAKC,UACXO,QAASR,KAAKQ,QACdU,QAASlB,KAAKG,e"}