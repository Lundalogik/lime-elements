{"version":3,"names":["partition","createAggregator","result","value","key","push","fileDropzoneCss","FileDropzone","this","renderOnDragLayout","disabled","hasFileToDrop","h","class","name","renderText","renderHelperText","text","helperText","handleDrop","event","stopPropagation","preventDefault","files","dataTransfer","fileInfos","map","createFileInfo","acceptedFileInfos","rejectedFileInfos","file","isTypeAccepted","accept","length","filesSelected","emit","filesRejected","handleDragOver","handleDragLeave","render","Host","onDrop","onDragOver","onDragLeave","FileInput","fileInputId","createRandomString","handleClick","triggerFileDialog","handleKeyUp","code","handleFileChange","fileInput","componentDidLoad","element","shadowRoot","getElementById","onClick","onKeyUp","onKeyDown","handleKeyDown","hidden","id","onChange","type","multiple","click"],"sources":["./node_modules/lodash-es/partition.js","./src/components/file-dropzone/file-dropzone.scss?tag=limel-file-dropzone&encapsulation=shadow","./src/components/file-dropzone/file-dropzone.tsx","./src/components/file-input/file-input.tsx"],"sourcesContent":["import createAggregator from './_createAggregator.js';\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nexport default partition;\n",":host(limel-file-dropzone) {\n    display: block;\n    position: relative;\n}\n\n.has-file-to-drop {\n    animation: display-drop-zone 0.6s ease forwards;\n\n    box-sizing: border-box;\n    isolation: isolate;\n    z-index: 1;\n    position: absolute;\n    inset: 0.25rem;\n\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 0.5rem;\n\n    color: rgb(var(--contrast-700));\n\n    border: 0.125rem dashed rgb(var(--color-cyan-light));\n    border-radius: 0.75rem;\n}\n\n.text-helpertext {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.icon {\n    width: clamp(2rem, 5vh, 7rem);\n}\n\n.text {\n    font-size: clamp(1rem, 2vh, 1.75rem);\n}\n\n.helper-text {\n    font-size: clamp(0.75rem, 1.5vh, 1rem);\n}\n\n@keyframes display-drop-zone {\n    0% {\n        background-color: rgb(var(--contrast-1100), 0);\n        backdrop-filter: blur(0);\n        -webkit-backdrop-filter: blur(0);\n        scale: 0.9;\n        opacity: 0;\n    }\n\n    50% {\n        scale: 1;\n        opacity: 1;\n    }\n\n    100% {\n        background-color: rgb(var(--contrast-1100), 0.8);\n        backdrop-filter: blur(0.25rem);\n        -webkit-backdrop-filter: blur(0.25rem);\n    }\n}\n","import {\n    Component,\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo, isTypeAccepted } from '../../util/files';\nimport { partition } from 'lodash-es';\n\n/**\n * This component enables you to seamlessly convert any region of the user interface into\n * a file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n *\n * The file dropzone can then be used to allow end-users to upload files\n * by dragging and dropping them into the specified area, for example to trigger an upload process.\n *\n * After receiving the files, the component emits a `filesSelected` event. For unsupported\n * files (specified with the `accept` prop) a `filesRejected` event will be emitted.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-dropzone\n * @exampleComponent limel-example-file-dropzone-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzone {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable the file dropzone.\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Is displayed when the user is dragging a file over the dropzone.\n     * A suitable text could for instance be \"Drop your files here\".\n     */\n    @Prop()\n    public text: string;\n\n    /**\n     * Is displayed to provide supplementary information to the end users,\n     * for instance, which filetypes or file sizes are accepted.\n     */\n    @Prop()\n    public helperText?: string = '';\n\n    /**\n     * Sets to true when there is a file to drop\n     */\n    @State()\n    private hasFileToDrop: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    /**\n     * Emitted when files are selected but do not conform with the `accept` property specifications.\n     * This can happen when the file types or formats of the selected files are not among the ones allowed by the dropzone,\n     * as defined by the `accept` property.\n     *\n     * @see `accept` for details on how to specify acceptable file types.\n     */\n    @Event()\n    filesRejected: EventEmitter<FileInfo[]>;\n\n    public render() {\n        return (\n            <Host\n                onDrop={this.handleDrop}\n                onDragOver={this.handleDragOver}\n                onDragLeave={this.handleDragLeave}\n            >\n                <slot />\n                {this.renderOnDragLayout()}\n            </Host>\n        );\n    }\n\n    private renderOnDragLayout = () => {\n        if (this.disabled || !this.hasFileToDrop) {\n            return;\n        }\n\n        return (\n            <div class=\"has-file-to-drop\">\n                <limel-icon class=\"icon\" name=\"upload_2\" />\n                <div class=\"text-helpertext\">\n                    {this.renderText()}\n                    {this.renderHelperText()}\n                </div>\n            </div>\n        );\n    };\n\n    private renderText = () => {\n        if (!this.text) {\n            return;\n        }\n\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return <span class=\"helper-text\">{this.helperText}</span>;\n    };\n\n    private handleDrop = (event: DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.hasFileToDrop = false;\n\n        if (this.disabled) {\n            return;\n        }\n\n        const files: File[] = [...event.dataTransfer.files];\n        const fileInfos: FileInfo[] = files.map(createFileInfo);\n\n        const [acceptedFileInfos, rejectedFileInfos] = partition(\n            fileInfos,\n            (file) => isTypeAccepted(file, this.accept)\n        );\n\n        if (acceptedFileInfos.length > 0) {\n            this.filesSelected.emit(acceptedFileInfos);\n        }\n\n        if (rejectedFileInfos.length > 0) {\n            this.filesRejected.emit(rejectedFileInfos);\n        }\n    };\n\n    private handleDragOver = (event: DragEvent) => {\n        this.hasFileToDrop = true;\n        event.preventDefault();\n    };\n\n    private handleDragLeave = (event: DragEvent) => {\n        this.hasFileToDrop = false;\n        event.preventDefault();\n    };\n}\n","import {\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Component,\n    Element,\n    Prop,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo } from '../../util/files';\n\n/**\n * This component enables you to seamlessly transform any other clickable component that\n * generates a `click` event into a file input selector.\n *\n * To use it, just wrap any clickable component inside the `limel-file-input` component.\n * Upon reception of the `click` event this component will open the native file selection\n * dialog.\n *\n * After receiving the files, the component emits a `filesSelected` event.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-input\n * @exampleComponent limel-example-file-input-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-input',\n    shadow: true,\n})\nexport class FileInput {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable file input selection.\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to enable selection of multiple files\n     */\n    @Prop({ reflect: true })\n    public multiple: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    @Element()\n    private element: HTMLLimelFileElement;\n\n    private fileInput: HTMLInputElement;\n    private fileInputId = createRandomString();\n\n    public componentDidLoad() {\n        // eslint-disable-next-line unicorn/prefer-query-selector\n        this.fileInput = this.element.shadowRoot.getElementById(\n            this.fileInputId\n        ) as HTMLInputElement;\n    }\n\n    public render() {\n        return (\n            <Host\n                onClick={this.handleClick}\n                onKeyUp={this.handleKeyUp}\n                onKeyDown={this.handleKeyDown}\n            >\n                <input\n                    hidden={true}\n                    id={this.fileInputId}\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept={this.accept}\n                    disabled={this.disabled}\n                    multiple={this.multiple}\n                />\n                <slot />\n            </Host>\n        );\n    }\n\n    private handleClick = (event: Event) => {\n        if (this.disabled) {\n            event.stopPropagation();\n            event.preventDefault();\n\n            return;\n        }\n\n        this.triggerFileDialog();\n\n        event.stopPropagation();\n    };\n\n    private handleKeyUp = (event: KeyboardEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (event.code === 'Enter') {\n            this.triggerFileDialog();\n        }\n    };\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (\n            event.code === 'Tab' ||\n            event.code === 'Backspace' ||\n            event.code === 'Enter'\n        ) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    private triggerFileDialog() {\n        this.fileInput.click();\n    }\n\n    private handleFileChange = (event: Event) => {\n        const files = [...this.fileInput.files];\n        if (files.length > 0) {\n            event.stopPropagation();\n            this.filesSelected.emit(files.map(createFileInfo));\n            this.fileInput.value = '';\n        }\n    };\n}\n"],"mappings":"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"}