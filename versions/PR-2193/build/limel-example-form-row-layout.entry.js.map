{"version":3,"names":["FormField","props","children","length","h","class","JSON","stringify","layout","classNames","colSpan","style","getGridStyle","slot","name","rowSpan","schema","description","type","properties","info","title","lime","language","default","help","value","oneOf","const","date","icon","notification","readMoreLink","href","target","text","frequency","minimum","maximum","multipleOf","personalNumber","FormRowLayoutExample","this","handleFormChange","event","formData","detail","render","onChange"],"sources":["./src/components/form/form-field.tsx","./src/components/form/examples/row-layout-schema.ts","./src/components/form/examples/row-layout.tsx"],"sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\nimport { GridLayoutOptions, LimeSchemaOptions } from './form.types';\n\ntype FormFieldProps = {\n    name: string;\n} & LimeSchemaOptions;\n\nexport const FormField: FunctionalComponent<FormFieldProps> = (\n    props,\n    children\n) => {\n    if (children.length === 0) {\n        return (\n            <div\n                class=\"form-group field\"\n                data-lime={JSON.stringify(props)}\n            ></div>\n        );\n    }\n\n    const layout = props.layout as GridLayoutOptions;\n\n    let classNames = 'form-group field field-custom';\n\n    if (layout?.colSpan) {\n        classNames += ` limel-form-layout-colspan--${layout.colSpan}`;\n    }\n\n    const style = getGridStyle(layout);\n\n    return (\n        <div\n            class={classNames}\n            slot={props.name}\n            style={style}\n            data-lime={JSON.stringify(props)}\n        >\n            {children}\n        </div>\n    );\n};\n\nfunction getGridStyle(layout: GridLayoutOptions | undefined) {\n    const rowSpan = layout?.rowSpan;\n    if (rowSpan) {\n        return {\n            'grid-row': `span ${rowSpan}`,\n            'min-height': `calc(var(--min-height-of-one-row) * ${rowSpan})`,\n        };\n    }\n}\n","import { FormSchema } from '../form.types';\n\ntype Language = 'sv' | 'ua' | 'en' | 'am' | 'fa';\n\nexport interface RowLayoutFormData {\n    info?: {\n        language?: Language;\n        date?: string;\n        notification?: boolean;\n        frequency?: number;\n        personalNumber?: number;\n    };\n}\n\nexport const schema: FormSchema<RowLayoutFormData> = {\n    description: 'This form has the row layout',\n    type: 'object',\n    properties: {\n        info: {\n            title: 'Preferences',\n            description:\n                'These settings will not affect how others see the data. These are only for you.',\n            type: 'object',\n            lime: {\n                layout: {\n                    type: 'row',\n                },\n            },\n            properties: {\n                language: {\n                    type: 'string',\n                    title: 'Language',\n                    default: 'ua',\n                    lime: {\n                        help: {\n                            value: 'This will affect both the language of the user interface of our app, and also the language of the emails we send you.',\n                        },\n                    },\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'sv',\n                            title: 'Swedish',\n                        },\n                        {\n                            type: 'string',\n                            const: 'ua',\n                            title: 'Ukrainian',\n                        },\n                        {\n                            type: 'string',\n                            const: 'en',\n                            title: 'English',\n                        },\n                        {\n                            type: 'string',\n                            const: 'am',\n                            title: 'Amharic',\n                        },\n                        {\n                            type: 'string',\n                            const: 'fa',\n                            title: 'Farsi',\n                        },\n                    ],\n                },\n                date: {\n                    type: 'string',\n                    title: 'Date format',\n                    default: 'yyyy-mm-dd',\n                    lime: {\n                        layout: {\n                            icon: 'calendar',\n                        },\n                    },\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'yyyy-mm-dd',\n                            title: '1999-01-31',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yyyy.dd.mm',\n                            title: '1999.01.31',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yyyy/dd/mm',\n                            title: '1999/01/31',\n                        },\n                    ],\n                },\n                notification: {\n                    type: 'boolean',\n                    title: 'Receive summary notifications via email',\n                    lime: {\n                        help: {\n                            value: 'You can read more about how we handle our communications with you in our Terms & Privacy Policies.',\n                            readMoreLink: {\n                                href: 'https://www.lime-technologies.com/en/av-saas/',\n                                title: 'This link opens in a new tab',\n                                target: '_blank',\n                                text: 'Our Terms & Privacy Policies',\n                            },\n                        },\n                    },\n                },\n                frequency: {\n                    type: 'number',\n                    title: 'Frequency of email notifications',\n                    description:\n                        'How many times per day can we sent you email notifications at most?',\n                    minimum: 0,\n                    maximum: 10,\n                    multipleOf: 1,\n                    lime: {\n                        layout: {\n                            icon: 'notification_center_92458',\n                        },\n                    },\n                },\n                personalNumber: {\n                    type: 'integer',\n                    title: 'Personal identity number',\n                    lime: {\n                        layout: {\n                            icon: 'numbers_input_form',\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n","import { Component, h, State } from '@stencil/core';\nimport { FormField } from '../form-field';\nimport { RowLayoutFormData, schema } from './row-layout-schema';\n\n/**\n * Row layout\n *\n * @sourceFile row-layout-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-row-layout',\n    shadow: true,\n})\nexport class FormRowLayoutExample {\n    @State()\n    private formData: RowLayoutFormData = {};\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            >\n                <FormField\n                    name=\"info.language\"\n                    layout={{\n                        icon: 'globe',\n                    }}\n                />\n                <FormField\n                    name=\"info.notification\"\n                    layout={{\n                        icon: 'filled_message',\n                    }}\n                >\n                    <limel-switch />\n                </FormField>\n            </limel-form>,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"],"mappings":"+CAOO,MAAMA,EAAiD,CAC1DC,EACAC,KAEA,GAAIA,EAASC,SAAW,EAAG,CACvB,OACIC,EAAA,OACIC,MAAM,mBAAkB,YACbC,KAAKC,UAAUN,I,CAKtC,MAAMO,EAASP,EAAMO,OAErB,IAAIC,EAAa,gCAEjB,GAAID,IAAM,MAANA,SAAM,SAANA,EAAQE,QAAS,CACjBD,GAAc,+BAA+BD,EAAOE,S,CAGxD,MAAMC,EAAQC,EAAaJ,GAE3B,OACIJ,EAAA,OACIC,MAAOI,EACPI,KAAMZ,EAAMa,KACZH,MAAOA,EAAK,YACDL,KAAKC,UAAUN,IAEzBC,EACC,EAId,SAASU,EAAaJ,GAClB,MAAMO,EAAUP,IAAM,MAANA,SAAM,SAANA,EAAQO,QACxB,GAAIA,EAAS,CACT,MAAO,CACH,WAAY,QAAQA,IACpB,aAAc,uCAAuCA,K,CAGjE,CCpCO,MAAMC,EAAwC,CACjDC,YAAa,+BACbC,KAAM,SACNC,WAAY,CACRC,KAAM,CACFC,MAAO,cACPJ,YACI,kFACJC,KAAM,SACNI,KAAM,CACFd,OAAQ,CACJU,KAAM,QAGdC,WAAY,CACRI,SAAU,CACNL,KAAM,SACNG,MAAO,WACPG,QAAS,KACTF,KAAM,CACFG,KAAM,CACFC,MAAO,0HAGfC,MAAO,CACH,CACIT,KAAM,SACNU,MAAO,KACPP,MAAO,WAEX,CACIH,KAAM,SACNU,MAAO,KACPP,MAAO,aAEX,CACIH,KAAM,SACNU,MAAO,KACPP,MAAO,WAEX,CACIH,KAAM,SACNU,MAAO,KACPP,MAAO,WAEX,CACIH,KAAM,SACNU,MAAO,KACPP,MAAO,WAInBQ,KAAM,CACFX,KAAM,SACNG,MAAO,cACPG,QAAS,aACTF,KAAM,CACFd,OAAQ,CACJsB,KAAM,aAGdH,MAAO,CACH,CACIT,KAAM,SACNU,MAAO,aACPP,MAAO,cAEX,CACIH,KAAM,SACNU,MAAO,aACPP,MAAO,cAEX,CACIH,KAAM,SACNU,MAAO,aACPP,MAAO,gBAInBU,aAAc,CACVb,KAAM,UACNG,MAAO,0CACPC,KAAM,CACFG,KAAM,CACFC,MAAO,qGACPM,aAAc,CACVC,KAAM,gDACNZ,MAAO,+BACPa,OAAQ,SACRC,KAAM,mCAKtBC,UAAW,CACPlB,KAAM,SACNG,MAAO,mCACPJ,YACI,sEACJoB,QAAS,EACTC,QAAS,GACTC,WAAY,EACZjB,KAAM,CACFd,OAAQ,CACJsB,KAAM,+BAIlBU,eAAgB,CACZtB,KAAM,UACNG,MAAO,2BACPC,KAAM,CACFd,OAAQ,CACJsB,KAAM,4B,MClHrBW,EAAoB,M,yBA6BrBC,KAAAC,iBAAoBC,IACxBF,KAAKG,SAAWD,EAAME,MAAM,E,cA5BM,E,CAE/BC,SACH,MAAO,CACH3C,EAAA,cACI4C,SAAUN,KAAKC,iBACfjB,MAAOgB,KAAKG,SACZ7B,OAAQA,GAERZ,EAACJ,EAAS,CACNc,KAAK,gBACLN,OAAQ,CACJsB,KAAM,WAGd1B,EAACJ,EAAS,CACNc,KAAK,oBACLN,OAAQ,CACJsB,KAAM,mBAGV1B,EAAA,uB"}