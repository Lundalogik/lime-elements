import{r as e,h as t,H as i}from"./index-2714248e.js";const l=".do .relevant-button,.do limel-button,.do-not .relevant-button,.do-not limel-button{margin:1rem}.do .assign,.do-not .assign{padding-bottom:0}#tooltip-example{width:5rem}#tooltip{cursor:help}.button-icon{display:flex;align-items:center}.split-example limel-split-button,.relevant-buttons-example limel-split-button{margin:1rem}";const o=class{constructor(t){e(this,t);this.items=[{text:"Save as",icon:"save_as"}];this.disabledItem=[{text:"Save as",icon:"save_as",disabled:true}];this.handleDoNotSubmit=()=>{this.doNotSubmitClicked=true};this.setChecked=e=>{e.stopPropagation();this.value=e.detail};this.isClicked=()=>{this.clicked=!this.clicked};this.isClickedDontExample=()=>{this.clickedDontExample=!this.clickedDontExample};this.value=false;this.clicked=false;this.clickedDontExample=false;this.required=undefined;this.doNotSubmitClicked=false}render(){return t(i,null,t("h3",null,"Disabled vs. Hidden"),t("p",null,'When should an interactive element –like a button– be "Disabled" and when should we avoid displaying it? This is a crucial question in user interface design, and the choice between the two should always be context-dependent. These guidelines provide insights into when to apply each approach to optimize user experiences.',t("br",null),t("br",null),t("b",null," Disabling an interactive element:")),t("p",null,'Use button disabling when the action the button represents is not currently available but may become available in the future. For example, you can disable a "Submit" button until all required form fields are filled out. Keep in mind that in such cases, users should be able to do something to enable the ',t("code",null,"disabled")," element!"),t("limel-example-do-do-not",{doDescription:"The submit button is disabled until required fields are filled in.",doNotDescription:"The submit button is enabled. Clicking it only makes required fields invalid."},t("limel-checkbox",{slot:"do",label:"Accept terms and conditions",required:true,onChange:this.setChecked,checked:this.value}),t("limel-button",{slot:"do",label:"Submit",disabled:!this.value}),t("limel-checkbox",{slot:"do-not",label:"Accept terms and conditions",required:true,invalid:this.doNotSubmitClicked}),t("limel-button",{slot:"do-not",label:"Submit",onClick:this.handleDoNotSubmit})),t("p",null,"Simply showing a disabled element in the user interface might not be enough for the user to realize what they should do to enable it. Therefore, it's very helpful to communicate to the user why they can't perform that certain action. Disabled buttons for instance, could have a tooltip or message explaining why they are disabled."),t("p",null,"Another idea could be to display a more noticeable visual element next to the disabled element, which hints about an explanation or further information. For example, indicating to the user that they need to complete a certain step or meet specific conditions before proceeding."),t("limel-example-do-do-not",{doDescription:"Disabled button together with a Tooltip that clarifies why the button is disabled.",doNotDescription:"Disabled button without any explanation"},t("div",{slot:"do"},t("limel-button",{id:"tooltip-example",disabled:true,icon:"phone",label:"Call"}),t("limel-tooltip",{label:"Select a recipient to make a call",elementId:"tooltip-example"})),t("span",{slot:"do",style:{padding:"0 2rem"}},"or"),t("div",{slot:"do"},t("limel-button",{disabled:true,icon:"plus_math",label:"Add recipient"}),t("limel-icon",{name:"info",id:"tooltip",size:"x-small"}),t("limel-tooltip",{label:"To activate this feature, call our support!",elementId:"tooltip"})),t("div",{slot:"do-not"},t("limel-button",{disabled:true,icon:"phone",label:"Call"}))),t("h3",null,"Hiding an interactive element:"),t("p",null,'Sometimes, displaying a disabled element does not make sense. This could be of course due to various reasons, but a common scenario is coexistence of another "enabled" element that does the opposite of what the disabled element does.'," ",t("br",null),' In this example, there is no point to show two buttons, one for "assigning" and one for "un-assigning". The "Assign" button should be hidden if it\'s not relevant to a context. If the user is already assigned there is no sense in having the assign button, it is better to show the'," ",t("b",null," unassign")," button instead."),t("limel-example-do-do-not",null,t("limel-button",{slot:"do",class:"relevant-button",icon:this.clicked?"":"whole_hand_right",label:this.clicked?"Unassign me":"Assign me",onClick:this.isClicked}),t("limel-button",{slot:"do-not",class:"relevant-button assign",icon:"whole_hand_right",label:"Assign me",disabled:this.clickedDontExample,onClick:this.isClickedDontExample}),t("limel-button",{slot:"do-not",class:"relevant-button",label:"Unassign me",disabled:!this.clickedDontExample,onClick:this.isClickedDontExample})),t("p",null,"When an action is permanently unavailable or not allowed for a particular user role (e.g., an admin-only action), it's best to hide the button rather than disabling it."),t("limel-example-do-do-not",null,t("div",{slot:"do-not"},t("p",null,"What users & admins both see"),t("limel-split-button",{slot:"do-not",label:"Save",icon:"save",items:this.disabledItem})),t("div",{slot:"do"},t("p",null,"What users see"),t("limel-split-button",{label:"Save",icon:"save"})),t("div",{slot:"do",style:{borderLeft:"1px dashed rgb(var(--contrast-600))"}}),t("div",{slot:"do"},t("p",null,"What admins see"),t("limel-split-button",{label:"Save",icon:"save",items:this.items}))))}};o.style=l;export{o as limel_example_button_disabled_vs_hidden};
//# sourceMappingURL=limel-example-button-disabled-vs-hidden.entry.js.map