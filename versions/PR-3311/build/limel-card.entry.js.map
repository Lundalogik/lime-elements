{"version":3,"names":["cardCss","Card","this","handleActionSelect","event","stopPropagation","isItem","detail","actionSelected","emit","handleMouseEnter","element","bounds","the3dElementBounds","tiltFollowingTheCursor","handleMouseLeave","e","componentDidLoad","the3dElement","shadowRoot","querySelector","addEventListener","disconnectedCallback","removeEventListener","render","h","tabindex","clickable","onMouseEnter","onMouseLeave","renderImage","class","renderHeader","renderSlot","renderValue","renderActionBar","image","src","alt","loading","heading","subheading","icon","renderIcon","renderHeading","renderSubheading","getIconName","color","_a","undefined","style","badge","name","value","actions","length","onItemSelected"],"sources":["./src/components/card/card.scss?tag=limel-card&encapsulation=shadow","./src/components/card/card.tsx"],"sourcesContent":["/**\n* @prop --card-heading-color: color of the heading. Defaults to `--contrast-1100`;\n* @prop --card-subheading-color: color of the sub heading. Defaults to `--contrast-1000`;\n* @prop --card-border-radius: border radius of the card. Defaults to `0.95rem`;\n* @prop --card-background-color: background color of the card.\n* @prop --card-background-color--hovered: background color of the card, when hovered.\n*/\n\n@use '../../style/mixins';\n\n$default-border-radius: 0.95rem;\n\n* {\n    box-sizing: border-box;\n    min-width: 0;\n    min-height: 0;\n}\n\n:host(limel-card) {\n    display: flex;\n    border-radius: var(--card-border-radius, $default-border-radius);\n}\n\nsection {\n    box-sizing: border-box;\n\n    display: flex;\n    gap: 0.5rem;\n\n    flex-direction: column;\n    :host(limel-card[orientation='landscape']) & {\n        flex-direction: row;\n    }\n\n    border-radius: var(--card-border-radius, $default-border-radius);\n    border: 1px solid rgb(var(--contrast-500));\n\n    padding: 0.25rem;\n    background-color: var(--card-background-color, rgb(var(--contrast-300)));\n\n    &:hover {\n        border-color: transparent;\n        background-color: var(\n            --card-background-color--hovered,\n            var(--card-background-color, rgb(var(--contrast-200)))\n        );\n    }\n}\n\n.body {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\nimg {\n    transition: filter 0.6s ease;\n    object-fit: cover;\n    border-radius: calc(\n        var(--card-border-radius, $default-border-radius) / 1.4\n    );\n    :host(limel-card[orientation='portrait']) & {\n        width: 100%;\n    }\n\n    :host(limel-card[orientation='landscape']) & {\n        max-width: 40%;\n        height: 100%;\n    }\n\n    section:hover &,\n    section:focus-visible & {\n        transition-duration: 0.2s;\n        filter: saturate(1.3);\n    }\n}\n\nlimel-markdown {\n    padding: 0.5rem 0.75rem;\n}\n\nheader {\n    display: flex;\n    justify-content: center;\n\n    gap: 0.5rem;\n\n    padding: 0.25rem 0.75rem;\n    :host(limel-card[orientation='landscape']) & {\n        padding-top: 0.5rem;\n    }\n\n    &:has(limel-icon) {\n        padding-left: 0.25rem;\n    }\n\n    .headings {\n        flex-grow: 1;\n        display: flex;\n        flex-direction: column;\n        gap: 0.125rem;\n    }\n\n    limel-icon {\n        flex-shrink: 0;\n        width: 2rem;\n    }\n\n    h1 {\n        font-size: 1.125rem;\n        font-weight: 500;\n        color: var(--card-heading-color, rgb(var(--contrast-1100)));\n        letter-spacing: -0.03125rem; // 0.5px\n    }\n\n    h2 {\n        font-size: 0.875rem;\n        font-weight: 400;\n        color: var(--card-subheading-color, rgb(var(--contrast-1000)));\n    }\n\n    h1,\n    h2 {\n        word-break: break-word;\n        hyphens: auto;\n        -webkit-hyphens: auto;\n        margin: 0;\n    }\n}\n\nlimel-action-bar {\n    --action-bar-background-color: transparent;\n    padding: 0.5rem;\n    margin-left: auto;\n}\n\n// The 3D effect\n@include mixins.limel-3d-hover-effect-glow(\n    section,\n    var(--card-border-radius, $default-border-radius)\n);\n\n:host(limel-card) {\n    @include mixins.parent-of-the-3d-element;\n}\n\nsection {\n    @include mixins.the-3d-element;\n\n    :host(limel-card[clickable]) & {\n        @include mixins.the-3d-element--clickable;\n    }\n}\n","import {\n    Component,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Element,\n} from '@stencil/core';\nimport { Image } from '../../global/shared-types/image.types';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { isItem } from '../action-bar/isItem';\nimport { getIconName } from '../icon/get-icon-props';\nimport { ListSeparator } from '../../global/shared-types/separator.types';\nimport { ActionBarItem } from '../action-bar/action-bar.types';\nimport {\n    tiltFollowingTheCursor,\n    handleMouseEnter,\n    handleMouseLeave,\n} from '../../util/3d-tilt-hover-effect';\n\n/**\n * Card is a component that displays content about a single topic,\n * in a structured way. It can contain a header, and some supporting media such\n * as an image or an icon, a body of text, or optional actions.\n *\n * @exampleComponent limel-example-card-basic\n * @exampleComponent limel-example-card-image\n * @exampleComponent limel-example-card-actions\n * @exampleComponent limel-example-card-clickable\n * @exampleComponent limel-example-card-orientation\n * @exampleComponent limel-example-card-slot\n * @exampleComponent limel-example-card-styling\n * @beta\n */\n@Component({\n    tag: 'limel-card',\n    shadow: true,\n    styleUrl: 'card.scss',\n})\nexport class Card {\n    /**\n     * Heading of the card,\n     * to provide a short title about the context.\n     */\n    @Prop({ reflect: true })\n    public heading?: string;\n\n    /**\n     * Subheading of the card\n     * to provide a short description of the context.\n     */\n    @Prop({ reflect: true })\n    public subheading?: string;\n\n    /**\n     * A hero image to display in the card,\n     * to enrich the content with visual information.\n     */\n    @Prop()\n    public image?: Image;\n\n    /**\n     * An icon, to display along with the heading and subheading.\n     */\n    @Prop({ reflect: true })\n    public icon?: string | Icon;\n\n    /**\n     * The content of the card.\n     * Supports markdown, to provide a rich text experience.\n     */\n    @Prop()\n    public value?: string;\n\n    /**\n     * Actions to display in the card,\n     * to provide the user with options to interact with the content.\n     */\n    @Prop()\n    public actions?: Array<ActionBarItem | ListSeparator> = [];\n\n    /**\n     * When true, improve the accessibility of the component and hints the user\n     * that the card can be interacted width.\n     */\n    @Prop({ reflect: true })\n    public clickable: boolean = false;\n\n    /**\n     * The orientation of the card,\n     * specially useful when the card has an image.\n     */\n    @Prop({ reflect: true })\n    public orientation: 'landscape' | 'portrait' = 'portrait';\n\n    /**\n     * Fired when a action bar item has been clicked.\n     */\n    @Event()\n    public actionSelected: EventEmitter<ActionBarItem>;\n\n    @Element() private element: HTMLElement;\n    private the3dElementBounds: DOMRect;\n\n    public componentDidLoad() {\n        const the3dElement = this.element.shadowRoot.querySelector('section');\n        the3dElement.addEventListener('mouseenter', this.handleMouseEnter);\n        the3dElement.addEventListener('mouseleave', this.handleMouseLeave);\n    }\n\n    public disconnectedCallback() {\n        const the3dElement = this.element.shadowRoot.querySelector('section');\n        if (the3dElement) {\n            the3dElement.removeEventListener(\n                'mouseenter',\n                this.handleMouseEnter,\n            );\n            the3dElement.removeEventListener(\n                'mouseleave',\n                this.handleMouseLeave,\n            );\n        }\n    }\n\n    public render() {\n        return (\n            <section\n                tabindex={this.clickable ? 0 : ''}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseLeave={this.handleMouseLeave}\n            >\n                {this.renderImage()}\n                <div class=\"body\">\n                    {this.renderHeader()}\n                    {this.renderSlot()}\n                    {this.renderValue()}\n                    {this.renderActionBar()}\n                </div>\n                <div class=\"limel-3d-hover-effect-glow\" />\n            </section>\n        );\n    }\n\n    private renderImage() {\n        if (!this.image) {\n            return;\n        }\n\n        return <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />;\n    }\n\n    private renderHeader() {\n        if (!this.heading && !this.subheading && !this.icon) {\n            return;\n        }\n\n        return (\n            <header>\n                {this.renderIcon()}\n                <div class=\"headings\">\n                    {this.renderHeading()}\n                    {this.renderSubheading()}\n                </div>\n            </header>\n        );\n    }\n\n    private renderIcon() {\n        const icon = getIconName(this.icon);\n        const color =\n            typeof this.icon !== 'string' ? this.icon?.color : undefined;\n\n        if (!icon) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                style={{\n                    color: `${color}`,\n                }}\n                badge={true}\n                name={icon}\n            />\n        );\n    }\n\n    private renderHeading() {\n        if (!this.heading) {\n            return;\n        }\n\n        return <h1>{this.heading}</h1>;\n    }\n\n    private renderSubheading() {\n        if (!this.subheading) {\n            return;\n        }\n\n        return <h2>{this.subheading}</h2>;\n    }\n\n    private renderSlot() {\n        return <slot name=\"component\" />;\n    }\n\n    private renderValue() {\n        return <limel-markdown value={this.value} />;\n    }\n\n    private handleActionSelect = (\n        event: CustomEvent<ActionBarItem | ListSeparator>,\n    ) => {\n        event.stopPropagation();\n        if (isItem(event.detail)) {\n            this.actionSelected.emit(event.detail);\n        }\n    };\n\n    private renderActionBar() {\n        if (!this.actions.length) {\n            return;\n        }\n\n        return (\n            <limel-action-bar\n                actions={this.actions}\n                onItemSelected={this.handleActionSelect}\n            />\n        );\n    }\n\n    private handleMouseEnter = () => {\n        handleMouseEnter(\n            this.element,\n            'section',\n            (bounds) => {\n                this.the3dElementBounds = bounds;\n            },\n            this.tiltFollowingTheCursor,\n        );\n    };\n\n    private handleMouseLeave = () => {\n        handleMouseLeave(this.element, 'section', this.tiltFollowingTheCursor);\n    };\n\n    private tiltFollowingTheCursor = (e: MouseEvent) => {\n        tiltFollowingTheCursor(e, this.the3dElementBounds, this.element);\n    };\n}\n"],"mappings":"4NAAA,MAAMA,EAAU,ksH,MCuCHC,EAAI,M,wEA4KLC,KAAAC,mBACJC,IAEAA,EAAMC,kBACN,GAAIC,EAAOF,EAAMG,QAAS,CACtBL,KAAKM,eAAeC,KAAKL,EAAMG,O,GAiB/BL,KAAAQ,iBAAmB,KACvBA,EACIR,KAAKS,QACL,WACCC,IACGV,KAAKW,mBAAqBD,CAAM,GAEpCV,KAAKY,uBACR,EAGGZ,KAAAa,iBAAmB,KACvBA,EAAiBb,KAAKS,QAAS,UAAWT,KAAKY,uBAAuB,EAGlEZ,KAAAY,uBAA0BE,IAC9BF,EAAuBE,EAAGd,KAAKW,mBAAoBX,KAAKS,QAAQ,E,4HA1KZ,G,eAO5B,M,iBAOmB,U,CAWxCM,mBACH,MAAMC,EAAehB,KAAKS,QAAQQ,WAAWC,cAAc,WAC3DF,EAAaG,iBAAiB,aAAcnB,KAAKQ,kBACjDQ,EAAaG,iBAAiB,aAAcnB,KAAKa,iB,CAG9CO,uBACH,MAAMJ,EAAehB,KAAKS,QAAQQ,WAAWC,cAAc,WAC3D,GAAIF,EAAc,CACdA,EAAaK,oBACT,aACArB,KAAKQ,kBAETQ,EAAaK,oBACT,aACArB,KAAKa,iB,EAKVS,SACH,OACIC,EAAA,WACIC,SAAUxB,KAAKyB,UAAY,EAAI,GAC/BC,aAAc1B,KAAKQ,iBACnBmB,aAAc3B,KAAKa,kBAElBb,KAAK4B,cACNL,EAAA,OAAKM,MAAM,QACN7B,KAAK8B,eACL9B,KAAK+B,aACL/B,KAAKgC,cACLhC,KAAKiC,mBAEVV,EAAA,OAAKM,MAAM,+B,CAKfD,cACJ,IAAK5B,KAAKkC,MAAO,CACb,M,CAGJ,OAAOX,EAAA,OAAKY,IAAKnC,KAAKkC,MAAMC,IAAKC,IAAKpC,KAAKkC,MAAME,IAAKC,QAAQ,Q,CAG1DP,eACJ,IAAK9B,KAAKsC,UAAYtC,KAAKuC,aAAevC,KAAKwC,KAAM,CACjD,M,CAGJ,OACIjB,EAAA,cACKvB,KAAKyC,aACNlB,EAAA,OAAKM,MAAM,YACN7B,KAAK0C,gBACL1C,KAAK2C,oB,CAMdF,a,MACJ,MAAMD,EAAOI,EAAY5C,KAAKwC,MAC9B,MAAMK,SACK7C,KAAKwC,OAAS,UAAWM,EAAA9C,KAAKwC,QAAI,MAAAM,SAAA,SAAAA,EAAED,MAAQE,UAEvD,IAAKP,EAAM,CACP,M,CAGJ,OACIjB,EAAA,cACIyB,MAAO,CACHH,MAAO,GAAGA,KAEdI,MAAO,KACPC,KAAMV,G,CAKVE,gBACJ,IAAK1C,KAAKsC,QAAS,CACf,M,CAGJ,OAAOf,EAAA,UAAKvB,KAAKsC,Q,CAGbK,mBACJ,IAAK3C,KAAKuC,WAAY,CAClB,M,CAGJ,OAAOhB,EAAA,UAAKvB,KAAKuC,W,CAGbR,aACJ,OAAOR,EAAA,QAAM2B,KAAK,a,CAGdlB,cACJ,OAAOT,EAAA,kBAAgB4B,MAAOnD,KAAKmD,O,CAY/BlB,kBACJ,IAAKjC,KAAKoD,QAAQC,OAAQ,CACtB,M,CAGJ,OACI9B,EAAA,oBACI6B,QAASpD,KAAKoD,QACdE,eAAgBtD,KAAKC,oB"}