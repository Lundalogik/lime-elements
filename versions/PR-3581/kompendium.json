{"docs":{"timestamp":"2025-07-10T14:36:54","compiler":{"name":"@stencil/core","version":"3.4.2","typescriptVersion":"5.0.4"},"components":[{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/3d-hover-effect-glow","filePath":"./src/components/3d-hover-effect-glow/3d-hover-effect-glow.tsx","fileName":"3d-hover-effect-glow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/3d-hover-effect-glow/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/3d-hover-effect-glow/usage","tag":"limel-3d-hover-effect-glow","overview":"This component enhances the visual effects, when the `tiltFollowingTheCursor`\nutility function from `3d-tilt-hover-effect.ts` is implemented in a component.\n\nThis component should be added to the HTML structure of the consumer component.\n\nThis component carries its own styles which are needed to create a glow effect on the\n3D element within the parent element, when the parent is hovered.\n\nThe parent element must be using the `tiltFollowingTheCursor` utility function\nimported from `3d-tilt-hover-effect.ts`. This function will dynamically\naffect parts of the styles of this 3D glow effect.","usage":{},"docs":"This component enhances the visual effects, when the `tiltFollowingTheCursor`\nutility function from `3d-tilt-hover-effect.ts` is implemented in a component.\n\nThis component should be added to the HTML structure of the consumer component.\n\nThis component carries its own styles which are needed to create a glow effect on the\n3D element within the parent element, when the parent is hovered.\n\nThe parent element must be using the `tiltFollowingTheCursor` utility function\nimported from `3d-tilt-hover-effect.ts`. This function will dynamically\naffect parts of the styles of this 3D glow effect.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-card","limel-info-tile","limel-shortcut"],"dependencies":[],"dependencyGraph":{"limel-card":["limel-3d-hover-effect-glow"],"limel-info-tile":["limel-3d-hover-effect-glow"],"limel-shortcut":["limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"3d-hover-effect-glow.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * This component enhances the visual effects, when the `tiltFollowingTheCursor`\n * utility function from `3d-tilt-hover-effect.ts` is implemented in a component.\n *\n * This component should be added to the HTML structure of the consumer component.\n *\n * This component carries its own styles which are needed to create a glow effect on the\n * 3D element within the parent element, when the parent is hovered.\n *\n * The parent element must be using the `tiltFollowingTheCursor` utility function\n * imported from `3d-tilt-hover-effect.ts`. This function will dynamically\n * affect parts of the styles of this 3D glow effect.\n *\n * @private\n */\n@Component({\n    tag: 'limel-3d-hover-effect-glow',\n    shadow: true,\n    styleUrl: '3d-hover-effect-glow.scss',\n})\nexport class HoverEffectGlowComponent {\n    public render() {\n        return <div />;\n    }\n}\n"},{"filename":"3d-hover-effect-glow.scss","type":"scss","source":":host(limel-3d-hover-effect-glow) {\n    display: block;\n    pointer-events: none;\n\n    position: absolute;\n    inset: 0;\n\n    mix-blend-mode: plus-lighter;\n}\n\ndiv {\n    position: absolute;\n    inset: 0;\n\n    transition: background, opacity;\n    transition-timing-function: ease-out; // Must be the same as the 3D Element itself\n    transition-duration: 0.8s; // Must be the same as the 3D Element itself\n\n    border-radius: inherit;\n\n    opacity: var(--limel-3d-hover-effect-glow-opacity, 0.1);\n\n    background-image: radial-gradient(\n        circle at var(--limel-3d-hover-effect-glow-position, 50% -20%),\n        rgb(var(--color-white), 0.3),\n        rgb(var(--color-white), 0)\n    );\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar","filePath":"./src/components/action-bar/action-bar.tsx","fileName":"action-bar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/usage","tag":"limel-action-bar","overview":"An action bar is a user interface element commonly found in software applications and websites.\nIt typically appears at the top of the screen or within a specific section\nand serves as a centralized hub for accessing various actions and commands\nrelevant to the current context or page.\n\nThe action bar often contains a set of clickable icons or buttons (icons + labels)\nthat represent specific actions, such as saving, deleting, editing, sharing,\nor bulk operations for selected items.\n\nThe purpose of an action bar is to provide quick and convenient access to\nfrequently used functionalities, enabling users to perform common tasks efficiently.\nIt enhances usability by organizing important actions in a visually prominent and easily accessible location.\n\nThe action bar's design and layout can vary based on the platform or application,\nbut its primary goal remains consistent—to\nempower users to interact with the software and perform desired actions effortlessly.","usage":{},"docs":"An action bar is a user interface element commonly found in software applications and websites.\nIt typically appears at the top of the screen or within a specific section\nand serves as a centralized hub for accessing various actions and commands\nrelevant to the current context or page.\n\nThe action bar often contains a set of clickable icons or buttons (icons + labels)\nthat represent specific actions, such as saving, deleting, editing, sharing,\nor bulk operations for selected items.\n\nThe purpose of an action bar is to provide quick and convenient access to\nfrequently used functionalities, enabling users to perform common tasks efficiently.\nIt enhances usability by organizing important actions in a visually prominent and easily accessible location.\n\nThe action bar's design and layout can vary based on the platform or application,\nbut its primary goal remains consistent—to\nempower users to interact with the software and perform desired actions effortlessly.","docsTags":[{"name":"exampleComponent","text":"limel-example-action-bar-basic"},{"name":"exampleComponent","text":"limel-example-action-bar-overflow-menu"},{"name":"exampleComponent","text":"limel-example-action-bar-selected-item"},{"name":"exampleComponent","text":"limel-example-action-bar-colors"},{"name":"exampleComponent","text":"limel-example-action-bar-floating"},{"name":"exampleComponent","text":"limel-example-action-bar-floating-expand"},{"name":"exampleComponent","text":"limel-example-action-bar-styling"},{"name":"exampleComponent","text":"limel-example-action-bar-as-primary-component"},{"name":"exampleComponent","text":"limel-example-action-bar-icon-title"}],"encapsulation":"shadow","dependents":["limel-card","limel-example-action-bar-basic","limel-example-action-bar-colors","limel-example-action-bar-floating","limel-example-action-bar-floating-expand","limel-example-action-bar-icon-title","limel-example-action-bar-in-list","limel-example-action-bar-overflow-menu","limel-example-action-bar-selected-item","limel-example-action-bar-styling","limel-example-card-nested-component","limel-prosemirror-adapter"],"dependencies":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"dependencyGraph":{"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-card":["limel-action-bar"],"limel-example-action-bar-basic":["limel-action-bar"],"limel-example-action-bar-colors":["limel-action-bar"],"limel-example-action-bar-floating":["limel-action-bar"],"limel-example-action-bar-floating-expand":["limel-action-bar"],"limel-example-action-bar-icon-title":["limel-action-bar"],"limel-example-action-bar-in-list":["limel-action-bar"],"limel-example-action-bar-overflow-menu":["limel-action-bar"],"limel-example-action-bar-selected-item":["limel-action-bar"],"limel-example-action-bar-styling":["limel-action-bar"],"limel-example-card-nested-component":["limel-action-bar"],"limel-prosemirror-adapter":["limel-action-bar"]},"props":[{"name":"accessibleLabel","type":"string","mutable":false,"attr":"accessible-label","reflectToAttr":true,"docs":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nExample value: \"toolbar\"","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"actions","type":"(ListSeparator | ActionBarItem)[]","mutable":false,"reflectToAttr":false,"docs":"Items that are placed in the action bar.\nThese represent primary actions.","docsTags":[],"default":"[]","values":[{"type":"(ListSeparator"},{"type":"ActionBarItem)[]"}],"optional":false,"required":false},{"name":"collapsible","type":"boolean","mutable":false,"attr":"collapsible","reflectToAttr":true,"docs":"When set to `true`, the action bar will be collapsible.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.","docsTags":[],"default":"document.documentElement.lang as Languages","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"layout","type":"\"floating\" | \"fullWidth\"","mutable":false,"attr":"layout","reflectToAttr":true,"docs":"- When set to `fullWidth`, the component will take the\nentire width of its container.\n- When set to `floating`, the component will get basic stylings\nto visualize the floating state.\n:::note\nYou should still properly position the component\naccording to the structure of your user interface.\nFor example, use an `absolute` or `fixed` position.\n:::","docsTags":[],"values":[{"value":"floating","type":"string"},{"value":"fullWidth","type":"string"}],"optional":true,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Defines the location that the content of the overflow menu\nappears, in relation to its trigger.","docsTags":[],"values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"itemSelected","detail":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a action bar item has been clicked.","docsTags":[{"name":"public"}]}],"styles":[{"name":"--action-bar-background-color","annotation":"prop","docs":"Background color of the whole component. Defaults to `--contrast-100`."},{"name":"--action-bar-border-radius","annotation":"prop","docs":"Defines the roundness of the corners of the action bar. Defaults to `0`."},{"name":"--action-bar-item-icon-color","annotation":"prop","docs":"Color of the icons displayed on each action bar item. Defaults to the text color. To specify a color for an individual item, use the `iconColor` prop instead."},{"name":"--action-bar-item-max-width","annotation":"prop","docs":"Maximum width of a button in the action bar. Defaults to `10rem`. Keep in mind that the buttons should not appear too big."},{"name":"--action-bar-item-text-color","annotation":"prop","docs":"Text color of action bar items, defaults to `--contrast-1100`."},{"name":"--action-bar-shrink-icon-color","annotation":"prop","docs":"Color of the shrink icon. Defaults to `--contrast-1000`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n} from '@stencil/core';\nimport { ListSeparator } from '../list/list-item.types';\nimport { MenuItem, OpenDirection } from '../menu/menu.types';\nimport { ActionBarItem } from './action-bar.types';\nimport { Languages } from './../date-picker/date.types';\nimport translate from './../../global/translations';\nimport { isItem } from './is-item';\nimport { Icon } from '../../global/shared-types/icon.types';\n\n/**\n * An action bar is a user interface element commonly found in software applications and websites.\n * It typically appears at the top of the screen or within a specific section\n * and serves as a centralized hub for accessing various actions and commands\n * relevant to the current context or page.\n *\n * The action bar often contains a set of clickable icons or buttons (icons + labels)\n * that represent specific actions, such as saving, deleting, editing, sharing,\n * or bulk operations for selected items.\n *\n * The purpose of an action bar is to provide quick and convenient access to\n * frequently used functionalities, enabling users to perform common tasks efficiently.\n * It enhances usability by organizing important actions in a visually prominent and easily accessible location.\n *\n * The action bar's design and layout can vary based on the platform or application,\n * but its primary goal remains consistent—to\n * empower users to interact with the software and perform desired actions effortlessly.\n *\n * @exampleComponent limel-example-action-bar-basic\n * @exampleComponent limel-example-action-bar-overflow-menu\n * @exampleComponent limel-example-action-bar-selected-item\n * @exampleComponent limel-example-action-bar-colors\n * @exampleComponent limel-example-action-bar-floating\n * @exampleComponent limel-example-action-bar-floating-expand\n * @exampleComponent limel-example-action-bar-styling\n * @exampleComponent limel-example-action-bar-as-primary-component\n * @exampleComponent limel-example-action-bar-icon-title\n */\n@Component({\n    tag: 'limel-action-bar',\n    shadow: true,\n    styleUrl: 'action-bar.scss',\n})\nexport class ActionBar {\n    /**\n     * Items that are placed in the action bar.\n     * These represent primary actions.\n     */\n    @Prop()\n    public actions: Array<ActionBarItem | ListSeparator> = [];\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = document.documentElement.lang as Languages;\n\n    /**\n     * A label used to describe the purpose of the element to users\n     * of assistive technologies, like screen readers.\n     * Example value: \"toolbar\"\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    /**\n     * - When set to `fullWidth`, the component will take the\n     * entire width of its container.\n     * - When set to `floating`, the component will get basic stylings\n     * to visualize the floating state.\n     * :::note\n     * You should still properly position the component\n     * according to the structure of your user interface.\n     * For example, use an `absolute` or `fixed` position.\n     * :::\n     */\n    @Prop({ reflect: true })\n    public layout?: 'fullWidth' | 'floating';\n\n    /**\n     * When set to `true`, the action bar will be collapsible.\n     */\n    @Prop({ reflect: true })\n    public collapsible = false;\n\n    /**\n     * Defines the location that the content of the overflow menu\n     * appears, in relation to its trigger.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection;\n\n    /**\n     * Fired when a action bar item has been clicked.\n     * @public\n     */\n    @Event()\n    public itemSelected: EventEmitter<ActionBarItem>;\n\n    @Element()\n    private readonly host: HTMLElement;\n\n    @State()\n    private overflowCutoff: number = this.actions.length;\n\n    /**\n     * Indicates whether the action bar is currently in a collapsed state.\n     */\n    @State()\n    private actionBarIsShrunk = false;\n\n    private hasRendered = false;\n    private intersectionObserver: IntersectionObserver;\n    private isFirstIntersectionCheck = true;\n    private actionBarItems: HTMLLimelActionBarItemElement[] = [];\n\n    public connectedCallback() {\n        if (this.hasRendered) {\n            this.createIntersectionObserver();\n        }\n    }\n\n    public componentDidRender() {\n        if (this.haveItemsChanged()) {\n            this.intersectionObserver?.disconnect();\n            this.createIntersectionObserver();\n        }\n    }\n\n    public disconnectedCallback() {\n        this.intersectionObserver?.disconnect();\n        this.intersectionObserver = undefined;\n        this.actionBarItems = [];\n    }\n\n    public render() {\n        this.hasRendered = true;\n        let overflowActions: Array<MenuItem | ListSeparator> = [];\n        if (this.actions.length > 0) {\n            overflowActions = this.actions.slice(this.overflowCutoff);\n        }\n\n        return (\n            <Host\n                aria-label={this.accessibleLabel}\n                class={{\n                    'is-full-width': this.layout === 'fullWidth',\n                    'is-floating': this.layout === 'floating',\n                    'is-shrunk': this.actionBarIsShrunk && this.collapsible,\n                    'can-be-shrunk': !!this.collapsible,\n                }}\n                role=\"grid\"\n            >\n                <div class=\"items\" role=\"rowgroup\">\n                    {this.actions.map(this.renderActionBarItem)}\n                </div>\n                {this.renderOverflowMenu(overflowActions)}\n                {this.renderCollapseExpandButton()}\n            </Host>\n        );\n    }\n\n    private readonly renderActionBarItem = (\n        item: ActionBarItem,\n        index: number\n    ) => {\n        return (\n            <limel-action-bar-item\n                item={item}\n                onSelect={this.handleSelect}\n                isVisible={this.isVisible(index)}\n                role=\"gridcell\"\n            />\n        );\n    };\n\n    private readonly renderOverflowMenu = (\n        items: Array<MenuItem | ListSeparator>\n    ) => {\n        if (!(this.actions.length - this.overflowCutoff)) {\n            return;\n        }\n\n        const shrunkOverFlowIcon: Icon = {\n            name: 'more',\n            color: 'rgb(var(--contrast-1000))',\n            title: this.getTranslation('action-bar.actions'),\n        };\n\n        return (\n            <limel-action-bar-overflow-menu\n                openDirection={this.openDirection}\n                items={items}\n                onSelect={this.handleSelect}\n                role=\"gridcell\"\n                overFlowIcon={\n                    this.actionBarIsShrunk ? shrunkOverFlowIcon : undefined\n                }\n            />\n        );\n    };\n\n    private renderCollapseExpandButton() {\n        if (!this.collapsible || this.actions.length <= 1) {\n            return;\n        }\n\n        return (\n            <button\n                class={{\n                    'expand-shrink': true,\n                }}\n                aria-label={this.tooltipLabel}\n                type=\"button\"\n                onClick={this.handleCollapseExpandClick}\n            >\n                <limel-icon\n                    name=\"double_left\"\n                    id=\"tooltip-expand-shrink-button\"\n                />\n                <limel-tooltip\n                    label={this.tooltipLabel}\n                    elementId=\"tooltip-expand-shrink-button\"\n                />\n            </button>\n        );\n    }\n\n    private handleCollapseExpandClick = () => {\n        this.actionBarIsShrunk = !this.actionBarIsShrunk;\n    };\n\n    private isVisible(index: number) {\n        return index < this.overflowCutoff;\n    }\n\n    private readonly handleSelect = (\n        event: CustomEvent<ActionBarItem | ListSeparator>\n    ) => {\n        event.stopPropagation();\n        if (isItem(event.detail)) {\n            this.itemSelected.emit(event.detail);\n        }\n    };\n\n    private get tooltipLabel() {\n        let key = 'action-bar.collapse';\n        if (this.actionBarIsShrunk) {\n            key = 'action-bar.expand';\n        }\n\n        return this.getTranslation(key);\n    }\n\n    private getTranslation = (key: string) => {\n        return translate.get(key, this.language);\n    };\n\n    private readonly handleIntersection = (\n        entries: IntersectionObserverEntry[]\n    ) => {\n        const intersectingItems = entries.filter(\n            (entry) => entry.isIntersecting\n        );\n\n        const notIntersectingItems = entries.filter(\n            (entry) => !entry.isIntersecting\n        );\n\n        if (this.isFirstIntersectionCheck) {\n            this.overflowCutoff = intersectingItems.length;\n        } else {\n            this.overflowCutoff =\n                this.overflowCutoff +\n                intersectingItems.length -\n                notIntersectingItems.length;\n        }\n\n        this.isFirstIntersectionCheck = false;\n    };\n\n    private createIntersectionObserver() {\n        const options = {\n            root: this.host.shadowRoot.querySelector('.items'),\n            rootMargin: '0px',\n            threshold: 1,\n        };\n\n        this.overflowCutoff = this.actions.length;\n        this.isFirstIntersectionCheck = true;\n\n        this.actionBarItems = [];\n\n        this.intersectionObserver = new IntersectionObserver(\n            this.handleIntersection,\n            options\n        );\n\n        for (const actionBarItem of this.host.shadowRoot.querySelectorAll(\n            'limel-action-bar-item'\n        )) {\n            this.observe(actionBarItem);\n        }\n    }\n\n    private observe(actionBarItem: HTMLLimelActionBarItemElement) {\n        this.intersectionObserver.observe(actionBarItem);\n        this.actionBarItems.push(actionBarItem);\n    }\n\n    private haveItemsChanged() {\n        const someItemRemoved = this.actionBarItems.some(\n            (actionBarItem: HTMLLimelActionBarItemElement) =>\n                !this.host.shadowRoot.contains(actionBarItem)\n        );\n\n        const someItemAdded = [\n            ...this.host.shadowRoot.querySelectorAll('limel-action-bar-item'),\n        ].some(\n            (actionBarItem: HTMLLimelActionBarItemElement) =>\n                !this.actionBarItems.includes(actionBarItem)\n        );\n\n        return someItemRemoved || someItemAdded;\n    }\n}\n"},{"filename":"action-bar.scss","type":"scss","source":"/**\n* @prop --action-bar-item-text-color: Text color of action bar items, defaults to `--contrast-1100`.\n* @prop --action-bar-item-icon-color: Color of the icons displayed on each action bar item. Defaults to the text color. To specify a color for an individual item, use the `iconColor` prop instead.\n* @prop --action-bar-item-max-width: Maximum width of a button in the action bar. Defaults to `10rem`. Keep in mind that the buttons should not appear too big.\n* @prop --action-bar-border-radius: Defines the roundness of the corners of the action bar. Defaults to `0`.\n* @prop --action-bar-background-color: Background color of the whole component. Defaults to `--contrast-100`.\n* @prop --action-bar-shrink-icon-color: Color of the shrink icon. Defaults to `--contrast-1000`.\n\n*/\n\n@use '../../style/mixins';\n\n:host(limel-action-bar) {\n    --action-bar-item-height: 2rem;\n\n    --limel-action-bar-item-text-color: var(\n        --action-bar-item-text-color,\n        rgb(var(--contrast-1100))\n    );\n\n    box-sizing: border-box;\n\n    display: inline-flex;\n    align-items: center;\n    padding: 0.125rem 0.25rem;\n    max-width: 100%;\n    border-radius: var(--action-bar-border-radius);\n\n    background-color: var(\n        --action-bar-background-color,\n        rgb(var(--contrast-100))\n    );\n\n    transition: max-width 0.3s ease;\n}\n\n:host(limel-action-bar),\n.items {\n    gap: 0.25rem;\n    @media (pointer: coarse) {\n        gap: 0.5rem;\n    }\n}\n\n.items {\n    display: inline-flex;\n    max-width: 100%;\n    min-width: 0;\n}\n\n:host(limel-action-bar.is-shrunk) .items {\n    opacity: 0;\n}\n\n:host(limel-action-bar:not(.is-shrunk)) .items {\n    opacity: 1;\n}\n\n:host(limel-action-bar.is-full-width) {\n    width: 100%;\n}\n\n:host(limel-action-bar.is-floating) {\n    --action-bar-border-radius: 100vw;\n    border: 1px solid rgb(var(--contrast-400));\n\n    padding-right: 0.125rem;\n    padding-left: 0.125rem;\n\n    max-width: calc(100% - 2rem);\n    box-shadow: var(--shadow-depth-16), var(--shadow-depth-8);\n}\n\n:host(limel-action-bar.is-shrunk) {\n    max-width: 5rem;\n    transition: max-width 0.3s ease-in-out;\n\n    .expand-shrink {\n        transition: transform 0.3s ease;\n        transform: rotateY(180deg);\n    }\n}\n\n:host(limel-action-bar:not(.is-shrunk)) {\n    max-width: 100%;\n    transition: max-width 0.3s ease-in-out;\n\n    .expand-shrink {\n        transition: transform 0.3s ease;\n        transform: rotateY(0deg);\n    }\n}\n\n:host(limel-action-bar.can-be-shrunk.is-full-width) {\n    .expand-shrink {\n        margin-left: auto;\n    }\n}\n\n.expand-shrink {\n    all: unset;\n    box-sizing: border-box;\n    border-radius: 50%;\n\n    @include mixins.is-flat-clickable();\n    @include mixins.visualize-keyboard-focus;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    limel-icon {\n        width: 1.5rem;\n        height: 1.5rem;\n        padding: 0.125rem;\n        color: var(--action-bar-shrink-icon-color, rgb(var(--contrast-1000)));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar-item","filePath":"./src/components/action-bar/action-bar-item/action-bar-item.tsx","fileName":"action-bar-item.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar-item/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar-item/usage","tag":"limel-action-bar-item","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-action-bar"],"dependencies":["limel-icon","limel-tooltip"],"dependencyGraph":{"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar":["limel-action-bar-item"]},"props":[{"name":"isVisible","type":"boolean","mutable":false,"attr":"is-visible","reflectToAttr":true,"docs":"When the item is displayed in the available width,\nthis will be `false`.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"item","type":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any> | ListSeparator","mutable":false,"reflectToAttr":false,"docs":"Item that is placed in the action bar.","docsTags":[],"values":[{"type":"ActionBarItemOnlyIcon<any>"},{"type":"ActionBarItemWithLabel<any>"},{"type":"ListSeparator"}],"optional":false,"required":true},{"name":"selected","type":"boolean","mutable":false,"attr":"selected","reflectToAttr":true,"docs":"When the item is selected, this will be `true`.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"select","detail":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any> | ListSeparator","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a action bar item has been clicked.","docsTags":[{"name":"public"}]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-item.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { ActionBarItem } from '../../action-bar/action-bar.types';\nimport { ListSeparator } from '../../list/list-item.types';\nimport { createRandomString } from '../../../util/random-string';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../../util/make-enter-clickable';\nimport {\n    getIconColor,\n    getIconName,\n    getIconTitle,\n} from '../../icon/get-icon-props';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-action-bar-item',\n    shadow: false,\n    styleUrl: 'action-bar-item.scss',\n})\nexport class ActionBarButton {\n    /**\n     * Item that is placed in the action bar.\n     */\n    @Prop()\n    public item!: ActionBarItem | ListSeparator;\n\n    /**\n     * Fired when a action bar item has been clicked.\n     * @public\n     */\n    @Event()\n    public select: EventEmitter<ActionBarItem | ListSeparator>;\n\n    /**\n     * When the item is displayed in the available width,\n     * this will be `false`.\n     */\n    @Prop({ reflect: true })\n    public isVisible: boolean = true;\n\n    /**\n     * When the item is selected, this will be `true`.\n     */\n    @Prop({ reflect: true })\n    public selected: boolean = false;\n\n    @Element()\n    private readonly host: HTMLLimelActionBarItemElement;\n\n    /**\n     * Used to attach the right tooltip to the right button\n     */\n    private readonly tooltipId: string;\n\n    constructor() {\n        this.tooltipId = createRandomString();\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public componentDidLoad() {\n        this.triggerIconColorWarning();\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    public render() {\n        if (!this.isItem(this.item) && this.item.separator) {\n            return <hr />;\n        }\n\n        return (\n            <button\n                id={this.tooltipId}\n                type=\"button\"\n                onClick={this.handleClick}\n                disabled={this.isDisabled()}\n                class={{\n                    'is-selected': this.isItem(this.item) && this.item.selected,\n                }}\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderTooltip()}\n            </button>\n        );\n    }\n\n    private readonly handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.select.emit(this.item);\n    };\n\n    private isItem(item: ActionBarItem | ListSeparator): item is ActionBarItem {\n        return !('separator' in item);\n    }\n\n    private isDisabled() {\n        if (this.isItem(this.item) && this.item.disabled) {\n            return true;\n        }\n\n        if (!this.isVisible) {\n            return true;\n        }\n    }\n\n    private renderIcon() {\n        if (this.isItem(this.item) && !this.item.icon) {\n            return;\n        }\n\n        if ('icon' in this.item) {\n            const name = getIconName(this.item.icon);\n\n            const color = getIconColor(this.item.icon, this.item.iconColor);\n            const title = getIconTitle(this.item.icon);\n\n            return (\n                <limel-icon\n                    name={name}\n                    aria-label={title}\n                    aria-hidden={title ? null : 'true'}\n                    style={{\n                        '--action-bar-item-icon-color': `${color}`,\n                    }}\n                />\n            );\n        }\n    }\n\n    private renderLabel() {\n        if (!this.isItem(this.item) || this.item.iconOnly) {\n            return;\n        }\n\n        return <span class=\"text\">{this.item.text}</span>;\n    }\n\n    private renderTooltip() {\n        if (!this.isItem(this.item)) {\n            return;\n        }\n\n        return (\n            <limel-tooltip\n                elementId={this.tooltipId}\n                label={this.getTooltipLabel(this.item)}\n                helperLabel={this.item.commandText}\n            />\n        );\n    }\n\n    private getTooltipLabel(item: ActionBarItem): string {\n        const iconTitle = getIconTitle(item.icon);\n        const tooltipLabel = item.text;\n\n        if (iconTitle && tooltipLabel) {\n            return `${iconTitle} ${tooltipLabel}`;\n        }\n\n        return tooltipLabel;\n    }\n\n    private triggerIconColorWarning() {\n        if (this.isItem(this.item) && this.item.iconColor) {\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\"\n            );\n        }\n    }\n}\n"},{"filename":"action-bar-item.scss","type":"scss","source":"@use '../../../style/mixins';\n@use '../../../style/functions';\n\nlimel-action-bar-item {\n    transition: opacity 0.2s ease-in-out;\n    position: relative;\n    display: flex;\n    align-items: center;\n\n    &:not([is-visible]) {\n        opacity: 0;\n        pointer-events: none;\n    }\n}\n\nbutton {\n    all: unset;\n\n    &:not([disabled]) {\n        @include mixins.is-flat-inset-clickable(\n            $color: var(--limel-action-bar-item-text-color),\n            $color--hovered: var(--limel-action-bar-item-text-color),\n            $background-color: var(--action-bar-background-color),\n            $background-color--hovered: var(--action-bar-background-color),\n            $background-color--inset: var(--action-bar-background-color)\n        );\n        @include mixins.visualize-keyboard-focus;\n    }\n\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    width: 100%;\n    min-width: var(--action-bar-item-height);\n    max-width: var(--action-bar-item-max-width, 10rem);\n    height: var(--action-bar-item-height);\n    color: var(--limel-action-bar-item-text-color);\n\n    border-radius: var(--action-bar-item-height);\n    font-size: functions.pxToRem(14);\n    padding: 0 0.25rem;\n\n    &:has(.text) {\n        padding: 0 0.5rem;\n    }\n\n    &[disabled] {\n        opacity: 0.4;\n    }\n\n    &.is-selected {\n        &:not(:hover) {\n            box-shadow: var(--button-shadow-inset);\n        }\n        color: var(--mdc-theme-primary) !important;\n    }\n}\n\n.text {\n    @include mixins.truncate-text();\n    padding: 0 0.25rem;\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--action-bar-item-height) - 0.75rem);\n    height: calc(var(--action-bar-item-height) - 0.75rem);\n    color: var(\n        --action-bar-item-icon-color,\n        var(--limel-action-bar-item-text-color)\n    );\n}\n\nhr {\n    all: unset;\n    width: 1px;\n    height: 1.5rem;\n    border-radius: var(--action-bar-item-height);\n    background-color: var(--limel-action-bar-item-text-color);\n    opacity: 0.2;\n\n    @media (pointer: fine) {\n        margin-right: 0.5rem;\n        margin-left: 0.5rem;\n    }\n}\n\n// 👇 Overflow menu\n\nlimel-menu {\n    --notification-badge-background-color: rgb(var(--contrast-600));\n    --notification-badge-text-color: rgb(var(--contrast-1200));\n\n    &[open] {\n        button {\n            box-shadow: var(--button-shadow-inset);\n        }\n    }\n}\n\nbutton[slot='trigger'] {\n    animation: fade-in ease-out 0.25s;\n    font-size: 0.75rem;\n    font-weight: bold;\n    transform: translate3d(0, 0, 0);\n}\n\n@keyframes fade-in {\n    0% {\n        scale: 0.8;\n        opacity: 0;\n    }\n    100% {\n        scale: 1;\n        opacity: 1;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar-item","filePath":"./src/components/action-bar/action-bar-item/action-bar-overflow-menu.tsx","fileName":"action-bar-overflow-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar-item/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar-item/usage","tag":"limel-action-bar-overflow-menu","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-action-bar"],"dependencies":["limel-icon","limel-menu"],"dependencyGraph":{"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-action-bar":["limel-action-bar-overflow-menu"]},"props":[{"name":"items","type":"(ListSeparator | MenuItem<any>)[]","mutable":false,"reflectToAttr":false,"docs":"List of the items that should be rendered in the overflow menu.","docsTags":[],"values":[{"type":"(ListSeparator"},{"type":"MenuItem<any>)[]"}],"optional":false,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Defines the location that the content of the overflow menu\nappears, in relation to its trigger.\nIt defaults to `bottom-end`, since in normal scenarios\n(for example when the action bar is not floating at the bottom of the screen)\nthis menu is the right-most item in the user interface of the component.","docsTags":[],"default":"'bottom-end'","values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false},{"name":"overFlowIcon","type":"Icon","mutable":false,"reflectToAttr":false,"docs":"Icon to display in the overflow menu trigger.\nIf not provided, the number of items in the overflow menu will be displayed.","docsTags":[],"values":[{"type":"Icon"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"select","detail":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when an item in the action bar overflow menu has been clicked.","docsTags":[{"name":"public"}]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-overflow-menu.tsx","type":"tsx","source":"import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\nimport { ActionBarItem } from '../../action-bar/action-bar.types';\nimport { ListSeparator } from '../../list/list-item.types';\nimport { MenuItem, OpenDirection } from '../../menu/menu.types';\nimport { LimelMenuCustomEvent } from '../../../components';\nimport { Icon } from '../../../global/shared-types/icon.types';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-action-bar-overflow-menu',\n    shadow: false,\n})\nexport class ActionBarOverflowMenu {\n    /**\n     * List of the items that should be rendered in the overflow menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator>;\n\n    /**\n     * Defines the location that the content of the overflow menu\n     * appears, in relation to its trigger.\n     * It defaults to `bottom-end`, since in normal scenarios\n     * (for example when the action bar is not floating at the bottom of the screen)\n     * this menu is the right-most item in the user interface of the component.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom-end';\n\n    /**\n     * Icon to display in the overflow menu trigger.\n     * If not provided, the number of items in the overflow menu will be displayed.\n     */\n    @Prop()\n    public overFlowIcon?: Icon;\n\n    /**\n     * Fired when an item in the action bar overflow menu has been clicked.\n     * @public\n     */\n    @Event()\n    public select: EventEmitter<ActionBarItem>;\n\n    public render() {\n        return [\n            <limel-menu\n                openDirection={this.openDirection}\n                items={this.items}\n                onSelect={this.handleSelect}\n            >\n                <button slot=\"trigger\">\n                    {this.getOverflowTriggerContent()}\n                </button>\n            </limel-menu>,\n        ];\n    }\n\n    private getOverflowTriggerContent = () => {\n        if (this.overFlowIcon) {\n            const { color, name, title } = this.overFlowIcon;\n\n            return (\n                <limel-icon\n                    style={{\n                        color: color,\n                    }}\n                    name={name}\n                    aria-label={title}\n                />\n            );\n        }\n\n        return `+${this.numberOfMenuItems}`;\n    };\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        this.select.emit(event.detail);\n    };\n\n    private get numberOfMenuItems() {\n        return this.items.filter((item) => this.isMenuItem(item)).length;\n    }\n\n    private isMenuItem(item: MenuItem | ListSeparator): item is MenuItem {\n        return !('separator' in item);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar","filePath":"./src/components/ai-avatar/ai-avatar.tsx","fileName":"ai-avatar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/usage","tag":"limel-ai-avatar","overview":"This component displays an avatar, representing Lime AI assistants.\n\n:::warning\nThis is a private component used internally in the Lime's various applications,\nwhich is the reason for having it in Lime Elements —to ease the distribution\nof the component across all our apps.\n\n3rd party developers are not allowed use this component directly.\n:::","usage":{},"docs":"This component displays an avatar, representing Lime AI assistants.\n\n:::warning\nThis is a private component used internally in the Lime's various applications,\nwhich is the reason for having it in Lime Elements —to ease the distribution\nof the component across all our apps.\n\n3rd party developers are not allowed use this component directly.\n:::","docsTags":[{"name":"private"},{"name":"exampleComponent","text":"limel-example-ai-avatar-basic"},{"name":"exampleComponent","text":"limel-example-ai-avatar-colors"}],"encapsulation":"shadow","dependents":["limel-example-ai-avatar-basic","limel-example-ai-avatar-colors"],"dependencies":[],"dependencyGraph":{"limel-example-ai-avatar-basic":["limel-ai-avatar"],"limel-example-ai-avatar-colors":["limel-ai-avatar"]},"props":[{"name":"isThinking","type":"boolean","mutable":false,"attr":"is-thinking","reflectToAttr":true,"docs":"Set to `true` to trigger animations that indicate that the AI is\n\"thinking\" or processing something.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.","docsTags":[],"default":"document.documentElement.lang as Languages","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--ai-avatar-animation-play-state","annotation":"prop","docs":"Set it to `running` to start the animation."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"ai-avatar.tsx","type":"tsx","source":"import { Component, h, Host, Prop } from '@stencil/core';\nimport { Languages } from './../date-picker/date.types';\nimport translate from './../../global/translations';\n\n/**\n * This component displays an avatar, representing Lime AI assistants.\n *\n * :::warning\n * This is a private component used internally in the Lime's various applications,\n * which is the reason for having it in Lime Elements —to ease the distribution\n * of the component across all our apps.\n *\n * 3rd party developers are not allowed use this component directly.\n * :::\n *\n * @private\n * @exampleComponent limel-example-ai-avatar-basic\n * @exampleComponent limel-example-ai-avatar-colors\n */\n@Component({\n    tag: 'limel-ai-avatar',\n    shadow: true,\n    styleUrl: 'ai-avatar.scss',\n})\nexport class AiAvatar {\n    /**\n     * Set to `true` to trigger animations that indicate that the AI is\n     * \"thinking\" or processing something.\n     */\n    @Prop({ reflect: true })\n    public isThinking = false;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = document.documentElement.lang as Languages;\n\n    public render() {\n        return (\n            <Host role=\"img\" aria-label={this.getHostAriaLabel()}>\n                {this.renderCircle('red')}\n                {this.renderCircle('green')}\n                {this.renderCircle('blue')}\n                {this.renderCircle('orange')}\n                <div class=\"core\" />\n                <div class=\"orbitals\" />\n            </Host>\n        );\n    }\n\n    private getHostAriaLabel(): string {\n        let thinkingText = '';\n        if (this.isThinking) {\n            thinkingText = ` (${this.getTranslation('ai-avatar.thinking')})`;\n        }\n\n        return `${this.getTranslation('ai-avatar.label')}${thinkingText}`;\n    }\n\n    private renderCircle(className: string) {\n        return (\n            <svg\n                class={className}\n                viewBox=\"0 0 100 100\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                role=\"presentation\"\n            >\n                <circle\n                    cx=\"50\"\n                    cy=\"50\"\n                    r=\"40\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"6\"\n                />\n            </svg>\n        );\n    }\n\n    private getTranslation = (key: string) => {\n        return translate.get(key, this.language);\n    };\n}\n"},{"filename":"ai-avatar.scss","type":"scss","source":"/**\n* @prop --ai-avatar-animation-play-state: Set it to `running` to start the animation.\n*/\n:host(limel-ai-avatar) {\n    display: flex;\n    justify-content: center;\n    align-self: center;\n    position: relative;\n\n    aspect-ratio: 1;\n    max-width: 10rem;\n    max-height: 8rem;\n    min-width: 1.75rem;\n    min-height: 1.75rem;\n\n    border-radius: 0.5rem;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n:host(limel-ai-avatar[is-thinking]:not([is-thinking='false'])) {\n    --ai-avatar-animation-play-state: running;\n    --ai-avatar-orbitals-opacity: 0.6;\n    --ai-avatar-orbitals-animation-play-state: running;\n}\n\n.core,\n.orbitals {\n    position: absolute;\n    inset: 0;\n    margin: auto;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    aspect-ratio: 1;\n\n    border-radius: 50%;\n}\n\n.core {\n    opacity: 0.3;\n    width: 70%;\n    animation: breathe 3s ease infinite\n        var(--ai-avatar-animation-play-state, paused);\n\n    background-color: rgb(var(--color-glaucous-darker), 0.6);\n    mix-blend-mode: plus-lighter;\n}\n\n.orbitals {\n    mix-blend-mode: plus-lighter;\n    width: clamp(0.375rem, 20%, 3.5rem);\n\n    animation: rotate 5s linear infinite\n        var(--ai-avatar-orbitals-animation-play-state, paused);\n\n    transition: opacity 0.2s ease;\n    opacity: var(--ai-avatar-orbitals-opacity, 0);\n\n    &:after,\n    &:before {\n        content: '';\n        display: block;\n        position: absolute;\n        inset: 0;\n        margin: auto;\n\n        width: clamp(0.125rem, 50%, 0.75rem);\n        aspect-ratio: 1;\n        border-radius: 50%;\n        background-color: rgb(var(--color-glaucous-lighter));\n    }\n    &:before {\n        animation: orbit 1s linear infinite\n            var(--ai-avatar-orbitals-animation-play-state, paused);\n\n        opacity: 0.6;\n        transform-origin: -220% 0;\n        margin-right: -70%;\n    }\n    &:after {\n        animation: orbit 2s linear infinite\n            var(--ai-avatar-orbitals-animation-play-state, paused);\n\n        opacity: 0.8;\n        scale: 0.7;\n        transform-origin: 0% -250%;\n        margin-bottom: -70%;\n    }\n}\n\n@keyframes orbit {\n    0% {\n        transform: rotateZ(0deg) translate3d(0, 0, 0);\n    }\n    100% {\n        transform: rotateZ(360deg) translate3d(0, 0, 0);\n    }\n}\n\n@keyframes breathe {\n    1%,\n    100% {\n        transform: scale(1);\n    }\n    50% {\n        transform: scale(0.86);\n    }\n}\n\n@keyframes rotate {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\nsvg {\n    position: absolute;\n    margin: auto;\n    mix-blend-mode: screen;\n\n    animation-iteration-count: infinite;\n    animation-play-state: var(--ai-avatar-animation-play-state, paused);\n}\n\n.red {\n    rotate: 20deg;\n    color: rgb(var(--color-red-default));\n    animation-name: rotate, scale-circle-one;\n    animation-duration: 5s;\n}\n\n.green {\n    rotate: 36deg;\n    color: rgb(var(--color-green-default));\n    animation-name: rotate, scale-circle-two;\n    animation-duration: 5.5s;\n}\n\n.blue {\n    rotate: 100deg;\n    color: rgb(var(--color-blue-default));\n    animation-name: rotate, scale-circle-three;\n    animation-duration: 4.5s;\n}\n\n.orange {\n    rotate: 165deg;\n    color: rgb(var(--color-orange-default));\n    animation-name: rotate, scale-circle-four;\n    animation-duration: 6.5s;\n}\n\n@keyframes scale-circle-one {\n    0%,\n    100% {\n        transform: scaleX(1) scaleY(0.8);\n    }\n    25%,\n    75% {\n        transform: scaleX(0.8) scaleY(0.9);\n    }\n    50% {\n        transform: scaleX(1) scaleY(0.7);\n    }\n}\n\n@keyframes scale-circle-two {\n    0%,\n    100% {\n        transform: scaleX(0.8) scaleY(1);\n    }\n    25%,\n    75% {\n        transform: scaleX(0.9) scaleY(0.75);\n    }\n    50% {\n        transform: scaleX(0.72) scaleY(1);\n    }\n}\n\n@keyframes scale-circle-three {\n    0%,\n    100% {\n        transform: scaleX(0.9) scaleY(0.8);\n    }\n    50% {\n        transform: scaleX(0.75) scaleY(0.9);\n    }\n}\n\n@keyframes scale-circle-four {\n    0%,\n    100% {\n        transform: scaleX(0.8) scaleY(0.95);\n    }\n    25%,\n    75% {\n        transform: scaleX(0.95) scaleY(0.75);\n    }\n    50% {\n        transform: scaleX(0.75) scaleY(0.95);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge","filePath":"./src/components/badge/badge.tsx","fileName":"badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/usage","tag":"limel-badge","overview":"The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","usage":{},"docs":"The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","docsTags":[{"name":"exampleComponent","text":"limel-example-badge"},{"name":"exampleComponent","text":"limel-example-badge-number"},{"name":"exampleComponent","text":"limel-example-badge-string"}],"encapsulation":"shadow","dependents":["limel-button-group","limel-chart","limel-chip","limel-dock-button","limel-example-badge","limel-example-badge-number","limel-example-badge-string","limel-info-tile","limel-menu","limel-shortcut","limel-tab-bar"],"dependencies":[],"dependencyGraph":{"limel-button-group":["limel-badge"],"limel-chart":["limel-badge"],"limel-chip":["limel-badge"],"limel-dock-button":["limel-badge"],"limel-example-badge":["limel-badge"],"limel-example-badge-number":["limel-badge"],"limel-example-badge-string":["limel-badge"],"limel-info-tile":["limel-badge"],"limel-menu":["limel-badge"],"limel-shortcut":["limel-badge"],"limel-tab-bar":["limel-badge"]},"props":[{"name":"label","type":"number | string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--badge-background-color","annotation":"prop","docs":"badge background color"},{"name":"--badge-max-width","annotation":"prop","docs":"maximum width of the badge, before its text gets truncated"},{"name":"--badge-text-color","annotation":"prop","docs":"badge text color"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge.tsx","type":"tsx","source":"import { Component, Prop, h, Host } from '@stencil/core';\nimport { abbreviate } from './format';\n\n/**\n * The Badge component can be used to display a notification badge,\n * optionally with a number or a text label.\n *\n * @exampleComponent limel-example-badge\n * @exampleComponent limel-example-badge-number\n * @exampleComponent limel-example-badge-string\n */\n@Component({\n    tag: 'limel-badge',\n    styleUrl: 'badge.scss',\n    shadow: true,\n})\nexport class Badge {\n    /**\n     * Label to display in the badge.\n     * Numeric labels larger than 999 will be rounded and abbreviated.\n     * String labels get truncated if their length is longer than\n     * six characters.\n     */\n    @Prop({ reflect: true })\n    public label?: number | string;\n\n    public render() {\n        return (\n            <Host\n                title={this.labelIsLarge() ? this.label : ''}\n                class={{\n                    'has-large-label': this.labelIsLarge(),\n                }}\n            >\n                <span>{this.renderLabel()}</span>\n            </Host>\n        );\n    }\n\n    private renderLabel() {\n        if (typeof this.label === 'number') {\n            return abbreviate(this.label);\n        }\n\n        return this.label;\n    }\n\n    private labelIsLarge() {\n        const largeNumericLabel = 999;\n        const largeStringLabel = 6;\n        if (\n            (typeof this.label === 'number' &&\n                this.label > largeNumericLabel) ||\n            (typeof this.label === 'string' &&\n                this.label.length > largeStringLabel)\n        ) {\n            return true;\n        }\n    }\n}\n"},{"filename":"badge.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n/**\n * @prop --badge-background-color: badge background color\n * @prop --badge-text-color: badge text color\n * @prop --badge-max-width: maximum width of the badge, before its text gets truncated\n */\n\n:host([hidden]) {\n    display: none;\n}\n\n:host(limel-badge) {\n    --limel-min-badge-size: 1rem;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    min-height: var(--limel-min-badge-size);\n    min-width: var(--limel-min-badge-size);\n}\n\nspan {\n    cursor: default;\n    box-sizing: border-box;\n\n    @include mixins.truncate-text;\n    text-align: center;\n    font-size: functions.pxToRem(11);\n    line-height: var(--limel-min-badge-size);\n\n    color: var(--badge-text-color, rgb(var(--contrast-1200)));\n\n    border-radius: var(--limel-min-badge-size);\n    max-height: var(--limel-min-badge-size);\n    min-width: 0.5rem;\n    min-height: 0.5rem;\n\n    background-color: var(--badge-background-color, rgb(var(--contrast-500)));\n\n    &:not(:empty) {\n        min-width: var(\n            --limel-min-badge-size\n        ); // ensures that a badge with only one character rendered as perfect circle\n        max-width: var(--badge-max-width, 2.75rem);\n        padding: 0 functions.pxToRem(4.5);\n    }\n}\n\n:host(.has-large-label) {\n    span {\n        cursor: help;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/banner","filePath":"./src/components/banner/banner.tsx","fileName":"banner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/banner/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/banner/usage","tag":"limel-banner","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-banner"},{"name":"slot","text":"buttons - Buttons to show in the banner"}],"encapsulation":"shadow","dependents":["limel-example-banner"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-banner":["limel-icon"],"limel-example-banner":["limel-banner"]},"props":[{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Set icon for the banner","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"message","type":"string","mutable":false,"attr":"message","reflectToAttr":true,"docs":"The text to show on the banner.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[{"name":"close","returns":{"type":"Promise<void>","docs":""},"signature":"close() => Promise<void>","parameters":[],"docs":"Close the banner","docsTags":[]},{"name":"open","returns":{"type":"Promise<void>","docs":""},"signature":"open() => Promise<void>","parameters":[],"docs":"Open the banner","docsTags":[]}],"events":[],"styles":[{"name":"--banner-icon-background-color","annotation":"prop","docs":"Background color of the banner icon."},{"name":"--banner-icon-fill-color","annotation":"prop","docs":"Color of the banner icon."}],"slots":[{"name":"buttons","docs":"Buttons to show in the banner"}],"parts":[],"listeners":[],"sources":[{"filename":"banner.tsx","type":"tsx","source":"import { Component, h, Method, Prop, State } from '@stencil/core';\n\n/**\n * @exampleComponent limel-example-banner\n * @slot buttons - Buttons to show in the banner\n */\n@Component({\n    tag: 'limel-banner',\n    shadow: true,\n    styleUrl: 'banner.scss',\n})\nexport class Banner {\n    /**\n     * The text to show on the banner.\n     */\n    @Prop({ reflect: true })\n    public message: string;\n\n    /**\n     * Set icon for the banner\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    @State()\n    private isOpen = false;\n\n    /**\n     * Open the banner\n     */\n    @Method()\n    public async open() {\n        this.isOpen = true;\n    }\n\n    /**\n     * Close the banner\n     */\n    @Method()\n    public async close() {\n        this.isOpen = false;\n    }\n\n    public render() {\n        return (\n            <div\n                class={`lime-banner ${this.isOpen ? 'lime-banner--open' : ''}`}\n            >\n                <div class=\"lime-banner__surface\">\n                    <div class=\"lime-banner__content\">\n                        <div class=\"icon-message\">\n                            {this.renderIcon()}\n                            <div>{this.message}</div>\n                        </div>\n                        <div class=\"lime-banner__actions\">\n                            <slot name=\"buttons\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderIcon(): HTMLElement {\n        if (!this.icon) {\n            return;\n        }\n\n        return (\n            <div class=\"lime-banner__icon\">\n                <limel-icon name={this.icon} badge={true} size=\"large\" />\n            </div>\n        );\n    }\n}\n"},{"filename":"banner.scss","type":"scss","source":"@use '../../style/functions';\n\n/**\n * @prop --banner-icon-fill-color: Color of the banner icon.\n * @prop --banner-icon-background-color: Background color of the banner icon.\n */\n\n.lime-banner {\n    min-height: 3.25rem;\n    display: none;\n    background-color: rgba(var(--contrast-100), 0.7);\n    backdrop-filter: blur(functions.pxToRem(5));\n    box-shadow: var(--shadow-depth-16);\n\n    &.lime-banner--open {\n        display: block;\n        .lime-banner__surface {\n            opacity: 1;\n        }\n    }\n    .lime-banner__surface {\n        display: flex;\n        justify-content: center;\n        box-sizing: border-box;\n        opacity: 0;\n    }\n\n    .lime-banner__content {\n        display: flex;\n        align-items: center;\n        align-content: stretch;\n        padding: functions.pxToRem(16);\n        flex-wrap: wrap;\n    }\n\n    .icon-message {\n        display: flex;\n        align-items: center;\n    }\n\n    div[class^='mdc-typography'] {\n        color: rgb(var(--contrast-1200));\n    }\n\n    .lime-banner__icon {\n        margin: 0 functions.pxToRem(10);\n        align-self: flex-start;\n    }\n\n    .lime-banner__actions {\n        margin-left: functions.pxToRem(50);\n        display: flex;\n        justify-content: flex-end;\n    }\n\n    limel-icon {\n        color: var(--banner-icon-fill-color, rgb(var(--contrast-100)));\n        background-color: var(\n            --banner-icon-background-color,\n            rgb(var(--contrast-800))\n        );\n    }\n}\n@media screen and (max-width: 760px) {\n    .lime-banner__content {\n        flex-direction: column;\n        gap: 0.5rem;\n    }\n    .icon-message {\n        display: flex;\n        align-items: center;\n    }\n    .lime-banner__actions {\n        margin-left: 0;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs","filePath":"./src/components/breadcrumbs/breadcrumbs.tsx","fileName":"breadcrumbs.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/usage","tag":"limel-breadcrumbs","overview":"A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\nbefore ending up where they are right now, in a website or an application.\n\nThese \"places\" can be for example _pages_ of a website, which are hierarchically\nlaid out before the current page that the user is looking at.\nThey could also be _steps_ which the user has gone through, which perhaps have no\nhierarchical relation with each other, but has eventually led the user \"here\".\n\n:::note\n- Where the user currently is, is always the last step of the breadcrumb.\n- A breadcrumbs never shows where users can go after this place.\nIt only illustrates where user has been before ending up here.\nIf the path that a user can take is not changing and if next steps are clear,\nyou can use the [Progress flow component](#/component/limel-progress-flow) instead.\n:::\n\nBreadcrumbs are often placed horizontally before the main content of the current screen.","usage":{},"docs":"A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\nbefore ending up where they are right now, in a website or an application.\n\nThese \"places\" can be for example _pages_ of a website, which are hierarchically\nlaid out before the current page that the user is looking at.\nThey could also be _steps_ which the user has gone through, which perhaps have no\nhierarchical relation with each other, but has eventually led the user \"here\".\n\n:::note\n- Where the user currently is, is always the last step of the breadcrumb.\n- A breadcrumbs never shows where users can go after this place.\nIt only illustrates where user has been before ending up here.\nIf the path that a user can take is not changing and if next steps are clear,\nyou can use the [Progress flow component](#/component/limel-progress-flow) instead.\n:::\n\nBreadcrumbs are often placed horizontally before the main content of the current screen.","docsTags":[{"name":"exampleComponent","text":"limel-example-breadcrumbs-links"},{"name":"exampleComponent","text":"limel-example-breadcrumbs-buttons"},{"name":"exampleComponent","text":"limel-example-breadcrumbs-icons"},{"name":"exampleComponent","text":"limel-example-breadcrumbs-divider"},{"name":"exampleComponent","text":"limel-example-breadcrumbs-icon-color"},{"name":"exampleComponent","text":"limel-example-breadcrumbs-styling"}],"encapsulation":"shadow","dependents":["limel-example-breadcrumbs-buttons","limel-example-breadcrumbs-divider","limel-example-breadcrumbs-icon-color","limel-example-breadcrumbs-icons","limel-example-breadcrumbs-links","limel-example-breadcrumbs-styling","limel-menu"],"dependencies":["limel-icon","limel-tooltip"],"dependencyGraph":{"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-breadcrumbs-buttons":["limel-breadcrumbs"],"limel-example-breadcrumbs-divider":["limel-breadcrumbs"],"limel-example-breadcrumbs-icon-color":["limel-breadcrumbs"],"limel-example-breadcrumbs-icons":["limel-breadcrumbs"],"limel-example-breadcrumbs-links":["limel-breadcrumbs"],"limel-example-breadcrumbs-styling":["limel-breadcrumbs"],"limel-menu":["limel-breadcrumbs"]},"props":[{"name":"divider","type":"string","mutable":false,"attr":"divider","reflectToAttr":false,"docs":"The visual divider that separates items.\nIt must be a single character such as `-` or `,`.","docsTags":[],"default":"'›'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"items","type":"BreadcrumbsItem[]","mutable":false,"reflectToAttr":false,"docs":"List of items in the breadcrumbs,\neach representing a step or a page.","docsTags":[],"values":[{"type":"BreadcrumbsItem[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"select","detail":"BreadcrumbsItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when clicking on buttons (not links!)\ninside the breadcrumbs.","docsTags":[]}],"styles":[{"name":"--breadcrumbs-item-max-width","annotation":"prop","docs":"Maximum width of a button in the breadcrumbs. Defaults to `10rem`. Keep in mind that the buttons should not appear too big."},{"name":"--breadcrumbs-item-text-color","annotation":"prop","docs":"Text color of breadcrumbs items, defaults to `--contrast-1100`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"breadcrumbs.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    h,\n    Event,\n    EventEmitter,\n    Prop,\n} from '@stencil/core';\nimport { BreadcrumbsItem } from './breadcrumbs.types';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { createRandomString } from '../../util/random-string';\nimport { getIconColor, getIconName } from '../icon/get-icon-props';\n\n/**\n * A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\n * before ending up where they are right now, in a website or an application.\n *\n * These \"places\" can be for example _pages_ of a website, which are hierarchically\n * laid out before the current page that the user is looking at.\n * They could also be _steps_ which the user has gone through, which perhaps have no\n * hierarchical relation with each other, but has eventually led the user \"here\".\n *\n * :::note\n * - Where the user currently is, is always the last step of the breadcrumb.\n * - A breadcrumbs never shows where users can go after this place.\n * It only illustrates where user has been before ending up here.\n * If the path that a user can take is not changing and if next steps are clear,\n * you can use the [Progress flow component](#/component/limel-progress-flow) instead.\n * :::\n *\n * Breadcrumbs are often placed horizontally before the main content of the current screen.\n *\n * @exampleComponent limel-example-breadcrumbs-links\n * @exampleComponent limel-example-breadcrumbs-buttons\n * @exampleComponent limel-example-breadcrumbs-icons\n * @exampleComponent limel-example-breadcrumbs-divider\n * @exampleComponent limel-example-breadcrumbs-icon-color\n * @exampleComponent limel-example-breadcrumbs-styling\n */\n\n@Component({\n    tag: 'limel-breadcrumbs',\n    shadow: true,\n    styleUrl: 'breadcrumbs.scss',\n})\nexport class Breadcrumbs {\n    /**\n     * List of items in the breadcrumbs,\n     * each representing a step or a page.\n     */\n    @Prop()\n    public items: BreadcrumbsItem[];\n\n    /**\n     * The visual divider that separates items.\n     * It must be a single character such as `-` or `,`.\n     */\n    @Prop()\n    public divider: string = '›';\n\n    /**\n     * Fired when clicking on buttons (not links!)\n     * inside the breadcrumbs.\n     */\n    @Event()\n    public select: EventEmitter<BreadcrumbsItem>;\n\n    @Element()\n    private host: HTMLLimelBreadcrumbsElement;\n\n    public render() {\n        return (\n            <ol\n                role=\"navigation\"\n                aria-label=\"Breadcrumb\"\n                style={{ '--limel-breadcrumbs-divider': `'${this.divider}'` }}\n            >\n                {this.renderSteps()}\n                {this.renderLastStep()}\n            </ol>\n        );\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    private renderSteps = () => {\n        const allStepsWithoutLast = this.items.slice(0, -1);\n\n        if (this.areItemsLinks(this.items)) {\n            return allStepsWithoutLast.map(this.renderAsLink);\n        }\n\n        return allStepsWithoutLast.map(this.renderAsButton);\n    };\n\n    private renderAsButton = (item: BreadcrumbsItem) => {\n        const tooltipId = createRandomString();\n\n        return [\n            <button\n                role=\"listitem\"\n                id={tooltipId}\n                class=\"step\"\n                onClick={this.handleClick(item)}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </button>,\n            this.renderTooltip(item, tooltipId),\n        ];\n    };\n\n    private renderAsLink = (item: BreadcrumbsItem) => {\n        const tooltipId = createRandomString();\n\n        return [\n            <a\n                role=\"listitem\"\n                id={tooltipId}\n                class=\"step\"\n                href={item.link.href}\n                title={item.link.title}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </a>,\n            this.renderTooltip(item, tooltipId),\n        ];\n    };\n\n    private renderLastStep = () => {\n        const lastItem = this.items.slice(-1);\n\n        return (\n            <li\n                class=\"last step\"\n                tabindex=\"-1\"\n                aria-current={this.areItemsLinks(this.items) ? 'page' : 'step'}\n            >\n                {this.renderIcon(lastItem[0])}\n                <span class=\"text\">{lastItem[0].text}</span>\n            </li>\n        );\n    };\n\n    private renderIcon = (item: BreadcrumbsItem) => {\n        const name = getIconName(item.icon);\n        const color = getIconColor(item.icon);\n\n        if (!name) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                style={{\n                    color: `${color}`,\n                }}\n                name={name}\n            />\n        );\n    };\n\n    private renderLabel = (item: BreadcrumbsItem) => {\n        if (item.type === 'icon-only') {\n            return;\n        }\n\n        return <span class=\"text\">{item.text}</span>;\n    };\n\n    private renderTooltip = (item: BreadcrumbsItem, tooltipId: string) => {\n        if (item.type === 'icon-only') {\n            return <limel-tooltip elementId={tooltipId} label={item.text} />;\n        }\n    };\n\n    private areItemsLinks = (items: BreadcrumbsItem[]) => {\n        return items.some((item) => 'link' in item);\n    };\n\n    private handleClick = (item: BreadcrumbsItem) => (event: MouseEvent) => {\n        event.stopPropagation();\n        this.select.emit(item);\n    };\n}\n"},{"filename":"breadcrumbs.scss","type":"scss","source":"@use '../../style/mixins';\n\n/**\n* @prop --breadcrumbs-item-text-color: Text color of breadcrumbs items, defaults to `--contrast-1100`.\n* @prop --breadcrumbs-item-max-width: Maximum width of a button in the breadcrumbs. Defaults to `10rem`. Keep in mind that the buttons should not appear too big.\n*/\n\n$padding: 0.5rem;\n\n:host(limel-breadcrumbs) {\n    --limel-breadcrumbs-item-height: 1.5rem;\n    --limel-breadcrumbs-gap: 0.75rem;\n    --limel-breadcrumbs-gap: 0.75rem;\n    --limel-breadcrumbs-item-text-color: var(\n        --breadcrumbs-item-text-color,\n        rgb(var(--contrast-1500))\n    );\n    @include mixins.fade-out-overflowed-content-on-edges(horizontally);\n    --limel-left-edge-fade-width: #{$padding};\n    --limel-right-edge-fade-width: #{$padding};\n}\n\nol,\nli,\n.step {\n    all: unset;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nol {\n    padding: $padding; // needed for the focus and hover effects, since we are using overflow\n    gap: var(--limel-breadcrumbs-gap);\n}\n\n.step {\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: var(--breadcrumbs-item-max-width, 10rem);\n    height: var(--limel-breadcrumbs-item-height);\n\n    color: var(--limel-breadcrumbs-item-text-color);\n    border-radius: 100vw;\n    font-size: 0.875rem;\n    padding: 0 0.25rem;\n\n    &:not(:has(.text)) {\n        padding: 0 0.125rem;\n    }\n\n    &:not(.last) {\n        @include mixins.visualize-keyboard-focus;\n\n        &:after {\n            content: var(--limel-breadcrumbs-divider);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            width: var(--limel-breadcrumbs-gap);\n\n            position: absolute;\n            top: 0;\n            right: calc(var(--limel-breadcrumbs-gap) * -1);\n            bottom: 0;\n            left: auto;\n\n            text-align: center;\n        }\n    }\n}\n\na.step {\n    @include mixins.hyperlink($color: var(--limel-breadcrumbs-item-text-color));\n}\n\nbutton.step {\n    &:not(.last) {\n        @include mixins.is-flat-clickable(\n            $color: var(--limel-breadcrumbs-item-text-color)\n        );\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n    height: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n}\n\n.text {\n    @include mixins.truncate-text;\n    padding: 0 0.25rem;\n}\n\n.last {\n    opacity: 0.7;\n}\n\n// LAYOUT:\n// The code below makes sure that the last item is always visible,\n// and previous items overflow out of the container\n// while keeping the container scrollable.\n// All without any additional scripts in the component code.\n\n:host(limel-breadcrumbs) {\n    box-sizing: border-box;\n\n    display: flex;\n    width: 100%;\n    overflow-x: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    direction: rtl;\n}\n\nol {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: flex-end;\n    margin-right: auto;\n}\n\n.step {\n    direction: ltr;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button","filePath":"./src/components/button/button.tsx","fileName":"button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/usage","tag":"limel-button","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-button-basic"},{"name":"exampleComponent","text":"limel-example-button-primary"},{"name":"exampleComponent","text":"limel-example-button-outlined"},{"name":"exampleComponent","text":"limel-example-button-disabled"},{"name":"exampleComponent","text":"limel-example-button-icon"},{"name":"exampleComponent","text":"limel-example-button-loading"},{"name":"exampleComponent","text":"limel-example-button-click-success"},{"name":"exampleComponent","text":"limel-example-button-click-fail"},{"name":"exampleComponent","text":"limel-example-button-reduce-presence"},{"name":"exampleComponent","text":"limel-example-button-colors"},{"name":"exampleComponent","text":"limel-example-button-composite"}],"encapsulation":"shadow","dependents":["limel-example-action-buttons-choosing-explicit-labels","limel-example-action-buttons-choosing-labels","limel-example-action-buttons-colors-do-dont","limel-example-action-buttons-icon-color","limel-example-action-buttons-placement","limel-example-action-buttons-primary-secondary","limel-example-action-buttons-primary-secondary-reversed","limel-example-action-buttons-primary-secondary-reversed-colors","limel-example-action-buttons-third-alternative","limel-example-banner","limel-example-button-basic","limel-example-button-click-fail","limel-example-button-click-success","limel-example-button-colors","limel-example-button-composite","limel-example-button-disabled","limel-example-button-disabled-vs-hidden","limel-example-button-icon","limel-example-button-loading","limel-example-button-outlined","limel-example-button-primary","limel-example-button-reduce-presence","limel-example-collapsible-section-external-control","limel-example-colors-in-components","limel-example-custom-error-message","limel-example-date-picker-programmatic-change","limel-example-dialog","limel-example-dialog-action-buttons","limel-example-dialog-closing-actions","limel-example-dialog-form","limel-example-dialog-fullscreen","limel-example-dialog-heading","limel-example-dialog-heading-actions","limel-example-dialog-nested-close-events","limel-example-dialog-size","limel-example-file-input","limel-example-file-input-type-filtering","limel-example-form","limel-example-form-layout","limel-example-form-span-fields","limel-example-input-field-focus","limel-example-menu-badge-icons","limel-example-menu-basic","limel-example-menu-composite","limel-example-menu-disabled","limel-example-menu-grid","limel-example-menu-hotkeys","limel-example-menu-icons","limel-example-menu-open-direction","limel-example-menu-open-sub-menu-programmatically","limel-example-menu-searchable","limel-example-menu-secondary-text","limel-example-menu-separators","limel-example-menu-sub-menu-lazy-loading","limel-example-menu-sub-menu-lazy-loading-infinite","limel-example-menu-sub-menus","limel-example-menu-surface-width","limel-example-popover-basic","limel-example-popover-styling","limel-example-portal-basic","limel-example-select-change-options","limel-example-select-dialog","limel-example-snackbar","limel-example-snackbar-dismissible","limel-example-snackbar-persistent","limel-example-snackbar-persistent-non-dismissible","limel-example-snackbar-with-action","limel-example-snackbar-with-changing-messages","limel-example-switch-vs-checkbox","limel-example-tab-panel-content","limel-example-table-selectable-rows","limel-example-text-editor-as-form-component","limel-example-tooltip-basic","limel-example-tooltip-composite","limel-example-tooltip-declutter","limel-snackbar","limel-split-button","limel-text-editor-link-menu"],"dependencies":["limel-icon","limel-spinner"],"dependencyGraph":{"limel-button":["limel-icon","limel-spinner"],"limel-example-action-buttons-choosing-explicit-labels":["limel-button"],"limel-example-action-buttons-choosing-labels":["limel-button"],"limel-example-action-buttons-colors-do-dont":["limel-button"],"limel-example-action-buttons-icon-color":["limel-button"],"limel-example-action-buttons-placement":["limel-button"],"limel-example-action-buttons-primary-secondary":["limel-button"],"limel-example-action-buttons-primary-secondary-reversed":["limel-button"],"limel-example-action-buttons-primary-secondary-reversed-colors":["limel-button"],"limel-example-action-buttons-third-alternative":["limel-button"],"limel-example-banner":["limel-button"],"limel-example-button-basic":["limel-button"],"limel-example-button-click-fail":["limel-button"],"limel-example-button-click-success":["limel-button"],"limel-example-button-colors":["limel-button"],"limel-example-button-composite":["limel-button"],"limel-example-button-disabled":["limel-button"],"limel-example-button-disabled-vs-hidden":["limel-button"],"limel-example-button-icon":["limel-button"],"limel-example-button-loading":["limel-button"],"limel-example-button-outlined":["limel-button"],"limel-example-button-primary":["limel-button"],"limel-example-button-reduce-presence":["limel-button"],"limel-example-collapsible-section-external-control":["limel-button"],"limel-example-colors-in-components":["limel-button"],"limel-example-custom-error-message":["limel-button"],"limel-example-date-picker-programmatic-change":["limel-button"],"limel-example-dialog":["limel-button"],"limel-example-dialog-action-buttons":["limel-button"],"limel-example-dialog-closing-actions":["limel-button"],"limel-example-dialog-form":["limel-button"],"limel-example-dialog-fullscreen":["limel-button"],"limel-example-dialog-heading":["limel-button"],"limel-example-dialog-heading-actions":["limel-button"],"limel-example-dialog-nested-close-events":["limel-button"],"limel-example-dialog-size":["limel-button"],"limel-example-file-input":["limel-button"],"limel-example-file-input-type-filtering":["limel-button"],"limel-example-form":["limel-button"],"limel-example-form-layout":["limel-button"],"limel-example-form-span-fields":["limel-button"],"limel-example-input-field-focus":["limel-button"],"limel-example-menu-badge-icons":["limel-button"],"limel-example-menu-basic":["limel-button"],"limel-example-menu-composite":["limel-button"],"limel-example-menu-disabled":["limel-button"],"limel-example-menu-grid":["limel-button"],"limel-example-menu-hotkeys":["limel-button"],"limel-example-menu-icons":["limel-button"],"limel-example-menu-open-direction":["limel-button"],"limel-example-menu-open-sub-menu-programmatically":["limel-button"],"limel-example-menu-searchable":["limel-button"],"limel-example-menu-secondary-text":["limel-button"],"limel-example-menu-separators":["limel-button"],"limel-example-menu-sub-menu-lazy-loading":["limel-button"],"limel-example-menu-sub-menu-lazy-loading-infinite":["limel-button"],"limel-example-menu-sub-menus":["limel-button"],"limel-example-menu-surface-width":["limel-button"],"limel-example-popover-basic":["limel-button"],"limel-example-popover-styling":["limel-button"],"limel-example-portal-basic":["limel-button"],"limel-example-select-change-options":["limel-button"],"limel-example-select-dialog":["limel-button"],"limel-example-snackbar":["limel-button"],"limel-example-snackbar-dismissible":["limel-button"],"limel-example-snackbar-persistent":["limel-button"],"limel-example-snackbar-persistent-non-dismissible":["limel-button"],"limel-example-snackbar-with-action":["limel-button"],"limel-example-snackbar-with-changing-messages":["limel-button"],"limel-example-switch-vs-checkbox":["limel-button"],"limel-example-tab-panel-content":["limel-button"],"limel-example-table-selectable-rows":["limel-button"],"limel-example-text-editor-as-form-component":["limel-button"],"limel-example-tooltip-basic":["limel-button"],"limel-example-tooltip-composite":["limel-button"],"limel-example-tooltip-declutter":["limel-button"],"limel-snackbar":["limel-button"],"limel-split-button":["limel-button"],"limel-text-editor-link-menu":["limel-button"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"Icon | string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Set icon for the button","docsTags":[],"values":[{"type":"Icon"},{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show on the button.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":true,"docs":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"loadingFailed","type":"boolean","mutable":false,"attr":"loading-failed","reflectToAttr":true,"docs":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"outlined","type":"boolean","mutable":false,"attr":"outlined","reflectToAttr":true,"docs":"Set to `true` to make the button outlined.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"primary","type":"boolean","mutable":false,"attr":"primary","reflectToAttr":true,"docs":"Set to `true` to make the button primary.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button.tsx","type":"tsx","source":"import { Component, h, Prop, State, Watch, Element, Host } from '@stencil/core';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { getIconName, getIconTitle } from '../icon/get-icon-props';\n\n/**\n * @exampleComponent limel-example-button-basic\n * @exampleComponent limel-example-button-primary\n * @exampleComponent limel-example-button-outlined\n * @exampleComponent limel-example-button-disabled\n * @exampleComponent limel-example-button-icon\n * @exampleComponent limel-example-button-loading\n * @exampleComponent limel-example-button-click-success\n * @exampleComponent limel-example-button-click-fail\n * @exampleComponent limel-example-button-reduce-presence\n * @exampleComponent limel-example-button-colors\n * @exampleComponent limel-example-button-composite\n */\n@Component({\n    tag: 'limel-button',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'button.scss',\n})\nexport class Button {\n    /**\n     * The text to show on the button.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to make the button primary.\n     */\n    @Prop({ reflect: true })\n    public primary = false;\n\n    /**\n     * Set to `true` to make the button outlined.\n     */\n    @Prop({ reflect: true })\n    public outlined = false;\n\n    /**\n     * Set icon for the button\n     */\n    @Prop({ reflect: true })\n    public icon: string | Icon;\n\n    /**\n     * Set to `true` to disable the button.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to put the button in the `loading` state.\n     * This also disables the button.\n     */\n    @Prop({ reflect: true })\n    public loading = false;\n\n    /**\n     * Set to `true` to indicate failure instead of success when the button is\n     * no longer in the `loading` state.\n     */\n    @Prop({ reflect: true })\n    public loadingFailed = false;\n\n    @State()\n    private justLoaded = false;\n\n    @Element()\n    private host: HTMLElement;\n\n    private justLoadedTimeout?: number;\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    public render() {\n        return (\n            <Host onClick={this.filterClickWhenDisabled}>\n                <button\n                    class={{\n                        loading: this.loading,\n                        'just-loaded': this.justLoaded && !this.loadingFailed,\n                        'just-failed': this.justLoaded && this.loadingFailed,\n                        outlined: this.outlined,\n                    }}\n                    disabled={this.disabled || this.loading}\n                    aria-busy={this.loading ? 'true' : 'false'}\n                    aria-live=\"polite\"\n                >\n                    {this.renderIcon(this.icon)}\n                    {this.renderLabel()}\n                    {this.renderSpinner()}\n                    <svg viewBox=\"0 0 30 30\">{this.renderLoadingIcons()}</svg>\n                </button>\n            </Host>\n        );\n    }\n\n    @Watch('loading')\n    protected loadingWatcher(newValue: boolean, oldValue: boolean) {\n        const hasFinishedLoading = this.hasFinishedLoading(newValue, oldValue);\n        if (hasFinishedLoading) {\n            this.handleLoadingFinished();\n        } else if (newValue) {\n            this.handleLoadingStarted();\n        }\n    }\n\n    private hasFinishedLoading(newValue: boolean, oldValue: boolean) {\n        return oldValue && !newValue;\n    }\n\n    private handleLoadingFinished() {\n        this.justLoaded = true;\n        const TIMEOUT = 2000;\n        this.justLoadedTimeout = window.setTimeout(() => {\n            this.justLoaded = false;\n        }, TIMEOUT);\n    }\n\n    private handleLoadingStarted() {\n        this.justLoaded = false;\n        window.clearTimeout(this.justLoadedTimeout);\n    }\n\n    private renderLoadingIcons() {\n        if (this.loadingFailed) {\n            return [\n                <line x1=\"9\" y1=\"9\" x2=\"21\" y2=\"21\" />,\n                <line x1=\"21\" y1=\"9\" x2=\"9\" y2=\"21\" />,\n            ];\n        }\n\n        return [\n            <line x1=\"8\" y1=\"14\" x2=\"15\" y2=\"20\" />,\n            <line x1=\"23\" y1=\"9\" x2=\"14\" y2=\"20\" />,\n        ];\n    }\n\n    private renderIcon(icon?: string | Icon) {\n        const iconName = getIconName(icon);\n        if (!iconName) {\n            return;\n        }\n\n        const title = getIconTitle(icon);\n\n        if (!this.label && !title) {\n            const WARNING_MESSAGE =\n                '⚠️ Accessibility warning: `limel-button` has no `label` and its `icon` has no `title`. ' +\n                'This creates an inaccessible button for screen reader users. ' +\n                'Please add either a `label`, a `title` to the `icon`, or use a `limel-tooltip`. ' +\n                'See https://lundalogik.github.io/lime-elements/versions/latest/#/component/limel-button/ ' +\n                'for more information.';\n\n            console.warn(WARNING_MESSAGE);\n        }\n\n        let iconColor: string | undefined;\n\n        if (typeof icon === 'object') {\n            iconColor = icon.color;\n        }\n\n        const iconProps = {\n            role: 'presentation',\n            name: iconName,\n            'aria-label': title,\n            'aria-hidden': title ? null : 'true', // Use null instead of 'false' to remove attribute\n            style: {\n                color: iconColor,\n            },\n        };\n\n        return <limel-icon {...iconProps} />;\n    }\n\n    private renderLabel() {\n        if (!this.label) {\n            return;\n        }\n\n        return <span class=\"label\">{this.label}</span>;\n    }\n\n    private renderSpinner() {\n        if (!this.loading) {\n            return;\n        }\n\n        return <limel-spinner limeBranded={false} />;\n    }\n\n    private filterClickWhenDisabled = (e) => {\n        if (this.disabled) {\n            e.preventDefault();\n        }\n    };\n}\n"},{"filename":"button.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n:host {\n    display: inline-block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n@include mixins.visualize-aria-expanded('button');\n\nbutton.mdc-button {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\nbutton {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.125rem;\n\n    border: none;\n    border-radius: 0.4rem;\n    padding: {\n        top: 0;\n        right: var(--button-padding-right, 0.5rem);\n        bottom: 0;\n        left: var(--button-padding-left, 0.5rem);\n    }\n\n    min-height: 2.25rem;\n    width: 100%;\n\n    &:disabled {\n        cursor: not-allowed;\n\n        &.outlined {\n            border-color: rgba(var(--contrast-1700), 0.2);\n        }\n    }\n\n    &:not(:disabled) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-elevated-clickable();\n    }\n\n    :host(limel-button[primary]) & {\n        &:not(:disabled) {\n            color: var(--mdc-theme-on-primary, rgb(var(--color-white)));\n            background-color: var(\n                --mdc-theme-primary,\n                rgb(var(--color-teal-default))\n            );\n        }\n        &:disabled {\n            background-color: rgba(var(--contrast-1700), 0.15);\n        }\n    }\n\n    :host(limel-button:not([primary])) & {\n        &:not(:disabled) {\n            color: var(--mdc-theme-primary, rgb(var(--color-teal-default)));\n        }\n        &:disabled {\n            color: rgba(var(--contrast-1600), 0.37);\n            background-color: rgba(var(--contrast-1600), 0.1);\n        }\n    }\n}\n\n.label {\n    font-size: 0.875rem;\n    font-weight: 600;\n    letter-spacing: functions.pxToRem(0.5);\n    padding: 0 0.25rem;\n}\n\nlimel-spinner {\n    position: absolute;\n}\n\nlimel-icon {\n    width: 1.25rem;\n    flex-shrink: 0;\n    vertical-align: top;\n}\n\nsvg {\n    height: functions.pxToRem(30);\n    opacity: 0;\n    pointer-events: none;\n    position: absolute;\n    width: functions.pxToRem(30);\n\n    line {\n        stroke: rgb(var(--contrast-600));\n        stroke-width: 2;\n    }\n}\n\nlimel-icon,\n.label,\nlimel-spinner,\nsvg {\n    transition: opacity 300ms ease-in-out;\n}\n\n.loading {\n    limel-icon,\n    .label {\n        opacity: 0;\n    }\n    limel-spinner {\n        opacity: 1;\n    }\n}\n\n.just-loaded,\n.just-failed {\n    limel-icon,\n    .label {\n        opacity: 0;\n    }\n    svg {\n        opacity: 1;\n    }\n}\n\n.just-failed {\n    background-color: var(--lime-error-text-color) !important;\n    animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n}\n\n.outlined {\n    border: 1px solid;\n    border-color: var(--mdc-theme-primary);\n}\n\n@keyframes shake {\n    10%,\n    90% {\n        transform: translate3d(#{functions.pxToRem(-1)}, 0, 0);\n    }\n\n    20%,\n    80% {\n        transform: translate3d(#{functions.pxToRem(2)}, 0, 0);\n    }\n\n    30%,\n    50%,\n    70% {\n        transform: translate3d(#{functions.pxToRem(-3)}, 0, 0);\n    }\n\n    40%,\n    60% {\n        transform: translate3d(#{functions.pxToRem(3)}, 0, 0);\n    }\n}\n\n@import './partial-styles/_has-reduced-presence';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group","filePath":"./src/components/button-group/button-group.tsx","fileName":"button-group.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/usage","tag":"limel-button-group","overview":"A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","usage":{},"docs":"A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","docsTags":[{"name":"exampleComponent","text":"limel-example-button-group-icons"},{"name":"exampleComponent","text":"limel-example-button-group"},{"name":"exampleComponent","text":"limel-example-button-group-mix"},{"name":"exampleComponent","text":"limel-example-button-group-badges"},{"name":"exampleComponent","text":"limel-example-button-group-composite"}],"encapsulation":"shadow","dependents":["limel-example-button-group","limel-example-button-group-badges","limel-example-button-group-composite","limel-example-button-group-icons","limel-example-button-group-mix","limel-example-text-editor-triggers"],"dependencies":["limel-icon","limel-tooltip","limel-badge"],"dependencyGraph":{"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-button-group":["limel-button-group"],"limel-example-button-group-badges":["limel-button-group"],"limel-example-button-group-composite":["limel-button-group"],"limel-example-button-group-icons":["limel-button-group"],"limel-example-button-group-mix":["limel-button-group"],"limel-example-text-editor-triggers":["limel-button-group"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"True if the button-group should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"Button[]","mutable":false,"reflectToAttr":false,"docs":"List of buttons for the group","docsTags":[],"default":"[]","values":[{"type":"Button[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Button","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a button is selected/deselected","docsTags":[]}],"styles":[{"name":"--button-group-background-color","annotation":"prop","docs":"Background color of the component. Defaults to `--contrast-400`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Button } from '../button/button.types';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * A button group control is a linear set of two or more buttons.\n *\n * ## Usage\n *\n * Button groups are often used to display different views of the same thing. A\n * common example of this component is when you switch between [ Map | Transit\n * | Satellite ] views to look at an area on the map.\n *\n * In some cases, button groups may serve as quick filters as well. For example\n * a list of contacts, in which the user can switch to [ All | Favorites\n * | Frequently contacted ] can incorporate a button group to quickly filter out\n * items and display subsets of them.\n *\n * ## Layout\n *\n * The button groups are usually placed in top headers and action bars,\n * sometimes with other elements. Since the group items will always be rendered\n * in a row, you must make sure not to have too many buttons in the group.\n * Because if the container of your button group does not get enough space to\n * fit in all its buttons, they will have to truncate their text and may appear\n * very cramped together. Always think about how your button group will appear\n * on a small screen such as phones.\n * :::note\n * Button can contain text or icons, but not both simultaneously!\n * :::\n *\n * Within the group, icon buttons will all have the same width, while each text button\n * inherits its width from its content.\n *\n * @exampleComponent limel-example-button-group-icons\n * @exampleComponent limel-example-button-group\n * @exampleComponent limel-example-button-group-mix\n * @exampleComponent limel-example-button-group-badges\n * @exampleComponent limel-example-button-group-composite\n */\n@Component({\n    tag: 'limel-button-group',\n    shadow: true,\n    styleUrl: 'button-group.scss',\n})\nexport class ButtonGroup {\n    /**\n     * List of buttons for the group\n     */\n    @Prop()\n    public value: Button[] = [];\n\n    /**\n     * True if the button-group should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Dispatched when a button is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<Button>;\n\n    @State()\n    private selectedButtonId: string;\n\n    private radioGroupName = createRandomString();\n\n    constructor() {\n        this.renderButton = this.renderButton.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.renderContent = this.renderContent.bind(this);\n    }\n\n    public componentWillLoad() {\n        this.setSelectedButton();\n    }\n\n    public render() {\n        const classes = {\n            'mdc-chip-set': true,\n            disabled: this.disabled,\n            'mdc-chip-set--choice': true,\n        };\n\n        return (\n            <div class={classes} role=\"grid\">\n                {this.value.map(this.renderButton)}\n            </div>\n        );\n    }\n\n    private renderButton(button: Button) {\n        // Prefix with 'b' because html IDs cannot start with a digit,\n        // and we need to differentiate from the ID on the limel-icon. /Ads\n        const buttonId = `b${button.id}`;\n\n        const classes = {\n            'mdc-chip': true,\n            'mdc-chip--selected': this.isButtonChecked(button),\n        };\n\n        return (\n            <div class={classes} role=\"row\">\n                <span role=\"gridcell\">\n                    <input\n                        type=\"radio\"\n                        name={this.radioGroupName}\n                        checked={this.isButtonChecked(button)}\n                        id={buttonId}\n                        onChange={this.onChange}\n                    />\n                    <label htmlFor={buttonId}>\n                        {this.renderContent(button)}\n                        {this.renderBadge(button)}\n                    </label>\n                </span>\n            </div>\n        );\n    }\n\n    private renderContent(button: Button) {\n        if (button.icon) {\n            return this.renderIcon(button);\n        }\n\n        return this.renderLabel(button);\n    }\n\n    private isButtonChecked(button: Button) {\n        return button.id === this.selectedButtonId;\n    }\n\n    private renderLabel(button: Button) {\n        return <span class=\"mdc-chip__text\">{button.title}</span>;\n    }\n\n    private renderIcon(button: Button) {\n        // Prefix with 'i' because html IDs cannot start with a digit,\n        // and we need to differentiate from the \"buttonId\". /Ads\n        const iconId = `i${button.id}`;\n\n        return [\n            <limel-icon\n                id={iconId}\n                class=\"mdc-chip__icon\"\n                aria-label={button.title}\n                name={button.icon}\n                size=\"small\"\n                badge={true}\n            />,\n            <limel-tooltip elementId={iconId} label={button.title} />,\n        ];\n    }\n\n    private renderBadge(button: Button) {\n        if (!button.badge) {\n            return;\n        }\n\n        return <limel-badge label={button.badge} />;\n    }\n\n    private onChange(event: Event) {\n        event.stopPropagation();\n        const target = event.target as HTMLInputElement;\n        // The ID is prefixed with `b` in the HTML, remember? /Ads\n        this.selectedButtonId = target.id.slice(1);\n        const button = this.value.find((item) => {\n            return item.id === this.selectedButtonId;\n        });\n        this.change.emit(button);\n    }\n\n    private setSelectedButton = () => {\n        this.selectedButtonId = this.value.find((button) => {\n            return button.selected;\n        })?.id;\n    };\n\n    @Watch('value')\n    protected valueChanged() {\n        this.setSelectedButton();\n    }\n}\n"},{"filename":"button-group.scss","type":"scss","source":"@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '@material/chips/deprecated/mdc-chips';\n/**\n* @prop --button-group-background-color: Background color of the component. Defaults to `--contrast-400`\n*/\n\n.mdc-chip {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-chip {\n    @include mixins.is-flat-inset-clickable($background-color: transparent);\n    max-width: 100%;\n    min-width: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(1);\n    display: inline-grid;\n    grid-auto-flow: column;\n    margin: functions.pxToRem(2) !important;\n    font-size: functions.pxToRem(14);\n\n    &:not(:last-child) {\n        &:after {\n            content: '';\n            display: block;\n\n            height: functions.pxToRem(16);\n            width: functions.pxToRem(2);\n            border-radius: functions.pxToRem(4);\n            background-color: var(\n                --button-group-text-color,\n                rgb(var(--contrast-1200))\n            );\n            opacity: 0.1;\n\n            position: absolute;\n            right: functions.pxToRem(-3);\n            top: 0;\n            bottom: 0;\n            margin: auto;\n        }\n    }\n\n    label {\n        cursor: pointer;\n        transition: color 0.2s ease;\n        display: flex;\n        align-items: center;\n        &:has(> limel-badge) {\n            .mdc-chip__text {\n                padding-right: 0.25rem;\n            }\n        }\n    }\n\n    input[type='radio'] {\n        width: 0;\n        position: absolute;\n        opacity: 0; // This removes some visual defects on iOS and Firefox, created by \"user agent styles\"\n\n        &:focus-visible {\n            + label {\n                &:after {\n                    // visualizes keyboard navigation on Chrome & Firefox\n                    // only when non-pointer input is being used,\n                    // e.g. tabbed into using keyboard\n                    content: '';\n                    display: block;\n                    position: absolute;\n                    top: 0;\n                    right: 0;\n                    bottom: 0;\n                    left: 0;\n                    border-radius: functions.pxToRem(60);\n                    box-shadow: var(--shadow-depth-8-focused);\n                    z-index: z-index.$button-group-radio-button-keyboard-focused;\n                }\n            }\n        }\n    }\n\n    span[role='gridcell'] {\n        min-width: 0; // This is needed to force mdc-chip__text (which is inside this span) to truncate\n\n        &:focus-within {\n            // Cannot use `:focus-visible` here, since it is the radio button\n            // which gets focused, which is inside this element…\n            // and we are removing or hiding the visual appearance of the button\n            outline: none;\n            color: var(--mdc-theme-primary);\n        }\n\n        &:only-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n\n        &:first-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n    }\n\n    &.mdc-chip--selected {\n        background-color: var(--mdc-theme-surface);\n        box-shadow: var(--button-shadow-inset);\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n}\n\n.mdc-chip__text {\n    font-size: functions.pxToRem(13);\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: block;\n    padding: 0 functions.pxToRem(12) 0 functions.pxToRem(4);\n}\n\n.mdc-chip-set {\n    align-items: center;\n    border-radius: functions.pxToRem(60);\n    background-color: var(\n        --button-group-background-color,\n        rgb(var(--contrast-400))\n    );\n    padding: 0;\n\n    width: max-content;\n    max-width: 100%;\n\n    flex-wrap: nowrap; // Not sure about this. It'll put items on one row, but also can look bad on action bars. Kia\n\n    &.disabled {\n        @include shared_input-select-picker.looks-disabled;\n        pointer-events: none;\n    }\n}\n\nlimel-badge {\n    margin-right: 0.25rem;\n    pointer-events: none;\n}\n\n.mdc-chip:not(.mdc-chip--selected) {\n    --badge-background-color: rgb(var(--contrast-200));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout","filePath":"./src/components/callout/callout.tsx","fileName":"callout.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/usage","tag":"limel-callout","overview":"Callouts—also known as Admonitions—are useful for including supportive or\nspecial content within a large piece of text, or even inside a user\ninterface.\n\nWhen used in a document or text based user interface, the callout attracts\nthe reader's attention to a particular piece of information, without\nsignificantly interrupting their flow of reading the document.\n\nIn a user interface, a callout is more intrusive to the end-user. Still, it\ncould be a good choice when you intend to slightly disturb the user's\nattention, and challenge them to pay extra attention to the information\npresented. In such cases, a callout should not be used as a static and\nconstantly present element of the UI. Rather, it should be displayed when\nsomething unusual or remarkable demands the user's attention.","usage":{},"docs":"Callouts—also known as Admonitions—are useful for including supportive or\nspecial content within a large piece of text, or even inside a user\ninterface.\n\nWhen used in a document or text based user interface, the callout attracts\nthe reader's attention to a particular piece of information, without\nsignificantly interrupting their flow of reading the document.\n\nIn a user interface, a callout is more intrusive to the end-user. Still, it\ncould be a good choice when you intend to slightly disturb the user's\nattention, and challenge them to pay extra attention to the information\npresented. In such cases, a callout should not be used as a static and\nconstantly present element of the UI. Rather, it should be displayed when\nsomething unusual or remarkable demands the user's attention.","docsTags":[{"name":"exampleComponent","text":"limel-example-callout-note"},{"name":"exampleComponent","text":"limel-example-callout-important"},{"name":"exampleComponent","text":"limel-example-callout-tip"},{"name":"exampleComponent","text":"limel-example-callout-caution"},{"name":"exampleComponent","text":"limel-example-callout-warning"},{"name":"exampleComponent","text":"limel-example-callout-rich-content"},{"name":"exampleComponent","text":"limel-example-callout-custom-heading"},{"name":"exampleComponent","text":"limel-example-callout-custom-icon"},{"name":"exampleComponent","text":"limel-example-callout-styles"},{"name":"exampleComponent","text":"limel-example-custom-type"},{"name":"exampleComponent","text":"limel-example-callout-composite"}],"encapsulation":"shadow","dependents":["limel-example-callout-caution","limel-example-callout-composite","limel-example-callout-custom-heading","limel-example-callout-custom-icon","limel-example-callout-important","limel-example-callout-note","limel-example-callout-rich-content","limel-example-callout-styles","limel-example-callout-tip","limel-example-callout-warning","limel-example-custom-type"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-callout":["limel-icon"],"limel-example-callout-caution":["limel-callout"],"limel-example-callout-composite":["limel-callout"],"limel-example-callout-custom-heading":["limel-callout"],"limel-example-callout-custom-icon":["limel-callout"],"limel-example-callout-important":["limel-callout"],"limel-example-callout-note":["limel-callout"],"limel-example-callout-rich-content":["limel-callout"],"limel-example-callout-styles":["limel-callout"],"limel-example-callout-tip":["limel-callout"],"limel-example-callout-warning":["limel-callout"],"limel-example-custom-type":["limel-callout"]},"props":[{"name":"heading","type":"string","mutable":false,"attr":"heading","reflectToAttr":true,"docs":"Heading of the callout, which can be used to override the\ndefault heading which is displayed based on the chosen `type`.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Icon of the callout, which can be used to override the\ndefault icon which is displayed based on the chosen `type`.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the language for translations.\nWill translate the default headings for supported languages.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"caution\" | \"important\" | \"note\" | \"tip\" | \"warning\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Defines how the component is visualized, for example\nwhich heading, color or icon is used in its user interface.","docsTags":[],"default":"'note'","values":[{"value":"caution","type":"string"},{"value":"important","type":"string"},{"value":"note","type":"string"},{"value":"tip","type":"string"},{"value":"warning","type":"string"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--callout-background-color","annotation":"prop","docs":"Background color of the component. Defaults to `--contrast-300`."},{"name":"--callout-color","annotation":"prop","docs":"Color used in the UI to add more contextual meaning about the type of the information. This color is different based on the chosen `type`, but you can override it using this prop."},{"name":"--callout-text-color","annotation":"prop","docs":"Text color of the component. Defaults to `--contrast-1100`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { CalloutType } from '../callout/callout.types';\nimport { Languages } from '../date-picker/date.types';\nimport { getHeading, getIcon } from './callout.helpers';\n\n/**\n * Callouts—also known as Admonitions—are useful for including supportive or\n * special content within a large piece of text, or even inside a user\n * interface.\n *\n * When used in a document or text based user interface, the callout attracts\n * the reader's attention to a particular piece of information, without\n * significantly interrupting their flow of reading the document.\n *\n * In a user interface, a callout is more intrusive to the end-user. Still, it\n * could be a good choice when you intend to slightly disturb the user's\n * attention, and challenge them to pay extra attention to the information\n * presented. In such cases, a callout should not be used as a static and\n * constantly present element of the UI. Rather, it should be displayed when\n * something unusual or remarkable demands the user's attention.\n *\n * @exampleComponent limel-example-callout-note\n * @exampleComponent limel-example-callout-important\n * @exampleComponent limel-example-callout-tip\n * @exampleComponent limel-example-callout-caution\n * @exampleComponent limel-example-callout-warning\n * @exampleComponent limel-example-callout-rich-content\n * @exampleComponent limel-example-callout-custom-heading\n * @exampleComponent limel-example-callout-custom-icon\n * @exampleComponent limel-example-callout-styles\n * @exampleComponent limel-example-custom-type\n * @exampleComponent limel-example-callout-composite\n */\n@Component({\n    tag: 'limel-callout',\n    shadow: true,\n    styleUrl: 'callout.scss',\n})\nexport class Callout {\n    /**\n     * Heading of the callout, which can be used to override the\n     * default heading which is displayed based on the chosen `type`.\n     */\n    @Prop({ reflect: true })\n    public heading?: string;\n\n    /**\n     * Icon of the callout, which can be used to override the\n     * default icon which is displayed based on the chosen `type`.\n     */\n    @Prop({ reflect: true })\n    public icon?: string;\n\n    /**\n     * Defines how the component is visualized, for example\n     * which heading, color or icon is used in its user interface.\n     */\n    @Prop({ reflect: true })\n    public type?: CalloutType = 'note';\n\n    /**\n     * Defines the language for translations.\n     * Will translate the default headings for supported languages.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    public render() {\n        return [\n            <div class=\"side\" role=\"presentation\">\n                <limel-icon name={getIcon(this.icon, this.type)} />\n            </div>,\n            <div class=\"main\">\n                <h1 class=\"heading\">\n                    {getHeading(this.heading, this.type, this.language)}\n                </h1>\n                <slot />\n            </div>,\n        ];\n    }\n}\n"},{"filename":"callout.scss","type":"scss","source":"/**\n * @prop --callout-text-color: Text color of the component. Defaults to `--contrast-1100`.\n * @prop --callout-background-color: Background color of the component. Defaults to `--contrast-300`.\n * @prop --callout-color: Color used in the UI to add more contextual meaning about the type of the information. This color is different based on the chosen `type`, but you can override it using this prop.\n*/\n\n:host(limel-callout) {\n    display: flex;\n    border-radius: 0.5rem;\n    overflow: hidden;\n\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-contrast-100))\n    );\n    color: var(--callout-text-color, rgb(var(--contrast-1100)));\n}\n:host([type='note']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-gray-default))\n    );\n}\n:host([type='important']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-sky-default))\n    );\n}\n:host([type='tip']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-green-default))\n    );\n}\n:host([type='caution']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-orange-light))\n    );\n}\n:host([type='warning']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-red-dark))\n    );\n}\n\n.side {\n    padding: 0.25rem;\n    position: relative;\n\n    &:before {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0.2;\n        background-color: var(--limel-callout-tint-color);\n    }\n\n    limel-icon {\n        width: 1.5rem;\n        color: var(--limel-callout-tint-color);\n        margin-top: 0.0625rem; // ensures vertical alignment with the `heading`\n    }\n}\n\n.main {\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    gap: 0.5rem;\n    padding: 0.25rem 0.5rem 0.5rem 0.5rem;\n    background-color: var(--callout-background-color, rgb(var(--contrast-300)));\n}\n\n.heading {\n    margin: 0;\n    font-size: 1rem;\n    font-weight: 600;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card","filePath":"./src/components/card/card.tsx","fileName":"card.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/usage","tag":"limel-card","overview":"Card is a component that displays content about a single topic,\nin a structured way. It can contain a header, and some supporting media such\nas an image or an icon, a body of text, or optional actions.","usage":{},"docs":"Card is a component that displays content about a single topic,\nin a structured way. It can contain a header, and some supporting media such\nas an image or an icon, a body of text, or optional actions.","docsTags":[{"name":"exampleComponent","text":"limel-example-card-basic"},{"name":"exampleComponent","text":"limel-example-card-image"},{"name":"exampleComponent","text":"limel-example-card-actions"},{"name":"exampleComponent","text":"limel-example-card-clickable"},{"name":"exampleComponent","text":"limel-example-card-orientation"},{"name":"exampleComponent","text":"limel-example-card-slot"},{"name":"exampleComponent","text":"limel-example-card-styling"},{"name":"beta"}],"encapsulation":"shadow","dependents":["limel-example-card-actions","limel-example-card-basic","limel-example-card-clickable","limel-example-card-image","limel-example-card-orientation","limel-example-card-slot","limel-example-card-styling","limel-example-popover-styling"],"dependencies":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"dependencyGraph":{"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-card-actions":["limel-card"],"limel-example-card-basic":["limel-card"],"limel-example-card-clickable":["limel-card"],"limel-example-card-image":["limel-card"],"limel-example-card-orientation":["limel-card"],"limel-example-card-slot":["limel-card"],"limel-example-card-styling":["limel-card"],"limel-example-popover-styling":["limel-card"]},"props":[{"name":"actions","type":"(ListSeparator | ActionBarItem)[]","mutable":false,"reflectToAttr":false,"docs":"Actions to display in the card,\nto provide the user with options to interact with the content.","docsTags":[],"default":"[]","values":[{"type":"(ListSeparator"},{"type":"ActionBarItem)[]"}],"optional":true,"required":false},{"name":"clickable","type":"boolean","mutable":false,"attr":"clickable","reflectToAttr":true,"docs":"When true, improve the accessibility of the component and hints the user\nthat the card can be interacted width.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"heading","type":"string","mutable":false,"attr":"heading","reflectToAttr":true,"docs":"Heading of the card,\nto provide a short title about the context.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"icon","type":"Icon | string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"An icon, to display along with the heading and subheading.","docsTags":[],"values":[{"type":"Icon"},{"type":"string"}],"optional":true,"required":false},{"name":"image","type":"Image","mutable":false,"reflectToAttr":false,"docs":"A hero image to display in the card,\nto enrich the content with visual information.","docsTags":[],"values":[{"type":"Image"}],"optional":true,"required":false},{"name":"orientation","type":"\"landscape\" | \"portrait\"","mutable":false,"attr":"orientation","reflectToAttr":true,"docs":"The orientation of the card,\nspecially useful when the card has an image.","docsTags":[],"default":"'portrait'","values":[{"value":"landscape","type":"string"},{"value":"portrait","type":"string"}],"optional":false,"required":false},{"name":"subheading","type":"string","mutable":false,"attr":"subheading","reflectToAttr":true,"docs":"Subheading of the card\nto provide a short description of the context.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The content of the card.\nSupports markdown, to provide a rich text experience.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"actionSelected","detail":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a action bar item has been clicked.","docsTags":[]}],"styles":[{"name":"--card-background-color","annotation":"prop","docs":"background color of the card."},{"name":"--card-background-color--hovered","annotation":"prop","docs":"background color of the card, when hovered."},{"name":"--card-border-radius","annotation":"prop","docs":"border radius of the card. Defaults to `0.95rem`;"},{"name":"--card-heading-color","annotation":"prop","docs":"color of the heading. Defaults to `--contrast-1100`;"},{"name":"--card-subheading-color","annotation":"prop","docs":"color of the sub heading. Defaults to `--contrast-1000`;"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Element,\n    Host,\n} from '@stencil/core';\nimport { Image } from '../../global/shared-types/image.types';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { isItem } from '../action-bar/is-item';\nimport { getIconName } from '../icon/get-icon-props';\nimport { ListSeparator } from '../../global/shared-types/separator.types';\nimport { ActionBarItem } from '../action-bar/action-bar.types';\nimport { getMouseEventHandlers } from '../../util/3d-tilt-hover-effect';\n\n/**\n * Card is a component that displays content about a single topic,\n * in a structured way. It can contain a header, and some supporting media such\n * as an image or an icon, a body of text, or optional actions.\n *\n * @exampleComponent limel-example-card-basic\n * @exampleComponent limel-example-card-image\n * @exampleComponent limel-example-card-actions\n * @exampleComponent limel-example-card-clickable\n * @exampleComponent limel-example-card-orientation\n * @exampleComponent limel-example-card-slot\n * @exampleComponent limel-example-card-styling\n * @beta\n */\n@Component({\n    tag: 'limel-card',\n    shadow: true,\n    styleUrl: 'card.scss',\n})\nexport class Card {\n    /**\n     * Heading of the card,\n     * to provide a short title about the context.\n     */\n    @Prop({ reflect: true })\n    public heading?: string;\n\n    /**\n     * Subheading of the card\n     * to provide a short description of the context.\n     */\n    @Prop({ reflect: true })\n    public subheading?: string;\n\n    /**\n     * A hero image to display in the card,\n     * to enrich the content with visual information.\n     */\n    @Prop()\n    public image?: Image;\n\n    /**\n     * An icon, to display along with the heading and subheading.\n     */\n    @Prop({ reflect: true })\n    public icon?: string | Icon;\n\n    /**\n     * The content of the card.\n     * Supports markdown, to provide a rich text experience.\n     */\n    @Prop()\n    public value?: string;\n\n    /**\n     * Actions to display in the card,\n     * to provide the user with options to interact with the content.\n     */\n    @Prop()\n    public actions?: Array<ActionBarItem | ListSeparator> = [];\n\n    /**\n     * When true, improve the accessibility of the component and hints the user\n     * that the card can be interacted width.\n     */\n    @Prop({ reflect: true })\n    public clickable: boolean = false;\n\n    /**\n     * The orientation of the card,\n     * specially useful when the card has an image.\n     */\n    @Prop({ reflect: true })\n    public orientation: 'landscape' | 'portrait' = 'portrait';\n\n    /**\n     * Fired when a action bar item has been clicked.\n     */\n    @Event()\n    public actionSelected: EventEmitter<ActionBarItem>;\n\n    @Element()\n    private host: HTMLElement;\n\n    private handleMouseEnter: () => void;\n    private handleMouseLeave: () => void;\n\n    public componentWillLoad() {\n        const { handleMouseEnter, handleMouseLeave } = getMouseEventHandlers(\n            this.host\n        );\n        this.handleMouseEnter = handleMouseEnter;\n        this.handleMouseLeave = handleMouseLeave;\n    }\n\n    public render() {\n        return (\n            <Host\n                onMouseEnter={this.handleMouseEnter}\n                onMouseLeave={this.handleMouseLeave}\n            >\n                <section tabindex={this.clickable ? 0 : ''}>\n                    {this.renderImage()}\n                    <div class=\"body\">\n                        {this.renderHeader()}\n                        {this.renderSlot()}\n                        {this.renderValue()}\n                        {this.renderActionBar()}\n                    </div>\n                    <limel-3d-hover-effect-glow />\n                </section>\n            </Host>\n        );\n    }\n\n    private renderImage() {\n        if (!this.image) {\n            return;\n        }\n\n        return <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />;\n    }\n\n    private renderHeader() {\n        if (!this.heading && !this.subheading && !this.icon) {\n            return;\n        }\n\n        return (\n            <header>\n                {this.renderIcon()}\n                <div class=\"headings\">\n                    {this.renderHeading()}\n                    {this.renderSubheading()}\n                </div>\n            </header>\n        );\n    }\n\n    private renderIcon() {\n        const icon = getIconName(this.icon);\n        const color =\n            typeof this.icon === 'string' ? undefined : this.icon?.color;\n\n        if (!icon) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                style={{\n                    color: `${color}`,\n                }}\n                badge={true}\n                name={icon}\n            />\n        );\n    }\n\n    private renderHeading() {\n        if (!this.heading) {\n            return;\n        }\n\n        return <h1 class=\"title\">{this.heading}</h1>;\n    }\n\n    private renderSubheading() {\n        if (!this.subheading) {\n            return;\n        }\n\n        return <h2>{this.subheading}</h2>;\n    }\n\n    private renderSlot() {\n        return <slot name=\"component\" />;\n    }\n\n    private renderValue() {\n        if (!this.value) {\n            return;\n        }\n\n        return <limel-markdown value={this.value} />;\n    }\n\n    private handleActionSelect = (\n        event: CustomEvent<ActionBarItem | ListSeparator>\n    ) => {\n        event.stopPropagation();\n        if (isItem(event.detail)) {\n            this.actionSelected.emit(event.detail);\n        }\n    };\n\n    private renderActionBar() {\n        if (this.actions.length === 0) {\n            return;\n        }\n\n        return (\n            <limel-action-bar\n                actions={this.actions}\n                onItemSelected={this.handleActionSelect}\n            />\n        );\n    }\n}\n"},{"filename":"card.scss","type":"scss","source":"/**\n* @prop --card-heading-color: color of the heading. Defaults to `--contrast-1100`;\n* @prop --card-subheading-color: color of the sub heading. Defaults to `--contrast-1000`;\n* @prop --card-border-radius: border radius of the card. Defaults to `0.95rem`;\n* @prop --card-background-color: background color of the card.\n* @prop --card-background-color--hovered: background color of the card, when hovered.\n*/\n\n@use '../../style/mixins';\n\n$default-border-radius: 0.95rem;\n\n* {\n    box-sizing: border-box;\n    min-width: 0;\n    min-height: 0;\n}\n\n:host(limel-card) {\n    display: flex;\n    border-radius: var(--card-border-radius, $default-border-radius);\n}\n\nsection {\n    box-sizing: border-box;\n\n    display: flex;\n    gap: 0.5rem;\n\n    flex-direction: column;\n    :host(limel-card[orientation='landscape']) & {\n        flex-direction: row;\n    }\n\n    width: 100%;\n    border-radius: var(--card-border-radius, $default-border-radius);\n    border: 1px solid rgb(var(--contrast-500));\n\n    padding: 0.25rem;\n    background-color: var(--card-background-color, rgb(var(--contrast-300)));\n\n    &:hover {\n        border-color: transparent;\n        background-color: var(\n            --card-background-color--hovered,\n            var(--card-background-color, rgb(var(--contrast-200)))\n        );\n    }\n}\n\n.body {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\nimg {\n    transition: filter 0.6s ease;\n    object-fit: cover;\n    border-radius: calc(\n        var(--card-border-radius, $default-border-radius) / 1.4\n    );\n    :host(limel-card[orientation='portrait']) & {\n        width: 100%;\n    }\n\n    :host(limel-card[orientation='landscape']) & {\n        flex-shrink: 0;\n\n        max-width: 40%;\n        height: 100%;\n    }\n\n    section:hover &,\n    section:focus-visible & {\n        transition-duration: 0.2s;\n        filter: saturate(1.3);\n    }\n}\n\nlimel-markdown {\n    overflow-y: auto;\n    padding: 0.5rem 0.75rem;\n}\n\nheader {\n    flex-shrink: 0;\n    display: flex;\n    justify-content: center;\n\n    gap: 0.5rem;\n\n    padding: 0.25rem 0.75rem;\n    :host(limel-card[orientation='landscape']) & {\n        padding-top: 0.5rem;\n    }\n\n    &:has(limel-icon) {\n        padding-left: 0.25rem;\n    }\n\n    .headings {\n        flex-grow: 1;\n        display: flex;\n        flex-direction: column;\n        gap: 0.125rem;\n    }\n\n    .title {\n        padding-right: 1.25rem;\n    }\n\n    limel-icon {\n        flex-shrink: 0;\n        width: 2rem;\n    }\n\n    h1 {\n        font-size: 1.125rem;\n        font-weight: 500;\n        color: var(--card-heading-color, rgb(var(--contrast-1100)));\n        letter-spacing: -0.03125rem; // 0.5px\n    }\n\n    h2 {\n        font-size: 0.875rem;\n        font-weight: 400;\n        color: var(--card-subheading-color, rgb(var(--contrast-1000)));\n    }\n\n    h1,\n    h2 {\n        word-break: break-word;\n        hyphens: auto;\n        -webkit-hyphens: auto;\n        margin: 0;\n    }\n}\n\nlimel-action-bar {\n    flex-shrink: 0;\n    --action-bar-background-color: transparent;\n    margin-left: auto;\n}\n\n// The 3D effect\nlimel-3d-hover-effect-glow {\n    border-radius: var(--card-border-radius, $default-border-radius);\n}\n\n:host(limel-card) {\n    @include mixins.parent-of-the-3d-element;\n}\n\nsection {\n    @include mixins.the-3d-element;\n\n    :host(limel-card[clickable]) & {\n        @include mixins.the-3d-element--clickable;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart","filePath":"./src/components/chart/chart.tsx","fileName":"chart.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/usage","tag":"limel-chart","overview":"A chart is a graphical representation of data, in which\nvisual symbols such as such bars, dots, lines, or slices, represent\neach data point, in comparison to others.","usage":{},"docs":"A chart is a graphical representation of data, in which\nvisual symbols such as such bars, dots, lines, or slices, represent\neach data point, in comparison to others.","docsTags":[{"name":"exampleComponent","text":"limel-example-chart-stacked-bar"},{"name":"exampleComponent","text":"limel-example-chart-orientation"},{"name":"exampleComponent","text":"limel-example-chart-max-value"},{"name":"exampleComponent","text":"limel-example-chart-type-bar"},{"name":"exampleComponent","text":"limel-example-chart-type-dot"},{"name":"exampleComponent","text":"limel-example-chart-type-area"},{"name":"exampleComponent","text":"limel-example-chart-type-line"},{"name":"exampleComponent","text":"limel-example-chart-type-pie"},{"name":"exampleComponent","text":"limel-example-chart-type-doughnut"},{"name":"exampleComponent","text":"limel-example-chart-type-ring"},{"name":"exampleComponent","text":"limel-example-chart-type-gantt"},{"name":"exampleComponent","text":"limel-example-chart-type-nps"},{"name":"exampleComponent","text":"limel-example-chart-multi-axis"},{"name":"exampleComponent","text":"limel-example-chart-multi-axis-with-negative-start-values"},{"name":"exampleComponent","text":"limel-example-chart-multi-axis-area-with-negative-start-values"},{"name":"exampleComponent","text":"limel-example-chart-axis-increment"},{"name":"exampleComponent","text":"limel-example-chart-clickable-items"},{"name":"exampleComponent","text":"limel-example-chart-accessibility"},{"name":"exampleComponent","text":"limel-example-chart-styling"},{"name":"exampleComponent","text":"limel-example-chart-creative-styling"},{"name":"beta"}],"encapsulation":"shadow","dependents":["limel-example-chart-accessibility","limel-example-chart-axis-increment","limel-example-chart-clickable-items","limel-example-chart-creative-styling","limel-example-chart-max-value","limel-example-chart-multi-axis","limel-example-chart-multi-axis-area-with-negative-start-values","limel-example-chart-multi-axis-with-negative-start-values","limel-example-chart-orientation","limel-example-chart-stacked-bar","limel-example-chart-styling","limel-example-chart-type-area","limel-example-chart-type-bar","limel-example-chart-type-dot","limel-example-chart-type-doughnut","limel-example-chart-type-gantt","limel-example-chart-type-line","limel-example-chart-type-nps","limel-example-chart-type-pie","limel-example-chart-type-ring","limel-example-info-tile-primary-slot"],"dependencies":["limel-spinner","limel-badge","limel-tooltip"],"dependencyGraph":{"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-chart-accessibility":["limel-chart"],"limel-example-chart-axis-increment":["limel-chart"],"limel-example-chart-clickable-items":["limel-chart"],"limel-example-chart-creative-styling":["limel-chart"],"limel-example-chart-max-value":["limel-chart"],"limel-example-chart-multi-axis":["limel-chart"],"limel-example-chart-multi-axis-area-with-negative-start-values":["limel-chart"],"limel-example-chart-multi-axis-with-negative-start-values":["limel-chart"],"limel-example-chart-orientation":["limel-chart"],"limel-example-chart-stacked-bar":["limel-chart"],"limel-example-chart-styling":["limel-chart"],"limel-example-chart-type-area":["limel-chart"],"limel-example-chart-type-bar":["limel-chart"],"limel-example-chart-type-dot":["limel-chart"],"limel-example-chart-type-doughnut":["limel-chart"],"limel-example-chart-type-gantt":["limel-chart"],"limel-example-chart-type-line":["limel-chart"],"limel-example-chart-type-nps":["limel-chart"],"limel-example-chart-type-pie":["limel-chart"],"limel-example-chart-type-ring":["limel-chart"],"limel-example-info-tile-primary-slot":["limel-chart"]},"props":[{"name":"accessibleItemsLabel","type":"string","mutable":false,"attr":"accessible-items-label","reflectToAttr":true,"docs":"Helps users of assistive technologies to understand\nwhat the items in the chart represent.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"accessibleLabel","type":"string","mutable":false,"attr":"accessible-label","reflectToAttr":true,"docs":"Helps users of assistive technologies to understand\nthe context of the chart, and what is being displayed.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"axisIncrement","type":"number","mutable":false,"attr":"axis-increment","reflectToAttr":true,"docs":"Specifies the increment for the axis lines.","docsTags":[],"values":[{"type":"number"}],"optional":true,"required":false},{"name":"items","type":"ChartItem<number | [number, number]>[]","mutable":false,"reflectToAttr":false,"docs":"List of items in the chart,\neach representing a data point.","docsTags":[],"values":[{"type":"ChartItem<number"},{"type":"[number, number]>[]"}],"optional":false,"required":true},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.\nWill translate the translatable strings on the components.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":true,"docs":"Indicates whether the chart is in a loading state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"maxValue","type":"number","mutable":false,"attr":"max-value","reflectToAttr":true,"docs":"Specifies the range that items' values could be in.\nThis is used in calculation of the size of the items in the chart.\nWhen not provided, the sum of all values in the items will be considered as the range.","docsTags":[],"values":[{"type":"number"}],"optional":true,"required":false},{"name":"orientation","type":"\"landscape\" | \"portrait\"","mutable":false,"attr":"orientation","reflectToAttr":true,"docs":"Defines whether the chart is intended to be displayed wide or tall.\nDoes not have any effect on chart types which generate circular forms.","docsTags":[],"default":"'landscape'","values":[{"value":"landscape","type":"string"},{"value":"portrait","type":"string"}],"optional":true,"required":false},{"name":"type","type":"\"area\" | \"bar\" | \"dot\" | \"doughnut\" | \"line\" | \"nps\" | \"pie\" | \"ring\" | \"stacked-bar\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Defines how items are visualized in the chart.","docsTags":[],"default":"'stacked-bar'","values":[{"value":"area","type":"string"},{"value":"bar","type":"string"},{"value":"dot","type":"string"},{"value":"doughnut","type":"string"},{"value":"line","type":"string"},{"value":"nps","type":"string"},{"value":"pie","type":"string"},{"value":"ring","type":"string"},{"value":"stacked-bar","type":"string"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"interact","detail":"ChartItem<number | [number, number]>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a chart item with `clickable` set to `true` is clicked","docsTags":[]}],"styles":[{"name":"--chart-axis-line-color","annotation":"prop","docs":"Defines color of the axis lines. Defaults to `--contrast-900`. Note that lines have opacity as well, and get opaque on hover."},{"name":"--chart-background-color","annotation":"prop","docs":"Defines the background color of the chart. Defaults to `transparent` for _most_ chart types."},{"name":"--chart-item-border-radius","annotation":"prop","docs":"Defines the roundness of corners of items in a chart. Defaults to different values depending on the chart type. Does not have any effect on `pie` and `doughnut` types."},{"name":"--chart-item-color","annotation":"prop","docs":"If no color is defined for chart items, this color will be use. Defaults to `rgb(var(--contrast-1100), 0.8)`."},{"name":"--chart-item-divider-color","annotation":"prop","docs":"Defines the color that visually separates items in some charts, such as `stacked-bar` chart items. Defaults to `rgb(var(--color-white), 0.6)`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, h, Prop, Watch } from '@stencil/core';\nimport { Languages } from '../date-picker/date.types';\nimport translate from '../../global/translations';\nimport { createRandomString } from '../../util/random-string';\nimport { ChartItem } from './chart.types';\n\nconst PERCENT = 100;\nconst DEFAULT_INCREMENT_SIZE = 10;\n\n/**\n * A chart is a graphical representation of data, in which\n * visual symbols such as such bars, dots, lines, or slices, represent\n * each data point, in comparison to others.\n *\n * @exampleComponent limel-example-chart-stacked-bar\n * @exampleComponent limel-example-chart-orientation\n * @exampleComponent limel-example-chart-max-value\n * @exampleComponent limel-example-chart-type-bar\n * @exampleComponent limel-example-chart-type-dot\n * @exampleComponent limel-example-chart-type-area\n * @exampleComponent limel-example-chart-type-line\n * @exampleComponent limel-example-chart-type-pie\n * @exampleComponent limel-example-chart-type-doughnut\n * @exampleComponent limel-example-chart-type-ring\n * @exampleComponent limel-example-chart-type-gantt\n * @exampleComponent limel-example-chart-type-nps\n * @exampleComponent limel-example-chart-multi-axis\n * @exampleComponent limel-example-chart-multi-axis-with-negative-start-values\n * @exampleComponent limel-example-chart-multi-axis-area-with-negative-start-values\n * @exampleComponent limel-example-chart-axis-increment\n * @exampleComponent limel-example-chart-clickable-items\n * @exampleComponent limel-example-chart-accessibility\n * @exampleComponent limel-example-chart-styling\n * @exampleComponent limel-example-chart-creative-styling\n * @beta\n */\n\n@Component({\n    tag: 'limel-chart',\n    shadow: true,\n    styleUrl: 'chart.scss',\n})\nexport class Chart {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Helps users of assistive technologies to understand\n     * the context of the chart, and what is being displayed.\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    /**\n     * Helps users of assistive technologies to understand\n     * what the items in the chart represent.\n     */\n    @Prop({ reflect: true })\n    public accessibleItemsLabel?: string;\n\n    /**\n     * List of items in the chart,\n     * each representing a data point.\n     */\n    @Prop()\n    public items!: ChartItem[];\n\n    /**\n     * Defines how items are visualized in the chart.\n     */\n    @Prop({ reflect: true })\n    public type?:\n        | 'area'\n        | 'bar'\n        | 'doughnut'\n        | 'line'\n        | 'nps'\n        | 'pie'\n        | 'ring'\n        | 'dot'\n        | 'stacked-bar' = 'stacked-bar';\n\n    /**\n     * Defines whether the chart is intended to be displayed wide or tall.\n     * Does not have any effect on chart types which generate circular forms.\n     */\n    @Prop({ reflect: true })\n    public orientation?: 'landscape' | 'portrait' = 'landscape';\n\n    /**\n     * Specifies the range that items' values could be in.\n     * This is used in calculation of the size of the items in the chart.\n     * When not provided, the sum of all values in the items will be considered as the range.\n     */\n    @Prop({ reflect: true })\n    public maxValue?: number;\n\n    /**\n     * Specifies the increment for the axis lines.\n     */\n    @Prop({ reflect: true })\n    public axisIncrement?: number;\n\n    /**\n     * Indicates whether the chart is in a loading state.\n     */\n    @Prop({ reflect: true })\n    public loading: boolean = false;\n\n    private range: {\n        minValue: number;\n        maxValue: number;\n        totalRange: number;\n    };\n\n    /**\n     * Fired when a chart item with `clickable` set to `true` is clicked\n     */\n    @Event()\n    public interact: EventEmitter<ChartItem>;\n\n    public componentWillLoad() {\n        this.recalculateRangeData();\n    }\n\n    public render() {\n        if (this.loading) {\n            return <limel-spinner limeBranded={false} />;\n        }\n\n        return (\n            <table\n                aria-busy={this.loading ? 'true' : 'false'}\n                aria-live=\"polite\"\n                style={{\n                    '--limel-chart-number-of-items':\n                        this.items.length.toString(),\n                }}\n            >\n                {this.renderCaption()}\n                {this.renderTableHeader()}\n                {this.renderAxises()}\n                <tbody class=\"chart\">{this.renderItems()}</tbody>\n            </table>\n        );\n    }\n\n    private renderCaption() {\n        if (!this.accessibleLabel) {\n            return;\n        }\n\n        return <caption>{this.accessibleLabel}</caption>;\n    }\n\n    private renderTableHeader() {\n        return (\n            <thead>\n                <tr>\n                    <th scope=\"col\">{this.accessibleItemsLabel}</th>\n                    <th scope=\"col\">{translate.get('value', this.language)}</th>\n                </tr>\n            </thead>\n        );\n    }\n\n    private renderAxises() {\n        if (!['bar', 'dot', 'area', 'line'].includes(this.type)) {\n            return;\n        }\n\n        const { minValue, maxValue } = this.range;\n        const lines = [];\n        const adjustedMinRange =\n            Math.floor(minValue / this.axisIncrement) * this.axisIncrement;\n        const adjustedMaxRange =\n            Math.ceil(maxValue / this.axisIncrement) * this.axisIncrement;\n\n        for (\n            let value = adjustedMinRange;\n            value <= adjustedMaxRange;\n            value += this.axisIncrement\n        ) {\n            lines.push(\n                <div\n                    class={{\n                        'axis-line': true,\n                        'zero-line': value === 0,\n                    }}\n                    role=\"presentation\"\n                >\n                    <limel-badge label={value} />\n                </div>\n            );\n        }\n\n        return (\n            <div class=\"axises\" role=\"presentation\">\n                {lines}\n            </div>\n        );\n    }\n\n    private renderItems() {\n        if (!this.items?.length) {\n            return;\n        }\n\n        let cumulativeOffset = 0;\n\n        return this.items.map((item, index) => {\n            const itemId = createRandomString();\n            const sizeAndOffset = this.calculateSizeAndOffset(item);\n            const size = sizeAndOffset.size;\n            let offset = sizeAndOffset.offset;\n\n            if (this.type === 'pie' || this.type === 'doughnut') {\n                offset = cumulativeOffset;\n                cumulativeOffset += size;\n            }\n\n            return (\n                <tr\n                    style={this.getItemStyle(item, index, size, offset)}\n                    class={this.getItemClass(item)}\n                    key={itemId}\n                    id={itemId}\n                    data-index={index}\n                    tabIndex={0}\n                    role={item.clickable ? 'button' : null}\n                    onClick={this.handleClick}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    <th>{this.getItemText(item)}</th>\n                    <td>{this.getFormattedValue(item)}</td>\n                    {this.renderTooltip(item, itemId, size)}\n                </tr>\n            );\n        });\n    }\n\n    private getItemStyle(\n        item: ChartItem,\n        index: number,\n        size: number,\n        offset: number\n    ): Record<string, string> {\n        const style: Record<string, string> = {\n            '--limel-chart-item-offset': `${offset}`,\n            '--limel-chart-item-size': `${size}`,\n            '--limel-chart-item-index': `${index}`,\n            '--limel-chart-item-value': `${item.value}`,\n        };\n\n        if (item.color) {\n            style['--limel-chart-item-color'] = item.color;\n        }\n\n        if (this.type === 'line' || this.type === 'area') {\n            const nextItem = this.calculateSizeAndOffset(this.items[index + 1]);\n\n            style['--limel-chart-next-item-size'] = `${nextItem.size}`;\n            style['--limel-chart-next-item-offset'] = `${nextItem.offset}`;\n        }\n\n        return style;\n    }\n\n    private getItemClass(item: ChartItem) {\n        return {\n            item: true,\n            'has-start-value': Array.isArray(item.value),\n            'has-negative-value-only':\n                this.getMaximumValue(item) < 0 && !this.isRangeItem(item),\n        };\n    }\n\n    private calculateSizeAndOffset(item?: ChartItem) {\n        const { minValue, totalRange } = this.range;\n        if (!item) {\n            return {\n                size: 0,\n                offset: 0,\n            };\n        }\n\n        let startValue = 0;\n        if (this.isRangeItem(item)) {\n            startValue = this.getMinimumValue(item);\n        }\n\n        const normalizedStart =\n            ((startValue - minValue) / totalRange) * PERCENT;\n        const normalizedEnd =\n            ((this.getMaximumValue(item) - minValue) / totalRange) * PERCENT;\n\n        return {\n            size: normalizedEnd - normalizedStart,\n            offset: normalizedStart,\n        };\n    }\n\n    private getFormattedValue(item: ChartItem): string {\n        const { value, formattedValue } = item;\n\n        if (formattedValue) {\n            return formattedValue;\n        }\n\n        if (Array.isArray(value)) {\n            return `${value[0]} — ${value[1]}`;\n        }\n\n        return `${value}`;\n    }\n\n    private getItemText(item: ChartItem): string {\n        return item.text;\n    }\n\n    private renderTooltip(item: ChartItem, itemId: string, size: number) {\n        const text = this.getItemText(item);\n        const PERCENT_DECIMAL = 2;\n        const formattedValue = this.getFormattedValue(item);\n\n        const tooltipProps: any = {\n            label: text,\n            helperLabel: formattedValue,\n            elementId: itemId,\n        };\n\n        if (this.type !== 'bar' && this.type !== 'dot' && this.type !== 'nps') {\n            tooltipProps.label = `${text} (${size.toFixed(PERCENT_DECIMAL)}%)`;\n        }\n\n        return (\n            <limel-tooltip\n                {...tooltipProps}\n                openDirection={\n                    this.orientation === 'portrait' ? 'right' : 'top'\n                }\n            />\n        );\n    }\n\n    private calculateRange() {\n        if (this.range) {\n            return this.range;\n        }\n\n        const minRange = Math.min(0, ...this.items.map(this.getMinimumValue));\n        const maxRange = Math.max(...this.items.map(this.getMaximumValue));\n        const totalSum = this.items.reduce(\n            (sum, item) => sum + this.getMaximumValue(item),\n            0\n        );\n\n        let finalMaxRange = this.maxValue ?? maxRange;\n        if (\n            (this.type === 'pie' || this.type === 'doughnut') &&\n            !this.maxValue\n        ) {\n            finalMaxRange = totalSum;\n        }\n\n        if (!this.axisIncrement) {\n            this.axisIncrement = this.calculateAxisIncrement(this.items);\n        }\n\n        const visualMaxValue =\n            Math.ceil(finalMaxRange / this.axisIncrement) * this.axisIncrement;\n        const visualMinValue =\n            Math.floor(minRange / this.axisIncrement) * this.axisIncrement;\n        const totalRange = visualMaxValue - visualMinValue;\n\n        return {\n            minValue: visualMinValue,\n            maxValue: visualMaxValue,\n            totalRange: totalRange,\n        };\n    }\n\n    private calculateAxisIncrement(\n        items: ChartItem[],\n        steps: number = DEFAULT_INCREMENT_SIZE\n    ) {\n        const maxValue = Math.max(\n            ...items.map((item) => {\n                const value = item.value;\n                if (Array.isArray(value)) {\n                    return Math.max(...value);\n                }\n\n                return value;\n            })\n        );\n\n        const roughStep = maxValue / steps;\n\n        const magnitude = 10 ** Math.floor(Math.log10(roughStep));\n\n        return Math.ceil(roughStep / magnitude) * magnitude;\n    }\n\n    private getMinimumValue(item: ChartItem): number {\n        const value = item.value;\n\n        return Array.isArray(value) ? Math.min(...value) : value;\n    }\n\n    private getMaximumValue(item: ChartItem): number {\n        const value = item.value;\n\n        return Array.isArray(value) ? Math.max(...value) : value;\n    }\n\n    private isRangeItem(item: ChartItem): item is ChartItem<[number, number]> {\n        return Array.isArray(item.value);\n    }\n\n    @Watch('items')\n    @Watch('axisIncrement')\n    @Watch('maxValue')\n    handleChange() {\n        this.range = null;\n        this.recalculateRangeData();\n    }\n\n    private recalculateRangeData() {\n        this.range = this.calculateRange();\n    }\n\n    private getClickableItem(target: HTMLElement): ChartItem | undefined {\n        const index = target.dataset.index;\n        if (index === undefined) {\n            return;\n        }\n\n        const item = this.items[Number(index)];\n        if (!item.clickable) {\n            return;\n        }\n\n        return item;\n    }\n\n    private readonly handleClick = (event: MouseEvent) => {\n        const item = this.getClickableItem(event.currentTarget as HTMLElement);\n        if (!item) {\n            return;\n        }\n\n        event.stopPropagation();\n        this.interact.emit(item);\n    };\n\n    private readonly handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key !== 'Enter' && event.key !== ' ') {\n            return;\n        }\n\n        const item = this.getClickableItem(event.currentTarget as HTMLElement);\n        if (!item) {\n            return;\n        }\n\n        event.preventDefault();\n        this.interact.emit(item);\n    };\n}\n"},{"filename":"chart.scss","type":"scss","source":"@use '../../style/mixins';\n$min-item-size: 0.5rem;\n$default-item-color: var(--chart-item-color, rgb(var(--contrast-1100), 0.8));\n\n/**\n* @prop --chart-background-color: Defines the background color of the chart. Defaults to `transparent` for _most_ chart types.\n* @prop --chart-item-color: If no color is defined for chart items, this color will be use. Defaults to `rgb(var(--contrast-1100), 0.8)`.\n* @prop --chart-item-divider-color: Defines the color that visually separates items in some charts, such as `stacked-bar` chart items. Defaults to `rgb(var(--color-white), 0.6)`.\n* @prop --chart-axis-line-color: Defines color of the axis lines. Defaults to `--contrast-900`. Note that lines have opacity as well, and get opaque on hover.\n* @prop --chart-item-border-radius: Defines the roundness of corners of items in a chart. Defaults to different values depending on the chart type. Does not have any effect on `pie` and `doughnut` types.\n*/\n\n:host(limel-chart) {\n    --chart-axis-line-color: var(\n        --limel-chart-axis-line-color,\n        rgb(var(--contrast-900))\n    );\n    box-sizing: border-box;\n    isolation: isolate;\n\n    display: flex;\n    width: 100%;\n    height: 100%;\n    min-width: 0;\n    min-height: 0;\n    padding: var(--limel-chart-padding);\n}\n\ntable {\n    // Since these are mainly \"resets\", no styles should be before them.\n    all: unset;\n    border-collapse: collapse;\n    border-spacing: 0;\n    empty-cells: show;\n\n    position: relative;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    min-width: 0;\n    min-height: 0;\n\n    colgroup,\n    thead,\n    tbody,\n    tr,\n    th,\n    td {\n        all: unset;\n    }\n\n    caption,\n    colgroup,\n    thead,\n    tfoot,\n    th,\n    td {\n        @include mixins.visually-hidden;\n    }\n}\n\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\n.chart {\n    position: relative;\n    flex-grow: 1;\n    width: 100%;\n    height: 100%;\n    min-height: 0;\n    min-width: 0;\n\n    &:has(.item:hover),\n    &:has(.item:focus-visible) {\n        .item {\n            opacity: 0.4;\n        }\n    }\n}\n\n.item {\n    @include mixins.visualize-keyboard-focus;\n    transition:\n        background-color 0.2s ease,\n        box-shadow 0.2s ease,\n        filter 0.2s ease,\n        opacity 0.4s ease;\n    cursor: help;\n\n    &:focus-visible,\n    &:hover {\n        opacity: 1 !important;\n    }\n\n    &[role='button'] {\n        cursor: pointer;\n    }\n}\n\nlimel-spinner {\n    margin: auto;\n}\n\n@mixin line(\n    $direction: vertical,\n    $color: rgb(var(--contrast-800), 0.4),\n    $position: center\n) {\n    @if $direction == vertical {\n        background: linear-gradient(to bottom, $color 0%, $color 100%)\n            $position/1px\n            100%\n            no-repeat;\n    } @else if $direction == horizontal {\n        background: linear-gradient(to right, $color 0%, $color 100%)\n            $position/100%\n            1px\n            no-repeat;\n    }\n}\n\n@import './partial-styles/_layout-for-charts-with-x-y-axises';\n@import './partial-styles/_layout-for-charts-with-circular-shape';\n@import './partial-styles/_bar-gantt-dot';\n@import './partial-styles/_area_line';\n@import './partial-styles/_pie-doughnut';\n@import './partial-styles/_ring';\n@import './partial-styles/_stacked-bar';\n@import './partial-styles/_nps';\n@import './partial-styles/_axises';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox","filePath":"./src/components/checkbox/checkbox.tsx","fileName":"checkbox.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/usage","tag":"limel-checkbox","overview":"The Checkbox component is a classic and essential element in UI design that allows\nusers to make multiple selections from a predefined list of options. The Checkbox component is commonly used in forms and settings interfaces to enable users to\nselect one or more items from a list of choices.\n\n## States of a Checkbox\nWhen a user clicks or taps on the box, it toggles between two states:\nChecked and Unchecked.\n\nHowever, a Checkbox can visualize a third state called the \"Indeterminate\" state.\nIn this state, the checkbox appears as a filled box with a horizontal line or dash inside it.\n\nThe Indeterminate state is typically used when dealing with checkbox groups\nthat have hierarchical relationships or when the group contains sub-items.\nThis state is used to indicate that that some, but not all, of the items in a group are selected.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","usage":{},"docs":"The Checkbox component is a classic and essential element in UI design that allows\nusers to make multiple selections from a predefined list of options. The Checkbox component is commonly used in forms and settings interfaces to enable users to\nselect one or more items from a list of choices.\n\n## States of a Checkbox\nWhen a user clicks or taps on the box, it toggles between two states:\nChecked and Unchecked.\n\nHowever, a Checkbox can visualize a third state called the \"Indeterminate\" state.\nIn this state, the checkbox appears as a filled box with a horizontal line or dash inside it.\n\nThe Indeterminate state is typically used when dealing with checkbox groups\nthat have hierarchical relationships or when the group contains sub-items.\nThis state is used to indicate that that some, but not all, of the items in a group are selected.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","docsTags":[{"name":"exampleComponent","text":"limel-example-checkbox"},{"name":"exampleComponent","text":"limel-example-checkbox-helper-text"},{"name":"exampleComponent","text":"limel-example-checkbox-readonly"}],"encapsulation":"shadow","dependents":["limel-example-action-bar-icon-title","limel-example-ai-avatar-basic","limel-example-ai-avatar-colors","limel-example-audition-form","limel-example-audition-form-readonly","limel-example-boolean-checkboxes","limel-example-button-disabled-vs-hidden","limel-example-button-group","limel-example-button-group-icons","limel-example-button-group-mix","limel-example-chart-accessibility","limel-example-checkbox","limel-example-checkbox-helper-text","limel-example-checkbox-readonly","limel-example-chip-button","limel-example-chip-loading","limel-example-chip-set","limel-example-chip-set-choice","limel-example-chip-set-filter","limel-example-chip-set-filter-badge","limel-example-chip-set-input","limel-example-dialog-action-buttons","limel-example-dynamic-label","limel-example-dynamic-label-readonly-boolean","limel-example-file","limel-example-file-dropzone","limel-example-file-input","limel-example-file-input-type-filtering","limel-example-helper-line-animation","limel-example-info-tile-loading","limel-example-input-field-autocomplete","limel-example-input-field-number","limel-example-input-field-showlink","limel-example-input-field-text","limel-example-input-field-text-decluttering-guidelines","limel-example-input-field-text-multiple","limel-example-input-field-textarea","limel-example-list-pictures","limel-example-notched-outline-basic","limel-example-placement","limel-example-progress-flow-basic","limel-example-readonly-props","limel-example-select","limel-example-select-multiple","limel-example-select-with-empty-option","limel-example-size","limel-example-size-edge-case","limel-example-slider-basic","limel-example-slider-multiplier-percentage-colors","limel-example-snackbar-dismissible","limel-example-spinner","limel-example-spinner-color","limel-example-switch","limel-example-switch-helper-text","limel-example-switch-readonly","limel-example-switch-vs-checkbox","limel-example-text-editor-allow-resize","limel-example-text-editor-composite","limel-example-text-editor-with-html","limel-example-text-editor-with-inline-images-file-storage","limel-example-text-editor-with-markdown","limel-example-text-editor-with-tables","limel-table"],"dependencies":["limel-dynamic-label","limel-helper-line"],"dependencyGraph":{"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-action-bar-icon-title":["limel-checkbox"],"limel-example-ai-avatar-basic":["limel-checkbox"],"limel-example-ai-avatar-colors":["limel-checkbox"],"limel-example-audition-form":["limel-checkbox"],"limel-example-audition-form-readonly":["limel-checkbox"],"limel-example-boolean-checkboxes":["limel-checkbox"],"limel-example-button-disabled-vs-hidden":["limel-checkbox"],"limel-example-button-group":["limel-checkbox"],"limel-example-button-group-icons":["limel-checkbox"],"limel-example-button-group-mix":["limel-checkbox"],"limel-example-chart-accessibility":["limel-checkbox"],"limel-example-checkbox":["limel-checkbox"],"limel-example-checkbox-helper-text":["limel-checkbox"],"limel-example-checkbox-readonly":["limel-checkbox"],"limel-example-chip-button":["limel-checkbox"],"limel-example-chip-loading":["limel-checkbox"],"limel-example-chip-set":["limel-checkbox"],"limel-example-chip-set-choice":["limel-checkbox"],"limel-example-chip-set-filter":["limel-checkbox"],"limel-example-chip-set-filter-badge":["limel-checkbox"],"limel-example-chip-set-input":["limel-checkbox"],"limel-example-dialog-action-buttons":["limel-checkbox"],"limel-example-dynamic-label":["limel-checkbox"],"limel-example-dynamic-label-readonly-boolean":["limel-checkbox"],"limel-example-file":["limel-checkbox"],"limel-example-file-dropzone":["limel-checkbox"],"limel-example-file-input":["limel-checkbox"],"limel-example-file-input-type-filtering":["limel-checkbox"],"limel-example-helper-line-animation":["limel-checkbox"],"limel-example-info-tile-loading":["limel-checkbox"],"limel-example-input-field-autocomplete":["limel-checkbox"],"limel-example-input-field-number":["limel-checkbox"],"limel-example-input-field-showlink":["limel-checkbox"],"limel-example-input-field-text":["limel-checkbox"],"limel-example-input-field-text-decluttering-guidelines":["limel-checkbox"],"limel-example-input-field-text-multiple":["limel-checkbox"],"limel-example-input-field-textarea":["limel-checkbox"],"limel-example-list-pictures":["limel-checkbox"],"limel-example-notched-outline-basic":["limel-checkbox"],"limel-example-placement":["limel-checkbox"],"limel-example-progress-flow-basic":["limel-checkbox"],"limel-example-readonly-props":["limel-checkbox"],"limel-example-select":["limel-checkbox"],"limel-example-select-multiple":["limel-checkbox"],"limel-example-select-with-empty-option":["limel-checkbox"],"limel-example-size":["limel-checkbox"],"limel-example-size-edge-case":["limel-checkbox"],"limel-example-slider-basic":["limel-checkbox"],"limel-example-slider-multiplier-percentage-colors":["limel-checkbox"],"limel-example-snackbar-dismissible":["limel-checkbox"],"limel-example-spinner":["limel-checkbox"],"limel-example-spinner-color":["limel-checkbox"],"limel-example-switch":["limel-checkbox"],"limel-example-switch-helper-text":["limel-checkbox"],"limel-example-switch-readonly":["limel-checkbox"],"limel-example-switch-vs-checkbox":["limel-checkbox"],"limel-example-text-editor-allow-resize":["limel-checkbox"],"limel-example-text-editor-composite":["limel-checkbox"],"limel-example-text-editor-with-html":["limel-checkbox"],"limel-example-text-editor-with-inline-images-file-storage":["limel-checkbox"],"limel-example-text-editor-with-markdown":["limel-checkbox"],"limel-example-text-editor-with-tables":["limel-checkbox"],"limel-table":["limel-checkbox"]},"props":[{"name":"checked","type":"boolean","mutable":false,"attr":"checked","reflectToAttr":true,"docs":"The value of the checkbox. Set to `true` to make the checkbox checked.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the checkbox","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"indeterminate","type":"boolean","mutable":false,"attr":"indeterminate","reflectToAttr":true,"docs":"Enables indeterminate state. Set to `true` to signal indeterminate check.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value is invalid.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The checkbox label.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"readonlyLabels","type":"Label<boolean>[]","mutable":false,"reflectToAttr":false,"docs":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","docsTags":[{"name":"beta"}],"default":"[]","values":[{"type":"Label<boolean>[]"}],"optional":true,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the checkbox must be checked.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the input value is changed.","docsTags":[]}],"styles":[{"name":"--checkbox-unchecked-border-color","annotation":"prop","docs":"Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkbox.tsx","type":"tsx","source":"import { MDCCheckbox, cssClasses } from '@material/checkbox';\nimport { MDCFormField } from '@material/form-field';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { CheckboxTemplate } from './checkbox.template';\nimport { Label } from '../dynamic-label/label.types';\n\n/**\n * The Checkbox component is a classic and essential element in UI design that allows\n * users to make multiple selections from a predefined list of options. The Checkbox component is commonly used in forms and settings interfaces to enable users to\n * select one or more items from a list of choices.\n *\n * ## States of a Checkbox\n * When a user clicks or taps on the box, it toggles between two states:\n * Checked and Unchecked.\n *\n * However, a Checkbox can visualize a third state called the \"Indeterminate\" state.\n * In this state, the checkbox appears as a filled box with a horizontal line or dash inside it.\n *\n * The Indeterminate state is typically used when dealing with checkbox groups\n * that have hierarchical relationships or when the group contains sub-items.\n * This state is used to indicate that that some, but not all, of the items in a group are selected.\n *\n * :::important\n * Checkboxes are sometimes used interchangeably with switches in user interfaces.\n * But there is an important difference between the two! Please read our guidelines about\n * [Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).\n *\n * @exampleComponent limel-example-checkbox\n * @exampleComponent limel-example-checkbox-helper-text\n * @exampleComponent limel-example-checkbox-readonly\n */\n@Component({\n    tag: 'limel-checkbox',\n    shadow: true,\n    styleUrl: 'checkbox.scss',\n})\nexport class Checkbox {\n    /**\n     * Disables the checkbox when `true`. Works exactly the same as `readonly`.\n     * If either property is `true`, the checkbox will be disabled.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\n     * But shows no visual sign indicating that the checkbox is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid: boolean;\n\n    /**\n     * The checkbox label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the checkbox\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * The value of the checkbox. Set to `true` to make the checkbox checked.\n     */\n    @Prop({ reflect: true })\n    public checked = false;\n\n    /**\n     * Enables indeterminate state. Set to `true` to signal indeterminate check.\n     */\n    @Prop({ reflect: true })\n    public indeterminate = false;\n\n    /**\n     * Set to `true` to indicate that the checkbox must be checked.\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * The labels to use to clarify what kind of data is being visualized,\n     * when the component is `readonly`.\n     * @beta\n     */\n    @Prop()\n    public readonlyLabels?: Array<Label<boolean>> = [];\n\n    @State()\n    private modified = false;\n    private shouldReinitialize = false;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<boolean>;\n\n    @Element()\n    private limelCheckbox: HTMLLimelCheckboxElement;\n\n    private formField: MDCFormField;\n    private mdcCheckbox: MDCCheckbox;\n    private id: string = createRandomString();\n    private helperTextId: string = createRandomString();\n\n    @Watch('checked')\n    protected handleCheckedChange(newValue: boolean) {\n        if (!this.mdcCheckbox) {\n            return;\n        }\n\n        this.mdcCheckbox.checked = newValue;\n    }\n\n    @Watch('indeterminate')\n    protected handleIndeterminateChange(newValue: boolean) {\n        this.mdcCheckbox.checked = this.checked;\n        this.mdcCheckbox.indeterminate = newValue;\n    }\n\n    @Watch('readonly')\n    protected handleReadonlyChange() {\n        this.destroyMDCInstances();\n        this.shouldReinitialize = true;\n    }\n\n    componentDidRender() {\n        if (this.shouldReinitialize) {\n            this.initialize();\n            this.shouldReinitialize = false;\n        }\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private destroyMDCInstances = () => {\n        this.mdcCheckbox?.destroy();\n        this.formField?.destroy();\n\n        const checkboxElement = this.getCheckboxElement();\n        if (checkboxElement) {\n            checkboxElement.classList.remove(\n                cssClasses.ANIM_CHECKED_INDETERMINATE,\n                cssClasses.ANIM_CHECKED_UNCHECKED,\n                cssClasses.ANIM_INDETERMINATE_CHECKED,\n                cssClasses.ANIM_INDETERMINATE_UNCHECKED,\n                cssClasses.ANIM_UNCHECKED_CHECKED,\n                cssClasses.ANIM_UNCHECKED_INDETERMINATE\n            );\n        }\n    };\n\n    public disconnectedCallback() {\n        this.destroyMDCInstances();\n    }\n\n    public render() {\n        return (\n            <CheckboxTemplate\n                disabled={this.disabled || this.readonly}\n                label={this.label}\n                readonlyLabels={this.readonlyLabels}\n                helperText={this.helperText}\n                helperTextId={this.helperTextId}\n                checked={this.checked || this.indeterminate}\n                indeterminate={this.indeterminate}\n                required={this.required}\n                readonly={this.readonly}\n                invalid={this.isInvalid()}\n                onChange={this.onChange}\n                id={this.id}\n            />\n        );\n    }\n\n    private isInvalid = () => {\n        if (this.invalid) {\n            return true;\n        }\n\n        if (this.required && this.modified && !this.checked) {\n            return true;\n        }\n    };\n\n    private initialize = () => {\n        const element =\n            this.limelCheckbox.shadowRoot.querySelector('.mdc-form-field');\n        if (!element) {\n            return;\n        }\n\n        this.formField = new MDCFormField(element);\n        this.mdcCheckbox = new MDCCheckbox(this.getCheckboxElement());\n        this.formField.input = this.mdcCheckbox;\n    };\n\n    private getCheckboxElement = () => {\n        return this.limelCheckbox.shadowRoot.querySelector('.mdc-checkbox');\n    };\n\n    private onChange = (event: Event) => {\n        event.stopPropagation();\n        this.change.emit(this.mdcCheckbox.checked);\n        this.modified = true;\n    };\n}\n"},{"filename":"checkbox.scss","type":"scss","source":"@use '@material/checkbox';\n@use '@material/form-field';\n\n/**\n* @prop --checkbox-unchecked-border-color: Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`.\n*/\n\n@mixin custom-checkbox-styles {\n    // This is used in other components too, such as `limel-list`\n    --mdc-checkbox-checked-color: var(--mdc-theme-primary);\n    --mdc-checkbox-unchecked-color: var(\n        --checkbox-unchecked-border-color,\n        rgb(var(--contrast-900))\n    );\n    --lime-checkbox-unchecked-color: rgb(var(--contrast-300));\n}\n\n:host(limel-checkbox) {\n    @include custom-checkbox-styles;\n    min-height: 2.5rem;\n}\n\nlimel-dynamic-label {\n    margin-top: 0.375rem;\n    margin-left: 0.25rem;\n}\n\n@include checkbox.core-styles;\n@include form-field.core-styles;\n\n.mdc-form-field {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-form-field {\n    display: flex;\n    align-items: flex-start;\n\n    .mdc-checkbox {\n        .mdc-checkbox__native-control {\n            &[disabled],\n            &:enabled {\n                &:not(:checked):not(:indeterminate) {\n                    ~ .mdc-checkbox__background {\n                        background-color: var(--lime-checkbox-unchecked-color);\n                    }\n                }\n            }\n        }\n\n        &.mdc-checkbox--invalid {\n            .mdc-checkbox__native-control:enabled:not(:checked):not(\n                    :indeterminate\n                )\n                ~ .mdc-checkbox__background {\n                border-color: var(--lime-error-text-color);\n            }\n        }\n        .mdc-checkbox__native-control {\n            &:focus-visible {\n                + .mdc-checkbox__background {\n                    &:after {\n                        content: '';\n                        display: block;\n                        position: absolute;\n                        inset: -0.25rem;\n                        border-radius: 0.25rem;\n                        box-shadow: var(--shadow-depth-8-focused);\n                    }\n                }\n            }\n        }\n    }\n    .mdc-checkbox--disabled {\n        opacity: 0.5;\n    }\n\n    label {\n        cursor: pointer;\n        line-height: normal;\n        letter-spacing: normal;\n\n        padding-top: 0.75rem;\n        padding-left: 0;\n\n        &.mdc-checkbox--required::after {\n            margin-left: 0.0625rem;\n            content: '*';\n        }\n\n        &.mdc-checkbox--invalid {\n            color: var(--lime-error-text-color);\n        }\n    }\n}\n\n@import './partial-styles/_helper-text.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip","filePath":"./src/components/chip/chip.tsx","fileName":"chip.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/usage","tag":"limel-chip","overview":"Chips and buttons are both interactive elements in UI design,\nbut they serve different purposes and are used in different contexts.\n\n:::warning\nDo not use the chip component carelessly, as an alternative for\n[`limel-button`](#/component/limel-button/) in the UI design!\n\n**Buttons:**\nButtons are used to trigger actions. They are typically used to\nsubmit forms, open dialogs, initiate a process, or perform any action\nthat changes the state of the application.\nButtons' labels usually contain action words, in other words, the labels is\na _verb in imperative mood_ such as \"Submit\" or \"Delete\".\nButtons are placed in areas where it's clear they will initiate\nan action when clicked.\n\n**Chips:**\nChips however are elements which may look like buttons, but they are\nrepresenting choices, filters, or tags, in a small block\nor clearly bundled into a group. Chips are rarely used alone in the\nuser interface.\nThey are often used in a so called \"chip-set\", or placed together in\na section of the UI, where the user can expect more than one chip to be present.\n\nFor example, a chip may represent a filter in a filter bar, or a tag in a tag list,\nor an item in a shopping list.\nClicking a chip can also trigger an action, for example toggling a filter ON or OFF,\nor opening a page with all posts tagged with the tag represented by the chip,\nor navigating to a page with more information about the item in the shopping list.\n:::","usage":{},"docs":"Chips and buttons are both interactive elements in UI design,\nbut they serve different purposes and are used in different contexts.\n\n:::warning\nDo not use the chip component carelessly, as an alternative for\n[`limel-button`](#/component/limel-button/) in the UI design!\n\n**Buttons:**\nButtons are used to trigger actions. They are typically used to\nsubmit forms, open dialogs, initiate a process, or perform any action\nthat changes the state of the application.\nButtons' labels usually contain action words, in other words, the labels is\na _verb in imperative mood_ such as \"Submit\" or \"Delete\".\nButtons are placed in areas where it's clear they will initiate\nan action when clicked.\n\n**Chips:**\nChips however are elements which may look like buttons, but they are\nrepresenting choices, filters, or tags, in a small block\nor clearly bundled into a group. Chips are rarely used alone in the\nuser interface.\nThey are often used in a so called \"chip-set\", or placed together in\na section of the UI, where the user can expect more than one chip to be present.\n\nFor example, a chip may represent a filter in a filter bar, or a tag in a tag list,\nor an item in a shopping list.\nClicking a chip can also trigger an action, for example toggling a filter ON or OFF,\nor opening a page with all posts tagged with the tag represented by the chip,\nor navigating to a page with more information about the item in the shopping list.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-chip-button"},{"name":"exampleComponent","text":"limel-example-chip-link"},{"name":"exampleComponent","text":"limel-example-chip-icon-colors"},{"name":"exampleComponent","text":"limel-example-chip-image"},{"name":"exampleComponent","text":"limel-example-chip-badge"},{"name":"exampleComponent","text":"limel-example-chip-filter"},{"name":"exampleComponent","text":"limel-example-chip-removable"},{"name":"exampleComponent","text":"limel-example-chip-menu"},{"name":"exampleComponent","text":"limel-example-chip-loading"},{"name":"exampleComponent","text":"limel-example-chip-progress"},{"name":"exampleComponent","text":"limel-example-chip-size"},{"name":"exampleComponent","text":"limel-example-chip-readonly-border"},{"name":"exampleComponent","text":"limel-example-chip-aria-role"}],"encapsulation":"shadow","dependents":["limel-chip-set","limel-example-chip-aria-role","limel-example-chip-badge","limel-example-chip-button","limel-example-chip-filter","limel-example-chip-icon-colors","limel-example-chip-image","limel-example-chip-link","limel-example-chip-loading","limel-example-chip-menu","limel-example-chip-progress","limel-example-chip-readonly-border","limel-example-chip-removable","limel-example-chip-size","limel-example-file-dropzone","limel-example-file-dropzone-type-filtering","limel-example-file-input","limel-example-file-input-type-filtering","limel-example-popover-trigger-interaction"],"dependencies":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"dependencyGraph":{"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-chip-set":["limel-chip"],"limel-example-chip-aria-role":["limel-chip"],"limel-example-chip-badge":["limel-chip"],"limel-example-chip-button":["limel-chip"],"limel-example-chip-filter":["limel-chip"],"limel-example-chip-icon-colors":["limel-chip"],"limel-example-chip-image":["limel-chip"],"limel-example-chip-link":["limel-chip"],"limel-example-chip-loading":["limel-chip"],"limel-example-chip-menu":["limel-chip"],"limel-example-chip-progress":["limel-chip"],"limel-example-chip-readonly-border":["limel-chip"],"limel-example-chip-removable":["limel-chip"],"limel-example-chip-size":["limel-chip"],"limel-example-file-dropzone":["limel-chip"],"limel-example-file-dropzone-type-filtering":["limel-chip"],"limel-example-file-input":["limel-chip"],"limel-example-file-input-type-filtering":["limel-chip"],"limel-example-popover-trigger-interaction":["limel-chip"]},"props":[{"name":"badge","type":"number | string","mutable":false,"attr":"badge","reflectToAttr":true,"docs":"The value of the badge, displayed on the chip.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the chip.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"Icon | string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"Icon of the chip.","docsTags":[],"values":[{"type":"Icon"},{"type":"string"}],"optional":true,"required":false},{"name":"identifier","type":"number | string","mutable":false,"attr":"identifier","reflectToAttr":true,"docs":"Identifier for the chip. Must be unique.","docsTags":[],"default":"crypto.randomUUID()","values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false},{"name":"image","type":"Image","mutable":false,"reflectToAttr":false,"docs":"A picture to be displayed instead of the icon on the chip.","docsTags":[],"values":[{"type":"Image"}],"optional":true,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to visualize the chip in an \"invalid\" or \"error\" state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.\nWill translate the translatable strings on the components.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"link","type":"{ title?: string; target?: string; href: string; rel?: string; }","mutable":false,"reflectToAttr":false,"docs":"If supplied, the chip will become a clickable link.","docsTags":[],"values":[{"type":"{ title?: string; target?: string; href: string; rel?: string; }"}],"optional":true,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":true,"docs":"Set to `true` to put the component in the `loading` state,\nand render an indeterminate progress indicator inside the chip.\nThis does _not_ disable the interactivity of the chip!","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"menuItems","type":"any[]","mutable":false,"reflectToAttr":false,"docs":"When provided, the chip will render an ellipsis menu with the supplied items.\nAlso, this will hide the \"remove button\" when `removable={true}`, as\nthe remove button will automatically become the last item in the menu.","docsTags":[],"default":"[]","values":[{"type":"any[]"}],"optional":true,"required":false},{"name":"progress","type":"number","mutable":false,"attr":"progress","reflectToAttr":true,"docs":"Reflects the current value of a progress bar on the chip,\nvisualizing the percentage of an ongoing process.\nMust be a number between `0` and `100`.","docsTags":[],"values":[{"type":"number"}],"optional":true,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to render the chip as a static UI element.\nUseful when the parent component has a `readonly` state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"removable","type":"boolean","mutable":false,"attr":"removable","reflectToAttr":true,"docs":"Set to `true` to render a remove button on the chip.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"selected","type":"boolean","mutable":false,"attr":"selected","reflectToAttr":true,"docs":"Set to `true` to visualize the chip in a \"selected\" state.\nThis is typically used when the chip is used in a chip-set\nalong with other chips.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"size","type":"\"default\" | \"small\"","mutable":false,"attr":"size","reflectToAttr":true,"docs":"Defines the size of the chip.","docsTags":[],"default":"'default'","values":[{"value":"default","type":"string"},{"value":"small","type":"string"}],"optional":false,"required":false},{"name":"text","type":"string","mutable":false,"attr":"text","reflectToAttr":true,"docs":"Label displayed on the chip","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"default\" | \"filter\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Set to `filter` to render the chip with a distinct style\nsuitable for visualizing filters.","docsTags":[{"name":"beta"}],"default":"'default'","values":[{"value":"default","type":"string"},{"value":"filter","type":"string"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"menuItemSelected","detail":"MenuItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a menu item is selected from the actions menu.","docsTags":[]},{"event":"remove","detail":"number | string","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when clicking on the remove button of a `removable` chip.\nThe value of `identifier` is emitted as the event detail.","docsTags":[]}],"styles":[{"name":"--chip-max-width","annotation":"prop","docs":"Maximum width of the chip. Defaults to `10rem`. Keep in mind that the chips should not appear too big."},{"name":"--chip-progress-color","annotation":"prop","docs":"Color of the progress bar. Defaults to `rgb(var(--contrast-700))`."},{"name":"--chip-readonly-border-color","annotation":"prop","docs":"Color of the border in readonly state. Defaults to `rgb(var(--contrast-800), 0.5)`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n} from '@stencil/core';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { Languages } from '../date-picker/date.types';\nimport { Link } from '../../global/shared-types/link.types';\nimport { getRel } from '../../util/link-helper';\nimport { getIconName } from '../icon/get-icon-props';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport translate from '../../global/translations';\nimport { BACKSPACE, DELETE } from '../../util/keycodes';\nimport { ChipType, Chip as OldChipInterface } from '../chip-set/chip.types';\nimport { Image } from '../../global/shared-types/image.types';\nimport { isEmpty } from 'lodash-es';\n\nimport { ListSeparator } from '../list/list-item.types';\nimport { LimelMenuCustomEvent, MenuItem } from '../../components';\n\ninterface ChipInterface extends Omit<OldChipInterface, 'id' | 'badge'> {\n    /**\n     * Identifier for the chip. Must be unique.\n     */\n    identifier?: number | string;\n\n    /**\n     * The value of the badge.\n     */\n    badge?: string | number;\n}\n\n/**\n * Chips and buttons are both interactive elements in UI design,\n * but they serve different purposes and are used in different contexts.\n *\n * :::warning\n * Do not use the chip component carelessly, as an alternative for\n * [`limel-button`](#/component/limel-button/) in the UI design!\n *\n * **Buttons:**\n * Buttons are used to trigger actions. They are typically used to\n * submit forms, open dialogs, initiate a process, or perform any action\n * that changes the state of the application.\n * Buttons' labels usually contain action words, in other words, the labels is\n * a _verb in imperative mood_ such as \"Submit\" or \"Delete\".\n * Buttons are placed in areas where it's clear they will initiate\n * an action when clicked.\n *\n * **Chips:**\n * Chips however are elements which may look like buttons, but they are\n * representing choices, filters, or tags, in a small block\n * or clearly bundled into a group. Chips are rarely used alone in the\n * user interface.\n * They are often used in a so called \"chip-set\", or placed together in\n * a section of the UI, where the user can expect more than one chip to be present.\n *\n * For example, a chip may represent a filter in a filter bar, or a tag in a tag list,\n * or an item in a shopping list.\n * Clicking a chip can also trigger an action, for example toggling a filter ON or OFF,\n * or opening a page with all posts tagged with the tag represented by the chip,\n * or navigating to a page with more information about the item in the shopping list.\n * :::\n *\n * @exampleComponent limel-example-chip-button\n * @exampleComponent limel-example-chip-link\n * @exampleComponent limel-example-chip-icon-colors\n * @exampleComponent limel-example-chip-image\n * @exampleComponent limel-example-chip-badge\n * @exampleComponent limel-example-chip-filter\n * @exampleComponent limel-example-chip-removable\n * @exampleComponent limel-example-chip-menu\n * @exampleComponent limel-example-chip-loading\n * @exampleComponent limel-example-chip-progress\n * @exampleComponent limel-example-chip-size\n * @exampleComponent limel-example-chip-readonly-border\n * @exampleComponent limel-example-chip-aria-role\n */\n@Component({\n    tag: 'limel-chip',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'chip.scss',\n})\nexport class Chip implements ChipInterface {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Label displayed on the chip\n     */\n    @Prop({ reflect: true })\n    public text: string;\n\n    /**\n     * Icon of the chip.\n     */\n    @Prop()\n    public icon?: string | Icon;\n\n    /**\n     * A picture to be displayed instead of the icon on the chip.\n     */\n    @Prop()\n    public image?: Image;\n\n    /**\n     * If supplied, the chip will become a clickable link.\n     */\n    @Prop()\n    public link?: Omit<Link, 'text'>;\n\n    /**\n     * The value of the badge, displayed on the chip.\n     */\n    @Prop({ reflect: true })\n    public badge?: string | number;\n\n    /**\n     * Set to `true` to disable the chip.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to render the chip as a static UI element.\n     * Useful when the parent component has a `readonly` state.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to visualize the chip in a \"selected\" state.\n     * This is typically used when the chip is used in a chip-set\n     * along with other chips.\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * Set to `true` to visualize the chip in an \"invalid\" or \"error\" state.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Set to `true` to render a remove button on the chip.\n     */\n    @Prop({ reflect: true })\n    public removable = false;\n\n    /**\n     * Set to `filter` to render the chip with a distinct style\n     * suitable for visualizing filters.\n     *\n     * @beta\n     */\n    @Prop({ reflect: true })\n    public type?: ChipType = 'default';\n\n    /**\n     * Set to `true` to put the component in the `loading` state,\n     * and render an indeterminate progress indicator inside the chip.\n     * This does _not_ disable the interactivity of the chip!\n     */\n    @Prop({ reflect: true })\n    public loading? = false;\n\n    /**\n     * Reflects the current value of a progress bar on the chip,\n     * visualizing the percentage of an ongoing process.\n     * Must be a number between `0` and `100`.\n     */\n    @Prop({ reflect: true })\n    public progress?: number;\n\n    /**\n     * Identifier for the chip. Must be unique.\n     */\n    @Prop({ reflect: true })\n    public identifier?: number | string = crypto.randomUUID();\n\n    /**\n     * Defines the size of the chip.\n     */\n    @Prop({ reflect: true })\n    public size: 'small' | 'default' = 'default';\n\n    /**\n     * When provided, the chip will render an ellipsis menu with the supplied items.\n     * Also, this will hide the \"remove button\" when `removable={true}`, as\n     * the remove button will automatically become the last item in the menu.\n     */\n    @Prop()\n    public menuItems?: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Fired when clicking on the remove button of a `removable` chip.\n     * The value of `identifier` is emitted as the event detail.\n     */\n    @Event()\n    public remove: EventEmitter<number | string>;\n\n    /**\n     * Emitted when a menu item is selected from the actions menu.\n     */\n    @Event()\n    public menuItemSelected: EventEmitter<MenuItem>;\n\n    @Element()\n    private host: HTMLLimelChipElement;\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    public render() {\n        return (\n            <Host onClick={this.filterClickWhenDisabled}>\n                {this.link ? this.renderAsLink() : this.renderAsButton()}\n            </Host>\n        );\n    }\n\n    private renderAsButton = () => {\n        return [\n            <button\n                id={'chip-' + this.identifier}\n                class=\"chip\"\n                role=\"button\"\n                disabled={this.disabled || this.readonly}\n                aria-busy={this.loading ? 'true' : 'false'}\n                aria-live=\"polite\"\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderSpinner()}\n                {this.renderPicture()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n                {this.renderProgressBar()}\n            </button>,\n            this.renderRemoveButton(),\n            this.renderActionsMenu(),\n        ];\n    };\n\n    private renderAsLink = () => {\n        const rel = getRel(this.link?.target, this.link?.rel);\n\n        return [\n            <a\n                id={'chip-' + this.identifier}\n                class=\"chip\"\n                href={this.link.href}\n                title={this.link.title}\n                target={this.link.target}\n                rel={rel}\n                aria-disabled={this.disabled || this.readonly}\n                tabindex={this.disabled || this.readonly ? -1 : 0}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderSpinner()}\n                {this.renderPicture()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n                {this.renderProgressBar()}\n            </a>,\n            this.renderRemoveButton(),\n            this.renderActionsMenu(),\n        ];\n    };\n\n    private renderLabel = () => {\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderPicture() {\n        const icon = getIconName(this.icon);\n\n        if (!icon && !this.image) {\n            return;\n        }\n\n        if (!isEmpty(this.image)) {\n            return (\n                <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />\n            );\n        }\n\n        return (\n            <limel-icon\n                badge={true}\n                name={icon}\n                style={{\n                    color: `${(this.icon as Icon)?.color}`,\n                    'background-color': `${\n                        (this.icon as Icon)?.backgroundColor\n                    }`,\n                }}\n            />\n        );\n    }\n\n    private renderBadge() {\n        if (!this.badge) {\n            return;\n        }\n\n        return <limel-badge label={this.badge} />;\n    }\n\n    private renderRemoveButton() {\n        if (\n            !this.removable ||\n            this.readonly ||\n            this.disabled ||\n            !!this.menuItems?.length\n        ) {\n            return;\n        }\n\n        const svgData =\n            '<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" d=\"m8 8 16 16M24 8 8 24\"/></svg>';\n\n        return (\n            <button\n                class=\"trailing-button remove-button\"\n                tabIndex={-1}\n                aria-label={this.removeChipLabel}\n                aria-controls={'chip-' + this.identifier}\n                innerHTML={svgData}\n                onClick={this.handleRemoveClick}\n            />\n        );\n    }\n\n    private renderActionsMenu() {\n        if (!this.menuItems?.length) {\n            return;\n        }\n\n        const svgData =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" xml:space=\"preserve\"><circle fill=\"currentColor\" cx=\"16\" cy=\"16\" r=\"2\"/><circle fill=\"currentColor\" cx=\"16\" cy=\"24\" r=\"2\"/><circle fill=\"currentColor\" cx=\"16\" cy=\"8\" r=\"2\"/></svg>';\n\n        const menuItems = this.getMenuItems();\n\n        return (\n            <limel-menu\n                items={menuItems}\n                onSelect={this.handleActionMenuSelect}\n                openDirection=\"bottom-end\"\n                onCancel={this.handleActionMenuCancel}\n            >\n                <button\n                    slot=\"trigger\"\n                    disabled={this.disabled}\n                    class=\"trailing-button\"\n                    aria-label={this.actionMenuLabel}\n                    innerHTML={svgData}\n                />\n            </limel-menu>\n        );\n    }\n\n    private getMenuItems() {\n        let menuItems = [...this.menuItems];\n\n        if (this.removable) {\n            menuItems = [\n                ...menuItems,\n                { separator: true },\n                {\n                    text: this.removeChipLabel(),\n                    icon: {\n                        name: 'delete_sign',\n                        color: 'rgb(var(--color-red-default))',\n                    },\n                    value: '_remove',\n                },\n            ];\n        }\n\n        return menuItems;\n    }\n\n    private filterClickWhenDisabled = (e) => {\n        if (this.disabled || this.readonly) {\n            e.preventDefault();\n        }\n    };\n\n    private handleRemoveClick = (event: MouseEvent | KeyboardEvent) => {\n        event.stopPropagation();\n        this.remove.emit(this.identifier);\n    };\n\n    private handleDeleteKeyDown = (event: KeyboardEvent) => {\n        if (!this.removable) {\n            return;\n        }\n\n        const keys = [DELETE, BACKSPACE];\n\n        if (keys.includes(event.key)) {\n            this.handleRemoveClick(event);\n        }\n    };\n\n    private removeChipLabel = (): string => {\n        return translate.get('remove', this.language) + ' ' + this.text;\n    };\n\n    private actionMenuLabel = (): string => {\n        return translate.get('file-viewer.more-actions', this.language);\n    };\n\n    private renderSpinner() {\n        if (!this.loading) {\n            return;\n        }\n\n        return <limel-linear-progress indeterminate={true} />;\n    }\n\n    private renderProgressBar() {\n        if (!this.progress) {\n            return;\n        }\n\n        const currentPercentage = this.progress + '%';\n\n        return (\n            <div\n                role=\"progressbar\"\n                aria-label=\"%\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={this.progress}\n                style={{\n                    '--limel-chip-progress-percentage': currentPercentage,\n                }}\n            />\n        );\n    }\n\n    private handleActionMenuSelect = (\n        event: LimelMenuCustomEvent<MenuItem>\n    ) => {\n        const menuItem = event.detail;\n\n        if (!menuItem) {\n            return;\n        }\n\n        if (menuItem.value === '_remove') {\n            this.remove.emit(this.identifier);\n\n            return;\n        }\n\n        this.menuItemSelected.emit(menuItem);\n    };\n\n    private handleActionMenuCancel = (event: LimelMenuCustomEvent<void>) => {\n        event.stopPropagation();\n    };\n}\n"},{"filename":"chip.scss","type":"scss","source":"@use '../../style/mixins';\n\n/**\n* @prop --chip-max-width: Maximum width of the chip. Defaults to `10rem`. Keep in mind that the chips should not appear too big.\n* @prop --chip-progress-color: Color of the progress bar. Defaults to `rgb(var(--contrast-700))`.\n* @prop --chip-readonly-border-color: Color of the border in readonly state. Defaults to `rgb(var(--contrast-800), 0.5)`.\n*/\n\n:host(limel-chip) {\n    --limel-chip-height: var(--limel-chip-size, 1.75rem);\n    --limel-chip-gap: 0.5rem;\n    isolation: isolate;\n    display: inline-flex;\n    align-items: center;\n    min-width: 0;\n}\n\n:host(limel-chip[size='small']) {\n    --limel-chip-height: 1.5rem;\n    --limel-chip-gap: 0.25rem;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.chip {\n    all: unset;\n    position: relative;\n\n    min-width: 0;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: min(var(--chip-max-width, 100%), 25rem);\n    height: var(--limel-chip-height);\n\n    border-radius: var(--limel-chip-height);\n    font-size: clamp(\n        0.8125rem /* 13px */,\n        calc(var(--limel-chip-height) - 0.875rem /* 14px */),\n        1rem\n    );\n    padding: 0 0.125rem;\n\n    &:has(limel-icon),\n    &:has(img) {\n        .text {\n            padding-left: 0;\n        }\n    }\n\n    &:not([disabled]) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-elevated-inset-clickable;\n    }\n\n    &:has(limel-badge) {\n        padding-right: 0.375rem;\n\n        .text {\n            padding-right: 0;\n        }\n    }\n\n    &:has(+ .remove-button:hover) {\n        box-shadow: var(--shadow-depth-8-error);\n    }\n\n    &:has(+ limel-menu),\n    &:has(+ .trailing-button) {\n        padding-right: calc(var(--limel-chip-height) + 0.125rem);\n\n        .text {\n            padding-right: 0;\n        }\n    }\n}\n\n:host(limel-chip[disabled]:not([disabled='false'])) {\n    .chip {\n        // Similar to `limel-button[disabled]`\n        color: rgba(var(--contrast-1600), 0.37);\n        background-color: rgba(var(--contrast-1600), 0.1);\n        box-shadow: none;\n    }\n}\n\n:host(limel-chip[readonly]:not([readonly='false'])) {\n    .chip {\n        box-shadow: 0 0 0 1px\n            var(--chip-readonly-border-color, rgb(var(--contrast-800), 0.5));\n    }\n}\n\n:host(limel-chip[selected]:not([selected='false'])) {\n    .chip {\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow:\n                var(--button-shadow-inset), var(--shadow-depth-8-focused);\n        }\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n    .text {\n        color: var(--mdc-theme-primary);\n    }\n}\n\n:host(limel-chip[type='filter']) {\n    .chip {\n        border-top-left-radius: 0.5rem;\n        border-bottom-left-radius: 0.5rem;\n\n        &:after {\n            content: '';\n            transition:\n                background-color 0.4s ease 0.2s,\n                box-shadow 0.6s ease 0.2s;\n            box-sizing: border-box;\n            position: absolute;\n            bottom: 0.125rem;\n            left: 0.125rem;\n            width: 0.5rem;\n            height: 0.5rem;\n            border-radius: 50%;\n            background-color: rgb(var(--contrast-800), 0.8);\n            box-shadow: 0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[type='filter'][selected]) {\n    .chip {\n        &:after {\n            background-color: rgb(var(--color-green-default));\n            box-shadow:\n                0 0 0.375rem 0 rgb(var(--color-green-light)),\n                0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[invalid]) {\n    .chip {\n        background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n        background-size: 0.5rem;\n        background-color: rgb(var(--color-red-default));\n    }\n\n    .text {\n        color: rgb(var(--color-white));\n    }\n}\n\nimg,\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n}\n\nimg {\n    object-fit: cover;\n    border-radius: 50%;\n}\n\nlimel-icon {\n    padding: 0.0625rem;\n}\n\nlimel-badge {\n    pointer-events: none;\n}\n\n.text {\n    @include mixins.truncate-text;\n    line-height: 1.2;\n    padding: 0 0.5rem;\n}\n\n.trailing-button {\n    all: unset;\n    @include mixins.is-flat-clickable();\n\n    z-index: 1;\n    flex-shrink: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    margin-left: calc(var(--limel-chip-height) * -1 + 0.125rem);\n    margin-right: 0.125rem;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n\n    border-radius: 50%;\n\n    svg {\n        transition:\n            color 0.2s ease,\n            transform 0.2s ease;\n        width: 1.25rem;\n    }\n\n    &.remove-button:hover {\n        color: rgb(var(--color-red-dark));\n        svg {\n            transform: scale(0.8);\n        }\n    }\n}\n\nlimel-menu {\n    button[slot='trigger'] {\n        @include mixins.visualize-keyboard-focus;\n    }\n\n    &[open] {\n        button[slot='trigger'] {\n            box-shadow: var(--button-shadow-inset);\n        }\n    }\n}\n\n@import './partial-styles/_loading.scss';\n@import './partial-styles/_progress.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set","filePath":"./src/components/chip-set/chip-set.tsx","fileName":"chip-set.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/usage","tag":"limel-chip-set","overview":":::note\n**Regarding `click` and `interact` events:**\n\nThe `interact` event is emitted when a chip is interacted with, and is\nthe recommended way to listen for chip interactions.\n\nHowever, if you need to handle clicks differently depending on which chip\nwas clicked, or whether the click was on a chip or elsewhere, you need to\nlisten to the native `click` event instead.\n\nNative `click` events are passed through, and if the click came from\na chip, the chip object is available in the event object under\n`<event object>.Lime.chip`.\n\nExample usage:\n```ts\nprivate handleClick(event: Event) {\n    if (event && 'Lime' in event && (event.Lime as any).chip) {\n        if ((event.Lime as { chip: Chip }).chip.href) {\n            // Chip has href, so let the browser open the link.\n            return;\n        }\n        // handle click on chip without href\n    } else {\n        // handle click elsewhere\n    }\n}\n```\n:::","usage":{},"docs":":::note\n**Regarding `click` and `interact` events:**\n\nThe `interact` event is emitted when a chip is interacted with, and is\nthe recommended way to listen for chip interactions.\n\nHowever, if you need to handle clicks differently depending on which chip\nwas clicked, or whether the click was on a chip or elsewhere, you need to\nlisten to the native `click` event instead.\n\nNative `click` events are passed through, and if the click came from\na chip, the chip object is available in the event object under\n`<event object>.Lime.chip`.\n\nExample usage:\n```ts\nprivate handleClick(event: Event) {\n    if (event && 'Lime' in event && (event.Lime as any).chip) {\n        if ((event.Lime as { chip: Chip }).chip.href) {\n            // Chip has href, so let the browser open the link.\n            return;\n        }\n        // handle click on chip without href\n    } else {\n        // handle click elsewhere\n    }\n}\n```\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-chip-set"},{"name":"exampleComponent","text":"limel-example-chip-set-choice"},{"name":"exampleComponent","text":"limel-example-chip-set-filter"},{"name":"exampleComponent","text":"limel-example-chip-set-filter-badge"},{"name":"exampleComponent","text":"limel-example-chip-set-input"},{"name":"exampleComponent","text":"limel-example-chip-set-input-type-with-menu-items"},{"name":"exampleComponent","text":"limel-example-chip-set-input-type-text"},{"name":"exampleComponent","text":"limel-example-chip-set-input-type-search"},{"name":"exampleComponent","text":"limel-example-chip-icon-color"},{"name":"exampleComponent","text":"limel-example-chip-set-image"},{"name":"exampleComponent","text":"limel-example-chip-set-composite"}],"encapsulation":"shadow","dependents":["limel-example-chip-icon-color","limel-example-chip-set","limel-example-chip-set-choice","limel-example-chip-set-composite","limel-example-chip-set-filter","limel-example-chip-set-filter-badge","limel-example-chip-set-image","limel-example-chip-set-input","limel-example-chip-set-input-type-search","limel-example-chip-set-input-type-text","limel-example-chip-set-input-type-with-menu-items","limel-file","limel-picker"],"dependencies":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"dependencyGraph":{"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-chip-icon-color":["limel-chip-set"],"limel-example-chip-set":["limel-chip-set"],"limel-example-chip-set-choice":["limel-chip-set"],"limel-example-chip-set-composite":["limel-chip-set"],"limel-example-chip-set-filter":["limel-chip-set"],"limel-example-chip-set-filter-badge":["limel-chip-set"],"limel-example-chip-set-image":["limel-chip-set"],"limel-example-chip-set-input":["limel-chip-set"],"limel-example-chip-set-input-type-search":["limel-chip-set"],"limel-example-chip-set-input-type-text":["limel-chip-set"],"limel-example-chip-set-input-type-with-menu-items":["limel-chip-set"],"limel-file":["limel-chip-set"],"limel-picker":["limel-chip-set"]},"props":[{"name":"autocomplete","type":"string","mutable":false,"attr":"autocomplete","reflectToAttr":true,"docs":"For chip-set of type `input`, defines whether the input field should have autocomplete enabled.\nRead more about the `autocomplete` attribute\n[here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).","docsTags":[],"default":"'off'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"clearAllButton","type":"boolean","mutable":false,"attr":"clear-all-button","reflectToAttr":false,"docs":"Whether the \"Clear all\" buttons should be shown","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"delimiter","type":"string","mutable":false,"attr":"delimiter","reflectToAttr":true,"docs":"For chip-set of type `input`. Sets delimiters between chips.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"True if the chip set should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"emptyInputOnBlur","type":"boolean","mutable":false,"attr":"empty-input-on-blur","reflectToAttr":true,"docs":"Whether the input field should be emptied when the chip-set loses focus.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"inputType","type":"\"search\" | \"text\"","mutable":false,"attr":"input-type","reflectToAttr":true,"docs":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","docsTags":[],"default":"'text'","values":[{"value":"search","type":"string"},{"value":"text","type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the input field is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label for the chip-set","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"leadingIcon","type":"string","mutable":false,"attr":"leading-icon","reflectToAttr":true,"docs":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"maxItems","type":"number","mutable":false,"attr":"max-items","reflectToAttr":true,"docs":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"True if the control requires a value","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"searchLabel","type":"string","mutable":false,"attr":"search-label","reflectToAttr":true,"docs":"Search label to display when type is `input` and component is in search mode","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"choice\" | \"filter\" | \"input\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable.\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","docsTags":[],"values":[{"value":"choice","type":"string"},{"value":"filter","type":"string"},{"value":"input","type":"string"}],"optional":true,"required":false},{"name":"value","type":"Chip<any>[]","mutable":false,"reflectToAttr":false,"docs":"List of chips for the set","docsTags":[],"default":"[]","values":[{"type":"Chip<any>[]"}],"optional":false,"required":false}],"methods":[{"name":"emptyInput","returns":{"type":"Promise<void>","docs":"does not return anything, but methods have to be async"},"signature":"emptyInput() => Promise<void>","parameters":[],"docs":"Used to empty the input field. Used in conjunction with `emptyInputOnBlur` to let the\nconsumer control when the input is emptied.","docsTags":[{"name":"returns","text":"does not return anything, but methods have to be async"}]},{"name":"getEditMode","returns":{"type":"Promise<boolean>","docs":"`true` if the chip-set is in edit mode, `false` otherwise."},"signature":"getEditMode() => Promise<boolean>","parameters":[],"docs":"Used to find out whether the chip-set is in edit mode.","docsTags":[{"name":"returns","text":"`true` if the chip-set is in edit mode, `false` otherwise."}]},{"name":"setFocus","returns":{"type":"Promise<void>","docs":"does not return anything, but methods have to be async"},"signature":"setFocus(emptyInput?: boolean) => Promise<void>","parameters":[],"docs":"Used to set focus to the chip-set input field.","docsTags":[{"name":"param","text":"emptyInput - if `true`, any text in the input is discarded"},{"name":"returns","text":"does not return anything, but methods have to be async"}]}],"events":[{"event":"change","detail":"Chip<any> | Chip<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a chip is selected/deselected","docsTags":[]},{"event":"input","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when the input is changed for type `input`","docsTags":[]},{"event":"interact","detail":"Chip<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a chip is interacted with","docsTags":[]},{"event":"startEdit","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when an input chip set has received focus and editing in the text field has started","docsTags":[]},{"event":"stopEdit","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when an input chip set has lost focus and editing in the text field has ended","docsTags":[]}],"styles":[{"name":"--background-color","annotation":"prop","docs":"Background color of the field when type is set to input."},{"name":"--background-color-disabled","annotation":"prop","docs":"Background color of the field when type is set to input and the component is disabled or readonly."},{"name":"--icon-background-color","annotation":"prop","docs":"Background color of the icon. Defaults to transparent."},{"name":"--icon-color","annotation":"prop","docs":"Color of the icon. Defaults to `rgb(var(--contrast-1100))`."},{"name":"--input-chip-set-selected-chip-color","annotation":"prop","docs":"Color of the highlight around selected chips in input chip-sets."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set.tsx","type":"tsx","source":"import { Chip, ChipType } from '../chip-set/chip.types';\nimport { Languages } from '../date-picker/date.types';\nimport { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Method,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { handleKeyboardEvent } from './chip-set-input-helpers';\nimport translate from '../../global/translations';\nimport { getHref, getTarget } from '../../util/link-helper';\nimport { isEqual } from 'lodash-es';\nimport { LimelChipCustomEvent } from '../../components';\nimport { createRandomString } from '../../util/random-string';\n\nconst INPUT_FIELD_TABINDEX = 1;\n\n/**\n * :::note\n * **Regarding `click` and `interact` events:**\n *\n * The `interact` event is emitted when a chip is interacted with, and is\n * the recommended way to listen for chip interactions.\n *\n * However, if you need to handle clicks differently depending on which chip\n * was clicked, or whether the click was on a chip or elsewhere, you need to\n * listen to the native `click` event instead.\n *\n * Native `click` events are passed through, and if the click came from\n * a chip, the chip object is available in the event object under\n * `<event object>.Lime.chip`.\n *\n * Example usage:\n * ```ts\n * private handleClick(event: Event) {\n *     if (event && 'Lime' in event && (event.Lime as any).chip) {\n *         if ((event.Lime as { chip: Chip }).chip.href) {\n *             // Chip has href, so let the browser open the link.\n *             return;\n *         }\n *         // handle click on chip without href\n *     } else {\n *         // handle click elsewhere\n *     }\n * }\n * ```\n * :::\n *\n * @exampleComponent limel-example-chip-set\n * @exampleComponent limel-example-chip-set-choice\n * @exampleComponent limel-example-chip-set-filter\n * @exampleComponent limel-example-chip-set-filter-badge\n * @exampleComponent limel-example-chip-set-input\n * @exampleComponent limel-example-chip-set-input-type-with-menu-items\n * @exampleComponent limel-example-chip-set-input-type-text\n * @exampleComponent limel-example-chip-set-input-type-search\n * @exampleComponent limel-example-chip-icon-color\n * @exampleComponent limel-example-chip-set-image\n * @exampleComponent limel-example-chip-set-composite\n */\n@Component({\n    tag: 'limel-chip-set',\n    shadow: true,\n    styleUrl: 'chip-set.scss',\n})\nexport class ChipSet {\n    /**\n     * List of chips for the set\n     */\n    @Prop()\n    public value: Chip[] = [];\n\n    /**\n     * Type of chip set\n     *\n     * - `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n     * - `filter` renders a set of selectable chips where all are selectable.\n     * - `input` renders a set of chips that can be used in conjunction with an input field\n     *\n     * If no type is set, a basic set of chips without additional functionality will be rendered\n     */\n    @Prop({ reflect: true })\n    public type?: 'choice' | 'filter' | 'input';\n\n    /**\n     * Label for the chip-set\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the chipset.\n     * When type is `input`, the helper text is displayed below the\n     * input field when it has focus.\n     * When type is not `input`, the helper text is always displayed\n     * if the device is touch screen; otherwise it is shown when chip-set\n     * is hovered or focused using keyboard navigation.\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * True if the chip set should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * For chip-sets of type `input`, set to `true` to disable adding and\n     * removing chips, but allow interaction with existing chips in the set.\n     * For any other types, setting either `readonly` or `disabled` disables\n     * the chip-set.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * For chip-sets of type `input`. Value to use for the `type` attribute on the\n     * input field inside the chip-set.\n     */\n    @Prop({ reflect: true })\n    public inputType: 'search' | 'text' = 'text';\n\n    /**\n     * For chip-sets of type `input`. Limits the maximum number of chips.\n     * When the value is `0` or not set, no limit is applied.\n     */\n    @Prop({ reflect: true })\n    public maxItems: number;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * Search label to display when type is `input` and component is in search mode\n     */\n    @Prop({ reflect: true })\n    public searchLabel: string;\n\n    /**\n     * Whether the input field should be emptied when the chip-set loses focus.\n     */\n    @Prop({ reflect: true })\n    public emptyInputOnBlur: boolean = true;\n\n    /**\n     * Whether the \"Clear all\" buttons should be shown\n     */\n    @Prop()\n    public clearAllButton: boolean = true;\n\n    /**\n     * For chip-sets of type `input`. When the value is null, no leading icon is used.\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string = null;\n\n    /**\n     * For chip-set of type `input`. Sets delimiters between chips.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * For chip-set of type `input`, defines whether the input field should have autocomplete enabled.\n     * Read more about the `autocomplete` attribute\n     * [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).\n     */\n    @Prop({ reflect: true })\n    public autocomplete: string = 'off';\n\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components. For example, the clear all chips label.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a chip is interacted with\n     */\n    @Event()\n    private readonly interact: EventEmitter<Chip>;\n\n    /**\n     * Dispatched when a chip is selected/deselected\n     */\n    @Event()\n    private readonly change: EventEmitter<Chip | Chip[]>;\n\n    /**\n     * Emitted when an input chip set has received focus and editing in the text field has started\n     */\n    @Event()\n    private readonly startEdit: EventEmitter<void>;\n\n    /**\n     * Emitted when an input chip set has lost focus and editing in the text field has ended\n     */\n    @Event()\n    private readonly stopEdit: EventEmitter<void>;\n\n    /**\n     * Dispatched when the input is changed for type `input`\n     */\n    @Event()\n    private readonly input: EventEmitter<string>;\n\n    @Element()\n    private readonly host: HTMLLimelChipSetElement;\n\n    @State()\n    private editMode: boolean = false;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private blurred: boolean = false;\n\n    @State()\n    private inputChipIndexSelected: number = null;\n\n    @State()\n    private selectedChipIds: Array<string | number>;\n\n    private mdcTextField: MDCTextField;\n    private readonly handleKeyDown = handleKeyboardEvent;\n    private labelId: string;\n\n    constructor() {\n        this.labelId = createRandomString();\n        this.renderChip = this.renderChip.bind(this);\n        this.renderInputChip = this.renderInputChip.bind(this);\n        this.isFull = this.isFull.bind(this);\n        this.handleTextFieldFocus = this.handleTextFieldFocus.bind(this);\n        this.handleInputBlur = this.handleInputBlur.bind(this);\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.inputFieldOnChange = this.inputFieldOnChange.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.inputHidden = this.inputHidden.bind(this);\n        this.handleDeleteAllIconClick =\n            this.handleDeleteAllIconClick.bind(this);\n        this.renderDelimiter = this.renderDelimiter.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (this.value.length > 0) {\n            this.selectedChipIds = this.value\n                .filter((chip) => chip.selected)\n                .map((chip) => chip.id);\n        }\n    }\n\n    /**\n     * Used to find out whether the chip-set is in edit mode.\n     *\n     * @returns `true` if the chip-set is in edit mode, `false` otherwise.\n     */\n    @Method()\n    public async getEditMode(): Promise<boolean> {\n        return this.editMode;\n    }\n\n    /**\n     * Used to set focus to the chip-set input field.\n     *\n     * @param emptyInput - if `true`, any text in the input is discarded\n     * @returns does not return anything, but methods have to be async\n     */\n    @Method()\n    public async setFocus(emptyInput: boolean = false) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.editMode = true;\n        if (emptyInput) {\n            this.textValue = '';\n        }\n\n        this.host.shadowRoot.querySelector('input').focus();\n        this.startEdit.emit();\n    }\n\n    /**\n     * Used to empty the input field. Used in conjunction with `emptyInputOnBlur` to let the\n     * consumer control when the input is emptied.\n     *\n     * @returns does not return anything, but methods have to be async\n     */\n    @Method()\n    public async emptyInput() {\n        this.syncEmptyInput();\n    }\n\n    public componentDidLoad() {\n        this.triggerIconColorWarning(this.value);\n\n        if (this.type === 'input') {\n            this.mdcTextField = new MDCTextField(\n                this.host.shadowRoot.querySelector('.mdc-text-field')\n            );\n        }\n    }\n\n    public componentDidUpdate() {\n        const input = this.host.shadowRoot.querySelector('input');\n        if (input && this.editMode) {\n            input.focus();\n        }\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n    }\n\n    public render() {\n        const classes = {\n            'mdc-chip-set': true,\n            'mdc-text-field--with-trailing-icon': true,\n            disabled: this.disabled || this.readonly,\n        };\n\n        if (this.type) {\n            classes[`mdc-chip-set--${this.type}`] = true;\n        }\n\n        if (this.type === 'input') {\n            Object.assign(classes, {\n                'mdc-text-field': true,\n                'mdc-text-field--outlined': true,\n                'mdc-chip-set--input': true,\n                'lime-text-field--readonly': this.readonly,\n                'has-chips': this.value.length > 0,\n                'has-leading-icon': this.leadingIcon !== null,\n                'has-clear-all-button': this.clearAllButton,\n            });\n        }\n\n        const value = this.getValue();\n\n        return [\n            <limel-notched-outline\n                labelId={this.labelId}\n                label={this.label}\n                required={this.required}\n                invalid={this.invalid || this.isInvalid()}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                hasValue={!!this.value?.length}\n                hasLeadingIcon={!!this.leadingIcon}\n                hasFloatingLabel={this.floatLabelAbove()}\n            >\n                <div slot=\"content\" {...this.getContentProps()} class={classes}>\n                    {this.renderContent(value)}\n                </div>\n            </limel-notched-outline>,\n            this.renderHelperLine(),\n        ];\n    }\n\n    private getContentProps() {\n        if (this.type === 'input') {\n            return {\n                onClick: this.handleTextFieldFocus,\n            };\n        }\n\n        return {\n            role: 'grid',\n        };\n    }\n\n    private renderContent = (value: Chip[]) => {\n        if (this.type === 'input') {\n            return this.renderInputChips();\n        }\n\n        return value.map(this.renderChip);\n    };\n\n    private readonly getValue = () => {\n        return this.value.map((chip) => ({\n            ...chip,\n            ...(this.type && {\n                selected: this.selectedChipIds.includes(chip.id),\n            }),\n        }));\n    };\n\n    @Watch('value')\n    protected handleChangeChips(newValue: Chip[], oldValue: Chip[]) {\n        if (isEqual(newValue, oldValue)) {\n            return;\n        }\n\n        this.syncEmptyInput();\n        this.initialize();\n    }\n\n    private renderInputChips() {\n        return [\n            this.value.map(this.renderInputChip),\n            <input\n                tabIndex={INPUT_FIELD_TABINDEX}\n                type={this.inputType}\n                id={this.labelId}\n                disabled={this.readonly || this.disabled}\n                class={{\n                    'mdc-text-field__input': true,\n                    hidden: this.inputHidden(),\n                }}\n                value={this.textValue}\n                onBlur={this.handleInputBlur}\n                onFocus={this.handleTextFieldFocus}\n                onKeyDown={this.handleKeyDown}\n                onInput={this.handleTextInput}\n                // Some browsers emit a change event on input elements, we need to stop\n                // that event from propagating since we are emitting our own change event\n                onChange={this.inputFieldOnChange}\n                placeholder={this.isFull() ? '' : this.searchLabel}\n                readonly={this.isFull()}\n                autocomplete={this.autocomplete}\n            />,\n            this.renderLeadingIcon(),\n            this.renderClearAllChipsButton(),\n        ];\n    }\n\n    private readonly floatLabelAbove = () => {\n        if (\n            this.value.length > 0 ||\n            this.editMode ||\n            this.readonly ||\n            this.textValue\n        ) {\n            return true;\n        }\n    };\n\n    private isFull(): boolean {\n        return !!this.maxItems && this.value.length >= this.maxItems;\n    }\n\n    private isInvalid() {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            return true;\n        }\n\n        if (!this.required) {\n            return false;\n        }\n\n        if (!this.blurred) {\n            return false;\n        }\n\n        return !this.value?.length;\n    }\n\n    private inputFieldOnChange(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Enter edit mode when the text field receives focus. When editMode is true, the input element will be visible\n     */\n    private handleTextFieldFocus() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        if (this.editMode) {\n            return;\n        }\n\n        this.editMode = true;\n        this.startEdit.emit();\n    }\n\n    /**\n     * Exit edit mode when the input element loses focus. This makes sure the input element does not take up any\n     * additional space when the user it not typing anything\n     */\n    private handleInputBlur() {\n        if (this.emptyInputOnBlur) {\n            this.syncEmptyInput();\n        }\n\n        this.editMode = false;\n        this.blurred = true;\n        this.inputChipIndexSelected = null;\n\n        // This timeout is needed in order to let a new element receive focus\n        setTimeout(() => {\n            this.stopEdit.emit();\n        }, 0);\n    }\n\n    private syncEmptyInput() {\n        this.textValue = '';\n    }\n\n    private inputHidden() {\n        if (this.editMode) {\n            return this.isFull();\n        }\n\n        // If there are chips in the picker, hide the input to avoid the input\n        // being placed on a new line and adding ugly space beneath the chips.\n        // If there are no chips, show the input, or the picker will look weird.\n        return !!this.value?.length;\n    }\n\n    private handleTextInput(event) {\n        event.stopPropagation();\n        this.inputChipIndexSelected = null;\n        this.textValue = event.target.value;\n        this.input.emit(event.target.value?.trim());\n    }\n\n    private emitInteraction(chip: Chip) {\n        this.interact.emit(chip);\n    }\n\n    private renderChip(chip: Chip) {\n        const chipType: ChipType =\n            this.type === 'filter' ? 'filter' : 'default';\n\n        const chipProps = this.getChipProps(chip, chipType);\n\n        return <limel-chip {...chipProps} />;\n    }\n\n    private readonly hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private readonly renderHelperLine = () => {\n        const maxItems = this.maxItems === 1 ? undefined : this.maxItems;\n\n        if (!maxItems && !this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                length={this.value.length}\n                maxLength={maxItems}\n                helperText={this.helperText}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderInputChip(chip: Chip, index: number, chips: Chip[]) {\n        const chipProps = this.getChipProps(chip, 'default');\n        const isLastChip = index === chips.length - 1;\n\n        return [\n            <limel-chip\n                key={chip.id}\n                class={{\n                    'can-be-removed': this.inputChipIndexSelected === index,\n                }}\n                {...chipProps}\n            />,\n            !(isLastChip && this.inputHidden()) && this.renderDelimiter(),\n        ];\n    }\n\n    private getChipProps(chip: Chip, chipType: ChipType) {\n        const removable =\n            this.type === 'input' && chip.removable && !this.readonly;\n        const readonly = this.readonly && this.type !== 'input';\n\n        return {\n            role: 'row',\n            identifier: chip.id,\n            text: chip.text,\n            icon: chip.icon,\n            image: chip.image,\n            badge: chip.badge,\n            selected: chip.selected,\n            disabled: this.disabled,\n            loading: chip.loading,\n            readonly: readonly,\n            type: chipType,\n            removable: removable,\n            menuItems: chip.menuItems,\n            onClick: this.catchInputChipClicks(chip),\n            onRemove: this.handleRemoveChip,\n            ...(chip.href && {\n                link: {\n                    href: getHref(chip.href),\n                    target: getTarget(chip.href),\n                },\n            }),\n        };\n    }\n\n    private readonly catchInputChipClicks = (chip: Chip) => (event: Event) => {\n        /*\n         * We need to add the `chip` to the event object so that the consumer\n         * can get the chip object when the chip is clicked.\n         * This is necessary for the consumer to be able to handle the click\n         * event itself, based on which chip was clicked, or whether the click\n         * was on a chip or elsewhere. The reason the consumer can't just look\n         * at the event target is that that information is hidden by the\n         * shadow DOM.\n         *\n         * See documentation for the `interact` event for more information.\n         */\n        (event as any).Lime = { chip: chip };\n\n        if (this.isSelectableChip(chip)) {\n            this.updateSelectedChipIds(chip);\n            this.change.emit(chip);\n        }\n\n        this.emitInteraction(chip);\n    };\n\n    private isSelectableChip(chip: Chip): boolean {\n        return this.type !== 'input' && 'selected' in chip;\n    }\n\n    private updateSelectedChipIds(chip: Chip): void {\n        chip.selected = !chip.selected;\n        const id = chip.id;\n        if (this.type === 'choice') {\n            this.updateChoiceTypeSelectedIds(id);\n        } else {\n            this.updateFilterTypeSelectedIds(id);\n        }\n    }\n\n    private updateChoiceTypeSelectedIds(id: number | string): void {\n        this.selectedChipIds = this.isChipSelected(id) ? [] : [id];\n    }\n\n    private isChipSelected(id: number | string): boolean {\n        return this.selectedChipIds.includes(id);\n    }\n\n    private updateFilterTypeSelectedIds(id: number | string): void {\n        if (this.isChipSelected(id)) {\n            this.removeChipIdFromSelectedChipIds(id);\n        } else {\n            this.addChipIdToSelectedChipIds(id);\n        }\n    }\n\n    private removeChipIdFromSelectedChipIds(id: number | string): void {\n        this.selectedChipIds = this.selectedChipIds.filter(\n            (chipId) => chipId !== id\n        );\n    }\n\n    private addChipIdToSelectedChipIds(id: number | string): void {\n        this.selectedChipIds = [...this.selectedChipIds, id];\n    }\n\n    private readonly handleRemoveChip = (\n        event: LimelChipCustomEvent<string | number>\n    ) => {\n        this.removeChip(event.detail);\n    };\n\n    private readonly removeChip = (identifier: string | number) => {\n        const newValue = this.value.filter((chip) => {\n            return chip.id !== identifier;\n        });\n        this.change.emit(newValue);\n    };\n\n    private renderLeadingIcon() {\n        if (!this.leadingIcon) {\n            return;\n        }\n\n        return (\n            <i class=\"mdc-text-field__icon search-icon\">\n                <limel-icon name={this.leadingIcon} />\n            </i>\n        );\n    }\n\n    private renderClearAllChipsButton() {\n        if (this.disabled || this.readonly || !this.clearAllButton) {\n            return;\n        }\n\n        return (\n            <a\n                href=\"\"\n                onClick={this.handleDeleteAllIconClick}\n                class=\"mdc-text-field__icon clear-all-button\"\n                tabindex=\"0\"\n                role=\"button\"\n                title={this.clearAllChipsLabel()}\n                aria-label={this.clearAllChipsLabel()}\n            />\n        );\n    }\n\n    private readonly clearAllChipsLabel = (): string => {\n        return translate.get('chip-set.clear-all', this.language);\n    };\n\n    private handleDeleteAllIconClick(event: Event) {\n        event.preventDefault();\n        this.change.emit([]);\n    }\n\n    private renderDelimiter() {\n        if (!this.delimiter) {\n            return;\n        }\n\n        return <div class=\"delimiter\">{this.delimiter}</div>;\n    }\n\n    private triggerIconColorWarning(value: Chip[]) {\n        for (const chip of value) {\n            if (\n                chip.icon &&\n                (chip.iconFillColor ||\n                    chip.iconBackgroundColor ||\n                    chip.iconTitle)\n            ) {\n                console.warn(\n                    \"The `iconFillColor`, `iconBackgroundColor`, and `iconTitle` props are deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name', `iconBackgroundColor: 'color-name', and `iconTitle: 'title'`, write `icon { name: 'icon-name', color: 'color-name', backgroundColor: 'color-name', title: 'title' }`.\"\n                );\n            }\n        }\n    }\n}\n"},{"filename":"chip-set.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n\n/**\n * @prop --icon-background-color: Background color of the icon. Defaults to transparent.\n * @prop --icon-color: Color of the icon. Defaults to `rgb(var(--contrast-1100))`.\n * @prop --background-color: Background color of the field when type is set to input.\n * @prop --background-color-disabled: Background color of the field when type is set to input and the component is disabled or readonly.\n * @prop --input-chip-set-selected-chip-color: Color of the highlight around selected chips in input chip-sets.\n */\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.leading-icon;\n\n$height-of-chip-set-input: functions.pxToRem(36);\n$leading-icon-space: 1.5rem;\n\n:host(limel-chip-set) {\n    isolation: isolate;\n}\n\n:host(limel-chip-set[type='input']) {\n    limel-notched-outline {\n        [slot='content'] {\n            min-height: shared_input-select-picker.$height-of-mdc-text-field;\n        }\n    }\n}\n\n:host(limel-chip-set:not([type='input'])) {\n    .limel-notched-outline {\n        --limel-notched-outline-border-color: transparent;\n        --limel-notched-outline-background-color: transparent;\n    }\n}\n\n.mdc-chip-set {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    gap: 0.5rem;\n    min-height: shared_input-select-picker.$height-of-mdc-text-field;\n    position: relative;\n\n    &.mdc-chip-set--input {\n        padding: 0.4rem 0.5rem;\n        width: 100%;\n    }\n\n    &.has-clear-all-button {\n        &.mdc-chip-set--input {\n            padding-right: functions.pxToRem(\n                32\n            ); // This leaves space for \"clear all\" button and avoids overlapping with chips\n        }\n    }\n}\n\n.mdc-text-field__input {\n    .mdc-text-field:not(.mdc-text-field--disabled) & {\n        color: shared_input-select-picker.$input-text-color;\n    }\n    .mdc-text-field.mdc-text-field--disabled & {\n        color: shared_input-select-picker.$input-text-color-disabled;\n    }\n}\n\n.mdc-text-field {\n    height: auto;\n    cursor: text;\n    flex-wrap: wrap;\n    row-gap: 0.5rem;\n\n    .mdc-text-field__input {\n        @include shared_input-select-picker.input-field-placeholder;\n\n        width: auto;\n        padding: 0 0.5rem;\n\n        flex-grow: 1;\n        flex-shrink: 0;\n\n        &.hidden {\n            // This class is added, as soon as there is a chip selected and displayed\n            // This input field should not be visually visible as it breaks the UI in some cases\n            // But it should be rendered to be able to tab between fields and do other keyboard commands /Kia\n            transition: all 0s;\n            opacity: 0;\n            position: absolute;\n            z-index: -100; // to let users interact with chips, in case they're covered\n        }\n        &[type='search'] {\n            -webkit-appearance: textfield; // Removes the default magnifying glass icon on iOS which appears automatically on input fields with type of search\n            background-color: transparent; // overides styles caused by previous line\n\n            &::-webkit-search-cancel-button {\n                display: none; // removes the default X button\n            }\n        }\n    }\n}\n\n.clear-all-button {\n    @include mixins.clear-all-button;\n    @include mixins.visualize-keyboard-focus;\n\n    position: absolute;\n    right: 0.5rem;\n    top: calc(#{shared_input-select-picker.$height-of-mdc-text-field} / 4);\n\n    opacity: 0; // Is hidden, but can receive focus (such as when navigating through tab indexes).\n\n    &:focus,\n    .has-chips:not(.disabled):hover &,\n    .has-chips:not(.disabled).mdc-text-field--focused & {\n        opacity: 1;\n        outline: none;\n    }\n\n    .mdc-chip-set:not(.has-chips) &,\n    .has-chips.disabled & {\n        display: none; // Won't receive focus when disabled\n    }\n}\n\n.has-leading-icon {\n    &:not(.has-chips) {\n        .mdc-text-field__input {\n            padding-left: $leading-icon-space;\n        }\n    }\n\n    limel-chip {\n        &:first-of-type {\n            margin-left: 1.5rem;\n        }\n    }\n\n    .search-icon {\n        transition: transform 0.2s ease;\n        position: absolute;\n        top: functions.pxToRem(9);\n        left: 0.25rem;\n    }\n\n    limel-icon {\n        background-color: transparent;\n    }\n}\n\n.delimiter {\n    opacity: 0.5;\n    padding: 0 functions.pxToRem(2);\n    color: var(--mdc-theme-on-surface);\n}\n\nlimel-chip {\n    border-radius: 2rem;\n\n    &.can-be-removed {\n        // When chip is selected with keyboard (backspace / arrow-keys) to be deleted\n        box-shadow: var(--shadow-depth-8-error);\n    }\n}\n\n@import './partial-styles/_readonly';\n@import './partial-styles/_helper-text';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress","filePath":"./src/components/circular-progress/circular-progress.tsx","fileName":"circular-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/usage","tag":"limel-circular-progress","overview":"The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","usage":{},"docs":"The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-circular-progress"},{"name":"exampleComponent","text":"limel-example-circular-progress-sizes"},{"name":"exampleComponent","text":"limel-example-circular-progress-props"},{"name":"exampleComponent","text":"limel-example-circular-progress-css-variables"},{"name":"exampleComponent","text":"limel-example-circular-progress-percentage-colors"}],"encapsulation":"shadow","dependents":["limel-example-circular-progress","limel-example-circular-progress-css-variables","limel-example-circular-progress-percentage-colors","limel-example-circular-progress-props","limel-example-circular-progress-sizes","limel-example-collapsible-section-with-custom-header-component","limel-info-tile"],"dependencies":[],"dependencyGraph":{"limel-example-circular-progress":["limel-circular-progress"],"limel-example-circular-progress-css-variables":["limel-circular-progress"],"limel-example-circular-progress-percentage-colors":["limel-circular-progress"],"limel-example-circular-progress-props":["limel-circular-progress"],"limel-example-circular-progress-sizes":["limel-circular-progress"],"limel-example-collapsible-section-with-custom-header-component":["limel-circular-progress"],"limel-info-tile":["limel-circular-progress"]},"props":[{"name":"displayPercentageColors","type":"boolean","mutable":false,"attr":"display-percentage-colors","reflectToAttr":false,"docs":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"maxValue","type":"number","mutable":false,"attr":"max-value","reflectToAttr":false,"docs":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","docsTags":[],"default":"PERCENT","values":[{"type":"number"}],"optional":false,"required":false},{"name":"prefix","type":"string","mutable":false,"attr":"prefix","reflectToAttr":true,"docs":"The prefix which is displayed before the `value`, must be a few characters characters long.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"size","type":"\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\"","mutable":false,"attr":"size","reflectToAttr":true,"docs":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","docsTags":[],"values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-large","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false},{"name":"suffix","type":"string","mutable":false,"attr":"suffix","reflectToAttr":false,"docs":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","docsTags":[],"default":"'%'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value of the progress bar.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--circular-progress-background-color","annotation":"prop","docs":"Determines the background color of the central section. Defaults to `--contrast-100`."},{"name":"--circular-progress-fill-color","annotation":"prop","docs":"Determines the color of the progressed section. Defaults to `--lime-primary-color`."},{"name":"--circular-progress-prefix-color","annotation":"prop","docs":"Determines the color of the suffix. Defaults to `--contrast-1000`."},{"name":"--circular-progress-size","annotation":"prop","docs":"Determines the visual size of the visualization. This does not override the `size` property if it is specified."},{"name":"--circular-progress-suffix-color","annotation":"prop","docs":"Determines the color of the prefix. Defaults to `--contrast-1000`."},{"name":"--circular-progress-text-color","annotation":"prop","docs":"Determines the color of the value. Defaults to `--contrast-1200`."},{"name":"--circular-progress-track-color","annotation":"prop","docs":"Determines the color of the circular track. Defaults to `--contrast-400`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { CircularProgressSize } from '../circular-progress/circular-progress.types';\nimport { abbreviate } from '../badge/format';\n\nconst PERCENT = 100;\n\n/**\n * The circular progress component can be used to visualize the curent state of\n * a progress in a scale; for example percentage of completion of a task.\n *\n * Its compact UI makes the component suitable when there is not enough screen\n * space available to visualise such information.\n *\n * This component allows you to define your scale, from `0` to a desired\n * `maxValue`; and also lets you chose a proper `suffix` for your scale.\n *\n * :::note\n * The component will round up the value when it is displayed, and only shows\n * one decimal digit.\n * It also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\n * Of course such numbers, if bigger than `maxValue` will be visualized as a\n * full progress.\n * :::\n *\n * @exampleComponent limel-example-circular-progress\n * @exampleComponent limel-example-circular-progress-sizes\n * @exampleComponent limel-example-circular-progress-props\n * @exampleComponent limel-example-circular-progress-css-variables\n * @exampleComponent limel-example-circular-progress-percentage-colors\n */\n@Component({\n    tag: 'limel-circular-progress',\n    shadow: true,\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgress {\n    /**\n     * The value of the progress bar.\n     */\n    @Prop()\n    public value: number = 0;\n\n    /**\n     * The maximum value within the scale that the progress bar should visualize. Defaults to `100`.\n     */\n    @Prop()\n    public maxValue: number = PERCENT;\n\n    /**\n     * The prefix which is displayed before the `value`, must be a few characters characters long.\n     */\n    @Prop({ reflect: true })\n    public prefix?: string = null;\n\n    /**\n     * The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`\n     */\n    @Prop()\n    public suffix: string = '%';\n\n    /**\n     * When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.\n     */\n    @Prop()\n    public displayPercentageColors: boolean = false;\n\n    /**\n     * Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.\n     */\n    @Prop({ reflect: true })\n    public size: CircularProgressSize;\n\n    public render() {\n        const classList = {\n            'lime-circular-progress': true,\n            'displays-percentage-colors': this.displayPercentageColors,\n        };\n\n        const currentPercentage = (this.value * PERCENT) / this.maxValue + '%';\n        const value = Math.round(this.value * 10) / 10;\n\n        return (\n            <div\n                role=\"progressbar\"\n                class={classList}\n                aria-label=\"%\"\n                aria-valuemin=\"0\"\n                aria-valuemax={this.maxValue}\n                aria-valuenow={this.value}\n                style={{ '--percentage': currentPercentage }}\n            >\n                {this.renderPrefix()}\n                <span class=\"value\">\n                    {abbreviate(value)}\n                    <span class=\"suffix\">{this.suffix}</span>\n                </span>\n            </div>\n        );\n    }\n    private renderPrefix = () => {\n        if (this.prefix) {\n            return <span class=\"prefix\">{this.prefix}</span>;\n        }\n    };\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n/**\n * @prop --circular-progress-size: Determines the visual size of the visualization. This does not override the `size` property if it is specified.\n * @prop --circular-progress-track-color: Determines the color of the circular track. Defaults to `--contrast-400`.\n * @prop --circular-progress-suffix-color: Determines the color of the prefix. Defaults to `--contrast-1000`.\n * @prop --circular-progress-text-color: Determines the color of the value. Defaults to `--contrast-1200`.\n * @prop --circular-progress-prefix-color: Determines the color of the suffix. Defaults to `--contrast-1000`.\n * @prop --circular-progress-fill-color: Determines the color of the progressed section. Defaults to `--lime-primary-color`.\n * @prop --circular-progress-background-color: Determines the background color of the central section. Defaults to `--contrast-100`.\n */\n\n:host {\n    display: block;\n    box-sizing: border-box;\n    isolation: isolate;\n}\n\n:host([size='x-small']) {\n    --circular-progress-size: 1.5rem;\n    font-weight: bold;\n\n    .value {\n        letter-spacing: functions.pxToRem(-1);\n    }\n}\n\n:host([size='small']) {\n    --circular-progress-size: 2rem;\n    font-weight: bold;\n\n    .value {\n        letter-spacing: functions.pxToRem(-0.5);\n    }\n}\n\n:host([size='medium']) {\n    --circular-progress-size: 3rem;\n}\n\n:host([size='large']) {\n    --circular-progress-size: 4rem;\n}\n\n:host([size='x-large']) {\n    --circular-progress-size: 5rem;\n}\n\n.lime-circular-progress {\n    --size: var(--circular-progress-size, 3rem);\n    --fill-color: var(--circular-progress-fill-color, var(--mdc-theme-primary));\n    --track-color: var(\n        --circular-progress-track-color,\n        rgb(var(--contrast-400))\n    );\n    position: relative;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    width: var(--size);\n    height: var(--size);\n    border-radius: 50%;\n\n    line-height: normal;\n\n    box-shadow: 0 0 0 0.125rem rgb(var(--contrast-100), 0.7);\n    background: conic-gradient(\n        var(--fill-color) 0% var(--percentage),\n        var(--track-color) var(--percentage) 100%\n    );\n\n    &:before {\n        $size-of-middle-circle: calc(\n            var(--size) * 0.75 + 0.25rem\n        ); // this calculation ensures that the middle circle is responsive and always perfectly centered\n\n        content: '';\n        position: absolute;\n        width: $size-of-middle-circle;\n        height: $size-of-middle-circle;\n        border-radius: 50%;\n        background-color: var(\n            --circular-progress-background-color,\n            rgb(var(--contrast-100))\n        );\n        box-shadow: var(--button-shadow-pressed);\n    }\n}\n\n.prefix {\n    font-size: clamp(0.5rem, calc(var(--size) * 0.16), 2.25rem);\n    @include mixins.truncate-text();\n    text-align: center;\n    color: var(--circular-progress-prefix-color, rgb(var(--contrast-1000)));\n\n    width: 45%;\n    top: 20%;\n    position: absolute;\n}\n\n.value {\n    display: flex;\n    font-size: clamp(0.5rem, calc(var(--size) * 0.25), 4rem);\n    color: var(--circular-progress-text-color, rgb(var(--contrast-1200)));\n    z-index: 1;\n    cursor: default;\n}\n\n.suffix {\n    font-size: clamp(0.5rem, calc(var(--size) * 0.18), 2.5rem);\n    color: var(--circular-progress-suffix-color, rgb(var(--contrast-1000)));\n    padding-top: 4%;\n}\n\n@import './partial-styles/_percentage-colors';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor","filePath":"./src/components/code-editor/code-editor.tsx","fileName":"code-editor.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/usage","tag":"limel-code-editor","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-code-editor"},{"name":"exampleComponent","text":"limel-example-code-editor-readonly-with-line-numbers"},{"name":"exampleComponent","text":"limel-example-code-editor-fold-lint"}],"encapsulation":"shadow","dependents":["limel-example-code-editor","limel-example-code-editor-fold-lint","limel-example-code-editor-readonly-with-line-numbers"],"dependencies":[],"dependencyGraph":{"limel-example-code-editor":["limel-code-editor"],"limel-example-code-editor-fold-lint":["limel-code-editor"],"limel-example-code-editor-readonly-with-line-numbers":["limel-code-editor"]},"props":[{"name":"colorScheme","type":"\"auto\" | \"dark\" | \"light\"","mutable":false,"attr":"color-scheme","reflectToAttr":false,"docs":"Select color scheme for the editor","docsTags":[],"default":"'auto'","values":[{"value":"auto","type":"string"},{"value":"dark","type":"string"},{"value":"light","type":"string"}],"optional":false,"required":false},{"name":"fold","type":"boolean","mutable":false,"attr":"fold","reflectToAttr":false,"docs":"Allows the user to fold code","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"javascript\" | \"jinja2\" | \"json\" | \"typescript\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"The language of the code","docsTags":[],"values":[{"value":"javascript","type":"string"},{"value":"jinja2","type":"string"},{"value":"json","type":"string"},{"value":"typescript","type":"string"}],"optional":false,"required":false},{"name":"lineNumbers","type":"boolean","mutable":false,"attr":"line-numbers","reflectToAttr":false,"docs":"Displays line numbers in the editor","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"lint","type":"boolean","mutable":false,"attr":"lint","reflectToAttr":false,"docs":"Enables linting of JSON content","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"Disables editing of the editor content","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The code to be rendered","docsTags":[],"default":"''","values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the code has changed. Will only be emitted when the code\narea has lost focus","docsTags":[]}],"styles":[{"name":"--code-editor-font-size","annotation":"prop","docs":"Defines the font size of the code, defaults to `0.8125rem`."},{"name":"--code-editor-max-height","annotation":"prop","docs":"Defines how tall the code editor can get before content becomes scrollable, defaults to `10rem`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    Element,\n    Event,\n    EventEmitter,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { ColorScheme, Language } from './code-editor.types';\nimport CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/jinja2/jinja2';\nimport 'codemirror/addon/selection/active-line';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/lint/lint';\nimport 'codemirror/addon/lint/json-lint';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/fold/brace-fold';\nimport jslint from 'jsonlint-mod';\n\n/**\n * @exampleComponent limel-example-code-editor\n * @exampleComponent limel-example-code-editor-readonly-with-line-numbers\n * @exampleComponent limel-example-code-editor-fold-lint\n */\n@Component({\n    tag: 'limel-code-editor',\n    shadow: true,\n    styleUrl: 'code-editor.scss',\n})\nexport class CodeEditor {\n    /**\n     * The code to be rendered\n     */\n    @Prop()\n    public value: string = '';\n\n    /**\n     * The language of the code\n     */\n    @Prop()\n    public language: Language;\n\n    /**\n     * Disables editing of the editor content\n     */\n    @Prop()\n    public readonly: boolean = false;\n\n    /**\n     * Displays line numbers in the editor\n     */\n    @Prop()\n    public lineNumbers: boolean = false;\n\n    /**\n     * Allows the user to fold code\n     */\n    @Prop()\n    public fold: boolean = false;\n\n    /**\n     * Enables linting of JSON content\n     */\n    @Prop()\n    public lint: boolean = false;\n\n    /**\n     * Select color scheme for the editor\n     */\n    @Prop()\n    public colorScheme: ColorScheme = 'auto';\n\n    /**\n     * Emitted when the code has changed. Will only be emitted when the code\n     * area has lost focus\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    @Element()\n    private host: HTMLLimelCodeEditorElement;\n\n    /**\n     * This is only used to trigger a redraw if the\n     * `(prefers-color-scheme: dark)` media query is changed\n     */\n    @State()\n    protected random: number;\n\n    private editor: CodeMirror.Editor;\n    private observer: ResizeObserver;\n\n    public connectedCallback() {\n        this.observer = new ResizeObserver(this.handleResize) as any;\n        this.observer.observe(this.host);\n\n        this.darkMode.addEventListener('change', this.handleChangeDarkMode);\n    }\n\n    public disconnectedCallback() {\n        this.observer.unobserve(this.host);\n        this.editor?.off('change', this.handleChange);\n        this.editor = null;\n\n        this.darkMode.removeEventListener('change', this.handleChangeDarkMode);\n\n        const editorElement = this.host.shadowRoot.querySelector('.editor');\n        // eslint-disable-next-line no-unsafe-optional-chaining\n        for (const child of editorElement?.childNodes) {\n            child.remove();\n        }\n    }\n\n    public componentDidRender() {\n        if (this.editor) {\n            return;\n        }\n\n        this.editor = this.createEditor();\n    }\n\n    @Watch('value')\n    protected watchValue(newValue: string) {\n        if (!this.editor) {\n            return;\n        }\n\n        const currentValue = this.editor.getValue();\n        if (newValue === currentValue) {\n            // Circuit breaker for when the change comes from the editor itself\n            // The caret position will be reset without this\n            return;\n        }\n\n        this.editor.getDoc().setValue(newValue || '');\n    }\n\n    private handleChangeDarkMode = () => {\n        if (this.colorScheme !== 'auto') {\n            return;\n        }\n\n        this.forceRedraw();\n    };\n\n    private handleChange = () => {\n        this.change.emit(this.editor.getValue());\n    };\n\n    private handleResize = () => {\n        if (!this.editor) {\n            return;\n        }\n\n        this.editor.refresh();\n    };\n\n    private createEditor() {\n        const options = this.getOptions();\n\n        const editor = CodeMirror(\n            this.host.shadowRoot.querySelector('.editor'),\n            options\n        );\n\n        editor.on('change', this.handleChange);\n\n        // Replace tab with spaces and use the actual indent setting for\n        // the space count\n        editor.setOption('extraKeys', {\n            Tab: (codeMirror) => {\n                const spaces = [codeMirror.getOption('indentUnit') + 1].join(\n                    ' '\n                );\n                codeMirror.replaceSelection(spaces);\n            },\n        });\n\n        return editor;\n    }\n\n    private getOptions(): CodeMirror.EditorConfiguration {\n        let mode: string | CodeMirror.ModeSpec<any> = this.language;\n        const TAB_SIZE = 4;\n        let theme = 'lime light';\n        const gutters = [];\n\n        if (this.isDarkMode()) {\n            theme = 'lime dark';\n        }\n\n        if (this.language === 'json') {\n            mode = {\n                name: 'application/json',\n                json: true,\n            };\n            if (this.lint) {\n                gutters.push('CodeMirror-lint-markers');\n                if (!('jsonlint' in window)) {\n                    window['jsonlint'] = jslint;\n                }\n            }\n        } else if (this.language === 'typescript') {\n            mode = {\n                name: 'application/typescript',\n                typescript: true,\n            };\n        }\n\n        if (this.fold) {\n            gutters.push('CodeMirror-foldgutter');\n        }\n\n        return {\n            mode: mode,\n            value: this.value || '',\n            theme: theme,\n            readOnly: this.readonly,\n            tabSize: TAB_SIZE,\n            indentUnit: TAB_SIZE,\n            lineNumbers: this.lineNumbers,\n            styleActiveLine: true,\n            matchBrackets: true,\n            lint: this.lint,\n            foldGutter: this.fold,\n            gutters: gutters,\n        };\n    }\n\n    private isDarkMode(): boolean {\n        if (this.colorScheme !== 'auto') {\n            return this.colorScheme === 'dark';\n        }\n\n        return this.darkMode.matches;\n    }\n\n    public render() {\n        const classList = {\n            editor: true,\n            readonly: this.readonly,\n            'is-dark-mode': this.isDarkMode(),\n            'is-light-mode': !this.isDarkMode(),\n        };\n\n        return <div class={classList} />;\n    }\n\n    private forceRedraw() {\n        // eslint-disable-next-line sonarjs/pseudo-random\n        this.random = Math.random();\n    }\n\n    private get darkMode(): MediaQueryList {\n        return matchMedia('(prefers-color-scheme: dark)');\n    }\n}\n"},{"filename":"code-editor.scss","type":"scss","source":"@use '../../style/mixins';\n\n@import '../../../node_modules/codemirror/lib/codemirror.css';\n@import '../../../node_modules/codemirror/addon/lint/lint.css';\n@import '../../../node_modules/codemirror/addon/fold/foldgutter.css';\n\n/**\n * @prop --code-editor-max-height: Defines how tall the code editor can get before content becomes scrollable, defaults to `10rem`.\n * @prop --code-editor-font-size: Defines the font size of the code, defaults to `0.8125rem`.\n */\n\n@mixin light-mode-styles {\n    --code-editor-neutral-text-color: var(--contrast-1100);\n    --code-editor-background-color: var(--contrast-200);\n    --code-editor-gutter-background-color: var(--contrast-300);\n    --code-editor-line-number-text-color: var(--contrast-700);\n    --code-editor-cursor-color: var(--color-amber-dark);\n\n    --code-editor-selection-highlight-color: var(--color-cyan-default);\n    --code-editor-selection-lowlight-color: var(--contrast-600);\n\n    .cm-attribute,\n    .cm-property,\n    .cm-keyword {\n        color: rgb(var(--color-violet-light));\n    }\n    .cm-operator {\n        color: rgb(var(--color-sky-dark));\n    }\n    .cm-variable {\n        color: rgb(var(--color-pink-light));\n    }\n    .cm-variable-2 {\n        color: rgb(var(--contrast-1100));\n    }\n    .cm-variable-3,\n    .cm-type {\n        color: rgb(var(--color-amber-darker));\n    }\n    .cm-builtin,\n    .cm-meta {\n        color: rgb(var(--color-amber-default));\n    }\n    .cm-atom {\n        color: rgb(var(--color-coral-default));\n    }\n    .cm-tag,\n    .cm-number {\n        color: rgb(var(--color-magenta-default));\n    }\n    .cm-def {\n        color: rgb(var(--color-sky-default));\n    }\n    .cm-string {\n        color: rgb(var(--color-green-dark));\n    }\n    .cm-string-2 {\n        color: rgb(var(--color-pink-default));\n    }\n    .cm-qualifier {\n        color: rgb(var(--color-grass-default));\n    }\n    .cm-error {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-red-default));\n    }\n    .cm-comment {\n        color: rgba(var(--code-editor-neutral-text-color), 0.7);\n    }\n}\n\n@mixin dark-mode-styles {\n    --code-editor-neutral-text-color: var(--contrast-1600);\n    // --code-editor-background-color: { same as light };\n    // --code-editor-gutter-background-color: { same as light };\n    --code-editor-line-number-text-color: var(--contrast-800);\n    --code-editor-cursor-color: var(--color-amber-default);\n\n    --code-editor-selection-highlight-color: var(--color-cyan-light);\n    --code-editor-selection-lowlight-color: var(--contrast-100);\n\n    .cm-attribute,\n    .cm-property,\n    .cm-keyword {\n        color: rgb(var(--color-purple-lighter));\n    }\n    .cm-operator {\n        color: rgb(var(--color-sky-lighter));\n    }\n    // .cm-variable { same as light }\n    // .cm-variable-2 { same as light }\n    .cm-variable-3,\n    .cm-type {\n        color: rgb(var(--color-yellow-light));\n    }\n    // .cm-builtin,\n    // .cm-meta { same as light }\n    .cm-atom {\n        color: rgb(var(--color-coral-light));\n    }\n    .cm-tag,\n    .cm-number {\n        color: rgb(var(--color-magenta-light));\n    }\n    .cm-def {\n        color: rgb(var(--color-sky-light));\n    }\n    .cm-string {\n        color: rgb(var(--color-lime-light));\n    }\n    .cm-string-2 {\n        color: rgb(var(--color-pink-lighter));\n    }\n    .cm-qualifier {\n        color: rgb(var(--color-grass-light));\n    }\n    // .cm-error { same as light }\n    .cm-comment {\n        color: rgba(var(--code-editor-neutral-text-color), 0.4);\n    }\n}\n\n:host {\n    display: flex;\n    font-size: var(--code-editor-font-size, 0.8125rem); // 13px\n    @include light-mode-styles;\n}\n\n@include mixins.in(dark-mode) {\n    :host {\n        @include dark-mode-styles;\n    }\n}\n\n.editor {\n    display: flex;\n    align-items: stretch;\n    width: 100%;\n\n    &.readonly {\n        .CodeMirror-focused {\n            .CodeMirror-cursors {\n                visibility: visible !important;\n            }\n        }\n    }\n}\n\n.cm-s-lime {\n    &.CodeMirror {\n        @include mixins.font-family(monospace);\n        color: rgb(var(--code-editor-neutral-text-color));\n        background-color: rgb(var(--code-editor-background-color));\n        border-radius: 0.25rem;\n        height: auto;\n        width: 100%;\n    }\n\n    .CodeMirror-scroll {\n        max-height: var(--code-editor-max-height, 10rem);\n    }\n\n    &.CodeMirror-focused {\n        div.CodeMirror-selected {\n            background: rgba(\n                var(--code-editor-selection-highlight-color),\n                0.15\n            );\n        }\n    }\n    div.CodeMirror-selected {\n        background: rgba(var(--code-editor-selection-highlight-color), 0.05);\n    }\n\n    .CodeMirror {\n        &-gutters {\n            background-color: rgb(var(--code-editor-gutter-background-color));\n            color: rgb(var(--code-editor-line-number-text-color));\n            border: none;\n        }\n\n        &-guttermarker,\n        &-guttermarker-subtle,\n        &-linenumber {\n            color: rgb(var(--code-editor-line-number-text-color));\n        }\n\n        &-cursor {\n            border-left: 1px solid rgb(var(--code-editor-cursor-color));\n\n            .editor.readonly & {\n                border-color: rgba(var(--code-editor-neutral-text-color), 0.5);\n                border-width: 0.125rem;\n            }\n        }\n\n        &-line {\n        }\n\n        &-activeline-background {\n            background: rgba(var(--code-editor-selection-lowlight-color), 0.5);\n        }\n\n        &-matchingbracket {\n            font-weight: bold;\n            color: rgb(var(--code-editor-neutral-text-color)) !important;\n            background: rgba(\n                var(--code-editor-selection-highlight-color),\n                0.15\n            );\n            position: relative;\n\n            &:before {\n                content: '_';\n                color: rgb(var(--code-editor-selection-highlight-color), 0.8);\n                position: absolute;\n                bottom: -0.4rem;\n                left: 0;\n                right: 0;\n            }\n        }\n    }\n    .CodeMirror-lint-marker-error,\n    .CodeMirror-lint-message-error {\n        background: {\n            image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32'><defs/><path fill='rgb(255,255,255)' d='M7.219 5.781L5.78 7.22 14.563 16 5.78 24.781 7.22 26.22 16 17.437l8.781 8.782 1.438-1.438L17.437 16l8.782-8.781L24.78 5.78 16 14.563z'/></svg>\");\n            color: rgb(var(--color-red-default));\n            size: 0.75rem;\n        }\n        border-radius: 50%;\n    }\n\n    .CodeMirror-foldmarker {\n        position: relative;\n        @include mixins.is-elevated-clickable($color: transparent);\n        text-shadow: none;\n\n        padding: 0 0.5rem;\n        border-radius: 1rem;\n\n        background: {\n            image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' xml:space='preserve'><circle fill='rgba(186,186,192,0.7)' cx='16' cy='16' r='2'/><circle fill='rgba(186,186,192,0.7)' cx='26' cy='16' r='2'/><circle fill='rgba(186,186,192,0.7)' cx='6' cy='16' r='2'/></svg>\");\n            size: contain;\n            repeat: no-repeat;\n            position: center;\n        }\n    }\n\n    [class^='CodeMirror-foldgutter'] {\n        color: var(--code-editor-neutral-text-color);\n        transition: opacity 0.2s ease;\n        opacity: 0.4;\n\n        &:hover {\n            opacity: 1;\n        }\n    }\n\n    .CodeMirror-foldgutter-folded {\n        opacity: 0.7;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section","filePath":"./src/components/collapsible-section/collapsible-section.tsx","fileName":"collapsible-section.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/usage","tag":"limel-collapsible-section","overview":"A collapsible section can be used to group related content together\nand hide the group when not needed.\nUsing this component can help to:\n- Save vertical space by hiding non-essential content\n- Improve content organization and scannability of the user interface\n- Reduce cognitive load by displaying only a set of relevant information at a time\n- Or disclose complex information, progressively to the user","usage":{},"docs":"A collapsible section can be used to group related content together\nand hide the group when not needed.\nUsing this component can help to:\n- Save vertical space by hiding non-essential content\n- Improve content organization and scannability of the user interface\n- Reduce cognitive load by displaying only a set of relevant information at a time\n- Or disclose complex information, progressively to the user","docsTags":[{"name":"slot","text":"- Content to put inside the collapsible section"},{"name":"slot","text":"header - Optional slot for custom header content"},{"name":"exampleComponent","text":"limel-example-collapsible-section-basic"},{"name":"exampleComponent","text":"limel-example-collapsible-section-actions"},{"name":"exampleComponent","text":"limel-example-collapsible-section-with-custom-header-component"},{"name":"exampleComponent","text":"limel-example-collapsible-section-external-control"},{"name":"exampleComponent","text":"limel-example-collapsible-section-with-slider"},{"name":"exampleComponent","text":"limel-example-collapsible-section-invalid"},{"name":"exampleComponent","text":"limel-example-collapsible-section-icon"},{"name":"exampleComponent","text":"limel-example-collapsible-section-css-props"}],"encapsulation":"shadow","dependents":["limel-example-collapsible-section-actions","limel-example-collapsible-section-basic","limel-example-collapsible-section-css-props","limel-example-collapsible-section-external-control","limel-example-collapsible-section-icon","limel-example-collapsible-section-invalid","limel-example-collapsible-section-with-custom-header-component","limel-example-collapsible-section-with-slider","limel-example-dialog-nested-close-events","limel-example-tooltip-composite"],"dependencies":["limel-icon","limel-icon-button"],"dependencyGraph":{"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-collapsible-section-actions":["limel-collapsible-section"],"limel-example-collapsible-section-basic":["limel-collapsible-section"],"limel-example-collapsible-section-css-props":["limel-collapsible-section"],"limel-example-collapsible-section-external-control":["limel-collapsible-section"],"limel-example-collapsible-section-icon":["limel-collapsible-section"],"limel-example-collapsible-section-invalid":["limel-collapsible-section"],"limel-example-collapsible-section-with-custom-header-component":["limel-collapsible-section"],"limel-example-collapsible-section-with-slider":["limel-collapsible-section"],"limel-example-dialog-nested-close-events":["limel-collapsible-section"],"limel-example-tooltip-composite":["limel-collapsible-section"]},"props":[{"name":"actions","type":"Action[]","mutable":false,"reflectToAttr":false,"docs":"Actions to place to the far right inside the header","docsTags":[],"values":[{"type":"Action[]"}],"optional":false,"required":false},{"name":"header","type":"string","mutable":false,"attr":"header","reflectToAttr":true,"docs":"Text to display in the header of the section","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"icon","type":"Icon | string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"Icon to display in the header of the section","docsTags":[],"values":[{"type":"Icon"},{"type":"string"}],"optional":true,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"`true` if the section is invalid, `false` if valid.\nThis can be used to indicate that the content inside the section is invalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"isOpen","type":"boolean","mutable":true,"attr":"is-open","reflectToAttr":true,"docs":"`true` if the section is expanded, `false` if collapsed.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.\nWill translate the translatable strings on the components.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"action","detail":"Action","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when an action is clicked inside the header","docsTags":[]},{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the section is collapsed","docsTags":[]},{"event":"open","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the section is expanded","docsTags":[]}],"styles":[{"name":"--body-background-color","annotation":"prop","docs":"background color for body"},{"name":"--body-padding","annotation":"prop","docs":"space around content of the body"},{"name":"--closed-header-background-color","annotation":"prop","docs":"background color for header when closed"},{"name":"--header-stroke-color","annotation":"prop","docs":"color of the animated icons that visualize collapsed or normal states of the headers, as well as the divider line on headers"},{"name":"--open-header-background-color","annotation":"prop","docs":"background color for header when open"}],"slots":[{"name":"","docs":"Content to put inside the collapsible section"},{"name":"header","docs":"Optional slot for custom header content"}],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    Element,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { dispatchResizeEvent } from '../../util/dispatch-resize-event';\nimport { Action } from './action';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { createRandomString } from '../../util/random-string';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport {\n    getIconColor,\n    getIconName,\n    getIconTitle,\n} from '../icon/get-icon-props';\nimport translate from '../../global/translations';\nimport { Languages } from '../date-picker/date.types';\n\n/**\n * A collapsible section can be used to group related content together\n * and hide the group when not needed.\n * Using this component can help to:\n * - Save vertical space by hiding non-essential content\n * - Improve content organization and scannability of the user interface\n * - Reduce cognitive load by displaying only a set of relevant information at a time\n * - Or disclose complex information, progressively to the user\n *\n * @slot - Content to put inside the collapsible section\n * @slot header - Optional slot for custom header content\n *\n * @exampleComponent limel-example-collapsible-section-basic\n * @exampleComponent limel-example-collapsible-section-actions\n * @exampleComponent limel-example-collapsible-section-with-custom-header-component\n * @exampleComponent limel-example-collapsible-section-external-control\n * @exampleComponent limel-example-collapsible-section-with-slider\n * @exampleComponent limel-example-collapsible-section-invalid\n * @exampleComponent limel-example-collapsible-section-icon\n * @exampleComponent limel-example-collapsible-section-css-props\n */\n@Component({\n    tag: 'limel-collapsible-section',\n    shadow: true,\n    styleUrl: 'collapsible-section.scss',\n})\nexport class CollapsibleSection {\n    /**\n     * `true` if the section is expanded, `false` if collapsed.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public isOpen: boolean = false;\n\n    /**\n     * Text to display in the header of the section\n     */\n    @Prop({ reflect: true })\n    public header: string;\n\n    /**\n     * Icon to display in the header of the section\n     */\n    @Prop()\n    public icon?: string | Icon;\n\n    /**\n     * `true` if the section is invalid, `false` if valid.\n     * This can be used to indicate that the content inside the section is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Actions to place to the far right inside the header\n     */\n    @Prop()\n    public actions: Action[];\n\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Emitted when the section is expanded\n     */\n    @Event()\n    private open: EventEmitter<void>;\n\n    /**\n     * Emitted when the section is collapsed\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    /**\n     * Emitted when an action is clicked inside the header\n     */\n    @Event()\n    private action: EventEmitter<Action>;\n\n    @Element()\n    private host: HTMLElement;\n\n    private bodyId = createRandomString();\n    private headingId = createRandomString();\n\n    public componentDidRender() {\n        const button = this.host.shadowRoot.querySelector(\n            '.open-close-toggle'\n        ) as HTMLElement;\n\n        makeEnterClickable(button);\n    }\n\n    public disconnectedCallback() {\n        const button = this.host.shadowRoot.querySelector(\n            '.open-close-toggle'\n        ) as HTMLElement;\n\n        removeEnterClickable(button);\n    }\n\n    public render() {\n        return (\n            <section\n                class={`${this.isOpen ? 'open' : ''}`}\n                aria-invalid={this.invalid}\n                aria-labelledby={this.header ? this.headingId : null}\n            >\n                <header>\n                    <button\n                        class=\"open-close-toggle\"\n                        onClick={this.onClick}\n                        aria-controls={this.bodyId}\n                        aria-expanded={this.isOpen ? 'true' : 'false'}\n                        aria-label={this.getCollapsibleSectionAriaLabel()}\n                        type=\"button\"\n                    />\n                    {this.renderExpandCollapseSign()}\n                    {this.renderIcon()}\n                    {this.renderHeading()}\n                    <div class=\"divider-line\" role=\"presentation\" />\n                    {this.renderHeaderSlot()}\n                    {this.renderActions()}\n                </header>\n                <div\n                    class=\"body\"\n                    aria-hidden={String(!this.isOpen)}\n                    id={this.bodyId}\n                    role=\"region\"\n                >\n                    <slot />\n                </div>\n            </section>\n        );\n    }\n\n    private onClick = () => {\n        this.handleInteraction();\n    };\n\n    private handleInteraction = () => {\n        this.isOpen = !this.isOpen;\n\n        if (this.isOpen) {\n            this.open.emit();\n            const waitForUiToRender = 100;\n            setTimeout(dispatchResizeEvent, waitForUiToRender);\n        } else {\n            this.close.emit();\n        }\n    };\n\n    private renderExpandCollapseSign = () => {\n        return (\n            <div class=\"expand-icon\" role=\"presentation\" aria-hidden=\"true\">\n                <div class=\"line\" />\n                <div class=\"line\" />\n                <div class=\"line\" />\n                <div class=\"line\" />\n            </div>\n        );\n    };\n\n    private renderIcon = () => {\n        if (!this.icon) {\n            return;\n        }\n\n        const name = getIconName(this.icon);\n        const color = getIconColor(this.icon);\n        const title = getIconTitle(this.icon);\n\n        return (\n            <limel-icon\n                name={name}\n                aria-label={title}\n                aria-hidden={title ? null : 'true'}\n                style={{\n                    color: `${color}`,\n                }}\n            />\n        );\n    };\n\n    private renderHeading = () => {\n        if (!this.header) {\n            return;\n        }\n\n        return (\n            <h2\n                class=\"title mdc-typography mdc-typography--headline2\"\n                id={this.headingId}\n            >\n                {this.header}\n            </h2>\n        );\n    };\n\n    private renderActions = () => {\n        if (!this.actions) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\">\n                {this.actions.map(this.renderActionButton)}\n            </div>\n        );\n    };\n\n    private renderHeaderSlot() {\n        return <slot name=\"header\" />;\n    }\n\n    private renderActionButton = (action: Action) => {\n        return (\n            <limel-icon-button\n                icon={action.icon}\n                label={action.label}\n                disabled={action.disabled}\n                onClick={this.handleActionClick(action)}\n            />\n        );\n    };\n\n    private handleActionClick = (action: Action) => (event: MouseEvent) => {\n        event.stopPropagation();\n        this.action.emit(action);\n    };\n\n    private getCollapsibleSectionAriaLabel = (): string => {\n        const heading = this.header ? `\"${this.header}\"` : ' ';\n\n        if (!this.isOpen) {\n            return translate.get('collapsible-section.open', this.language, {\n                header: heading,\n            });\n        }\n\n        return translate.get('collapsible-section.close', this.language, {\n            header: heading,\n        });\n    };\n}\n"},{"filename":"collapsible-section.scss","type":"scss","source":"@use '../../style/mixins';\n@use '../../style/internal/shared_input-select-picker';\n\n/**\n * @prop --closed-header-background-color: background color for header when closed\n * @prop --open-header-background-color: background color for header when open\n * @prop --header-stroke-color: color of the animated icons that visualize collapsed or normal states of the headers, as well as the divider line on headers\n * @prop --body-background-color: background color for body\n * @prop --body-padding: space around content of the body\n */\n\n:host(limel-collapsible-section) {\n    --border-radius-of-header: 0.75rem;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n.open-close-toggle {\n    all: unset;\n    position: absolute;\n    inset: 0;\n    width: 100%; // for Firefox\n    @include mixins.visualize-keyboard-focus;\n    transition:\n        background-color 0.4s ease,\n        border-radius 0.1s ease;\n    cursor: pointer;\n    z-index: -1;\n\n    background-color: var(\n        --closed-header-background-color,\n        rgb(var(--contrast-200))\n    );\n    border-radius: var(--border-radius-of-header);\n\n    &:hover,\n    &:focus-visible {\n        background-color: var(\n            --open-header-background-color,\n            rgb(var(--contrast-300))\n        );\n    }\n\n    section.open & {\n        background-color: var(\n            --open-header-background-color,\n            rgb(var(--contrast-100))\n        );\n        border-radius: var(--border-radius-of-header)\n            var(--border-radius-of-header) 0 0;\n        &:hover,\n        &:focus-visible {\n            background-color: var(\n                --open-header-background-color,\n                rgb(var(--contrast-300))\n            );\n        }\n    }\n}\n\n.title,\n.divider-line,\n.expand-icon {\n    pointer-events: none;\n}\n\nsection {\n    transition: box-shadow 0.4s ease;\n    border-radius: var(--border-radius-of-header);\n\n    &[aria-invalid]:not([aria-invalid='false']) {\n        --header-stroke-color: rgb(var(--color-red-default)) !important;\n\n        &:not(.open) {\n            box-shadow: 0 0 0 1px rgb(var(--color-red-default));\n        }\n    }\n}\n\nheader {\n    isolation: isolate;\n    position: relative;\n\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n    gap: 0.5rem;\n\n    padding-left: 0.5rem;\n    height: shared_input-select-picker.$height-of-mdc-text-field;\n}\n\nlimel-icon {\n    width: 1.5rem;\n}\n\n.title {\n    font-size: 1rem;\n    font-weight: 300;\n    color: var(--mdc-theme-on-surface);\n\n    justify-self: flex-start;\n\n    user-select: none; // mostly to improve experience on Android, where tapping on sections selects the text too\n\n    // Below tries to render text in two lines,\n    // and then truncate if there is no more space\n    height: auto;\n    max-height: 3rem;\n    line-height: 1.2rem;\n    @include mixins.truncate-text-on-line(2);\n}\n\n.divider-line {\n    transition: opacity 0.3s ease 0.3s;\n    flex-grow: 1;\n    height: 0.125rem;\n    border-radius: 1rem;\n    background-color: var(--header-stroke-color, rgb(var(--contrast-900)));\n\n    opacity: 0;\n    margin-right: 0.5rem;\n\n    section.open & {\n        opacity: 0.16;\n    }\n}\n\n.actions {\n    justify-self: flex-end;\n    flex-shrink: 0;\n}\n\n::slotted([slot='header']) {\n    margin-right: 0.5rem;\n}\n\n.body {\n    background-color: var(--body-background-color, var(--contrast-100));\n    padding-left: var(--body-padding, 1.25rem);\n    padding-right: var(--body-padding, 1.25rem);\n    border-radius: 0 0 var(--border-radius-of-header)\n        var(--border-radius-of-header);\n}\n\n// This animates height of the body,\n// from `0` to `auto`\n.body {\n    // All below vars are for internal use only!\n    --limel-cs-opacity-transition-speed: 0.1s;\n    --limel-cs-opacity-transition-delay: 0s;\n    --limel-cs-grid-template-rows-transition-speed: 0.3s;\n    transition: grid-template-rows\n        var(--limel-cs-grid-template-rows-transition-speed)\n        cubic-bezier(1, 0.09, 0, 0.89);\n    display: grid;\n    grid-template-rows: 0fr;\n\n    slot {\n        transition: opacity var(--limel-cs-opacity-transition-speed) ease\n            var(--limel-cs-opacity-transition-delay);\n        display: block;\n        overflow: hidden;\n        opacity: 0;\n    }\n}\n\nsection.open {\n    .body {\n        --limel-cs-opacity-transition-speed: 0.4s;\n        --limel-cs-opacity-transition-delay: 0.3s;\n        --limel-cs-grid-template-rows-transition-speed: 0.46s;\n        grid-template-rows: 1fr;\n\n        slot {\n            opacity: 1;\n        }\n    }\n}\n\nheader:hover,\nheader:has(.open-close-toggle:hover),\nheader:has(.open-close-toggle:focus-visible) {\n    + .body {\n        will-change: grid-template-rows;\n\n        slot {\n            will-change: opacity;\n        }\n    }\n}\n\n// End: animating height\n\n@import './partial-styles/expand-icon.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker","filePath":"./src/components/color-picker/color-picker.tsx","fileName":"color-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/usage","tag":"limel-color-picker","overview":"This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","usage":{},"docs":"This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-color-picker"},{"name":"exampleComponent","text":"limel-example-color-picker-readonly"}],"encapsulation":"shadow","dependents":["limel-example-color-picker","limel-example-color-picker-readonly"],"dependencies":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"dependencyGraph":{"limel-color-picker":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-color-picker":["limel-color-picker"],"limel-example-color-picker-readonly":["limel-color-picker"]},"props":[{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Helper text of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The label of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` if a value is readonly. This makes the component un-interactive.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` if a value is required","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"tooltipLabel","type":"string","mutable":false,"attr":"tooltip-label","reflectToAttr":true,"docs":"Displayed as tooltips when picker is hovered.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"Name or code of the chosen color","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emits chosen value to the parent component","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker.tsx","type":"tsx","source":"import { Component, h, Prop, State, Event, EventEmitter } from '@stencil/core';\nimport { FormComponent } from '../form/form.types';\n\n/**\n * This component enables you to select a swatch from out color palette, simply\n * by clicking on it. You can then copy the css variable name of the chosen color\n * and use it where desired.\n *\n * The color picker can also show you a preview of any valid color name or color value.\n *\n * :::note\n * Make sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n * :::\n *\n * @exampleComponent limel-example-color-picker\n * @exampleComponent limel-example-color-picker-readonly\n */\n@Component({\n    tag: 'limel-color-picker',\n    shadow: true,\n    styleUrl: 'color-picker.scss',\n})\nexport class ColorPicker implements FormComponent {\n    /**\n     * Name or code of the chosen color\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * The label of the input field\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Helper text of the input field\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Displayed as tooltips when picker is hovered.\n     */\n    @Prop({ reflect: true })\n    public tooltipLabel: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * Set to `true` if a value is readonly. This makes the component un-interactive.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean;\n\n    /**\n     * Emits chosen value to the parent component\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    @State()\n    private isOpen = false;\n\n    public componentDidRender() {\n        if (this.shouldFocus && this.isOpen) {\n            this.shouldFocus = false;\n            this.contentElement?.focus();\n        }\n    }\n\n    private contentElement?: HTMLLimelColorPickerPaletteElement;\n\n    private shouldFocus = false;\n\n    public render() {\n        return [\n            this.renderTooltip(),\n            <div class=\"color-picker\">\n                {this.renderPickerPalette()}\n\n                <limel-input-field\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    required={this.required}\n                    readonly={this.readonly}\n                    class=\"chosen-color-input\"\n                />\n            </div>,\n        ];\n    }\n    private renderTooltip = () => {\n        if (!this.readonly && this.tooltipLabel) {\n            return (\n                <limel-tooltip\n                    label={this.tooltipLabel}\n                    elementId=\"tooltip-button\"\n                />\n            );\n        }\n    };\n\n    private renderPickerPalette = () => {\n        if (this.readonly) {\n            return this.renderPickerTrigger();\n        }\n\n        return (\n            <limel-popover\n                open={this.isOpen}\n                openDirection=\"bottom-start\"\n                onClose={this.onPopoverClose}\n            >\n                {this.renderPickerTrigger()}\n                <limel-color-picker-palette\n                    ref={this.setColorPickerPaletteElement}\n                    value={this.value}\n                    label={this.label}\n                    helperText={this.helperText}\n                    onChange={this.handleChange}\n                    required={this.required}\n                />\n            </limel-popover>\n        );\n    };\n\n    private renderPickerTrigger = () => {\n        const background = this.value ? { '--background': this.value } : {};\n\n        return (\n            <button\n                class=\"picker-trigger\"\n                slot=\"trigger\"\n                style={background}\n                role=\"button\"\n                onClick={this.openPopover}\n                id=\"tooltip-button\"\n            />\n        );\n    };\n\n    private setColorPickerPaletteElement = (\n        element: HTMLLimelColorPickerPaletteElement\n    ) => {\n        this.contentElement = element;\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n\n        this.shouldFocus = this.isOpen;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        this.isOpen = false;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.change.emit(event.detail);\n    };\n}\n"},{"filename":"color-picker.scss","type":"scss","source":"@use '../../style/mixins';\n@use '../../style/internal/shared_input-select-picker';\n@import './partial-styles/lime-admin-hack';\n\n:host {\n    position: relative;\n    --popover-surface-width: 50rem;\n    --color-picker-default-background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n}\n\n.color-picker {\n    display: grid;\n    gap: 0.25rem;\n    grid-template-columns: auto 1fr;\n}\n\n.picker-trigger {\n    all: unset;\n    border-radius: 0.5rem;\n    @include mixins.is-elevated-clickable();\n    @include mixins.visualize-keyboard-focus();\n\n    &:after {\n        box-shadow: 0 0 0 0.25rem rgb(var(--contrast-100)) inset;\n    }\n}\n\n.chosen-color-preview,\n.picker-trigger {\n    box-sizing: border-box;\n    position: relative;\n    isolation: isolate;\n    width: shared_input-select-picker.$height-of-mdc-text-field;\n    height: shared_input-select-picker.$height-of-mdc-text-field;\n\n    &:before,\n    &:after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: inherit;\n    }\n\n    &:before {\n        background: var(--color-picker-default-background);\n        background-size: 0.5rem;\n        z-index: 0;\n    }\n\n    &:after {\n        background: var(--background);\n        z-index: 1;\n    }\n}\n\n:host([readonly]) {\n    .picker-trigger {\n        &:hover,\n        &:active {\n            cursor: default;\n            box-shadow: var(--button-shadow-normal);\n            transform: none;\n        }\n    }\n}\n\n.chosen-color-input[readonly] {\n    transform: translateX(\n            calc(\n                #{shared_input-select-picker.$height-of-mdc-text-field} / 4 * -1\n            )\n        )\n        translateY(\n            calc(#{shared_input-select-picker.$height-of-mdc-text-field} / 4)\n        );\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker","filePath":"./src/components/color-picker/color-picker-palette.tsx","fileName":"color-picker-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/usage","tag":"limel-color-picker-palette","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-color-picker","limel-example-ai-avatar-colors"],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-color-picker":["limel-color-picker-palette"],"limel-example-ai-avatar-colors":["limel-color-picker-palette"]},"props":[{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Helper text of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label of the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` if a value is required","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"Color value that is manually typed by the user","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emits chosen value to the parent component","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker-palette.tsx","type":"tsx","source":"import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { FormComponent } from '../form/form.types';\nimport { brightnesses, colors, getColorName, getCssColor } from './swatches';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-color-picker-palette',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'color-picker-palette.scss',\n})\nexport class Palette implements FormComponent {\n    /**\n     * Color value that is manually typed by the user\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Label of the input field\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Helper text of the input field\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * Emits chosen value to the parent component\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    public render() {\n        const background = this.value ? { '--background': this.value } : {};\n\n        return [\n            <div class=\"color-picker-palette\">{this.renderSwatches()}</div>,\n            <div class=\"chosen-color-name\">\n                <limel-input-field\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    required={this.required}\n                />\n                <div class=\"chosen-color-preview\" style={background} />\n            </div>,\n        ];\n    }\n\n    private renderSwatches = () => {\n        return colors.map((color) => {\n            return brightnesses.map(this.renderSwatch(color));\n        });\n    };\n\n    private renderSwatch = (color: string) => (brightness: string) => {\n        const colorName = getColorName(color, brightness);\n        const classList = {\n            swatch: true,\n            [colorName]: true,\n            'swatch--selected': this.value === getCssColor(color, brightness),\n        };\n\n        return (\n            <button\n                class={classList}\n                onClick={this.handleClick(color, brightness)}\n            />\n        );\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.change.emit(event.detail);\n    };\n\n    private handleClick =\n        (color: string, brightness: string) => (event: MouseEvent) => {\n            const value = getCssColor(color, brightness);\n            event.stopPropagation();\n            this.change.emit(value);\n        };\n}\n"},{"filename":"color-picker-palette.scss","type":"scss","source":"@use '../../design-guidelines/color-system/examples/extended-color-palette';\n@use '../../style/mixins';\n@import './color-picker';\n\n:host {\n    border-radius: 0.75rem; // is like popover's default `--popover-border-radius`\n    background-color: rgb(var(--kompendium-contrast-300));\n}\n\n.color-picker-palette {\n    display: grid;\n    gap: 0.25rem;\n    grid-auto-flow: column;\n    grid-template-columns: repeat(20, 1fr);\n    grid-template-rows: repeat(4, 1fr) auto;\n    margin: 1rem;\n}\n\n.chosen-color-name {\n    box-sizing: border-box;\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr auto;\n    gap: 0.5rem;\n}\n\n.chosen-color-preview {\n    border: 1px solid rgba(var(--contrast-700), 0.65); // color is the same as\n    // colors in shared_input-select-picker.scss\n    border-radius: 50%;\n}\n\n.swatch:not(.hue) {\n    border: none;\n    aspect-ratio: 1;\n\n    @include mixins.visualize-keyboard-focus();\n\n    // We could use the `@include mixins.is-flat-clickable();` mixin\n    // But its `background-color` arguments would interfere with the\n    // styles here. So we just copy/pasted the useful parts of the mixin here\n    transition:\n        color 0.2s ease,\n        background-color 0.2s ease,\n        box-shadow 0.2s ease,\n        transform 0.1s ease-out;\n\n    &:hover {\n        box-shadow: var(--button-shadow-hovered);\n    }\n\n    &:active {\n        box-shadow: var(--button-shadow-pressed);\n\n        transform: translate3d(0, 0.08rem, 0);\n    }\n    cursor: pointer;\n\n    &:focus-visible {\n        box-shadow:\n            var(--shadow-depth-8-focused),\n            0 0 0 0.25rem rgb(var(--contrast-100)) inset;\n    }\n}\n\n.swatch--selected {\n    border-radius: 50%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/config","filePath":"./src/components/config/config.tsx","fileName":"config.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/config/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/config/usage","tag":"limel-config","overview":"Component used to set global configuration for Lime Elements.\n\n:::warning\n**Building something for Lime CRM?** Then you should _NOT_ use this component.\nLime CRM already uses this component to set the global configuration for\nLime Elements. No matter what problem you are facing at the moment, using\nthis component will not help, and might cause other problems.\n:::\n\nBuilding your own software, which is using Lime Elements?\nThen you _might_ need to use this component.","usage":{},"docs":"Component used to set global configuration for Lime Elements.\n\n:::warning\n**Building something for Lime CRM?** Then you should _NOT_ use this component.\nLime CRM already uses this component to set the global configuration for\nLime Elements. No matter what problem you are facing at the moment, using\nthis component will not help, and might cause other problems.\n:::\n\nBuilding your own software, which is using Lime Elements?\nThen you _might_ need to use this component.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[{"name":"config","type":"{ iconPath?: string; defaultLocale?: string; markdownWhitelist?: CustomElementDefinition[]; featureSwitches?: Record<string, boolean>; }","mutable":false,"reflectToAttr":false,"docs":"Global configuration for Lime Elements.","docsTags":[],"values":[{"type":"{ iconPath?: string; defaultLocale?: string; markdownWhitelist?: CustomElementDefinition[]; featureSwitches?: Record<string, boolean>; }"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"config.tsx","type":"tsx","source":"import { Component, Prop } from '@stencil/core';\nimport { Config, globalConfig } from '../../global/config';\n\n/**\n * Component used to set global configuration for Lime Elements.\n *\n * :::warning\n * **Building something for Lime CRM?** Then you should _NOT_ use this component.\n * Lime CRM already uses this component to set the global configuration for\n * Lime Elements. No matter what problem you are facing at the moment, using\n * this component will not help, and might cause other problems.\n * :::\n *\n * Building your own software, which is using Lime Elements?\n * Then you _might_ need to use this component.\n *\n * @private\n */\n@Component({\n    tag: 'limel-config',\n    shadow: true,\n})\nexport class ConfigComponent {\n    /**\n     * Global configuration for Lime Elements.\n     */\n    @Prop()\n    public config: Config;\n\n    public componentDidLoad() {\n        this.setGlobalConfig();\n    }\n\n    public componentDidUpdate() {\n        this.setGlobalConfig();\n    }\n\n    /*\n     * Copy any config settings to the global config object\n     */\n    private setGlobalConfig() {\n        if (!this.config) {\n            return;\n        }\n\n        for (const key of Object.keys(this.config)) {\n            globalConfig[key] = this.config[key];\n        }\n    }\n\n    public render() {\n        return null;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker","filePath":"./src/components/date-picker/date-picker.tsx","fileName":"date-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/usage","tag":"limel-date-picker","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-date-picker-datetime"},{"name":"exampleComponent","text":"limel-example-date-picker-date"},{"name":"exampleComponent","text":"limel-example-date-picker-time"},{"name":"exampleComponent","text":"limel-example-date-picker-week"},{"name":"exampleComponent","text":"limel-example-date-picker-month"},{"name":"exampleComponent","text":"limel-example-date-picker-quarter"},{"name":"exampleComponent","text":"limel-example-date-picker-year"},{"name":"exampleComponent","text":"limel-example-date-picker-formatted"},{"name":"exampleComponent","text":"limel-example-date-picker-programmatic-change"},{"name":"exampleComponent","text":"limel-example-date-picker-composite"},{"name":"exampleComponent","text":"limel-example-date-picker-custom-formatter"}],"encapsulation":"shadow","dependents":["limel-example-date-picker-composite","limel-example-date-picker-custom-formatter","limel-example-date-picker-date","limel-example-date-picker-datetime","limel-example-date-picker-formatted","limel-example-date-picker-month","limel-example-date-picker-programmatic-change","limel-example-date-picker-quarter","limel-example-date-picker-time","limel-example-date-picker-week","limel-example-date-picker-year"],"dependencies":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"dependencyGraph":{"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-date-picker-composite":["limel-date-picker"],"limel-example-date-picker-custom-formatter":["limel-date-picker"],"limel-example-date-picker-date":["limel-date-picker"],"limel-example-date-picker-datetime":["limel-date-picker"],"limel-example-date-picker-formatted":["limel-date-picker"],"limel-example-date-picker-month":["limel-date-picker"],"limel-example-date-picker-programmatic-change":["limel-date-picker"],"limel-example-date-picker-quarter":["limel-date-picker"],"limel-example-date-picker-time":["limel-date-picker"],"limel-example-date-picker-week":["limel-date-picker"],"limel-example-date-picker-year":["limel-date-picker"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"format","type":"string","mutable":false,"attr":"format","reflectToAttr":true,"docs":"Format to display the selected date in.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"formatter","type":"(date: Date) => string","mutable":false,"reflectToAttr":false,"docs":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","docsTags":[],"values":[{"type":"(date: Date) => string"}],"optional":true,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Text to display next to the date picker","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":true,"docs":"The placeholder text shown inside the input field, when the field is focused and empty","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the field is required.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"type","type":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Type of date picker.","docsTags":[],"default":"'datetime'","values":[{"value":"date","type":"string"},{"value":"datetime","type":"string"},{"value":"month","type":"string"},{"value":"quarter","type":"string"},{"value":"time","type":"string"},{"value":"week","type":"string"},{"value":"year","type":"string"}],"optional":false,"required":false},{"name":"value","type":"Date","mutable":false,"reflectToAttr":false,"docs":"The value of the field.","docsTags":[],"values":[{"type":"Date"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Date","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the date picker value is changed.","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"z-index of the dropdown menu."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    EventEmitter,\n    Event,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { isAndroidDevice, isIOSDevice } from '../../util/device';\nimport { DateType, Languages } from '../date-picker/date.types';\nimport { InputType } from '../input-field/input-field.types';\nimport { DateFormatter } from './date-formatter';\nimport { MDCTextField } from '@material/textfield';\n\n// tslint:disable:no-duplicate-string\nconst nativeTypeForConsumerType: { [key: string]: InputType } = {\n    date: 'date',\n    time: 'time',\n    // Mobile Safari feature detects as capable of input type `week`,\n    // but it just displays a non-interactive input\n    // TODO(ads): remove this when support is decent on iOS!\n    week: isIOSDevice() ? 'date' : 'week',\n    month: 'month',\n    quarter: 'date',\n    year: 'date',\n    datetime: 'datetime-local',\n    default: 'datetime-local',\n};\nconst nativeFormatForType = {\n    date: 'Y-MM-DD',\n    time: 'HH:mm',\n    week: 'GGGG-[W]WW',\n    month: 'Y-MM',\n    'datetime-local': 'Y-MM-DD[T]HH:mm',\n};\n// tslint:enable:no-duplicate-string\n\n/**\n * @exampleComponent limel-example-date-picker-datetime\n * @exampleComponent limel-example-date-picker-date\n * @exampleComponent limel-example-date-picker-time\n * @exampleComponent limel-example-date-picker-week\n * @exampleComponent limel-example-date-picker-month\n * @exampleComponent limel-example-date-picker-quarter\n * @exampleComponent limel-example-date-picker-year\n * @exampleComponent limel-example-date-picker-formatted\n * @exampleComponent limel-example-date-picker-programmatic-change\n * @exampleComponent limel-example-date-picker-composite\n * @exampleComponent limel-example-date-picker-custom-formatter\n */\n@Component({\n    tag: 'limel-date-picker',\n    shadow: true,\n    styleUrl: 'date-picker.scss',\n})\nexport class DatePicker {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the date picker is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Text to display next to the date picker\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop()\n    public value: Date;\n\n    /**\n     * Type of date picker.\n     */\n    @Prop({ reflect: true })\n    public type: DateType = 'datetime';\n\n    /**\n     * Format to display the selected date in.\n     */\n    @Prop({ reflect: true })\n    public format: string;\n\n    /**\n     * Defines the localisation for translations and date formatting.\n     * Property `format` customizes the localized date format.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Custom formatting function. Will be used for date formatting.\n     *\n     * :::note\n     * overrides `format` and `language`\n     * :::\n     */\n    @Prop()\n    public formatter?: (date: Date) => string;\n\n    /**\n     * Emitted when the date picker value is changed.\n     */\n    @Event()\n    private change: EventEmitter<Date>;\n\n    @Element()\n    private host: HTMLLimelDatePickerElement;\n\n    @State()\n    private internalFormat: string;\n    @State()\n    private showPortal = false;\n\n    private useNative: boolean;\n    private nativeType: InputType;\n    private nativeFormat: string;\n    private textField: HTMLElement;\n    private datePickerCalendar: HTMLLimelFlatpickrAdapterElement;\n    private portalId = `date-picker-calendar-${createRandomString()}`;\n    private dateFormatter: DateFormatter;\n\n    constructor() {\n        this.handleCalendarChange = this.handleCalendarChange.bind(this);\n        this.handleInputElementChange =\n            this.handleInputElementChange.bind(this);\n        this.showCalendar = this.showCalendar.bind(this);\n        this.dateFormatter = new DateFormatter(this.language);\n        this.clearValue = this.clearValue.bind(this);\n        this.hideCalendar = this.hideCalendar.bind(this);\n        this.onInputClick = this.onInputClick.bind(this);\n        this.nativeChangeHandler = this.nativeChangeHandler.bind(this);\n        this.preventBlurFromCalendarContainer =\n            this.preventBlurFromCalendarContainer.bind(this);\n    }\n\n    public componentWillLoad() {\n        this.useNative = !this.readonly && (isIOSDevice() || isAndroidDevice());\n\n        this.updateInternalFormatAndType();\n    }\n\n    public componentWillUpdate() {\n        this.updateInternalFormatAndType();\n    }\n\n    public disconnectedCallback() {\n        this.hideCalendar();\n    }\n\n    public render() {\n        const inputProps: any = {\n            onAction: this.clearValue,\n        };\n\n        if (this.value && !this.readonly) {\n            inputProps.trailingIcon = 'clear_symbol';\n        }\n\n        if (this.useNative) {\n            return (\n                <limel-input-field\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                    invalid={this.invalid}\n                    label={this.label}\n                    helperText={this.helperText}\n                    required={this.required}\n                    value={this.formatValue(this.value)}\n                    type={this.nativeType}\n                    onChange={this.nativeChangeHandler}\n                />\n            );\n        }\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        const formatter = this.formatter || this.formatValue;\n\n        return [\n            <limel-input-field\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                label={this.label}\n                placeholder={this.placeholder}\n                helperText={this.helperText}\n                required={this.required}\n                value={this.value ? formatter(this.value) : ''}\n                onFocus={this.showCalendar}\n                onBlur={this.hideCalendar}\n                onClick={this.onInputClick}\n                onChange={this.handleInputElementChange}\n                ref={(el) => (this.textField = el)}\n                {...inputProps}\n            />,\n            <limel-portal\n                containerId={this.portalId}\n                visible={this.showPortal}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-flatpickr-adapter\n                    format={this.internalFormat}\n                    language={this.language}\n                    type={this.type}\n                    value={this.value}\n                    ref={(el) => (this.datePickerCalendar = el)}\n                    isOpen={this.showPortal}\n                    formatter={formatter}\n                    onChange={this.handleCalendarChange}\n                />\n            </limel-portal>,\n        ];\n    }\n\n    private updateInternalFormatAndType() {\n        this.nativeType = nativeTypeForConsumerType[this.type || 'default'];\n        this.nativeFormat = nativeFormatForType[this.nativeType];\n\n        if (this.useNative) {\n            this.internalFormat = this.nativeFormat;\n        } else if (this.formatter || this.format) {\n            this.internalFormat = this.format;\n        } else {\n            this.internalFormat = this.dateFormatter.getDateFormat(this.type);\n        }\n    }\n\n    private nativeChangeHandler(event: CustomEvent<string>) {\n        event.stopPropagation();\n        const date = this.dateFormatter.parseDate(\n            event.detail,\n            this.internalFormat\n        );\n        this.change.emit(date);\n    }\n\n    private showCalendar(event) {\n        this.showPortal = true;\n        const inputElement = this.textField.shadowRoot.querySelector('input');\n        setTimeout(() => {\n            this.datePickerCalendar.inputElement = inputElement;\n        });\n        event.stopPropagation();\n\n        document.addEventListener('mousedown', this.documentClickListener, {\n            passive: true,\n        });\n\n        document.addEventListener(\n            'blur',\n            this.preventBlurFromCalendarContainer,\n            {\n                capture: true,\n            }\n        );\n    }\n\n    private preventBlurFromCalendarContainer(event) {\n        // We don't want the input element to lose focus when we pick\n        // a date in the calendar container.\n        // This is also required in order to not close the non\n        // automatically closing pickers (type datetime and time)\n        // when you pick a value.\n        if (event.relatedTarget === this.datePickerCalendar) {\n            event.stopPropagation();\n        }\n    }\n\n    private hideCalendar() {\n        setTimeout(() => {\n            this.showPortal = false;\n        });\n        document.removeEventListener('mousedown', this.documentClickListener);\n        document.removeEventListener(\n            'blur',\n            this.preventBlurFromCalendarContainer\n        );\n\n        if (!this.pickerIsAutoClosing()) {\n            this.fixFlatpickrFocusBug();\n        }\n    }\n\n    private fixFlatpickrFocusBug() {\n        // Flatpickr removes the focus from the input field\n        // but the 'visual focus' is still there\n        const mdcTextField = new MDCTextField(\n            this.textField.shadowRoot.querySelector('.mdc-text-field')\n        );\n        mdcTextField.getDefaultFoundation().deactivateFocus();\n        mdcTextField.valid = !this.invalid;\n    }\n\n    private documentClickListener = (event: MouseEvent) => {\n        if (event.composedPath().includes(this.textField)) {\n            return;\n        }\n\n        const element = document.querySelector(`#${this.portalId}`);\n        if (!element.contains(event.target as Node)) {\n            this.hideCalendar();\n        }\n    };\n\n    private handleCalendarChange(event) {\n        const date = event.detail;\n        event.stopPropagation();\n        if (this.pickerIsAutoClosing()) {\n            this.hideCalendar();\n        }\n\n        this.change.emit(date);\n    }\n\n    private onInputClick(event) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        if (this.showPortal) {\n            return;\n        }\n\n        this.showCalendar(event);\n    }\n\n    private handleInputElementChange(event) {\n        if (event.detail === '') {\n            this.clearValue();\n        }\n\n        event.stopPropagation();\n    }\n\n    private pickerIsAutoClosing() {\n        return this.type !== 'datetime' && this.type !== 'time';\n    }\n\n    private clearValue() {\n        this.change.emit(null);\n    }\n\n    private formatValue = (value: Date): string =>\n        this.dateFormatter.formatDate(value, this.internalFormat);\n}\n"},{"filename":"date-picker.scss","type":"scss","source":"// Note! The `--dropdown-z-index` property is used from `date-picker.tsx`.\n/**\n * @prop --dropdown-z-index: z-index of the dropdown menu.\n */\n\n:host(limel-date-picker) {\n    position: relative;\n}\n\nlimel-input-field[disabled],\nlimel-input-field[readonly] {\n    pointer-events: none;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog","filePath":"./src/components/dialog/dialog.tsx","fileName":"dialog.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/usage","tag":"limel-dialog","overview":":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogRenderer](https://lundalogik.github.io/lime-web-components/versions/latest/interfaces/DialogRenderer.html)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","usage":{},"docs":":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogRenderer](https://lundalogik.github.io/lime-web-components/versions/latest/interfaces/DialogRenderer.html)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-dialog"},{"name":"exampleComponent","text":"limel-example-dialog-nested-close-events"},{"name":"exampleComponent","text":"limel-example-dialog-heading"},{"name":"exampleComponent","text":"limel-example-dialog-heading-actions"},{"name":"exampleComponent","text":"limel-example-dialog-form"},{"name":"exampleComponent","text":"limel-example-dialog-size"},{"name":"exampleComponent","text":"limel-example-dialog-fullscreen"},{"name":"exampleComponent","text":"limel-example-dialog-closing-actions"},{"name":"exampleComponent","text":"limel-example-dialog-action-buttons"},{"name":"slot","text":"- Content to put inside the dialog"},{"name":"slot","text":"header-actions - The dialog header buttons"},{"name":"slot","text":"button - The dialog buttons"}],"encapsulation":"shadow","dependents":["limel-example-dialog","limel-example-dialog-action-buttons","limel-example-dialog-closing-actions","limel-example-dialog-form","limel-example-dialog-fullscreen","limel-example-dialog-heading","limel-example-dialog-heading-actions","limel-example-dialog-nested-close-events","limel-example-dialog-size","limel-example-select-dialog"],"dependencies":["limel-header"],"dependencyGraph":{"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-example-dialog":["limel-dialog"],"limel-example-dialog-action-buttons":["limel-dialog"],"limel-example-dialog-closing-actions":["limel-dialog"],"limel-example-dialog-form":["limel-dialog"],"limel-example-dialog-fullscreen":["limel-dialog"],"limel-example-dialog-heading":["limel-dialog"],"limel-example-dialog-heading-actions":["limel-dialog"],"limel-example-dialog-nested-close-events":["limel-dialog"],"limel-example-dialog-size":["limel-dialog"],"limel-example-select-dialog":["limel-dialog"]},"props":[{"name":"closingActions","type":"ClosingActions","mutable":false,"reflectToAttr":false,"docs":"Defines which action triggers a close-event.","docsTags":[],"default":"{\n        escapeKey: true,\n        scrimClick: true,\n    }","values":[{"type":"ClosingActions"}],"optional":false,"required":false},{"name":"fullscreen","type":"boolean","mutable":false,"attr":"fullscreen","reflectToAttr":true,"docs":"Set to `true` to make the dialog \"fullscreen\".","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"heading","type":"DialogHeading | string","mutable":false,"attr":"heading","reflectToAttr":false,"docs":"The heading for the dialog, if any.","docsTags":[],"values":[{"type":"DialogHeading"},{"type":"string"}],"optional":false,"required":false},{"name":"open","type":"boolean","mutable":true,"attr":"open","reflectToAttr":true,"docs":"`true` if the dialog is open, `false` otherwise.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the dialog is closed from inside the component.\n(*Not* emitted when the consumer sets the `open`-property to `false`.)","docsTags":[]},{"event":"closing","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the dialog is in the process of being closed.","docsTags":[]}],"styles":[{"name":"--dialog-heading-icon-background-color","annotation":"prop","docs":"Background color of the icon when displayed as a badge."},{"name":"--dialog-heading-icon-color","annotation":"prop","docs":"Color of the icon."},{"name":"--dialog-heading-subtitle-color","annotation":"prop","docs":"Color of the subtitle."},{"name":"--dialog-heading-supporting-text-color","annotation":"prop","docs":"Color of the supporting text."},{"name":"--dialog-heading-title-color","annotation":"prop","docs":"Color of the title."},{"name":"--dialog-height","annotation":"prop","docs":"Height of the dialog."},{"name":"--dialog-max-height","annotation":"prop","docs":"Max height of the dialog."},{"name":"--dialog-max-width","annotation":"prop","docs":"Max width of the dialog."},{"name":"--dialog-padding-left-right","annotation":"prop","docs":"Padding on the sides of dialog content. Defaults to `1.25rem`."},{"name":"--dialog-padding-top-bottom","annotation":"prop","docs":"Padding on top and bottom of dialog content. Affects the height of fade-out effects on top and bottom edges when the content is scrollable and has overflowed out of the content area. Defaults to `1.5rem`. Note that if you use this variable and set it to numbers smaller than 1rem, you will loose the fade-out effects on the edges. If you have set these paddings to `0`, losing the fade out effects should be however fine for your use case! Because in such a case your intention is to handle the `overflow` internally in the component that is displayed in the dialog's content."},{"name":"--dialog-width","annotation":"prop","docs":"Width of the dialog."},{"name":"--dialog-z-index","annotation":"prop","docs":"z-index of the dialog container, including the scrim."}],"slots":[{"name":"","docs":"Content to put inside the dialog"},{"name":"button","docs":"The dialog buttons"},{"name":"header-actions","docs":"The dialog header buttons"}],"parts":[],"listeners":[],"sources":[{"filename":"dialog.tsx","type":"tsx","source":"import { DialogHeading, ClosingActions } from './dialog.types';\nimport { MDCDialog } from '@material/dialog';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { isEqual } from 'lodash-es';\nimport { dispatchResizeEvent } from '../../util/dispatch-resize-event';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * :::note\n * Regarding the `close` event: When putting other elements that emit `close`\n * events inside a dialog, those events must be caught and stopped inside the\n * dialog. If not, they will bubble to the event handler listening for `close`\n * events on the dialog, which will close the dialog too.\n *\n * See the example _Nested `close` events_.\n * :::\n *\n * :::important\n * Are you developing for\n * [Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\n * you should use the [DialogRenderer](https://lundalogik.github.io/lime-web-components/versions/latest/interfaces/DialogRenderer.html)\n * from Lime Web Components to open dialogs in Lime CRM.\n * :::\n *\n * @exampleComponent limel-example-dialog\n * @exampleComponent limel-example-dialog-nested-close-events\n * @exampleComponent limel-example-dialog-heading\n * @exampleComponent limel-example-dialog-heading-actions\n * @exampleComponent limel-example-dialog-form\n * @exampleComponent limel-example-dialog-size\n * @exampleComponent limel-example-dialog-fullscreen\n * @exampleComponent limel-example-dialog-closing-actions\n * @exampleComponent limel-example-dialog-action-buttons\n * @slot - Content to put inside the dialog\n * @slot header-actions - The dialog header buttons\n * @slot button - The dialog buttons\n */\n@Component({\n    tag: 'limel-dialog',\n    shadow: true,\n    styleUrl: 'dialog.scss',\n})\nexport class Dialog {\n    /**\n     * The heading for the dialog, if any.\n     */\n    @Prop()\n    public heading: string | DialogHeading;\n\n    /**\n     * Set to `true` to make the dialog \"fullscreen\".\n     */\n    @Prop({ reflect: true })\n    public fullscreen = false;\n\n    /**\n     * `true` if the dialog is open, `false` otherwise.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines which action triggers a close-event.\n     */\n    @Prop({ reflect: true })\n    public closingActions: ClosingActions = {\n        escapeKey: true,\n        scrimClick: true,\n    };\n    /**\n     * Emitted when the dialog is closed from inside the component.\n     * (*Not* emitted when the consumer sets the `open`-property to `false`.)\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    /**\n     * Emitted when the dialog is in the process of being closed.\n     */\n    @Event()\n    private closing: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelDialogElement;\n\n    private mdcDialog: MDCDialog;\n\n    private id: string;\n\n    constructor() {\n        this.handleMdcOpened = this.handleMdcOpened.bind(this);\n        this.handleMdcClosed = this.handleMdcClosed.bind(this);\n        this.handleMdcClosing = this.handleMdcClosing.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        this.id = createRandomString();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector('.mdc-dialog');\n        if (!element) {\n            return;\n        }\n\n        this.mdcDialog = new MDCDialog(element);\n        if (this.open) {\n            this.mdcDialog.open();\n        }\n\n        this.mdcDialog.listen('MDCDialog:opened', this.handleMdcOpened);\n        this.mdcDialog.listen('MDCDialog:closed', this.handleMdcClosed);\n        this.mdcDialog.listen('MDCDialog:closing', this.handleMdcClosing);\n\n        this.setClosingActions();\n    }\n\n    public disconnectedCallback() {\n        this.mdcDialog.unlisten('MDCDialog:opened', this.handleMdcOpened);\n        this.mdcDialog.unlisten('MDCDialog:closed', this.handleMdcClosed);\n        this.mdcDialog.unlisten('MDCDialog:closing', this.handleMdcClosing);\n        this.mdcDialog.destroy();\n    }\n\n    public render() {\n        return (\n            <div\n                class={{\n                    'mdc-dialog': true,\n                    'full-screen': !!this.fullscreen,\n                }}\n                role=\"alertdialog\"\n                aria-modal=\"true\"\n                aria-labelledby={'limel-dialog-title-' + this.id}\n                aria-describedby={'limel-dialog-content-' + this.id}\n            >\n                <input hidden={true} id=\"initialFocusEl\" />\n                <div class=\"mdc-dialog__container\">\n                    <div class=\"mdc-dialog__surface\">\n                        {/*\n                            The `initialFocusElement` below is needed to make\n                            focus trapping work. At the time of writing, the\n                            focusable elements inside the slots are not\n                            detected, so we supply our own hidden element for\n                            the focus trap to use. Read more here:\n                            https://github.com/material-components/material-components-web/tree/v11.0.0/packages/mdc-dialog#handling-focus-trapping\n                        */}\n                        <input type=\"button\" id=\"initialFocusElement\" />\n                        {this.renderHeading()}\n                        <div\n                            class=\"mdc-dialog__content\"\n                            id={'limel-dialog-content-' + this.id}\n                        >\n                            <slot />\n                        </div>\n                        {this.renderFooter()}\n                    </div>\n                </div>\n                <div class=\"mdc-dialog__scrim\" />\n            </div>\n        );\n    }\n\n    @Watch('open')\n    protected watchHandler(newValue: boolean, oldValue: boolean) {\n        if (oldValue === newValue) {\n            return;\n        }\n\n        if (!this.mdcDialog) {\n            return;\n        }\n\n        if (newValue) {\n            this.mdcDialog.open();\n        } else {\n            this.mdcDialog.close();\n        }\n    }\n\n    @Watch('closingActions')\n    protected closingActionsChanged(\n        newValue: ClosingActions,\n        oldValue: ClosingActions\n    ) {\n        if (isEqual(newValue, oldValue)) {\n            return;\n        }\n\n        this.setClosingActions();\n    }\n\n    private handleMdcOpened() {\n        // When the opening-animation has completed, dispatch a\n        // resize-event so that any content that depends on\n        // javascript for layout has a chance to update to the\n        // final layout of the dialog. /Ads\n        const waitForUiToRender = 100;\n        setTimeout(dispatchResizeEvent, waitForUiToRender);\n    }\n\n    private handleMdcClosed() {\n        if (this.open) {\n            this.close.emit();\n        }\n\n        this.open = false;\n    }\n\n    private handleMdcClosing() {\n        this.closing.emit();\n    }\n\n    private isBadgeHeading(\n        heading: string | DialogHeading\n    ): heading is DialogHeading {\n        return typeof heading === 'object' && !!heading.title && !!heading.icon;\n    }\n\n    private renderHeading() {\n        if (this.isBadgeHeading(this.heading)) {\n            const { title, subtitle, supportingText, icon } = this.heading;\n\n            return (\n                <limel-header\n                    icon={icon}\n                    heading={title}\n                    subheading={subtitle}\n                    supportingText={supportingText}\n                >\n                    <slot name=\"header-actions\" slot=\"actions\" />\n                </limel-header>\n            );\n        } else if (typeof this.heading === 'string') {\n            return <limel-header heading={this.heading}></limel-header>;\n        }\n\n        return null;\n    }\n\n    private renderFooter() {\n        return (\n            <footer class=\"mdc-dialog__actions\">\n                <slot name=\"button\" />\n            </footer>\n        );\n    }\n\n    private setClosingActions() {\n        this.mdcDialog.scrimClickAction = '';\n        if (this.closingActions.scrimClick) {\n            this.mdcDialog.scrimClickAction = 'close';\n        }\n\n        this.mdcDialog.escapeKeyAction = '';\n        if (this.closingActions.escapeKey) {\n            this.mdcDialog.escapeKeyAction = 'close';\n        }\n    }\n}\n"},{"filename":"dialog.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n@use '@material/dialog';\n\n/**\n * @prop --dialog-width: Width of the dialog.\n * @prop --dialog-height: Height of the dialog.\n * @prop --dialog-z-index: z-index of the dialog container, including the scrim.\n * @prop --dialog-heading-title-color: Color of the title.\n * @prop --dialog-heading-subtitle-color: Color of the subtitle.\n * @prop --dialog-heading-supporting-text-color: Color of the supporting text.\n * @prop --dialog-heading-icon-color: Color of the icon.\n * @prop --dialog-heading-icon-background-color: Background color of the icon when displayed as a badge.\n * @prop --dialog-max-width: Max width of the dialog.\n * @prop --dialog-max-height: Max height of the dialog.\n * @prop --dialog-padding-top-bottom: Padding on top and bottom of dialog content. Affects the height of fade-out effects on top and bottom edges when the content is scrollable and has overflowed out of the content area. Defaults to `1.5rem`. Note that if you use this variable and set it to numbers smaller than 1rem, you will loose the fade-out effects on the edges. If you have set these paddings to `0`, losing the fade out effects should be however fine for your use case! Because in such a case your intention is to handle the `overflow` internally in the component that is displayed in the dialog's content.\n * @prop --dialog-padding-left-right: Padding on the sides of dialog content. Defaults to `1.25rem`.\n */\n\n:host {\n    --dialog-background-color: var(--lime-elevated-surface-background-color);\n    --header-heading-color: var(--dialog-heading-title-color);\n    --header-subheading-color: var(--dialog-heading-subtitle-color);\n    --header-supporting-text-color: var(--dialog-heading-supporting-text-color);\n    --header-icon-color: var(--dialog-heading-icon-color);\n    --header-icon-background-color: var(--dialog-heading-icon-background-color);\n}\n\n$responsive-body-padding: 3vw; // 3% of viewport's width\n\n@include dialog.core-styles;\n\n.mdc-dialog__content {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-dialog {\n    @include dialog.max-width(16000px, dialog.$margin);\n\n    z-index: var(--dialog-z-index, dialog.$z-index);\n    padding: env(safe-area-inset-top) env(safe-area-inset-right)\n        env(safe-area-inset-bottom) env(safe-area-inset-left);\n\n    &.full-screen {\n        @include dialog.max-height(16000px, dialog.$margin);\n        .mdc-dialog__container {\n            height: 100%;\n            width: 100%;\n\n            .mdc-dialog__surface {\n                height: 100%;\n                width: 100%;\n            }\n        }\n    }\n\n    .mdc-dialog__scrim {\n        background-color: rgba(var(--color-black), 0.4);\n    }\n\n    .mdc-dialog__container {\n        height: 100%;\n        width: var(--dialog-width, auto);\n    }\n\n    .mdc-dialog__surface {\n        width: var(--dialog-width, auto);\n        height: var(--dialog-height, auto);\n        background-color: var(--dialog-background-color);\n        box-shadow: var(--shadow-depth-64);\n\n        max-width: var(--dialog-max-width, calc(100vw - 2rem));\n        max-height: var(--dialog-max-height, calc(100% - 2rem));\n        border-radius: 0.75rem;\n    }\n\n    .mdc-dialog__content {\n        --limel-top-edge-fade-height: var(--dialog-padding-top-bottom, 1.5rem);\n        --limel-bottom-edge-fade-height: var(\n            --dialog-padding-top-bottom,\n            1.5rem\n        );\n        @include mixins.fade-out-overflowed-content-on-edges(vertically);\n\n        color: var(--mdc-theme-on-surface);\n        padding-left: var(\n            --dialog-padding-left-right,\n            min(1.25rem, $responsive-body-padding)\n        );\n        padding-right: var(\n            --dialog-padding-left-right,\n            min(1.25rem, $responsive-body-padding)\n        );\n    }\n}\n\n#initialFocusElement {\n    position: absolute;\n    opacity: 0;\n    pointer-events: none;\n    z-index: -1;\n}\n\nslot[name='header'] {\n    display: none;\n}\n\nslot[name='button'] {\n    display: flex;\n    gap: 0.5rem; // Makes sure buttons get some default distance\n    width: 100%;\n    justify-content: flex-end;\n}\n\nfooter.mdc-dialog__actions {\n    min-height: unset;\n    padding: 0.375rem; // 6px\n}\n\n@media screen and (max-width: #{mixins.$narrow-dialog-breakpoint}) {\n    slot[name='button'] {\n        flex-direction: column-reverse;\n    }\n    .mdc-dialog__actions {\n        padding: min(1.5rem, $responsive-body-padding);\n        padding-top: 1rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock","filePath":"./src/components/dock/dock.tsx","fileName":"dock.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/usage","tag":"limel-dock","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-dock-basic"},{"name":"exampleComponent","text":"limel-example-dock-custom-component"},{"name":"exampleComponent","text":"limel-example-dock-notification"},{"name":"exampleComponent","text":"limel-example-dock-mobile"},{"name":"exampleComponent","text":"limel-example-dock-expanded"},{"name":"exampleComponent","text":"limel-example-dock-colors-css"}],"encapsulation":"shadow","dependents":["limel-example-dock-basic","limel-example-dock-colors-css","limel-example-dock-custom-component","limel-example-dock-expanded","limel-example-dock-mobile","limel-example-dock-notification"],"dependencies":["limel-dock-button","limel-icon"],"dependencyGraph":{"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-dock-basic":["limel-dock"],"limel-example-dock-colors-css":["limel-dock"],"limel-example-dock-custom-component":["limel-dock"],"limel-example-dock-expanded":["limel-dock"],"limel-example-dock-mobile":["limel-dock"],"limel-example-dock-notification":["limel-dock"]},"props":[{"name":"accessibleLabel","type":"string","mutable":false,"attr":"accessible-label","reflectToAttr":true,"docs":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\"","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"allowResize","type":"boolean","mutable":false,"attr":"allow-resize","reflectToAttr":true,"docs":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"dockFooterItems","type":"DockItem[]","mutable":false,"reflectToAttr":false,"docs":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","docsTags":[],"default":"[]","values":[{"type":"DockItem[]"}],"optional":true,"required":false},{"name":"dockItems","type":"DockItem[]","mutable":false,"reflectToAttr":false,"docs":"Items that are placed in the dock.","docsTags":[],"default":"[]","values":[{"type":"DockItem[]"}],"optional":false,"required":false},{"name":"expanded","type":"boolean","mutable":false,"attr":"expanded","reflectToAttr":true,"docs":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"mobileBreakPoint","type":"number","mutable":false,"attr":"mobile-break-point","reflectToAttr":true,"docs":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","docsTags":[],"default":"DEFAULT_MOBILE_BREAKPOINT","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when the popover is closed.","docsTags":[]},{"event":"dockExpanded","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a Dock is expanded or collapsed.","docsTags":[]},{"event":"itemSelected","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock item has been selected from the dock.","docsTags":[]},{"event":"menuOpen","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock menu is opened.","docsTags":[]}],"styles":[{"name":"--dock-background-color","annotation":"prop","docs":"Background color of the whole component, defaults to `--contrast-100`."},{"name":"--dock-expanded-max-width","annotation":"prop","docs":"The maximum width of the Dock when it is expanded. Defaults to `max-content` which means the Dock will adjust its width to the widest dock item."},{"name":"--dock-item-background-color--selected","annotation":"prop","docs":"Background color of selected dock item, defaults to `--contrast-200`."},{"name":"--dock-item-icon-color","annotation":"prop","docs":"Color of the optional icons used in each dock item. Only affects inactive dock items, defaults to text colors for default or selected states."},{"name":"--dock-item-text-color","annotation":"prop","docs":"Text of dock items, defaults to `--contrast-1100`."},{"name":"--dock-item-text-color--selected","annotation":"prop","docs":"Text color of selected dock item, defaults to `--contrast-1300`."},{"name":"--dock-padding-bottom","annotation":"prop","docs":"Space of the bottom side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-bottom)`."},{"name":"--dock-padding-left","annotation":"prop","docs":"Space of the left side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-left)`."},{"name":"--dock-padding-right","annotation":"prop","docs":"Space of the right side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-right)`."},{"name":"--dock-padding-top","annotation":"prop","docs":"Space of top side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-top)`."},{"name":"--popover-surface-width","annotation":"prop","docs":"Defines the width of the popover that is opened for dock items with custom components. Defaults to `auto`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { DockItem } from './dock.types';\n\nconst DEFAULT_MOBILE_BREAKPOINT = 700;\n\n/**\n * @exampleComponent limel-example-dock-basic\n * @exampleComponent limel-example-dock-custom-component\n * @exampleComponent limel-example-dock-notification\n * @exampleComponent limel-example-dock-mobile\n * @exampleComponent limel-example-dock-expanded\n * @exampleComponent limel-example-dock-colors-css\n */\n@Component({\n    tag: 'limel-dock',\n    shadow: true,\n    styleUrl: 'dock.scss',\n})\nexport class Dock {\n    /**\n     * Items that are placed in the dock.\n     */\n    @Prop()\n    public dockItems: DockItem[] = [];\n\n    /**\n     * Items that are placed at the bottom of the dock. (Or at the end in mobile\n     * layout.)\n     */\n    @Prop()\n    public dockFooterItems?: DockItem[] = [];\n\n    /**\n     * A label used to describe the purpose of the navigation element to users\n     * of assistive technologies, like screen readers. Especially useful when\n     * there are multiple navigation elements in the user interface.\n     * Example value: \"Primary navigation\"\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    /**\n     * Defines the width of the component, when it loads.\n     * - `true`: shows both icons and labels of the Dock items.\n     * - `false`: only shows icons of the doc items, and displays\n     * their labels as tooltip.\n     *\n     * Note: when `useMobileLayout` is `true`, labels will always\n     * be shown as tooltips. Read more below…\n     */\n    @Prop({ reflect: true })\n    public expanded? = false;\n\n    /**\n     * Set to `false` if you do not want to allow end-users\n     * to exapnd or shrink the Dock. This will hide the\n     * expand/shrink button, and the only things that defines\n     * the layout will be the `expanded` property, and\n     * the `mobileBreakPoint`.\n     */\n    @Prop({ reflect: true })\n    public allowResize? = true;\n\n    /**\n     * Defines the breakpoint in pixles, at which the component will be rendered\n     * in a hoizontal layout. Default breakpoint is `700` pixels, which means\n     * when the screen size is smaller than `700px`, the component will automatically\n     * switch to a horizontal layout.\n     */\n    @Prop({ reflect: true })\n    public mobileBreakPoint?: number = DEFAULT_MOBILE_BREAKPOINT;\n\n    /**\n     * Fired when a dock item has been selected from the dock.\n     */\n    @Event()\n    public itemSelected: EventEmitter<DockItem>;\n\n    /**\n     * Fired when a dock menu is opened.\n     */\n    @Event()\n    public menuOpen: EventEmitter<DockItem>;\n\n    /**\n     * Fired when the popover is closed.\n     */\n    @Event()\n    public close: EventEmitter<void>;\n\n    /**\n     * Fired when a Dock is expanded or collapsed.\n     */\n    @Event()\n    private dockExpanded: EventEmitter<boolean>;\n\n    /**\n     * Is used to render the component horizontally, and place\n     * the Dock items in a row.\n     */\n    @State()\n    private useMobileLayout = false;\n\n    private resizeObserver: ResizeObserver;\n\n    public componentDidLoad() {\n        this.resizeObserver = new ResizeObserver(this.handleResize);\n        this.resizeObserver.observe(document.body);\n    }\n\n    disconnectedCallback() {\n        this.resizeObserver.disconnect();\n    }\n\n    public render() {\n        return (\n            <Host\n                class={{\n                    dock: true,\n                    expanded: this.expanded,\n                    'has-mobile-layout': this.useMobileLayout,\n                }}\n            >\n                <nav aria-label={this.accessibleLabel}>\n                    {this.dockItems.map(this.renderDockItem)}\n                    {this.renderSeparator()}\n                    {this.dockFooterItems.map(this.renderDockItem)}\n                </nav>\n                {this.renderExpandShrinkToggle()}\n            </Host>\n        );\n    }\n\n    private renderSeparator = () => {\n        return this.useMobileLayout ? null : <span class=\"footer-separator\" />;\n    };\n\n    private renderDockItem = (item: DockItem) => {\n        return (\n            <limel-dock-button\n                class={{\n                    'dock-item': true,\n                    selected: item.selected,\n                }}\n                item={item}\n                expanded={this.expanded && !this.useMobileLayout}\n                useMobileLayout={this.useMobileLayout}\n            />\n        );\n    };\n\n    private handleResize = () => {\n        if (window.innerWidth <= this.mobileBreakPoint) {\n            this.useMobileLayout = true;\n        } else {\n            this.useMobileLayout = false;\n        }\n    };\n\n    private renderExpandShrinkToggle() {\n        if (this.useMobileLayout || !this.allowResize) {\n            return;\n        }\n\n        return (\n            <button\n                class={{\n                    'expand-shrink': true,\n                    expanded: this.expanded,\n                }}\n                onClick={this.toggleDockWidth}\n            >\n                <limel-icon name=\"angle_right\" />\n            </button>\n        );\n    }\n\n    private toggleDockWidth = () => {\n        this.expanded = !this.expanded;\n        this.dockExpanded.emit(this.expanded);\n    };\n}\n"},{"filename":"dock.scss","type":"scss","source":"@use '../../style/mixins';\n@use '../../style/functions';\n\n/**\n* @prop --dock-expanded-max-width: The maximum width of the Dock when it is expanded. Defaults to `max-content` which means the Dock will adjust its width to the widest dock item.\n* @prop --dock-background-color: Background color of the whole component, defaults to `--contrast-100`.\n* @prop --dock-item-background-color--selected: Background color of selected dock item, defaults to `--contrast-200`.\n* @prop --dock-item-text-color: Text of dock items, defaults to `--contrast-1100`.\n* @prop --dock-item-text-color--selected: Text color of selected dock item, defaults to `--contrast-1300`.\n* @prop --dock-item-icon-color: Color of the optional icons used in each dock item. Only affects inactive dock items, defaults to text colors for default or selected states.\n* @prop --dock-padding-top: Space of top side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-top)`.\n* @prop --dock-padding-right: Space of the right side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-right)`.\n* @prop --dock-padding-bottom: Space of the bottom side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-bottom)`.\n* @prop --dock-padding-left: Space of the left side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-left)`.\n* @prop --popover-surface-width: Defines the width of the popover that is opened for dock items with custom components. Defaults to `auto`.\n*/\n\n:host(limel-dock) {\n    --badge-background-color: rgb(var(--color-red-default));\n    --badge-text-color: rgb(var(--color-white));\n\n    --dock-item-height: 2.75rem;\n    --limel-dock-padding: 0.25rem;\n    --dock-expand-shrink-button-height: 1rem;\n\n    --limel-dock-item-text-color: var(\n        --dock-item-text-color,\n        rgb(var(--contrast-1100))\n    );\n    --limel-dock-item-text-color--selected: var(\n        --dock-item-text-color--selected,\n        rgb(var(--contrast-1300))\n    );\n\n    isolation: isolate;\n    position: relative;\n\n    display: inline-flex;\n    flex-direction: column;\n\n    background-color: var(--dock-background-color, rgb(var(--contrast-100)));\n    box-shadow: var(--shadow-depth-8);\n\n    padding-top: var(--dock-padding-top);\n    padding-right: var(--dock-padding-right);\n    padding-bottom: var(--dock-padding-bottom);\n    padding-left: var(--dock-padding-left);\n}\n\n:host(limel-dock:not(.has-mobile-layout)) {\n    height: 100%;\n    width: calc((var(--limel-dock-padding) * 2) + var(--dock-item-height));\n    nav {\n        padding-bottom: calc((var(--limel-dock-padding) + 0.25rem));\n    }\n}\n\n:host(limel-dock.expanded) {\n    width: var(--dock-expanded-max-width, max-content);\n}\n\n.footer-separator {\n    margin-top: auto;\n    justify-self: flex-end;\n}\n\nnav {\n    box-sizing: border-box;\n    display: inline-flex;\n    flex-direction: column;\n    gap: functions.pxToRem(6);\n    flex-grow: 1;\n\n    padding: var(--limel-dock-padding); // needed for the focus effect\n\n    overflow-y: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    :host(limel-dock.has-mobile-layout) & {\n        justify-content: space-between;\n        flex-direction: row;\n    }\n}\n\n// 👇 Below is a hidden and private prop\n// only for usage in Lime CRM components.\n// It enables our customers to override\n// the default Home icon, using an external URL\n// or an SVG code.\nlimel-dock-button {\n    &:first-of-type {\n        // `--crm-custom-home-icon-enabler`: in the CRM must be set to `''`\n        --limel-custom-home-icon-enabler: var(--crm-custom-home-icon-enabler);\n        // `--crm-custom-home-icon` in the CRM must be set to a url to an image file, or an SVG code\n        --limel-custom-home-icon: var(--crm-custom-home-icon);\n    }\n}\n\n@import './partial-styles/shrink-expand-button';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/dock-button","filePath":"./src/components/dock/dock-button/dock-button.tsx","fileName":"dock-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/dock-button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/dock-button/usage","tag":"limel-dock-button","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-dock"],"dependencies":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"dependencyGraph":{"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-dock":["limel-dock-button"]},"props":[{"name":"expanded","type":"boolean","mutable":false,"attr":"expanded","reflectToAttr":true,"docs":"When the dock is expanded or collapsed, dock items\nshow labels and tooltips as suitable for the layout.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"item","type":"DockItem","mutable":false,"reflectToAttr":false,"docs":"Item that is placed in the dock.","docsTags":[],"values":[{"type":"DockItem"}],"optional":false,"required":true},{"name":"useMobileLayout","type":"boolean","mutable":false,"attr":"use-mobile-layout","reflectToAttr":true,"docs":"When dock is using mobile layout, dock items\nshow labels and tooltips as suitable for the layout.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when the popover is closed.","docsTags":[]},{"event":"itemSelected","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock item has been selected from the dock.","docsTags":[]},{"event":"menuOpen","detail":"DockItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a dock menu is opened.","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-button.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { DockItem } from '../dock.types';\nimport { createRandomString } from '../../../util/random-string';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-dock-button',\n    shadow: false,\n    styleUrl: 'dock-button.scss',\n})\nexport class DockButton {\n    /**\n     * Item that is placed in the dock.\n     */\n    @Prop()\n    public item!: DockItem;\n\n    /**\n     * When the dock is expanded or collapsed, dock items\n     * show labels and tooltips as suitable for the layout.\n     */\n    @Prop({ reflect: true })\n    public expanded? = false;\n\n    /**\n     * When dock is using mobile layout, dock items\n     * show labels and tooltips as suitable for the layout.\n     */\n    @Prop({ reflect: true })\n    public useMobileLayout? = false;\n\n    /**\n     * Fired when a dock item has been selected from the dock.\n     */\n    @Event()\n    public itemSelected: EventEmitter<DockItem>;\n\n    /**\n     * Fired when a dock menu is opened.\n     */\n    @Event()\n    public menuOpen: EventEmitter<DockItem>;\n\n    /**\n     * Indicated whether the popover that renders a component is open.\n     */\n    @State()\n    private isOpen = false;\n\n    /**\n     * Fired when the popover is closed.\n     */\n    @Event()\n    public close: EventEmitter<void>;\n\n    private tooltipId: string;\n    private customComponentElement: HTMLElement;\n    private intersectionObserver?: IntersectionObserver;\n\n    constructor() {\n        this.tooltipId = createRandomString();\n    }\n\n    public render() {\n        if (this.item?.dockMenu?.componentName) {\n            return this.renderPopover();\n        }\n\n        return this.renderButton(this.handleClick);\n    }\n\n    @Watch('isOpen')\n    protected openWatcher() {\n        if (!this.isOpen) {\n            return;\n        }\n\n        if (!this.intersectionObserver) {\n            this.intersectionObserver = new IntersectionObserver(\n                this.focusCustomComponentElement\n            );\n            this.intersectionObserver.observe(this.customComponentElement);\n        }\n    }\n\n    public disconnectedCallback() {\n        this.intersectionObserver?.disconnect();\n        this.intersectionObserver = undefined;\n    }\n\n    private renderPopover() {\n        const CustomComponent = this.item?.dockMenu.componentName;\n\n        return (\n            <limel-popover\n                openDirection={this.useMobileLayout ? 'top' : 'right-start'}\n                open={this.isOpen || this.item.dockMenu.menuOpen}\n                onClose={this.onPopoverClose}\n            >\n                {this.renderButton(this.openPopover, 'trigger')}\n                <CustomComponent\n                    ref={this.setCustomComponentElement}\n                    {...(this.item.dockMenu.props || {})}\n                    onClose={this.onPopoverClose}\n                />\n            </limel-popover>\n        );\n    }\n\n    private renderButton(\n        handleClick: (event: MouseEvent) => void,\n        slot?: string\n    ) {\n        return (\n            <button\n                slot={slot}\n                tabindex=\"0\"\n                id={this.tooltipId}\n                type=\"button\"\n                class={{\n                    button: true,\n                    selected: this.item?.selected,\n                }}\n                onClick={handleClick}\n                aria-live=\"polite\"\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderTooltip()}\n                {this.renderNotification()}\n            </button>\n        );\n    }\n\n    private renderNotification = () => {\n        if (this.item.badge !== undefined) {\n            return <limel-badge label={this.item.badge} />;\n        }\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n        this.menuOpen.emit(this.item);\n    };\n\n    private setCustomComponentElement = (element: HTMLElement) => {\n        this.customComponentElement = element;\n    };\n\n    private onPopoverClose = () => {\n        this.isOpen = false;\n        this.close.emit();\n    };\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.itemSelected.emit(this.item);\n    };\n\n    private renderIcon() {\n        if (!this.item.icon) {\n            return;\n        }\n\n        return <limel-icon name={this.item.icon} class=\"icon\" />;\n    }\n\n    private renderLabel() {\n        if (this.expanded) {\n            return <span class=\"text\">{this.item.label}</span>;\n        }\n    }\n\n    private renderTooltip() {\n        if (!this.expanded && this.item.label) {\n            return (\n                <limel-tooltip\n                    elementId={this.tooltipId}\n                    label={this.item.label}\n                    helperLabel={this.item.helperLabel}\n                    openDirection={this.getOpenDirection()}\n                />\n            );\n        }\n\n        if (this.expanded && this.item.helperLabel) {\n            return (\n                <limel-tooltip\n                    elementId={this.tooltipId}\n                    label={this.item.helperLabel}\n                    openDirection={this.getOpenDirection()}\n                />\n            );\n        }\n    }\n\n    private focusCustomComponentElement = (\n        entries: IntersectionObserverEntry[]\n    ) => {\n        const entry = entries.find(\n            (e) => e.target === this.customComponentElement\n        );\n        if (!entry) {\n            return;\n        }\n\n        if (!entry.isIntersecting) {\n            return;\n        }\n\n        if (this.customComponentElement?.shadowRoot?.delegatesFocus) {\n            this.customComponentElement?.focus();\n        }\n    };\n\n    private getOpenDirection = () => {\n        if (this.useMobileLayout) {\n            return 'top';\n        }\n\n        return 'right';\n    };\n}\n"},{"filename":"dock-button.scss","type":"scss","source":"@use '../../../style/mixins';\n@use '../../../style/functions';\n\n.button {\n    all: unset;\n    isolation: isolate;\n    position: relative;\n\n    @include mixins.is-flat-inset-clickable(\n        $color: var(--limel-dock-item-text-color),\n        $background-color: var(--dock-background-color)\n    );\n    @include mixins.visualize-keyboard-focus;\n\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n\n    width: 100%;\n    height: var(--dock-item-height);\n\n    border-radius: functions.pxToRem(6);\n    font-size: functions.pxToRem(14);\n    padding: 0 0.5rem;\n    min-width: var(--dock-item-height);\n\n    &:hover {\n        z-index: 1;\n    }\n\n    &.selected {\n        color: var(--limel-dock-item-text-color--selected);\n        background-color: var(\n            --dock-item-background-color--selected,\n            rgb(var(--contrast-200))\n        );\n\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow:\n                var(--button-shadow-inset), var(--shadow-depth-8-focused);\n        }\n\n        .icon {\n            color: var(--limel-dock-item-text--selected);\n        }\n    }\n}\n\nlimel-popover {\n    // makes buttons that are wrapped in a popover become fullwidth\n    display: grid;\n    grid-template-columns: 100%;\n\n    button[slot='trigger'][aria-expanded='true'] {\n        box-shadow: var(--button-shadow-inset);\n    }\n}\n\n.text {\n    @include mixins.truncate-text();\n    padding-left: 0.5rem;\n    padding-right: 0.75rem;\n}\n\n.icon {\n    flex-shrink: 0;\n    width: calc(var(--dock-item-height) - 1rem);\n    height: calc(var(--dock-item-height) - 1rem);\n    color: var(--dock-item-icon-color, var(--limel-dock-item-text-color));\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.125rem;\n    right: -0.125rem;\n}\n\n// 👇 Below is a hidden and private hack\n// only for usage in Lime CRM components.\n// It enables our customers to override\n// the default Home icon, using an external URL\n// or an SVG code.\n.icon {\n    position: relative;\n\n    &:before {\n        text-align: center;\n        pointer-events: none;\n        position: absolute;\n        inset: 0;\n        background: {\n            color: var(--dock-background-color, rgb(var(--contrast-100)));\n            position: center;\n            repeat: no-repeat;\n            size: contain;\n            image: var(--limel-custom-home-icon);\n        }\n        // Since `content` defaults to `undefined`\n        // no pseudo element will be rendered, unless\n        // the consumer defines something.\n        content: var(--limel-custom-home-icon-enabler);\n\n        .button.selected & {\n            background-color: var(\n                --dock-item-background-color--selected,\n                rgb(var(--contrast-200))\n            );\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label","filePath":"./src/components/dynamic-label/dynamic-label.tsx","fileName":"dynamic-label.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/usage","tag":"limel-dynamic-label","overview":"This components displays a different label depending on the current given\nvalue. A label can consist of a text and an optional icon. If no matching\nlabel is found among the given `labels`, the `defaultLabel` will be displayed.\n\nOne use case of the component is to enhance the visualization of a `boolean`\nfield like a checkbox or switch in a `readonly` state.\n\nThe reason we offer this component is that the default styling\nof the Checkbox or Toggle switch in the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.","usage":{},"docs":"This components displays a different label depending on the current given\nvalue. A label can consist of a text and an optional icon. If no matching\nlabel is found among the given `labels`, the `defaultLabel` will be displayed.\n\nOne use case of the component is to enhance the visualization of a `boolean`\nfield like a checkbox or switch in a `readonly` state.\n\nThe reason we offer this component is that the default styling\nof the Checkbox or Toggle switch in the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.","docsTags":[{"name":"exampleComponent","text":"limel-example-dynamic-label"},{"name":"exampleComponent","text":"limel-example-dynamic-label-readonly-boolean"},{"name":"beta"}],"encapsulation":"shadow","dependents":["limel-checkbox","limel-example-dynamic-label","limel-example-dynamic-label-readonly-boolean","limel-list","limel-switch"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label"],"limel-example-dynamic-label":["limel-dynamic-label"],"limel-example-dynamic-label-readonly-boolean":["limel-dynamic-label"],"limel-list":["limel-dynamic-label"],"limel-switch":["limel-dynamic-label"]},"props":[{"name":"defaultLabel","type":"{ text?: string; icon?: string | Icon; }","mutable":false,"reflectToAttr":false,"docs":"The label to display when no matching value is found in the `labels`\narray. This is a fallback label that ensures there's always a label\ndisplayed for the component.","docsTags":[],"default":"{}","values":[{"type":"{ text?: string; icon?: string"},{"type":"Icon; }"}],"optional":false,"required":false},{"name":"labels","type":"Label<LabelValue>[]","mutable":false,"reflectToAttr":false,"docs":"A list of available labels. Each label has a corresponding value that\nwill be matched with the current `value` of the component to determine\nwhat label to display.","docsTags":[],"default":"[]","values":[{"type":"Label<LabelValue>[]"}],"optional":false,"required":false},{"name":"value","type":"boolean | number | string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The current value of the component which is used to match with the given\n`labels` to determine what label to display.\n\nIf not matching label is found, the `defaultLabel` is displayed.","docsTags":[],"values":[{"type":"boolean"},{"type":"number"},{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dynamic-label.tsx","type":"tsx","source":"import { getIconName } from '../icon/get-icon-props';\nimport { Component, Prop, h } from '@stencil/core';\nimport { Label, LabelValue } from './label.types';\nimport { Icon } from '../../interface';\n\n/**\n * This components displays a different label depending on the current given\n * value. A label can consist of a text and an optional icon. If no matching\n * label is found among the given `labels`, the `defaultLabel` will be displayed.\n *\n * One use case of the component is to enhance the visualization of a `boolean`\n * field like a checkbox or switch in a `readonly` state.\n *\n * The reason we offer this component is that the default styling\n * of the Checkbox or Toggle switch in the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * @exampleComponent limel-example-dynamic-label\n * @exampleComponent limel-example-dynamic-label-readonly-boolean\n * @beta\n */\n@Component({\n    tag: 'limel-dynamic-label',\n    shadow: true,\n    styleUrl: 'dynamic-label.scss',\n})\nexport class DynamicLabel {\n    /**\n     * The current value of the component which is used to match with the given\n     * `labels` to determine what label to display.\n     *\n     * If not matching label is found, the `defaultLabel` is displayed.\n     */\n    @Prop()\n    public value: LabelValue;\n\n    /**\n     * The label to display when no matching value is found in the `labels`\n     * array. This is a fallback label that ensures there's always a label\n     * displayed for the component.\n     */\n    @Prop({ reflect: true })\n    public defaultLabel: Omit<Label, 'value'> = {};\n\n    /**\n     * A list of available labels. Each label has a corresponding value that\n     * will be matched with the current `value` of the component to determine\n     * what label to display.\n     */\n    @Prop()\n    public labels: Label[] = [];\n\n    public render() {\n        const label = this.labels.find((l) => l.value === this.value);\n\n        return [\n            this.renderIcon(label?.icon ?? this.defaultLabel.icon),\n            this.renderLabel(label?.text ?? this.defaultLabel.text),\n        ];\n    }\n\n    private renderIcon(icon?: string | Icon) {\n        const iconName = getIconName(icon);\n        if (!iconName) {\n            return;\n        }\n\n        let iconColor: string | undefined;\n        let iconBackgroundColor: string | undefined;\n\n        if (typeof icon === 'object') {\n            iconColor = icon.color;\n            iconBackgroundColor = icon.backgroundColor;\n        }\n\n        const iconProps = {\n            role: 'presentation',\n            name: iconName,\n            style: {\n                color: iconColor,\n                'background-color': iconBackgroundColor,\n            },\n        };\n\n        return <limel-icon {...iconProps} />;\n    }\n\n    private renderLabel(label: string = '') {\n        return <label>{label}</label>;\n    }\n}\n"},{"filename":"dynamic-label.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n    min-width: 0;\n}\n\n:host(limel-dynamic-label) {\n    --limel-dynamic-label-min-height: 1.75rem;\n    display: flex;\n    gap: 0.5rem;\n    align-items: flex-start;\n    border-radius: 0.5rem;\n    min-width: 0;\n}\n\nlimel-icon {\n    --limel-icon-svg-margin: 0.125rem;\n    border-radius: 0.25rem;\n    flex-shrink: 0;\n    width: var(--limel-dynamic-label-min-height);\n    color: rgb(\n        var(--contrast-900)\n    ); // The default `false` color. Will be overwritten by `Icon`\n}\n\nlabel {\n    flex-grow: 1;\n    font-size: 0.8125rem; // `13px`, Like Checkbox & Switch\n    line-height: normal;\n    color: var(--mdc-theme-on-surface);\n    padding-top: 0.375rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-as-list-component.tsx","fileName":"action-bar-as-list-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-as-primary-component","overview":"Creative usage\nSince the action bar can automatically overflow actions which do not\nfit into the available width, it makes the component a good candidate\nfor providing contextual actions within small sections of a user interface.\n\n:::important\nFor this specific usage (`limel-action-bar` as a primary component in `limel-list`)\nthe certain styles are required for the overflow menu to properly work.\nSee the linked CSS file!\n\nThere should be a `min-width` and `max-width` on the component in order to prevent\nthe overflow menu to cause infinite rendering loops.\n:::","usage":{},"docs":"Creative usage\nSince the action bar can automatically overflow actions which do not\nfit into the available width, it makes the component a good candidate\nfor providing contextual actions within small sections of a user interface.\n\n:::important\nFor this specific usage (`limel-action-bar` as a primary component in `limel-list`)\nthe certain styles are required for the overflow menu to properly work.\nSee the linked CSS file!\n\nThere should be a `min-width` and `max-width` on the component in order to prevent\nthe overflow menu to cause infinite rendering loops.\n:::","docsTags":[{"name":"sourceFile","text":"action-bar-in-list.tsx"},{"name":"sourceFile","text":"action-bar-in-list.scss"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-action-bar-as-primary-component":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-as-list-component.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * Creative usage\n * Since the action bar can automatically overflow actions which do not\n * fit into the available width, it makes the component a good candidate\n * for providing contextual actions within small sections of a user interface.\n *\n * :::important\n * For this specific usage (`limel-action-bar` as a primary component in `limel-list`)\n * the certain styles are required for the overflow menu to properly work.\n * See the linked CSS file!\n *\n * There should be a `min-width` and `max-width` on the component in order to prevent\n * the overflow menu to cause infinite rendering loops.\n * :::\n *\n * @sourceFile action-bar-in-list.tsx\n * @sourceFile action-bar-in-list.scss\n */\n@Component({\n    tag: 'limel-example-action-bar-as-primary-component',\n    shadow: true,\n})\nexport class ActionBarAsListComponent {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Follow up quote · Cool Hotels',\n            secondaryText: 'My to-dos · Today',\n            icon: 'tear_off_calendar',\n            value: 1,\n            primaryComponent: {\n                name: 'limel-example-action-bar-in-list',\n            },\n        },\n        {\n            text: 'Customer visit · Cool Hotels',\n            secondaryText: 'My to-dos · Next monday',\n            icon: 'tear_off_calendar',\n            value: 2,\n            primaryComponent: {\n                name: 'limel-example-action-bar-in-list',\n            },\n        },\n        {\n            text: 'Sales call · Nice Stuff Agency',\n            secondaryText: 'Unassigned · 2023-06-01',\n            icon: 'tear_off_calendar',\n            value: 3,\n            primaryComponent: {\n                name: 'limel-example-action-bar-in-list',\n            },\n        },\n        {\n            text: 'Sales call · Lime Technologies',\n            secondaryText: 'Unassigned · 2023-06-02',\n            icon: 'tear_off_calendar',\n            value: 4,\n            primaryComponent: {\n                name: 'limel-example-action-bar-in-list',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <h3>To-dos</h3>,\n            <limel-list items={this.items} class=\"has-striped-rows\" />,\n        ];\n    }\n}\n"},{"filename":"action-bar-in-list.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-action-bar-in-list',\n    shadow: true,\n    styleUrl: 'action-bar-in-list.scss',\n})\nexport class ActionBarInListExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Mark as Done',\n            icon: {\n                name: 'checkmark',\n                color: 'rgb(var(--color-sky-default))',\n            },\n            iconOnly: true,\n        },\n        {\n            text: 'Postpone',\n            icon: 'future',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Email',\n            icon: 'email_sign_92447',\n            iconOnly: true,\n        },\n        {\n            text: 'Call',\n            icon: {\n                name: 'phone',\n                color: 'rgb(var(--color-green-default))',\n            },\n            iconOnly: true,\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-action-bar\n                accessibleLabel=\"Action bar\"\n                actions={this.actionBarItems}\n                open-openDirection=\"left-start\"\n            />\n        );\n    }\n}\n"},{"filename":"action-bar-in-list.scss","type":"scss","source":":host(limel-example-action-bar-in-list) {\n    order: 2; // ensures that the action bar is rendered on the right side of the list item\n    margin-right: -0.5rem; // compensates for the right padding of the list item\n\n    // ⚠️ NOTE: about these lines, read the docs!\n    --declared-width: 40%;\n    max-width: var(--declared-width);\n    min-width: var(--declared-width);\n    // ⚠️ NOTE end.\n}\n\nlimel-action-bar {\n    --action-bar-background-color: transparent;\n    float: right;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-basic.tsx","fileName":"action-bar-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-basic","overview":"Basic Example\n\nAn action bar is typically placed on top of a page or section,\ndisplaying multiple buttons in a row.\nSeparators can be added to visually group related actions.\n\n:::tip\nBy default, when `layout=\"fullWidth\"`, all actions will be placed on\nthe left side of the action bar,\nbut you can override this default behavior by\nadding `justify-content: flex-end;`.\n:::","usage":{},"docs":"Basic Example\n\nAn action bar is typically placed on top of a page or section,\ndisplaying multiple buttons in a row.\nSeparators can be added to visually group related actions.\n\n:::tip\nBy default, when `layout=\"fullWidth\"`, all actions will be placed on\nthe left side of the action bar,\nbut you can override this default behavior by\nadding `justify-content: flex-end;`.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-basic":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n * Basic Example\n *\n * An action bar is typically placed on top of a page or section,\n * displaying multiple buttons in a row.\n * Separators can be added to visually group related actions.\n *\n * :::tip\n * By default, when `layout=\"fullWidth\"`, all actions will be placed on\n * the left side of the action bar,\n * but you can override this default behavior by\n * adding `justify-content: flex-end;`.\n * :::\n *\n */\n@Component({\n    tag: 'limel-example-action-bar-basic',\n    shadow: true,\n    styleUrl: 'action-bar-basic.scss',\n})\nexport class ActionBarBasicExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Find',\n            icon: 'search',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Undo',\n            icon: 'undo',\n            iconOnly: true,\n        },\n        {\n            text: 'Redo',\n            icon: 'redo',\n            iconOnly: true,\n            disabled: true,\n        },\n        { separator: true },\n        {\n            text: 'Edit',\n            icon: 'pencil_tip',\n            iconOnly: true,\n        },\n        {\n            text: 'Bookmark',\n            icon: 'hearts',\n            iconOnly: true,\n        },\n        {\n            text: 'Share',\n            icon: 'share_3',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Discard',\n            commandText: 'Cmd + esc',\n            icon: 'cancel',\n        },\n        {\n            text: 'Save',\n            commandText: 'Cmd + S',\n            icon: 'ok',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-action-bar\n                    accessibleLabel=\"Action bar\"\n                    actions={this.actionBarItems}\n                    onItemSelected={this.handleSelected}\n                    layout=\"fullWidth\"\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<ActionBarItem>) => {\n        event.stopPropagation();\n        console.log(event.detail);\n    };\n}\n"},{"filename":"action-bar-basic.scss","type":"scss","source":"@import './application';\n\nlimel-action-bar {\n    justify-content: flex-end;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-colors.tsx","fileName":"action-bar-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-colors","overview":"Using colors\n\nYou can specify colors for single actions, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that most of the actions in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n:::","usage":{},"docs":"Using colors\n\nYou can specify colors for single actions, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that most of the actions in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-colors":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-colors.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n * Using colors\n *\n * You can specify colors for single actions, by setting `color` on the `icon`.\n *\n * :::note\n * Make sure not to overuse colors!\n * It is perfectly fine that most of the actions in the bar use the default color.\n * Colors should be used to add an extra layer of meaning for the actions.\n * :::\n *\n */\n@Component({\n    tag: 'limel-example-action-bar-colors',\n    shadow: true,\n})\nexport class ActionBarColorsExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Record',\n            icon: {\n                name: 'dot_circle',\n                color: 'rgb(var(--color-red-default))',\n            },\n            iconOnly: true,\n        },\n        {\n            text: 'Stop',\n            icon: 'stop',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Previous',\n            icon: '-lime-filter-previous',\n            iconOnly: true,\n        },\n        {\n            text: 'Play',\n            icon: 'play',\n            iconOnly: true,\n        },\n        {\n            text: 'Next',\n            icon: '-lime-filter-next',\n            iconOnly: true,\n        },\n    ];\n\n    public render() {\n        return (\n            <div>\n                <limel-action-bar\n                    accessibleLabel=\"Toolbar\"\n                    actions={this.actionBarItems}\n                />\n            </div>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-floating.tsx","fileName":"action-bar-floating.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-floating","overview":"Floating Example\n\nFor some designs, it may make sense to display the action bar as\na floating element on top of the page's content.\nSet the `layout` prop to `floating` to get the basics styles of\na floating bar.\n\n:::note\n1. In this case, the action bar gets some elevation effect\nusing a `box-shadow`. This is to properly separate the action bar\nform its surrounding context. You can override this by setting another\n`box-shadow`.\n2. Make sure to use a proper `openDirection` for the\noverflow menu.\n3. Make sure there is space on the sides of the action bar,\nso that it doesn't stretch out completely from left edge to the right\nedge. The component is already doing so using a `max-width`,\nbut you can override it by providing another `max-width`.\n:::","usage":{},"docs":"Floating Example\n\nFor some designs, it may make sense to display the action bar as\na floating element on top of the page's content.\nSet the `layout` prop to `floating` to get the basics styles of\na floating bar.\n\n:::note\n1. In this case, the action bar gets some elevation effect\nusing a `box-shadow`. This is to properly separate the action bar\nform its surrounding context. You can override this by setting another\n`box-shadow`.\n2. Make sure to use a proper `openDirection` for the\noverflow menu.\n3. Make sure there is space on the sides of the action bar,\nso that it doesn't stretch out completely from left edge to the right\nedge. The component is already doing so using a `max-width`,\nbut you can override it by providing another `max-width`.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-floating":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-floating.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n * Floating Example\n *\n * For some designs, it may make sense to display the action bar as\n * a floating element on top of the page's content.\n * Set the `layout` prop to `floating` to get the basics styles of\n * a floating bar.\n *\n * :::note\n * 1. In this case, the action bar gets some elevation effect\n * using a `box-shadow`. This is to properly separate the action bar\n * form its surrounding context. You can override this by setting another\n * `box-shadow`.\n * 2. Make sure to use a proper `openDirection` for the\n * overflow menu.\n * 3. Make sure there is space on the sides of the action bar,\n * so that it doesn't stretch out completely from left edge to the right\n * edge. The component is already doing so using a `max-width`,\n * but you can override it by providing another `max-width`.\n * :::\n */\n@Component({\n    tag: 'limel-example-action-bar-floating',\n    shadow: true,\n    styleUrl: 'action-bar-floating.scss',\n})\nexport class ActionBarFloatingExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Add',\n            icon: 'plus_math',\n            iconOnly: true,\n        },\n        {\n            text: 'Refresh',\n            icon: 'refresh',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Assign me',\n            commandText: 'Cmd + H',\n            icon: 'whole_hand_right',\n        },\n        {\n            text: 'Park',\n            icon: {\n                name: 'circled_pause',\n                color: 'rgb(var(--color-orange-default))',\n            },\n        },\n        {\n            text: 'Close',\n            icon: {\n                name: 'do_not_disturb',\n                color: 'rgb(var(--color-red-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application has-floating-action-bar is-resizable\">\n                <limel-action-bar\n                    accessibleLabel=\"Contextual Action Bar\"\n                    actions={this.actionBarItems}\n                    openDirection=\"top\"\n                    layout=\"floating\"\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"action-bar-floating.scss","type":"scss","source":"@import './application';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-floating-with-expand-button.tsx","fileName":"action-bar-floating-with-expand-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-floating-expand","overview":"Floating action bar with expand button\n\nSome designs may require a floating action bar with an expand button.\nIt can be useful if action bar is covering important content.\nTo make the action bar expandable, set the `collapsible` prop to `true`.","usage":{},"docs":"Floating action bar with expand button\n\nSome designs may require a floating action bar with an expand button.\nIt can be useful if action bar is covering important content.\nTo make the action bar expandable, set the `collapsible` prop to `true`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-floating-expand":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-floating-with-expand-button.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n * Floating action bar with expand button\n *\n * Some designs may require a floating action bar with an expand button.\n * It can be useful if action bar is covering important content.\n * To make the action bar expandable, set the `collapsible` prop to `true`.\n *\n */\n@Component({\n    tag: 'limel-example-action-bar-floating-expand',\n    shadow: true,\n    styleUrl: 'action-bar-floating.scss',\n})\nexport class ActionBarFloatingExpandExample {\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Add',\n            icon: 'plus_math',\n            iconOnly: true,\n        },\n        {\n            text: 'Refresh',\n            icon: 'refresh',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Assign me',\n            commandText: 'Cmd + H',\n            icon: 'whole_hand_right',\n        },\n        {\n            text: 'Park',\n            icon: {\n                name: 'circled_pause',\n                color: 'rgb(var(--color-orange-default))',\n            },\n        },\n        {\n            text: 'Close',\n            icon: {\n                name: 'do_not_disturb',\n                color: 'rgb(var(--color-red-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application has-floating-action-bar is-resizable\">\n                <limel-action-bar\n                    accessibleLabel=\"Contextual Action Bar\"\n                    actions={this.actionBarItems}\n                    openDirection=\"top\"\n                    layout=\"floating\"\n                    collapsible={true}\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"action-bar-floating.scss","type":"scss","source":"@import './application';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-item-icon-title.tsx","fileName":"action-bar-item-icon-title.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-icon-title","overview":"Proper usage of the `title` property in the `Icon` interface\n\nIn some scenarios, the `title` property of the item's icon must be used to\nimprove accessibility for unsighted users.\n\nIn most cases, the item's `text` is descriptive enough for the users to understand\nthe meaning of the action. In such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`.","usage":{},"docs":"Proper usage of the `title` property in the `Icon` interface\n\nIn some scenarios, the `title` property of the item's icon must be used to\nimprove accessibility for unsighted users.\n\nIn most cases, the item's `text` is descriptive enough for the users to understand\nthe meaning of the action. In such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-action-bar","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-action-bar-icon-title":["limel-list","limel-action-bar","limel-example-controls","limel-checkbox"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-item-icon-title.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport {\n    ActionBarItem,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\n\n/**\n * Proper usage of the `title` property in the `Icon` interface\n *\n * In some scenarios, the `title` property of the item's icon must be used to\n * improve accessibility for unsighted users.\n *\n * In most cases, the item's `text` is descriptive enough for the users to understand\n * the meaning of the action. In such cases, the icon is primarily used to improve\n * the visual appearance of the item, and make it more quickly and easily recognizable\n * for the users.\n *\n * However, some designs favor a cleaner and more minimal user interface,\n * by removing unnecessary words, relying on an already present icon which\n * can be interpreted as a word by the user.\n *\n * Here you see examples of such icons followed by a short text:\n * - **➕ icon followed by \"Todo\"**: For a sighted user,\n * this combination of icon and text would be interpreted as \"Add New Todo\"\n * - **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n * - **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n *\n * For sighted users, the text is enough to understand the meaning of the action,\n * but a screen reader cannot interpret the icon as a word, unless you provide a\n * proper `title` property for the icon. In fact, the icons that have no `title`\n * are completely hidden from the screen readers.\n *\n * This example showcases how user experience can be improved not only for both\n * users of assistive technologies, but also for those who see a descriptive tooltip,\n * while hovering the action, which is constructed from the combination of\n * the `title` and `text`.\n */\n@Component({\n    tag: 'limel-example-action-bar-icon-title',\n    shadow: true,\n    styleUrl: 'action-bar-floating.scss',\n})\nexport class ActionBarIconTitleExample {\n    @State()\n    private iconOnly = false;\n\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Todo',\n            icon: {\n                name: 'plus_math',\n                title: 'Add New',\n                color: 'rgb(var(--color-lime-default))',\n            },\n            iconOnly: this.iconOnly,\n        },\n        {\n            text: 'List',\n            icon: {\n                name: 'refresh',\n                title: 'Refresh',\n            },\n            iconOnly: this.iconOnly,\n        },\n        { separator: true },\n        {\n            text: 'Selected',\n            icon: {\n                name: 'trash',\n                title: 'Delete',\n                color: 'rgb(var(--color-red-default))',\n            },\n            iconOnly: this.iconOnly,\n        },\n    ];\n\n    private listItems: Array<ListItem<number>> = [\n        { text: 'Buy groceries', value: 1, icon: 'checked' },\n        { text: 'Schedule dentist appointment', value: 2, icon: 'circle' },\n        { text: 'Complete project report', value: 3, icon: 'circle' },\n        { text: 'Call internet provider', value: 4, icon: 'checked' },\n        { text: 'Plan weekend activities', value: 5, icon: 'circle' },\n    ];\n\n    public render() {\n        return [\n            <div class=\"application has-floating-action-bar is-resizable\">\n                <limel-list\n                    items={this.listItems}\n                    class=\"has-striped-rows\"\n                    type=\"checkbox\"\n                />\n                <limel-action-bar\n                    accessibleLabel=\"Contextual Action Bar\"\n                    actions={this.actionBarItems}\n                    openDirection=\"top\"\n                    layout=\"floating\"\n                />\n            </div>,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.iconOnly}\n                    label=\"iconOnly\"\n                    onChange={this.setIconOnly}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setIconOnly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.iconOnly = event.detail;\n\n        // Update iconOnly property for all items\n        this.actionBarItems = this.actionBarItems.map((item) => {\n            if ('separator' in item) {\n                return item;\n            }\n\n            return {\n                ...item,\n                iconOnly: this.iconOnly,\n            } as ActionBarItem;\n        });\n    };\n}\n"},{"filename":"action-bar-floating.scss","type":"scss","source":"@import './application';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-in-list.tsx","fileName":"action-bar-in-list.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-in-list","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-in-list":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-in-list.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-action-bar-in-list',\n    shadow: true,\n    styleUrl: 'action-bar-in-list.scss',\n})\nexport class ActionBarInListExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Mark as Done',\n            icon: {\n                name: 'checkmark',\n                color: 'rgb(var(--color-sky-default))',\n            },\n            iconOnly: true,\n        },\n        {\n            text: 'Postpone',\n            icon: 'future',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Email',\n            icon: 'email_sign_92447',\n            iconOnly: true,\n        },\n        {\n            text: 'Call',\n            icon: {\n                name: 'phone',\n                color: 'rgb(var(--color-green-default))',\n            },\n            iconOnly: true,\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-action-bar\n                accessibleLabel=\"Action bar\"\n                actions={this.actionBarItems}\n                open-openDirection=\"left-start\"\n            />\n        );\n    }\n}\n"},{"filename":"action-bar-in-list.scss","type":"scss","source":":host(limel-example-action-bar-in-list) {\n    order: 2; // ensures that the action bar is rendered on the right side of the list item\n    margin-right: -0.5rem; // compensates for the right padding of the list item\n\n    // ⚠️ NOTE: about these lines, read the docs!\n    --declared-width: 40%;\n    max-width: var(--declared-width);\n    min-width: var(--declared-width);\n    // ⚠️ NOTE end.\n}\n\nlimel-action-bar {\n    --action-bar-background-color: transparent;\n    float: right;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-overflow-menu.tsx","fileName":"action-bar-overflow-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-overflow-menu","overview":"Overflow menu\nWhen the action bar items don't fit in the available space,\nan overflow button is automatically added as the last item on the action bar.\n\nThe menu indicates the quantity of the actions which are currently invisible for the users.\nClicking on the overflow button opens a menu with the remaining actions that didn't fit\nin the available space.","usage":{},"docs":"Overflow menu\nWhen the action bar items don't fit in the available space,\nan overflow button is automatically added as the last item on the action bar.\n\nThe menu indicates the quantity of the actions which are currently invisible for the users.\nClicking on the overflow button opens a menu with the remaining actions that didn't fit\nin the available space.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-overflow-menu":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-overflow-menu.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n * Overflow menu\n * When the action bar items don't fit in the available space,\n * an overflow button is automatically added as the last item on the action bar.\n *\n * The menu indicates the quantity of the actions which are currently invisible for the users.\n * Clicking on the overflow button opens a menu with the remaining actions that didn't fit\n * in the available space.\n */\n@Component({\n    tag: 'limel-example-action-bar-overflow-menu',\n    shadow: true,\n    styleUrl: 'action-bar-overflow-menu.scss',\n})\nexport class ActionBarOverflowMenuExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Justify left',\n            icon: 'align_left',\n            iconOnly: true,\n        },\n        {\n            text: 'Justify full',\n            icon: 'align_justify',\n            iconOnly: true,\n        },\n        {\n            text: 'Justify center',\n            icon: 'align_center',\n            iconOnly: true,\n        },\n        {\n            text: 'Justify right',\n            icon: 'align_right',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Bold',\n            commandText: '⌘ B',\n            icon: 'bold',\n            iconOnly: true,\n        },\n        {\n            text: 'Italic',\n            commandText: '⌘ I',\n            icon: 'italic',\n            iconOnly: true,\n        },\n        {\n            text: 'Underline',\n            commandText: '⌘ U',\n            icon: 'underline',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'List',\n            icon: 'list',\n            iconOnly: true,\n        },\n        {\n            text: 'Numbered list',\n            icon: 'numbered_list',\n            iconOnly: true,\n        },\n        {\n            text: 'Blockquote',\n            icon: 'quote_right',\n            iconOnly: true,\n        },\n        {\n            text: 'Emoji',\n            icon: 'happy',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Picture',\n            icon: 'picture',\n            iconOnly: true,\n        },\n        {\n            text: 'Link',\n            icon: 'link',\n            iconOnly: true,\n        },\n        {\n            text: 'Table',\n            icon: 'insert_table',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Copy',\n            commandText: '⌘ C',\n            icon: 'copy',\n            iconOnly: true,\n        },\n        {\n            text: 'Cut',\n            commandText: '⌘ X',\n            icon: 'cut',\n            iconOnly: true,\n        },\n        {\n            text: 'Paste',\n            commandText: '⌘ V',\n            icon: 'paste',\n            iconOnly: true,\n        },\n        {\n            text: 'Delete',\n            commandText: '⌘ ⌫',\n            icon: 'trash',\n            iconOnly: true,\n        },\n        {\n            text: 'Find & Replace',\n            commandText: '⌘ ⇧ F',\n            icon: 'search',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Code',\n            icon: 'source_code',\n            iconOnly: true,\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application is-resizable\">\n                <limel-action-bar\n                    accessibleLabel=\"Toolbar\"\n                    actions={this.actionBarItems}\n                    layout=\"fullWidth\"\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"action-bar-overflow-menu.scss","type":"scss","source":"@import './application';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-selected-item.tsx","fileName":"action-bar-selected-item.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-selected-item","overview":"Selected item\nFor some use cases, one or more items in the action bar could\nget a `selected` state. This is useful for example when you want to\nhighlight a currently active item in a list of items.","usage":{},"docs":"Selected item\nFor some use cases, one or more items in the action bar could\nget a `selected` state. This is useful for example when you want to\nhighlight a currently active item in a list of items.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-selected-item":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-selected-item.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n * Selected item\n * For some use cases, one or more items in the action bar could\n * get a `selected` state. This is useful for example when you want to\n * highlight a currently active item in a list of items.\n */\n@Component({\n    tag: 'limel-example-action-bar-selected-item',\n    shadow: true,\n    styleUrl: 'action-bar-selected-item.scss',\n})\nexport class ActionBarSelectedItemExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Bold',\n            commandText: '⌘ B',\n            icon: '-lime-text-bold',\n            iconOnly: true,\n        },\n        {\n            text: 'Italic',\n            commandText: '⌘ I',\n            icon: '-lime-text-italic',\n            iconOnly: true,\n        },\n        {\n            text: 'Strikethrough',\n            commandText: '⌘ ⇧ X',\n            icon: '-lime-text-strikethrough',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Bulleted list',\n            icon: '-lime-text-bulleted-list',\n            iconOnly: true,\n        },\n        {\n            text: 'Ordered list',\n            icon: '-lime-text-ordered-list',\n            iconOnly: true,\n        },\n        {\n            text: 'Blockquote',\n            icon: '-lime-text-blockquote',\n            iconOnly: true,\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application is-resizable\">\n                <limel-action-bar\n                    accessibleLabel=\"Toolbar\"\n                    actions={this.actionBarItems}\n                    layout=\"fullWidth\"\n                    onItemSelected={this.handleSelected}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<ActionBarItem>) => {\n        event.stopPropagation();\n        const toggleSelection = (item: ActionBarItem) => {\n            if (item.text === event.detail.text) {\n                return {\n                    ...item,\n                    selected: !item.selected,\n                };\n            }\n\n            return item;\n        };\n\n        console.log(event.detail);\n\n        this.actionBarItems = this.actionBarItems.map(toggleSelection);\n    };\n}\n"},{"filename":"action-bar-selected-item.scss","type":"scss","source":"@import './application';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples","filePath":"./src/components/action-bar/examples/action-bar-styling.tsx","fileName":"action-bar-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/action-bar/examples/usage","tag":"limel-example-action-bar-styling","overview":"Styling\n\nUsing provided custom CSS properties,\nit is possible to style the action bar.\n\n:::note\nThe `--action-bar-item-icon-color` affects all icons.\nHowever, the `color` specified for `icon` for individual items\nwill override that.\n:::","usage":{},"docs":"Styling\n\nUsing provided custom CSS properties,\nit is possible to style the action bar.\n\n:::note\nThe `--action-bar-item-icon-color` affects all icons.\nHowever, the `color` specified for `icon` for individual items\nwill override that.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-action-bar"],"dependencyGraph":{"limel-example-action-bar-styling":["limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"action-bar-styling.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n * Styling\n *\n * Using provided custom CSS properties,\n * it is possible to style the action bar.\n *\n * :::note\n * The `--action-bar-item-icon-color` affects all icons.\n * However, the `color` specified for `icon` for individual items\n * will override that.\n * :::\n */\n@Component({\n    tag: 'limel-example-action-bar-styling',\n    shadow: true,\n    styleUrl: 'action-bar-styling.scss',\n})\nexport class ActionBarStylingExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Edit',\n            icon: 'pencil_tip',\n        },\n        {\n            text: 'Download',\n            icon: 'download',\n        },\n        {\n            text: 'Mark as read',\n            icon: 'double_tick',\n        },\n        { separator: true },\n        {\n            text: 'Delete',\n            icon: {\n                name: 'trash',\n                color: 'rgb(var(--color-red-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application has-floating-action-bar\">\n                <limel-action-bar\n                    accessibleLabel=\"Contextual Action Bar\"\n                    actions={this.actionBarItems}\n                    openDirection=\"top\"\n                    layout=\"floating\"\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"action-bar-styling.scss","type":"scss","source":"@import './application';\n\n.application {\n    background-color: rgb(var(--contrast-800));\n}\n\nlimel-action-bar {\n    --action-bar-background-color: rgb(var(--color-indigo-dark));\n    --action-bar-item-text-color: rgb(var(--color-white));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/labels-explicit.tsx","fileName":"labels-explicit.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-choosing-explicit-labels","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-button"],"dependencyGraph":{"limel-example-action-buttons-choosing-explicit-labels":["limel-example-do-do-not","limel-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"labels-explicit.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-choosing-explicit-labels',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsChoosingExplicitLabelsExample {\n    public render() {\n        return (\n            <limel-example-do-do-not>\n                <div slot=\"do\" class=\"fake-dialog-container shows-full-dialog\">\n                    <div class=\"fake-dialog\">\n                        <p>Discard this draft?</p>\n                        <div class=\"action-bar\">\n                            <limel-button\n                                label=\"Back to editing\"\n                                primary={true}\n                            />\n                            <limel-button label=\"Discard\" />\n                        </div>\n                    </div>\n                </div>\n                <div\n                    slot=\"do-not\"\n                    class=\"fake-dialog-container shows-full-dialog\"\n                >\n                    <div class=\"fake-dialog\">\n                        <p>Discard this draft?</p>\n                        <div class=\"action-bar\">\n                            <limel-button label=\"No\" primary={true} />\n                            <limel-button label=\"Yes\" />\n                        </div>\n                    </div>\n                </div>\n            </limel-example-do-do-not>\n        );\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/labels.tsx","fileName":"labels.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-choosing-labels","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-button"],"dependencyGraph":{"limel-example-action-buttons-choosing-labels":["limel-example-do-do-not","limel-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"labels.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-choosing-labels',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsChoosingLabelsExample {\n    public render() {\n        return (\n            <limel-example-do-do-not>\n                <div slot=\"do\" class=\"fake-dialog-container shows-full-dialog\">\n                    <div class=\"fake-dialog\">\n                        <p>\n                            <b>Good</b> usage of labels\n                        </p>\n                        <div class=\"action-bar\">\n                            <limel-button label=\"Discard\" />\n                            <limel-button label=\"Save\" primary={true} />\n                        </div>\n                    </div>\n                </div>\n                <div\n                    slot=\"do-not\"\n                    class=\"fake-dialog-container shows-full-dialog\"\n                >\n                    <div class=\"fake-dialog\">\n                        <p>\n                            <b>Bad</b> usage of labels\n                        </p>\n                        <div class=\"action-bar\">\n                            <limel-button label=\"Close\" />\n                            <limel-button label=\"Save\" primary={true} />\n                        </div>\n                    </div>\n                </div>\n            </limel-example-do-do-not>\n        );\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/colors-do-dont.tsx","fileName":"colors-do-dont.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-colors-do-dont","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-colors-do-dont":["limel-example-do-do-not","limel-header","limel-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-header":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"colors-do-dont.tsx","type":"tsx","source":"import { Component, h, Host } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-colors-do-dont',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsColorsDoDontsExample {\n    public render() {\n        return (\n            <Host>\n                <limel-example-do-do-not>\n                    <div\n                        slot=\"do\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete 23 items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                You are about to delete 23 items. This is a\n                                permanent action and <b>cannot be undone</b>!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Don't delete\"\n                                    class=\"button primary--caution\"\n                                    icon=\"cancel\"\n                                    primary={true}\n                                />\n                                <limel-button\n                                    label=\"Delete\"\n                                    class=\"button primary--danger\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        slot=\"do-not\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete 23 items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                You are about to delete 23 items. This is a\n                                permanent action and <b>cannot be undone</b>!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Don't delete\"\n                                    icon=\"cancel\"\n                                />\n                                <limel-button\n                                    label=\"Delete\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </limel-example-do-do-not>\n                <limel-example-do-do-not>\n                    <div\n                        slot=\"do\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete selected items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                Deleted items <b>can be restored</b> from the\n                                trash later at any time!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Don't delete\" />\n                                <limel-button\n                                    label=\"Delete\"\n                                    class=\"button primary--danger-highlighted\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        slot=\"do-not\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete selected items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                Deleted items <b>can be restored</b> from the\n                                trash later at any time!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Don't delete\" />\n                                <limel-button\n                                    label=\"Delete\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </limel-example-do-do-not>\n            </Host>\n        );\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/icon-color.tsx","fileName":"icon-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-icon-color","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-icon-color":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-color.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-icon-color',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsIconColorExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"ask_question\"\n                                heading=\"Save changes?\"\n                                class=\"save\"\n                            />\n                            <p>\n                                You have unsaved changes. Do you want to save\n                                them before leaving this page?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Back to editing\"\n                                    class=\"button back primary--neutral justify-left\"\n                                    icon=\"left_arrow\"\n                                />\n                                <limel-button\n                                    label=\"Discard\"\n                                    class=\"button discard primary--caution\"\n                                    icon=\"cancel\"\n                                    primary={true}\n                                />\n                                <limel-button\n                                    label=\"Save\"\n                                    class=\"button update\"\n                                    icon=\"ok\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                icon=\"delete_message\"\n                                heading=\"Delete selected items?\"\n                                class=\"delete\"\n                            />\n                            <p>\n                                You are about to delete 23 items. This is a\n                                permanent action and cannot be undone!\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Back to selection\"\n                                    class=\"button primary--neutral justify-left\"\n                                    icon=\"left_arrow\"\n                                />\n                                <limel-button\n                                    label=\"Don't delete\"\n                                    class=\"button primary--caution\"\n                                    icon=\"cancel\"\n                                    primary={true}\n                                />\n                                <limel-button\n                                    label=\"Delete\"\n                                    class=\"button primary--danger\"\n                                    icon=\"trash\"\n                                    primary={true}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/placement.tsx","fileName":"placement.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-placement","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-action-buttons-placement":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"placement.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-placement',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPlacementExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                Actions are located at the bottom-right corner\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Ok\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                Positive action is on the right side, and\n                                negative on left left.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Ok\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/primary-secondary.tsx","fileName":"primary-secondary.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-primary-secondary","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-action-buttons-primary-secondary":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-secondary.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-primary-secondary',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPrimarySecondaryExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                The primary action which is the expected action\n                                is highlighted.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Continue\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container\">\n                        <div class=\"fake-dialog\">\n                            <p>\n                                The primary action which is the expected action\n                                is highlighted.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Don't save\" />\n                                <limel-button label=\"Save\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/primary-secondary-reversed.tsx","fileName":"primary-secondary-reversed.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-primary-secondary-reversed","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-button"],"dependencyGraph":{"limel-example-action-buttons-primary-secondary-reversed":["limel-example-do-do-not","limel-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-secondary-reversed.tsx","type":"tsx","source":"import { Component, h, Host } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-primary-secondary-reversed',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPrimarySecondaryReversedExample {\n    public render() {\n        return (\n            <Host>\n                <limel-example-do-do-not>\n                    <div\n                        slot=\"do\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>\"Johan Andersson\" already exists!</h4>\n                            <p>\n                                A person called \"Johan Andersson\" is already\n                                assigned to this task. Do you want to replace\n                                him with another \"Johan Andersson\"?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button label=\"Replace\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        slot=\"do-not\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>\"Johan Andersson\" already exists!</h4>\n                            <p>\n                                A person called \"Johan Andersson\" is already\n                                assigned to this task. Do you want to replace\n                                him with another \"Johan Andersson\"?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Replace\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </limel-example-do-do-not>\n                <limel-example-do-do-not>\n                    <div\n                        slot=\"do\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>Want to leave this conversation?</h4>\n                            <p>\n                                By leaving this conversation, you will no longer\n                                have access to chat history, shared files, and\n                                new updates.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button label=\"Leave\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        slot=\"do-not\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>Want to leave this conversation?</h4>\n                            <p>\n                                By leaving this conversation, you will no longer\n                                have access to chat history, shared files, and\n                                new updates.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button label=\"Leave\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </limel-example-do-do-not>\n            </Host>\n        );\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/primary-secondary-reversed-colors.tsx","fileName":"primary-secondary-reversed-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-primary-secondary-reversed-colors","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-button"],"dependencyGraph":{"limel-example-action-buttons-primary-secondary-reversed-colors":["limel-example-do-do-not","limel-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-secondary-reversed-colors.tsx","type":"tsx","source":"import { Component, h, Host } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-primary-secondary-reversed-colors',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsPrimarySecondaryReversedColorsExample {\n    public render() {\n        return (\n            <Host>\n                <limel-example-do-do-not>\n                    <div\n                        slot=\"do\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>\"Johan Andersson\" already exists!</h4>\n                            <p>\n                                A person called \"Johan Andersson\" is already\n                                assigned to this task. Do you want to replace\n                                him with another \"Johan Andersson\"?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button\n                                    label=\"Replace\"\n                                    primary={true}\n                                    class=\"button primary--danger\"\n                                    icon=\"replace\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        slot=\"do-not\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>\"Johan Andersson\" already exists!</h4>\n                            <p>\n                                A person called \"Johan Andersson\" is already\n                                assigned to this task. Do you want to replace\n                                him with another \"Johan Andersson\"?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button\n                                    label=\"Replace\"\n                                    primary={true}\n                                    icon=\"replace\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </limel-example-do-do-not>\n                <limel-example-do-do-not>\n                    <div\n                        slot=\"do\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>Want to leave this conversation?</h4>\n                            <p>\n                                By leaving this conversation, you will no longer\n                                have access to chat history, shared files, and\n                                new updates.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" primary={true} />\n                                <limel-button\n                                    label=\"Leave\"\n                                    primary={true}\n                                    class=\"button primary--danger\"\n                                    icon=\"exit\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        slot=\"do-not\"\n                        class=\"fake-dialog-container shows-full-dialog\"\n                    >\n                        <div class=\"fake-dialog\">\n                            <h4>Want to leave this conversation?</h4>\n                            <p>\n                                By leaving this conversation, you will no longer\n                                have access to chat history, shared files, and\n                                new updates.\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button label=\"Cancel\" />\n                                <limel-button\n                                    label=\"Leave\"\n                                    primary={true}\n                                    icon=\"exit\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </limel-example-do-do-not>\n            </Host>\n        );\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples","filePath":"./src/design-guidelines/action-buttons/examples/third-alternative.tsx","fileName":"third-alternative.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/examples/usage","tag":"limel-example-action-buttons-third-alternative","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-button"],"dependencyGraph":{"limel-example-action-buttons-third-alternative":["limel-header","limel-button"],"limel-header":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"third-alternative.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-action-buttons-third-alternative',\n    shadow: true,\n    styleUrl: 'action-buttons.scss',\n})\nexport class ActionButtonsThirdAlternativeExample {\n    public render() {\n        return [\n            <div class=\"action-buttons-examples\">\n                <div class=\"example\">\n                    <div class=\"fake-dialog-container shows-full-dialog\">\n                        <div class=\"fake-dialog\">\n                            <limel-header\n                                heading=\"Save changes?\"\n                                class=\"is-narrow\"\n                            />\n                            <p>\n                                You have unsaved change. Do you want to save\n                                them before leaving this page?\n                            </p>\n                            <div class=\"action-bar\">\n                                <limel-button\n                                    label=\"Back to editing\"\n                                    class=\"button justify-left\"\n                                />\n                                <limel-button label=\"Discard\" slot=\"button\" />\n                                <limel-button label=\"Save\" primary={true} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"action-buttons.scss","type":"scss","source":"// We don't want the consumers to see these styles,\n// as they are just to visualize the fake examples, thus distracting.\n* {\n    box-sizing: border-box;\n}\n$dialog-border-radius: 0.75rem;\n\n.example {\n    margin: 0.5rem 0;\n    background-color: rgb(var(--contrast-600));\n}\n\n.fake-dialog-container {\n    --header-top-right-left-border-radius: #{$dialog-border-radius};\n    width: 100%;\n    height: 100%;\n    max-width: 40rem;\n    padding: 0 3rem 3rem 3rem;\n    margin: auto;\n\n    &.shows-full-dialog {\n        padding-top: 3rem;\n    }\n\n    p {\n        font-size: 0.875rem;\n        opacity: 0.7;\n        align-self: flex-start;\n        padding: 0 0.75rem;\n    }\n\n    h4 {\n        padding: 0 0.75rem;\n        margin-bottom: 0;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n    padding: 0.5rem;\n}\n\n.fake-dialog {\n    display: flex;\n    flex-direction: column;\n    min-height: 3rem;\n    background-color: rgb(var(--contrast-100));\n    box-shadow: var(--shadow-depth-16);\n    border-radius: 0 0 $dialog-border-radius $dialog-border-radius;\n\n    .shows-full-dialog & {\n        border-radius: $dialog-border-radius;\n    }\n}\n\nlimel-header {\n    &.save {\n        --header-icon-color: rgb(var(--color-lime-default));\n    }\n    &.delete {\n        --header-icon-color: rgb(var(--color-red-default));\n    }\n}\n\n.button {\n    &.justify-left {\n        justify-self: flex-start;\n        margin-right: auto;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-gray-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-on-primary-color: rgb(var(--color-red-default));\n        --lime-primary-color: rgb(var(--contrast-100));\n    }\n    &.primary--danger-highlighted {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/examples","filePath":"./src/components/ai-avatar/examples/ai-avatar-basic.tsx","fileName":"ai-avatar-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/examples/usage","tag":"limel-example-ai-avatar-basic","overview":"Basic Example\nThe component will render a static avatar by default.\nBut you can trigger animations, based on user's interactions,\nfor example on `:hover`.\n\nThis is easily done by toggling a custom CSS property:\n\n```scss\nlimel-ai-avatar {\n    &:hover {\n        --ai-avatar-animation-play-state: running;\n    }\n}\n```","usage":{},"docs":"Basic Example\nThe component will render a static avatar by default.\nBut you can trigger animations, based on user's interactions,\nfor example on `:hover`.\n\nThis is easily done by toggling a custom CSS property:\n\n```scss\nlimel-ai-avatar {\n    &:hover {\n        --ai-avatar-animation-play-state: running;\n    }\n}\n```","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-ai-avatar","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-ai-avatar-basic":["limel-ai-avatar","limel-example-controls","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"ai-avatar-basic.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Basic Example\n * The component will render a static avatar by default.\n * But you can trigger animations, based on user's interactions,\n * for example on `:hover`.\n *\n * This is easily done by toggling a custom CSS property:\n *\n * ```scss\n * limel-ai-avatar {\n *     &:hover {\n *         --ai-avatar-animation-play-state: running;\n *     }\n * }\n * ```\n *\n */\n@Component({\n    tag: 'limel-example-ai-avatar-basic',\n    shadow: true,\n    styleUrl: 'ai-avatar-basic.scss',\n})\nexport class AiAvatarBasicExample {\n    @State()\n    private isThinking = false;\n\n    public render() {\n        return (\n            <Host>\n                <div class=\"avatar-container\">\n                    <limel-ai-avatar isThinking={this.isThinking} />\n                </div>\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.isThinking}\n                        label=\"Is thinking\"\n                        onChange={this.setIsThinking}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private readonly setIsThinking = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.isThinking = event.detail;\n    };\n}\n"},{"filename":"ai-avatar-basic.scss","type":"scss","source":":host {\n    --example-controls-max-columns-width: 100%;\n}\n\n.avatar-container {\n    transition: background-color 0.3s ease;\n\n    display: block;\n    position: relative;\n    resize: horizontal;\n    overflow: auto;\n\n    box-sizing: border-box;\n\n    min-width: 3rem;\n    max-width: 100%;\n\n    min-height: 2rem;\n    height: auto;\n    max-height: 20rem;\n\n    padding: 1rem 0.25rem 3rem 0.25rem;\n    border: 0.125rem dashed rgb(var(--contrast-500));\n\n    border-radius: 0.5rem;\n\n    &:after {\n        content: 'Resize me ⤵';\n        font-size: 0.75rem;\n        position: absolute;\n        right: 0.25rem;\n        bottom: 0.25rem;\n    }\n}\n\nlimel-ai-avatar {\n    margin: auto;\n    background-color: rgb(var(--color-glaucous-default));\n\n    &:hover {\n        --ai-avatar-animation-play-state: running;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/examples","filePath":"./src/components/ai-avatar/examples/ai-avatar-colors.tsx","fileName":"ai-avatar-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/ai-avatar/examples/usage","tag":"limel-example-ai-avatar-colors","overview":"With background colors\nTo render better, the AI avatar needs to be placed on a colored background.","usage":{},"docs":"With background colors\nTo render better, the AI avatar needs to be placed on a colored background.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-ai-avatar","limel-example-controls","limel-checkbox","limel-color-picker-palette"],"dependencyGraph":{"limel-example-ai-avatar-colors":["limel-ai-avatar","limel-example-controls","limel-checkbox","limel-color-picker-palette"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"ai-avatar-colors.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\n\n/**\n * With background colors\n * To render better, the AI avatar needs to be placed on a colored background.\n */\n@Component({\n    tag: 'limel-example-ai-avatar-colors',\n    shadow: true,\n    styleUrl: 'ai-avatar-basic.scss',\n})\nexport class AiAvatarColorsExample {\n    @State()\n    private isThinking = false;\n\n    @State()\n    private backgroundColor = 'rgb(var(--color-blue-default))';\n\n    public render() {\n        return (\n            <Host>\n                <div class=\"avatar-container\">\n                    <limel-ai-avatar\n                        style={{\n                            backgroundColor: this.backgroundColor,\n                            borderRadius: '50%',\n                        }}\n                        isThinking={this.isThinking}\n                    />\n                </div>\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.isThinking}\n                        label=\"Is thinking\"\n                        onChange={this.setIsThinking}\n                    />\n                    <limel-color-picker-palette\n                        label=\"Background Color\"\n                        helperText=\"Select a background color for the AI avatar\"\n                        value={this.backgroundColor}\n                        onChange={this.handleColorChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private readonly handleColorChange = (event: CustomEvent<string>) => {\n        this.backgroundColor = event.detail;\n    };\n\n    private readonly setIsThinking = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.isThinking = event.detail;\n    };\n}\n"},{"filename":"ai-avatar-basic.scss","type":"scss","source":":host {\n    --example-controls-max-columns-width: 100%;\n}\n\n.avatar-container {\n    transition: background-color 0.3s ease;\n\n    display: block;\n    position: relative;\n    resize: horizontal;\n    overflow: auto;\n\n    box-sizing: border-box;\n\n    min-width: 3rem;\n    max-width: 100%;\n\n    min-height: 2rem;\n    height: auto;\n    max-height: 20rem;\n\n    padding: 1rem 0.25rem 3rem 0.25rem;\n    border: 0.125rem dashed rgb(var(--contrast-500));\n\n    border-radius: 0.5rem;\n\n    &:after {\n        content: 'Resize me ⤵';\n        font-size: 0.75rem;\n        position: absolute;\n        right: 0.25rem;\n        bottom: 0.25rem;\n    }\n}\n\nlimel-ai-avatar {\n    margin: auto;\n    background-color: rgb(var(--color-glaucous-default));\n\n    &:hover {\n        --ai-avatar-animation-play-state: running;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples","filePath":"./src/design-guidelines/boolean/examples/audition-form.tsx","fileName":"audition-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/usage","tag":"limel-example-audition-form","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-checkbox"],"dependencyGraph":{"limel-example-audition-form":["limel-example-do-do-not","limel-checkbox"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"audition-form.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-audition-form',\n    shadow: true,\n    styleUrl: 'switch-vs-checkbox.scss',\n})\nexport class AuditionFormExample {\n    public render() {\n        return (\n            <limel-example-do-do-not>\n                <div slot=\"do\" class=\"container\">\n                    <h4>Gender inclusive workplace audition summary</h4>\n                    <p>The audited company have taken proper measures to…</p>\n                    <limel-checkbox label=\"Respect and call staff by their choice of pronouns\" />\n                    <limel-checkbox label=\"Allow any dress codes that represent their gender identity\" />\n                    <limel-checkbox label=\"Have gender-neutral toilets\" />\n                    <limel-checkbox label=\"Stop gender discrimination in the recruitment\" />\n                    <limel-checkbox label=\"Have a protocol for sexual harassment in workplace\" />\n                    <p> ···</p>\n                    <p> ···</p>\n                </div>\n                <div slot=\"do-not\" class=\"container\">\n                    <h4>Gender inclusive workplace audition summary</h4>\n                    <p>The audited company have taken proper measures to…</p>\n                    <limel-checkbox label=\"Normalize sharing of pronouns\" />\n                    <limel-checkbox label=\"Dress codes that represent gender identity\" />\n                    <limel-checkbox label=\"Gender-neutral toilets\" />\n                    <limel-checkbox label=\"Discrimination in the recruitment\" />\n                    <limel-checkbox label=\"Protocol for sexual harassment\" />\n                    <p> ···</p>\n                    <p> ···</p>\n                </div>\n            </limel-example-do-do-not>\n        );\n    }\n}\n"},{"filename":"switch-vs-checkbox.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\nlimel-switch {\n    margin-top: 0.25rem;\n\n    &:not(:last-child) {\n        margin-bottom: 0.75rem;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n}\n\nhr {\n    opacity: 0.1;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples","filePath":"./src/design-guidelines/boolean/examples/audition-form-readonly.tsx","fileName":"audition-form-readonly.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/usage","tag":"limel-example-audition-form-readonly","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-checkbox"],"dependencyGraph":{"limel-example-audition-form-readonly":["limel-example-do-do-not","limel-checkbox"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"audition-form-readonly.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-audition-form-readonly',\n    shadow: true,\n    styleUrl: 'switch-vs-checkbox.scss',\n})\nexport class AuditionFormReadonlyExample {\n    public render() {\n        return (\n            <limel-example-do-do-not>\n                <div slot=\"do\" class=\"container\">\n                    <h4>Gender inclusive workplace audition summary</h4>\n                    <p>The audited company have taken proper measures to…</p>\n                    <limel-checkbox\n                        readonly={true}\n                        checked={true}\n                        label=\"Respect and call staff by their choice of pronouns\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        label=\"Allow any dress codes that represent their gender identity\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        checked={true}\n                        label=\"Have gender-neutral toilets\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        checked={true}\n                        label=\"Stop gender discrimination in the recruitment\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        label=\"Have a protocol for sexual harassment in workplace\"\n                    />\n                    <p> ···</p>\n                </div>\n                <div slot=\"do-not\" class=\"container\">\n                    <h4>Gender inclusive workplace audition summary</h4>\n                    <p>The audited company have taken proper measures to…</p>\n                    <limel-checkbox\n                        readonly={true}\n                        checked={true}\n                        label=\"Normalize sharing of pronouns\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        label=\"Dress codes that represent gender identity\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        checked={true}\n                        label=\"Gender-neutral toilets\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        checked={true}\n                        label=\"Discrimination in the recruitment\"\n                    />\n                    <limel-checkbox\n                        readonly={true}\n                        label=\"Protocol for sexual harassment\"\n                    />\n                    <p> ···</p>\n                </div>\n            </limel-example-do-do-not>\n        );\n    }\n}\n"},{"filename":"switch-vs-checkbox.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\nlimel-switch {\n    margin-top: 0.25rem;\n\n    &:not(:last-child) {\n        margin-bottom: 0.75rem;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n}\n\nhr {\n    opacity: 0.1;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples","filePath":"./src/components/badge/examples/badge.tsx","fileName":"badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/usage","tag":"limel-example-badge","overview":"Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","usage":{},"docs":"Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-badge"],"dependencyGraph":{"limel-example-badge":["limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Badge without a `label`\n * When no `label` is provided, the badge will only render as a circle.\n * This is a convention which is used in many applications to attract the\n * user's attention to a certain element on the user interface; typically to\n * menus or buttons that navigate the user to another pane or screen.\n *\n * In such cases, the idea is to provide the users with a \"red thread\"\n * and help them find something that requires their attention, but is located\n * on another place in the app, and not directly visible.\n *\n * :::tip\n * Make sure that the dot is noticeable, by providing an\n * eye-catching background color, as shown in this example.\n *:::\n */\n@Component({\n    tag: 'limel-example-badge',\n    styleUrl: 'badge.scss',\n    shadow: true,\n})\nexport class BadgeExample {\n    public render() {\n        return <limel-badge />;\n    }\n}\n"},{"filename":"badge.scss","type":"scss","source":":host(limel-example-badge) {\n    --badge-background-color: rgb(var(--color-red-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples","filePath":"./src/components/badge/examples/badge-number.tsx","fileName":"badge-number.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/usage","tag":"limel-example-badge-number","overview":"Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","usage":{},"docs":"Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-badge"],"dependencyGraph":{"limel-example-badge-number":["limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge-number.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Number badges\n *\n * Numeric labels larger than 999 will get both rounded and abbreviated.\n * For example, if the label is `1090` the badge will display `1.1K`.\n * Abbreviation units used are `k` (Kilo) that stands for Thousands,\n * `M` for Millions, `B` for Billions, and `T` for Trillions.\n *\n * When users hover the abbreviated badge, the complete\n * `label` will be displayed in a tooltip.\n */\n@Component({\n    tag: 'limel-example-badge-number',\n    styleUrl: 'badge-number.scss',\n    shadow: true,\n})\nexport class BadgeExample {\n    private label1: number = 5;\n    private label2: number = 995;\n    private label3: number = 9951;\n    private label4: number = 999_990;\n\n    public render() {\n        return [\n            <limel-badge label={this.label1} />,\n            <limel-badge label={this.label2} />,\n            <limel-badge label={this.label3} />,\n            <limel-badge label={this.label4} />,\n        ];\n    }\n}\n"},{"filename":"badge-number.scss","type":"scss","source":":host(limel-example-badge-number) {\n    display: flex;\n    justify-content: space-between;\n}\n\nlimel-badge {\n    &:nth-of-type(2) {\n        --badge-background-color: rgb(var(--color-red-default));\n        --badge-text-color: rgb(var(--color-yellow-lighter));\n    }\n\n    &:nth-of-type(3) {\n        --badge-background-color: rgb(var(--color-green-default));\n        --badge-text-color: rgb(var(--color-gray-lighter));\n    }\n\n    &:nth-of-type(4) {\n        --badge-background-color: rgb(var(--color-blue-default));\n        --badge-text-color: rgb(var(--color-white));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples","filePath":"./src/components/badge/examples/badge-string.tsx","fileName":"badge-string.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/badge/examples/usage","tag":"limel-example-badge-string","overview":"String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip.","usage":{},"docs":"String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-badge"],"dependencyGraph":{"limel-example-badge-string":["limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"badge-string.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * String badges\n *\n * String labels get truncated if their visual length is longer than\n * six characters placed side by side (six `0`s to be exact).\n *\n * When users hover the truncated badge, the complete\n * `label` will be displayed in a tooltip.\n */\n@Component({\n    tag: 'limel-example-badge-string',\n    styleUrl: 'badge-string.scss',\n    shadow: true,\n})\nexport class BadgeExample {\n    private label0: string = '·';\n    private label1: string = 'NEW';\n    private label2: string = 'pretty';\n    private label3: string = 'Element';\n\n    public render() {\n        return [\n            <limel-badge label={this.label0} />,\n            <limel-badge label={this.label1} />,\n            <limel-badge label={this.label2} />,\n            <limel-badge label={this.label3} />,\n        ];\n    }\n}\n"},{"filename":"badge-string.scss","type":"scss","source":":host(limel-example-badge-string) {\n    display: flex;\n    justify-content: space-between;\n}\n\nlimel-badge {\n    &:nth-of-type(1) {\n        --badge-background-color: rgb(var(--color-magenta-light));\n        --badge-text-color: rgb(var(--color-yellow-lighter));\n    }\n\n    &:nth-of-type(2) {\n        --badge-background-color: rgb(var(--color-amber-light));\n        --badge-text-color: rgb(var(--color-black));\n    }\n\n    &:nth-of-type(3) {\n        --badge-background-color: rgb(var(--color-violet-default));\n        --badge-text-color: rgb(var(--color-white));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/banner/examples","filePath":"./src/components/banner/examples/banner.tsx","fileName":"banner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/banner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/banner/examples/usage","tag":"limel-example-banner","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-banner"],"dependencyGraph":{"limel-example-banner":["limel-button","limel-banner"],"limel-button":["limel-icon","limel-spinner"],"limel-banner":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"banner.tsx","type":"tsx","source":"import { Component, Element, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-banner',\n    shadow: true,\n    styleUrl: 'banner.scss',\n})\nexport class BannerExample {\n    @Element()\n    private host: HTMLLimelExampleBannerElement;\n\n    @State()\n    private disabled = false;\n\n    private message = 'This is a non-blocking but also non-transient message';\n\n    private banner: HTMLLimelBannerElement;\n\n    public componentDidLoad() {\n        this.banner = this.host.shadowRoot.querySelector('limel-banner');\n    }\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                disabled={this.disabled}\n                label=\"Show Banner\"\n                onClick={this.openBanner}\n            />,\n            <limel-banner message={this.message} icon=\"exclamation_mark\">\n                <limel-button\n                    label=\"Some Action\"\n                    onClick={this.someCustomAction}\n                    slot=\"buttons\"\n                />\n                <limel-button\n                    label=\"Close\"\n                    onClick={this.closeBanner}\n                    slot=\"buttons\"\n                />\n            </limel-banner>,\n        ];\n    }\n\n    private openBanner = () => {\n        this.banner.open();\n        this.disabled = true;\n    };\n\n    private closeBanner = () => {\n        this.banner.close();\n        this.disabled = false;\n    };\n\n    private someCustomAction = () => {\n        alert('Triggered an action of some sort');\n        this.closeBanner();\n    };\n}\n"},{"filename":"banner.scss","type":"scss","source":"limel-banner {\n    --banner-icon-fill-color: rgb(var(--color-yellow-lighter));\n    --banner-icon-background-color: rgb(var(--color-red-default));\n    position: fixed;\n    right: 0;\n    top: 0;\n    left: 0;\n    z-index: 112;\n\n    @media (max-width: 720px) {\n        position: absolute;\n    }\n\n    limel-button:not(last-child) {\n        margin-right: 0.625rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples","filePath":"./src/design-guidelines/boolean/examples/checkboxes.tsx","fileName":"checkboxes.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/usage","tag":"limel-example-boolean-checkboxes","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-boolean-checkboxes":["limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkboxes.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-boolean-checkboxes',\n    shadow: true,\n    styleUrl: 'switch-vs-checkbox.scss',\n})\nexport class BooleanCheckboxesExample {\n    public render() {\n        return (\n            <div class=\"container\" style={{ pointerEvents: 'none' }}>\n                <p> ···</p>\n                <limel-checkbox\n                    label=\"Subscribe to our email newsletter\"\n                    helperText=\"By checking this field, you allow us to send you weekly emails.\"\n                    checked={true}\n                />\n                <limel-checkbox\n                    label=\"Make my profile publicly visible\"\n                    helperText=\"When your profile page is publicly visible, anyone of the internet can see the information you publish about yourself.\"\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"switch-vs-checkbox.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\nlimel-switch {\n    margin-top: 0.25rem;\n\n    &:not(:last-child) {\n        margin-bottom: 0.75rem;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n}\n\nhr {\n    opacity: 0.1;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples","filePath":"./src/design-guidelines/boolean/examples/radio-buttons.tsx","fileName":"radio-buttons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/usage","tag":"limel-example-boolean-radio-buttons","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-boolean-radio-buttons":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"radio-buttons.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\nimport {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-boolean-radio-buttons',\n    shadow: true,\n    styleUrl: 'switch-vs-checkbox.scss',\n})\nexport class BooleanRadioButtonsExample {\n    @State()\n    private items1: Array<ListItem | ListSeparator> = [\n        { text: 'Yes', value: 1, selected: true },\n        { text: 'No', value: 2, selected: false },\n    ];\n\n    @State()\n    private items2: Array<ListItem | ListSeparator> = [\n        { text: 'Public', value: 1, selected: false },\n        { text: 'Only myself', value: 2, selected: true },\n    ];\n\n    public render() {\n        return (\n            <div class=\"container\" style={{ pointerEvents: 'none' }}>\n                <p> ···</p>\n                <p>Do you want to receive our news and updates via email?</p>\n                <limel-list\n                    type=\"radio\"\n                    items={this.items1}\n                    onChange={this.handleChange1}\n                />\n                <p>Who can see your profile?</p>\n                <limel-list\n                    type=\"radio\"\n                    items={this.items2}\n                    onChange={this.handleChange2}\n                />\n            </div>\n        );\n    }\n\n    private handleChange1 = (event: LimelListCustomEvent<ListItem>) => {\n        this.items1 = this.items1.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n\n    private handleChange2 = (event: LimelListCustomEvent<ListItem>) => {\n        this.items2 = this.items2.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"},{"filename":"switch-vs-checkbox.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\nlimel-switch {\n    margin-top: 0.25rem;\n\n    &:not(:last-child) {\n        margin-bottom: 0.75rem;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n}\n\nhr {\n    opacity: 0.1;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/lime-color-palette.tsx","fileName":"lime-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-brand-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"lime-color-palette.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-brand-color-palette',\n    shadow: true,\n    styleUrl: 'lime-color-palette.scss',\n})\nexport class PaletteExample {\n    public render() {\n        return (\n            <div>\n                <div class=\"color-palette\">\n                    <div class=\"--lime-brand-color-lime-green swatch hue\">\n                        --lime-brand-color-lime-green\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>rgb(190, 224, 52) / #BEE034\n                    </div>\n                    <div class=\"--lime-brand-color-ocean-teal swatch hue\">\n                        --lime-brand-color-ocean-teal\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>rgb(111, 205, 182) /\n                        #6FCDB6\n                    </div>\n                    <div class=\"--lime-brand-color-aqua swatch hue\">\n                        --lime-brand-color-aqua\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>rgb(166, 239, 255) /\n                        #A6EFFF\n                    </div>\n                    <div class=\"--lime-brand-color-bubble-gum swatch hue\">\n                        --lime-brand-color-bubble-gum\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>rgb(255, 166, 234) /\n                        #FFA6EA\n                    </div>\n                    <div class=\"--lime-brand-color-sunny-orange swatch hue\">\n                        --lime-brand-color-sunny-orange\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>rgb(254, 176, 0) / #FEB000\n                    </div>\n                    <div class=\"--lime-brand-color-cool-grey swatch hue\">\n                        --lime-brand-color-cool-grey\n                    </div>\n                    <div class=\"swatch hue\">\n                        <span class=\"equals\">=</span>rgb(84, 87, 98) / #545762\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"},{"filename":"lime-color-palette.scss","type":"scss","source":"@use '../../../style/functions';\n@use './shared-styles';\n\n.color-palette {\n    grid-auto-flow: row;\n    grid-template-columns: auto 1fr;\n    gap: functions.pxToRem(4) functions.pxToRem(12);\n}\n.swatch {\n    max-height: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(12);\n\n    &.hue {\n        writing-mode: initial;\n        padding-top: 0;\n    }\n\n    &[class*='--lime-brand-color-'] {\n        color: rgb(var(--color-gray-darker));\n    }\n\n    &.--lime-brand-color-lime-green {\n        background-color: rgb(var(--lime-brand-color-lime-green));\n    }\n    &.--lime-brand-color-ocean-teal {\n        background-color: rgb(var(--lime-brand-color-ocean-teal));\n    }\n    &.--lime-brand-color-aqua {\n        background-color: rgb(var(--lime-brand-color-aqua));\n    }\n    &.--lime-brand-color-bubble-gum {\n        background-color: rgb(var(--lime-brand-color-bubble-gum));\n    }\n    &.--lime-brand-color-sunny-orange {\n        background-color: rgb(var(--lime-brand-color-sunny-orange));\n    }\n    &.--lime-brand-color-cool-grey {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--lime-brand-color-cool-grey));\n    }\n}\n\n.equals {\n    padding-right: functions.pxToRem(16);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples","filePath":"./src/components/breadcrumbs/examples/breadcrumbs-buttons.tsx","fileName":"breadcrumbs-buttons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/usage","tag":"limel-example-breadcrumbs-buttons","overview":"Items as buttons\nThe Breadcrumbs can also be used to navigate between different\nsteps of a process, such as steps of a form or survey, or\nmoving through steps of a wizard.\n\nIn this case, you will not provide any `link`s and instead will\nhandle the clicks. When no links are provided, the component\nwill automatically generate a list of `button`s.\n\nKeep in mind that the last item will not be rendered as an\nHTML button and and therefore won't be clickable.","usage":{},"docs":"Items as buttons\nThe Breadcrumbs can also be used to navigate between different\nsteps of a process, such as steps of a form or survey, or\nmoving through steps of a wizard.\n\nIn this case, you will not provide any `link`s and instead will\nhandle the clicks. When no links are provided, the component\nwill automatically generate a list of `button`s.\n\nKeep in mind that the last item will not be rendered as an\nHTML button and and therefore won't be clickable.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-breadcrumbs","limel-example-value"],"dependencyGraph":{"limel-example-breadcrumbs-buttons":["limel-breadcrumbs","limel-example-value"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"breadcrumbs-buttons.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport {\n    BreadcrumbsItem,\n    LimelBreadcrumbsCustomEvent,\n} from '@limetech/lime-elements';\n\n/**\n * Items as buttons\n * The Breadcrumbs can also be used to navigate between different\n * steps of a process, such as steps of a form or survey, or\n * moving through steps of a wizard.\n *\n * In this case, you will not provide any `link`s and instead will\n * handle the clicks. When no links are provided, the component\n * will automatically generate a list of `button`s.\n *\n * Keep in mind that the last item will not be rendered as an\n * HTML button and and therefore won't be clickable.\n */\n@Component({\n    tag: 'limel-example-breadcrumbs-buttons',\n    shadow: true,\n})\nexport class BreadcrumbsButtonsExample {\n    private items: BreadcrumbsItem[] = [\n        {\n            text: 'Account info',\n        },\n        {\n            text: 'Personal info',\n        },\n        {\n            text: 'Payment info',\n        },\n        {\n            text: 'Confirm your details',\n        },\n    ];\n\n    @State()\n    private selectedItem: BreadcrumbsItem;\n\n    constructor() {\n        this.selectedItem = this.items[0];\n    }\n\n    public render() {\n        return [\n            <limel-breadcrumbs\n                items={this.items}\n                onSelect={this.handleSelect}\n            />,\n            <limel-example-value\n                label={'Last clicked item'}\n                value={this.selectedItem.text}\n            />,\n        ];\n    }\n\n    private handleSelect = (\n        event: LimelBreadcrumbsCustomEvent<BreadcrumbsItem>\n    ) => {\n        this.selectedItem = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples","filePath":"./src/components/breadcrumbs/examples/breadcrumbs-divider.tsx","fileName":"breadcrumbs-divider.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/usage","tag":"limel-example-breadcrumbs-divider","overview":"Changing the divider\nBy default a **›** character is used to visually divide the\nitems from each other. This visual divider indicates the\norder and depths of steps which are taken to reach the current\nstep.\n\nHowever, in certain contexts, other characters could be\nmore suitable to visualize this hierarchy,\nsuch as a **·**, **-** or similar.\n\n:::warning\nAvoid using ellipsis motifs like **···**, **…** or **⋮**,\nsince they look like universally prevalent icons which\ncommunicate other meanings.","usage":{},"docs":"Changing the divider\nBy default a **›** character is used to visually divide the\nitems from each other. This visual divider indicates the\norder and depths of steps which are taken to reach the current\nstep.\n\nHowever, in certain contexts, other characters could be\nmore suitable to visualize this hierarchy,\nsuch as a **·**, **-** or similar.\n\n:::warning\nAvoid using ellipsis motifs like **···**, **…** or **⋮**,\nsince they look like universally prevalent icons which\ncommunicate other meanings.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-breadcrumbs"],"dependencyGraph":{"limel-example-breadcrumbs-divider":["limel-breadcrumbs"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"breadcrumbs-divider.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { BreadcrumbsItem } from '@limetech/lime-elements';\n\n/**\n * Changing the divider\n * By default a **›** character is used to visually divide the\n * items from each other. This visual divider indicates the\n * order and depths of steps which are taken to reach the current\n * step.\n *\n * However, in certain contexts, other characters could be\n * more suitable to visualize this hierarchy,\n * such as a **·**, **-** or similar.\n *\n * :::warning\n * Avoid using ellipsis motifs like **···**, **…** or **⋮**,\n * since they look like universally prevalent icons which\n * communicate other meanings.\n */\n@Component({\n    tag: 'limel-example-breadcrumbs-divider',\n    shadow: true,\n})\nexport class BreadcrumbsDividerExample {\n    private items: BreadcrumbsItem[] = [\n        {\n            text: 'root',\n        },\n        {\n            text: 'src',\n        },\n        {\n            text: 'components',\n        },\n        {\n            text: 'my-component',\n        },\n    ];\n\n    public render() {\n        return <limel-breadcrumbs items={this.items} divider=\"/\" />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples","filePath":"./src/components/breadcrumbs/examples/breadcrumbs-icon-color.tsx","fileName":"breadcrumbs-icon-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/usage","tag":"limel-example-breadcrumbs-icon-color","overview":"Using colors\n\nYou can specify colors for single item, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that items in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n\nAn icon can either adopt the color of the default text or receive a color\nif the `--breadcrumbs-item-text-color` has been set.\n\nNevertheless, if the `color` is explicitly defined,\nit will take precedence over the default icon's color.\n:::","usage":{},"docs":"Using colors\n\nYou can specify colors for single item, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that items in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n\nAn icon can either adopt the color of the default text or receive a color\nif the `--breadcrumbs-item-text-color` has been set.\n\nNevertheless, if the `color` is explicitly defined,\nit will take precedence over the default icon's color.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-breadcrumbs"],"dependencyGraph":{"limel-example-breadcrumbs-icon-color":["limel-breadcrumbs"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"breadcrumbs-icon-color.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { BreadcrumbsItem } from '@limetech/lime-elements';\n\n/**\n * Using colors\n *\n * You can specify colors for single item, by setting `color` on the `icon`.\n *\n * :::note\n * Make sure not to overuse colors!\n * It is perfectly fine that items in the bar use the default color.\n * Colors should be used to add an extra layer of meaning for the actions.\n *\n * An icon can either adopt the color of the default text or receive a color\n * if the `--breadcrumbs-item-text-color` has been set.\n *\n * Nevertheless, if the `color` is explicitly defined,\n * it will take precedence over the default icon's color.\n * :::\n *\n */\n@Component({\n    tag: 'limel-example-breadcrumbs-icon-color',\n    shadow: true,\n})\nexport class BreadcrumbsIconColorExample {\n    private items: BreadcrumbsItem[] = [\n        {\n            text: 'step 1',\n            icon: {\n                name: 'fish',\n                color: 'rgb(var(--color-red-default))',\n            },\n        },\n        {\n            text: 'Step 2',\n            icon: {\n                name: 'cat',\n                color: 'rgb(var(--color-orange-default))',\n            },\n        },\n        {\n            text: 'Step 3',\n            icon: {\n                name: 'dog',\n                color: 'rgb(var(--color-blue-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return <limel-breadcrumbs items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples","filePath":"./src/components/breadcrumbs/examples/breadcrumbs-icon-only.tsx","fileName":"breadcrumbs-icon-only.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/usage","tag":"limel-example-breadcrumbs-icons","overview":"Using icons\nFor an improved accessibility, you are required to\nprovide a `text` for each item in the breadcrumbs.\nBut each item can have an optional icon too.\n\nHowever, in some UIs, the design might require\nhiding the text and relying on an icon to visualize\nan item in the path.\n\nIn this case you can set the `type` to\n`icon-only` on the desired items.\n\n:::note\nThe last item (current step) will always\ndisplay both an icon and the text, even if you\nset the `type` to `icon-only`\n:::","usage":{},"docs":"Using icons\nFor an improved accessibility, you are required to\nprovide a `text` for each item in the breadcrumbs.\nBut each item can have an optional icon too.\n\nHowever, in some UIs, the design might require\nhiding the text and relying on an icon to visualize\nan item in the path.\n\nIn this case you can set the `type` to\n`icon-only` on the desired items.\n\n:::note\nThe last item (current step) will always\ndisplay both an icon and the text, even if you\nset the `type` to `icon-only`\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-breadcrumbs"],"dependencyGraph":{"limel-example-breadcrumbs-icons":["limel-breadcrumbs"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"breadcrumbs-icon-only.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { BreadcrumbsItem } from '@limetech/lime-elements';\n\n/**\n * Using icons\n * For an improved accessibility, you are required to\n * provide a `text` for each item in the breadcrumbs.\n * But each item can have an optional icon too.\n *\n * However, in some UIs, the design might require\n * hiding the text and relying on an icon to visualize\n * an item in the path.\n *\n * In this case you can set the `type` to\n * `icon-only` on the desired items.\n *\n * :::note\n * The last item (current step) will always\n * display both an icon and the text, even if you\n * set the `type` to `icon-only`\n * :::\n */\n@Component({\n    tag: 'limel-example-breadcrumbs-icons',\n    shadow: true,\n})\nexport class BreadcrumbsIconsExample {\n    private items: BreadcrumbsItem[] = [\n        {\n            text: 'Home',\n            type: 'icon-only',\n            icon: 'smart_home',\n        },\n        {\n            text: 'Products',\n            icon: 'shop',\n        },\n        {\n            text: 'Phones',\n            icon: 'iphone_x',\n        },\n        {\n            text: 'Accessories',\n            type: 'icon-only',\n            icon: 'headphones',\n        },\n    ];\n\n    public render() {\n        return <limel-breadcrumbs items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples","filePath":"./src/components/breadcrumbs/examples/breadcrumbs-links.tsx","fileName":"breadcrumbs-links.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/usage","tag":"limel-example-breadcrumbs-links","overview":"Items as hyperlinks\nWhen the Breadcrumbs are used to navigate between different webpages,\nfor example navigating a website, you will need to provide a `link`\nfor each webpage.\n\nThis way, the component will automatically generate a list of\nhyperlinks. This gives the users the possibility of interacting with links\nin a natural way, for instance they can open any of the previous\npages in a new browser tab. This also has other accessibility benefits.\n\n:::note\nClicking links will open in current window by default,\nand this reloads the entire webpage.\nTo avoid reloading the whole application (in the context of a single-page apps),\nyou might want to handle the navigation with your application's router,\n:::\n\nKeep in mind that the last item will not be rendered as an HTML link and\nis not clickable.","usage":{},"docs":"Items as hyperlinks\nWhen the Breadcrumbs are used to navigate between different webpages,\nfor example navigating a website, you will need to provide a `link`\nfor each webpage.\n\nThis way, the component will automatically generate a list of\nhyperlinks. This gives the users the possibility of interacting with links\nin a natural way, for instance they can open any of the previous\npages in a new browser tab. This also has other accessibility benefits.\n\n:::note\nClicking links will open in current window by default,\nand this reloads the entire webpage.\nTo avoid reloading the whole application (in the context of a single-page apps),\nyou might want to handle the navigation with your application's router,\n:::\n\nKeep in mind that the last item will not be rendered as an HTML link and\nis not clickable.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-breadcrumbs"],"dependencyGraph":{"limel-example-breadcrumbs-links":["limel-breadcrumbs"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"breadcrumbs-links.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { BreadcrumbsItem } from '@limetech/lime-elements';\n\n/**\n * Items as hyperlinks\n * When the Breadcrumbs are used to navigate between different webpages,\n * for example navigating a website, you will need to provide a `link`\n * for each webpage.\n *\n * This way, the component will automatically generate a list of\n * hyperlinks. This gives the users the possibility of interacting with links\n * in a natural way, for instance they can open any of the previous\n * pages in a new browser tab. This also has other accessibility benefits.\n *\n * :::note\n * Clicking links will open in current window by default,\n * and this reloads the entire webpage.\n * To avoid reloading the whole application (in the context of a single-page apps),\n * you might want to handle the navigation with your application's router,\n * :::\n *\n * Keep in mind that the last item will not be rendered as an HTML link and\n * is not clickable.\n */\n@Component({\n    tag: 'limel-example-breadcrumbs-links',\n    shadow: true,\n})\nexport class BreadcrumbsLinksExample {\n    private items: BreadcrumbsItem[] = [\n        {\n            text: 'Home',\n            link: {\n                href: '../../../..',\n                title: 'Start',\n            },\n        },\n        {\n            text: 'Products',\n            link: {\n                href: '../../../',\n                title: 'See all of our products',\n            },\n        },\n        {\n            text: 'Phones',\n            link: {\n                href: '../../',\n            },\n        },\n        {\n            text: 'Accessories',\n            link: {\n                href: '../',\n            },\n        },\n        {\n            text: 'Earphones',\n        },\n    ];\n\n    public render() {\n        return <limel-breadcrumbs items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples","filePath":"./src/components/breadcrumbs/examples/breadcrumbs-styling.tsx","fileName":"breadcrumbs-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/examples/usage","tag":"limel-example-breadcrumbs-styling","overview":"Styling\n\nUsing provided custom CSS properties,\nit is possible to style the breadcrumbs.","usage":{},"docs":"Styling\n\nUsing provided custom CSS properties,\nit is possible to style the breadcrumbs.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-breadcrumbs"],"dependencyGraph":{"limel-example-breadcrumbs-styling":["limel-breadcrumbs"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"breadcrumbs-styling.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { BreadcrumbsItem } from '@limetech/lime-elements';\n\n/**\n * Styling\n *\n * Using provided custom CSS properties,\n * it is possible to style the breadcrumbs.\n *\n */\n@Component({\n    tag: 'limel-example-breadcrumbs-styling',\n    shadow: true,\n    styleUrl: 'breadcrumbs-styling.scss',\n})\nexport class BreadcrumbsStylingExample {\n    private items: BreadcrumbsItem[] = [\n        {\n            text: 'Home',\n            icon: {\n                name: 'smart_home',\n                color: 'rgb(var(--color-cyan-light))',\n            },\n        },\n        {\n            text: 'Products',\n            icon: 'menu',\n        },\n        {\n            text: 'Phones',\n            icon: 'iphone_x',\n        },\n        {\n            text: 'Accessories',\n        },\n    ];\n\n    public render() {\n        return <limel-breadcrumbs items={this.items} />;\n    }\n}\n"},{"filename":"breadcrumbs-styling.scss","type":"scss","source":"limel-breadcrumbs {\n    --breadcrumbs-item-text-color: rgb(var(--color-blue-dark));\n    --breadcrumbs-item-max-width: 5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-basic.tsx","fileName":"button-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-basic","overview":"Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","usage":{},"docs":"Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-basic":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic Example\n *\n * Just a label and a click-handler.\n * Open the dev-tools console to see logged clicks.\n */\n@Component({\n    tag: 'limel-example-button-basic',\n    shadow: true,\n})\nexport class ButtonBasicExample {\n    public render() {\n        return <limel-button label=\"Click me!\" onClick={this.onClick} />;\n    }\n\n    private onClick() {\n        console.log('Button clicked.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-click-fail.tsx","fileName":"button-click-fail.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-click-fail","overview":"With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","usage":{},"docs":"With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-click-fail":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-click-fail.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With click handler, and failed feedback\n *\n * This example works just like the \"With click handler\" example, except that,\n * when the `loading` attribute changes from `true` to `false`, the button\n * automatically indicates that the previously ongoing process just failed.\n */\n@Component({\n    tag: 'limel-example-button-click-fail',\n    shadow: true,\n})\nexport class ButtonClickFailExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private loadingFailed = false;\n\n    public render() {\n        return (\n            <limel-button\n                label=\"Click me!\"\n                primary={true}\n                loading={this.loading}\n                disabled={this.disabled}\n                onClick={this.onClick}\n                loadingFailed={this.loadingFailed}\n            />\n        );\n    }\n\n    private onClick() {\n        this.disabled = true;\n        this.loading = true;\n        this.loadingFailed = false;\n\n        const TIME_LOADING = 2000;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.disabled = false;\n            this.loadingFailed = true;\n        }, TIME_LOADING);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-click-success.tsx","fileName":"button-click-success.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-click-success","overview":"With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","usage":{},"docs":"With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-click-success":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-click-success.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With click handler\n *\n * The click handler in this example simulates saving some changed values in a\n * form. When the button is clicked, the `loading` attribute is set to `true`.\n * After a short while, we pretend that the saving was successful, and set\n * `loading` to `false`. We also set `disabled` to `true`, because we just\n * successfully saved, so until the user updates our imaginary form again, there\n * is nothing to save.\n *\n * When the `loading` attribute changes from `true` to `false`, the button\n * automatically displays a checkmark icon for 2 seconds. Note that our click\n * handler isn't actually involved in this.\n *\n * A short while after the checkmark has disappeared, we enable the button\n * again. This is just so that you can try the functionality again. Normally,\n * the button would stay disabled until the user made some changes, so there's\n * something new to save!\n */\n@Component({\n    tag: 'limel-example-button-click-success',\n    shadow: true,\n})\nexport class ButtonClickSuccessExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    public render() {\n        return (\n            <limel-button\n                label=\"Click me!\"\n                primary={true}\n                loading={this.loading}\n                disabled={this.disabled}\n                onClick={this.onClick}\n            />\n        );\n    }\n\n    private onClick() {\n        this.loading = true;\n\n        const TIME_LOADING = 1000;\n        const TIME_DISABLED = 5000;\n        setTimeout(() => {\n            this.loading = false;\n            this.disabled = true;\n            setTimeout(() => {\n                this.disabled = false;\n            }, TIME_DISABLED);\n        }, TIME_LOADING);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-colors.tsx","fileName":"button-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-colors","overview":"How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","usage":{},"docs":"How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-colors":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-colors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * How to color button text and background\n * When a button is a \"primary\" button (`primary={true}`), the color value you specify\n * for `--lime-primary-color` will apply to its background. By default, text color\n * of primary buttons is white. To change their text color you must send a color\n * value with the `--lime-on-primary-color` variable.\n *\n * When a button is not a \"primary\" button, the value of `--lime-primary-color`\n * will be applied to its text, and `--lime-on-primary-color` will have no effect.\n *\n * Keep in mind that `disabled` buttons don't care about your specified colors at all.\n */\n@Component({\n    tag: 'limel-example-button-colors',\n    shadow: true,\n    styleUrl: 'button-colors.scss',\n})\nexport class ButtonColorsExample {\n    public render() {\n        return (\n            <div class=\"colorful-buttons\">\n                <span>Enabled</span>\n                <limel-button\n                    class=\"blue-primary\"\n                    label=\"Primary\"\n                    primary={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"yellow-primary orange-text\"\n                    label=\"Primary\"\n                    primary={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"blue-secondary\"\n                    label=\"Secondary\"\n                    icon=\"button\"\n                />\n                <span>Disabled</span>\n                <limel-button\n                    class=\"blue-primary\"\n                    label=\"Primary\"\n                    primary={true}\n                    disabled={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"yellow-primary orange-text\"\n                    label=\"Primary\"\n                    primary={true}\n                    disabled={true}\n                    icon=\"star\"\n                />\n                <limel-button\n                    class=\"blue-secondary\"\n                    label=\"Secondary\"\n                    disabled={true}\n                    icon=\"button\"\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"button-colors.scss","type":"scss","source":".colorful-buttons {\n    display: grid;\n    grid-template-columns: auto 1fr 1fr 1fr;\n    gap: 1.5rem 1rem;\n    margin: 0 auto;\n    align-items: center;\n}\n\n.blue-primary {\n    /* background color for primary buttons */\n    --lime-primary-color: rgb(var(--color-blue-default));\n}\n\n.yellow-primary {\n    /* background color for primary buttons */\n    --lime-primary-color: rgb(var(--color-yellow-light));\n}\n\n.orange-text {\n    /* text color for primary buttons */\n    --lime-on-primary-color: rgb(var(--color-orange-default));\n}\n\n.blue-secondary {\n    /* text color for non-primary buttons */\n    --lime-primary-color: rgb(var(--color-blue-default));\n    /* has no effect for non-primary */\n    --lime-on-primary-color: rgb(var(--color-red-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-composite.tsx","fileName":"button-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-button-composite":["limel-button","limel-example-event-printer","limel-example-controls","limel-form"],"limel-button":["limel-icon","limel-spinner"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-composite.tsx","type":"tsx","source":"import { FormSchema } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-button-composite',\n    shadow: true,\n})\nexport class ButtonCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        label: 'My button',\n        primary: true,\n        outlined: false,\n        icon: 'dog',\n        disabled: false,\n        loading: false,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-button {...this.props} onClick={this.handleEvent} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleEvent = (event: Event) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-disabled.tsx","fileName":"button-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-disabled","overview":"Disabled\n:::note\nDiscover when to utilize the disabled state and when it is preferable to hide a button by reading our guidelines [Disabled vs. Hidden](#/DesignGuidelines/disabled-hidden.md/).\n:::","usage":{},"docs":"Disabled\n:::note\nDiscover when to utilize the disabled state and when it is preferable to hide a button by reading our guidelines [Disabled vs. Hidden](#/DesignGuidelines/disabled-hidden.md/).\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-disabled":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-disabled.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Disabled\n * :::note\n * Discover when to utilize the disabled state and when it is preferable to hide a button by reading our guidelines [Disabled vs. Hidden](#/DesignGuidelines/disabled-hidden.md/).\n * :::\n */\n@Component({\n    tag: 'limel-example-button-disabled',\n    shadow: true,\n})\nexport class ButtonDisabledExample {\n    public render() {\n        return (\n            <limel-button\n                label=\"My Button\"\n                disabled={true}\n                onClick={this.onClick}\n            />\n        );\n    }\n\n    private onClick() {\n        console.log('This should never happen, since the button is disabled.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/disabled-hidden/examples","filePath":"./src/design-guidelines/disabled-hidden/examples/disabled-vs-hidden.tsx","fileName":"disabled-vs-hidden.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/disabled-hidden/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/disabled-hidden/examples/usage","tag":"limel-example-button-disabled-vs-hidden","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-checkbox","limel-button","limel-tooltip","limel-icon","limel-split-button"],"dependencyGraph":{"limel-example-button-disabled-vs-hidden":["limel-example-do-do-not","limel-checkbox","limel-button","limel-tooltip","limel-icon","limel-split-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"disabled-vs-hidden.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { ListSeparator } from '../../../components/list/list-item.types';\nimport { MenuItem } from '../../../components/menu/menu.types';\n\n@Component({\n    tag: 'limel-example-button-disabled-vs-hidden',\n    shadow: true,\n    styleUrl: 'button-disabled-vs-hidden.scss',\n})\nexport class ButtonDisabledVsHideExample {\n    @State()\n    private value: boolean = false;\n\n    @State()\n    private clicked: boolean = false;\n\n    @State()\n    private clickedDontExample: boolean = false;\n\n    @State()\n    public required: boolean;\n\n    @State()\n    private doNotSubmitClicked: boolean = false;\n\n    private readonly items: Array<ListSeparator | MenuItem> = [\n        { text: 'Save as', icon: 'save_as' },\n    ];\n\n    private readonly disabledItem: Array<ListSeparator | MenuItem> = [\n        { text: 'Save as', icon: 'save_as', disabled: true },\n    ];\n\n    private readonly handleDoNotSubmit = () => {\n        this.doNotSubmitClicked = true;\n    };\n\n    public render() {\n        return (\n            <Host>\n                <h3>Disabled vs. Hidden</h3>\n                <p>\n                    When should an interactive element –like a button– be\n                    \"Disabled\" and when should we avoid displaying it? This is a\n                    crucial question in user interface design, and the choice\n                    between the two should always be context-dependent. These\n                    guidelines provide insights into when to apply each approach\n                    to optimize user experiences.\n                    <br />\n                    <br />\n                    <b> Disabling an interactive element:</b>\n                </p>\n                <p>\n                    Use button disabling when the action the button represents\n                    is not currently available but may become available in the\n                    future. For example, you can disable a \"Submit\" button until\n                    all required form fields are filled out. Keep in mind that\n                    in such cases, users should be able to do something to\n                    enable the <code>disabled</code> element!\n                </p>\n                <limel-example-do-do-not\n                    doDescription=\"The submit button is disabled until required fields are filled in.\"\n                    doNotDescription=\"The submit button is enabled. Clicking it only makes required fields invalid.\"\n                >\n                    <limel-checkbox\n                        slot=\"do\"\n                        label=\"Accept terms and conditions\"\n                        required\n                        onChange={this.setChecked}\n                        checked={this.value}\n                    />\n                    <limel-button\n                        slot=\"do\"\n                        label=\"Submit\"\n                        disabled={!this.value}\n                    />\n                    <limel-checkbox\n                        slot=\"do-not\"\n                        label=\"Accept terms and conditions\"\n                        required\n                        invalid={this.doNotSubmitClicked}\n                    />\n                    <limel-button\n                        slot=\"do-not\"\n                        label=\"Submit\"\n                        onClick={this.handleDoNotSubmit}\n                    />\n                </limel-example-do-do-not>\n                <p>\n                    Simply showing a disabled element in the user interface\n                    might not be enough for the user to realize what they should\n                    do to enable it. Therefore, it's very helpful to communicate\n                    to the user why they can't perform that certain action.\n                    Disabled buttons for instance, could have a tooltip or\n                    message explaining why they are disabled.\n                </p>\n                <p>\n                    Another idea could be to display a more noticeable visual\n                    element next to the disabled element, which hints about an\n                    explanation or further information. For example, indicating\n                    to the user that they need to complete a certain step or\n                    meet specific conditions before proceeding.\n                </p>\n                <limel-example-do-do-not\n                    doDescription=\"Disabled button together with a Tooltip that clarifies why the button is disabled.\"\n                    doNotDescription=\"Disabled button without any explanation\"\n                >\n                    <div slot=\"do\">\n                        <limel-button\n                            id=\"tooltip-example\"\n                            disabled\n                            icon=\"phone\"\n                            label=\"Call\"\n                        />\n                        <limel-tooltip\n                            label=\"Select a recipient to make a call\"\n                            elementId=\"tooltip-example\"\n                        />\n                    </div>\n                    <span slot=\"do\" style={{ padding: '0 2rem' }}>\n                        or\n                    </span>\n                    <div slot=\"do\">\n                        <limel-button\n                            disabled\n                            icon=\"plus_math\"\n                            label=\"Add recipient\"\n                        />\n                        <limel-icon name=\"info\" id=\"tooltip\" size=\"x-small\" />\n                        <limel-tooltip\n                            label=\"To activate this feature, call our support!\"\n                            elementId=\"tooltip\"\n                        />\n                    </div>\n                    <div slot=\"do-not\">\n                        <limel-button disabled icon=\"phone\" label=\"Call\" />\n                    </div>\n                </limel-example-do-do-not>\n                <h3>Hiding an interactive element:</h3>\n                <p>\n                    Sometimes, displaying a disabled element does not make\n                    sense. This could be of course due to various reasons, but a\n                    common scenario is coexistence of another \"enabled\" element\n                    that does the opposite of what the disabled element does.{' '}\n                    <br /> In this example, there is no point to show two\n                    buttons, one for \"assigning\" and one for \"un-assigning\". The\n                    \"Assign\" button should be hidden if it's not relevant to a\n                    context. If the user is already assigned there is no sense\n                    in having the assign button, it is better to show the{' '}\n                    <b> unassign</b> button instead.\n                </p>\n                <limel-example-do-do-not>\n                    <limel-button\n                        slot=\"do\"\n                        class=\"relevant-button\"\n                        icon={this.clicked ? '' : 'whole_hand_right'}\n                        label={this.clicked ? 'Unassign me' : 'Assign me'}\n                        onClick={this.isClicked}\n                    />\n                    <limel-button\n                        slot=\"do-not\"\n                        class=\"relevant-button assign\"\n                        icon=\"whole_hand_right\"\n                        label=\"Assign me\"\n                        disabled={this.clickedDontExample}\n                        onClick={this.isClickedDontExample}\n                    />\n                    <limel-button\n                        slot=\"do-not\"\n                        class=\"relevant-button\"\n                        label=\"Unassign me\"\n                        disabled={!this.clickedDontExample}\n                        onClick={this.isClickedDontExample}\n                    />\n                </limel-example-do-do-not>\n                <p>\n                    When an action is permanently unavailable or not allowed for\n                    a particular user role (e.g., an admin-only action), it's\n                    best to hide the button rather than disabling it.\n                </p>\n                <limel-example-do-do-not>\n                    <div slot=\"do-not\">\n                        <p>What users & admins both see</p>\n                        <limel-split-button\n                            slot=\"do-not\"\n                            label=\"Save\"\n                            icon=\"save\"\n                            items={this.disabledItem}\n                        />\n                    </div>\n                    <div slot=\"do\">\n                        <p>What users see</p>\n                        <limel-split-button label=\"Save\" icon=\"save\" />\n                    </div>\n                    <div\n                        slot=\"do\"\n                        style={{\n                            borderLeft: '1px dashed rgb(var(--contrast-600))',\n                        }}\n                    />\n                    <div slot=\"do\">\n                        <p>What admins see</p>\n                        <limel-split-button\n                            label=\"Save\"\n                            icon=\"save\"\n                            items={this.items}\n                        />\n                    </div>\n                </limel-example-do-do-not>\n            </Host>\n        );\n    }\n\n    private readonly setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private readonly isClicked = () => {\n        this.clicked = !this.clicked;\n    };\n\n    private readonly isClickedDontExample = () => {\n        this.clickedDontExample = !this.clickedDontExample;\n    };\n}\n"},{"filename":"button-disabled-vs-hidden.scss","type":"scss","source":".do,\n.do-not {\n    .relevant-button,\n    limel-button {\n        margin: 1rem;\n    }\n\n    .assign {\n        padding-bottom: 0;\n    }\n}\n\n#tooltip-example {\n    width: 5rem;\n}\n\n#tooltip {\n    cursor: help;\n}\n\n.button-icon {\n    display: flex;\n    align-items: center;\n}\n\n.split-example,\n.relevant-buttons-example {\n    limel-split-button {\n        margin: 1rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group.tsx","fileName":"button-group.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group","overview":"Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","usage":{},"docs":"Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-button-group":["limel-button-group","limel-example-controls","limel-checkbox"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Button, LimelButtonGroupCustomEvent } from '@limetech/lime-elements';\n\n/**\n * Text only\n *\n * This layout is good when you do not have access to icons which are\n * descriptive enough.\n */\n@Component({\n    tag: 'limel-example-button-group',\n    shadow: true,\n})\nexport class ButtonGroupExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private buttons: Button[] = [\n        {\n            id: '1',\n            title: 'First',\n        },\n        {\n            id: '2',\n            title: 'Second',\n            selected: true,\n        },\n        {\n            id: '3',\n            title: 'Third',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-button-group\n                disabled={this.disabled}\n                onChange={this.handleChange}\n                value={this.buttons}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelButtonGroupCustomEvent<Button>) => {\n        const changedButton = event.detail;\n        console.log(changedButton);\n\n        this.buttons = this.buttons.map((button) => {\n            return {\n                ...button,\n                selected: button.id === changedButton.id,\n            };\n        });\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-badges.tsx","fileName":"button-group-badges.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-badges","overview":"Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","usage":{},"docs":"Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group"],"dependencyGraph":{"limel-example-button-group-badges":["limel-button-group"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-badges.tsx","type":"tsx","source":"import { Button, LimelButtonGroupCustomEvent } from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\n/**\n * Button group with badges\n *\n * Badges can be used to add further contextual information.\n * For example, if the component is used to filter a set of data\n * the badges could visualize the number of entries\n * for each filter option.\n *\n * The badge can either\n * have a `number` or `string` label.\n * Read more about how the badge truncates or abbreviates the\n * provided label [here](#/component/limel-badge/).\n */\n@Component({\n    tag: 'limel-example-button-group-badges',\n    shadow: true,\n})\nexport class ButtonGroupBadgesExample {\n    @State()\n    private buttons: Button[] = [\n        {\n            id: '1',\n            title: 'Overdue',\n            badge: '50+',\n        },\n        {\n            id: '2',\n            title: 'Today',\n            badge: 9,\n            selected: true,\n        },\n        {\n            id: '3',\n            title: 'Upcoming',\n            badge: 23,\n        },\n        {\n            id: '4',\n            title: 'Future',\n            badge: 62,\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-button-group\n                onChange={this.handleChange}\n                value={this.buttons}\n            />,\n        ];\n    }\n\n    private handleChange = (event: LimelButtonGroupCustomEvent<Button>) => {\n        const changedButton = event.detail;\n        console.log(changedButton);\n\n        this.buttons = this.buttons.map((button) => {\n            return {\n                ...button,\n                selected: button.id === changedButton.id,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-composite.tsx","fileName":"button-group-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-button-group-composite":["limel-button-group","limel-example-event-printer","limel-example-controls","limel-form"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\nimport {\n    Button,\n    FormSchema,\n    LimelButtonGroupCustomEvent,\n} from '@limetech/lime-elements';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-button-group-composite',\n    shadow: true,\n})\nexport class ButtonCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        disabled: false,\n        value: [\n            {\n                id: '1',\n                title: 'Clear sky',\n                icon: 'sun',\n            },\n            {\n                id: '2',\n                title: 'Partly cloudy',\n                icon: 'partly_cloudy_day',\n            },\n            {\n                id: '3',\n                title: 'Rain showers',\n                icon: 'rain',\n            },\n            {\n                id: '4',\n                title: 'Thunderstorms',\n                icon: 'cloudshot',\n            },\n            {\n                id: '5',\n                title: 'Snow showers',\n                icon: 'snowflake',\n            },\n        ] as Button[],\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public render() {\n        return [\n            <limel-button-group {...this.props} onChange={this.handleChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: LimelButtonGroupCustomEvent<Button>) => {\n        this.eventPrinter.writeEvent(event);\n        const changedButton = event.detail;\n\n        this.props = {\n            ...this.props,\n            value: this.props.value.map((button) => {\n                return {\n                    ...button,\n                    selected: button.id === changedButton.id,\n                };\n            }),\n        };\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-icons.tsx","fileName":"button-group-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-icons","overview":"Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","usage":{},"docs":"Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-button-group-icons":["limel-button-group","limel-example-controls","limel-checkbox"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-icons.tsx","type":"tsx","source":"import { Button, LimelButtonGroupCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Icon only\n *\n * If you pick well descriptive icons, this layout will usually suffice. When\n * you specify an `icon`, it will automatically be shown instead of the `title`.\n *:::important\n * Adding titles for buttons is compulsory. The reason is that when\n * only icons are shown, titles will appear as `aria-label` for screen readers,\n * as well as `title` attribute when users hover and hold their cursors on the\n * buttons.\n * :::\n * This makes it easier for them to know what the button actually does\n * or what the icon tries to indicate.\n *\n * So, make sure to label your icons properly and descriptively.\n */\n@Component({\n    tag: 'limel-example-button-group-icons',\n    shadow: true,\n})\nexport class ButtonGroupIconsExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private buttons: Button[] = [\n        {\n            id: '1',\n            title: 'Clear sky',\n            icon: 'sun',\n        },\n        {\n            id: '2',\n            title: 'Partly cloudy',\n            icon: 'partly_cloudy_day',\n        },\n        {\n            id: '3',\n            title: 'Rain showers',\n            icon: 'rain',\n        },\n        {\n            id: '4',\n            title: 'Thunderstorms',\n            icon: 'cloudshot',\n        },\n        {\n            id: '5',\n            title: 'Snow showers',\n            icon: 'snowflake',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-button-group\n                disabled={this.disabled}\n                onChange={this.handleChange}\n                value={this.buttons}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelButtonGroupCustomEvent<Button>) => {\n        const changedButton = event.detail;\n        console.log(changedButton);\n\n        this.buttons = this.buttons.map((button) => {\n            return {\n                ...button,\n                selected: button.id === changedButton.id,\n            };\n        });\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples","filePath":"./src/components/button-group/examples/button-group-mix.tsx","fileName":"button-group-mix.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button-group/examples/usage","tag":"limel-example-button-group-mix","overview":"Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","usage":{},"docs":"Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button-group","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-button-group-mix":["limel-button-group","limel-example-controls","limel-checkbox"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-group-mix.tsx","type":"tsx","source":"import { Button, LimelButtonGroupCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Mixed text and icon within the same group\n *\n * Generally, you should avoid mixing text and images in button group. Although\n * individual buttons can contain text or images, mixing the two in a single\n * group can lead to an inconsistent and confusing interface.\n *\n * However, in some case your design may benefit from having only one button in\n * a different format.\n */\n@Component({\n    tag: 'limel-example-button-group-mix',\n    shadow: true,\n})\nexport class ButtonGroupMixExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private buttons: Button[] = [\n        {\n            id: '1',\n            title: 'All',\n        },\n        {\n            id: '2',\n            title: 'Banana',\n            icon: 'banana',\n        },\n        {\n            id: '3',\n            title: 'Apple',\n            icon: 'apple',\n        },\n        {\n            id: '4',\n            title: 'Pear',\n            icon: 'pear',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-button-group\n                disabled={this.disabled}\n                onChange={this.handleChange}\n                value={this.buttons}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelButtonGroupCustomEvent<Button>) => {\n        const changedButton = event.detail;\n        console.log(changedButton);\n\n        this.buttons = this.buttons.map((button) => {\n            return {\n                ...button,\n                selected: button.id === changedButton.id,\n            };\n        });\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-icon.tsx","fileName":"button-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-icon","overview":"Proper usage of icons\n\nSometimes, your design requires displaying a single icon inside a button,\nwithout any visible label.\n\nIn such scenarios, the `title` property of the icon must be used to\nimprove accessibility for unsighted users.\n\nWhen a proper `label` is chosen for a button, it is descriptive enough for\nthe users to understand the meaning of the action.\nIn such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`.","usage":{},"docs":"Proper usage of icons\n\nSometimes, your design requires displaying a single icon inside a button,\nwithout any visible label.\n\nIn such scenarios, the `title` property of the icon must be used to\nimprove accessibility for unsighted users.\n\nWhen a proper `label` is chosen for a button, it is descriptive enough for\nthe users to understand the meaning of the action.\nIn such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-button","limel-tooltip"],"dependencyGraph":{"limel-example-button-icon":["limel-example-do-do-not","limel-button","limel-tooltip"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-button":["limel-icon","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-icon.tsx","type":"tsx","source":"import { Component, h, Host } from '@stencil/core';\n\n/**\n * Proper usage of icons\n *\n * Sometimes, your design requires displaying a single icon inside a button,\n * without any visible label.\n *\n * In such scenarios, the `title` property of the icon must be used to\n * improve accessibility for unsighted users.\n *\n * When a proper `label` is chosen for a button, it is descriptive enough for\n * the users to understand the meaning of the action.\n * In such cases, the icon is primarily used to improve\n * the visual appearance of the item, and make it more quickly and easily recognizable\n * for the users.\n *\n * However, some designs favor a cleaner and more minimal user interface,\n * by removing unnecessary words, relying on an already present icon which\n * can be interpreted as a word by the user.\n *\n * Here you see examples of such icons followed by a short text:\n * - **➕ icon followed by \"Todo\"**: For a sighted user,\n * this combination of icon and text would be interpreted as \"Add New Todo\"\n * - **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n * - **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n *\n * For sighted users, the text is enough to understand the meaning of the action,\n * but a screen reader cannot interpret the icon as a word, unless you provide a\n * proper `title` property for the icon. In fact, the icons that have no `title`\n * are completely hidden from the screen readers.\n *\n * This example showcases how user experience can be improved not only for both\n * users of assistive technologies, but also for those who see a descriptive tooltip,\n * while hovering the action, which is constructed from the combination of\n * the `title` and `text`.\n */\n@Component({\n    tag: 'limel-example-button-icon',\n    shadow: true,\n})\nexport class ButtonIconExample {\n    public render() {\n        return (\n            <Host>\n                <limel-example-do-do-not\n                    doDescription=\"The icon has an accessible and descriptive `title` for its `icon`.\"\n                    doNotDescription=\"The button has no `label`, and no `title` for the `icon`.\"\n                >\n                    <limel-button\n                        slot=\"do\"\n                        icon={{\n                            name: 'plus_math',\n                            title: 'Add New To-do',\n                        }}\n                    />\n                    <limel-button slot=\"do-not\" icon=\"plus_math\" />\n                </limel-example-do-do-not>\n                <limel-example-do-do-not\n                    doDescription=\"The icon has an `title` for its `icon`, which can be combined by the `label` to create an accessible experience for users of assistive technologies like screen readers.\"\n                    doNotDescription=\"The button has a `label`, but no `title` for the `icon`. Sighted users can see icon and interpret it together the `label`. However, screen readers only read out the label, which is not descriptive alone.\"\n                >\n                    <limel-button\n                        slot=\"do\"\n                        icon={{\n                            name: 'plus_math',\n                            title: 'Add New',\n                        }}\n                        label=\"To-do\"\n                    />\n                    <limel-button\n                        slot=\"do-not\"\n                        icon=\"plus_math\"\n                        label=\"To-do\"\n                    />\n                </limel-example-do-do-not>\n                <limel-example-do-do-not\n                    doDescription=\"The button uses an accessible and descriptive tooltip. This provides a great experience for sighted users, and those who use screen readers.\"\n                    doNotDescription=\"The button has no `label`, no `title` for the `icon`, and no tooltip or other accessible attributes.\"\n                >\n                    <div slot=\"do\">\n                        <limel-button\n                            icon={{\n                                name: 'plus_math',\n                                title: 'Add New To-do',\n                            }}\n                            id=\"button\"\n                        />\n                        <limel-tooltip\n                            elementId=\"button\"\n                            label=\"Add New To-do\"\n                        />\n                    </div>\n                    <limel-button slot=\"do-not\" icon=\"plus_math\" />\n                </limel-example-do-do-not>\n            </Host>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-loading.tsx","fileName":"button-loading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-loading","overview":"Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","usage":{},"docs":"Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-loading":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-loading.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Loading\n *\n * Note that the example is also using `disabled`, because a button that is\n * loading should normally also be disabled.\n */\n@Component({\n    tag: 'limel-example-button-loading',\n    shadow: true,\n})\nexport class ButtonLoadingExample {\n    public render() {\n        return (\n            <limel-button label=\"My Button\" disabled={true} loading={true} />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-outlined.tsx","fileName":"button-outlined.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-outlined","overview":"Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","usage":{},"docs":"Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-outlined":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-outlined.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Outlined\n *\n * By setting `outlined={true}`, you can create a style\n * of buttons which could be used to indicate an action\n * with medium emphasis.\n *\n * :::note\n * This style is useful to indicate the \"secondariness\" of an action.\n * Therefore, only use this style, if there is another related\n * `primary` button present on the same view or screen,\n * along with another normal button.\n *\n * Also, give such a choice a second thought by reading\n * [our guidelines for Split button](#/component/limel-split-button/).\n * :::\n */\n@Component({\n    tag: 'limel-example-button-outlined',\n    shadow: true,\n})\nexport class ButtonOutlinedExample {\n    public render() {\n        return <limel-button label=\"My Button\" outlined={true} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-primary.tsx","fileName":"button-primary.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-primary","overview":"Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","usage":{},"docs":"Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-primary":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-primary.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Primary\n *\n * Each screen (modal, or section with action buttons)\n * should contain a single prominent button like this one,\n * to emphasize the primary action.\n *\n * :::note\n * Think twice before setting `primary={true}` on buttons.\n * The arrangement of buttons and their colors should clearly\n * communicate their importance and primariness or secondariness.\n *\n * See some examples at [our design guidelines for\n * Action buttons](#/DesignGuidelines/action-buttons.md/).\n * :::\n */\n@Component({\n    tag: 'limel-example-button-primary',\n    shadow: true,\n})\nexport class ButtonPrimaryExample {\n    public render() {\n        return <limel-button label=\"My Button\" primary={true} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples","filePath":"./src/components/button/examples/button-reduce-presence.tsx","fileName":"button-reduce-presence.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/button/examples/usage","tag":"limel-example-button-reduce-presence","overview":"Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","usage":{},"docs":"Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button"],"dependencyGraph":{"limel-example-button-reduce-presence":["limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-reduce-presence.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Reduce Presence\n *\n * This example is identical to the \"With click handler\" example, except that\n * here, the `has-reduced-presence` class has been set to `true`. This will hide\n * the button when it is disabled. However, it will also make sure that the\n * button remains visible while the loading animation is ongoing. When the\n * animation is done and the checkmark has been shown, the button will hide.\n *\n * Read more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)\n */\n@Component({\n    tag: 'limel-example-button-reduce-presence',\n    shadow: true,\n})\nexport class ButtonReducePresenceExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    public render() {\n        return (\n            <limel-button\n                class=\"has-reduced-presence\"\n                label=\"Click me!\"\n                primary={true}\n                loading={this.loading}\n                disabled={this.disabled}\n                onClick={this.onClick}\n            />\n        );\n    }\n\n    private onClick() {\n        this.disabled = true;\n        this.loading = true;\n\n        const TIME_LOADING = 1000;\n        const TIME_DISABLED = 5000;\n        setTimeout(() => {\n            this.loading = false;\n            setTimeout(() => {\n                this.disabled = false;\n            }, TIME_DISABLED);\n        }, TIME_LOADING);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/button-shadows.tsx","fileName":"button-shadows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-button-shadows","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"button-shadows.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-button-shadows',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class ButtonShadowExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid\">\n                <div class=\"visualization\">\n                    <button class=\"button normal\">\n                        <div class=\"label\">Normal</div>\n                    </button>\n                    <code>--button-shadow-normal</code>\n                    <p>makes the element look clickable</p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button hovered\">\n                        <div class=\"label\">Hover</div>\n                    </button>\n                    <code>--button-shadow-hovered</code>\n                    <p>\n                        makes the element look raised a bit more, ready to be\n                        pressed\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button pressed\">\n                        <div class=\"label\">Pressed</div>\n                    </button>\n                    <code>--button-shadow-pressed</code>\n                    <p>\n                        makes the element look pressed down towards the surface\n                        below\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button inset\">\n                        <div class=\"label\">Inset</div>\n                    </button>\n                    <code>--button-shadow-inset</code>\n                    <p>\n                        makes the element look pressed down below its background\n                        surface\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <button class=\"button inset-pressed\">\n                        <div class=\"label three\">Pressed Inset</div>\n                    </button>\n                    <code>--button-shadow-inset-pressed</code>\n                    <p>makes the inset element look even more pressed down</p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-caution.tsx","fileName":"callout-caution.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-caution","overview":"Type: `caution`","usage":{},"docs":"Type: `caution`","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-caution":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-caution.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Type: `caution`\n */\n@Component({\n    tag: 'limel-example-callout-caution',\n    shadow: true,\n})\nexport class CalloutCautionExample {\n    public render() {\n        return (\n            <limel-callout type=\"caution\">I hope you read this.</limel-callout>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-composite.tsx","fileName":"callout-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-composite","overview":"Composite","usage":{},"docs":"Composite","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-callout-composite":["limel-callout","limel-example-controls","limel-form"],"limel-callout":["limel-icon"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-composite.tsx","type":"tsx","source":"import { FormSchema } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n */\n@Component({\n    tag: 'limel-example-callout-composite',\n    shadow: true,\n})\nexport class CalloutCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props: any = {\n        heading: '',\n        icon: '',\n        content: 'This is my very nice [type]',\n        type: 'tip',\n        language: 'en',\n        style: {\n            '--callout-color': '',\n            '--callout-text-color': '',\n            '--callout-background-color': '',\n        },\n    };\n\n    public componentWillLoad() {\n        const properties = {\n            ...this.schema.properties,\n            content: {\n                type: 'string',\n                title: 'Content',\n                lime: {\n                    layout: {\n                        rowSpan: 2,\n                        colSpan: 'all',\n                    },\n                    component: {\n                        props: {\n                            type: 'textarea',\n                        },\n                    },\n                },\n            },\n            style: {\n                type: 'object',\n                title: 'Styles',\n                properties: {\n                    '--callout-color': {\n                        type: 'string',\n                        title: 'Callout Color',\n                        description: '--callout-color',\n                        lime: {\n                            component: {\n                                name: 'limel-color-picker',\n                            },\n                        },\n                    },\n                    '--callout-text-color': {\n                        type: 'string',\n                        title: 'Text Color',\n                        description: '--callout-text-color',\n                        lime: {\n                            component: {\n                                name: 'limel-color-picker',\n                            },\n                        },\n                    },\n                    '--callout-background-color': {\n                        type: 'string',\n                        title: 'Background Color',\n                        description: '--callout-background-color',\n                        lime: {\n                            component: {\n                                name: 'limel-color-picker',\n                            },\n                        },\n                    },\n                },\n            },\n        };\n\n        this.schema = {\n            ...this.schema,\n            properties: properties,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n    }\n\n    public render() {\n        const content = this.props?.content?.replace(\n            '[type]',\n            this.props?.type ?? ''\n        );\n\n        return [\n            <limel-callout {...this.props}>\n                <div innerHTML={content} />\n            </limel-callout>,\n            this.renderForm(),\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-custom-heading.tsx","fileName":"callout-custom-heading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-custom-heading","overview":"With custom `heading`\n\nBy default, the title will equal the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(icon and color), but override the default heading, using the `heading` prop.","usage":{},"docs":"With custom `heading`\n\nBy default, the title will equal the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(icon and color), but override the default heading, using the `heading` prop.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-custom-heading":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-custom-heading.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * With custom `heading`\n *\n * By default, the title will equal the `type` qualifier.\n * However, it is possible to use a `type` just to get the desired visualisation\n * (icon and color), but override the default heading, using the `heading` prop.\n */\n@Component({\n    tag: 'limel-example-callout-custom-heading',\n    shadow: true,\n})\nexport class CalloutCustomTitleExample {\n    public render() {\n        return (\n            <limel-callout heading=\"🥳 yeay!\">\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                    Vestibulum viverra magna non pretium condimentum. Integer a\n                    nunc magna. In commodo elit turpis, porttitor vulputate odio\n                    pretium a. Ut at sapien a massa convallis commodo eu sed\n                    ligula. Curabitur non sodales neque. Sed id nisl vel ex\n                    tempor euismod. Nulla nec lorem dui. Cras tincidunt urna nec\n                    velit pretium maximus.\n                </p>\n\n                <p>\n                    Praesent sed cursus lorem. Phasellus lobortis dolor vitae\n                    pretium bibendum. Vivamus non augue in urna consequat\n                    dapibus at quis diam. Duis tristique lacinia felis, quis\n                    condimentum urna interdum sit amet. Suspendisse facilisis\n                    pulvinar suscipit. Pellentesque quis velit feugiat, bibendum\n                    erat at, ornare tortor. Nullam sed risus a enim tempor\n                    eleifend nec quis nulla. Cras quis pellentesque justo.\n                    Maecenas id justo a eros consequat auctor.\n                </p>\n            </limel-callout>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-custom-icon.tsx","fileName":"callout-custom-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-custom-icon","overview":"With custom `icon`\n\nBy default, the icon will be defined by the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(color and heading), but override the default icon, using the `icon` prop.","usage":{},"docs":"With custom `icon`\n\nBy default, the icon will be defined by the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(color and heading), but override the default icon, using the `icon` prop.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-custom-icon":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-custom-icon.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * With custom `icon`\n *\n * By default, the icon will be defined by the `type` qualifier.\n * However, it is possible to use a `type` just to get the desired visualisation\n * (color and heading), but override the default icon, using the `icon` prop.\n */\n@Component({\n    tag: 'limel-example-callout-custom-icon',\n    shadow: true,\n})\nexport class CalloutCustomIconExample {\n    public render() {\n        return (\n            <limel-callout icon=\"pokemon\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla\n                et euismod nulla. Curabitur feugiat, tortor non consequat\n                finibus, justo purus auctor massa, nec semper lorem quam in\n                massa.\n            </limel-callout>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-important.tsx","fileName":"callout-important.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-important","overview":"Type: `important`","usage":{},"docs":"Type: `important`","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-important":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-important.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Type: `important`\n */\n@Component({\n    tag: 'limel-example-callout-important',\n    shadow: true,\n})\nexport class CalloutImportantExample {\n    public render() {\n        return (\n            <limel-callout type=\"important\">\n                You should read this.\n            </limel-callout>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-note.tsx","fileName":"callout-note.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-note","overview":"Type: `note`\n\nThis is the default type.","usage":{},"docs":"Type: `note`\n\nThis is the default type.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-note":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-note.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Type: `note`\n *\n * This is the default type.\n */\n@Component({\n    tag: 'limel-example-callout-note',\n    shadow: true,\n})\nexport class CalloutNoteExample {\n    public render() {\n        return (\n            <limel-callout type=\"note\">\n                You might read this, you might not.\n            </limel-callout>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-rich-content.tsx","fileName":"callout-rich-content.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-rich-content","overview":"Adding rich content\n\nSometimes, you need to display more than just a string of text.\nYou may want to display richer content with pictures, links, or\nbullet point lists; or use a more advanced component inside\nthe callout.\n\nTo do so, simply wrap the content you want to display in this component.","usage":{},"docs":"Adding rich content\n\nSometimes, you need to display more than just a string of text.\nYou may want to display richer content with pictures, links, or\nbullet point lists; or use a more advanced component inside\nthe callout.\n\nTo do so, simply wrap the content you want to display in this component.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-rich-content":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-rich-content.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Adding rich content\n *\n * Sometimes, you need to display more than just a string of text.\n * You may want to display richer content with pictures, links, or\n * bullet point lists; or use a more advanced component inside\n * the callout.\n *\n * To do so, simply wrap the content you want to display in this component.\n */\n@Component({\n    tag: 'limel-example-callout-rich-content',\n    shadow: true,\n})\nexport class CalloutRichContentExample {\n    public render() {\n        return (\n            <limel-callout>\n                <p>It's nice to be able to show you some pictures</p>\n                <img\n                    src=\"https://octodex.github.com/images/minion.png\"\n                    alt=\"The Octocat illustrated as a Minion\"\n                    style={{ width: '7rem' }}\n                />\n                <img\n                    src=\"https://octodex.github.com/images/stormtroopocat.png\"\n                    alt=\"The Octocat illustrated as a Stormtrooper\"\n                    title=\"The Stormtroopocat\"\n                    style={{ width: '7rem' }}\n                />\n                <img\n                    src=\"https://octodex.github.com/images/welcometocat.png\"\n                    alt=\"A happy Octocat with a party hat\"\n                    style={{ width: '7rem' }}\n                />\n                <p>\n                    And a link to where you find{' '}\n                    <a href=\"https://octodex.github.com/\" target=\"blank\">\n                        these nice pictures\n                    </a>{' '}\n                    😉.\n                </p>\n            </limel-callout>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-styles.tsx","fileName":"callout-styles.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-styles","overview":"Styling\n\nIt is possible to change the default colors using the provided CSS\nvariables. Just make sure to have good contrast between the text and\nbackground color, to provide good readability.","usage":{},"docs":"Styling\n\nIt is possible to change the default colors using the provided CSS\nvariables. Just make sure to have good contrast between the text and\nbackground color, to provide good readability.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-styles":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-styles.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Styling\n *\n * It is possible to change the default colors using the provided CSS\n * variables. Just make sure to have good contrast between the text and\n * background color, to provide good readability.\n */\n@Component({\n    tag: 'limel-example-callout-styles',\n    shadow: true,\n    styleUrl: 'callout-styles.scss',\n})\nexport class CalloutStylesExample {\n    public render() {\n        return [\n            <limel-callout type=\"caution\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla\n                et euismod nulla. Curabitur feugiat, tortor non consequat\n                finibus, justo purus auctor massa, nec semper lorem quam in\n                massa.\n            </limel-callout>,\n            <limel-callout type=\"note\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla\n                et euismod nulla. Curabitur feugiat, tortor non consequat\n                finibus, justo purus auctor massa, nec semper lorem quam in\n                massa.\n            </limel-callout>,\n        ];\n    }\n}\n"},{"filename":"callout-styles.scss","type":"scss","source":":host(limel-example-callout-styles) {\n    display: flex;\n    gap: 1rem;\n}\n\nlimel-callout[type='caution'] {\n    --callout-color: rgb(var(--color-pink-default));\n    --callout-text-color: rgb(var(--color-orange-lighter));\n    --callout-background-color: rgb(var(--color-pink-dark));\n}\n\nlimel-callout[type='note'] {\n    --callout-color: rgb(var(--color-cyan-default));\n    --callout-text-color: rgb(var(--color-teal-dark));\n    --callout-background-color: rgb(var(--color-teal-lighter));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-tip.tsx","fileName":"callout-tip.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-tip","overview":"Type: `tip`\n\nThis type is useful for displaying tips & tricks, and How-Tos.","usage":{},"docs":"Type: `tip`\n\nThis type is useful for displaying tips & tricks, and How-Tos.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-tip":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-tip.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Type: `tip`\n *\n * This type is useful for displaying tips & tricks, and How-Tos.\n */\n@Component({\n    tag: 'limel-example-callout-tip',\n    shadow: true,\n})\nexport class CalloutTipExample {\n    public render() {\n        return <limel-callout type=\"tip\">You want to read this.</limel-callout>;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-warning.tsx","fileName":"callout-warning.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-callout-warning","overview":"Type: `warning`","usage":{},"docs":"Type: `warning`","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-callout-warning":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-warning.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Type: `warning`\n */\n@Component({\n    tag: 'limel-example-callout-warning',\n    shadow: true,\n})\nexport class CalloutWarningExample {\n    public render() {\n        return (\n            <limel-callout type=\"warning\">You need to read this.</limel-callout>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-actions.tsx","fileName":"card-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-actions","overview":"Card with actions\nAn array of actions can be provided to the card, to allow the user to interact with the content.\n\n:::note\nEven though cards allow displaying multiple actions,\nuse this possibility sparingly, and remember that these UI elements are\nmeant to be entry points to other contexts,\nin which detailed information is displayed, and more complex actions\nare possible to do.\n:::","usage":{},"docs":"Card with actions\nAn array of actions can be provided to the card, to allow the user to interact with the content.\n\n:::note\nEven though cards allow displaying multiple actions,\nuse this possibility sparingly, and remember that these UI elements are\nmeant to be entry points to other contexts,\nin which detailed information is displayed, and more complex actions\nare possible to do.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-card"],"dependencyGraph":{"limel-example-card-actions":["limel-card"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-actions.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n/**\n * Card with actions\n * An array of actions can be provided to the card, to allow the user to interact with the content.\n *\n * :::note\n * Even though cards allow displaying multiple actions,\n * use this possibility sparingly, and remember that these UI elements are\n * meant to be entry points to other contexts,\n * in which detailed information is displayed, and more complex actions\n * are possible to do.\n * :::\n */\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-card-actions',\n    styleUrl: 'card-basic.scss',\n})\nexport class CardActionsExample {\n    @State()\n    private actions: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Learn more',\n        },\n        {\n            text: 'Get tickets',\n            icon: {\n                name: 'two_tickets',\n                color: 'rgb(var(--color-blue-default))',\n            },\n        },\n    ];\n\n    public render() {\n        const image = {\n            src: 'https://images.unsplash.com/photo-1515017804404-92b19fdfe6ac?q=80&w=2525&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n            alt: 'A bird-eye view picture of a tennis court with a net in the middle.',\n        };\n\n        return (\n            <limel-card\n                image={image}\n                heading=\"Tennis Tournament Announcement!\"\n                subheading=\"Get ready to showcase your skills or cheer for your favorites! 🏆\"\n                value=\"Join us for the Grand Slam Challenge, happening 12 of March, 2025 at Vikingahallen, Lund.\"\n                actions={this.actions}\n                onActionSelected={this.handleSelected}\n            />\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<ActionBarItem>) => {\n        event.stopPropagation();\n        console.log(event.detail);\n    };\n}\n"},{"filename":"card-basic.scss","type":"scss","source":"@import './card-resizable-container';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-basic.tsx","fileName":"card-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-basic","overview":"Basic example\nCards can be used to show some information in a static manner,\nfor instance when displaying a grid of cards, each of which is\nproviding a brief summary of a topic.\n\nHowever, the most common use cases of these UI components is to\nprovide a media-rich and interactive experience to the user,\nwhich you can see in next examples.","usage":{},"docs":"Basic example\nCards can be used to show some information in a static manner,\nfor instance when displaying a grid of cards, each of which is\nproviding a brief summary of a topic.\n\nHowever, the most common use cases of these UI components is to\nprovide a media-rich and interactive experience to the user,\nwhich you can see in next examples.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-card"],"dependencyGraph":{"limel-example-card-basic":["limel-card"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Basic example\n * Cards can be used to show some information in a static manner,\n * for instance when displaying a grid of cards, each of which is\n * providing a brief summary of a topic.\n *\n * However, the most common use cases of these UI components is to\n * provide a media-rich and interactive experience to the user,\n * which you can see in next examples.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-card-basic',\n    styleUrl: 'card-basic.scss',\n})\nexport class CardBasicsExample {\n    public render() {\n        const icon = {\n            name: '-lime-logo-elements',\n            title: 'Logo of Lime Elements',\n        };\n\n        return (\n            <limel-card\n                icon={icon}\n                heading=\"Lime Elements\"\n                subheading=\"World's best component library\"\n                value=\"Enterprise class design system, written in typescript, empowering developers & designers to build _modern_ and _flexible_ web applications.\"\n            />\n        );\n    }\n}\n"},{"filename":"card-basic.scss","type":"scss","source":"@import './card-resizable-container';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-clickable.tsx","fileName":"card-clickable.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-clickable","overview":"Clickable example\nSometimes you want to make the entire surface of the card to be clickable,\nfor example to navigate the user to another page or show more information.\n\nFor such scenarios, make sure to set the `clickable` property to `true`.\nThis will alter the visual style to properly communicate hover effects and cursor styles to the card.\n\n:::important\nIt might not be a good idea to combine clickable cards with actions, as it can confuse the user.\n:::","usage":{},"docs":"Clickable example\nSometimes you want to make the entire surface of the card to be clickable,\nfor example to navigate the user to another page or show more information.\n\nFor such scenarios, make sure to set the `clickable` property to `true`.\nThis will alter the visual style to properly communicate hover effects and cursor styles to the card.\n\n:::important\nIt might not be a good idea to combine clickable cards with actions, as it can confuse the user.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-card"],"dependencyGraph":{"limel-example-card-clickable":["limel-card"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-clickable.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Clickable example\n * Sometimes you want to make the entire surface of the card to be clickable,\n * for example to navigate the user to another page or show more information.\n *\n * For such scenarios, make sure to set the `clickable` property to `true`.\n * This will alter the visual style to properly communicate hover effects and cursor styles to the card.\n *\n * :::important\n * It might not be a good idea to combine clickable cards with actions, as it can confuse the user.\n * :::\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-card-clickable',\n    styleUrl: 'card-basic.scss',\n})\nexport class CardClickableExample {\n    public render() {\n        const image = {\n            src: 'https://images.unsplash.com/photo-1494232410401-ad00d5433cfa?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n            alt: 'A picture of an old cassette tape',\n            loading: 'lazy' as const,\n        };\n\n        return (\n            <limel-card\n                clickable={true}\n                image={image}\n                heading=\"Unleashing the Power of Lime Elements\"\n                subheading=\"Lime Design Podcast\"\n                value=\"Listen now…\"\n                onClick={this.handleClick}\n            />\n        );\n    }\n\n    private handleClick = () => {\n        console.log('Card clicked');\n    };\n}\n"},{"filename":"card-basic.scss","type":"scss","source":"@import './card-resizable-container';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-image.tsx","fileName":"card-image.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-image","overview":"Featuring a hero image\nThe content of the cards should be organized to allow users to\neasily scan and quickly find relevant and actionable information.\nThis is especially important because cards are often used in a grid layout,\nin which many cards are usually present.\n\nElements like text and images should clearly indicate information hierarchy.\n\n:::note\n- The height and aspect ratio of the image affects the layout of the card.\n- Remember to provide a meaningful alt text, to improve accessibility\n:::","usage":{},"docs":"Featuring a hero image\nThe content of the cards should be organized to allow users to\neasily scan and quickly find relevant and actionable information.\nThis is especially important because cards are often used in a grid layout,\nin which many cards are usually present.\n\nElements like text and images should clearly indicate information hierarchy.\n\n:::note\n- The height and aspect ratio of the image affects the layout of the card.\n- Remember to provide a meaningful alt text, to improve accessibility\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-card"],"dependencyGraph":{"limel-example-card-image":["limel-card"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-image.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Featuring a hero image\n * The content of the cards should be organized to allow users to\n * easily scan and quickly find relevant and actionable information.\n * This is especially important because cards are often used in a grid layout,\n * in which many cards are usually present.\n *\n * Elements like text and images should clearly indicate information hierarchy.\n *\n * :::note\n * - The height and aspect ratio of the image affects the layout of the card.\n * - Remember to provide a meaningful alt text, to improve accessibility\n * :::\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-card-image',\n    styleUrl: 'card-basic.scss',\n})\nexport class CardImageExample {\n    public render() {\n        const image = {\n            src: 'https://unsplash.it/800/800/?random',\n            alt: 'Remember to provide a meaningful alt text, to improve accessibility',\n            loading: 'lazy' as const,\n        };\n\n        return (\n            <limel-card\n                image={image}\n                heading=\"Heading\"\n                subheading=\"Subheading\"\n                value=\"This is the body of the card. It can contain a lot of text, or just a little. It can also contain markdown, like **bold** or *italic* text.\"\n            />\n        );\n    }\n}\n"},{"filename":"card-basic.scss","type":"scss","source":"@import './card-resizable-container';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-nested-component.tsx","fileName":"card-nested-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-nested-component","overview":"Made just to showcase a feature in a docs example for `limel-card`.","usage":{},"docs":"Made just to showcase a feature in a docs example for `limel-card`.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-example-card-slot","limel-example-card-styling"],"dependencies":["limel-slider","limel-action-bar"],"dependencyGraph":{"limel-example-card-nested-component":["limel-slider","limel-action-bar"],"limel-slider":["limel-helper-line"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-card-slot":["limel-example-card-nested-component"],"limel-example-card-styling":["limel-example-card-nested-component"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-nested-component.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ActionBarItem, ListSeparator } from '@limetech/lime-elements';\n/**\n * Made just to showcase a feature in a docs example for `limel-card`.\n * @private\n */\n@Component({\n    tag: 'limel-example-card-nested-component',\n    shadow: true,\n    styleUrl: 'card-nested-component.scss',\n})\nexport class CardNestedComponentExample {\n    @State()\n    private actionBarItems: Array<ActionBarItem | ListSeparator> = [\n        {\n            text: 'Previous',\n            icon: '-lime-filter-previous',\n            iconOnly: true,\n        },\n        {\n            text: 'Play',\n            icon: 'play',\n            iconOnly: true,\n        },\n        {\n            text: 'Next',\n            icon: '-lime-filter-next',\n            iconOnly: true,\n        },\n        { separator: true },\n        {\n            text: 'Repeat',\n            icon: 'repeat_one',\n            iconOnly: true,\n        },\n        {\n            text: 'Shuffle',\n            icon: 'shuffle',\n            iconOnly: true,\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-slider value={34} valuemax={128} />,\n            <limel-action-bar\n                accessibleLabel=\"Toolbar\"\n                actions={this.actionBarItems}\n            />,\n        ];\n    }\n}\n"},{"filename":"card-nested-component.scss","type":"scss","source":":host(limel-example-card-nested-component) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 0 1rem;\n}\n\nlimel-slider {\n    width: 100%;\n}\n\nlimel-action-bar {\n    --action-bar-background-color: transparent;\n}\n\n:host(limel-example-card-nested-component.on-pink-background) {\n    --lime-primary-color: rgb(var(--color-purple-default));\n\n    limel-action-bar {\n        --action-bar-item-text-color: rgb(var(--color-white));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-orientation.tsx","fileName":"card-orientation.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-orientation","overview":"Using the `orientation` prop\nThe `orientation` prop can be used to change the layout of the card,\nand is specially useful when the card is displaying images.\n\nBy default, the card has a `portrait` orientation, which will render the\nimage on top of the content, filling the entire width of the card.\nHowever, when it is changed to `landscape`, the image will be displayed\nto the left of the content, filling the entire height of the card,\nand maximum width of 40% of the card.","usage":{},"docs":"Using the `orientation` prop\nThe `orientation` prop can be used to change the layout of the card,\nand is specially useful when the card is displaying images.\n\nBy default, the card has a `portrait` orientation, which will render the\nimage on top of the content, filling the entire width of the card.\nHowever, when it is changed to `landscape`, the image will be displayed\nto the left of the content, filling the entire height of the card,\nand maximum width of 40% of the card.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-card"],"dependencyGraph":{"limel-example-card-orientation":["limel-card"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-orientation.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Using the `orientation` prop\n * The `orientation` prop can be used to change the layout of the card,\n * and is specially useful when the card is displaying images.\n *\n * By default, the card has a `portrait` orientation, which will render the\n * image on top of the content, filling the entire width of the card.\n * However, when it is changed to `landscape`, the image will be displayed\n * to the left of the content, filling the entire height of the card,\n * and maximum width of 40% of the card.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-card-orientation',\n    styleUrl: 'card-basic.scss',\n})\nexport class CardOrientationExample {\n    public render() {\n        const image = {\n            src: 'https://images.unsplash.com/photo-1484755560615-a4c64e778a6c?q=80&w=2778&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n            alt: 'A picture of a girl, listening to music with headphones',\n            loading: 'lazy' as const,\n        };\n\n        return (\n            <limel-card\n                orientation=\"landscape\"\n                image={image}\n                heading=\"Your Daily Mix\"\n                subheading=\"16 TRACKS\"\n                value=\"Listen now…\"\n            />\n        );\n    }\n}\n"},{"filename":"card-basic.scss","type":"scss","source":"@import './card-resizable-container';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-slot.tsx","fileName":"card-slot.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-slot","overview":"Nesting a component in the card\nYou can nest any component inside the card, to provide a more complex\nand interactive experience to the user.","usage":{},"docs":"Nesting a component in the card\nYou can nest any component inside the card, to provide a more complex\nand interactive experience to the user.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-card","limel-example-card-nested-component"],"dependencyGraph":{"limel-example-card-slot":["limel-card","limel-example-card-nested-component"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-card-nested-component":["limel-slider","limel-action-bar"],"limel-slider":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-slot.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Nesting a component in the card\n * You can nest any component inside the card, to provide a more complex\n * and interactive experience to the user.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-card-slot',\n    styleUrl: 'card-basic.scss',\n})\nexport class CardSlotExample {\n    public render() {\n        const image = {\n            src: 'https://images.unsplash.com/photo-1484755560615-a4c64e778a6c?q=80&w=2778&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n            alt: 'A picture of a girl, listening to music with headphones',\n            loading: 'lazy' as const,\n        };\n\n        return (\n            <limel-card\n                orientation=\"landscape\"\n                image={image}\n                heading=\"Your Daily Mix\"\n                subheading=\"7 / 16\"\n                value=\"Playing: **Walk the Lime**\"\n            >\n                <limel-example-card-nested-component slot=\"component\" />\n            </limel-card>\n        );\n    }\n}\n"},{"filename":"card-basic.scss","type":"scss","source":"@import './card-resizable-container';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples","filePath":"./src/components/card/examples/card-styling.tsx","fileName":"card-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/card/examples/usage","tag":"limel-example-card-styling","overview":"Styling\nThe component offers a few styling options in form of custom CSS variables,\nto make it fit better in different contexts.","usage":{},"docs":"Styling\nThe component offers a few styling options in form of custom CSS variables,\nto make it fit better in different contexts.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-card","limel-example-card-nested-component"],"dependencyGraph":{"limel-example-card-styling":["limel-card","limel-example-card-nested-component"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-card-nested-component":["limel-slider","limel-action-bar"],"limel-slider":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"card-styling.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Styling\n * The component offers a few styling options in form of custom CSS variables,\n * to make it fit better in different contexts.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-card-styling',\n    styleUrl: 'card-styling.scss',\n})\nexport class CardStylingExample {\n    public render() {\n        const image = {\n            src: 'https://images.unsplash.com/photo-1484755560615-a4c64e778a6c?q=80&w=2778&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\n            alt: 'A picture of a girl, listening to music with headphones',\n            loading: 'lazy' as const,\n        };\n\n        return (\n            <limel-card\n                orientation=\"landscape\"\n                image={image}\n                heading=\"Your Daily Mix\"\n                subheading=\"7 / 16\"\n                value=\"Playing: **Walk the Lime**\"\n            >\n                <limel-example-card-nested-component\n                    slot=\"component\"\n                    class=\"on-pink-background\"\n                />\n            </limel-card>\n        );\n    }\n}\n"},{"filename":"card-styling.scss","type":"scss","source":"@import './card-resizable-container';\n\nlimel-card {\n    --card-border-radius: 1.25rem;\n    --card-background-color: rgb(var(--color-pink-light));\n    --card-heading-color: rgb(var(--color-yellow-default));\n    --card-subheading-color: rgb(var(--color-yellow-lighter));\n\n    color: rgb(\n        var(--color-pink-lighter)\n    ); //overrides the default body text color\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-accessibility.tsx","fileName":"chart-accessibility.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-accessibility","overview":"Accessibility\nUnder the hoods, our charts are simply HTML tables.\nThis helps screen readers to interpret the data and present it to their users.\nHowever, to make this semantic more accessible and more understandable,\nthere are some optional props that we highly recommend you to use.\n\n- `accessibleLabel`: Will be used as a `caption` for the table, and\ndescribes what the chart is about. Depending on the context,\nIt might also be a good idea to include the accessible label for sighted\nusers as well, for instance, as a heading.\n- `accessibleItemsLabel`: Will be used as a `th` for the first column of the table,\ndescribing what all items in this column have in common. In this example,\nall items are cities.\n\nNote that these props won't be visually rendered for sighted users, but\nthey will be presented to assistive technologies, such as screen readers\nas well as search engines.\n\nAnother way to improve the accessibility of the chart is to use\nthe `prefix` and `suffix` props to provide additional context to the `value`\nof each item.\n\n##### Using the `loading` prop\nSometimes the data set needs to be calculated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow a spinner, indicating the data is being updated. This not only improves\nthe user experience, but also the accessibility of the chart both for sighted users,\nand behind the scenes, for users of assistive technologies.","usage":{},"docs":"Accessibility\nUnder the hoods, our charts are simply HTML tables.\nThis helps screen readers to interpret the data and present it to their users.\nHowever, to make this semantic more accessible and more understandable,\nthere are some optional props that we highly recommend you to use.\n\n- `accessibleLabel`: Will be used as a `caption` for the table, and\ndescribes what the chart is about. Depending on the context,\nIt might also be a good idea to include the accessible label for sighted\nusers as well, for instance, as a heading.\n- `accessibleItemsLabel`: Will be used as a `th` for the first column of the table,\ndescribing what all items in this column have in common. In this example,\nall items are cities.\n\nNote that these props won't be visually rendered for sighted users, but\nthey will be presented to assistive technologies, such as screen readers\nas well as search engines.\n\nAnother way to improve the accessibility of the chart is to use\nthe `prefix` and `suffix` props to provide additional context to the `value`\nof each item.\n\n##### Using the `loading` prop\nSometimes the data set needs to be calculated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow a spinner, indicating the data is being updated. This not only improves\nthe user experience, but also the accessibility of the chart both for sighted users,\nand behind the scenes, for users of assistive technologies.","docsTags":[{"name":"sourceFile","text":"chart-items-gantt-negative-values.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-chart","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chart-accessibility":["limel-header","limel-chart","limel-example-controls","limel-checkbox"],"limel-header":["limel-icon"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-accessibility.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { chartItems } from './chart-items-multi-axis-negative-start-values';\n\n/**\n * Accessibility\n * Under the hoods, our charts are simply HTML tables.\n * This helps screen readers to interpret the data and present it to their users.\n * However, to make this semantic more accessible and more understandable,\n * there are some optional props that we highly recommend you to use.\n *\n * - `accessibleLabel`: Will be used as a `caption` for the table, and\n * describes what the chart is about. Depending on the context,\n * It might also be a good idea to include the accessible label for sighted\n * users as well, for instance, as a heading.\n * - `accessibleItemsLabel`: Will be used as a `th` for the first column of the table,\n * describing what all items in this column have in common. In this example,\n * all items are cities.\n *\n * Note that these props won't be visually rendered for sighted users, but\n * they will be presented to assistive technologies, such as screen readers\n * as well as search engines.\n *\n * Another way to improve the accessibility of the chart is to use\n * the `prefix` and `suffix` props to provide additional context to the `value`\n * of each item.\n *\n * ##### Using the `loading` prop\n * Sometimes the data set needs to be calculated, or fetched\n * through a process that requires some time. In such cases, it is\n * a great idea to let the users know that the data is being updated.\n *\n * To do so, set the `loading` property to `true`. The component will then\n * show a spinner, indicating the data is being updated. This not only improves\n * the user experience, but also the accessibility of the chart both for sighted users,\n * and behind the scenes, for users of assistive technologies.\n *\n * @sourceFile chart-items-gantt-negative-values.ts\n */\n@Component({\n    tag: 'limel-example-chart-accessibility',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartAccessibilityExample {\n    @State()\n    public loading = false;\n\n    public render() {\n        const heading = 'Temperature fluctuations past 24 hours';\n        const subHeading = 'in cities we have our offices';\n\n        return (\n            <Host class=\"large\">\n                <limel-header\n                    heading={heading}\n                    subheading={subHeading}\n                    icon=\"temperature_sensitive\"\n                />\n                <limel-chart\n                    type=\"bar\"\n                    items={chartItems}\n                    orientation=\"landscape\"\n                    accessibleLabel={`${heading} - ${subHeading}`}\n                    accessibleItemsLabel=\"City\"\n                    loading={this.loading}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        label=\"Loading\"\n                        checked={this.loading}\n                        onChange={this.setLoading}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private setLoading = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.loading = event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-gantt-negative-values.ts","type":"ts","source":"File chart-items-gantt-negative-values.ts not found"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-axis-increment.tsx","fileName":"chart-axis-increment.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-axis-increment","overview":"Using the `axisIncrement` prop\nThe `axisIncrement` prop specifies the incremental\nvalues of the axis lines. By default the component tries to\nsmartly calculate a proper axis increment, to render meaningful\naxis lines, based on the maximum value provided in the dataset.\n\nHowever, you can set the `axisIncrement` to a\ndifferent custom value if needed.","usage":{},"docs":"Using the `axisIncrement` prop\nThe `axisIncrement` prop specifies the incremental\nvalues of the axis lines. By default the component tries to\nsmartly calculate a proper axis increment, to render meaningful\naxis lines, based on the maximum value provided in the dataset.\n\nHowever, you can set the `axisIncrement` to a\ndifferent custom value if needed.","docsTags":[{"name":"sourceFile","text":"chart-items-with-negative-values.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"dependencyGraph":{"limel-example-chart-axis-increment":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-axis-increment.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-with-negative-values';\n\n/**\n * Using the `axisIncrement` prop\n * The `axisIncrement` prop specifies the incremental\n * values of the axis lines. By default the component tries to\n * smartly calculate a proper axis increment, to render meaningful\n * axis lines, based on the maximum value provided in the dataset.\n *\n * However, you can set the `axisIncrement` to a\n * different custom value if needed.\n *\n * @sourceFile chart-items-with-negative-values.ts\n */\n@Component({\n    tag: 'limel-example-chart-axis-increment',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartAxisIncrementExample {\n    @State()\n    private axisIncrement = 5;\n\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    public render() {\n        const defaultAxisIncrement = `${this.axisIncrement}`;\n\n        return (\n            <Host class=\"large\">\n                <h4>Subscriptions per month</h4>\n                <limel-chart\n                    type=\"bar\"\n                    items={chartItems}\n                    orientation={this.orientation}\n                    axisIncrement={this.axisIncrement}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-input-field\n                        type=\"number\"\n                        min={1}\n                        max={20}\n                        helperText=\"Try a value between 1 and 20\"\n                        label=\"axisIncrement\"\n                        value={defaultAxisIncrement}\n                        onChange={this.handleAxisIncrementChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private handleAxisIncrementChange = (event) => {\n        this.axisIncrement = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-with-negative-values.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'New York',\n        value: 11.5,\n        color: 'rgb(var(--color-yellow-dark))',\n        formattedValue: '11.5°',\n    },\n    {\n        text: 'Kiruna',\n        value: -15,\n        color: 'rgb(var(--color-sky-lighter))',\n        formattedValue: '-15°',\n    },\n    {\n        text: 'Dubai',\n        value: 38,\n        color: 'rgb(var(--color-red-default))',\n        formattedValue: '38°',\n    },\n    {\n        text: 'Sydney',\n        value: 23.5,\n        color: 'rgb(var(--color-orange-default))',\n        formattedValue: '23.5°',\n    },\n    {\n        text: 'Reykjavik',\n        value: 0,\n        color: 'rgb(var(--color-sky-default))',\n        formattedValue: '0°',\n    },\n    {\n        text: 'Helsinki',\n        value: -7,\n        color: 'rgb(var(--color-sky-light))',\n        formattedValue: '-7°',\n    },\n    {\n        text: 'Buenos Aires',\n        value: 22,\n        color: 'rgb(var(--color-orange-light))',\n        formattedValue: '22°',\n    },\n    {\n        text: 'Tokyo',\n        value: 14,\n        color: 'rgb(var(--color-orange-lighter))',\n        formattedValue: '14°',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-clickable-items.tsx","fileName":"chart-clickable-items.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-clickable-items","overview":"With clickable items\n\nWhen `clickable` is set to `true`, the item will become interactive.\n\nThis provides visual and accessible feedback when the hovered, or focused,\nand also results in emitting an event when clicked.\n\n:::note\nItems in Doughnut and Pie charts support `clickable` property as well.\n\nHowever—due to technical reasons—, the only way to interact with their items\nis using the keyboard (by tabbing on them and pressing the <kbd>Enter</kbd> or\n<kbd>Space</kbd> keys.\n:::","usage":{},"docs":"With clickable items\n\nWhen `clickable` is set to `true`, the item will become interactive.\n\nThis provides visual and accessible feedback when the hovered, or focused,\nand also results in emitting an event when clicked.\n\n:::note\nItems in Doughnut and Pie charts support `clickable` property as well.\n\nHowever—due to technical reasons—, the only way to interact with their items\nis using the keyboard (by tabbing on them and pressing the <kbd>Enter</kbd> or\n<kbd>Space</kbd> keys.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-clickable.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-value"],"dependencyGraph":{"limel-example-chart-clickable-items":["limel-chart","limel-example-value"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-clickable-items.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { chartItems } from './chart-items-clickable';\nimport { ChartItem } from '@limetech/lime-elements';\n\n/**\n * With clickable items\n *\n * When `clickable` is set to `true`, the item will become interactive.\n *\n * This provides visual and accessible feedback when the hovered, or focused,\n * and also results in emitting an event when clicked.\n *\n * :::note\n * Items in Doughnut and Pie charts support `clickable` property as well.\n *\n * However—due to technical reasons—, the only way to interact with their items\n * is using the keyboard (by tabbing on them and pressing the <kbd>Enter</kbd> or\n * <kbd>Space</kbd> keys.\n * :::\n *\n * @sourceFile chart-items-clickable.ts\n */\n@Component({\n    tag: 'limel-example-chart-clickable-items',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartClickableItemsExample {\n    @State()\n    private lastInteractedWith: ChartItem;\n\n    public render() {\n        return (\n            <Host>\n                <limel-chart\n                    items={chartItems}\n                    maxValue={128}\n                    onInteract={this.handleInteract}\n                />\n                <limel-example-value\n                    label=\"Clicked item\"\n                    value={this.lastInteractedWith}\n                />\n            </Host>\n        );\n    }\n\n    private readonly handleInteract = (event: CustomEvent<ChartItem>) => {\n        event.stopPropagation();\n        this.lastInteractedWith = event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-clickable.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Applications',\n        value: 40,\n        formattedValue: '40 gb',\n        color: 'rgb(var(--color-brown-dark))',\n        clickable: true,\n    },\n    {\n        text: 'Application cache',\n        value: 18,\n        formattedValue: '18 gb',\n        color: 'rgb(var(--color-brown-default))',\n        clickable: true,\n    },\n    {\n        text: 'Temporary files',\n        value: 23,\n        formattedValue: '23 gb',\n        color: 'rgb(var(--color-cyan-default))',\n        clickable: true,\n    },\n    {\n        text: 'OS data',\n        value: 16,\n        formattedValue: '16 gb',\n        color: 'rgb(var(--color-yellow-default))',\n        clickable: true,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-creative-styling.tsx","fileName":"chart-creative-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-creative-styling","overview":"Creative styling\n\nBehind the scenes for some chart types,\nthe `color` property of the `item` is used as a `background` style,\nnot a `background-color` style.\nThis, together with some CSS knowledge can empower some creative visualizations;\nspecially when a solid color is not enough to communicate a certain meaning.\nHere are some examples for inspiration.","usage":{},"docs":"Creative styling\n\nBehind the scenes for some chart types,\nthe `color` property of the `item` is used as a `background` style,\nnot a `background-color` style.\nThis, together with some CSS knowledge can empower some creative visualizations;\nspecially when a solid color is not enough to communicate a certain meaning.\nHere are some examples for inspiration.","docsTags":[{"name":"sourceFile","text":"chart-items-creative-styling.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart"],"dependencyGraph":{"limel-example-chart-creative-styling":["limel-chart"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-creative-styling.tsx","type":"tsx","source":"import { Component, h, Host } from '@stencil/core';\nimport {\n    stackedBarChartItems,\n    ganttChartItems,\n    areaChartItems,\n} from './chart-items-creative-styling';\n\n/**\n * Creative styling\n *\n * Behind the scenes for some chart types,\n * the `color` property of the `item` is used as a `background` style,\n * not a `background-color` style.\n * This, together with some CSS knowledge can empower some creative visualizations;\n * specially when a solid color is not enough to communicate a certain meaning.\n * Here are some examples for inspiration.\n *\n * @sourceFile chart-items-creative-styling.ts\n */\n@Component({\n    tag: 'limel-example-chart-creative-styling',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeCreativeStylingExample {\n    public render() {\n        return (\n            <Host class=\"tall creative-styling\">\n                <limel-chart type=\"stacked-bar\" items={stackedBarChartItems} />\n                <limel-chart type=\"bar\" items={ganttChartItems} />\n                <limel-chart type=\"area\" items={areaChartItems} />\n            </Host>\n        );\n    }\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-creative-styling.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\nexport const stackedBarChartItems: ChartItem[] = [\n    {\n        text: 'Applications',\n        value: 40,\n        formattedValue: '40 gb',\n        color: 'rgb(var(--color-coral-default))',\n    },\n    {\n        text: 'Application cache',\n        value: 18,\n        formattedValue: '18 gb',\n        color: \"rgb(var(--color-coral-default)) url(\\\"data:image/svg+xml;charset=utf-8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='10' viewBox='0 0 8 8'><defs><pattern id='diagonalHatch' patternUnits='userSpaceOnUse' width='7' height='4' patternTransform='rotate(-60)'><path d='M-1,2 l6,0' stroke='rgba(255,255,255,0.4)' stroke-width='1'/></pattern></defs><rect width='8' height='8' fill='url(%23diagonalHatch)'/></svg>\\\")\",\n    },\n    {\n        text: 'Temporary files',\n        value: 23,\n        formattedValue: '23 gb',\n        color: 'rgb(var(--color-cyan-default))',\n    },\n    {\n        text: 'OS data',\n        value: 16,\n        formattedValue: '16 gb',\n        color: 'rgb(var(--color-blue-default))',\n    },\n];\n\nexport const ganttChartItems: Array<ChartItem<[number, number]>> = [\n    {\n        text: 'Week 1',\n        formattedValue: '-7% — 10%',\n        value: [-7, 10],\n        color: 'rgb(var(--color-blue-default))',\n    },\n    {\n        text: 'Week 2',\n        formattedValue: '4% — 32%',\n        value: [4, 32],\n        color: \"rgb(var(--color-orange-light)) url(\\\"data:image/svg+xml;charset=utf-8,<svg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'><circle cx='2' cy='2' r='1' fill='rgba(255,255,255,0.3)' /><circle cx='6' cy='2' r='1' fill='rgba(255,255,255,0.3)' /><circle cx='2' cy='6' r='1' fill='rgba(255,255,255,0.3)' /><circle cx='6' cy='6' r='1' fill='rgba(255,255,255,0.3)' /></svg>\\\")\",\n    },\n    {\n        text: 'Week 3',\n        formattedValue: '14% — 44%',\n        value: [14, 44],\n        color: \"rgb(var(--color-cyan-default)) url(\\\"data:image/svg+xml;charset=utf-8,<svg xmlns='http://www.w3.org/2000/svg'  width='8' height='8' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(0,0,0,0.1)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\\\")\",\n    },\n];\n\nexport const areaChartItems: ChartItem[] = [\n    {\n        text: '10 to 20',\n        value: 6,\n        color: 'linear-gradient(0deg, rgb(var(--color-cyan-default)) 0%, rgb(var(--color-red-default)) 80%)',\n    },\n    {\n        text: '20 to 30',\n        value: 12,\n        color: 'linear-gradient(0deg, rgb(var(--color-cyan-default)) 0%, rgb(var(--color-red-default)) 80%)',\n    },\n    {\n        text: '30 to 40',\n        value: 18,\n        color: 'linear-gradient(0deg, rgb(var(--color-cyan-default)) 0%, rgb(var(--color-red-default)) 80%)',\n    },\n    {\n        text: '40 to 50',\n        value: 23,\n        color: 'linear-gradient(0deg, rgb(var(--color-cyan-default)) 0%, rgb(var(--color-red-default)) 80%)',\n    },\n    {\n        text: '50 to 60',\n        value: 30,\n        color: 'linear-gradient(0deg, rgb(var(--color-cyan-default)) 0%, rgb(var(--color-red-default)) 80%)',\n    },\n    {\n        text: '60 to 70',\n        value: 18,\n        color: 'linear-gradient(0deg, rgb(var(--color-cyan-default)) 0%, rgb(var(--color-red-default)) 80%)',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-max-value.tsx","fileName":"chart-max-value.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-max-value","overview":"Using the `maxValue` prop\n\nThe `maxValue` prop defines the upper limit of the visual range for the chart.\nIt determines the maximum value represented on the axis and is used to\ncalculate the size of each item in the chart relative to this value.\n\nFor example, if `maxValue` is set to `100`, an item with a value of `10`\nwill occupy 10% of the chart, while an item with a value of `50` will occupy 50%.\nIf `maxValue` is set to `200`, an item with a value of `50` will occupy 25% of the chart.\n\nIf `maxValue` is not provided, the chart will calculate the maximum value based on\nthe actual data points, and the size of each item will be calculated relative to\nthe total range of the data.\n\n:::note\nThe `maxValue` only affects the upper limit of the chart's range.\nThe chart will always start from the smallest value present in the dataset,\nwhich could be a negative number.\n:::","usage":{},"docs":"Using the `maxValue` prop\n\nThe `maxValue` prop defines the upper limit of the visual range for the chart.\nIt determines the maximum value represented on the axis and is used to\ncalculate the size of each item in the chart relative to this value.\n\nFor example, if `maxValue` is set to `100`, an item with a value of `10`\nwill occupy 10% of the chart, while an item with a value of `50` will occupy 50%.\nIf `maxValue` is set to `200`, an item with a value of `50` will occupy 25% of the chart.\n\nIf `maxValue` is not provided, the chart will calculate the maximum value based on\nthe actual data points, and the size of each item will be calculated relative to\nthe total range of the data.\n\n:::note\nThe `maxValue` only affects the upper limit of the chart's range.\nThe chart will always start from the smallest value present in the dataset,\nwhich could be a negative number.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-stack.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart"],"dependencyGraph":{"limel-example-chart-max-value":["limel-chart"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-max-value.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { chartItems } from './chart-items-stack';\n\n/**\n * Using the `maxValue` prop\n *\n * The `maxValue` prop defines the upper limit of the visual range for the chart.\n * It determines the maximum value represented on the axis and is used to\n * calculate the size of each item in the chart relative to this value.\n *\n * For example, if `maxValue` is set to `100`, an item with a value of `10`\n * will occupy 10% of the chart, while an item with a value of `50` will occupy 50%.\n * If `maxValue` is set to `200`, an item with a value of `50` will occupy 25% of the chart.\n *\n * If `maxValue` is not provided, the chart will calculate the maximum value based on\n * the actual data points, and the size of each item will be calculated relative to\n * the total range of the data.\n *\n * :::note\n * The `maxValue` only affects the upper limit of the chart's range.\n * The chart will always start from the smallest value present in the dataset,\n * which could be a negative number.\n * :::\n *\n * @sourceFile chart-items-stack.ts\n */\n@Component({\n    tag: 'limel-example-chart-max-value',\n    shadow: true,\n})\nexport class ChartMaxValueExample {\n    public render() {\n        return <limel-chart items={chartItems} maxValue={512} />;\n    }\n}\n"},{"filename":"chart-items-stack.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Applications',\n        value: 10,\n        formattedValue: '10 gb',\n        color: 'rgb(var(--color-red-default))',\n    },\n    {\n        text: 'Photos',\n        value: 52,\n        formattedValue: '52 gb',\n        color: 'rgb(var(--color-magenta-default))',\n    },\n    {\n        text: 'Messages',\n        value: 48,\n        formattedValue: '48 gb',\n        color: 'rgb(var(--color-violet-default))',\n    },\n    {\n        text: 'Podcasts',\n        value: 11,\n        formattedValue: '11 gb',\n        color: 'rgb(var(--color-blue-default))',\n    },\n    {\n        text: 'Mail',\n        value: 25,\n        formattedValue: '25 gb',\n        color: 'rgb(var(--color-cyan-default))',\n    },\n    {\n        text: 'Videos',\n        value: 80,\n        formattedValue: '80 gb',\n        color: 'rgb(var(--color-green-default))',\n    },\n    {\n        text: 'OS',\n        value: 30,\n        formattedValue: '30 gb',\n        color: 'rgb(var(--color-glaucous-default))',\n    },\n    {\n        text: 'System data',\n        value: 13,\n        formattedValue: '13 gb',\n        color: 'rgb(var(--color-glaucous-dark))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-multi-axis.tsx","fileName":"chart-multi-axis.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-multi-axis","overview":"Multi-axis Charts\nNormally, charts visualize items in a positive range.\nHowever, there are cases where you want to visualize items that have both\npositive and negative `value`s.","usage":{},"docs":"Multi-axis Charts\nNormally, charts visualize items in a positive range.\nHowever, there are cases where you want to visualize items that have both\npositive and negative `value`s.","docsTags":[{"name":"sourceFile","text":"chart-items-with-negative-values.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select"],"dependencyGraph":{"limel-example-chart-multi-axis":["limel-chart","limel-example-controls","limel-select"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-multi-axis.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-with-negative-values';\n\n/**\n * Multi-axis Charts\n * Normally, charts visualize items in a positive range.\n * However, there are cases where you want to visualize items that have both\n * positive and negative `value`s.\n *\n * @sourceFile chart-items-with-negative-values.ts\n */\n@Component({\n    tag: 'limel-example-chart-multi-axis',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeMultiAxisExample {\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    @State()\n    private type: 'bar' | 'dot' | 'line' = 'dot';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    private types: Option[] = [\n        { text: 'Bar', value: 'bar' },\n        { text: 'Dot', value: 'dot' },\n        { text: 'Line', value: 'line' },\n    ];\n\n    public render() {\n        return (\n            <Host class=\"large\">\n                <h4>Temperature right now</h4>\n                <limel-chart\n                    type={this.type}\n                    items={chartItems}\n                    orientation={this.orientation}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-select\n                        label=\"type\"\n                        value={this.getSelectedType()}\n                        options={this.types}\n                        onChange={this.handleTypeChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private getSelectedType() {\n        return this.types.find((option) => option.value === this.type);\n    }\n\n    private handleTypeChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.type = event.detail.value as 'bar' | 'dot' | 'line';\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-with-negative-values.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'New York',\n        value: 11.5,\n        color: 'rgb(var(--color-yellow-dark))',\n        formattedValue: '11.5°',\n    },\n    {\n        text: 'Kiruna',\n        value: -15,\n        color: 'rgb(var(--color-sky-lighter))',\n        formattedValue: '-15°',\n    },\n    {\n        text: 'Dubai',\n        value: 38,\n        color: 'rgb(var(--color-red-default))',\n        formattedValue: '38°',\n    },\n    {\n        text: 'Sydney',\n        value: 23.5,\n        color: 'rgb(var(--color-orange-default))',\n        formattedValue: '23.5°',\n    },\n    {\n        text: 'Reykjavik',\n        value: 0,\n        color: 'rgb(var(--color-sky-default))',\n        formattedValue: '0°',\n    },\n    {\n        text: 'Helsinki',\n        value: -7,\n        color: 'rgb(var(--color-sky-light))',\n        formattedValue: '-7°',\n    },\n    {\n        text: 'Buenos Aires',\n        value: 22,\n        color: 'rgb(var(--color-orange-light))',\n        formattedValue: '22°',\n    },\n    {\n        text: 'Tokyo',\n        value: 14,\n        color: 'rgb(var(--color-orange-lighter))',\n        formattedValue: '14°',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-multi-axis-area.tsx","fileName":"chart-multi-axis-area.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-multi-axis-area-with-negative-start-values","overview":"Multi-axis Area Chart with Negative Start Values\nYou can also get a multi-axis Area chart, by making sure that\neach item has a start value, and some of them are negative.","usage":{},"docs":"Multi-axis Area Chart with Negative Start Values\nYou can also get a multi-axis Area chart, by making sure that\neach item has a start value, and some of them are negative.","docsTags":[{"name":"sourceFile","text":"chart-items-multi-axis-negative-start-values-area.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select"],"dependencyGraph":{"limel-example-chart-multi-axis-area-with-negative-start-values":["limel-chart","limel-example-controls","limel-select"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-multi-axis-area.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-multi-axis-negative-start-values-area';\n\n/**\n * Multi-axis Area Chart with Negative Start Values\n * You can also get a multi-axis Area chart, by making sure that\n * each item has a start value, and some of them are negative.\n *\n * @sourceFile chart-items-multi-axis-negative-start-values-area.ts\n */\n@Component({\n    tag: 'limel-example-chart-multi-axis-area-with-negative-start-values',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartMultiAxisAreaWithNegativeStartValuesExample {\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    @State()\n    private type: 'area' | 'dot' = 'area';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    private types: Option[] = [\n        { text: 'Area', value: 'area' },\n        { text: 'Dot', value: 'dot' },\n    ];\n\n    public render() {\n        return (\n            <Host class=\"large\">\n                <h4>Electricity price fluctuations, past 20 days</h4>\n                <limel-chart\n                    type={this.type}\n                    items={chartItems}\n                    orientation={this.orientation}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-select\n                        label=\"type\"\n                        value={this.getSelectedType()}\n                        options={this.types}\n                        onChange={this.handleTypeChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private getSelectedType() {\n        return this.types.find((option) => option.value === this.type);\n    }\n\n    private handleTypeChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.type = event.detail.value as 'area' | 'dot';\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-multi-axis-negative-start-values-area.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: Array<ChartItem<[number, number]>> = [\n    {\n        text: 'Monday 01',\n        value: [7, 27.3],\n        formattedValue: '7¢ — 27.3¢',\n    },\n    {\n        text: 'Tuesday 02',\n        value: [4, 27.2],\n        formattedValue: '4¢ — 27.2¢',\n    },\n    {\n        text: 'Wednesday 03',\n        value: [0, 28],\n        formattedValue: '0¢ — 28¢',\n    },\n    {\n        text: 'Thursday 04',\n        value: [-2, 17],\n        formattedValue: '-2¢ — 17¢',\n    },\n    {\n        text: 'Friday 05',\n        value: [-1, 16],\n        formattedValue: '-1¢ — 16¢',\n    },\n    {\n        text: 'Saturday 06',\n        value: [-4, 12],\n        formattedValue: '-4¢ — 12¢',\n    },\n    {\n        text: 'Sunday 07',\n        value: [-3.4, 8],\n        formattedValue: '-3.4¢ — 8¢',\n    },\n    {\n        text: 'Monday 08',\n        value: [12, 32],\n        formattedValue: '12¢ — 32¢',\n    },\n    {\n        text: 'Tuesday 09',\n        value: [7, 27],\n        formattedValue: '7¢ — 27¢',\n    },\n    {\n        text: 'Wednesday 10',\n        value: [8, 20],\n        formattedValue: '8¢ — 20¢',\n    },\n    {\n        text: 'Thursday 11',\n        value: [9.9, 21],\n        formattedValue: '9.9¢ — 21¢',\n    },\n    {\n        text: 'Friday 12',\n        value: [5, 15],\n        formattedValue: '5¢ — 15¢',\n    },\n    {\n        text: 'Saturday 13',\n        value: [1, 10],\n        formattedValue: '1¢ — 10¢',\n    },\n    {\n        text: 'Sunday 14',\n        value: [-5.2, 3],\n        formattedValue: '-5.2¢ — 3¢',\n    },\n    {\n        text: 'Monday 15',\n        value: [1, 4],\n        formattedValue: '1¢ — 4¢',\n    },\n    {\n        text: 'Tuesday 16',\n        value: [-0.5, 4.7],\n        formattedValue: '-0.5¢ — 4.7¢',\n    },\n    {\n        text: 'Wednesday 17',\n        value: [4.2, 14],\n        formattedValue: '4.2¢ — 14¢',\n    },\n    {\n        text: 'Thursday 18',\n        value: [5, 25],\n        formattedValue: '5¢ — 25¢',\n    },\n    {\n        text: 'Friday 19',\n        value: [1, 23],\n        formattedValue: '1¢ — 23¢',\n    },\n    {\n        text: 'Saturday 20',\n        value: [-2, 13],\n        formattedValue: '-2¢ — 13¢',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-multi-axis-gantt.tsx","fileName":"chart-multi-axis-gantt.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-multi-axis-with-negative-start-values","overview":"Multi-axis with Negative Start Values\nYou can also get a multi-axis chart with items in your dataset\nthat have both start and end values, e.g. `value: [10, 20]`.","usage":{},"docs":"Multi-axis with Negative Start Values\nYou can also get a multi-axis chart with items in your dataset\nthat have both start and end values, e.g. `value: [10, 20]`.","docsTags":[{"name":"sourceFile","text":"chart-items-multi-axis-negative-start-values.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select"],"dependencyGraph":{"limel-example-chart-multi-axis-with-negative-start-values":["limel-chart","limel-example-controls","limel-select"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-multi-axis-gantt.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-multi-axis-negative-start-values';\n\n/**\n * Multi-axis with Negative Start Values\n * You can also get a multi-axis chart with items in your dataset\n * that have both start and end values, e.g. `value: [10, 20]`.\n *\n * @sourceFile chart-items-multi-axis-negative-start-values.ts\n */\n@Component({\n    tag: 'limel-example-chart-multi-axis-with-negative-start-values',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartMultiAxisWithNegativeStartValuesExample {\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    @State()\n    private type: 'bar' | 'dot' = 'bar';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    private types: Option[] = [\n        { text: 'Bar', value: 'bar' },\n        { text: 'Dot', value: 'dot' },\n    ];\n\n    public render() {\n        return (\n            <Host class=\"tall\">\n                <h4>Temperature fluctuations past 24 hours</h4>\n                <limel-chart\n                    type={this.type}\n                    items={chartItems}\n                    orientation={this.orientation}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-select\n                        label=\"type\"\n                        value={this.getSelectedType()}\n                        options={this.types}\n                        onChange={this.handleTypeChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private getSelectedType() {\n        return this.types.find((option) => option.value === this.type);\n    }\n\n    private handleTypeChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.type = event.detail.value as 'bar' | 'dot';\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-multi-axis-negative-start-values.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: Array<ChartItem<[number, number]>> = [\n    {\n        text: 'New York',\n        value: [0, 10],\n        color: 'rgb(var(--color-yellow-dark))',\n        formattedValue: '0° — 10°',\n    },\n    {\n        text: 'Kiruna',\n        value: [-17, -5],\n        color: 'rgb(var(--color-sky-lighter))',\n        formattedValue: '-17° — -5°',\n    },\n    {\n        text: 'Dubai',\n        value: [20, 35],\n        color: 'rgb(var(--color-red-default))',\n        formattedValue: '20° — 35°',\n    },\n    {\n        text: 'Sydney',\n        value: [10, 25],\n        color: 'rgb(var(--color-orange-default))',\n        formattedValue: '10° — 25°',\n    },\n    {\n        text: 'Reykjavik',\n        value: [-10, 0],\n        color: 'rgb(var(--color-sky-default))',\n        formattedValue: '-10° — 0°',\n    },\n    {\n        text: 'Helsinki',\n        value: [-12, -2],\n        color: 'rgb(var(--color-sky-light))',\n        formattedValue: '-12° — -2°',\n    },\n    {\n        text: 'Buenos Aires',\n        value: [5, 22],\n        color: 'rgb(var(--color-orange-light))',\n        formattedValue: '5° — 22°',\n    },\n    {\n        text: 'Tokyo',\n        value: [6, 17],\n        color: 'rgb(var(--color-orange-lighter))',\n        formattedValue: '6° — 17°',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-orientation.tsx","fileName":"chart-orientation.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-orientation","overview":"The `orientation` prop\nUsing the `orientation` prop, you can change the direction of\nthe the chart. Note that the `orientation` prop\ndoes not have any effect on those `type`s of visualization that\ndo not have the common `X` and `Y` axises, such as `pie` or `doughnut`.\n\n:::note\nCharts are responsive and stretch inside their containers.\nYou need to set ensure that there space for them to get rendered in.\n:::","usage":{},"docs":"The `orientation` prop\nUsing the `orientation` prop, you can change the direction of\nthe the chart. Note that the `orientation` prop\ndoes not have any effect on those `type`s of visualization that\ndo not have the common `X` and `Y` axises, such as `pie` or `doughnut`.\n\n:::note\nCharts are responsive and stretch inside their containers.\nYou need to set ensure that there space for them to get rendered in.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-stack.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart"],"dependencyGraph":{"limel-example-chart-orientation":["limel-chart"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-orientation.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { chartItems } from './chart-items-stack';\n\n/**\n * The `orientation` prop\n * Using the `orientation` prop, you can change the direction of\n * the the chart. Note that the `orientation` prop\n * does not have any effect on those `type`s of visualization that\n * do not have the common `X` and `Y` axises, such as `pie` or `doughnut`.\n *\n * :::note\n * Charts are responsive and stretch inside their containers.\n * You need to set ensure that there space for them to get rendered in.\n * :::\n * @sourceFile chart-items-stack.ts\n */\n@Component({\n    tag: 'limel-example-chart-orientation',\n    shadow: true,\n})\nexport class ChartOrientationExample {\n    public render() {\n        return (\n            <limel-chart\n                style={{ width: '0.5rem', height: '15rem' }}\n                items={chartItems}\n                orientation=\"portrait\"\n            />\n        );\n    }\n}\n"},{"filename":"chart-items-stack.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Applications',\n        value: 10,\n        formattedValue: '10 gb',\n        color: 'rgb(var(--color-red-default))',\n    },\n    {\n        text: 'Photos',\n        value: 52,\n        formattedValue: '52 gb',\n        color: 'rgb(var(--color-magenta-default))',\n    },\n    {\n        text: 'Messages',\n        value: 48,\n        formattedValue: '48 gb',\n        color: 'rgb(var(--color-violet-default))',\n    },\n    {\n        text: 'Podcasts',\n        value: 11,\n        formattedValue: '11 gb',\n        color: 'rgb(var(--color-blue-default))',\n    },\n    {\n        text: 'Mail',\n        value: 25,\n        formattedValue: '25 gb',\n        color: 'rgb(var(--color-cyan-default))',\n    },\n    {\n        text: 'Videos',\n        value: 80,\n        formattedValue: '80 gb',\n        color: 'rgb(var(--color-green-default))',\n    },\n    {\n        text: 'OS',\n        value: 30,\n        formattedValue: '30 gb',\n        color: 'rgb(var(--color-glaucous-default))',\n    },\n    {\n        text: 'System data',\n        value: 13,\n        formattedValue: '13 gb',\n        color: 'rgb(var(--color-glaucous-dark))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-stacked-bar.tsx","fileName":"chart-type-stacked-bar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-stacked-bar","overview":"Stacked bar (default)\n\nYou can simply provide a list of items to the chart component,\nand it will visualize them the way you want. For the default\nvisualization, the component uses the `stacked-bar` `type`,\nas this is the most compact form of date visualization.\n\nThe only thing each item needs is a `text`, a `value`, and a your\nchoice of `color`.\n\nA stacked bar chart builds creates a data visualization\nby stacking multiple data series in each bar.\n\nIt's good for:\n- Showing the composition of categories across multiple groups.\n- Highlighting cumulative values while breaking down individual contributions.\n\n:::tip\n**Use:**\n- When you want to show both the total and individual values in each category.\n- For data with sub-categories or components that need visualization.\n\n**Avoid:**\n- If precise individual comparisons between subcategories are necessary.\n- When there are too many categories, making the chart crowded.\n:::","usage":{},"docs":"Stacked bar (default)\n\nYou can simply provide a list of items to the chart component,\nand it will visualize them the way you want. For the default\nvisualization, the component uses the `stacked-bar` `type`,\nas this is the most compact form of date visualization.\n\nThe only thing each item needs is a `text`, a `value`, and a your\nchoice of `color`.\n\nA stacked bar chart builds creates a data visualization\nby stacking multiple data series in each bar.\n\nIt's good for:\n- Showing the composition of categories across multiple groups.\n- Highlighting cumulative values while breaking down individual contributions.\n\n:::tip\n**Use:**\n- When you want to show both the total and individual values in each category.\n- For data with sub-categories or components that need visualization.\n\n**Avoid:**\n- If precise individual comparisons between subcategories are necessary.\n- When there are too many categories, making the chart crowded.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-stack.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart"],"dependencyGraph":{"limel-example-chart-stacked-bar":["limel-chart"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-stacked-bar.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { chartItems } from './chart-items-stack';\n\n/**\n * Stacked bar (default)\n *\n * You can simply provide a list of items to the chart component,\n * and it will visualize them the way you want. For the default\n * visualization, the component uses the `stacked-bar` `type`,\n * as this is the most compact form of date visualization.\n *\n * The only thing each item needs is a `text`, a `value`, and a your\n * choice of `color`.\n *\n * A stacked bar chart builds creates a data visualization\n * by stacking multiple data series in each bar.\n *\n * It's good for:\n * - Showing the composition of categories across multiple groups.\n * - Highlighting cumulative values while breaking down individual contributions.\n *\n * :::tip\n * **Use:**\n * - When you want to show both the total and individual values in each category.\n * - For data with sub-categories or components that need visualization.\n *\n * **Avoid:**\n * - If precise individual comparisons between subcategories are necessary.\n * - When there are too many categories, making the chart crowded.\n * :::\n *\n * @sourceFile chart-items-stack.ts\n */\n@Component({\n    tag: 'limel-example-chart-stacked-bar',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartStackedBarExample {\n    public render() {\n        return <limel-chart items={chartItems} />;\n    }\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-stack.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Applications',\n        value: 10,\n        formattedValue: '10 gb',\n        color: 'rgb(var(--color-red-default))',\n    },\n    {\n        text: 'Photos',\n        value: 52,\n        formattedValue: '52 gb',\n        color: 'rgb(var(--color-magenta-default))',\n    },\n    {\n        text: 'Messages',\n        value: 48,\n        formattedValue: '48 gb',\n        color: 'rgb(var(--color-violet-default))',\n    },\n    {\n        text: 'Podcasts',\n        value: 11,\n        formattedValue: '11 gb',\n        color: 'rgb(var(--color-blue-default))',\n    },\n    {\n        text: 'Mail',\n        value: 25,\n        formattedValue: '25 gb',\n        color: 'rgb(var(--color-cyan-default))',\n    },\n    {\n        text: 'Videos',\n        value: 80,\n        formattedValue: '80 gb',\n        color: 'rgb(var(--color-green-default))',\n    },\n    {\n        text: 'OS',\n        value: 30,\n        formattedValue: '30 gb',\n        color: 'rgb(var(--color-glaucous-default))',\n    },\n    {\n        text: 'System data',\n        value: 13,\n        formattedValue: '13 gb',\n        color: 'rgb(var(--color-glaucous-dark))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-styling.tsx","fileName":"chart-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-styling","overview":"Styling\nThe component provides a few styling options, using CSS custom properties.","usage":{},"docs":"Styling\nThe component provides a few styling options, using CSS custom properties.","docsTags":[{"name":"sourceFile","text":"chart-items-gantt-negative-values.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart"],"dependencyGraph":{"limel-example-chart-styling":["limel-chart"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-styling.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { chartItems } from './chart-items-ring';\n\n/**\n * Styling\n * The component provides a few styling options, using CSS custom properties.\n *\n * @sourceFile chart-items-gantt-negative-values.ts\n */\n@Component({\n    tag: 'limel-example-chart-styling',\n    shadow: true,\n    styleUrl: 'chart-styling.scss',\n})\nexport class ChartStackedBarExample {\n    public render() {\n        return [\n            <h4>Stacked-bar Chart</h4>,\n            <limel-chart items={chartItems} type=\"stacked-bar\" />,\n            <div role=\"separator\" />,\n            <h4>Bar Chart</h4>,\n            <limel-chart items={chartItems} axisIncrement={1} type=\"bar\" />,\n        ];\n    }\n}\n"},{"filename":"chart-styling.scss","type":"scss","source":":host(limel-example-chart-styling) {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n}\n\nlimel-chart {\n    &[type='bar'] {\n        --chart-item-border-radius: 0.5rem;\n        height: 20rem;\n    }\n\n    &[type='stacked-bar'] {\n        --chart-item-divider-color: transparent;\n        --chart-item-border-radius: 1.5rem;\n        --chart-background-color: transparent;\n\n        height: var(--chart-item-border-radius);\n        border-radius: var(--chart-item-border-radius);\n        overflow: hidden;\n    }\n}\n\ndiv[role='separator'] {\n    width: 100%;\n    border-top: 1px dashed rgb(var(--color-green-light));\n}\n"},{"filename":"chart-items-gantt-negative-values.ts","type":"ts","source":"File chart-items-gantt-negative-values.ts not found"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-area.tsx","fileName":"chart-type-area.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-area","overview":"Area chart\nAn area chart is like a line chart but with the area below the line filled in,\nrepresenting cumulative data.\n\nIt's good for:\n- Showing cumulative totals over time.\n- Emphasizing data changes while highlighting volume or totals.\n\n:::tip\n**Use:**\n- For showing cumulative data trends where total volume over time is meaningful.\n- When visualizing stacked data in a cumulative format.\n\n**Avoid:**\n- If individual values need precise comparison (stacked bar charts are more suitable).\n- For datasets with highly fluctuating values, as overlapping areas can obscure details.\n:::","usage":{},"docs":"Area chart\nAn area chart is like a line chart but with the area below the line filled in,\nrepresenting cumulative data.\n\nIt's good for:\n- Showing cumulative totals over time.\n- Emphasizing data changes while highlighting volume or totals.\n\n:::tip\n**Use:**\n- For showing cumulative data trends where total volume over time is meaningful.\n- When visualizing stacked data in a cumulative format.\n\n**Avoid:**\n- If individual values need precise comparison (stacked bar charts are more suitable).\n- For datasets with highly fluctuating values, as overlapping areas can obscure details.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-area.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-area":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-area.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-area';\n\n/**\n * Area chart\n * An area chart is like a line chart but with the area below the line filled in,\n * representing cumulative data.\n *\n * It's good for:\n * - Showing cumulative totals over time.\n * - Emphasizing data changes while highlighting volume or totals.\n *\n * :::tip\n * **Use:**\n * - For showing cumulative data trends where total volume over time is meaningful.\n * - When visualizing stacked data in a cumulative format.\n *\n * **Avoid:**\n * - If individual values need precise comparison (stacked bar charts are more suitable).\n * - For datasets with highly fluctuating values, as overlapping areas can obscure details.\n * :::\n * @sourceFile chart-items-area.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-area',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeAreaExample {\n    @State()\n    private maxValue = 100;\n\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"large\">\n                <h4>Subscriptions per month</h4>\n                <limel-chart\n                    type=\"area\"\n                    items={chartItems}\n                    orientation={this.orientation}\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-area.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'January',\n        value: 10,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'February',\n        value: 3,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'March',\n        value: 13,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'April',\n        value: 55,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'May',\n        value: 67,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'June',\n        value: 40,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'July',\n        value: 7,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'August',\n        value: 0,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'September',\n        value: 90,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'October',\n        value: 70,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'November',\n        value: 20,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'December',\n        value: 36,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-bar.tsx","fileName":"chart-type-bar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-bar","overview":"Bar chart\nA bar chart displays data with rectangular bars, where the length of each bar represents the value of a data point.\n\nIt's good for:\n- Comparing discrete categories or groups.\n- Visualizing changes in data over time when categories are limited.\n\n:::tip\n**Use:**\n- When you have categorical data that needs clear comparisons.\n- For datasets with fewer than 20 categories, as too many bars can make it hard to read.\n\n**Avoid:**\n- When showing continuous data trends over time (a line chart might be better).\n- When you have many categories, which could make the chart crowded.\n:::","usage":{},"docs":"Bar chart\nA bar chart displays data with rectangular bars, where the length of each bar represents the value of a data point.\n\nIt's good for:\n- Comparing discrete categories or groups.\n- Visualizing changes in data over time when categories are limited.\n\n:::tip\n**Use:**\n- When you have categorical data that needs clear comparisons.\n- For datasets with fewer than 20 categories, as too many bars can make it hard to read.\n\n**Avoid:**\n- When showing continuous data trends over time (a line chart might be better).\n- When you have many categories, which could make the chart crowded.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-bar.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-bar":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-bar.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-bar';\n\n/**\n * Bar chart\n * A bar chart displays data with rectangular bars, where the length of each bar represents the value of a data point.\n *\n * It's good for:\n * - Comparing discrete categories or groups.\n * - Visualizing changes in data over time when categories are limited.\n *\n * :::tip\n * **Use:**\n * - When you have categorical data that needs clear comparisons.\n * - For datasets with fewer than 20 categories, as too many bars can make it hard to read.\n *\n * **Avoid:**\n * - When showing continuous data trends over time (a line chart might be better).\n * - When you have many categories, which could make the chart crowded.\n * :::\n *\n * @sourceFile chart-items-bar.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-bar',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeBarExample {\n    @State()\n    private maxValue = 100;\n\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"large\">\n                <h4>Subscriptions per month</h4>\n                <limel-chart\n                    type=\"bar\"\n                    items={chartItems}\n                    orientation={this.orientation}\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-bar.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'January',\n        value: 10,\n        color: 'var(--color-percent--0to10)',\n    },\n    {\n        text: 'February',\n        value: 3,\n        color: 'var(--color-percent--0to10)',\n    },\n    {\n        text: 'March',\n        value: 13,\n        color: 'var(--color-percent--10to20)',\n    },\n    {\n        text: 'April',\n        value: 55,\n        color: 'var(--color-percent--50to60)',\n    },\n    {\n        text: 'May',\n        value: 67,\n        color: 'var(--color-percent--60to70)',\n    },\n    {\n        text: 'June',\n        value: 40,\n        color: 'var(--color-percent--40to50)',\n    },\n    {\n        text: 'July',\n        value: 7,\n        color: 'var(--color-percent--0to10)',\n    },\n    {\n        text: 'August',\n        value: 0,\n        color: 'var(--color-percent--0)',\n    },\n    {\n        text: 'September',\n        value: 90,\n        color: 'var(--color-percent--90to100)',\n    },\n    {\n        text: 'October',\n        value: 70,\n        color: 'var(--color-percent--70to80)',\n    },\n    {\n        text: 'November',\n        value: 20,\n        color: 'var(--color-percent--20to30)',\n    },\n    {\n        text: 'December',\n        value: 36,\n        color: 'var(--color-percent--30to40)',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-dot.tsx","fileName":"chart-type-dot.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-dot","overview":"Dot chart\nA dot chart displays values for each category using dots along an axis, similar to a bar chart but with dots\nat the value associated with each category instead of bars. It’s often used as an alternative to bar charts,\nespecially when focusing on individual data points or reducing visual clutter.\n\nIt's good for:\n- Comparing values across categories in a clean and uncluttered way.\n- Visualizing discrete data points without the visual weight of bars.\n- Allowing readers to focus on precise values and distribution.\n\n:::tip\n**Use:**\n- When comparing values across categories in a straightforward way.\n- For datasets where you do not want to emphasize on or compare \"volumes\" or \"sizes\",\nbut rather compare the points that the data represents.\n\n**Avoid:**\n- For datasets with very few or very densely packed points, which could make the chart difficult to read.\n- When representing complex relationships or multiple variables (scatter plots or line charts may be more effective).\n:::","usage":{},"docs":"Dot chart\nA dot chart displays values for each category using dots along an axis, similar to a bar chart but with dots\nat the value associated with each category instead of bars. It’s often used as an alternative to bar charts,\nespecially when focusing on individual data points or reducing visual clutter.\n\nIt's good for:\n- Comparing values across categories in a clean and uncluttered way.\n- Visualizing discrete data points without the visual weight of bars.\n- Allowing readers to focus on precise values and distribution.\n\n:::tip\n**Use:**\n- When comparing values across categories in a straightforward way.\n- For datasets where you do not want to emphasize on or compare \"volumes\" or \"sizes\",\nbut rather compare the points that the data represents.\n\n**Avoid:**\n- For datasets with very few or very densely packed points, which could make the chart difficult to read.\n- When representing complex relationships or multiple variables (scatter plots or line charts may be more effective).\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-bar.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-dot":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-dot.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-bar';\n\n/**\n * Dot chart\n * A dot chart displays values for each category using dots along an axis, similar to a bar chart but with dots\n * at the value associated with each category instead of bars. It’s often used as an alternative to bar charts,\n * especially when focusing on individual data points or reducing visual clutter.\n *\n * It's good for:\n * - Comparing values across categories in a clean and uncluttered way.\n * - Visualizing discrete data points without the visual weight of bars.\n * - Allowing readers to focus on precise values and distribution.\n *\n * :::tip\n * **Use:**\n * - When comparing values across categories in a straightforward way.\n * - For datasets where you do not want to emphasize on or compare \"volumes\" or \"sizes\",\n * but rather compare the points that the data represents.\n *\n * **Avoid:**\n * - For datasets with very few or very densely packed points, which could make the chart difficult to read.\n * - When representing complex relationships or multiple variables (scatter plots or line charts may be more effective).\n * :::\n * @sourceFile chart-items-bar.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-dot',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeDotExample {\n    @State()\n    private maxValue = 100;\n\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"large\">\n                <h4>Subscriptions per month</h4>\n                <limel-chart\n                    type=\"dot\"\n                    items={chartItems}\n                    orientation={this.orientation}\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-bar.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'January',\n        value: 10,\n        color: 'var(--color-percent--0to10)',\n    },\n    {\n        text: 'February',\n        value: 3,\n        color: 'var(--color-percent--0to10)',\n    },\n    {\n        text: 'March',\n        value: 13,\n        color: 'var(--color-percent--10to20)',\n    },\n    {\n        text: 'April',\n        value: 55,\n        color: 'var(--color-percent--50to60)',\n    },\n    {\n        text: 'May',\n        value: 67,\n        color: 'var(--color-percent--60to70)',\n    },\n    {\n        text: 'June',\n        value: 40,\n        color: 'var(--color-percent--40to50)',\n    },\n    {\n        text: 'July',\n        value: 7,\n        color: 'var(--color-percent--0to10)',\n    },\n    {\n        text: 'August',\n        value: 0,\n        color: 'var(--color-percent--0)',\n    },\n    {\n        text: 'September',\n        value: 90,\n        color: 'var(--color-percent--90to100)',\n    },\n    {\n        text: 'October',\n        value: 70,\n        color: 'var(--color-percent--70to80)',\n    },\n    {\n        text: 'November',\n        value: 20,\n        color: 'var(--color-percent--20to30)',\n    },\n    {\n        text: 'December',\n        value: 36,\n        color: 'var(--color-percent--30to40)',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-doughnut.tsx","fileName":"chart-type-doughnut.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-doughnut","overview":"Doughnut chart\nA doughnut chart is a variation of the pie chart, with a center space,\noften used to show multiple concentric data series.\n\nIt's good for:\n- Showing proportions with a visually balanced layout.\n- Allowing room in the center for additional information (e.g., displaying totals).\n\n:::tip\n**Use:**\n- When visual space is limited, and a pie chart may look crowded.\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","usage":{},"docs":"Doughnut chart\nA doughnut chart is a variation of the pie chart, with a center space,\noften used to show multiple concentric data series.\n\nIt's good for:\n- Showing proportions with a visually balanced layout.\n- Allowing room in the center for additional information (e.g., displaying totals).\n\n:::tip\n**Use:**\n- When visual space is limited, and a pie chart may look crowded.\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-pie.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-doughnut":["limel-chart","limel-example-controls","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-doughnut.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { chartItems } from './chart-items-pie';\n\n/**\n * Doughnut chart\n * A doughnut chart is a variation of the pie chart, with a center space,\n * often used to show multiple concentric data series.\n *\n * It's good for:\n * - Showing proportions with a visually balanced layout.\n * - Allowing room in the center for additional information (e.g., displaying totals).\n *\n * :::tip\n * **Use:**\n * - When visual space is limited, and a pie chart may look crowded.\n * - When you have a limited number of categories (at least 3, and maximum ~10).\n * - For static data composition, not suitable for showing time trends.\n *\n * **Avoid:**\n * - When precise comparisons are needed, as bars provide clearer detail.\n * - With complex or large datasets where slices become too small to read.\n * :::\n * @sourceFile chart-items-pie.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-doughnut',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeDoughnutExample {\n    @State()\n    private maxValue = 140;\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"row-layout\">\n                <limel-chart\n                    items={chartItems}\n                    type=\"doughnut\"\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-pie.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Chrome',\n        value: 60,\n        color: 'rgb(var(--color-red-default))',\n    },\n    {\n        text: 'Safari',\n        value: 30,\n        color: 'rgb(var(--color-blue-default))',\n    },\n    {\n        text: 'Edge',\n        value: 10,\n        color: 'rgb(var(--color-cyan-default))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-gannt.tsx","fileName":"chart-type-gannt.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-gantt","overview":"Gantt chart\nGantt charts are used to visualize items that have a defined start and end value, making them ideal\nfor displaying timelines or project phases. Each item typically represents a phase or task, with its length\nindicating duration.\n\nIt's good for:\n- Visualizing project schedules, with tasks and milestones over time.\n- Showing task dependencies, start and end dates, and overlaps between phases.\n- Providing an easy-to-understand timeline for project planning and tracking.\n\n:::tip\n**Use:**\n- When you need to show the progression of tasks or stages over time.\n- When items have start points which are not simply zero.\n\n**Avoid:**\n- For datasets that don't involve time or sequential phases (bar charts or line charts may be better).\n\n**Note:**\nIn Gantt charts, items have a start value to indicate when they begin. Unlike other charts,\nwhere items default to a start value of `0`, each Gantt chart item should specify a start value\nand an end value (e.g., `value: [10, 20]`), which determines the duration and position of the item.\n:::","usage":{},"docs":"Gantt chart\nGantt charts are used to visualize items that have a defined start and end value, making them ideal\nfor displaying timelines or project phases. Each item typically represents a phase or task, with its length\nindicating duration.\n\nIt's good for:\n- Visualizing project schedules, with tasks and milestones over time.\n- Showing task dependencies, start and end dates, and overlaps between phases.\n- Providing an easy-to-understand timeline for project planning and tracking.\n\n:::tip\n**Use:**\n- When you need to show the progression of tasks or stages over time.\n- When items have start points which are not simply zero.\n\n**Avoid:**\n- For datasets that don't involve time or sequential phases (bar charts or line charts may be better).\n\n**Note:**\nIn Gantt charts, items have a start value to indicate when they begin. Unlike other charts,\nwhere items default to a start value of `0`, each Gantt chart item should specify a start value\nand an end value (e.g., `value: [10, 20]`), which determines the duration and position of the item.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-gantt.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-gantt":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-gannt.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-gantt';\n\n/**\n * Gantt chart\n * Gantt charts are used to visualize items that have a defined start and end value, making them ideal\n * for displaying timelines or project phases. Each item typically represents a phase or task, with its length\n * indicating duration.\n *\n * It's good for:\n * - Visualizing project schedules, with tasks and milestones over time.\n * - Showing task dependencies, start and end dates, and overlaps between phases.\n * - Providing an easy-to-understand timeline for project planning and tracking.\n *\n * :::tip\n * **Use:**\n * - When you need to show the progression of tasks or stages over time.\n * - When items have start points which are not simply zero.\n *\n * **Avoid:**\n * - For datasets that don't involve time or sequential phases (bar charts or line charts may be better).\n *\n * **Note:**\n * In Gantt charts, items have a start value to indicate when they begin. Unlike other charts,\n * where items default to a start value of `0`, each Gantt chart item should specify a start value\n * and an end value (e.g., `value: [10, 20]`), which determines the duration and position of the item.\n * :::\n *\n * @sourceFile chart-items-gantt.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-gantt',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeGanttExample {\n    @State()\n    private maxValue = 170;\n\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'portrait';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"tall\">\n                <h4>Project Timeline: Key Phases from Concept to Launch</h4>\n                <limel-chart\n                    type=\"bar\"\n                    items={chartItems}\n                    orientation={this.orientation}\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-gantt.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\nexport const chartItems: Array<ChartItem<[number, number]>> = [\n    {\n        text: 'Market Research',\n        formattedValue: 'day 1 — day 10',\n        value: [1, 10],\n        color: 'rgb(var(--color-blue-default))',\n    },\n    {\n        text: 'Business Plan Development',\n        formattedValue: 'day 1 — day 20',\n        value: [1, 20],\n        color: 'rgb(var(--color-green-default))',\n    },\n    {\n        text: 'Prototyping',\n        formattedValue: 'day 10 — day 40',\n        value: [10, 40],\n        color: 'rgb(var(--color-cyan-default))',\n    },\n    {\n        text: 'User Testing',\n        formattedValue: 'day 15 — day 70',\n        value: [15, 70],\n        color: 'rgb(var(--color-purple-default))',\n    },\n    {\n        text: 'MVP Development',\n        formattedValue: 'day 70 — day 120',\n        value: [70, 120],\n        color: 'rgb(var(--color-pink-default))',\n    },\n    {\n        text: 'Marketing & PR',\n        formattedValue: 'day 80 — day 130',\n        value: [80, 130],\n        color: 'rgb(var(--color-violet-default))',\n    },\n    {\n        text: 'Launch Preparation',\n        formattedValue: 'day 110 — day 140',\n        value: [110, 140],\n        color: 'rgb(var(--color-orange-default))',\n    },\n    {\n        text: 'Product Launch',\n        formattedValue: 'day 140 — day 155',\n        value: [140, 155],\n        color: 'rgb(var(--color-teal-default))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-line.tsx","fileName":"chart-type-line.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-line","overview":"Line chart\nA line chart connects data points with a continuous line,\noften used for displaying trends over intervals.\n\nIt's good for:\n- Showing trends over time in a simple, readable format.\n- Highlighting increases, decreases, or patterns in a dataset.\n\n:::tip\n**Use:**\n- For tracking data changes over time, especially with multiple data points.\n- When visualizing time-series data to show overall trends.\n\n**Avoid:**\n- For large fluctuations, which may make data misinterpretations likely.\n- When individual point comparison is critical (consider a bar or dot chart).\n:::","usage":{},"docs":"Line chart\nA line chart connects data points with a continuous line,\noften used for displaying trends over intervals.\n\nIt's good for:\n- Showing trends over time in a simple, readable format.\n- Highlighting increases, decreases, or patterns in a dataset.\n\n:::tip\n**Use:**\n- For tracking data changes over time, especially with multiple data points.\n- When visualizing time-series data to show overall trends.\n\n**Avoid:**\n- For large fluctuations, which may make data misinterpretations likely.\n- When individual point comparison is critical (consider a bar or dot chart).\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-area.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-line":["limel-chart","limel-example-controls","limel-select","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-line.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-area';\n\n/**\n * Line chart\n * A line chart connects data points with a continuous line,\n * often used for displaying trends over intervals.\n *\n * It's good for:\n * - Showing trends over time in a simple, readable format.\n * - Highlighting increases, decreases, or patterns in a dataset.\n *\n * :::tip\n * **Use:**\n * - For tracking data changes over time, especially with multiple data points.\n * - When visualizing time-series data to show overall trends.\n *\n * **Avoid:**\n * - For large fluctuations, which may make data misinterpretations likely.\n * - When individual point comparison is critical (consider a bar or dot chart).\n * :::\n *\n * @sourceFile chart-items-area.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-line',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeLineExample {\n    @State()\n    private maxValue = 100;\n\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"large\">\n                <h4>Subscriptions per month</h4>\n                <limel-chart\n                    type=\"line\"\n                    items={chartItems}\n                    orientation={this.orientation}\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-area.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'January',\n        value: 10,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'February',\n        value: 3,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'March',\n        value: 13,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'April',\n        value: 55,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'May',\n        value: 67,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'June',\n        value: 40,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'July',\n        value: 7,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'August',\n        value: 0,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'September',\n        value: 90,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'October',\n        value: 70,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'November',\n        value: 20,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n    {\n        text: 'December',\n        value: 36,\n        color: 'rgb(var(--color-pink-dark))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-nps.tsx","fileName":"chart-type-nps.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-nps","overview":"NPS® chart\nThe NPS chart visually represents customer loyalty by plotting scores that\nrange from -100 to +100. NPS is based on customer responses to a simple question:\n\"_How likely are you to recommend us?_\"\n\nRespondents score from 0 to 10, which is then transformed into the NPS scale which starts from -100 and\ngoes up to +100. The NPS chart groups scores into three categories of:\n<span style=\"background-color: rgb(var(--color-amber-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">detractors</span>,\n<span style=\"background-color: rgb(var(--color-coral-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">passives</span>,\nor <span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">promoters</span>.\n\nAn NPS score above 30 is considered\n<span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">good</span>,\nwhile a score above 70 is considered\n<span style=\"background-color: rgb(var(--color-lime-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">excellent</span>.\n\nThis chart is good for:\n- Summarizing customer satisfaction or loyalty on a single scale.\n- Quickly identifying the distribution of detractors, passives, and promoters.\n\n:::tip\n**Use:**\n- Visualizing a single score that summarizes customer loyalty.\n- When tracking customer loyalty over time.\n- When tracking customer loyalty of different companies.\n- In dashboards or reporting tools to visualize changes in customer sentiment.\n\n**Avoid:**\n- For in-depth customer feedback analysis (consider pairing with more detailed survey insights).\n- Any other data visualization than NPS scores.\n:::\n\n:::important\nFor the `nps` chart type to visualize properly, the `value` property of the `ChartItem`\nshould be a number between `-100` and `100`!\n:::","usage":{},"docs":"NPS® chart\nThe NPS chart visually represents customer loyalty by plotting scores that\nrange from -100 to +100. NPS is based on customer responses to a simple question:\n\"_How likely are you to recommend us?_\"\n\nRespondents score from 0 to 10, which is then transformed into the NPS scale which starts from -100 and\ngoes up to +100. The NPS chart groups scores into three categories of:\n<span style=\"background-color: rgb(var(--color-amber-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">detractors</span>,\n<span style=\"background-color: rgb(var(--color-coral-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">passives</span>,\nor <span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">promoters</span>.\n\nAn NPS score above 30 is considered\n<span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">good</span>,\nwhile a score above 70 is considered\n<span style=\"background-color: rgb(var(--color-lime-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">excellent</span>.\n\nThis chart is good for:\n- Summarizing customer satisfaction or loyalty on a single scale.\n- Quickly identifying the distribution of detractors, passives, and promoters.\n\n:::tip\n**Use:**\n- Visualizing a single score that summarizes customer loyalty.\n- When tracking customer loyalty over time.\n- When tracking customer loyalty of different companies.\n- In dashboards or reporting tools to visualize changes in customer sentiment.\n\n**Avoid:**\n- For in-depth customer feedback analysis (consider pairing with more detailed survey insights).\n- Any other data visualization than NPS scores.\n:::\n\n:::important\nFor the `nps` chart type to visualize properly, the `value` property of the `ChartItem`\nshould be a number between `-100` and `100`!\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-nps.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart"],"dependencyGraph":{"limel-example-chart-type-nps":["limel-chart"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-nps.tsx","type":"tsx","source":"import { Component, h, Host } from '@stencil/core';\nimport { chartItems } from './chart-items-nps';\n\n/**\n * NPS® chart\n * The NPS chart visually represents customer loyalty by plotting scores that\n * range from -100 to +100. NPS is based on customer responses to a simple question:\n * \"_How likely are you to recommend us?_\"\n *\n * Respondents score from 0 to 10, which is then transformed into the NPS scale which starts from -100 and\n * goes up to +100. The NPS chart groups scores into three categories of:\n * <span style=\"background-color: rgb(var(--color-amber-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">detractors</span>,\n * <span style=\"background-color: rgb(var(--color-coral-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">passives</span>,\n * or <span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">promoters</span>.\n *\n * An NPS score above 30 is considered\n * <span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">good</span>,\n * while a score above 70 is considered\n * <span style=\"background-color: rgb(var(--color-lime-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">excellent</span>.\n *\n * This chart is good for:\n * - Summarizing customer satisfaction or loyalty on a single scale.\n * - Quickly identifying the distribution of detractors, passives, and promoters.\n *\n * :::tip\n * **Use:**\n * - Visualizing a single score that summarizes customer loyalty.\n * - When tracking customer loyalty over time.\n * - When tracking customer loyalty of different companies.\n * - In dashboards or reporting tools to visualize changes in customer sentiment.\n *\n * **Avoid:**\n * - For in-depth customer feedback analysis (consider pairing with more detailed survey insights).\n * - Any other data visualization than NPS scores.\n * :::\n *\n * :::important\n * For the `nps` chart type to visualize properly, the `value` property of the `ChartItem`\n * should be a number between `-100` and `100`!\n * :::\n * @sourceFile chart-items-nps.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-nps',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeNpsExample {\n    public render() {\n        return (\n            <Host class=\"large\">\n                <h4>\n                    Our Net Promoter Score Development During the Past 5\n                    Quarters\n                </h4>\n                <limel-chart items={chartItems} type=\"nps\" />\n            </Host>\n        );\n    }\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-nps.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Q1 2024',\n        value: 75,\n        color: 'rgb(var(--color-violet-light))',\n    },\n    {\n        text: 'Q4 2023',\n        value: 18,\n        color: 'rgb(var(--color-glaucous-dark))',\n    },\n    {\n        text: 'Q3 2023',\n        value: 30,\n        color: 'rgb(var(--color-glaucous-default))',\n    },\n    {\n        text: 'Q2 2023',\n        value: -6,\n        color: 'rgb(var(--color-glaucous-light))',\n    },\n    {\n        text: 'Q1 2023',\n        value: -46,\n        color: 'rgb(var(--color-glaucous-lighter))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-pie.tsx","fileName":"chart-type-pie.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-pie","overview":"Pie chart\nA pie chart represents data as slices of a circle, with each slice’s size proportional to its value.\n\nIt's good for:\n- Showing the proportions of a whole.\n- Visualizing data composition for easy understanding.\n\n:::tip\n**Use:**\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","usage":{},"docs":"Pie chart\nA pie chart represents data as slices of a circle, with each slice’s size proportional to its value.\n\nIt's good for:\n- Showing the proportions of a whole.\n- Visualizing data composition for easy understanding.\n\n:::tip\n**Use:**\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-pie.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-pie":["limel-chart","limel-example-controls","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-pie.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { chartItems } from './chart-items-pie';\n\n/**\n * Pie chart\n * A pie chart represents data as slices of a circle, with each slice’s size proportional to its value.\n *\n * It's good for:\n * - Showing the proportions of a whole.\n * - Visualizing data composition for easy understanding.\n *\n * :::tip\n * **Use:**\n * - When you have a limited number of categories (at least 3, and maximum ~10).\n * - For static data composition, not suitable for showing time trends.\n *\n * **Avoid:**\n * - When precise comparisons are needed, as bars provide clearer detail.\n * - With complex or large datasets where slices become too small to read.\n * :::\n *\n * @sourceFile chart-items-pie.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-pie',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypePieExample {\n    @State()\n    private maxValue = 300;\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"row-layout\">\n                <limel-chart\n                    items={chartItems}\n                    type=\"pie\"\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-pie.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\n\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Chrome',\n        value: 60,\n        color: 'rgb(var(--color-red-default))',\n    },\n    {\n        text: 'Safari',\n        value: 30,\n        color: 'rgb(var(--color-blue-default))',\n    },\n    {\n        text: 'Edge',\n        value: 10,\n        color: 'rgb(var(--color-cyan-default))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples","filePath":"./src/components/chart/examples/chart-type-ring.tsx","fileName":"chart-type-ring.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chart/examples/usage","tag":"limel-example-chart-type-ring","overview":"Ring chart\nA ring chart is similar to a doughnut chart but used in concentric layers,\nideal for comparison of hierarchical data.\n\nIt's good for:\n- Comparing multiple parts of a whole in a layered visual layout.\n- Displaying hierarchical data or showing nested relationships.\n\n:::tip\n**Use:**\n- When you need to show multiple data series in a single, visually appealing chart.\n- For data with a clear hierarchy or grouping.\n\n**Avoid:**\n- With too many rings, as it can become visually overwhelming.\n- For data that needs precise comparison across series.\n:::","usage":{},"docs":"Ring chart\nA ring chart is similar to a doughnut chart but used in concentric layers,\nideal for comparison of hierarchical data.\n\nIt's good for:\n- Comparing multiple parts of a whole in a layered visual layout.\n- Displaying hierarchical data or showing nested relationships.\n\n:::tip\n**Use:**\n- When you need to show multiple data series in a single, visually appealing chart.\n- For data with a clear hierarchy or grouping.\n\n**Avoid:**\n- With too many rings, as it can become visually overwhelming.\n- For data that needs precise comparison across series.\n:::","docsTags":[{"name":"sourceFile","text":"chart-items-ring.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chart","limel-example-controls","limel-input-field"],"dependencyGraph":{"limel-example-chart-type-ring":["limel-chart","limel-example-controls","limel-input-field"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chart-type-ring.tsx","type":"tsx","source":"import { Component, h, Host, State } from '@stencil/core';\nimport { chartItems } from './chart-items-ring';\n\n/**\n * Ring chart\n * A ring chart is similar to a doughnut chart but used in concentric layers,\n * ideal for comparison of hierarchical data.\n *\n * It's good for:\n * - Comparing multiple parts of a whole in a layered visual layout.\n * - Displaying hierarchical data or showing nested relationships.\n *\n * :::tip\n * **Use:**\n * - When you need to show multiple data series in a single, visually appealing chart.\n * - For data with a clear hierarchy or grouping.\n *\n * **Avoid:**\n * - With too many rings, as it can become visually overwhelming.\n * - For data that needs precise comparison across series.\n * :::\n * @sourceFile chart-items-ring.ts\n */\n@Component({\n    tag: 'limel-example-chart-type-ring',\n    shadow: true,\n    styleUrl: 'chart-examples.scss',\n})\nexport class ChartTypeRingExample {\n    @State()\n    private maxValue = 10;\n\n    public render() {\n        const defaultMaxValue = `${this.maxValue}`;\n\n        return (\n            <Host class=\"row-layout\">\n                <limel-chart\n                    items={chartItems}\n                    type=\"ring\"\n                    maxValue={this.maxValue}\n                />\n                <limel-example-controls>\n                    <limel-input-field\n                        type=\"number\"\n                        label=\"maxValue\"\n                        value={defaultMaxValue}\n                        onChange={this.handleMaxValueChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n    private handleMaxValueChange = (event) => {\n        this.maxValue = +event.detail;\n    };\n}\n"},{"filename":"chart-examples.scss","type":"scss","source":"@import './chart-resizable-container';\n"},{"filename":"chart-items-ring.ts","type":"ts","source":"import { ChartItem } from '@limetech/lime-elements';\nexport const chartItems: ChartItem[] = [\n    {\n        text: 'Walking',\n        value: 2,\n        formattedValue: '2h',\n        color: 'rgb(var(--color-coral-light))',\n    },\n    {\n        text: 'Running',\n        value: 1,\n        formattedValue: '1h',\n        color: 'rgb(var(--color-pink-default))',\n    },\n    {\n        text: 'Standing',\n        value: 5,\n        formattedValue: '5h',\n        color: 'rgb(var(--color-grass-default))',\n    },\n    {\n        text: 'Sitting',\n        value: 8,\n        formattedValue: '8h',\n        color: 'rgb(var(--color-sky-default))',\n    },\n    {\n        text: 'Resting',\n        value: 8,\n        formattedValue: '8h',\n        color: 'rgb(var(--color-glaucous-darker))',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples","filePath":"./src/components/checkbox/examples/checkbox.tsx","fileName":"checkbox.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/usage","tag":"limel-example-checkbox","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox","limel-example-controls","limel-example-value","limel-example-event-printer"],"dependencyGraph":{"limel-example-checkbox":["limel-checkbox","limel-example-controls","limel-example-value","limel-example-event-printer"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkbox.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-checkbox',\n    shadow: true,\n    styleUrl: 'checkbox.scss',\n})\nexport class CheckboxExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private required: boolean = false;\n\n    @State()\n    private value: boolean = false;\n\n    @State()\n    private indeterminate: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    @State()\n    private invalid: boolean = false;\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public render() {\n        return [\n            <limel-checkbox\n                disabled={this.disabled}\n                label=\"Subscribe to email newsletters\"\n                id=\"1\"\n                checked={this.value}\n                indeterminate={this.indeterminate}\n                required={this.required}\n                invalid={this.invalid}\n                onChange={this.handleChange}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Checked\"\n                    onChange={this.setChecked}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.indeterminate}\n                    label=\"Indeterminate\"\n                    onChange={this.setIndeterminate}\n                />\n            </limel-example-controls>,\n            <limel-example-value label=\"Checked\" value={this.value} />,\n            <limel-example-value\n                label=\"Indeterminate\"\n                value={this.indeterminate}\n            />,\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<boolean>) => {\n        this.value = event.detail;\n\n        // The only way a user can interact with the checkbox is to check it or\n        // uncheck it. The indeterminate state can only be set programmatically\n        // and will always be unset when the user interacts with the checkbox.\n        // Therefore, we must set indeterminate to `false` here.\n        this.indeterminate = false;\n\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setIndeterminate = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.indeterminate = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"},{"filename":"checkbox.scss","type":"scss","source":":host(limel-example-checkbox) {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples","filePath":"./src/components/checkbox/examples/checkbox-helper-text.tsx","fileName":"checkbox-helper-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/usage","tag":"limel-example-checkbox-helper-text","overview":"With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed.","usage":{},"docs":"With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-checkbox-helper-text":["limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkbox-helper-text.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * With `helperText`\n *\n * Checkboxes can have a helper text, which is useful when providing additional information\n * can clarify functionality of the checkbox for the user.\n *\n * The helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\n * navigation. However, on touchscreen devices, the helper text is always displayed.\n */\n\n@Component({\n    tag: 'limel-example-checkbox-helper-text',\n    shadow: true,\n})\nexport class CheckboxHelperTextExample {\n    public render() {\n        return (\n            <section>\n                <div>\n                    <limel-checkbox\n                        label=\"I accept terms of use\"\n                        helperText=\"You need to accept to be able to continue…\"\n                        id=\"terms\"\n                    />\n                </div>\n            </section>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples","filePath":"./src/components/checkbox/examples/checkbox-readonly.tsx","fileName":"checkbox-readonly.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/checkbox/examples/usage","tag":"limel-example-checkbox-readonly","overview":"Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors.","usage":{},"docs":"Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox","limel-example-controls","limel-example-value"],"dependencyGraph":{"limel-example-checkbox-readonly":["limel-checkbox","limel-example-controls","limel-example-value"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"checkbox-readonly.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Customizing the visualization of the `readonly` state\n * It is possible and recommended that you enhance the visualization of a `boolean` field\n * in a `readonly` state.\n *\n * Because depending on the context, the default UI of the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * :::important\n * Before reading the documentations below, make sure to read\n * 1. our guides about the difference between\n * [Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n * 2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n * :::\n *\n * Using the `readonlyLabels` optional prop, you can override the `label` and\n * customize it accordingly. Additionally, by using the `icon` prop, you can\n * override the default icons and their colors.\n */\n@Component({\n    tag: 'limel-example-checkbox-readonly',\n    shadow: true,\n})\nexport class CheckboxReadonlyExample {\n    @State()\n    private readonly = true;\n\n    @State()\n    private value = true;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private required = false;\n\n    public render() {\n        return [\n            <limel-checkbox\n                disabled={this.disabled}\n                label=\"Subscribe to email newsletters\"\n                readonlyLabels={[\n                    {\n                        value: true,\n                        icon: 'news',\n                        text: 'Is subscribed to receive newsletters',\n                    },\n                    {\n                        value: false,\n                        icon: {\n                            name: 'cancel_subscription',\n                            color: 'rgb(var(--color-orange-default))',\n                        },\n                        text: 'Is unsubscribed from newsletters',\n                    },\n                ]}\n                helperText={this.invalid ? 'Something is wrong' : ''}\n                id=\"1\"\n                checked={this.value}\n                required={this.required}\n                invalid={this.invalid}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Checked\"\n                    onChange={this.setChecked}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value label=\"Checked\" value={this.value} />,\n        ];\n    }\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-aria-role.tsx","fileName":"chip-aria-role.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-aria-role","overview":"Correct usage of ARIA roles\n\nChips represent choices, filters, or tags, organized in a block or bundled into a group.\nWhile sighted users see the visually bundled group of chips in a well-designed UI,\nscreen reader users only hear the chip text, one at a time.\nThis can make it difficult for users of assistive technologies to understand\nthe context of the chip.\n\nTo provide an accessible experience, it's important to place the chips in\na semantically correct structure, such as a list or a table,\nor properly use ARIA roles on the chip and its container.\n\nIn this example, we demonstrate how to use ARIA roles to improve accessibility for chips.\nHowever, it's recommended to read up on the subject to fully understand the\nimplications of ARIA roles.\n\nFor more information on ARIA roles, refer to the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles).","usage":{},"docs":"Correct usage of ARIA roles\n\nChips represent choices, filters, or tags, organized in a block or bundled into a group.\nWhile sighted users see the visually bundled group of chips in a well-designed UI,\nscreen reader users only hear the chip text, one at a time.\nThis can make it difficult for users of assistive technologies to understand\nthe context of the chip.\n\nTo provide an accessible experience, it's important to place the chips in\na semantically correct structure, such as a list or a table,\nor properly use ARIA roles on the chip and its container.\n\nIn this example, we demonstrate how to use ARIA roles to improve accessibility for chips.\nHowever, it's recommended to read up on the subject to fully understand the\nimplications of ARIA roles.\n\nFor more information on ARIA roles, refer to the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip"],"dependencyGraph":{"limel-example-chip-aria-role":["limel-chip"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-aria-role.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Correct usage of ARIA roles\n *\n * Chips represent choices, filters, or tags, organized in a block or bundled into a group.\n * While sighted users see the visually bundled group of chips in a well-designed UI,\n * screen reader users only hear the chip text, one at a time.\n * This can make it difficult for users of assistive technologies to understand\n * the context of the chip.\n *\n * To provide an accessible experience, it's important to place the chips in\n * a semantically correct structure, such as a list or a table,\n * or properly use ARIA roles on the chip and its container.\n *\n * In this example, we demonstrate how to use ARIA roles to improve accessibility for chips.\n * However, it's recommended to read up on the subject to fully understand the\n * implications of ARIA roles.\n *\n * For more information on ARIA roles, refer to the\n * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles).\n */\n@Component({\n    tag: 'limel-example-chip-aria-role',\n    shadow: true,\n    styleUrl: 'limel-example-chip-aria-role.scss',\n})\nexport class ChipAriaRoleExample {\n    public render() {\n        return (\n            <div role=\"grid\" aria-label=\"Filter bar\" aria-colcount=\"3\">\n                <div role=\"rowgroup\">\n                    <div role=\"row\">\n                        <limel-chip\n                            role=\"gridcell\"\n                            aria-colindex=\"1\"\n                            text=\"Age > 20\"\n                            removable={true}\n                        />\n                        <limel-chip\n                            role=\"gridcell\"\n                            aria-colindex=\"2\"\n                            text=\"Gender = Female\"\n                            removable={true}\n                        />\n                        <limel-chip\n                            role=\"gridcell\"\n                            aria-colindex=\"3\"\n                            text=\"Income > $3000 / mo.\"\n                            removable={true}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"},{"filename":"limel-example-chip-aria-role.scss","type":"scss","source":"div[role='row'] {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-badge.tsx","fileName":"chip-badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-badge","overview":"Chip with a badge\nChips can display a badge with a number or a short text.","usage":{},"docs":"Chip with a badge\nChips can display a badge with a number or a short text.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip"],"dependencyGraph":{"limel-example-chip-badge":["limel-chip"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-badge.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Chip with a badge\n * Chips can display a badge with a number or a short text.\n */\n@Component({\n    tag: 'limel-example-chip-badge',\n    shadow: true,\n    styleUrl: 'chip-badge.scss',\n})\nexport class ChipBadgeExample {\n    public render() {\n        return [\n            <limel-chip text=\"Batman\" icon=\"batman_old\" badge={2005} />,\n            <limel-chip text=\"Batman\" icon=\"batman_new\" badge=\"NEW\" />,\n        ];\n    }\n}\n"},{"filename":"chip-badge.scss","type":"scss","source":":host {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-button.tsx","fileName":"chip-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-button","overview":"Chip as button\nTypically, a chip is used to trigger an action or act as an input element.\nThis is why the component generates a `<button>` element in the DOM to give\na more semantically correct clues to assistive technologies.\n\nTo trigger these actions, you will only need to handle the `onClick`\nevent on the component.","usage":{},"docs":"Chip as button\nTypically, a chip is used to trigger an action or act as an input element.\nThis is why the component generates a `<button>` element in the DOM to give\na more semantically correct clues to assistive technologies.\n\nTo trigger these actions, you will only need to handle the `onClick`\nevent on the component.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-button":["limel-chip","limel-example-controls","limel-checkbox"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-button.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Chip as button\n * Typically, a chip is used to trigger an action or act as an input element.\n * This is why the component generates a `<button>` element in the DOM to give\n * a more semantically correct clues to assistive technologies.\n *\n * To trigger these actions, you will only need to handle the `onClick`\n * event on the component.\n */\n@Component({\n    tag: 'limel-example-chip-button',\n    shadow: true,\n})\nexport class ChipButtonExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private selected: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    @State()\n    private invalid: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip\n                text=\"FunnyCats\"\n                icon=\"hashtag\"\n                onClick={this.onClick}\n                disabled={this.disabled}\n                selected={this.selected}\n                readonly={this.readonly}\n                invalid={this.invalid}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.selected}\n                    label=\"Selected\"\n                    onChange={this.setSelected}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private onClick() {\n        console.log('Chip is clicked.');\n    }\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setSelected = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.selected = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-filter.tsx","fileName":"chip-filter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-filter","overview":"Chip as filter\nChips are great candidates to visualize active filters.\nHowever, as chips are used for other purposes as well,\nwe need to make sure that the user understands that the chip is a filter,\njust by the look of it.\n\nBy setting the `type` to `filter`, the chip will be rendered with a distinct style\nsuitable for visualizing filters.\n\n:::note\nIn this mode, clicking on the chip should also toggle its `selected` state.\n:::","usage":{},"docs":"Chip as filter\nChips are great candidates to visualize active filters.\nHowever, as chips are used for other purposes as well,\nwe need to make sure that the user understands that the chip is a filter,\njust by the look of it.\n\nBy setting the `type` to `filter`, the chip will be rendered with a distinct style\nsuitable for visualizing filters.\n\n:::note\nIn this mode, clicking on the chip should also toggle its `selected` state.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip"],"dependencyGraph":{"limel-example-chip-filter":["limel-chip"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-filter.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Chip as filter\n * Chips are great candidates to visualize active filters.\n * However, as chips are used for other purposes as well,\n * we need to make sure that the user understands that the chip is a filter,\n * just by the look of it.\n *\n * By setting the `type` to `filter`, the chip will be rendered with a distinct style\n * suitable for visualizing filters.\n *\n * :::note\n * In this mode, clicking on the chip should also toggle its `selected` state.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-filter',\n    shadow: true,\n    styleUrl: 'chip-badge.scss',\n})\nexport class ChipFilterExample {\n    @State()\n    private selected: { [id: string]: boolean } = {};\n\n    public render() {\n        return [\n            <limel-chip\n                id=\"1\"\n                text=\"photos\"\n                icon=\"image_file\"\n                type=\"filter\"\n                onClick={() => this.handleClick('1')}\n                selected={this.selected['1']}\n            />,\n            <limel-chip\n                id=\"2\"\n                text=\"videos\"\n                icon=\"video_file\"\n                type=\"filter\"\n                onClick={() => this.handleClick('2')}\n                selected={this.selected['2']}\n            />,\n            <limel-chip\n                id=\"2\"\n                text=\"audios\"\n                icon=\"audio_file\"\n                type=\"filter\"\n                onClick={() => this.handleClick('3')}\n                selected={this.selected['3']}\n            />,\n        ];\n    }\n\n    private handleClick = (id: string) => {\n        this.selected = {\n            ...this.selected,\n            [id]: !this.selected[id],\n        };\n    };\n}\n"},{"filename":"chip-badge.scss","type":"scss","source":":host {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-icon-colors.tsx","fileName":"chip-icon-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-icon-color","overview":"Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","usage":{},"docs":"Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-example-chip-icon-color":["limel-chip-set"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-icon-colors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Chip Icon Color\n *\n * The color and background color of each chip's icon can be individually\n * configured.\n */\n@Component({\n    tag: 'limel-example-chip-icon-color',\n    shadow: true,\n})\nexport class ChipIconColorExample {\n    public render() {\n        return [\n            <limel-chip-set\n                value={[\n                    {\n                        id: 1,\n                        text: 'Badger',\n                        icon: 'badger',\n                    },\n                    {\n                        id: 2,\n                        text: 'Elephant',\n                        icon: {\n                            name: 'elephant',\n                            color: 'rgb(var(--color-magenta-default))',\n                        },\n                    },\n                    {\n                        id: 3,\n                        text: 'Caterpillar',\n                        icon: {\n                            name: 'caterpillar',\n                            backgroundColor: 'rgb(var(--color-orange-default))',\n                        },\n                    },\n                    {\n                        id: 4,\n                        text: 'Fish',\n                        icon: {\n                            name: 'fish',\n                            color: 'rgb(var(--color-yellow-light))',\n                            backgroundColor: 'rgb(var(--color-indigo-darker))',\n                        },\n                    },\n                ]}\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-icon-color.tsx","fileName":"chip-icon-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-icon-colors","overview":"Icon color\nUsing the `Icon` interface, you can specify colors for the icon.","usage":{},"docs":"Icon color\nUsing the `Icon` interface, you can specify colors for the icon.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip"],"dependencyGraph":{"limel-example-chip-icon-colors":["limel-chip"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-icon-color.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Icon color\n * Using the `Icon` interface, you can specify colors for the icon.\n */\n@Component({\n    tag: 'limel-example-chip-icon-colors',\n    shadow: true,\n})\nexport class ChipIconColorsExample {\n    public render() {\n        const icon = {\n            name: 'filled_star',\n            color: 'rgb(var(--color-yellow-default))',\n            backgroundColor: 'rgb(var(--color-blue-dark))',\n        };\n\n        return <limel-chip text=\"Golden star\" icon={icon} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-image.tsx","fileName":"chip-image.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-image","overview":"Picture instead of icon\nUsing the `Img` interface, you can specify an image to be displayed on the chip.\n\n:::note\nThe specified image will be displayed instead of the icon, if both are provided.\n:::","usage":{},"docs":"Picture instead of icon\nUsing the `Img` interface, you can specify an image to be displayed on the chip.\n\n:::note\nThe specified image will be displayed instead of the icon, if both are provided.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip"],"dependencyGraph":{"limel-example-chip-image":["limel-chip"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-image.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Picture instead of icon\n * Using the `Img` interface, you can specify an image to be displayed on the chip.\n *\n * :::note\n * The specified image will be displayed instead of the icon, if both are provided.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-image',\n    shadow: true,\n})\nexport class ChipImageExample {\n    public render() {\n        const icon = {\n            name: 'filled_star',\n            color: 'rgb(var(--color-yellow-default))',\n        };\n\n        const image = {\n            src: 'https://lundalogik.github.io/lime-elements/780af2a6-d3d1-4593-8642-f03210d09271.png',\n            alt: 'A picture of Lucy Chyzhova, UX designer at Lime Technologies',\n        };\n\n        return <limel-chip text=\"Lucy Chyzhova\" icon={icon} image={image} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-link.tsx","fileName":"chip-link.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-link","overview":"Chip as hyperlink\nFor accessibility and usability alike, if clicking on a chip should\nresult in any kind of navigation, it is preferable to use a link,\nrather than a button.\n\nThat way, the user can choose to, for example, open the link in a new tab.\nFor this reason, we suggest always providing a Link with\nthe URL representing the target state of the navigation.","usage":{},"docs":"Chip as hyperlink\nFor accessibility and usability alike, if clicking on a chip should\nresult in any kind of navigation, it is preferable to use a link,\nrather than a button.\n\nThat way, the user can choose to, for example, open the link in a new tab.\nFor this reason, we suggest always providing a Link with\nthe URL representing the target state of the navigation.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip"],"dependencyGraph":{"limel-example-chip-link":["limel-chip"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-link.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Link } from '@limetech/lime-elements';\n\n/**\n * Chip as hyperlink\n * For accessibility and usability alike, if clicking on a chip should\n * result in any kind of navigation, it is preferable to use a link,\n * rather than a button.\n *\n * That way, the user can choose to, for example, open the link in a new tab.\n * For this reason, we suggest always providing a Link with\n * the URL representing the target state of the navigation.\n */\n@Component({\n    tag: 'limel-example-chip-link',\n    shadow: true,\n})\nexport class ChipLinkExample {\n    link: Link = {\n        href: 'https://github.com',\n        title: 'Open Github',\n        target: '_blank',\n    };\n\n    public render() {\n        return (\n            <limel-chip\n                text=\"Github\"\n                icon=\"github_copyrighted\"\n                link={this.link}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-loading.tsx","fileName":"chip-loading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-loading","overview":"Loading state\nSetting the `loading` to `true` puts the component in the `loading` state,\nand renders an indeterminate progress indicator inside the chip.\n\n:::note\nNote that this does _not_ disable the interactivity of the chip,\nand most probably you do not need it to be disabled either.\nIf the chip should be disabled while loading, the\n`disabled` property should separately be set to `true` as well.\n:::\n:::tip\nConsider using [aria-live](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live)\nwhere appropriate, or to inform the user about what is being loaded\nuse a [tooltip](#/component/limel-tooltip) on the component.\nThis is mainly to improve the accessibility for users of assistive technologies.\n:::","usage":{},"docs":"Loading state\nSetting the `loading` to `true` puts the component in the `loading` state,\nand renders an indeterminate progress indicator inside the chip.\n\n:::note\nNote that this does _not_ disable the interactivity of the chip,\nand most probably you do not need it to be disabled either.\nIf the chip should be disabled while loading, the\n`disabled` property should separately be set to `true` as well.\n:::\n:::tip\nConsider using [aria-live](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live)\nwhere appropriate, or to inform the user about what is being loaded\nuse a [tooltip](#/component/limel-tooltip) on the component.\nThis is mainly to improve the accessibility for users of assistive technologies.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-loading":["limel-chip","limel-example-controls","limel-checkbox"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-loading.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Loading state\n * Setting the `loading` to `true` puts the component in the `loading` state,\n * and renders an indeterminate progress indicator inside the chip.\n *\n * :::note\n * Note that this does _not_ disable the interactivity of the chip,\n * and most probably you do not need it to be disabled either.\n * If the chip should be disabled while loading, the\n * `disabled` property should separately be set to `true` as well.\n * :::\n * :::tip\n * Consider using [aria-live](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live)\n * where appropriate, or to inform the user about what is being loaded\n * use a [tooltip](#/component/limel-tooltip) on the component.\n * This is mainly to improve the accessibility for users of assistive technologies.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-loading',\n    shadow: true,\n    styleUrl: 'chip-loading.scss',\n})\nexport class ChipLoadingExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    @State()\n    private invalid: boolean = false;\n\n    @State()\n    public loading = false;\n\n    public render() {\n        return [\n            <limel-chip\n                text=\"FunnyCats\"\n                icon=\"hashtag\"\n                onClick={this.onClick}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                loading={this.loading}\n                badge={this.loading ? null : '123'}\n            />,\n            <limel-chip\n                text={this.loading ? 'Loading...' : 'FunnyCats'}\n                onClick={this.onClick}\n                disabled={this.disabled}\n                removable={true}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                loading={this.loading}\n                aria-live=\"polite\"\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Loading\"\n                    checked={this.loading}\n                    onChange={this.setLoading}\n                />\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private onClick() {\n        console.log('Chip is clicked.');\n    }\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setLoading = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.loading = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"},{"filename":"chip-loading.scss","type":"scss","source":":host {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-menu.tsx","fileName":"chip-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-menu","overview":"When an array of menu items is provided, the chip will render\nan ellipsis menu with the supplied items. When an item is selected,\nthe `onMenuItemSelected` event will be emitted, reflecting the\n`value` of the selected item.\n\n:::note\nThis will hide the \"remove button\" on the chip, when `removable={true}`,\nas the remove button will automatically become the last item in the menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","usage":{},"docs":"When an array of menu items is provided, the chip will render\nan ellipsis menu with the supplied items. When an item is selected,\nthe `onMenuItemSelected` event will be emitted, reflecting the\n`value` of the selected item.\n\n:::note\nThis will hide the \"remove button\" on the chip, when `removable={true}`,\nas the remove button will automatically become the last item in the menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip","limel-example-value"],"dependencyGraph":{"limel-example-chip-menu":["limel-chip","limel-example-value"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-menu.tsx","type":"tsx","source":"import {\n    LimelChipCustomEvent,\n    ListSeparator,\n    MenuItem,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\n\n/**\n * When an array of menu items is provided, the chip will render\n * an ellipsis menu with the supplied items. When an item is selected,\n * the `onMenuItemSelected` event will be emitted, reflecting the\n * `value` of the selected item.\n *\n * :::note\n * This will hide the \"remove button\" on the chip, when `removable={true}`,\n * as the remove button will automatically become the last item in the menu.\n *\n * Clicking the remove button will emit the same `onRemove` event.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-menu',\n    shadow: true,\n})\nexport class ChipMenuExample {\n    @State()\n    private removeButtonClicked: boolean = false;\n\n    @State()\n    private menuItemSelected: MenuItem | ListSeparator = null;\n\n    @State()\n    private menuItems: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Email',\n            secondaryText: 'beffie@lime.tech',\n            icon: 'email_sign',\n            value: 1,\n        },\n        {\n            text: 'Direct phone',\n            secondaryText: '+46 987 654 321',\n            icon: 'phone',\n            value: 2,\n        },\n        {\n            text: 'Mobile',\n            secondaryText: '+46 123 456 789',\n            icon: 'touchscreen_smartphone',\n            value: 3,\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-chip\n                text=\"Beffie Kiaskompis\"\n                removable={true}\n                onRemove={this.handleRemove}\n                menuItems={this.menuItems}\n                onMenuItemSelected={this.handleMenuItemSelected}\n            />,\n            <limel-example-value\n                label=\"Menu item clicked\"\n                value={this.menuItemSelected}\n            />,\n            <limel-example-value\n                label=\"Remove\"\n                value={this.removeButtonClicked}\n            />,\n        ];\n    }\n\n    private handleRemove = () => {\n        this.removeButtonClicked = true;\n    };\n\n    private handleMenuItemSelected = (\n        event: LimelChipCustomEvent<MenuItem>\n    ) => {\n        this.menuItemSelected = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-progress.tsx","fileName":"chip-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-progress","overview":"Displaying a progress bar\nBy defining a numeric `progress` (from `0` to `100`),\nyou can display a progress bar on the chip\nto inform the user about an ongoing progress and also\nvisualize the amount of progress that has been made so far.\n\n:::important\n1. Do not use `loading={true}` and `progress` at the same time.\n2. When the progress has completed, unset the `progress` property!\n:::","usage":{},"docs":"Displaying a progress bar\nBy defining a numeric `progress` (from `0` to `100`),\nyou can display a progress bar on the chip\nto inform the user about an ongoing progress and also\nvisualize the amount of progress that has been made so far.\n\n:::important\n1. Do not use `loading={true}` and `progress` at the same time.\n2. When the progress has completed, unset the `progress` property!\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip","limel-example-controls","limel-slider"],"dependencyGraph":{"limel-example-chip-progress":["limel-chip","limel-example-controls","limel-slider"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-slider":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-progress.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Displaying a progress bar\n * By defining a numeric `progress` (from `0` to `100`),\n * you can display a progress bar on the chip\n * to inform the user about an ongoing progress and also\n * visualize the amount of progress that has been made so far.\n *\n * :::important\n * 1. Do not use `loading={true}` and `progress` at the same time.\n * 2. When the progress has completed, unset the `progress` property!\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-progress',\n    shadow: true,\n    styleUrl: 'chip-progress.scss',\n})\nexport class ChipProgressExample {\n    @State()\n    private progress = 60.4325;\n\n    private sliderMinValue = 0;\n    private sliderMaxValue = 100;\n\n    public render() {\n        return [\n            <limel-chip\n                text=\"resume.pdf\"\n                icon={{\n                    name: 'PDF_2',\n                    color: 'rgb(var(--color-red-default))',\n                }}\n                progress={this.progress}\n                removable={true}\n            />,\n            <limel-chip\n                text=\"my-cv.pdf\"\n                icon=\"PDF_2\"\n                progress={this.progress}\n                type=\"filter\"\n            />,\n            <limel-chip\n                class=\"custom-progress-color\"\n                text=\"I've my own progress color\"\n                progress={this.progress}\n                badge=\"nice\"\n            />,\n            <limel-example-controls>\n                <limel-slider\n                    label=\"Progress value\"\n                    unit=\" %\"\n                    value={this.progress}\n                    valuemax={this.sliderMaxValue}\n                    valuemin={this.sliderMinValue}\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<number>) => {\n        this.progress = event.detail;\n    };\n}\n"},{"filename":"chip-progress.scss","type":"scss","source":":host {\n    padding-top: 1rem;\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n}\n\nlimel-example-controls {\n    --example-controls-column-layout: auto-fit;\n    padding: 0.5rem;\n    flex-grow: 1;\n}\n\nlimel-slider {\n    width: 100%;\n}\n\n.custom-progress-color {\n    --chip-progress-color: rgb(var(--color-orange-default));\n    --chip-max-width: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-readonly-border.tsx","fileName":"chip-readonly-border.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-readonly-border","overview":"Border color\nIn readonly state, the border color of the chip can be customized,\nusing `--chip-readonly-border-color`.","usage":{},"docs":"Border color\nIn readonly state, the border color of the chip can be customized,\nusing `--chip-readonly-border-color`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip"],"dependencyGraph":{"limel-example-chip-readonly-border":["limel-chip"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-readonly-border.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Border color\n * In readonly state, the border color of the chip can be customized,\n * using `--chip-readonly-border-color`.\n */\n@Component({\n    tag: 'limel-example-chip-readonly-border',\n    shadow: true,\n    styleUrl: 'chip-readonly-border.scss',\n})\nexport class ChipReadonlyBorderExample {\n    public render() {\n        const icon = {\n            name: 'sent',\n            color: 'rgb(var(--color-green-default))',\n        };\n\n        return <limel-chip text=\"Delivered\" icon={icon} readonly={true} />;\n    }\n}\n"},{"filename":"chip-readonly-border.scss","type":"scss","source":"limel-chip {\n    --chip-readonly-border-color: rgb(var(--color-green-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-remove.tsx","fileName":"chip-remove.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-removable","overview":"Removable chips\nChips can display a remove button,\nwhen their `removable` prop is set to `true`.\n\nThis is typically used when the chip is used in a chip-set,\nwhere each chip visualizes a chosen option.\n\n:::tip\nWhen the chip is focused using the keyboard, the user can press\nthe <kbd>Delete</kbd> or <kbd>Backspace</kbd> keys to\ntrigger the same remove `event`.\n:::","usage":{},"docs":"Removable chips\nChips can display a remove button,\nwhen their `removable` prop is set to `true`.\n\nThis is typically used when the chip is used in a chip-set,\nwhere each chip visualizes a chosen option.\n\n:::tip\nWhen the chip is focused using the keyboard, the user can press\nthe <kbd>Delete</kbd> or <kbd>Backspace</kbd> keys to\ntrigger the same remove `event`.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip","limel-example-value"],"dependencyGraph":{"limel-example-chip-removable":["limel-chip","limel-example-value"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-remove.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Removable chips\n * Chips can display a remove button,\n * when their `removable` prop is set to `true`.\n *\n * This is typically used when the chip is used in a chip-set,\n * where each chip visualizes a chosen option.\n *\n * :::tip\n * When the chip is focused using the keyboard, the user can press\n * the <kbd>Delete</kbd> or <kbd>Backspace</kbd> keys to\n * trigger the same remove `event`.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-removable',\n    shadow: true,\n})\nexport class ChipRemoveExample {\n    @State()\n    private removeButtonClicked: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip\n                text=\"My filter\"\n                badge={123}\n                removable={true}\n                onRemove={this.handleRemove}\n            />,\n            <limel-example-value\n                label=\"Remove\"\n                value={this.removeButtonClicked}\n            />,\n        ];\n    }\n\n    private handleRemove = () => {\n        this.removeButtonClicked = true;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set.tsx","fileName":"chip-set.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set","overview":"Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","usage":{},"docs":"Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example with no `type` set\n *\n * May be useful as a read-only presentation of a collection of tags, or\n * similar.\n *\n * Depending on the use case, you may also wish to consider\n * [limel-button](#/component/limel-button/) or\n * [limel-button-group](#/component/limel-button-group/).\n */\n@Component({\n    tag: 'limel-example-chip-set',\n    shadow: true,\n})\nexport class ChipSetExample {\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Tags\"\n                disabled={this.disabled}\n                onInteract={this.handleInteraction}\n                value={[\n                    {\n                        id: 1,\n                        text: 'Fruit',\n                    },\n                    {\n                        id: 2,\n                        text: 'Green',\n                    },\n                    {\n                        id: 3,\n                        text: 'Sour',\n                    },\n                ]}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleInteraction = (event) => {\n        console.log(event.detail);\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-choice.tsx","fileName":"chip-set-choice.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-choice","overview":"Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","usage":{},"docs":"Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set-choice":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-choice.tsx","type":"tsx","source":"import { Chip } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Choice chip set\n *\n * Only one option can be selected at once. Kind of like radio-buttons, but the\n * user can deselect the chosen option too. Good as an alternative to using a\n * `select` when there are only a few options.\n */\n@Component({\n    tag: 'limel-example-chip-set-choice',\n    shadow: true,\n})\nexport class ChipSetChoiceExample {\n    @State()\n    private chips: Chip[] = [\n        {\n            id: 1,\n            text: 'Lime',\n            icon: 'citrus',\n        },\n        {\n            id: 2,\n            text: 'Apple',\n            selected: true,\n            icon: 'apple',\n        },\n        {\n            id: 3,\n            text: 'Banana',\n            icon: 'banana',\n        },\n    ];\n\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip-set\n                disabled={this.disabled}\n                type=\"choice\"\n                label=\"Thirst quencher with a twist of\"\n                onChange={this.handleChange}\n                value={this.chips}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-composite.tsx","fileName":"chip-set-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-chip-set-composite":["limel-chip-set","limel-example-event-printer","limel-example-controls","limel-form"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\nimport { Chip, FormSchema, Languages } from '@limetech/lime-elements';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-chip-set-composite',\n    shadow: true,\n})\nexport class ChipSetCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        language: 'en' as Languages,\n        value: [\n            {\n                id: 'dog',\n                text: 'Dog',\n                icon: 'dog',\n            },\n            {\n                id: 'cat',\n                text: 'Cat',\n                icon: 'cat',\n            },\n        ] as Chip[],\n        type: 'choice' as any,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n        this.schema.properties.value.lime = {\n            layout: {\n                colSpan: 'all',\n            },\n        };\n        this.schema.definitions.Chip.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-chip-set {...this.props} onChange={this.handleChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<Chip | Chip[]>) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-filter.tsx","fileName":"chip-set-filter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-filter","overview":"Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","usage":{},"docs":"Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set-filter":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-filter.tsx","type":"tsx","source":"import { Chip } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Filter chip set\n *\n * Any number of options can be selected at once, including none. As the name\n * suggests, this one is good for filtering things.\n */\n@Component({\n    tag: 'limel-example-chip-set-filter',\n    shadow: true,\n})\nexport class ChipSetFilterExample {\n    @State()\n    private chips: Chip[] = [\n        {\n            id: 1,\n            text: 'Lime',\n        },\n        {\n            id: 2,\n            text: 'Apple',\n            selected: true,\n        },\n        {\n            id: 3,\n            text: 'Banana',\n        },\n    ];\n\n    @State()\n    private disabled: boolean = false;\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Include fruits of type:\"\n                disabled={this.disabled}\n                type=\"filter\"\n                onChange={this.handleChange}\n                value={this.chips}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        console.log(event.detail);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-filter-badge.tsx","fileName":"chip-set-filter-badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-filter-badge","overview":"Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","usage":{},"docs":"Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-chip-set-filter-badge":["limel-chip-set","limel-example-controls","limel-checkbox"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-filter-badge.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nconst CHIP_SELECET_ALL_ID = 1;\n\n/**\n * Filter chip set with badge.\n * The badge can be used to visulize the number of results using each filter.\n */\n@Component({\n    tag: 'limel-example-chip-set-filter-badge',\n    shadow: true,\n})\nexport class ChipSetFilterBadgeExample {\n    @State()\n    private chips: Chip[] = [\n        {\n            id: 1,\n            text: 'All',\n        },\n        {\n            id: 2,\n            text: 'Lime',\n            badge: 5,\n        },\n        {\n            id: 3,\n            text: 'Apple',\n            selected: true,\n            badge: 0,\n        },\n        {\n            id: 4,\n            text: 'Banana',\n            badge: 1,\n        },\n    ];\n\n    @State()\n    private disabled: boolean = false;\n\n    constructor() {\n        this.setAllBadgeValue();\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                label=\"Include fruits of type:\"\n                disabled={this.disabled}\n                type=\"filter\"\n                onChange={this.handleChange}\n                value={this.chips}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip>) => {\n        const updatedChips = [...this.chips];\n        if (event.detail.id !== CHIP_SELECET_ALL_ID) {\n            updatedChips[0].selected = false;\n        }\n\n        if (event.detail.id === CHIP_SELECET_ALL_ID && event.detail.selected) {\n            for (const chip of updatedChips) {\n                chip.selected = false;\n            }\n        }\n\n        const index = this.chips.findIndex(\n            (chips) => chips.id === event.detail.id\n        );\n        updatedChips[index] = event.detail;\n        this.chips = updatedChips;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setAllBadgeValue() {\n        let badgeValue = 0;\n        for (const chip of this.chips) {\n            if (chip.id !== CHIP_SELECET_ALL_ID) {\n                badgeValue += chip.badge;\n            }\n        }\n        this.chips[0].badge = badgeValue;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-image.tsx","fileName":"chip-image.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-image","overview":"Chips with images\n\nYou can use images instead of icons on chips.\n\n:::note\nThe image will be displayed instead of the icon, if both are provided.\n:::","usage":{},"docs":"Chips with images\n\nYou can use images instead of icons on chips.\n\n:::note\nThe image will be displayed instead of the icon, if both are provided.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-example-chip-set-image":["limel-chip-set"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-image.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Chips with images\n *\n * You can use images instead of icons on chips.\n *\n * :::note\n * The image will be displayed instead of the icon, if both are provided.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-set-image',\n    shadow: true,\n})\nexport class ChipSetImageExample {\n    public render() {\n        return [\n            <limel-chip-set\n                value={[\n                    {\n                        id: 1,\n                        text: 'Kiarokh',\n                        icon: {\n                            name: 'honey_badger',\n                            color: 'rgb(var(--color-yellow-default))',\n                        },\n                        image: {\n                            src: 'https://lundalogik.github.io/lime-elements/2e86c284-d190-4c41-8da2-4de50103a0cd.png',\n                            alt: 'A picture of Kiarokh Moattar, Product Designer at Lime Technologies',\n                        },\n                    },\n                    {\n                        id: 2,\n                        text: 'Lucy',\n                        image: {\n                            src: 'https://lundalogik.github.io/lime-elements/780af2a6-d3d1-4593-8642-f03210d09271.png',\n                            alt: 'A picture of Lucy Chyzhova, UX Designer at Lime Technologies',\n                        },\n                    },\n                    {\n                        id: 3,\n                        text: 'Adrian',\n                        image: {\n                            src: 'https://lundalogik.github.io/lime-elements/0e6f74c0-11d9-465b-aac6-44f33da3cb7c.png',\n                            alt: 'A picture of Adrian Schmidt, Head of Smooth Operations at Lime Technologies',\n                        },\n                    },\n                ]}\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-input.tsx","fileName":"chip-set-input.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-input","overview":"Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.\n\n:::note\nSetting `readonly` to `true` when the `type=\"input\"`, the chips that are displayed\nwill remain interactive. This means that the user can still click on them.\nHowever, the chips cannot be removed or added in `readonly` mode.\n:::","usage":{},"docs":"Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.\n\n:::note\nSetting `readonly` to `true` when the `type=\"input\"`, the chips that are displayed\nwill remain interactive. This means that the user can still click on them.\nHowever, the chips cannot be removed or added in `readonly` mode.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-controls","limel-input-field","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-chip-set-input":["limel-chip-set","limel-example-controls","limel-input-field","limel-checkbox","limel-example-value"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-input.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER } from '../../../util/keycodes';\n\n/**\n * Input chip set\n *\n * Useful for collections of tags or labels. Can also be used as an advanced\n * search input, with leading icon and a delimiter between search terms.\n *\n * :::note\n * Setting `readonly` to `true` when the `type=\"input\"`, the chips that are displayed\n * will remain interactive. This means that the user can still click on them.\n * However, the chips cannot be removed or added in `readonly` mode.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-set-input',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private required: boolean = false;\n\n    @State()\n    private readonly: boolean = false;\n\n    @State()\n    private invalid: boolean = false;\n\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private maxItems = 0;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    @State()\n    private hasLeadingIcon: boolean = false;\n\n    @State()\n    private delimiter: string = null;\n\n    constructor() {\n        this.value = [\n            this.createChip('Elephant'),\n            this.createChip('Caterpillar'),\n            this.createChip('Badger'),\n            this.createChip('Fish'),\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                label=\"Animal\"\n                helperText=\"For some animal names, icons are displayed on the chips\"\n                searchLabel=\"Type an animal name & press Enter\"\n                value={this.value}\n                required={this.required}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                disabled={this.disabled}\n                leadingIcon={this.hasLeadingIcon ? 'search' : null}\n                maxItems={this.maxItems}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onInteract={this.handleInteraction}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n                delimiter={this.delimiter}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '9rem' }}\n            >\n                <limel-input-field\n                    label=\"Max items\"\n                    value={this.maxItems.toString()}\n                    type=\"number\"\n                    onChange={this.setMaxItems}\n                />\n                <limel-checkbox\n                    label=\"Empty input on blur\"\n                    onChange={this.setEmptyInputOnBlur}\n                    checked={this.emptyInputOnBlur}\n                />\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                    checked={this.disabled}\n                />\n                <limel-checkbox\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                    checked={this.readonly}\n                />\n                <limel-checkbox\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                    checked={this.required}\n                />\n                <limel-checkbox\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                    checked={this.invalid}\n                />\n                <limel-checkbox\n                    label={'Leading icon'}\n                    onChange={this.setLeadingIcon}\n                    checked={this.hasLeadingIcon}\n                />\n                <limel-checkbox\n                    label=\"Use delimiters\"\n                    onChange={this.useDelimiters}\n                    checked={this.delimiter !== null}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleInput = (\n        event: LimelChipSetCustomEvent<string> | InputEvent\n    ) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (event.key === ENTER && this.textValue.trim()) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        console.log(event.detail);\n        this.value = event.detail;\n    };\n\n    private handleInteraction = (event: CustomEvent<Chip>) => {\n        console.log('Chip interacted with:', event.detail);\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n            icon: `${name}`.toLowerCase(),\n        };\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        this.invalid = event.detail;\n    };\n\n    private setEmptyInputOnBlur = (event: CustomEvent<boolean>) => {\n        this.emptyInputOnBlur = event.detail;\n    };\n\n    private setLeadingIcon = (event: CustomEvent<boolean>) => {\n        this.hasLeadingIcon = event.detail;\n    };\n\n    private setMaxItems = (event: CustomEvent<string>) => {\n        this.maxItems = +event.detail;\n    };\n\n    private useDelimiters = (event: CustomEvent<boolean>) => {\n        this.delimiter = event.detail ? '&' : null;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-input-type-search.tsx","fileName":"chip-set-input-type-search.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-input-type-search","overview":"Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","usage":{},"docs":"Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-example-chip-set-input-type-search":["limel-chip-set"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-input-type-search.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER } from '../../../util/keycodes';\n\n/**\n * Input chip set with `inputType` of `search`\n *\n * When autocorrection is potentially harmful for the user experience and for\n * your intended result, use `search` as `inputType`. For instance, for a\n * question like \"Please suggest unique names for our newly founded company\",\n * you probably don't want autocorrection, because you would expect many\n * valid suggestions to not exist in the autocorrection dictionary. Therefore,\n * you do not want the respondent's input to be regarded as a typo and to be\n * changed when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.\n */\n@Component({\n    tag: 'limel-example-chip-set-input-type-search',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private maxItems = 3;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    constructor() {\n        this.value = [this.createChip('Lundalogik'), this.createChip('Lime')];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label=\"Suggest three unique names for our newly founded company\"\n                maxItems={this.maxItems}\n                value={this.value}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n            />,\n        ];\n    }\n\n    private handleInput = (\n        event: LimelChipSetCustomEvent<string> | InputEvent\n    ) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (event.key === ENTER && this.textValue.trim()) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n        };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-input-type-text.tsx","fileName":"chip-set-input-type-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-input-type-text","overview":"Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","usage":{},"docs":"Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set"],"dependencyGraph":{"limel-example-chip-set-input-type-text":["limel-chip-set"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-input-type-text.tsx","type":"tsx","source":"import { Chip, LimelChipSetCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { ENTER } from '../../../util/keycodes';\n\n/**\n * Input chip set with `inputType` of `text`\n *\n * There is a slight difference in the way browsers treat `input` field\n * with `type=\"text\"` and `type=\"search\"`. You can read more about this\n * difference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\n * but the most important difference in this case is activation of the\n * autocorrection feature on most smart devices.\n *\n * When a user makes a spelling mistake while typing in an input field with\n * `type=\"text\"`, the mistake will be corrected automatically, right after they\n * press <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\n * do not auto correct the user's input.\n *\n * If you want to use limel-chip-set in a form context, where autocorrection is\n * a good thing, use `text` as `inputType`. It is important to know that the\n * chip-set component creates a chip from the autocorrected value, after the\n * user has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\n * existing typos! For example, for a question like \"Please type five of your\n * favorite fruits\", you would want to avoid misspellings, to collect higher\n * quality data.\n */\n@Component({\n    tag: 'limel-example-chip-set-input-type-text',\n    shadow: true,\n})\nexport class ChipSetInputExample {\n    @State()\n    private value: Chip[];\n\n    @State()\n    private textValue = '';\n\n    @State()\n    private maxItems = 5;\n\n    @State()\n    private emptyInputOnBlur: boolean = true;\n\n    constructor() {\n        this.value = [\n            this.createChip('Apple'),\n            this.createChip('Pear'),\n            this.createChip('Strawberry'),\n            this.createChip('Banana'),\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"text\"\n                label=\"Type five of your favorite fruits.\"\n                helperText=\"For some fruit names, icons are displayed on the chips\"\n                value={this.value}\n                maxItems={this.maxItems}\n                onChange={this.handleChange}\n                onInput={this.handleInput}\n                onKeyUp={this.onKeyUp}\n                emptyInputOnBlur={this.emptyInputOnBlur}\n            />,\n        ];\n    }\n\n    private handleInput = (\n        event: LimelChipSetCustomEvent<string> | InputEvent\n    ) => {\n        if (event instanceof CustomEvent) {\n            this.textValue = event.detail;\n        }\n    };\n\n    private onKeyUp = (event: KeyboardEvent) => {\n        if (event.key === ENTER && this.textValue.trim()) {\n            this.value = [\n                ...this.value,\n                this.createChip(this.textValue.trim()),\n            ];\n            this.textValue = '';\n        }\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n    };\n\n    private createChip = (name: string): Chip => {\n        return {\n            id: name,\n            text: name,\n            removable: true,\n            icon: `${name}`.toLowerCase(),\n        };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples","filePath":"./src/components/chip-set/examples/chip-set-input-type-with-menu-items.tsx","fileName":"chip-set-input-type-with-menu-items.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip-set/examples/usage","tag":"limel-example-chip-set-input-type-with-menu-items","overview":"Input chip set, containing items with menus\nWhile chips inside a chip set of `type=\"input\"` can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","usage":{},"docs":"Input chip set, containing items with menus\nWhile chips inside a chip set of `type=\"input\"` can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip-set","limel-example-value"],"dependencyGraph":{"limel-example-chip-set-input-type-with-menu-items":["limel-chip-set","limel-example-value"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-set-input-type-with-menu-items.tsx","type":"tsx","source":"import { Component, Host, State, h } from '@stencil/core';\nimport {\n    LimelChipCustomEvent,\n    LimelChipSetCustomEvent,\n} from '@limetech/lime-elements';\nimport { MenuItem } from '../../menu/menu.types';\nimport { Chip } from '../chip.types';\nimport { ListSeparator } from '../../list/list-item.types';\n\nconst MENU_ITEMS: Array<MenuItem | ListSeparator> = [\n    {\n        text: 'Edit permissions',\n        secondaryText: 'Can make changes & manage sharing',\n        icon: 'keyhole_shield',\n        value: 1,\n    },\n    {\n        text: 'Direct phone',\n        secondaryText: '+46 123 456 789 0',\n        icon: 'phone',\n        value: 2,\n    },\n];\n\n/**\n * Input chip set, containing items with menus\n * While chips inside a chip set of `type=\"input\"` can be clicked on, resulting in\n * an action, they can also have an ellipsis menu which will provide the end users with\n * additional actions.\n *\n * When a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\n * will be emitted, reflecting the `value` of the selected item.\n *\n * :::note\n * When a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\n * chip will be automatically added as the last item in the ellipsis menu.\n *\n * Clicking the remove button will emit the same `onRemove` event.\n * :::\n */\n@Component({\n    tag: 'limel-example-chip-set-input-type-with-menu-items',\n    shadow: true,\n})\nexport class ChipSetInputTypeWithMenuItemsExample {\n    @State()\n    private selectedItem: MenuItem | ListSeparator = null;\n\n    @State()\n    private value: Chip[] = [\n        {\n            id: 1,\n            text: 'Lucy',\n            image: {\n                src: 'https://lundalogik.github.io/lime-elements/780af2a6-d3d1-4593-8642-f03210d09271.png',\n                alt: 'A picture of Lucy Chyzhova, UX Designer at Lime Technologies',\n            },\n            removable: true,\n            menuItems: MENU_ITEMS,\n            value: 1,\n        },\n        {\n            id: 2,\n            text: 'Befkadu',\n            removable: true,\n            icon: 'person_male',\n            value: 2,\n        },\n    ];\n\n    public render() {\n        return (\n            <Host onMenuItemSelected={this.onMenuItemSelected}>\n                <limel-chip-set\n                    type=\"input\"\n                    inputType=\"text\"\n                    label=\"Meeting participants\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                    onInteract={this.handleInteraction}\n                />\n                <limel-example-value\n                    label=\"Selected menu item\"\n                    value={this.selectedItem}\n                />\n            </Host>\n        );\n    }\n\n    private handleInteraction = (event: CustomEvent<Chip>) => {\n        console.log('Interaction', event.detail);\n    };\n\n    private handleChange = (event: LimelChipSetCustomEvent<Chip[]>) => {\n        this.value = event.detail;\n        this.selectedItem = null;\n    };\n\n    private onMenuItemSelected = (event: LimelChipCustomEvent<MenuItem>) => {\n        event.stopPropagation();\n\n        this.selectedItem = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples","filePath":"./src/components/chip/examples/chip-size.tsx","fileName":"chip-size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/chip/examples/usage","tag":"limel-example-chip-size","overview":"Size\nWhen the `size` property is set to `small`, the chip will render\nwith a smaller height and gap.","usage":{},"docs":"Size\nWhen the `size` property is set to `small`, the chip will render\nwith a smaller height and gap.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-chip","limel-example-controls","limel-select"],"dependencyGraph":{"limel-example-chip-size":["limel-chip","limel-example-controls","limel-select"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"chip-size.tsx","type":"tsx","source":"import {\n    ListSeparator,\n    MenuItem,\n    Option,\n    LimelSelectCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, Host, State, h } from '@stencil/core';\n\n/**\n * Size\n * When the `size` property is set to `small`, the chip will render\n * with a smaller height and gap.\n */\n@Component({\n    tag: 'limel-example-chip-size',\n    shadow: true,\n    styleUrl: 'chip-loading.scss',\n})\nexport class ChipSizeExample {\n    @State()\n    private size: 'small' | 'default' = 'default';\n\n    @State()\n    private menuItems: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Email',\n            secondaryText: 'beffie@lime.tech',\n            icon: 'email_sign',\n            value: 1,\n        },\n        {\n            text: 'Direct phone',\n            secondaryText: '+46 987 654 321',\n            icon: 'phone',\n            value: 2,\n        },\n        {\n            text: 'Mobile',\n            secondaryText: '+46 123 456 789',\n            icon: 'touchscreen_smartphone',\n            value: 3,\n        },\n    ];\n\n    private sizeOptions: Option[] = [\n        { text: 'Default', value: 'default' },\n        { text: 'Small', value: 'small' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-chip\n                    text=\"Chip with menu\"\n                    removable={true}\n                    menuItems={this.menuItems}\n                    size={this.size}\n                />\n                <limel-chip\n                    text=\"Chip with badge\"\n                    icon=\"flower\"\n                    badge=\"badge\"\n                    size={this.size}\n                />\n                <limel-chip\n                    text=\"Removable chip\"\n                    removable={true}\n                    icon=\"trash\"\n                    size={this.size}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"Size\"\n                        value={this.getSelectedSize()}\n                        options={this.sizeOptions}\n                        onChange={this.handleSizeChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedSize = (): Option => {\n        return this.sizeOptions.find((option) => option.value === this.size);\n    };\n\n    private handleSizeChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.size = event.detail.value as 'small' | 'default';\n    };\n}\n"},{"filename":"chip-loading.scss","type":"scss","source":":host {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress.tsx","fileName":"circular-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress":["limel-input-field","limel-circular-progress"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressExample {\n    @State()\n    private value = 65;\n\n    public render() {\n        const value = `${this.value}`;\n\n        return [\n            <limel-input-field\n                label=\"Value\"\n                type=\"number\"\n                value={value}\n                onChange={this.handleChange}\n            />,\n            <limel-circular-progress value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = +event.detail;\n    };\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-css-variables.tsx","fileName":"circular-progress-css-variables.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-css-variables","overview":"Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","usage":{},"docs":"Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-css-variables":["limel-circular-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-css-variables.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Tweaking the style, using CSS variables\n * The component offers a few possibilities for tweaking its size and colors\n * using a few CSS variables.\n *\n * :::note\n * If you have tweaked component's size using size presets offered by the\n * `size` prop, the css variable of `--circular-progress-size` will not have any\n * effect.\n * :::\n * :::important\n * Make sure that the track color is lighter than the fill color. Otherwise the\n * UI will be very confusing for the users.\n * :::\n */\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-css-variables',\n    styleUrl: 'circular-progress-css-variables.scss',\n})\nexport class CircularProgressCssVariablesExample {\n    private value = 90;\n\n    public render() {\n        return <limel-circular-progress prefix=\"↗\" value={this.value} />;\n    }\n}\n"},{"filename":"circular-progress-css-variables.scss","type":"scss","source":":host {\n    --circular-progress-size: 8rem;\n    --circular-progress-fill-color: rgb(var(--color-orange-default));\n    --circular-progress-track-color: rgb(var(--color-orange-lighter));\n    --circular-progress-prefix-color: rgb(var(--color-cyan-light));\n    --circular-progress-text-color: rgb(var(--contrast-100));\n    --circular-progress-suffix-color: rgb(var(--contrast-800));\n    --circular-progress-background-color: rgb(var(--contrast-1100));\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(var(--contrast-600));\n    padding: 2rem;\n    border-radius: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-percentage-colors.tsx","fileName":"circular-progress-percentage-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-percentage-colors","overview":"Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages.","usage":{},"docs":"Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-percentage-colors":["limel-input-field","limel-circular-progress"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-percentage-colors.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Displaying percentage colors\n * At Lime Technologies we have a convention for displaying percentage colors.\n * The colors we use to display a range change with intervals of 10.\n * The color spectrum is not modifiable, and looks like\n * red → orange → yellow → green → teal.\n * To enable this feature, simply set `displayPercentageColors` to `true`.\n *\n * Try changing the value in the example below to see how colors change\n * for different percentages.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-percentage-colors',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressPercentageColorsExample {\n    @State()\n    private value = 5;\n\n    public render() {\n        const value = `${this.value}`;\n\n        return [\n            <limel-input-field\n                label=\"Value\"\n                type=\"number\"\n                value={value}\n                onChange={this.handleChange}\n            />,\n            <limel-circular-progress\n                value={this.value}\n                displayPercentageColors={true}\n            />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = +event.detail;\n    };\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-props.tsx","fileName":"circular-progress-props.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-props","overview":"Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","usage":{},"docs":"Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-props":["limel-circular-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-props.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Using the props\n * This component is initially designed to visualize a percentage on a scale of\n * zero to 100. However, you can easily visualize a progress in other scales,\n * simply by setting `maxValue`, `prefix` and `suffix`.\n *\n * Look at this example to see how the component displays an angle in a\n * 360-degrees scale, a 60-seconds scale, and a 5-stars rating.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-props',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressPropsExample {\n    private degree = 45;\n    private maxDegrees = 360;\n    private degrees = '°';\n\n    private second = 15;\n    private maxSeconds = 60;\n    private seconds = '\"';\n\n    private star = 4;\n    private maxStars = 5;\n    private stars = '⭐️';\n\n    private budget = 4000;\n    private maxBudget = 5000;\n    private increase = '+';\n    private currency = '$';\n\n    public render() {\n        return [\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.degree}\n                maxValue={this.maxDegrees}\n                suffix={this.degrees}\n            />,\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.second}\n                maxValue={this.maxSeconds}\n                suffix={this.seconds}\n            />,\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.star}\n                maxValue={this.maxStars}\n                suffix={this.stars}\n            />,\n            <limel-circular-progress\n                size=\"x-large\"\n                value={this.budget}\n                maxValue={this.maxBudget}\n                suffix={this.currency}\n                prefix={this.increase}\n            />,\n        ];\n    }\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples","filePath":"./src/components/circular-progress/examples/circular-progress-sizes.tsx","fileName":"circular-progress-sizes.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/examples/usage","tag":"limel-example-circular-progress-sizes","overview":"Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","usage":{},"docs":"Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-circular-progress"],"dependencyGraph":{"limel-example-circular-progress-sizes":["limel-circular-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"circular-progress-sizes.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Size presets\n * You can chose a preset size for the component to render it desireably,\n * using the `size` prop.\n * However, if these preset sizes do not suit your UI needs, do not specify them\n * and instead specify the size using the `--circular-progress-size` variable,\n * which must always be according to our\n * [size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n *\n * Note that the text size is automatically adjusted, based on the visual size\n * of the component.\n */\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-circular-progress-sizes',\n    styleUrl: 'circular-progress.scss',\n})\nexport class CircularProgressSizesExample {\n    private value = 92.6;\n\n    public render() {\n        return [\n            <limel-circular-progress value={this.value} size=\"x-small\" />,\n            <limel-circular-progress value={this.value} size=\"small\" />,\n            <limel-circular-progress value={this.value} size=\"medium\" />,\n            <limel-circular-progress value={this.value} size=\"large\" />,\n            <limel-circular-progress value={this.value} size=\"x-large\" />,\n        ];\n    }\n}\n"},{"filename":"circular-progress.scss","type":"scss","source":":host {\n    display: flex;\n    gap: 2rem;\n    align-items: center;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples","filePath":"./src/components/code-editor/examples/code-editor.tsx","fileName":"code-editor.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/usage","tag":"limel-example-code-editor","overview":"Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","usage":{},"docs":"Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-code-editor"],"dependencyGraph":{"limel-example-code-editor":["limel-code-editor"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { data } from '../../table/examples/birds';\n\n/**\n * Editable with automatic theme\n * Here you see an instance of the Code Editor component which allows editing the\n * presented code.\n * This instance has an `auto` `colorScheme`, which means it reacts\n * to the operating system's settings for preferred appearance (dark or light).\n */\n\n@Component({\n    tag: 'limel-example-code-editor',\n    shadow: true,\n    styleUrl: 'code-editor.scss',\n})\nexport class CodeExample {\n    @State()\n    private json: string = JSON.stringify(data, null, '    ');\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.json = event.detail;\n    };\n\n    public render() {\n        return (\n            <limel-code-editor\n                value={this.json}\n                language=\"json\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n}\n"},{"filename":"code-editor.scss","type":"scss","source":":host {\n    --code-editor-max-height: 20rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples","filePath":"./src/components/code-editor/examples/code-editor-with-linting-and-folding.tsx","fileName":"code-editor-with-linting-and-folding.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/usage","tag":"limel-example-code-editor-fold-lint","overview":"Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code.","usage":{},"docs":"Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-code-editor"],"dependencyGraph":{"limel-example-code-editor-fold-lint":["limel-code-editor"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor-with-linting-and-folding.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { data } from '../../table/examples/birds';\n\n/**\n * Editable with JSON linting and folding\n * Here you see an instance of the Code Editor component with linting and\n * folding support, which allows the user to see syntax errors in the JSON\n * code shown in the editor. Folding makes it easier to collapse larger pieces\n * of code.\n */\n\n@Component({\n    tag: 'limel-example-code-editor-fold-lint',\n    shadow: true,\n    styleUrl: 'code-editor.scss',\n})\nexport class CodeFoldAndLintExample {\n    @State()\n    private json: string = JSON.stringify(data, null, '    ');\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.json = event.detail;\n    };\n\n    public render() {\n        return (\n            <limel-code-editor\n                value={this.json}\n                language=\"json\"\n                lineNumbers={true}\n                lint={true}\n                fold={true}\n                onChange={this.handleChange}\n            />\n        );\n    }\n}\n"},{"filename":"code-editor.scss","type":"scss","source":":host {\n    --code-editor-max-height: 20rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples","filePath":"./src/components/code-editor/examples/code-editor-readonly-with-line-numbers.tsx","fileName":"code-editor-readonly-with-line-numbers.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/code-editor/examples/usage","tag":"limel-example-code-editor-readonly-with-line-numbers","overview":"Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","usage":{},"docs":"Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-code-editor"],"dependencyGraph":{"limel-example-code-editor-readonly-with-line-numbers":["limel-code-editor"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"code-editor-readonly-with-line-numbers.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Readonly, with line numbers and dark theme\n * Here you see a `readonly` instance of the Code Editor component. This means\n * you cannot edit the code. We also display line numbers here.\n * Additionally, this instance has a `dark` `colorScheme`, which means it does not\n * respect the operating system's settings for preferred appearance (dark or light).\n */\n@Component({\n    tag: 'limel-example-code-editor-readonly-with-line-numbers',\n    shadow: true,\n})\nexport class CodeExample {\n    private code: string = `class Animal {\n    move(distanceInMeters: number = 0) {\n        console.log(\\`Animal moved \\${distanceInMeters}m.\\`);\n    }\n}\n\nclass Dog extends Animal {\n    bark() {\n        console.log(\"Woof! Woof!\");\n    }\n}\n// Just a comment…\nconst dog = new Dog();\ndog.bark();\ndog.move(10);`;\n\n    public render() {\n        return (\n            <limel-code-editor\n                value={this.code}\n                language=\"typescript\"\n                readonly\n                line-numbers\n                colorScheme=\"dark\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-actions.tsx","fileName":"collapsible-section-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-actions","overview":"Header actions\nAn array of actions can be given to the component.\nThe actions will be rendered as icon buttons inside the Header.\nThey can allow for additional functionality like edit, delete, etc.\n\n:::important\nThe actions should be about the entire section or group of content,\nand affect it as a whole. This is due to how they are displayed along\nwith the header of the group.\n:::","usage":{},"docs":"Header actions\nAn array of actions can be given to the component.\nThe actions will be rendered as icon buttons inside the Header.\nThey can allow for additional functionality like edit, delete, etc.\n\n:::important\nThe actions should be about the entire section or group of content,\nand affect it as a whole. This is due to how they are displayed along\nwith the header of the group.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section","limel-icon"],"dependencyGraph":{"limel-example-collapsible-section-actions":["limel-collapsible-section","limel-icon"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-actions.tsx","type":"tsx","source":"import { Action } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Header actions\n * An array of actions can be given to the component.\n * The actions will be rendered as icon buttons inside the Header.\n * They can allow for additional functionality like edit, delete, etc.\n *\n * :::important\n * The actions should be about the entire section or group of content,\n * and affect it as a whole. This is due to how they are displayed along\n * with the header of the group.\n * :::\n */\n@Component({\n    tag: 'limel-example-collapsible-section-actions',\n    shadow: true,\n})\nexport class CollapsibleSectionActionsExample {\n    @State()\n    private action: Action = {\n        id: '0',\n        icon: 'test_tube',\n        label: 'No action clicked',\n    };\n\n    private actions = [\n        {\n            id: '1',\n            label: 'Delete',\n            icon: 'trash',\n        },\n        {\n            id: '2',\n            label: 'Update',\n            icon: 'available_updates',\n            disabled: true,\n        },\n        {\n            id: '3',\n            label: 'More',\n            icon: 'menu_2',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-collapsible-section\n                header=\"This section has actions\"\n                actions={this.actions}\n                onAction={this.handleAction}\n            >\n                <p>Last clicked action:</p>\n                <ul>\n                    <li>\n                        ID: <code>{this.action.id}</code>\n                    </li>\n                    <li>\n                        Label: <code>{this.action.label}</code>\n                    </li>\n                    <li>\n                        Icon: <code>{this.action.icon}</code>\n                        <limel-icon name={this.action.icon} size=\"x-small\" />\n                    </li>\n                </ul>\n            </limel-collapsible-section>\n        );\n    }\n\n    private handleAction = (event: CustomEvent<Action>) => {\n        this.action = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-basic.tsx","fileName":"collapsible-section-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-basic","overview":"Basic example\nAnything that is nested inside the `limel-collapsible-section` component\nwill be shown in the body of the section, only visible when the section is expanded.","usage":{},"docs":"Basic example\nAnything that is nested inside the `limel-collapsible-section` component\nwill be shown in the body of the section, only visible when the section is expanded.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section"],"dependencyGraph":{"limel-example-collapsible-section-basic":["limel-collapsible-section"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic example\n * Anything that is nested inside the `limel-collapsible-section` component\n * will be shown in the body of the section, only visible when the section is expanded.\n */\n@Component({\n    tag: 'limel-example-collapsible-section-basic',\n    shadow: true,\n})\nexport class CollapsibleSectionExample {\n    public render() {\n        return (\n            <limel-collapsible-section header=\"Header\">\n                <p>Body</p>\n            </limel-collapsible-section>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-css-props.tsx","fileName":"collapsible-section-css-props.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-css-props","overview":"Using the CSS properties","usage":{},"docs":"Using the CSS properties","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section"],"dependencyGraph":{"limel-example-collapsible-section-css-props":["limel-collapsible-section"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-css-props.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Using the CSS properties\n */\n@Component({\n    tag: 'limel-example-collapsible-section-css-props',\n    shadow: true,\n    styleUrl: 'collapsible-section.scss',\n})\nexport class CollapsibleSectionCssPropsExample {\n    public render() {\n        return (\n            <limel-collapsible-section header=\"Outer\">\n                <p>Lorem ipsum.</p>\n                <limel-collapsible-section header=\"Inner\">\n                    <p>Dolor sit amet.</p>\n                </limel-collapsible-section>\n            </limel-collapsible-section>\n        );\n    }\n}\n"},{"filename":"collapsible-section.scss","type":"scss","source":":host(limel-example-collapsible-section-css-props) {\n    --closed-header-background-color: rgba(var(--contrast-1700), 0.05);\n    --open-header-background-color: rgba(var(--contrast-1700), 0.1);\n    --body-background-color: rgba(var(--contrast-1700), 0.05);\n    --body-padding: 1rem;\n    --header-stroke-color: rgb(var(--color-sky-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-external-control.tsx","fileName":"collapsible-section-external-control.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-external-control","overview":"Opening and closing programmatically","usage":{},"docs":"Opening and closing programmatically","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-collapsible-section"],"dependencyGraph":{"limel-example-collapsible-section-external-control":["limel-button","limel-collapsible-section"],"limel-button":["limel-icon","limel-spinner"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-external-control.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Opening and closing programmatically\n */\n@Component({\n    tag: 'limel-example-collapsible-section-external-control',\n    shadow: true,\n})\nexport class CollapsibleSectionExternalControlExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                label={this.isOpen ? 'Close' : 'Open'}\n                primary={true}\n                onClick={this.toggle}\n                style={{ 'margin-bottom': '1rem' }}\n            />,\n            <limel-collapsible-section\n                header=\"Click me or click the button\"\n                isOpen={this.isOpen}\n                onOpen={this.onOpen}\n                onClose={this.onClose}\n            >\n                <p>Either way, the section will toggle!</p>\n            </limel-collapsible-section>,\n        ];\n    }\n\n    private toggle = () => {\n        this.isOpen = !this.isOpen;\n    };\n\n    private onOpen = () => {\n        console.log('Section opened');\n        this.isOpen = true;\n    };\n\n    private onClose = () => {\n        console.log('Section closed');\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-icon.tsx","fileName":"collapsible-section-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-icon","overview":"Icon","usage":{},"docs":"Icon","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section"],"dependencyGraph":{"limel-example-collapsible-section-icon":["limel-collapsible-section"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-icon.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Icon\n */\n@Component({\n    tag: 'limel-example-collapsible-section-icon',\n    shadow: true,\n})\nexport class CollapsibleSectionIconExample {\n    public render() {\n        const icon = {\n            name: 'ok',\n            title: 'Checkmark icon',\n            color: 'rgb(var(--color-green-default))',\n        };\n\n        return (\n            <limel-collapsible-section header=\"Header\" icon={icon}>\n                <p>Body</p>\n            </limel-collapsible-section>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-invalid.tsx","fileName":"collapsible-section-invalid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-invalid","overview":"Using the `invalid` prop\nWhen a section's `invalid` prop is set to `true`, it can display a visual feedback,\nas well as an accessible indication to the assistive technologies,\nto indicate that the content inside the section is invalid.","usage":{},"docs":"Using the `invalid` prop\nWhen a section's `invalid` prop is set to `true`, it can display a visual feedback,\nas well as an accessible indication to the assistive technologies,\nto indicate that the content inside the section is invalid.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section","limel-input-field"],"dependencyGraph":{"limel-example-collapsible-section-invalid":["limel-collapsible-section","limel-input-field"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-invalid.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Using the `invalid` prop\n * When a section's `invalid` prop is set to `true`, it can display a visual feedback,\n * as well as an accessible indication to the assistive technologies,\n * to indicate that the content inside the section is invalid.\n */\n\n@Component({\n    tag: 'limel-example-collapsible-section-invalid',\n    shadow: true,\n})\nexport class CollapsibleSectionInvalidExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-collapsible-section\n                header=\"This section can become invalid\"\n                invalid={this.isInvalid()}\n                isOpen={true}\n            >\n                <p>\n                    Typing an invalid email address here would result in failing\n                    the simple validation script, and accordingly will set the\n                    section as invalid as well.\n                </p>\n                <limel-input-field\n                    label=\"Field with custom validation\"\n                    placeholder=\"Type an email address here\"\n                    helperText={this.getHelperText()}\n                    value={this.value}\n                    onChange={this.onChange}\n                    invalid={this.isInvalid()}\n                />\n                <p>\n                    This way, if the collapsible section is closed, the user\n                    will still get informed about potential problems or nested\n                    invalid fields within the section.\n                </p>\n            </limel-collapsible-section>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private isInvalid = () => {\n        return !!(this.value && !this.value.endsWith('@test.com'));\n    };\n\n    private getHelperText = () => {\n        if (this.isInvalid()) {\n            return 'Please type a valid email address';\n        }\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-with-custom-header-component.tsx","fileName":"collapsible-section-with-custom-header-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-with-custom-header-component","overview":"With custom component in the header\nBy using the `slot=\"header\"` attribute on a custom UI elements, you can place it\nin the header area of the collapsible section alongside the default header text\nand header actions.\nThis can enable richer header content, like status indicators, badges, or icons.\n\n:::important\n1. The custom component is responsible for its own size, and should not\nvisually grow out of the header area.\n1. If the is not interactive, we recommend styling it with `pointer-events: none;`,\nto avoid blocking the user from interacting with the header. This is because\nthe entire surface of the header should be clickable to toggle visibility of the section.\n:::","usage":{},"docs":"With custom component in the header\nBy using the `slot=\"header\"` attribute on a custom UI elements, you can place it\nin the header area of the collapsible section alongside the default header text\nand header actions.\nThis can enable richer header content, like status indicators, badges, or icons.\n\n:::important\n1. The custom component is responsible for its own size, and should not\nvisually grow out of the header area.\n1. If the is not interactive, we recommend styling it with `pointer-events: none;`,\nto avoid blocking the user from interacting with the header. This is because\nthe entire surface of the header should be clickable to toggle visibility of the section.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section","limel-circular-progress"],"dependencyGraph":{"limel-example-collapsible-section-with-custom-header-component":["limel-collapsible-section","limel-circular-progress"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-with-custom-header-component.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * With custom component in the header\n * By using the `slot=\"header\"` attribute on a custom UI elements, you can place it\n * in the header area of the collapsible section alongside the default header text\n * and header actions.\n * This can enable richer header content, like status indicators, badges, or icons.\n *\n * :::important\n * 1. The custom component is responsible for its own size, and should not\n * visually grow out of the header area.\n * 1. If the is not interactive, we recommend styling it with `pointer-events: none;`,\n * to avoid blocking the user from interacting with the header. This is because\n * the entire surface of the header should be clickable to toggle visibility of the section.\n * :::\n */\n@Component({\n    tag: 'limel-example-collapsible-section-with-custom-header-component',\n    shadow: true,\n})\nexport class CollapsibleSectionWithCustomHeaderComponentExample {\n    public render() {\n        const style = {\n            'pointer-events': 'none',\n        };\n\n        return (\n            <limel-collapsible-section header=\"This section has custom content in the header\">\n                <limel-circular-progress\n                    style={style}\n                    slot=\"header\"\n                    value={65}\n                    size=\"x-small\"\n                />\n                <p>This element becomes the body.</p>\n            </limel-collapsible-section>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples","filePath":"./src/components/collapsible-section/examples/collapsible-section-with-slider.tsx","fileName":"collapsible-section-with-slider.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/examples/usage","tag":"limel-example-collapsible-section-with-slider","overview":"With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::","usage":{},"docs":"With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-collapsible-section","limel-slider"],"dependencyGraph":{"limel-example-collapsible-section-with-slider":["limel-collapsible-section","limel-slider"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-slider":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"collapsible-section-with-slider.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With a limel-slider - for testing\n * :::note\n * Some elements need to be redrawn if they were created\n * while their container was hidden. The collapsible\n * section will emit a resize event after opening, to make this happen.\n * :::\n */\n@Component({\n    tag: 'limel-example-collapsible-section-with-slider',\n    shadow: true,\n})\nexport class CollapsibleSectionWithSliderExample {\n    @State()\n    private percentage = 34;\n\n    public render() {\n        return (\n            <limel-collapsible-section header=\"With a limel-slider\">\n                <div>\n                    <p>This is primarily here for testing purposes.</p>\n                    <limel-slider unit=\"%\" value={this.percentage} />\n                </div>\n            </limel-collapsible-section>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples","filePath":"./src/components/color-picker/examples/color-picker.tsx","fileName":"color-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/usage","tag":"limel-example-color-picker","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-color-picker"],"dependencyGraph":{"limel-example-color-picker":["limel-color-picker"],"limel-color-picker":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n@Component({\n    tag: 'limel-example-color-picker',\n    shadow: true,\n})\nexport class ColorPickerExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-color-picker\n                value={this.value}\n                tooltipLabel=\"Click to pick a color\"\n                helperText=\"You can also type a color name or value to preview it here\"\n                label=\"Chosen color\"\n                onChange={this.onChange}\n            />\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples","filePath":"./src/components/color-picker/examples/color-picker-readonly.tsx","fileName":"color-picker-readonly.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/color-picker/examples/usage","tag":"limel-example-color-picker-readonly","overview":"Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked.","usage":{},"docs":"Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-color-picker"],"dependencyGraph":{"limel-example-color-picker-readonly":["limel-color-picker"],"limel-color-picker":["limel-tooltip","limel-popover","limel-color-picker-palette","limel-input-field"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker-palette":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"color-picker-readonly.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Using the component in `readonly` mode\n * It is possible to use the component to visualize a color of your choice.\n * In this case, users cannot pick any colors, but they can view what you have picked.\n */\n\n@Component({\n    tag: 'limel-example-color-picker-readonly',\n    shadow: true,\n})\nexport class ColorPickerReadonlyExample {\n    public render() {\n        return (\n            <limel-color-picker\n                label=\"Look at this beautiful color!\"\n                readonly={true}\n                value=\"rgba(var(--color-red-default), 0.4)\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/colors-in-components.tsx","fileName":"colors-in-components.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-colors-in-components","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-linear-progress"],"dependencyGraph":{"limel-example-colors-in-components":["limel-button","limel-linear-progress"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"colors-in-components.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-colors-in-components',\n    shadow: true,\n    styleUrl: 'colors-in-components.scss',\n})\nexport class ColorExample {\n    public render() {\n        return (\n            <div class=\"background\">\n                <h3>Buttons</h3>\n                <div class=\"example-buttons\">\n                    <limel-button class=\"success\" label=\"Continue\" />\n                    <limel-button\n                        primary={true}\n                        class=\"caution\"\n                        label=\"Pause\"\n                    />\n                    <limel-button\n                        primary={true}\n                        label=\"Do not press!\"\n                        style={{\n                            '--lime-primary-color':\n                                'rgb(var(--color-red-default))',\n                        }}\n                    />\n                </div>\n                <h3>Linear progress</h3>\n                <p>\n                    <limel-linear-progress value={0.5} />\n                </p>\n                <h3>Custom component</h3>\n                <div class=\"box\">This is a message.</div>\n            </div>\n        );\n    }\n}\n"},{"filename":"colors-in-components.scss","type":"scss","source":"@use '../../../style/functions';\n\nh3 {\n    color: rgb(var(--kompendium-contrast-1300));\n}\n\n.background {\n    margin: functions.pxToRem(12) auto functions.pxToRem(20) auto;\n    padding: functions.pxToRem(20) functions.pxToRem(12);\n    background-color: rgb(var(--kompendium-contrast-300));\n    border-radius: functions.pxToRem(3);\n}\n\n.example-buttons {\n    display: grid;\n    grid-auto-flow: column;\n    gap: 1rem;\n    justify-content: left;\n    margin-bottom: 2rem;\n}\n\nlimel-button.success {\n    /* When a button is not a \"primary\" button, the --lime-primary-color will apply to its text */\n    --lime-primary-color: rgb(var(--color-green-default));\n}\n\nlimel-button.caution {\n    --lime-on-primary-color: rgb(var(--color-black));\n    /* When a button is a \"primary\" button, the --lime-primary-color will apply to its background */\n    --lime-primary-color: rgb(var(--color-amber-default));\n}\n\nlimel-linear-progress {\n    --lime-primary-color: rgb(var(--color-blue-default));\n    --background-color: rgb(var(--color-gray-light));\n\n    display: block;\n    margin-bottom: 2rem;\n}\n\n.box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 10rem;\n    height: 3rem;\n    border-radius: 0.25rem;\n\n    color: rgb(var(--kompendium-contrast-200));\n    background-color: rgb(var(--kompendium-contrast-1100));\n    box-shadow: var(--shadow-depth-16);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/contrast-color-palette.tsx","fileName":"contrast-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-contrast-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"contrast-color-palette.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-contrast-color-palette',\n    shadow: true,\n    styleUrl: 'contrast-color-palette.scss',\n})\nexport class PaletteExample {\n    public render() {\n        return (\n            <div class=\"color-palette\">\n                <div class=\"swatch --contrast-100\">\n                    <span>100</span>\n                </div>\n                <div class=\"swatch --contrast-200\">\n                    <span>200</span>\n                </div>\n                <div class=\"swatch --contrast-300\">\n                    <span>300</span>\n                </div>\n                <div class=\"swatch --contrast-400\">\n                    <span>400</span>\n                </div>\n                <div class=\"swatch --contrast-500\">\n                    <span>500</span>\n                </div>\n                <div class=\"swatch --contrast-600\">\n                    <span>600</span>\n                </div>\n                <div class=\"swatch --contrast-700\">\n                    <span>700</span>\n                </div>\n                <div class=\"swatch --contrast-800\">\n                    <span>800</span>\n                </div>\n                <div class=\"swatch --contrast-900\">\n                    <span>900</span>\n                </div>\n                <div class=\"swatch --contrast-1000\">\n                    <span>1000</span>\n                </div>\n                <div class=\"swatch --contrast-1100\">\n                    <span>1100</span>\n                </div>\n                <div class=\"swatch --contrast-1200\">\n                    <span>1200</span>\n                </div>\n                <div class=\"swatch --contrast-1300\">\n                    <span>1300</span>\n                </div>\n                <div class=\"swatch --contrast-1400\">\n                    <span>1400</span>\n                </div>\n                <div class=\"swatch --contrast-1500\">\n                    <span>1500</span>\n                </div>\n                <div class=\"swatch --contrast-1600\">\n                    <span>1600</span>\n                </div>\n                <div class=\"swatch --contrast-1700\">\n                    <span>1700</span>\n                </div>\n                <div class=\"spacer\"></div>\n                <div class=\"swatch --color-white\">\n                    <span>white</span>\n                </div>\n                <div class=\"swatch --color-black\">\n                    <span>black</span>\n                </div>\n            </div>\n        );\n    }\n}\n"},{"filename":"contrast-color-palette.scss","type":"scss","source":"@use '../../../style/functions';\n@use './shared-styles';\n\n.color-palette {\n    grid-template-columns: repeat(20, 1fr);\n    gap: 0;\n    padding: functions.pxToRem(20) functions.pxToRem(12);\n    background-color: rgb(var(--contrast-300));\n    border-radius: functions.pxToRem(3);\n}\n\n.swatch {\n    border-radius: 0;\n    font-size: functions.pxToRem(12);\n    font-family: 'Source Code Pro', monospace;\n    letter-spacing: functions.pxToRem(-1);\n}\n\n.--color-white {\n    border-radius: 50%;\n    transform: translateX(functions.pxToRem(-8));\n}\n.--color-black {\n    border-radius: 50%;\n}\n\n.--contrast-100 {\n    border-radius: functions.pxToRem(5) 0 0 functions.pxToRem(5);\n}\n.--contrast-1700 {\n    border-radius: 0 functions.pxToRem(5) functions.pxToRem(5) 0;\n}\n.--contrast-900 {\n    &:before {\n        content: '';\n\n        display: block;\n        position: absolute;\n        right: 0;\n        bottom: -12px;\n        left: 0;\n        width: 4px;\n        height: 4px;\n        margin: auto;\n\n        background-color: rgba(var(--contrast-900), 0.5);\n        border-radius: 50%;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/examples","filePath":"./src/examples/example-controls.tsx","fileName":"example-controls.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/examples/usage","tag":"limel-example-controls","overview":"This component is only used in our documentations\nto provide a container for settings of examples.\n\nFor example, it visually groups and organizes checkboxes\nused to show different states of components,\nsuch as Disabled, Required, Readonly, etc…","usage":{},"docs":"This component is only used in our documentations\nto provide a container for settings of examples.\n\nFor example, it visually groups and organizes checkboxes\nused to show different states of components,\nsuch as Disabled, Required, Readonly, etc…","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-example-action-bar-icon-title","limel-example-ai-avatar-basic","limel-example-ai-avatar-colors","limel-example-button-composite","limel-example-button-group","limel-example-button-group-composite","limel-example-button-group-icons","limel-example-button-group-mix","limel-example-callout-composite","limel-example-chart-accessibility","limel-example-chart-axis-increment","limel-example-chart-multi-axis","limel-example-chart-multi-axis-area-with-negative-start-values","limel-example-chart-multi-axis-with-negative-start-values","limel-example-chart-type-area","limel-example-chart-type-bar","limel-example-chart-type-dot","limel-example-chart-type-doughnut","limel-example-chart-type-gantt","limel-example-chart-type-line","limel-example-chart-type-pie","limel-example-chart-type-ring","limel-example-checkbox","limel-example-checkbox-readonly","limel-example-chip-button","limel-example-chip-loading","limel-example-chip-progress","limel-example-chip-set","limel-example-chip-set-choice","limel-example-chip-set-composite","limel-example-chip-set-filter","limel-example-chip-set-filter-badge","limel-example-chip-set-input","limel-example-chip-size","limel-example-date-picker-composite","limel-example-dialog-nested-close-events","limel-example-dynamic-label","limel-example-dynamic-label-readonly-boolean","limel-example-file","limel-example-file-composite","limel-example-file-dropzone","limel-example-file-input","limel-example-file-input-type-filtering","limel-example-form-span-fields","limel-example-icon-button-composite","limel-example-info-tile-loading","limel-example-info-tile-progress","limel-example-input-field-autocomplete","limel-example-input-field-number","limel-example-input-field-showlink","limel-example-input-field-text","limel-example-input-field-text-decluttering-guidelines","limel-example-input-field-textarea","limel-example-list-pictures","limel-example-menu-composite","limel-example-notched-outline-basic","limel-example-picker-composite","limel-example-picker-static-actions","limel-example-progress-flow-basic","limel-example-readonly-props","limel-example-select","limel-example-select-change-options","limel-example-select-multiple","limel-example-select-with-empty-option","limel-example-slider-basic","limel-example-slider-composite","limel-example-slider-multiplier-percentage-colors","limel-example-snackbar-dismissible","limel-example-snackbar-persistent-non-dismissible","limel-example-spinner","limel-example-spinner-color","limel-example-switch","limel-example-switch-helper-text","limel-example-switch-readonly","limel-example-table-selectable-rows","limel-example-text-editor-allow-resize","limel-example-text-editor-composite","limel-example-text-editor-triggers","limel-example-text-editor-ui","limel-example-text-editor-with-html","limel-example-text-editor-with-markdown","limel-example-text-editor-with-tables"],"dependencies":[],"dependencyGraph":{"limel-example-action-bar-icon-title":["limel-example-controls"],"limel-example-ai-avatar-basic":["limel-example-controls"],"limel-example-ai-avatar-colors":["limel-example-controls"],"limel-example-button-composite":["limel-example-controls"],"limel-example-button-group":["limel-example-controls"],"limel-example-button-group-composite":["limel-example-controls"],"limel-example-button-group-icons":["limel-example-controls"],"limel-example-button-group-mix":["limel-example-controls"],"limel-example-callout-composite":["limel-example-controls"],"limel-example-chart-accessibility":["limel-example-controls"],"limel-example-chart-axis-increment":["limel-example-controls"],"limel-example-chart-multi-axis":["limel-example-controls"],"limel-example-chart-multi-axis-area-with-negative-start-values":["limel-example-controls"],"limel-example-chart-multi-axis-with-negative-start-values":["limel-example-controls"],"limel-example-chart-type-area":["limel-example-controls"],"limel-example-chart-type-bar":["limel-example-controls"],"limel-example-chart-type-dot":["limel-example-controls"],"limel-example-chart-type-doughnut":["limel-example-controls"],"limel-example-chart-type-gantt":["limel-example-controls"],"limel-example-chart-type-line":["limel-example-controls"],"limel-example-chart-type-pie":["limel-example-controls"],"limel-example-chart-type-ring":["limel-example-controls"],"limel-example-checkbox":["limel-example-controls"],"limel-example-checkbox-readonly":["limel-example-controls"],"limel-example-chip-button":["limel-example-controls"],"limel-example-chip-loading":["limel-example-controls"],"limel-example-chip-progress":["limel-example-controls"],"limel-example-chip-set":["limel-example-controls"],"limel-example-chip-set-choice":["limel-example-controls"],"limel-example-chip-set-composite":["limel-example-controls"],"limel-example-chip-set-filter":["limel-example-controls"],"limel-example-chip-set-filter-badge":["limel-example-controls"],"limel-example-chip-set-input":["limel-example-controls"],"limel-example-chip-size":["limel-example-controls"],"limel-example-date-picker-composite":["limel-example-controls"],"limel-example-dialog-nested-close-events":["limel-example-controls"],"limel-example-dynamic-label":["limel-example-controls"],"limel-example-dynamic-label-readonly-boolean":["limel-example-controls"],"limel-example-file":["limel-example-controls"],"limel-example-file-composite":["limel-example-controls"],"limel-example-file-dropzone":["limel-example-controls"],"limel-example-file-input":["limel-example-controls"],"limel-example-file-input-type-filtering":["limel-example-controls"],"limel-example-form-span-fields":["limel-example-controls"],"limel-example-icon-button-composite":["limel-example-controls"],"limel-example-info-tile-loading":["limel-example-controls"],"limel-example-info-tile-progress":["limel-example-controls"],"limel-example-input-field-autocomplete":["limel-example-controls"],"limel-example-input-field-number":["limel-example-controls"],"limel-example-input-field-showlink":["limel-example-controls"],"limel-example-input-field-text":["limel-example-controls"],"limel-example-input-field-text-decluttering-guidelines":["limel-example-controls"],"limel-example-input-field-textarea":["limel-example-controls"],"limel-example-list-pictures":["limel-example-controls"],"limel-example-menu-composite":["limel-example-controls"],"limel-example-notched-outline-basic":["limel-example-controls"],"limel-example-picker-composite":["limel-example-controls"],"limel-example-picker-static-actions":["limel-example-controls"],"limel-example-progress-flow-basic":["limel-example-controls"],"limel-example-readonly-props":["limel-example-controls"],"limel-example-select":["limel-example-controls"],"limel-example-select-change-options":["limel-example-controls"],"limel-example-select-multiple":["limel-example-controls"],"limel-example-select-with-empty-option":["limel-example-controls"],"limel-example-slider-basic":["limel-example-controls"],"limel-example-slider-composite":["limel-example-controls"],"limel-example-slider-multiplier-percentage-colors":["limel-example-controls"],"limel-example-snackbar-dismissible":["limel-example-controls"],"limel-example-snackbar-persistent-non-dismissible":["limel-example-controls"],"limel-example-spinner":["limel-example-controls"],"limel-example-spinner-color":["limel-example-controls"],"limel-example-switch":["limel-example-controls"],"limel-example-switch-helper-text":["limel-example-controls"],"limel-example-switch-readonly":["limel-example-controls"],"limel-example-table-selectable-rows":["limel-example-controls"],"limel-example-text-editor-allow-resize":["limel-example-controls"],"limel-example-text-editor-composite":["limel-example-controls"],"limel-example-text-editor-triggers":["limel-example-controls"],"limel-example-text-editor-ui":["limel-example-controls"],"limel-example-text-editor-with-html":["limel-example-controls"],"limel-example-text-editor-with-markdown":["limel-example-controls"],"limel-example-text-editor-with-tables":["limel-example-controls"]},"props":[],"methods":[],"events":[],"styles":[{"name":"--example-controls-column-layout","annotation":"prop","docs":"Defines how columns take up the available space. By default, it is set to be `auto-fill`, which fills the row with as many columns as it can. But it can also be set it to `auto-fit` stretches the columns to occupy all the available space."},{"name":"--example-controls-max-columns-width","annotation":"prop","docs":"Defines maximum width of columns. Defaults to `6rem`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"example-controls.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * This component is only used in our documentations\n * to provide a container for settings of examples.\n *\n * For example, it visually groups and organizes checkboxes\n * used to show different states of components,\n * such as Disabled, Required, Readonly, etc…\n *\n * @private\n */\n@Component({\n    tag: 'limel-example-controls',\n    shadow: true,\n    styleUrl: 'example-controls.scss',\n})\nexport class ExampleControls {\n    public render() {\n        return <slot />;\n    }\n}\n"},{"filename":"example-controls.scss","type":"scss","source":"/**\n * @prop --example-controls-max-columns-width: Defines maximum width of columns. Defaults to `6rem`.\n * @prop --example-controls-column-layout: Defines how columns take up the available space. By default, it is set to be `auto-fill`, which fills the row with as many columns as it can. But it can also be set it to `auto-fit` stretches the columns to occupy all the available space.\n */\n\n:host(limel-example-controls) {\n    display: grid;\n    grid-template-columns: repeat(\n        var(--example-controls-column-layout, auto-fill),\n        minmax(var(--example-controls-max-columns-width, 6rem), 1fr)\n    );\n    gap: 0.25rem 1rem;\n    align-items: center;\n\n    margin: 1rem 0 0 0;\n    padding: 0.25rem 0.5rem;\n    border: rgb(var(--contrast-500)) 1px dashed;\n    border-radius: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/custom-component-form.tsx","fileName":"custom-component-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-custom-component-form","overview":"Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","usage":{},"docs":"Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","docsTags":[{"name":"sourceFile","text":"custom-component-schema.ts"},{"name":"sourceFile","text":"custom-component-picker.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-custom-component-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"custom-component-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { CustomComponentFormData, schema } from './custom-component-schema';\n\n/**\n * Custom form component\n *\n * You can specify a custom component to use for any property in your form. This\n * is done under the `lime` key in the schema, following the\n * [LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n *\n * ```ts\n * const schema = {\n *     type: 'object',\n *     properties: {\n *         hero: {\n *             type: 'integer',\n *             title: 'Hero',\n *             lime: {\n *                 component: {\n *                     name: 'my-useful-hero-picker',\n *                 },\n *             },\n *         },\n *     },\n * };\n * ```\n *\n * While you can, in principle, use any component in a form, your custom form\n * components should implement the [FormComponent](#/type/FormComponent/)\n * interface.\n *\n * @sourceFile custom-component-schema.ts\n * @sourceFile custom-component-picker.tsx\n */\n@Component({\n    tag: 'limel-example-custom-component-form',\n    shadow: true,\n})\nexport class CustomComponentFormExample {\n    @State()\n    private formData: CustomComponentFormData = {\n        name: 'My superhero deal',\n        value: 1_000_000,\n        hero: 1001,\n    };\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"custom-component-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\nexport interface CustomComponentFormData {\n    name?: string;\n    value?: number;\n    hero?: number;\n}\n\nexport const schema: FormSchema<CustomComponentFormData> = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n            description: 'Name of the superhero deal',\n        },\n        value: {\n            type: 'integer',\n            title: 'Value',\n            description: 'Amount to pay to hero',\n        },\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'limel-example-custom-picker',\n                    props: {\n                        helperText: 'Pick your superhero!',\n                    },\n                },\n            },\n        },\n    },\n};\n"},{"filename":"custom-component-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport {\n    FormComponent,\n    LimelPickerCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-custom-picker',\n    shadow: true,\n})\nexport class CustomPickerExample implements FormComponent<number> {\n    /**\n     * {@inheritdoc}\n     */\n    @Prop({ reflect: true })\n    public value: number;\n\n    /**\n     * {@inheritdoc FormComponent.label}\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * {@inheritdoc FormComponent.required}\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * {@inheritdoc FormComponent.readonly}\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean;\n\n    /**\n     * {@inheritdoc FormComponent.disabled}\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean;\n\n    /**\n     * {@inheritdoc}\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: {\n                name: 'superman',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: {\n                name: 'squirrel',\n                color: 'var(--lime-orange)',\n            },\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: {\n                name: 'captain_america',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: {\n                name: 'spider',\n                color: 'var(--lime-dark-grey)',\n            },\n        },\n    ];\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n                helperText={this.helperText}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/custom-error-message-form.tsx","fileName":"custom-error-message-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-custom-error-message","overview":"Form with custom error message","usage":{},"docs":"Form with custom error message","docsTags":[{"name":"sourceFile","text":"custom-error-message-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-button"],"dependencyGraph":{"limel-example-custom-error-message":["limel-form","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"custom-error-message-form.tsx","type":"tsx","source":"import { ValidationStatus, FormError } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { CustomErrorFormData, schema } from './custom-error-message-schema';\n\n/**\n * Form with custom error message\n *\n * @sourceFile custom-error-message-schema.ts\n */\n@Component({\n    tag: 'limel-example-custom-error-message',\n    shadow: true,\n})\nexport class CustomErrorMessageFormExample {\n    @State()\n    private formData: CustomErrorFormData = {\n        personalIdentityNumber: '',\n    };\n\n    @State()\n    private valid = true;\n\n    public render() {\n        return [\n            <limel-form\n                onValidate={this.handleFormValidate}\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n                transformErrors={this.transformErrors}\n            />,\n            <br />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n    };\n\n    private transformErrors = (errors: FormError[]): FormError[] => {\n        return errors.map((error) => {\n            if (\n                error.name === 'pattern' &&\n                error.property === '.personalIdentityNumber'\n            ) {\n                error.message = 'Invalid format, use YYYYMMDD-NNNN';\n            }\n\n            return error;\n        });\n    };\n}\n"},{"filename":"custom-error-message-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\nexport interface CustomErrorFormData {\n    personalIdentityNumber: string;\n}\n\nexport const schema: FormSchema<CustomErrorFormData> = {\n    title: 'Personal identity number form',\n    description: 'Please enter your personal identity number',\n    type: 'object',\n    required: ['personalIdentityNumber'],\n    properties: {\n        personalIdentityNumber: {\n            type: 'string',\n            title: 'Personal identity number',\n            description: 'Enter your personal identity number',\n            pattern: '[0-9]{8}[-][0-9]{4}',\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/custom-component-picker.tsx","fileName":"custom-component-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-custom-picker","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker"],"dependencyGraph":{"limel-example-custom-picker":["limel-picker"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"{@inheritdoc FormComponent.disabled}","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"{@inheritdoc}","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"{@inheritdoc FormComponent.label}","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"{@inheritdoc FormComponent.readonly}","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"{@inheritdoc FormComponent.required}","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":true,"docs":"{@inheritdoc}","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value is changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"custom-component-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport {\n    FormComponent,\n    LimelPickerCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-custom-picker',\n    shadow: true,\n})\nexport class CustomPickerExample implements FormComponent<number> {\n    /**\n     * {@inheritdoc}\n     */\n    @Prop({ reflect: true })\n    public value: number;\n\n    /**\n     * {@inheritdoc FormComponent.label}\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * {@inheritdoc FormComponent.required}\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * {@inheritdoc FormComponent.readonly}\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean;\n\n    /**\n     * {@inheritdoc FormComponent.disabled}\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean;\n\n    /**\n     * {@inheritdoc}\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: {\n                name: 'superman',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: {\n                name: 'squirrel',\n                color: 'var(--lime-orange)',\n            },\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: {\n                name: 'captain_america',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: {\n                name: 'spider',\n                color: 'var(--lime-dark-grey)',\n            },\n        },\n    ];\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n                helperText={this.helperText}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples","filePath":"./src/components/callout/examples/callout-custom-type.tsx","fileName":"callout-custom-type.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/callout/examples/usage","tag":"limel-example-custom-type","overview":"Custom type\n\nIt is possible to send in a custom type,\nand provide it with custom, icon, heading and styles","usage":{},"docs":"Custom type\n\nIt is possible to send in a custom type,\nand provide it with custom, icon, heading and styles","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-callout"],"dependencyGraph":{"limel-example-custom-type":["limel-callout"],"limel-callout":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"callout-custom-type.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Custom type\n *\n * It is possible to send in a custom type,\n * and provide it with custom, icon, heading and styles\n */\n@Component({\n    tag: 'limel-example-custom-type',\n    shadow: true,\n    styleUrl: 'callout-custom-type.scss',\n})\nexport class CalloutCustomTypeExample {\n    public render() {\n        return [\n            <limel-callout\n                icon=\"checked\"\n                heading=\"Success\"\n                type={'success' as any}\n            >\n                This is a custom type that we call success\n            </limel-callout>,\n        ];\n    }\n}\n"},{"filename":"callout-custom-type.scss","type":"scss","source":"limel-callout[type='success'] {\n    --callout-color: rgb(var(--color-green-default));\n    --callout-text-color: rgb(var(--color-green-dark));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/dark-light-mode.tsx","fileName":"dark-light-mode.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-dark-light-mode","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dark-light-mode.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-dark-light-mode',\n    shadow: true,\n    styleUrl: 'dark-light-mode.scss',\n})\nexport class DarkLightModeExample {\n    public render() {\n        return (\n            <div class=\"app-layout\">\n                <nav class=\"nav\">\n                    <a class=\"nav__logo\">\n                        <svg\n                            viewBox=\"0 0 227 220\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill-rule=\"evenodd\"\n                            clip-rule=\"evenodd\"\n                            stroke-linejoin=\"round\"\n                            stroke-miterlimit=\"2\"\n                        >\n                            <path\n                                d=\"M222.7 75.7c-15.2-52.5-58.3-71.1-82.2-74.6C120.4-2 68.2-2.3 34.7 53.3c-26.4 43.8-7.3 79.5-7.1 108.9-.2 13.4-2.2 29.5-20.8 42-18.5 12.4 6 13.4 8.5 13.5 15.1 1 39 3.2 66.4 1.9 23.7-1.1 65-.7 102-31.1 18.5-15.2 54.1-54.2 39-112.8z\"\n                                fill=\"rgb(var(--lime-brand-color-flexible-turquoise))\"\n                            />\n                            <path\n                                d=\"M67 118.9c1.9 1.9 4.4 2.9 7.5 2.9 4.8 0 7.9-2.4 9.5-7.2l.1-.4 10.4 2.7-.1.5c-1.1 4.5-3.5 8.2-7.2 10.9-3.7 2.7-8 4.1-12.7 4.1-5.9 0-11-2-15.1-5.9-4.1-3.9-6.2-9-6.2-15.2 0-6.1 2.1-11.3 6.2-15.2 4.1-3.9 9.2-5.9 15.1-5.9 4.7 0 8.9 1.4 12.5 4 3.6 2.7 6.1 6.3 7.5 10.7l.1.5-10.9 3.1-.1-.5c-1.2-4.9-4.2-7.3-9.1-7.3-3.1 0-5.6 1-7.5 3-1.9 2-2.9 4.6-2.9 7.8.1 2.8 1 5.4 2.9 7.4zm41.6 12.1H97.3V91.1h11.3v6.1c3.5-4.4 8-6.6 13.4-6.6 1.3 0 2.2.1 2.9.3l.4.1-.6 10.8H122c-9 0-13.4 5.3-13.4 16.2v13zm30.6 0h-11.3V91.1h11.3v2.6c2.9-2.5 6.6-3.7 11.1-3.7 5.5 0 9.8 2 12.8 6.1 3.5-4 8.2-6.1 14.1-6.1 4.3 0 8 1.5 11 4.5s4.6 7 4.6 11.7V131h-11.2v-22.7c0-2.4-.7-4.3-2-5.8-1.4-1.4-3-2.1-5.1-2.1-2.7 0-4.7.9-6.2 2.8s-2.3 4.8-2.3 8.6V131h-11.3v-22.7c0-2.4-.7-4.3-2-5.8-1.4-1.4-3-2.1-5.1-2.1-2.7 0-4.7.9-6.2 2.8s-2.2 4.8-2.2 8.6V131z\"\n                                fill=\"rgb(var(--color-white))\"\n                            />\n                        </svg>\n                    </a>\n                    <a class=\"nav_item\">\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                        >\n                            <path\n                                d=\"M20.56 18.44l-4.67-4.67a7 7 0 10-2.12 2.12l4.67 4.67a1.5 1.5 0 002.12 0 1.49 1.49 0 000-2.12zM5 10a5 5 0 115 5 5 5 0 01-5-5z\"\n                                fill=\"rgb(var(--contrast-1000))\"\n                            />\n                        </svg>\n                    </a>\n                    <a class=\"nav_item\">\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                        >\n                            <path\n                                d=\"M16.855 20.966c-.224 0-.443-.05-.646-.146a.831.831 0 01-.104-.051l-4.107-2.343-4.107 2.344a1.524 1.524 0 01-1.627-.09 1.505 1.505 0 01-.586-1.509l.957-4.642-1.602-1.457-1.895-1.725a.756.756 0 01-.078-.082 1.503 1.503 0 01-.34-1.492c.173-.524.62-.912 1.16-1.009a.87.87 0 01.102-.018l4.701-.521 1.946-4.31a.692.692 0 01.06-.11 1.5 1.5 0 011.309-.771c.543 0 1.044.298 1.309.77.021.036.041.073.06.112l1.948 4.312 4.701.521a1.508 1.508 0 011.262 1.029 1.504 1.504 0 01-.418 1.572l-3.498 3.184.957 4.632a1.514 1.514 0 01-.59 1.519 1.488 1.488 0 01-.874.281zm-8.149-6.564c-.039.182-.466 2.246-.845 4.082l3.643-2.077a1 1 0 01.99 0l3.643 2.075-.849-4.104a.998.998 0 01.308-.942l3.1-2.822-4.168-.461a1 1 0 01-.801-.584l-1.728-3.821-1.726 3.821c-.146.322-.45.543-.801.584l-4.168.461 3.1 2.822a.995.995 0 01.302.966z\"\n                                fill=\"rgb(var(--contrast-1000))\"\n                            />\n                        </svg>\n                    </a>\n                </nav>\n                <div class=\"workspace\">\n                    <header class=\"header\">Header</header>\n                    <div class=\"content\">\n                        <div class=\"card shadow-card\">\n                            <div class=\"card__header\">Card</div>\n                            <div class=\"card__body\">\n                                <p>\n                                    Switch between dark mode and light mode on\n                                    your{' '}\n                                    <a href=\"https://support.apple.com/en-us/HT208976\">\n                                        Mac\n                                    </a>{' '}\n                                    or{' '}\n                                    <a href=\"https://blogs.windows.com/windowsexperience/2016/08/08/windows-10-tip-personalize-your-pc-by-enabling-the-dark-theme/\">\n                                        Windows\n                                    </a>{' '}\n                                    to see how colors change in this example.\n                                </p>\n                                <hr />\n                                <button\n                                    type=\"button\"\n                                    name=\"success\"\n                                    class=\"button success\"\n                                >\n                                    Success\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    name=\"danger\"\n                                    class=\"button danger\"\n                                >\n                                    Danger\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    name=\"warning\"\n                                    class=\"button warning\"\n                                >\n                                    Warning\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    name=\"continue\"\n                                    class=\"button accented\"\n                                >\n                                    Accented\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"},{"filename":"dark-light-mode.scss","type":"scss","source":"@use '../../../style/functions';\n@use '../../../style/mixins';\n@use '../../../style/shadows';\n@use './shared-styles';\n\n* {\n    box-sizing: border-box;\n}\n\na {\n    text-decoration: none;\n    color: rgb(var(--color-blue-default));\n}\np {\n    color: rgb(var(--contrast-1400));\n    margin-top: 0;\n}\nhr {\n    border-style: solid;\n    border-width: 1px 0 0 0;\n    border-color: rgb(var(--contrast-400));\n    margin-bottom: functions.pxToRem(12);\n}\n\n.app-layout {\n    margin: functions.pxToRem(20) 0;\n    display: grid;\n    width: 100%;\n    min-height: functions.pxToRem(400);\n    overflow: hidden;\n    border: 1px solid rgba(var(--color-black), 0.07);\n    border-radius: functions.pxToRem(5);\n\n    grid-auto-flow: column;\n    grid-template-columns: functions.pxToRem(80) auto;\n\n    .nav {\n        background-color: rgb(var(--contrast-200));\n        box-shadow: var(--shadow-depth-8);\n        z-index: 1;\n    }\n\n    .nav__logo {\n        display: block;\n        width: calc(100% - #{functions.pxToRem(32)});\n        margin: functions.pxToRem(16) auto;\n        cursor: pointer;\n    }\n\n    .nav_item {\n        cursor: pointer;\n        display: block;\n        width: functions.pxToRem(40);\n        height: functions.pxToRem(40);\n        margin: functions.pxToRem(20) auto;\n    }\n\n    .workspace {\n        background-color: rgb(var(--contrast-300));\n    }\n\n    .header {\n        background-color: rgb(var(--contrast-200));\n        color: rgb(var(--contrast-1200));\n        height: functions.pxToRem(44);\n        line-height: functions.pxToRem(44);\n        padding-left: functions.pxToRem(16);\n    }\n}\n\n.card {\n    display: grid;\n    width: 60%;\n    height: functions.pxToRem(200);\n    margin: functions.pxToRem(100) auto;\n\n    background-color: rgb(var(--contrast-200));\n    border-radius: functions.pxToRem(7);\n    box-shadow: var(--shadow-depth-16);\n\n    &__header {\n        font-size: functions.pxToRem(16);\n        line-height: functions.pxToRem(40);\n\n        width: 100%;\n        height: functions.pxToRem(40);\n        padding: 0 functions.pxToRem(12);\n\n        color: rgb(var(--contrast-1100));\n        background-color: rgb(var(--contrast-300));\n        border-radius: functions.pxToRem(7) functions.pxToRem(7) 0 0;\n    }\n\n    &__body {\n        padding: functions.pxToRem(4) functions.pxToRem(16)\n            functions.pxToRem(12) functions.pxToRem(16);\n    }\n}\n\n@media (prefers-color-scheme: dark) {\n    .card {\n        // Note how in dark mode, we do specify a \"lighter\" background color here.\n        // This is because the card has an elevated effect, and human brain normally expect deeper objects to be darker and visa versa.\n        // This unconsciously helps users' perception of the interface.\n        background-color: rgb(var(--contrast-400));\n    }\n}\n\n.button {\n    @include mixins.is-elevated-clickable();\n    margin-right: functions.pxToRem(8);\n    line-height: functions.pxToRem(32);\n\n    height: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(8);\n\n    border: none;\n    border-radius: functions.pxToRem(4);\n\n    &:focus {\n        outline: none;\n    }\n\n    &.success {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-green-default));\n        &:hover {\n            background-color: rgb(var(--color-green-light));\n        }\n    }\n    &.warning {\n        color: rgb(var(--color-black));\n        background-color: rgb(var(--color-amber-default));\n        &:hover {\n            background-color: rgb(var(--color-amber-light));\n        }\n    }\n    &.danger {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-red-default));\n        &:hover {\n            background-color: rgb(var(--color-red-light));\n        }\n    }\n    &.accented {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-blue-default));\n        &:hover {\n            background-color: rgb(var(--color-blue-light));\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-composite.tsx","fileName":"date-picker-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-date-picker-composite":["limel-date-picker","limel-example-event-printer","limel-example-controls","limel-form"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-composite.tsx","type":"tsx","source":"import { FormSchema } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-date-picker-composite',\n    shadow: true,\n})\nexport class DatePickerCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props: any = {\n        helperText: 'Please add a date',\n        label: 'Date',\n        language: 'en',\n        type: 'date',\n        value: new Date(),\n    };\n\n    private key = 0;\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        const properties = { ...this.schema.properties };\n        delete properties.formatter;\n\n        this.schema = {\n            ...this.schema,\n            properties: properties,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-date-picker\n                key={`updateOnFormChange-${this.key}`}\n                {...this.props}\n                onChange={this.handlePickerChange}\n            />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        const value = this.props.value;\n        this.props = { ...event.detail, value: value };\n        this.key += 1;\n    };\n\n    private handlePickerChange = (event: CustomEvent<Date>) => {\n        this.handleEvent(event);\n        this.props = { ...this.props, value: event.detail };\n    };\n\n    private handleEvent = (event: Event) => {\n        this.eventPrinter.writeEvent(event);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-custom-formatter.tsx","fileName":"date-picker-custom-formatter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-custom-formatter","overview":"Custom date formatter\n\nYou can provide a function to customize the date formatting.","usage":{},"docs":"Custom date formatter\n\nYou can provide a function to customize the date formatting.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-custom-formatter":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-custom-formatter.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Custom date formatter\n *\n * You can provide a function to customize the date formatting.\n */\n@Component({\n    tag: 'limel-example-date-picker-custom-formatter',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"date\"\n                    label=\"date\"\n                    value={this.value}\n                    formatter={this.myCustomFormatter}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private myCustomFormatter = (value: Date) => {\n        return Intl.DateTimeFormat('en-GB', {\n            dateStyle: 'medium',\n            timeStyle: 'short',\n        }).format(value);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-date.tsx","fileName":"date-picker-date.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-date","overview":"date","usage":{},"docs":"date","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-date":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-date.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * date\n */\n@Component({\n    tag: 'limel-example-date-picker-date',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"date\"\n                    label=\"date\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-datetime.tsx","fileName":"date-picker-datetime.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-datetime","overview":"datetime","usage":{},"docs":"datetime","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-datetime":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-datetime.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * datetime\n */\n@Component({\n    tag: 'limel-example-date-picker-datetime',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"datetime\"\n                    label=\"datetime\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-formatted.tsx","fileName":"date-picker-formatted.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-formatted","overview":"With defined localization","usage":{},"docs":"With defined localization","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-formatted":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-formatted.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With defined localization\n */\n@Component({\n    tag: 'limel-example-date-picker-formatted',\n    shadow: true,\n})\nexport class DatePickerFormattedExample {\n    @State()\n    private valueNo = new Date('2018-11-04');\n\n    @State()\n    private valueFi = new Date('2018-11-04');\n\n    public render() {\n        return [\n            <limel-date-picker\n                language=\"no\"\n                type=\"datetime\"\n                label=\"Localized date\"\n                value={this.valueNo}\n                onChange={this.handleChangeNo}\n            />,\n            <limel-example-value value={this.valueNo} />,\n            <limel-date-picker\n                language=\"fi\"\n                format=\"YYYY-MM-DD\"\n                type=\"datetime\"\n                label=\"Date with custom format\"\n                value={this.valueFi}\n                onChange={this.handleChangeFi}\n            />,\n            <limel-example-value value={this.valueFi} />,\n        ];\n    }\n\n    private handleChangeNo = (event) => {\n        this.valueNo = event.detail;\n    };\n\n    private handleChangeFi = (event) => {\n        this.valueFi = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-month.tsx","fileName":"date-picker-month.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-month","overview":"month","usage":{},"docs":"month","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-month":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-month.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * month\n */\n@Component({\n    tag: 'limel-example-date-picker-month',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"month\"\n                    label=\"month\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-programmatic-change.tsx","fileName":"date-picker-programmatic-change.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-programmatic-change","overview":"Changing the input programmatically","usage":{},"docs":"Changing the input programmatically","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-programmatic-change":["limel-button","limel-date-picker","limel-example-value"],"limel-button":["limel-icon","limel-spinner"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-programmatic-change.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport moment from 'moment/moment';\n\n/**\n * Changing the input programmatically\n */\n@Component({\n    tag: 'limel-example-date-picker-programmatic-change',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return [\n            <limel-button\n                onClick={this.addOneHour}\n                label=\"Add one hour\"\n                style={{ 'margin-bottom': '1rem' }}\n            />,\n            <limel-date-picker\n                type=\"datetime\"\n                label=\"datetime\"\n                value={this.value}\n                onChange={this.handleChange}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private addOneHour = () => {\n        this.value = moment(this.value).add(1, 'hour').toDate();\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-quarter.tsx","fileName":"date-picker-quarter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-quarter","overview":"quarter","usage":{},"docs":"quarter","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-quarter":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-quarter.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * quarter\n */\n@Component({\n    tag: 'limel-example-date-picker-quarter',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"quarter\"\n                    label=\"quarter\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-time.tsx","fileName":"date-picker-time.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-time","overview":"time","usage":{},"docs":"time","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-time":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-time.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * time\n */\n@Component({\n    tag: 'limel-example-date-picker-time',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"time\"\n                    label=\"time\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-week.tsx","fileName":"date-picker-week.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-week","overview":"week","usage":{},"docs":"week","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-week":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-week.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * week\n */\n@Component({\n    tag: 'limel-example-date-picker-week',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"week\"\n                    label=\"week\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples","filePath":"./src/components/date-picker/examples/date-picker-year.tsx","fileName":"date-picker-year.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/examples/usage","tag":"limel-example-date-picker-year","overview":"year","usage":{},"docs":"year","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-date-picker","limel-example-value"],"dependencyGraph":{"limel-example-date-picker-year":["limel-date-picker","limel-example-value"],"limel-date-picker":["limel-input-field","limel-portal","limel-flatpickr-adapter"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"date-picker-year.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * year\n */\n@Component({\n    tag: 'limel-example-date-picker-year',\n    shadow: true,\n})\nexport class DatePickerExample {\n    @State()\n    private value = new Date();\n\n    public render() {\n        return (\n            <p>\n                <limel-date-picker\n                    type=\"year\"\n                    label=\"year\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </p>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog.tsx","fileName":"dialog.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog":["limel-button","limel-dialog"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-dialog',\n    shadow: true,\n})\nexport class DialogExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog open={this.isOpen} onClose={this.closeDialog}>\n                <p>This is a simple alert-dialog.</p>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-action-buttons.tsx","fileName":"dialog-action-buttons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-action-buttons","overview":"Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/).","usage":{},"docs":"Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-checkbox"],"dependencyGraph":{"limel-example-dialog-action-buttons":["limel-button","limel-dialog","limel-checkbox"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-action-buttons.tsx","type":"tsx","source":"import { DialogHeading } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Example with three action buttons\n *\n * This example shows how more than two buttons can be positioned in a dialog's\n * footer. Pay attention to how they are labeled & styled, and how you can\n * enable important actions conditionally.\n *\n * :::note\n * When it comes to details such as placement of action buttons, choice of\n * labels, and adding meaningful graphical details, it's important to follow\n * a few design conventions which are explained in\n * [this guide](#/DesignGuidelines/action-buttons.md/).\n */\n@Component({\n    tag: 'limel-example-dialog-action-buttons',\n    shadow: true,\n    styleUrl: 'dialog-action-buttons.scss',\n})\nexport class DialogActionButtonsExample {\n    @State()\n    private checked = false;\n\n    @State()\n    private isOpen = false;\n\n    public render() {\n        const heading: DialogHeading = {\n            title: 'Whoa…! Be careful.',\n            subtitle: 'Wanna mass-update 2345 items?',\n            icon: 'brake_warning',\n        };\n\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                heading={heading}\n                open={this.isOpen}\n                onClose={this.closeDialog}\n            >\n                <div class=\"dialog-content\">\n                    <p>\n                        You are about to update 2345 items simultaneously. This\n                        will irreversibly change the affected values in the\n                        database, for all of these items!\n                    </p>\n                    <p>Are you sure you want to update them all?</p>\n                    <limel-checkbox\n                        label=\"It's OK. I'm aware of the consequences of this action.\"\n                        id=\"confirmation-checkbox\"\n                        required={true}\n                        onChange={this.confirmed}\n                        checked={this.checked}\n                    />\n                </div>\n                <limel-button\n                    label=\"Back to editing\"\n                    class=\"button back primary--neutral\"\n                    icon=\"left_arrow\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n                <limel-button\n                    label=\"Discard changes\"\n                    class=\"button discard primary--caution\"\n                    icon=\"cancel\"\n                    primary={true}\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n                <limel-button\n                    label=\"Update all\"\n                    class=\"button update\"\n                    icon=\"ok\"\n                    primary={true}\n                    onClick={this.displayFeedback}\n                    disabled={!this.checked}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private confirmed = (event: CustomEvent<boolean>) => {\n        this.checked = event.detail;\n    };\n\n    private displayFeedback = () => {\n        alert(\n            '2345 items are being updated in the background. This may take a few seconds…'\n        );\n        this.closeDialog();\n    };\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"},{"filename":"dialog-action-buttons.scss","type":"scss","source":":host {\n    --dialog-heading-icon-background-color: rgb(var(--color-red-default));\n    --dialog-heading-icon-color: rgb(var(--color-yellow-lighter));\n    --dialog-width: 40rem;\n}\n\n.button {\n    &.back {\n        // these styles will align the targeted button to the left.\n        margin-right: auto;\n        margin-top: 0;\n    }\n    &.primary--neutral {\n        --lime-primary-color: rgb(var(--contrast-1100));\n    }\n    &.primary--caution {\n        --lime-on-primary-color: rgb(var(--color-glaucous-darker));\n        --lime-primary-color: rgb(var(--color-amber-default));\n    }\n    &.primary--danger {\n        --lime-primary-color: rgb(var(--color-red-default));\n    }\n}\n\n@media screen and (max-width: 760px) {\n    .button {\n        &.back {\n            // these styles will add a gap between \"back button\" and \"discard\" in a mobile view\n            // and put all buttons in a column.\n            margin-top: 1rem;\n            margin-right: 0;\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-closing-actions.tsx","fileName":"dialog-closing-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-closing-actions","overview":"Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","usage":{},"docs":"Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog-closing-actions":["limel-button","limel-dialog"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-closing-actions.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Custom closing actions\n *\n * Action buttons in dialogs can be used to add a clear visual indication for\n * the sighted users to realize that the dialog can be closed by pressing\n * a button as well.\n * This may sometimes be considered an unnecessary usage of action buttons for\n * sighted users. Because majority of them users know that clicking or tapping\n * outside the dialog closes it.\n *\n * Such buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n *\n * :::tip\n * When to use action buttons for simple \"close\" actions?\n * - In fullscreen dialogs where clicking outside to close is hard.\n * - When big dialogs are opened on phones, which make tapping outside hard for users.\n * - When designing with accessibility in mind, and for those users who\n * use screen readers to navigate the user interface.\n * :::\n *\n * But sometimes, depending on the importance of the message which is displayed,\n * you have to choose to display a close button, and disable other means of\n * dismissing the dialog.\n *\n * :::tip\n * When to use custom closing actions?\n * - To make sure that the user really reads and understands the dialog's content.\n * - To make sure that the user does not accidentally click outside and close the dialog.\n * :::\n *\n * For such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\n * motivate users to dismiss the message; and instead use more purposeful labels\n * such as ***I understand***, ***Looks good!***, ***Continue***, and similar;\n * like in the example below.\n */\n\n@Component({\n    tag: 'limel-example-dialog-closing-actions',\n    shadow: true,\n})\nexport class DialogClosingActionsExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                open={this.isOpen}\n                closingActions={{ escapeKey: false, scrimClick: false }}\n                onClose={this.closeDialog}\n            >\n                <p>\n                    This dialog doesn't close by clicking the scrim or pressing\n                    the escape key. Only the button triggers a close event.\n                </p>\n                <limel-button\n                    label=\"I understand\"\n                    onClick={this.handleConfirmClick}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private handleConfirmClick = () => {\n        this.isOpen = false;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-form.tsx","fileName":"dialog-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-form","overview":"Dialog with form and confirmation dialog\n\nThis example demonstrates how to use a `limel-form` inside a `limel-dialog`.\nIt also shows a confirmation dialog when the user closes the main dialog\nwithout saving.","usage":{},"docs":"Dialog with form and confirmation dialog\n\nThis example demonstrates how to use a `limel-form` inside a `limel-dialog`.\nIt also shows a confirmation dialog when the user closes the main dialog\nwithout saving.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-form"],"dependencyGraph":{"limel-example-dialog-form":["limel-button","limel-dialog","limel-form"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-form.tsx","type":"tsx","source":"import {\n    FormSchema,\n    LimelFormCustomEvent,\n    ValidationStatus,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\nconst MIN_NAME_LENGTH = 5;\nconst MIN_AGE = 20;\nconst MAX_AGE = 50;\n\ninterface FormValue {\n    name: string;\n    age: number;\n    percentage: number;\n    color: string;\n}\n\n/**\n * Dialog with form and confirmation dialog\n *\n * This example demonstrates how to use a `limel-form` inside a `limel-dialog`.\n * It also shows a confirmation dialog when the user closes the main dialog\n * without saving.\n */\n@Component({\n    tag: 'limel-example-dialog-form',\n    styleUrl: 'dialog-form.scss',\n    shadow: true,\n})\nexport class DialogFormExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private isFormValid = true;\n\n    @State()\n    private formValue: FormValue = {\n        name: 'Harry Potter 🪄',\n        age: 44,\n        percentage: 40,\n        color: 'red',\n    };\n\n    @State()\n    private isConfirmationOpen = false;\n\n    private isSaving = false;\n\n    private formSchema: FormSchema<FormValue> = {\n        type: 'object',\n        lime: {\n            layout: {\n                type: 'grid',\n                columns: 2,\n            },\n        },\n        properties: {\n            name: {\n                type: 'string',\n                title: 'Name',\n                minLength: MIN_NAME_LENGTH,\n            },\n            age: {\n                type: 'number',\n                title: 'Age',\n                minimum: MIN_AGE,\n                maximum: MAX_AGE,\n            },\n            percentage: {\n                type: 'number',\n                title: 'Percentage',\n                lime: {\n                    layout: {\n                        colSpan: 'all',\n                    },\n                    component: {\n                        name: 'limel-slider',\n                        props: {\n                            unit: '%',\n                        },\n                    },\n                },\n            },\n            color: {\n                type: 'string',\n                title: 'Favorite color',\n                oneOf: [\n                    {\n                        type: 'string',\n                        const: 'red',\n                        title: 'Red',\n                    },\n                    {\n                        type: 'string',\n                        const: 'yellow',\n                        title: 'Yellow',\n                    },\n                    {\n                        type: 'string',\n                        const: 'green',\n                        title: 'Green',\n                    },\n                    {\n                        type: 'string',\n                        const: 'blue',\n                        title: 'Blue',\n                    },\n                    {\n                        type: 'string',\n                        const: 'black',\n                        title: 'Black',\n                    },\n                ],\n            },\n        },\n    };\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                class=\"registration-dialog\"\n                heading=\"Registration\"\n                open={this.isOpen}\n                onClose={this.closeDialog}\n                onClosing={this.onClosing}\n            >\n                <limel-form\n                    value={this.formValue}\n                    schema={this.formSchema}\n                    onChange={this.handleFormChange}\n                    onValidate={this.handleFormValidation}\n                />\n                <limel-button\n                    label=\"Cancel\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n                <limel-button\n                    primary={true}\n                    label=\"Save\"\n                    disabled={!this.isFormValid}\n                    onClick={this.submitForm}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n            <limel-dialog\n                open={this.isConfirmationOpen}\n                onClose={this.closeConfirmation}\n            >\n                <p>Are you sure you want to close this? </p>\n                <limel-button\n                    label=\"No\"\n                    onClick={this.onConfirmNegative}\n                    slot=\"button\"\n                />\n                <limel-button\n                    label=\"Yes\"\n                    onClick={this.onConfirmPositive}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private handleFormChange = (event: LimelFormCustomEvent<FormValue>) => {\n        this.formValue = event.detail;\n    };\n\n    private handleFormValidation = (\n        event: LimelFormCustomEvent<ValidationStatus>\n    ) => {\n        console.debug('Validation status:', event.detail);\n        this.isFormValid = event.detail.valid;\n    };\n\n    private submitForm = () => {\n        this.isSaving = true;\n        alert(\n            `${this.formValue?.name} is ${this.formValue?.age} years old. Favorite color is ${this.formValue?.color}.`\n        );\n        this.closeDialog();\n    };\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n\n    private onClosing = () => {\n        console.log('dialog is closing now!');\n        if (!this.isSaving) {\n            this.isConfirmationOpen = true;\n        }\n\n        this.isSaving = false;\n    };\n\n    private closeConfirmation = () => {\n        this.isConfirmationOpen = false;\n    };\n\n    private onConfirmPositive = () => {\n        this.isConfirmationOpen = false;\n        this.isOpen = false;\n    };\n\n    private onConfirmNegative = () => {\n        this.isOpen = true;\n        this.isConfirmationOpen = false;\n    };\n}\n"},{"filename":"dialog-form.scss","type":"scss","source":":host(limel-example-dialog-form) {\n    .registration-dialog {\n        --dialog-width: 35rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-fullscreen.tsx","fileName":"dialog-fullscreen.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-fullscreen","overview":"Fullscreen","usage":{},"docs":"Fullscreen","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog-fullscreen":["limel-button","limel-dialog"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-fullscreen.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Fullscreen\n */\n@Component({\n    tag: 'limel-example-dialog-fullscreen',\n    shadow: true,\n})\nexport class DialogSizeExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                open={this.isOpen}\n                fullscreen={true}\n                onClose={this.closeDialog}\n            >\n                <p>This dialog is fullscreen</p>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-heading.tsx","fileName":"dialog-heading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-heading","overview":"Dialog with heading\n\nIn this example you can also see how available style properties can be used.","usage":{},"docs":"Dialog with heading\n\nIn this example you can also see how available style properties can be used.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-input-field","limel-select"],"dependencyGraph":{"limel-example-dialog-heading":["limel-button","limel-dialog","limel-input-field","limel-select"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-heading.tsx","type":"tsx","source":"import {\n    DialogHeading,\n    LimelSelectCustomEvent,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Dialog with heading\n *\n * In this example you can also see how available style properties can be used.\n */\n@Component({\n    tag: 'limel-example-dialog-heading',\n    styleUrl: 'dialog-heading.scss',\n    shadow: true,\n})\nexport class DialogHeadingExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private title: string = 'Title';\n\n    @State()\n    private subtitle: string = 'Subtitle';\n\n    @State()\n    private supportingText: string;\n\n    @State()\n    private icon: Option;\n\n    private icons: Option[] = [\n        {\n            text: 'Company',\n            value: 'organization',\n        },\n        {\n            text: 'Person',\n            value: 'user_group_man_man',\n        },\n        {\n            text: 'Deal',\n            value: 'money',\n        },\n        {\n            text: 'Todo',\n            value: 'todo_list',\n        },\n    ];\n\n    constructor() {\n        this.icon = this.icons[0];\n    }\n\n    public render() {\n        const heading: DialogHeading = {\n            title: this.title,\n            subtitle: this.subtitle,\n            supportingText: this.supportingText,\n            icon: this.icon.value,\n        };\n        const classNames = {\n            [this.icon.text.toLowerCase()]: true,\n        };\n\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                open={this.isOpen}\n                onClose={this.closeDialog}\n                heading={heading}\n                class={classNames}\n            >\n                <limel-input-field\n                    required={true}\n                    label=\"Title\"\n                    value={this.title}\n                    onChange={this.handleTitleChange}\n                />\n                <limel-input-field\n                    label=\"Subtitle\"\n                    value={this.subtitle}\n                    onChange={this.handleSubtitleChange}\n                />\n                <limel-input-field\n                    label=\"Supporting text\"\n                    value={this.supportingText}\n                    onChange={this.handleSupportingTextChange}\n                />\n\n                <limel-select\n                    required={true}\n                    options={this.icons}\n                    label=\"Icon\"\n                    value={this.icon}\n                    onChange={this.handleIconChange}\n                />\n\n                <limel-button\n                    label=\"Ok\"\n                    primary={true}\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n\n    private handleTitleChange = (event: CustomEvent<string>) => {\n        this.title = event.detail;\n    };\n\n    private handleSubtitleChange = (event: CustomEvent<string>) => {\n        this.subtitle = event.detail;\n    };\n\n    private handleSupportingTextChange = (event: CustomEvent<string>) => {\n        this.supportingText = event.detail;\n    };\n\n    private handleIconChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.icon = event.detail;\n    };\n}\n"},{"filename":"dialog-heading.scss","type":"scss","source":":host(limel-example-dialog-heading) {\n    --dialog-width: 40rem;\n    --dialog-heading-subtitle-color: rgb(var(--contrast-1200));\n    --dialog-heading-icon-color: rgb(var(--color-white));\n\n    limel-input-field {\n        margin-bottom: 1rem;\n    }\n\n    limel-dialog {\n        &.company {\n            --dialog-heading-icon-color: rgb(var(--color-sky-default));\n        }\n\n        &.person {\n            --dialog-heading-icon-color: rgb(var(--color-orange-default));\n        }\n\n        &.deal {\n            --dialog-heading-icon-color: rgb(var(--color-green-default));\n        }\n\n        &.todo {\n            --header-heading-color: rgb(var(--color-teal-dark));\n            --dialog-heading-supporting-text-color: rgb(var(--color-red-dark));\n            --dialog-heading-icon-color: rgb(var(--color-teal-default));\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-heading-actions.tsx","fileName":"dialog-heading-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-heading-actions","overview":"Dialog with action inside the heading\n\nIn this example you can also see how available style properties can be used.","usage":{},"docs":"Dialog with action inside the heading\n\nIn this example you can also see how available style properties can be used.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-icon-button"],"dependencyGraph":{"limel-example-dialog-heading-actions":["limel-button","limel-dialog","limel-icon-button"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-heading-actions.tsx","type":"tsx","source":"import { DialogHeading } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Dialog with action inside the heading\n *\n * In this example you can also see how available style properties can be used.\n */\n@Component({\n    tag: 'limel-example-dialog-heading-actions',\n    styleUrl: 'dialog-heading.scss',\n    shadow: true,\n})\nexport class DialogHeadingActionsExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private title: string = 'Title';\n\n    @State()\n    private subtitle: string = 'Subtitle';\n\n    @State()\n    private supportingText: string;\n\n    public render() {\n        const heading: DialogHeading = {\n            title: this.title,\n            subtitle: this.subtitle,\n            supportingText: this.supportingText,\n            icon: 'info',\n        };\n\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog\n                open={this.isOpen}\n                onClose={this.closeDialog}\n                heading={heading}\n            >\n                <limel-icon-button\n                    label=\"Close\"\n                    icon=\"multiply\"\n                    slot=\"header-actions\"\n                    onClick={this.closeDialog}\n                />\n                <p>This is a dialog with an action in the header.</p>\n                <limel-button\n                    label=\"Ok\"\n                    primary={true}\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"},{"filename":"dialog-heading.scss","type":"scss","source":":host(limel-example-dialog-heading) {\n    --dialog-width: 40rem;\n    --dialog-heading-subtitle-color: rgb(var(--contrast-1200));\n    --dialog-heading-icon-color: rgb(var(--color-white));\n\n    limel-input-field {\n        margin-bottom: 1rem;\n    }\n\n    limel-dialog {\n        &.company {\n            --dialog-heading-icon-color: rgb(var(--color-sky-default));\n        }\n\n        &.person {\n            --dialog-heading-icon-color: rgb(var(--color-orange-default));\n        }\n\n        &.deal {\n            --dialog-heading-icon-color: rgb(var(--color-green-default));\n        }\n\n        &.todo {\n            --header-heading-color: rgb(var(--color-teal-dark));\n            --dialog-heading-supporting-text-color: rgb(var(--color-red-dark));\n            --dialog-heading-icon-color: rgb(var(--color-teal-default));\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-nested-close-events.tsx","fileName":"dialog-nested-close-events.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-nested-close-events","overview":"Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","usage":{},"docs":"Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-collapsible-section","limel-example-controls","limel-switch"],"dependencyGraph":{"limel-example-dialog-nested-close-events":["limel-button","limel-dialog","limel-collapsible-section","limel-example-controls","limel-switch"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-nested-close-events.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Nested `close` events\n *\n * When putting other elements that emit `close` events inside a dialog, those\n * events must be caught and stopped inside the dialog. If not, they will bubble\n * to the event handler listening for `close` events on the dialog, which will\n * close the dialog too.\n *\n * This example has an event handler for the `close` event on the dialog, and\n * a second event handler for the `close` event on the collapsible-section.\n *\n * Try it out with the _Stop the inner close-event_ switch disabled, and then\n * with the switch enabled, to see the difference.\n */\n@Component({\n    tag: 'limel-example-dialog-nested-close-events',\n    shadow: true,\n})\nexport class DialogNestedCloseEventsExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private stopInnerCloseEvent = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog open={this.isOpen} onClose={this.handleCloseOnDialog}>\n                <limel-collapsible-section\n                    header=\"Click to open me\"\n                    onClose={this.handleCloseOnCollapsible}\n                >\n                    <p>Then close me again…</p>\n                </limel-collapsible-section>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.handleCloseOnDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-switch\n                    label=\"Stop the inner close-event\"\n                    value={this.stopInnerCloseEvent}\n                    onChange={this.handleStopEventChange}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private handleCloseOnDialog = () => {\n        this.isOpen = false;\n    };\n\n    private handleCloseOnCollapsible = (event: CustomEvent) => {\n        if (this.stopInnerCloseEvent) {\n            console.log('Stopping the inner `close` event.');\n            event.stopPropagation();\n        } else {\n            console.log('NOT stopping the inner `close` event!');\n        }\n    };\n\n    private handleStopEventChange = (event: CustomEvent<boolean>) => {\n        this.stopInnerCloseEvent = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples","filePath":"./src/components/dialog/examples/dialog-size.tsx","fileName":"dialog-size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dialog/examples/usage","tag":"limel-example-dialog-size","overview":"Custom size","usage":{},"docs":"Custom size","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog"],"dependencyGraph":{"limel-example-dialog-size":["limel-button","limel-dialog"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dialog-size.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Custom size\n */\n@Component({\n    tag: 'limel-example-dialog-size',\n    shadow: true,\n    styleUrl: 'dialog-size.scss',\n})\nexport class DialogSizeExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                primary={true}\n                label=\"Open\"\n                onClick={this.openDialog}\n            />,\n            <limel-dialog open={this.isOpen} onClose={this.closeDialog}>\n                <p>This dialog has a custom size set through CSS variables:</p>\n                <p>\n                    <code>--dialog-width: 25rem</code>\n                </p>\n                <p>\n                    <code>--dialog-height: 50%</code>\n                </p>\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                    Mauris efficitur condimentum elit id viverra. Morbi\n                    venenatis malesuada iaculis. Suspendisse potenti. Curabitur\n                    rutrum quis tortor laoreet hendrerit. Sed a maximus orci.\n                    Curabitur pharetra in purus vulputate tempor. Proin non\n                    ullamcorper felis. Vivamus enim dolor, vulputate vel ipsum\n                    sollicitudin, venenatis varius eros. Aenean dignissim\n                    venenatis elit, a cursus nibh ornare in. Mauris sed congue\n                    ipsum. Vivamus cursus sapien eu nibh convallis, at\n                    scelerisque diam vulputate. Aliquam erat volutpat. Class\n                    aptent taciti sociosqu ad litora torquent per conubia\n                    nostra, per inceptos himenaeos. Morbi efficitur semper ex eu\n                    lacinia. Maecenas a dictum mauris, in pulvinar ligula.\n                </p>\n                <p>\n                    Etiam risus lectus, rhoncus eu ipsum nec, consectetur\n                    iaculis ex. Suspendisse nunc ex, aliquam nec malesuada\n                    vitae, porttitor eget ipsum. Aenean et pharetra nunc, quis\n                    dignissim ipsum. Aenean ut arcu vestibulum, commodo nulla\n                    ac, volutpat mauris. Praesent vel lectus odio. Pellentesque\n                    imperdiet congue pretium. Donec finibus ligula nulla, sed\n                    maximus dui pharetra a.\n                </p>\n                <p>\n                    Nunc dictum ut eros vitae euismod. Vestibulum condimentum\n                    justo nec mauris convallis condimentum. Sed ut sapien vel\n                    urna consectetur efficitur. Sed quis dui enim. Maecenas\n                    iaculis rhoncus magna, nec elementum massa tempor a. Donec\n                    molestie porttitor rhoncus. Sed lacinia nisi augue, dapibus\n                    scelerisque nisi consectetur sed. Nullam eros dui, interdum\n                    ut pretium a, ultrices nec nisi. Phasellus vulputate, mi id\n                    posuere tristique, ante massa efficitur nulla, vitae\n                    imperdiet justo massa nec justo. Phasellus commodo mauris et\n                    augue pretium, vulputate sodales ligula vehicula. Vivamus\n                    tempus turpis blandit, facilisis ante ac, iaculis sem.\n                    Aenean tincidunt tempus efficitur. Pellentesque iaculis\n                    posuere enim, id interdum dui. Etiam molestie, mi in aliquet\n                    sagittis, lectus odio semper mauris, vitae dictum nisl\n                    lectus sed est. Mauris vel feugiat lorem, et luctus risus.\n                </p>\n                <p>\n                    Nulla facilisi. Pellentesque congue metus vitae nibh\n                    volutpat pretium. Vestibulum luctus nibh sit amet mi sodales\n                    molestie. Maecenas dapibus, massa eu facilisis cursus, elit\n                    est facilisis nibh, at gravida augue lorem non lacus. Sed eu\n                    lectus semper, semper ipsum vitae, maximus metus. Etiam\n                    mattis lorem purus, nec efficitur sapien dignissim sit amet.\n                    Sed mollis sem id ex maximus blandit. Duis commodo blandit\n                    pellentesque.\n                </p>\n                <p>\n                    Etiam at imperdiet lacus. Vivamus vehicula turpis in rhoncus\n                    pretium. Duis dapibus tellus ut enim lacinia bibendum. Morbi\n                    consequat metus quis ligula ultricies sodales. Vivamus\n                    aliquam, lectus quis pulvinar semper, arcu massa vehicula\n                    metus, porttitor condimentum odio lectus vel mi. Cras\n                    molestie, turpis eget auctor dapibus, augue metus euismod\n                    dolor, nec tincidunt urna dolor nec odio. Curabitur bibendum\n                    dignissim est in dapibus. Aenean dignissim nec dolor nec\n                    rhoncus. Maecenas vel justo consectetur, bibendum tortor\n                    vel, viverra risus. Donec elementum, ex iaculis pharetra\n                    aliquet, mi enim pharetra nisl, in euismod enim ex at orci.\n                    Quisque in leo sed risus cursus ornare. Nam ut turpis\n                    consequat, rhoncus leo eu, dignissim nisl. Sed blandit,\n                    libero vel fringilla porttitor, odio orci rutrum enim, sed\n                    rhoncus quam risus eu neque.\n                </p>\n                <limel-button\n                    label=\"Ok\"\n                    onClick={this.closeDialog}\n                    slot=\"button\"\n                />\n            </limel-dialog>,\n        ];\n    }\n\n    private openDialog = () => {\n        this.isOpen = true;\n    };\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n}\n"},{"filename":"dialog-size.scss","type":"scss","source":"limel-dialog {\n    --dialog-width: 25rem;\n    --dialog-height: 50%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/examples","filePath":"./src/examples/example-do-do-not.tsx","fileName":"example-do-do-not.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/examples/usage","tag":"limel-example-do-do-not","overview":"This component is only used in our documentations\nto provide a container for enriching the guidelines with\ngood and bad examples.","usage":{},"docs":"This component is only used in our documentations\nto provide a container for enriching the guidelines with\ngood and bad examples.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-example-action-buttons-choosing-explicit-labels","limel-example-action-buttons-choosing-labels","limel-example-action-buttons-colors-do-dont","limel-example-action-buttons-primary-secondary-reversed","limel-example-action-buttons-primary-secondary-reversed-colors","limel-example-audition-form","limel-example-audition-form-readonly","limel-example-button-disabled-vs-hidden","limel-example-button-icon","limel-example-shadows-bad-usage","limel-example-switch-vs-checkbox","limel-example-tooltip-declutter"],"dependencies":["limel-icon","limel-markdown"],"dependencyGraph":{"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-example-action-buttons-choosing-explicit-labels":["limel-example-do-do-not"],"limel-example-action-buttons-choosing-labels":["limel-example-do-do-not"],"limel-example-action-buttons-colors-do-dont":["limel-example-do-do-not"],"limel-example-action-buttons-primary-secondary-reversed":["limel-example-do-do-not"],"limel-example-action-buttons-primary-secondary-reversed-colors":["limel-example-do-do-not"],"limel-example-audition-form":["limel-example-do-do-not"],"limel-example-audition-form-readonly":["limel-example-do-do-not"],"limel-example-button-disabled-vs-hidden":["limel-example-do-do-not"],"limel-example-button-icon":["limel-example-do-do-not"],"limel-example-shadows-bad-usage":["limel-example-do-do-not"],"limel-example-switch-vs-checkbox":["limel-example-do-do-not"],"limel-example-tooltip-declutter":["limel-example-do-do-not"]},"props":[{"name":"doDescription","type":"string","mutable":false,"attr":"do-description","reflectToAttr":false,"docs":"Supports markdown and can be used to add a description\nto the \"Do\" section.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"doNotDescription","type":"string","mutable":false,"attr":"do-not-description","reflectToAttr":false,"docs":"Supports markdown and can be used to add a description\nto the \"Don't\" section.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--example-do-do-not-max-columns-width","annotation":"prop","docs":"Defines maximum width of columns."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"example-do-do-not.tsx","type":"tsx","source":"import { Component, h, Host, Prop } from '@stencil/core';\n\n/**\n * This component is only used in our documentations\n * to provide a container for enriching the guidelines with\n * good and bad examples.\n *\n * @private\n */\n@Component({\n    tag: 'limel-example-do-do-not',\n    shadow: true,\n    styleUrl: 'example-do-do-not.scss',\n})\nexport class ExampleDoDoNot {\n    /**\n     * Supports markdown and can be used to add a description\n     * to the \"Do\" section.\n     */\n    @Prop()\n    public doDescription?: string;\n\n    /**\n     * Supports markdown and can be used to add a description\n     * to the \"Don't\" section.\n     */\n    @Prop()\n    public doNotDescription?: string;\n\n    public render() {\n        return (\n            <Host>\n                {this.renderSection(\n                    'do',\n                    'checkmark',\n                    'Do',\n                    this.doDescription\n                )}\n                {this.renderSection(\n                    'do-not',\n                    'multiply',\n                    \"Don't\",\n                    this.doNotDescription\n                )}\n            </Host>\n        );\n    }\n\n    private renderSection(\n        type: string,\n        iconName: string,\n        title: string,\n        description?: string\n    ) {\n        const titleId = `${type}-title`;\n        const descriptionId = description ? `${type}-description` : undefined;\n\n        return (\n            <section\n                class={type}\n                aria-labelledby={titleId}\n                aria-describedby={descriptionId}\n            >\n                <div>\n                    <slot name={type} />\n                    <footer>\n                        <limel-icon name={iconName} aria-hidden=\"true\" />\n                        <h1 id={titleId}>{title}</h1>\n                    </footer>\n                </div>\n                {this.renderDescription(description, descriptionId)}\n            </section>\n        );\n    }\n\n    private renderDescription(description?: string, id?: string) {\n        if (!description) {\n            return;\n        }\n\n        return <limel-markdown id={id} value={description} />;\n    }\n}\n"},{"filename":"example-do-do-not.scss","type":"scss","source":"/**\n * @prop --example-do-do-not-max-columns-width: Defines maximum width of columns.\n */\n\n:host(limel-example-do-do-not) {\n    display: grid;\n    grid-template-columns: repeat(\n        auto-fit,\n        minmax(var(--example-do-do-not-max-columns-width, 16rem), 1fr)\n    );\n    gap: 1.25rem 0.75rem;\n\n    margin: 1rem 0;\n}\n\nsection {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n}\n\ndiv {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n\n    border-radius: 0.5rem;\n    padding: 0.25rem;\n\n    .do & {\n        background-color: rgb(var(--color-green-lighter));\n    }\n    .do-not & {\n        background-color: rgb(var(--color-red-lighter));\n    }\n}\n\nslot {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.375rem;\n\n    padding: 1rem;\n    gap: 0.5rem;\n    min-height: 1rem;\n    background-color: rgb(var(--contrast-100));\n}\n\n::slotted([slot='do']),\n::slotted([slot='do-not']) {\n    border-radius: 0.375rem;\n}\n\nfooter {\n    display: flex;\n    gap: 0.25rem;\n    align-items: center;\n\n    color: rgb(var(--color-glaucous-darker));\n    padding: 0.125rem 0.25rem;\n}\n\nh1 {\n    all: unset;\n    font-size: 0.75rem;\n}\n\nlimel-icon {\n    width: 1rem;\n\n    .do & {\n        color: rgb(var(--color-green-darker));\n    }\n    .do-not & {\n        color: rgb(var(--color-red-darker));\n    }\n}\n\nlimel-markdown {\n    padding: 0 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-basic.tsx","fileName":"dock-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-basic","overview":"Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","usage":{},"docs":"Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-basic":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '@limetech/lime-elements';\n\n/**\n * Basic Example\n *\n * The Dock component can be used as a place for displaying the app's\n * primary navigation.\n *\n * :::important\n * Avoid having too many items in the Dock, because it will become\n * problematic on mobile devices, when the component is rendered horizontally.\n * :::\n *\n * It is possible to split the dock items into two sections and place one or\n * more items at the bottom of the column. To do so, you can use `isFooterStart`\n * on one of the items, which will act as a separator between the two sections,\n * pushing itself and preceding to the bottom.\n *\n * :::important\n * You must provide `label`s for to improve accesibility! Without labels,\n * screen-readers cannot tell visually impared persons about the content\n * of the Dock.\n * :::\n *\n * It is possible to add extra information about the items using `helperLabel`.\n *\n * When the component is expanded, only the `helpeLabel` is used\n * in the tooltip, when items are hovered.\n * When the component is shrunk, both `label` and `helperLabel` are displayed\n * inside the tooltip.\n *\n * Keep in mind that on a mobile phone, the component will be displayed horizontally\n * and no labels are displayed! Instead, both `label` and `helperLabel` will be used\n * as a tooltip to improve accessibility for screen-reader technologies.\n *\n * However, since hovering is not possible on touch-only mobile devices, users who\n * rely on their vision to navigate the app will only see your chosen icons.\n * So pick them carefully.\n *\n */\n@Component({\n    tag: 'limel-example-dock-basic',\n    shadow: true,\n    styleUrl: 'dock-basic.scss',\n})\nexport class DockBasicExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            helperLabel: 'Cmd + H',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'user',\n            label: 'Preferences',\n            icon: 'user',\n        },\n        {\n            id: 'settings',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: basic dock\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-basic.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-colors-css.tsx","fileName":"dock-colors-css.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-colors-css","overview":"Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::","usage":{},"docs":"Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-colors-css":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-colors-css.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '@limetech/lime-elements';\n\n/**\n * Using CSS color variables for theming the Dock\n *\n * A few CSS variables can be used to customize the look and feel of the steps.\n *\n * :::note\n * Using CSS variables to tweak the colors, applies the colors globally to the\n * component, not to individual Dock items!\n * :::\n * :::important\n * Make sure that:\n * - text has enough contrast with its background and is readable.\n * :::\n */\n\n@Component({\n    tag: 'limel-example-dock-colors-css',\n    shadow: true,\n    styleUrl: 'dock-colors-css.scss',\n})\nexport class DockColorsCssExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: '1',\n            label: 'Home',\n            selected: true,\n            icon: 'home',\n        },\n        {\n            id: '2',\n            label: 'Search',\n            icon: 'search',\n        },\n        {\n            id: '3',\n            label: 'Calls',\n            icon: 'phone',\n        },\n        {\n            id: '4',\n            label: 'Chats',\n            icon: 'chat',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: '5',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: CSS color variables\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                    expanded={true}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-colors-css.scss","type":"scss","source":":host {\n    --dock-background-color: rgb(var(--color-glaucous-darker));\n    --dock-item-text-color: rgb(var(--color-cyan-lighter));\n    --dock-item-text-color--selected: rgb(var(--color-white));\n    --dock-item-icon-color: rgb(var(--color-cyan-lighter));\n    --dock-item-background-color--selected: rgb(var(--color-cyan-darker));\n}\n\n.application {\n    background-color: rgb(var(--contrast-1600));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-custom-component.tsx","fileName":"dock-custom-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-custom-component","overview":"Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","usage":{},"docs":"Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","docsTags":[{"name":"sourceFile","text":"my-custom-menu.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-custom-component":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-custom-component.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '@limetech/lime-elements';\n\n/**\n * Displaying a custom component after Dock item is clicked\n *\n * It is possible to display a custom component in a popover,\n * when the Dock item is clicked. This enables you to design\n * the content of the menu as you wish, independently from the Dock.\n *\n * :::note\n * Pay attention to the `--popover-surface-width` variable in the\n * `.SCSS` file. That defines the width the popover component, which is `auto`\n * by default. But modifying it may be helpful depending on the usage.\n * :::\n *\n * @sourceFile my-custom-menu.tsx\n */\n\n@Component({\n    tag: 'limel-example-dock-custom-component',\n    shadow: true,\n    styleUrl: 'dock-basic.scss',\n})\nexport class DockCustomComponentExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            helperLabel: 'Cmd + H',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n            dockMenu: { componentName: 'my-custom-menu' },\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: item with custom menu\"\n                    dockItems={this.dockItems}\n                    onItemSelected={this.handleSelected}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        this.dockItems = this.dockItems.map((item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        });\n    };\n}\n"},{"filename":"dock-basic.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"},{"filename":"my-custom-menu.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'my-custom-menu',\n    shadow: { delegatesFocus: true },\n})\nexport class MyCustomMenu {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Companies',\n            icon: {\n                name: 'organization',\n                color: 'rgb(var(--color-blue-default)',\n            },\n        },\n        {\n            text: 'Deals',\n            icon: {\n                name: 'money',\n                color: 'rgb(var(--color-green-default))',\n            },\n        },\n        {\n            text: 'Agreements',\n            icon: {\n                name: 'handshake',\n                color: 'rgb(var(--color-pink-default))',\n            },\n        },\n        {\n            text: 'Todos',\n            icon: {\n                name: 'today',\n                color: 'rgb(var(--color-teal-default))',\n            },\n        },\n        {\n            text: 'History',\n            icon: {\n                name: 'comments',\n                color: 'rgb(var(--color-grey-light))',\n            },\n        },\n        {\n            text: 'Coworkers',\n            icon: {\n                name: 'gender_neutral_user',\n                color: 'rgb(var(--color-orange-light))',\n            },\n        },\n        {\n            text: 'Persons',\n            icon: {\n                name: 'user_group_man_man',\n                color: 'rgb(var(--color-yellow-dark)',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-header\n                heading=\"Navigate to a table\"\n                subheading=\"Showing 7 of 12\"\n                supportingText=\"Show all…\"\n            />,\n            <limel-list\n                items={this.items}\n                class=\"has-grid-layout has-interactive-items\"\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-expanded.tsx","fileName":"dock-expanded.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-expanded","overview":"Basic Example expanded","usage":{},"docs":"Basic Example expanded","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-expanded":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-expanded.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '@limetech/lime-elements';\n\n/**\n * Basic Example expanded\n */\n@Component({\n    tag: 'limel-example-dock-expanded',\n    shadow: true,\n    styleUrl: 'dock-basic.scss',\n})\nexport class DockExpandedExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            helperLabel: 'Cmd + H',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n            dockMenu: { componentName: 'my-custom-menu' },\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'create',\n            label: 'Create object',\n            icon: 'plus_math',\n        },\n        {\n            id: 'settings',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: expanded\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                    allowResize={false}\n                    expanded={true}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-basic.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-mobile.tsx","fileName":"dock-mobile.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-mobile","overview":"Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","usage":{},"docs":"Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-mobile":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-mobile.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '@limetech/lime-elements';\n\n/**\n * Setting a horizontal layout for mobile devices.\n *\n * By default, the component has a vertical layout, placing the\n * Dock items in a column. However, the component will render the\n * Dock items in a horizontal layout when the screen width is smaller\n * than `700px`.\n *\n * If you prefer the component to switch to the horizontal mobile layout\n * at another breakpoint, use the `mobileBreakPoint` property and give it\n * a desired value in pixels (without `px`).\n *\n * In this example, we have chosen a very large number (`5000`) to force\n * the component to be rendered in mobile layout here in the documentation,\n * no matter how large the reader's screen size is.\n *\n * :::important\n * Triggering the mobile layout does not automatically adjust the position\n * of the component at the bottom of the screen. You should do that manually\n * yourself in a proper way, depending on where the component is used;\n * for example by using CSS media queries, and setting `position: fixed`.\n * :::\n *\n * :::note\n * Labels are not displayed in horizontal layout, but they will be instead\n * displayed as tooltips.\n * :::\n */\n@Component({\n    tag: 'limel-example-dock-mobile',\n    shadow: true,\n    styleUrl: 'dock-mobile.scss',\n})\nexport class DockMobileExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Lime',\n            selected: true,\n            icon: '-lime-logo-outlined-colored',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n            dockMenu: { componentName: 'my-custom-menu' },\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'create',\n            label: 'Create object',\n            icon: 'plus_math',\n        },\n        {\n            id: 'settings',\n            label: 'Settings',\n            icon: 'settings',\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: mobile layout\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                    mobileBreakPoint={5000}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-mobile.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 40rem);\n}\n\n.application {\n    position: relative;\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n    width: 20rem;\n    margin: 0 auto;\n}\n\nlimel-dock {\n    position: absolute;\n    inset: auto 0 0 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/dock-notification.tsx","fileName":"dock-notification.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"limel-example-dock-notification","overview":"Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","usage":{},"docs":"Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dock"],"dependencyGraph":{"limel-example-dock-notification":["limel-dock"],"limel-dock":["limel-dock-button","limel-icon"],"limel-dock-button":["limel-badge","limel-popover","limel-icon","limel-tooltip"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dock-notification.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { DockItem } from '@limetech/lime-elements';\n\n/**\n * Displaying a notification badge\n *\n * It is possible to display a notification badge on each individual\n * button in the Dock. Badges are supposed to inform the user that\n * there is something in the menu that requires their attention.\n *\n * This is typically done by displaying a number, which summarizes\n * the quantity of the items that require user's attention.\n *\n * :::important\n * The menus are not a part of the Dock. They are individual components\n * that you develop separately. Make sure that the information\n * and interactions regarding the notifications are correctly handled.\n *\n * For example, when the items that require user's attention are\n * seen or handled by the user after opening the menu, the badge on the\n * Dock button should disappear.\n * :::\n *\n * When this quantity is unclear or undefined, you can simply pass an\n * empty string (`badge: ''`), which will only render a circle on the button.\n * This is enough to attract user's attention.\n * However, it is also possible to use a short string such as \"·\" or \"!\"\n * for such cases, if considered necessary.\n *\n * :::warning\n * Do not negatively exploit this possibility and spam users' awareness.\n * The Dock is the most important and most dominant structural part of\n * the UI of your application. Therefore crowding it with too much noise\n * _will_ negatively affect the user experience.\n * :::\n *\n *\n */\n@Component({\n    tag: 'limel-example-dock-notification',\n    shadow: true,\n    styleUrl: 'dock-notification.scss',\n})\nexport class DockNotificationExample {\n    @State()\n    private dockItems: DockItem[] = [\n        {\n            id: 'home',\n            label: 'Home',\n            selected: true,\n            icon: '-lime-logo-go-filled',\n        },\n        {\n            id: 'tables',\n            label: 'Tables',\n            icon: 'insert_table',\n        },\n        {\n            id: 'search',\n            label: 'Search',\n            icon: 'search',\n            badge: '',\n        },\n    ];\n\n    @State()\n    private dockFooterItems: DockItem[] = [\n        {\n            id: 'user',\n            label: 'Account',\n            icon: 'user',\n            badge: 5,\n            dockMenu: { componentName: 'my-custom-menu-with-notifications' },\n        },\n    ];\n\n    public render() {\n        return (\n            <div class=\"application\">\n                <limel-dock\n                    accessibleLabel=\"Dock Example: dock with notification badges\"\n                    dockItems={this.dockItems}\n                    dockFooterItems={this.dockFooterItems}\n                    onItemSelected={this.handleSelected}\n                />\n            </div>\n        );\n    }\n\n    private handleSelected = (event: CustomEvent<DockItem>) => {\n        const setSelection = (item: DockItem) => {\n            return {\n                ...item,\n                selected: item.id === event.detail.id,\n            };\n        };\n\n        this.dockItems = this.dockItems.map(setSelection);\n        this.dockFooterItems = this.dockFooterItems.map(setSelection);\n    };\n}\n"},{"filename":"dock-notification.scss","type":"scss","source":":host {\n    --popover-surface-width: min(100vw, 15rem);\n}\n\n.application {\n    background-color: rgb(var(--contrast-400));\n    border: 1px solid rgb(var(--contrast-500));\n    overflow: hidden;\n    border-radius: 0.5rem;\n    height: 30rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/dynamic-form.tsx","fileName":"dynamic-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-dynamic-form","overview":"Dynamic schema","usage":{},"docs":"Dynamic schema","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-dynamic-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dynamic-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FormSchema, ValidationStatus } from '@limetech/lime-elements';\n\n/**\n * Dynamic schema\n */\n@Component({\n    tag: 'limel-example-dynamic-form',\n    shadow: true,\n    styleUrl: 'dynamic-form.scss',\n})\nexport class DynamicFormExample {\n    @State()\n    private formData: object = {\n        title: 'Test',\n    };\n    @State()\n    private errors = null;\n\n    @State()\n    private schema: FormSchema = {\n        $id: 'test',\n        title: 'My form',\n        description: 'Lorem ipsum dolor sit amet',\n        type: 'object',\n        required: ['title'],\n        properties: {\n            title: {\n                type: 'string',\n                title: 'Title',\n                default: 'A new task',\n                description: 'Lorem ipsum dolor sit amet',\n                minLength: 5,\n            },\n            done: { type: 'boolean', title: 'Done?', default: false },\n        },\n    };\n\n    @State()\n    private text: string;\n\n    constructor() {\n        this.text = JSON.stringify(this.schema, null, '    ');\n    }\n\n    public render() {\n        return [\n            <textarea onChange={this.handleTextChange}>{this.text}</textarea>,\n            <br />,\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleValidate}\n                value={this.formData}\n                schema={this.schema}\n            />,\n            <limel-example-value value={this.formData} />,\n            <limel-example-value label=\"Errors\" value={this.errors} />,\n        ];\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.formData = event.detail;\n    };\n\n    private handleTextChange = (event) => {\n        this.text = event.target.value;\n        try {\n            const json = JSON.parse(event.target.value);\n            if (json) {\n                this.schema = json;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    private handleValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.errors = event.detail;\n    };\n}\n"},{"filename":"dynamic-form.scss","type":"scss","source":"textarea {\n    width: 100%;\n    min-height: 300px;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/examples","filePath":"./src/components/dynamic-label/examples/dynamic-label.tsx","fileName":"dynamic-label.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/examples/usage","tag":"limel-example-dynamic-label","overview":"Basic example\n\nSwitching the value to `true` or `false` will dynamically change the label,\nwhile the default label (including its icon) is ignored.","usage":{},"docs":"Basic example\n\nSwitching the value to `true` or `false` will dynamically change the label,\nwhile the default label (including its icon) is ignored.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dynamic-label","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-dynamic-label":["limel-dynamic-label","limel-example-controls","limel-checkbox","limel-example-value"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dynamic-label.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Basic example\n *\n * Switching the value to `true` or `false` will dynamically change the label,\n * while the default label (including its icon) is ignored.\n */\n@Component({\n    tag: 'limel-example-dynamic-label',\n    shadow: true,\n})\nexport class DynamicLabelExample {\n    @State()\n    private value: boolean = false;\n\n    public render() {\n        return [\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Debt', icon: 'minus' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        text: 'Has debts',\n                        icon: {\n                            name: 'error',\n                            color: 'rgb(var(--color-red-default))',\n                            backgroundColor: 'rgb(var(--color-yellow-default))',\n                        },\n                    },\n                    {\n                        value: false,\n                        text: 'Does not have debts',\n                        icon: {\n                            name: 'ok',\n                            color: 'rgb(var(--color-green-default))',\n                        },\n                    },\n                ]}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Value\"\n                    onChange={this.setChecked}\n                />\n                <limel-example-value label=\"Current value\" value={this.value} />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/examples","filePath":"./src/components/dynamic-label/examples/dynamic-label-readonly-boolean.tsx","fileName":"dynamic-label-readonly-boolean.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/examples/usage","tag":"limel-example-dynamic-label-readonly-boolean","overview":"Readonly boolean\nThe `readonly` mode of a boolean fields do not always\nclearly communicate the meaning of the data to the end users. Similar problems\nhave existed in user interfaces forever, and it not solely limited to\nreadonly-ness of a boolean field. If you are interested in reading more\nabout these common design problems, you can check out\n[**State-Switch Controls:** The Infamous Case of the \"Mute\" Button](https://www.nngroup.com/articles/state-switch-buttons/)\n\nIn short, the reason end-users become confused is that it is not enough to\nkeep the same label for both `true` and `false` states,\nand only rely on changing the color or the\nshapes and visual motifs, to communicate what the field means.\n\nInstead, we need to use different labels to describe the state,\nand also get some additional help from icons and colors\nto clarify further if needed.\n\n:::important\nThis example shows how to setup the `limel-dynamic-label` component to\ncreate a more descriptive and dynamic labels for boolean fields.\nBut please make sure to read our guidelines about\n[Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/)\nto understand the importance of this, and get help in choosing the right labels\nfor boolean fields.\n:::","usage":{},"docs":"Readonly boolean\nThe `readonly` mode of a boolean fields do not always\nclearly communicate the meaning of the data to the end users. Similar problems\nhave existed in user interfaces forever, and it not solely limited to\nreadonly-ness of a boolean field. If you are interested in reading more\nabout these common design problems, you can check out\n[**State-Switch Controls:** The Infamous Case of the \"Mute\" Button](https://www.nngroup.com/articles/state-switch-buttons/)\n\nIn short, the reason end-users become confused is that it is not enough to\nkeep the same label for both `true` and `false` states,\nand only rely on changing the color or the\nshapes and visual motifs, to communicate what the field means.\n\nInstead, we need to use different labels to describe the state,\nand also get some additional help from icons and colors\nto clarify further if needed.\n\n:::important\nThis example shows how to setup the `limel-dynamic-label` component to\ncreate a more descriptive and dynamic labels for boolean fields.\nBut please make sure to read our guidelines about\n[Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/)\nto understand the importance of this, and get help in choosing the right labels\nfor boolean fields.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-dynamic-label","limel-checkbox","limel-switch","limel-example-controls","limel-example-value"],"dependencyGraph":{"limel-example-dynamic-label-readonly-boolean":["limel-dynamic-label","limel-checkbox","limel-switch","limel-example-controls","limel-example-value"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-switch":["limel-helper-line","limel-dynamic-label"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"dynamic-label-readonly-boolean.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Readonly boolean\n * The `readonly` mode of a boolean fields do not always\n * clearly communicate the meaning of the data to the end users. Similar problems\n * have existed in user interfaces forever, and it not solely limited to\n * readonly-ness of a boolean field. If you are interested in reading more\n * about these common design problems, you can check out\n * [**State-Switch Controls:** The Infamous Case of the \"Mute\" Button](https://www.nngroup.com/articles/state-switch-buttons/)\n *\n * In short, the reason end-users become confused is that it is not enough to\n * keep the same label for both `true` and `false` states,\n * and only rely on changing the color or the\n * shapes and visual motifs, to communicate what the field means.\n *\n * Instead, we need to use different labels to describe the state,\n * and also get some additional help from icons and colors\n * to clarify further if needed.\n *\n * :::important\n * This example shows how to setup the `limel-dynamic-label` component to\n * create a more descriptive and dynamic labels for boolean fields.\n * But please make sure to read our guidelines about\n * [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/)\n * to understand the importance of this, and get help in choosing the right labels\n * for boolean fields.\n * :::\n */\n@Component({\n    tag: 'limel-example-dynamic-label-readonly-boolean',\n    shadow: true,\n    styleUrl: 'dynamic-label-readonly-boolean.scss',\n})\nexport class DynamicLabelExample {\n    @State()\n    private value: boolean = false;\n\n    public render() {\n        return [\n            <p>Default</p>,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Debt', icon: 'minus' }}\n            />,\n            <hr></hr>,\n            <p>Customized</p>,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Debt' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        text: 'Has debts',\n                        icon: {\n                            name: 'error',\n                            color: 'rgb(var(--color-red-default))',\n                            backgroundColor: 'rgb(var(--color-yellow-default))',\n                        },\n                    },\n                    {\n                        value: false,\n                        text: 'Does not have debts',\n                        icon: {\n                            name: 'ok',\n                            color: 'rgb(var(--color-green-default))',\n                        },\n                    },\n                ]}\n            />,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Newsletter' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        icon: 'news',\n                        text: 'Subscribed to receive newsletters',\n                    },\n                    {\n                        value: false,\n                        icon: {\n                            name: 'cancel_subscription',\n                            color: 'rgb(var(--color-orange-default))',\n                        },\n                        text: 'Unsubscribed from newsletters',\n                    },\n                ]}\n            />,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Quit' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        icon: {\n                            name: 'inactive_state',\n                            color: 'rgb(var(--color-gray-default))',\n                        },\n                        text: 'Has quit their job',\n                    },\n                    {\n                        value: false,\n                        icon: {\n                            name: 'in_progress',\n                            color: 'rgb(var(--color-sky-default))',\n                        },\n                        text: 'Still works here',\n                    },\n                ]}\n            />,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Mute' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        icon: {\n                            name: 'no_microphone',\n                            color: 'rgb(var(--color-gray-light))',\n                        },\n                        text: \"You're muted\",\n                    },\n                    {\n                        value: false,\n                        icon: 'microphone',\n                        text: 'Microphone is active…',\n                    },\n                ]}\n            />,\n            <hr></hr>,\n            <p>Used in Checkbox and Switch</p>,\n            <limel-checkbox\n                checked={this.value}\n                readonly={true}\n                label=\"Checkbox\"\n            />,\n            <limel-switch value={this.value} readonly={true} label=\"Switch\" />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Value\"\n                    onChange={this.setChecked}\n                />\n                <limel-example-value label=\"Current value\" value={this.value} />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n}\n"},{"filename":"dynamic-label-readonly-boolean.scss","type":"scss","source":":host(limel-example-dynamic-label-readonly-boolean) {\n    --example-controls-column-layout: auto-fit;\n    display: grid;\n    gap: 1rem;\n}\n\nhr {\n    all: unset;\n    border-top: 1px solid rgb(var(--contrast-400));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/examples","filePath":"./src/examples/example-event-printer.tsx","fileName":"example-event-printer.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/examples/usage","tag":"limel-example-event-printer","overview":"The `limel-example-event-printer` component is a utility component used in\nLime Elements documentation for debugging and displaying events\nthat occur in component examples.\n\n## Purpose\nThis component acts as an event logger that:\n- Captures and displays events in a readable format\n- Shows event details in an expandable view\n- Timestamps each event occurrence\n- Pretty-prints event data\n\n## Usage\n```tsx\n<limel-example-event-printer ref={(el) => this.eventPrinter = el} />\n// Later in your code:\nthis.eventPrinter.writeEvent(event);\n```\n\n## State Management\nUses `@State()` decorator to maintain an array of caught events\nEach event entry contains:\n- `timestamp`: String representation of when the event occurred\n- `event`: The actual Event object\n\n## Display Format\nEvents are displayed in a collapsible `<details>` element with:\n- Summary showing timestamp, event type, and basic details\n- Expandable section showing the full event data\n- Code formatting for better readability","usage":{},"docs":"The `limel-example-event-printer` component is a utility component used in\nLime Elements documentation for debugging and displaying events\nthat occur in component examples.\n\n## Purpose\nThis component acts as an event logger that:\n- Captures and displays events in a readable format\n- Shows event details in an expandable view\n- Timestamps each event occurrence\n- Pretty-prints event data\n\n## Usage\n```tsx\n<limel-example-event-printer ref={(el) => this.eventPrinter = el} />\n// Later in your code:\nthis.eventPrinter.writeEvent(event);\n```\n\n## State Management\nUses `@State()` decorator to maintain an array of caught events\nEach event entry contains:\n- `timestamp`: String representation of when the event occurred\n- `event`: The actual Event object\n\n## Display Format\nEvents are displayed in a collapsible `<details>` element with:\n- Summary showing timestamp, event type, and basic details\n- Expandable section showing the full event data\n- Code formatting for better readability","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-example-button-composite","limel-example-button-group-composite","limel-example-checkbox","limel-example-chip-set-composite","limel-example-date-picker-composite","limel-example-file-composite","limel-example-menu-composite","limel-example-picker-composite","limel-example-slider-composite","limel-example-table-selectable-rows"],"dependencies":[],"dependencyGraph":{"limel-example-button-composite":["limel-example-event-printer"],"limel-example-button-group-composite":["limel-example-event-printer"],"limel-example-checkbox":["limel-example-event-printer"],"limel-example-chip-set-composite":["limel-example-event-printer"],"limel-example-date-picker-composite":["limel-example-event-printer"],"limel-example-file-composite":["limel-example-event-printer"],"limel-example-menu-composite":["limel-example-event-printer"],"limel-example-picker-composite":["limel-example-event-printer"],"limel-example-slider-composite":["limel-example-event-printer"],"limel-example-table-selectable-rows":["limel-example-event-printer"]},"props":[],"methods":[{"name":"writeEvent","returns":{"type":"Promise<void>","docs":""},"signature":"writeEvent(event: Event) => Promise<void>","parameters":[],"docs":"","docsTags":[]}],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"example-event-printer.tsx","type":"tsx","source":"import { Component, h, Method, State } from '@stencil/core';\nimport dayjs from 'dayjs';\n/**\n * The `limel-example-event-printer` component is a utility component used in\n * Lime Elements documentation for debugging and displaying events\n * that occur in component examples.\n *\n * ## Purpose\n * This component acts as an event logger that:\n * - Captures and displays events in a readable format\n * - Shows event details in an expandable view\n * - Timestamps each event occurrence\n * - Pretty-prints event data\n *\n * ## Usage\n * ```tsx\n * <limel-example-event-printer ref={(el) => this.eventPrinter = el} />\n * // Later in your code:\n * this.eventPrinter.writeEvent(event);\n * ```\n *\n * ## State Management\n * Uses `@State()` decorator to maintain an array of caught events\n * Each event entry contains:\n * - `timestamp`: String representation of when the event occurred\n * - `event`: The actual Event object\n *\n * ## Display Format\n * Events are displayed in a collapsible `<details>` element with:\n * - Summary showing timestamp, event type, and basic details\n * - Expandable section showing the full event data\n * - Code formatting for better readability\n *\n * @private\n */\n@Component({\n    tag: 'limel-example-event-printer',\n    styleUrl: 'example-event-printer.scss',\n})\nexport class ExampleEventPrinter {\n    @State()\n    private caughtEvents: Array<{ timestamp: string; event: Event }> = [];\n\n    protected eventCatcher!: HTMLElement;\n\n    constructor() {\n        this.formatEvent = this.formatEvent.bind(this);\n        this.pushEvent = this.pushEvent.bind(this);\n    }\n\n    @Method()\n    public async writeEvent(event: Event) {\n        console.log(event);\n        this.pushEvent(event);\n    }\n\n    public render() {\n        return [\n            <header>Caught events:</header>,\n            this.caughtEvents.map(this.formatEvent),\n        ];\n    }\n\n    private formatEvent({ timestamp, event }) {\n        return (\n            <details>\n                <summary>\n                    {`${timestamp} ${event\n                        .toString()\n                        .replace(/\\[object (.*)\\]/, '$1')}: `}\n                    type=<code>{event.type}</code> detail=\n                    <code>{`${event.detail}`}</code>\n                </summary>\n                <pre>\n                    <code>{serializeEvent(event)}</code>\n                </pre>\n            </details>\n        );\n    }\n\n    private pushEvent(event: Event) {\n        this.caughtEvents = [\n            { timestamp: dayjs().format('HH:mm:ss.SSS'), event: event },\n            ...this.caughtEvents,\n        ];\n    }\n}\n\nfunction serializeEvent(e: any) {\n    if (!e) {\n        return;\n    }\n\n    const obj = {\n        eventName: e.toString(),\n        altKey: e.altKey,\n        bubbles: e.bubbles,\n        button: e.button,\n        buttons: e.buttons,\n        cancelBubble: e.cancelBubble,\n        cancelable: e.cancelable,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        composed: e.composed,\n        ctrlKey: e.ctrlKey,\n        currentTarget: e.currentTarget ? e.currentTarget.outerHTML : null,\n        defaultPrevented: e.defaultPrevented,\n        detail: e.detail,\n        eventPhase: e.eventPhase,\n        fromElement: e.fromElement ? e.fromElement.outerHTML : null,\n        isTrusted: e.isTrusted,\n        layerX: e.layerX,\n        layerY: e.layerY,\n        metaKey: e.metaKey,\n        movementX: e.movementX,\n        movementY: e.movementY,\n        offsetX: e.offsetX,\n        offsetY: e.offsetY,\n        pageX: e.pageX,\n        pageY: e.pageY,\n        path: e.path?.length ? e.path.map((n) => n.localName) : null,\n        relatedTarget: e.relatedTarget ? e.relatedTarget.outerHTML : null,\n        returnValue: e.returnValue,\n        screenX: e.screenX,\n        screenY: e.screenY,\n        shiftKey: e.shiftKey,\n        sourceCapabilities: null,\n        target: e.target ? e.target.outerHTML : null,\n        timeStamp: e.timeStamp,\n        toElement: e.toElement ? e.toElement.outerHTML : null,\n        type: e.type,\n        view: e.view ? e.view.toString() : null,\n        which: e.which,\n        x: e.x,\n        y: e.y,\n    };\n    if (e.sourceCapabilities) {\n        obj.sourceCapabilities = e.sourceCapabilities.toString();\n    }\n\n    return JSON.stringify(obj, null, 2);\n}\n"},{"filename":"example-event-printer.scss","type":"scss","source":"@use './example-value';\n@use '../style/mixins';\n\n:host(limel-example-event-printer) {\n    isolation: isolate;\n    max-height: 20rem;\n    overflow-y: auto;\n    padding-bottom: 0.25rem;\n}\n\ndetails {\n    font-size: 0.875rem; // 14px\n}\n\nsummary {\n    @include mixins.is-flat-clickable();\n    border-radius: 0.25rem;\n    padding: 0.25rem 0.5rem;\n    margin: 0 0.25rem;\n    position: sticky;\n    top: 0;\n    background-color: rgb(var(--kompendium-contrast-100));\n\n    details[open] & {\n        z-index: 1;\n        background-color: var(--lime-elevated-surface-background-color);\n        box-shadow: var(--button-shadow-pressed);\n        border-bottom-left-radius: 0;\n        border-bottom-right-radius: 0;\n    }\n\n    &:hover {\n        z-index: 1;\n    }\n    &:focus {\n        outline: none;\n    }\n    &:focus-visible {\n        z-index: 1;\n        outline: none;\n        box-shadow: var(--kompendium-shadow-depth-8-focused);\n    }\n\n    &::marker {\n        content: '+';\n        display: block;\n        width: 1.5rem;\n        font-weight: bold;\n        font-size: 1rem;\n        color: rgb(var(--kompendium-color-primary));\n\n        details[open] & {\n            content: '–';\n            color: rgb(var(--kompendium-color-red-default));\n        }\n    }\n}\n\npre {\n    margin: 0 0.25rem 0.25rem 0.25rem;\n\n    > code {\n        margin-top: 0;\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/extended-color-palette.tsx","fileName":"extended-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-extended-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"extended-color-palette.tsx","type":"tsx","source":"import { Component, h, JSX } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-extended-color-palette',\n    shadow: true,\n    styleUrl: 'extended-color-palette.scss',\n})\nexport class PaletteExample {\n    private colors = [\n        'red',\n        'pink',\n        'magenta',\n        'purple',\n        'violet',\n        'indigo',\n        'blue',\n        'sky',\n        'cyan',\n        'teal',\n        'green',\n        'lime',\n        'grass',\n        'yellow',\n        'amber',\n        'orange',\n        'coral',\n        'brown',\n        'gray',\n        'glaucous',\n    ];\n\n    public render() {\n        return (\n            <div>\n                <div class=\"color-palette\">\n                    {this.renderSwatches()}\n                    <div class=\"brightness-label\">lighter</div>\n                    <div class=\"brightness-label\">light</div>\n                    <div class=\"brightness-label\">default</div>\n                    <div class=\"brightness-label\">dark</div>\n                    <div class=\"brightness-label\">darker</div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderSwatches = (): JSX.Element[][] => {\n        return this.colors.map((color) => {\n            return [\n                <div class={`swatch --color-${color}-lighter`}></div>,\n                <div class={`swatch --color-${color}-light`}></div>,\n                <div class={`swatch --color-${color}-default`}>·</div>,\n                <div class={`swatch --color-${color}-dark`}></div>,\n                <div class={`swatch --color-${color}-darker`}></div>,\n                <div class=\"swatch hue\">{color}</div>,\n            ];\n        });\n    };\n}\n"},{"filename":"extended-color-palette.scss","type":"scss","source":"@use './shared-styles';\n\n.color-palette {\n    grid-template-rows: repeat(5, 1fr) auto;\n    grid-template-columns: repeat(20, 1fr) auto;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file.tsx","fileName":"file.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-file":["limel-file","limel-example-controls","limel-checkbox","limel-example-value"],"limel-file":["limel-file-dropzone","limel-chip-set","limel-file-input"],"limel-file-dropzone":["limel-icon"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-file',\n    shadow: true,\n})\nexport class FileExample {\n    @State()\n    private value: FileInfo = {\n        filename: 'cute-cat.jpg',\n        id: 123,\n        href: 'https://www.boredpanda.com/blog/wp-content/uploads/2014/02/funny-wet-cats-36.jpg',\n    };\n\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    public render() {\n        return [\n            <limel-file\n                label=\"Attach a file\"\n                onChange={this.handleChange}\n                required={this.required}\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n        console.log('onChange', this.value);\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = !!event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = !!event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = !!event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file-accepted-types.tsx","fileName":"file-accepted-types.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file-accepted-types","overview":"Limit accepted file types","usage":{},"docs":"Limit accepted file types","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file"],"dependencyGraph":{"limel-example-file-accepted-types":["limel-file"],"limel-file":["limel-file-dropzone","limel-chip-set","limel-file-input"],"limel-file-dropzone":["limel-icon"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-accepted-types.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Limit accepted file types\n */\n@Component({\n    tag: 'limel-example-file-accepted-types',\n    shadow: true,\n})\nexport class FileAcceptedTypesExample {\n    @State()\n    private value: FileInfo = { filename: 'picture.jpg', id: 123 };\n\n    @State()\n    private required = false;\n\n    public render() {\n        return [\n            <limel-file\n                label=\"Attach only images (png, jpeg)\"\n                onChange={this.handleChange}\n                required={this.required}\n                value={this.value}\n                accept=\"image/jpeg,image/png\"\n            />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n        console.log('onChange', this.value);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file-composite.tsx","fileName":"file-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-file-composite":["limel-file","limel-example-event-printer","limel-example-controls","limel-form"],"limel-file":["limel-file-dropzone","limel-chip-set","limel-file-input"],"limel-file-dropzone":["limel-icon"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-composite.tsx","type":"tsx","source":"import { FileInfo, FormSchema, Languages } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-file-composite',\n    shadow: true,\n})\nexport class FileCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        label: 'Attach a file',\n        value: {\n            id: '123',\n            filename: 'document.pdf',\n        } as FileInfo,\n        language: 'en' as Languages,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n        this.schema.properties.value.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-file {...this.props} onChange={this.handleChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file-custom-icon.tsx","fileName":"file-custom-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file-custom-icon","overview":"Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","usage":{},"docs":"Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-example-value"],"dependencyGraph":{"limel-example-file-custom-icon":["limel-file","limel-example-value"],"limel-file":["limel-file-dropzone","limel-chip-set","limel-file-input"],"limel-file-dropzone":["limel-icon"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-custom-icon.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Custom icon and color\n * This component automatically visualizes the file type, based on the extension\n * of the selected file. The visualization is done by displaying a colorful icon\n * along with the filename, for the most common file types.\n *\n * However, you can also customize the icon and its fill color & background color.\n */\n@Component({\n    tag: 'limel-example-file-custom-icon',\n    shadow: true,\n})\nexport class FileCustomIconExample {\n    @State()\n    private value: FileInfo = { filename: 'custom.crab', id: 123 };\n\n    public componentWillLoad() {\n        this.updateIcon();\n    }\n\n    public render() {\n        return [\n            <limel-file\n                label=\"Attach a file\"\n                onChange={this.handleChange}\n                value={this.value}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n        this.updateIcon();\n        console.log('onChange', this.value);\n    };\n\n    private updateIcon() {\n        if (this.value?.filename?.endsWith('.crab')) {\n            this.value.icon = {\n                name: 'crab',\n                color: 'rgb(var(--color-white))',\n                backgroundColor: 'rgb(var(--color-coral-default))',\n            };\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/examples","filePath":"./src/components/file-dropzone/examples/file-dropzone.tsx","fileName":"file-dropzone.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/examples/usage","tag":"limel-example-file-dropzone","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-dropzone","limel-chip","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-file-dropzone":["limel-file-dropzone","limel-chip","limel-example-controls","limel-checkbox","limel-example-value"],"limel-file-dropzone":["limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-dropzone.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzoneExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private files: FileInfo[] = [];\n\n    public render() {\n        return [\n            <limel-file-dropzone\n                onFilesSelected={this.handleDrop}\n                disabled={this.disabled || this.readonly}\n                text=\"Drop your file here\"\n            >\n                <div>\n                    <p>This div is a dropzone</p>\n                </div>\n            </limel-file-dropzone>,\n            this.files.map((file) => (\n                <limel-chip\n                    text={file.filename}\n                    icon={file.icon}\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                />\n            )),\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.files} />,\n        ];\n    }\n\n    private handleDrop = (event: CustomEvent<FileInfo[]>) => {\n        this.files = [...this.files, ...event.detail];\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"},{"filename":"file-dropzone.scss","type":"scss","source":"limel-file-dropzone {\n    height: 3rem;\n    background-color: rgb(var(--contrast-300));\n    border-radius: 0.25rem;\n    border: 1px solid rgb(var(--contrast-800));\n    margin-bottom: 0.5rem;\n}\n\np {\n    padding-left: 0.25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/examples","filePath":"./src/components/file-dropzone/examples/file-dropzone-type-filtering.tsx","fileName":"file-dropzone-type-filtering.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/examples/usage","tag":"limel-example-file-dropzone-type-filtering","overview":"File type filtering\nThe component allows you to specify the types of files that the dropzone will accept.\nBy default, it accepts all file types (`*`).\n\nFor media files, it is possible to specify any format, using:\n`audio/*`, `video/*`, `image/*`.\n\nAdditionally, you can use unique file type specifiers, such as:\n`.jpg`, or `.pdf`; or use a comma-separated list of file extensions or MIME types,\nfor instance: `image/png, image/jpeg` or `.png, .jpg, .jpeg`.\n\nRead more about\n[HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept)","usage":{},"docs":"File type filtering\nThe component allows you to specify the types of files that the dropzone will accept.\nBy default, it accepts all file types (`*`).\n\nFor media files, it is possible to specify any format, using:\n`audio/*`, `video/*`, `image/*`.\n\nAdditionally, you can use unique file type specifiers, such as:\n`.jpg`, or `.pdf`; or use a comma-separated list of file extensions or MIME types,\nfor instance: `image/png, image/jpeg` or `.png, .jpg, .jpeg`.\n\nRead more about\n[HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept)","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-dropzone","limel-input-field","limel-chip","limel-example-value"],"dependencyGraph":{"limel-example-file-dropzone-type-filtering":["limel-file-dropzone","limel-input-field","limel-chip","limel-example-value"],"limel-file-dropzone":["limel-icon"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-dropzone-type-filtering.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * File type filtering\n * The component allows you to specify the types of files that the dropzone will accept.\n * By default, it accepts all file types (`*`).\n *\n * For media files, it is possible to specify any format, using:\n * `audio/*`, `video/*`, `image/*`.\n *\n * Additionally, you can use unique file type specifiers, such as:\n * `.jpg`, or `.pdf`; or use a comma-separated list of file extensions or MIME types,\n * for instance: `image/png, image/jpeg` or `.png, .jpg, .jpeg`.\n *\n * Read more about\n * [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept)\n */\n@Component({\n    tag: 'limel-example-file-dropzone-type-filtering',\n    shadow: true,\n    styleUrl: 'file-dropzone-type-filtering.scss',\n})\nexport class FileDropzoneTypeFilteringExample {\n    @State()\n    private files: FileInfo[] = [];\n\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value: string;\n\n    @State()\n    private rejectedFiles: FileInfo[] = [];\n\n    public render() {\n        const MAX_LENGTH = 500;\n\n        return [\n            <limel-file-dropzone\n                onFilesSelected={this.handleAcceptedFiles}\n                onFilesRejected={this.handleRejectedFiles}\n                accept=\"image/*\"\n                text=\"Drop pictures here\"\n            >\n                <limel-input-field\n                    label=\"Dream pet description\"\n                    type=\"textarea\"\n                    placeholder=\"What is your dream pet? Describe it here and attach a picture of it.\"\n                    helperText=\"To attach files, simply drag & drop them here!\"\n                    maxlength={MAX_LENGTH}\n                    value={this.value}\n                    required={this.required}\n                    onChange={this.handleChange}\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                />\n            </limel-file-dropzone>,\n            <limel-file-dropzone\n                onFilesSelected={this.handleAcceptedFiles}\n                onFilesRejected={this.handleRejectedFiles}\n                text=\"Drop video or pictures here\"\n                helperText=\"Only image and video files are accepted!\"\n                accept=\"image/*, video/*\"\n            >\n                <div>\n                    <p>Upload a picture or a video</p>\n                </div>\n            </limel-file-dropzone>,\n            this.files.map((file) => (\n                <limel-chip text={file.filename} icon={file.icon} />\n            )),\n            <limel-example-value value={this.files} />,\n            <limel-example-value value={this.rejectedFiles} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleAcceptedFiles = (event: CustomEvent<FileInfo[]>) => {\n        this.files = [...this.files, ...event.detail];\n    };\n\n    private handleRejectedFiles = (event: CustomEvent<FileInfo[]>) => {\n        this.rejectedFiles = [...this.rejectedFiles, ...event.detail];\n    };\n}\n"},{"filename":"file-dropzone-type-filtering.scss","type":"scss","source":":host {\n    display: flex;\n    flex-direction: column;\n    gap: 1.5rem;\n}\n\ndiv {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid rgb(var(--contrast-800));\n    border-radius: 0.5rem;\n    min-height: 10rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/examples","filePath":"./src/components/file-input/examples/file-input.tsx","fileName":"file-input.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/examples/usage","tag":"limel-example-file-input","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-input","limel-button","limel-chip","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-file-input":["limel-file-input","limel-button","limel-chip","limel-example-controls","limel-checkbox","limel-example-value"],"limel-button":["limel-icon","limel-spinner"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-input.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-file-input',\n    shadow: true,\n})\nexport class FileInputExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private multiple = false;\n\n    @State()\n    private files: FileInfo[] = [];\n\n    public render() {\n        return [\n            <limel-file-input\n                onFilesSelected={this.handleFilesSelected}\n                disabled={this.disabled}\n                multiple={this.multiple}\n            >\n                <limel-button label=\"Select a file\" disabled={this.disabled} />\n            </limel-file-input>,\n            this.files.map((file) => (\n                <limel-chip\n                    identifier={file.id}\n                    text={file.filename}\n                    icon={file.icon}\n                    disabled={this.disabled}\n                    removable={true}\n                    onRemove={this.handleRemove}\n                />\n            )),\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.multiple}\n                    label=\"Multiple\"\n                    onChange={this.setMultiple}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.files} />,\n        ];\n    }\n\n    private handleFilesSelected = (event: CustomEvent<FileInfo[]>) => {\n        this.files = [...this.files, ...event.detail];\n    };\n\n    private handleRemove = (event: CustomEvent<string | number>) => {\n        this.files = this.files.filter((file) => file.id !== event.detail);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setMultiple = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.multiple = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/examples","filePath":"./src/components/file-input/examples/file-input-type-filtering.tsx","fileName":"file-input-type-filtering.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/examples/usage","tag":"limel-example-file-input-type-filtering","overview":"Example of a file input component with type filtering","usage":{},"docs":"Example of a file input component with type filtering","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-input","limel-button","limel-chip","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-file-input-type-filtering":["limel-file-input","limel-button","limel-chip","limel-example-controls","limel-checkbox","limel-example-value"],"limel-button":["limel-icon","limel-spinner"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-input-type-filtering.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Example of a file input component with type filtering\n */\n@Component({\n    tag: 'limel-example-file-input-type-filtering',\n    shadow: true,\n})\nexport class FileInputTypeFilteringExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private multiple = false;\n\n    @State()\n    private files: FileInfo[] = [];\n\n    public render() {\n        return [\n            <limel-file-input\n                onFilesSelected={this.handleFilesSelected}\n                accept=\"image/*\"\n                disabled={this.disabled}\n                multiple={this.multiple}\n            >\n                <limel-button\n                    label=\"Select an image\"\n                    disabled={this.disabled}\n                />\n            </limel-file-input>,\n            this.files.map((file) => (\n                <limel-chip\n                    identifier={file.id}\n                    text={file.filename}\n                    icon={file.icon}\n                    disabled={this.disabled}\n                    removable={true}\n                    onRemove={this.handleRemove}\n                />\n            )),\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.multiple}\n                    label=\"Multiple\"\n                    onChange={this.setMultiple}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.files} />,\n        ];\n    }\n\n    private handleFilesSelected = (event: CustomEvent<FileInfo[]>) => {\n        this.files = [...this.files, ...event.detail];\n    };\n\n    private handleRemove = (event: CustomEvent<string | number>) => {\n        this.files = this.files.filter((file) => file.id !== event.detail);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setMultiple = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.multiple = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples","filePath":"./src/components/file/examples/file-menu-items.tsx","fileName":"file-menu-items.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/examples/usage","tag":"limel-example-file-menu-items","overview":"Custom menu items\n\nBy providing custom menu items, you can add additional actions.","usage":{},"docs":"Custom menu items\n\nBy providing custom menu items, you can add additional actions.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-example-value"],"dependencyGraph":{"limel-example-file-menu-items":["limel-file","limel-example-value"],"limel-file":["limel-file-dropzone","limel-chip-set","limel-file-input"],"limel-file-dropzone":["limel-icon"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-menu-items.tsx","type":"tsx","source":"import {\n    FileInfo,\n    LimelMenuCustomEvent,\n    MenuItem,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n/**\n * Custom menu items\n *\n * By providing custom menu items, you can add additional actions.\n *\n */\n@Component({\n    tag: 'limel-example-file-menu-items',\n    shadow: true,\n})\nexport class FileMenuItemsExample {\n    @State()\n    private value: FileInfo = {\n        filename: 'deal.pdf',\n        id: 123,\n        menuItems: [\n            {\n                text: 'Download',\n                icon: 'download',\n                value: 1,\n                selected: false,\n            },\n            {\n                text: 'Share',\n                icon: 'share',\n                value: 2,\n                selected: false,\n            },\n        ],\n    };\n\n    @State()\n    private selectedValue: MenuItem = undefined;\n\n    public render() {\n        return (\n            <Host onMenuItemSelected={this.handleMenuItemSelected}>\n                <limel-file\n                    label=\"Attach a file\"\n                    value={this.value}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.selectedValue} />\n            </Host>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n        console.log('onChange', this.value);\n    };\n\n    private handleMenuItemSelected = (\n        event: LimelMenuCustomEvent<MenuItem>,\n    ) => {\n        event.stopPropagation();\n        console.log('onMenuItemSelected', event.detail);\n\n        this.selectedValue = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples","filePath":"./src/components/file-viewer/examples/file-viewer-basic.tsx","fileName":"file-viewer-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/usage","tag":"limel-example-file-viewer-basic","overview":"Most common file types\n\nThese are file formats that any web browser can display,\nwithout relying on any third-party plugins or additional\nplugins or extensions.","usage":{},"docs":"Most common file types\n\nThese are file formats that any web browser can display,\nwithout relying on any third-party plugins or additional\nplugins or extensions.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-viewer"],"dependencyGraph":{"limel-example-file-viewer-basic":["limel-file-viewer"],"limel-file-viewer":["limel-icon","limel-tooltip","limel-menu","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-viewer-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Most common file types\n *\n * These are file formats that any web browser can display,\n * without relying on any third-party plugins or additional\n * plugins or extensions.\n */\n@Component({\n    tag: 'limel-example-file-viewer-basic',\n    shadow: true,\n    styleUrl: 'file-viewer-basic.scss',\n})\nexport class FileViewerExample {\n    private files = [\n        {\n            title: 'Image',\n            url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/TEIDE.JPG/2880px-TEIDE.JPG',\n            alt: 'A synthetic-aperture radar image acquired by the SIR-C/X-SAR radar on board the Space Shuttle Endeavour shows the Teide volcano.',\n        },\n        {\n            title: 'Vector graphic',\n            url: 'https://lundalogik.github.io/lime-elements/versions/latest/favicon.svg',\n            alt: 'Logo of Lime Elements',\n        },\n        {\n            title: 'PDF',\n            url: 'https://upload.wikimedia.org/wikipedia/commons/1/13/Example.pdf',\n        },\n        {\n            title: 'Text',\n            url: 'https://filesamples.com/samples/document/txt/sample1.txt',\n        },\n        {\n            title: 'Audio',\n            url: 'https://filesamples.com/samples/audio/wav/sample1.wav',\n        },\n        {\n            title: 'Video',\n            url: 'https://filesamples.com/samples/video/mp4/sample_960x540.mp4',\n        },\n        {\n            title: 'Unsupported file type',\n            url: 'https://filesamples.com/samples/font/bin/SourceCodePro-Regular.bin',\n        },\n    ];\n\n    public render() {\n        return this.files.map(this.renderFileViewer);\n    }\n\n    private renderFileViewer(fileViewer: any) {\n        return [\n            <h4>{fileViewer.title}</h4>,\n            <limel-file-viewer url={fileViewer.url} alt={fileViewer.alt} />,\n        ];\n    }\n}\n"},{"filename":"file-viewer-basic.scss","type":"scss","source":"section {\n    display: flex;\n    gap: 1rem;\n    justify-content: space-between;\n    align-items: center;\n\n    > * {\n        margin: 0;\n    }\n}\n\nlimel-file-viewer {\n    margin: 0 0 4rem 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples","filePath":"./src/components/file-viewer/examples/file-viewer-custom-actions.tsx","fileName":"file-viewer-custom-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/usage","tag":"limel-example-file-viewer-custom-actions","overview":"Adding custom actions","usage":{},"docs":"Adding custom actions","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-viewer"],"dependencyGraph":{"limel-example-file-viewer-custom-actions":["limel-file-viewer"],"limel-file-viewer":["limel-icon","limel-tooltip","limel-menu","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-viewer-custom-actions.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ListItem } from '@limetech/lime-elements';\n\n/**\n * Adding custom actions\n */\n@Component({\n    tag: 'limel-example-file-viewer-custom-actions',\n    shadow: true,\n})\nexport class FileViewerCustomActionsExample {\n    public render() {\n        return (\n            <limel-file-viewer\n                url=\"https://filesamples.com/samples/document/docx/sample1.docx\"\n                actions={this.actions}\n                onAction={this.handleAction}\n            />\n        );\n    }\n\n    private actions: ListItem[] = [\n        {\n            text: 'Show Alert',\n            icon: 'google_alerts_copyrighted',\n            value: 'action',\n        },\n        { text: 'Edit', icon: 'edit' },\n        { text: 'Download as PDF', icon: 'PDF_2' },\n        { text: 'Send for signing', icon: 'sign_up' },\n    ];\n\n    private handleAction = (event: CustomEvent<ListItem>) => {\n        if (event.detail.value === 'action') {\n            return this.showAlert();\n        }\n    };\n\n    private showAlert() {\n        alert('Hello! I am an alert box 😊');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples","filePath":"./src/components/file-viewer/examples/file-viewer-filename.tsx","fileName":"file-viewer-filename.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/usage","tag":"limel-example-file-viewer-filename","overview":"Using the `filename` prop\nThe component looks at the URL of the provided file, and based on how the\nURL ends, it can detect the extension and consequently choose the right way\nof rendering it in the browser.\n\nHowever, sometimes the URLs do not have the filename in them. In this case,\nit is vital to specify the filename, for the component to be able to render it.\n\n:::important\nMake sure the provided filename contains the correct extension!\n:::\n\n:::tip\nThe filename that is specified will also be the filename that is used when the\nfile is downloaded by clicking the download button on the File Viewer.\n:::","usage":{},"docs":"Using the `filename` prop\nThe component looks at the URL of the provided file, and based on how the\nURL ends, it can detect the extension and consequently choose the right way\nof rendering it in the browser.\n\nHowever, sometimes the URLs do not have the filename in them. In this case,\nit is vital to specify the filename, for the component to be able to render it.\n\n:::important\nMake sure the provided filename contains the correct extension!\n:::\n\n:::tip\nThe filename that is specified will also be the filename that is used when the\nfile is downloaded by clicking the download button on the File Viewer.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-viewer"],"dependencyGraph":{"limel-example-file-viewer-filename":["limel-file-viewer"],"limel-file-viewer":["limel-icon","limel-tooltip","limel-menu","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-viewer-filename.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Using the `filename` prop\n * The component looks at the URL of the provided file, and based on how the\n * URL ends, it can detect the extension and consequently choose the right way\n * of rendering it in the browser.\n *\n * However, sometimes the URLs do not have the filename in them. In this case,\n * it is vital to specify the filename, for the component to be able to render it.\n *\n * :::important\n * Make sure the provided filename contains the correct extension!\n * :::\n *\n * :::tip\n * The filename that is specified will also be the filename that is used when the\n * file is downloaded by clicking the download button on the File Viewer.\n * :::\n */\n@Component({\n    tag: 'limel-example-file-viewer-filename',\n    shadow: true,\n})\nexport class FileViewerFilenameExample {\n    public render() {\n        return (\n            <limel-file-viewer\n                url=\"https://unsplash.it/1280/720/?random\"\n                alt=\"Some random picture form Unsplash\"\n                filename=\"random-image.jpg\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples","filePath":"./src/components/file-viewer/examples/file-viewer-inbuilt-actions.tsx","fileName":"file-viewer-inbuilt-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/usage","tag":"limel-example-file-viewer-inbuilt-actions","overview":"Using inbuilt actions\n\nThe component offers a few inbuilt actions that enable users\nto download the file, open it in a new tab, or view it in fullscreen mode.\n\n:::note\nThese action buttons do not get rendered for the office files,\nbecause the 3rd-party office viewers already offer the same features\nin their UI.\n:::\n\n:::important\nThe download button will not work here in this example,\ndue to the security policies of the web browsers.\nThis is because the example files are not hosted in the same domain.\n:::","usage":{},"docs":"Using inbuilt actions\n\nThe component offers a few inbuilt actions that enable users\nto download the file, open it in a new tab, or view it in fullscreen mode.\n\n:::note\nThese action buttons do not get rendered for the office files,\nbecause the 3rd-party office viewers already offer the same features\nin their UI.\n:::\n\n:::important\nThe download button will not work here in this example,\ndue to the security policies of the web browsers.\nThis is because the example files are not hosted in the same domain.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-viewer"],"dependencyGraph":{"limel-example-file-viewer-inbuilt-actions":["limel-file-viewer"],"limel-file-viewer":["limel-icon","limel-tooltip","limel-menu","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-viewer-inbuilt-actions.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Using inbuilt actions\n *\n * The component offers a few inbuilt actions that enable users\n * to download the file, open it in a new tab, or view it in fullscreen mode.\n *\n * :::note\n * These action buttons do not get rendered for the office files,\n * because the 3rd-party office viewers already offer the same features\n * in their UI.\n * :::\n *\n * :::important\n * The download button will not work here in this example,\n * due to the security policies of the web browsers.\n * This is because the example files are not hosted in the same domain.\n * :::\n */\n@Component({\n    tag: 'limel-example-file-viewer-inbuilt-actions',\n    shadow: true,\n    styleUrl: 'file-viewer-inbuilt-actions.scss',\n})\nexport class FileViewerInbuiltActionsExample {\n    public render() {\n        return [\n            <limel-file-viewer\n                url=\"https://unsplash.it/1280/720/?random\"\n                alt=\"Some random picture form Unsplash\"\n                filename=\"random-image.jpg\"\n                allowFullscreen={true}\n                allowOpenInNewTab={true}\n                allowDownload={true}\n            />,\n            <limel-file-viewer\n                class=\"hosted-on-the-same-domain\"\n                url=\"https://lundalogik.github.io/lime-elements/versions/latest/favicon.svg\"\n                allowFullscreen={true}\n                allowOpenInNewTab={true}\n                allowDownload={true}\n            />,\n        ];\n    }\n}\n"},{"filename":"file-viewer-inbuilt-actions.scss","type":"scss","source":":host(limel-example-file-viewer-inbuilt-actions) {\n    display: grid;\n    grid-template-columns: 1fr 30%;\n    gap: 2rem;\n}\n\nlimel-file-viewer {\n    padding: 0.5rem;\n    border: 1px dashed rgb(var(--contrast-600));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples","filePath":"./src/components/file-viewer/examples/file-viewer-office.tsx","fileName":"file-viewer-office.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/usage","tag":"limel-example-file-viewer-office","overview":"Office files\n\nThere are many different software programs that can be used to create\noffice files such as word processing documents, spreadsheets, and presentations.\nWeb browsers do not natively support these formats for direct display.\n\nHowever, using the file-viewer component, you can easily display the content\nof office file types. The viewer relies on a few third-party technologies\nto render the file.\n\nBy default, the component uses Microsoft Office Viewer, since it supports\na wider range of file office formats. However, you can\nchoose other viewers which are supported by this component.\n\n:::important\n1. The file should be stored somewhere with a publicly accessible URL,\notherwise the viewer cannot render them.\n1. Once the file is viewed, it might get cached for a short while on the\n3rd party servers –therefor remain publicly visible–,\neven if the original file deleted.\n1. Files that are too large may not be rendered at all.\n:::","usage":{},"docs":"Office files\n\nThere are many different software programs that can be used to create\noffice files such as word processing documents, spreadsheets, and presentations.\nWeb browsers do not natively support these formats for direct display.\n\nHowever, using the file-viewer component, you can easily display the content\nof office file types. The viewer relies on a few third-party technologies\nto render the file.\n\nBy default, the component uses Microsoft Office Viewer, since it supports\na wider range of file office formats. However, you can\nchoose other viewers which are supported by this component.\n\n:::important\n1. The file should be stored somewhere with a publicly accessible URL,\notherwise the viewer cannot render them.\n1. Once the file is viewed, it might get cached for a short while on the\n3rd party servers –therefor remain publicly visible–,\neven if the original file deleted.\n1. Files that are too large may not be rendered at all.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file-viewer","limel-select"],"dependencyGraph":{"limel-example-file-viewer-office":["limel-file-viewer","limel-select"],"limel-file-viewer":["limel-icon","limel-tooltip","limel-menu","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-viewer-office.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\nimport { Option, LimelSelectCustomEvent } from '@limetech/lime-elements';\nimport { OfficeViewer } from '../file-viewer.types';\n\n/**\n * Office files\n *\n * There are many different software programs that can be used to create\n * office files such as word processing documents, spreadsheets, and presentations.\n * Web browsers do not natively support these formats for direct display.\n *\n * However, using the file-viewer component, you can easily display the content\n * of office file types. The viewer relies on a few third-party technologies\n * to render the file.\n *\n * By default, the component uses Microsoft Office Viewer, since it supports\n * a wider range of file office formats. However, you can\n * choose other viewers which are supported by this component.\n *\n * :::important\n * 1. The file should be stored somewhere with a publicly accessible URL,\n * otherwise the viewer cannot render them.\n * 1. Once the file is viewed, it might get cached for a short while on the\n * 3rd party servers –therefor remain publicly visible–,\n * even if the original file deleted.\n * 1. Files that are too large may not be rendered at all.\n * :::\n */\n@Component({\n    tag: 'limel-example-file-viewer-office',\n    shadow: true,\n    styleUrl: 'file-viewer-basic.scss',\n})\nexport class FileViewerOfficeExample {\n    @State()\n    private selectedOfficeViewer: Option<OfficeViewer>;\n\n    private availableOfficeViewers: Array<Option<OfficeViewer>>;\n\n    private microsoftDocuments = [\n        {\n            title: 'Microsoft Word',\n            extension: '.docx',\n            url: 'https://filesamples.com/samples/document/docx/sample1.docx',\n        },\n        {\n            title: 'Microsoft PowerPoint',\n            extension: '.ppt',\n            url: 'https://filesamples.com/samples/document/ppt/sample1.ppt',\n        },\n        {\n            title: 'Microsoft Excel',\n            extension: '.xlsx',\n            url: 'https://filesamples.com/samples/document/xlsx/sample1.xlsx',\n        },\n    ];\n\n    private openDocuments = [\n        {\n            title: 'Text',\n            extension: '.odt',\n            url: 'https://filesamples.com/samples/document/odt/sample1.odt',\n        },\n        {\n            title: 'Spreadsheet',\n            extension: '.ods',\n            url: 'https://filesamples.com/samples/document/ods/sample1.ods',\n        },\n        {\n            title: 'Presentation',\n            extension: '.odp',\n            url: 'https://filesamples.com/samples/document/odp/sample1.odp',\n        },\n    ];\n\n    constructor() {\n        const officeViewers: OfficeViewer[] = [\n            'microsoft-office',\n            'google-drive',\n        ];\n        this.availableOfficeViewers = officeViewers.map((value) => {\n            return {\n                text: value as string,\n                value: value,\n            } as Option<OfficeViewer>;\n        });\n        this.selectedOfficeViewer = this.availableOfficeViewers.find(\n            (v) => v.value === 'microsoft-office'\n        );\n    }\n\n    public render() {\n        return [\n            <section>\n                <h1>Office files</h1>\n                <limel-select\n                    class=\"is-narrow\"\n                    label=\"officeViewer\"\n                    options={this.availableOfficeViewers}\n                    value={this.selectedOfficeViewer}\n                    onChange={this.handleNewSelection}\n                />\n            </section>,\n\n            <h2>Microsoft Office formats</h2>,\n            this.microsoftDocuments.map(this.renderMicrosoftDocuments),\n            <h2>OpenDocument formats</h2>,\n            this.openDocuments.map(this.renderOpenDocuments),\n        ];\n    }\n\n    private renderMicrosoftDocuments = (document: any) => {\n        return [\n            <h3>\n                {document.title}\n                <code>{document.extension}</code>\n            </h3>,\n            <limel-file-viewer\n                url={document.url}\n                officeViewer={this.selectedOfficeViewer?.value}\n            />,\n        ];\n    };\n\n    private renderOpenDocuments = (document: any) => {\n        return [\n            <h3>\n                {document.title}\n                <code>{document.extension}</code>\n            </h3>,\n            <limel-file-viewer\n                url={document.url}\n                officeViewer={this.selectedOfficeViewer?.value}\n            />,\n        ];\n    };\n\n    private handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<OfficeViewer>>\n    ) => {\n        this.selectedOfficeViewer = event.detail;\n    };\n}\n"},{"filename":"file-viewer-basic.scss","type":"scss","source":"section {\n    display: flex;\n    gap: 1rem;\n    justify-content: space-between;\n    align-items: center;\n\n    > * {\n        margin: 0;\n    }\n}\n\nlimel-file-viewer {\n    margin: 0 0 4rem 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples","filePath":"./src/components/file-viewer/examples/file-viewer-with-picker.tsx","fileName":"file-viewer-with-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/examples/usage","tag":"limel-example-file-viewer-with-picker","overview":"See an instant preview\nSelect a file from your local machine using the file picker below,\nand `limel-file-viewer` component will display the file, if the format\nis supported.","usage":{},"docs":"See an instant preview\nSelect a file from your local machine using the file picker below,\nand `limel-file-viewer` component will display the file, if the format\nis supported.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-file","limel-file-viewer"],"dependencyGraph":{"limel-example-file-viewer-with-picker":["limel-file","limel-file-viewer"],"limel-file":["limel-file-dropzone","limel-chip-set","limel-file-input"],"limel-file-dropzone":["limel-icon"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-file-viewer":["limel-icon","limel-tooltip","limel-menu","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-viewer-with-picker.tsx","type":"tsx","source":"import { FileInfo } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * See an instant preview\n * Select a file from your local machine using the file picker below,\n * and `limel-file-viewer` component will display the file, if the format\n * is supported.\n */\n@Component({\n    tag: 'limel-example-file-viewer-with-picker',\n    shadow: true,\n    styleUrl: 'file-viewer-with-picker.scss',\n})\nexport class FileViewerWithPickerExample {\n    @State()\n    private value: FileInfo;\n\n    @State()\n    private dataUrl: string = '';\n\n    public render() {\n        return [\n            <limel-file\n                label=\"Choose a file…\"\n                onChange={this.handleChange}\n                value={this.value}\n            />,\n            <p>and view it below ↓</p>,\n            <div class=\"view-here\">{this.renderFileViewer()}</div>,\n        ];\n    }\n\n    private renderFileViewer() {\n        if (!this.dataUrl) {\n            return;\n        }\n\n        return (\n            <limel-file-viewer\n                url={this.dataUrl}\n                filename={this.value?.filename}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo>) => {\n        this.value = event.detail;\n\n        if (!this.value?.fileContent) {\n            this.dataUrl = '';\n\n            return;\n        }\n\n        URL.revokeObjectURL(this.dataUrl);\n        this.dataUrl = URL.createObjectURL(this.value.fileContent);\n    };\n}\n"},{"filename":"file-viewer-with-picker.scss","type":"scss","source":".view-here {\n    margin-top: 1.25rem;\n    padding: 0.75rem;\n    height: 40rem;\n\n    box-shadow: var(--shadow-depth-16);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/basic-form.tsx","fileName":"basic-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form","overview":"Basic form with validation","usage":{},"docs":"Basic form with validation","docsTags":[{"name":"sourceFile","text":"basic-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-form":["limel-form","limel-button","limel-example-value"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"basic-form.tsx","type":"tsx","source":"import { ValidationStatus } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { schema, BasicFormData } from './basic-schema';\n\n/**\n * Basic form with validation\n *\n * @sourceFile basic-schema.ts\n */\n@Component({\n    tag: 'limel-example-form',\n    shadow: true,\n})\nexport class FormExample {\n    @State()\n    private formData: BasicFormData = {\n        date: '1922-12-28',\n        params: {\n            secretHideout: 'Cave',\n            hidden: true,\n            entryCode: [1, 1, 2, 3, 5, 8],\n        },\n    };\n\n    @State()\n    private valid = true;\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleFormValidate}\n                value={this.formData}\n                schema={schema}\n            />,\n            <br />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n        console.log(\n            'Basic form with validation - handleFormValidate:',\n            event.detail\n        );\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n}\n"},{"filename":"basic-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\ntype SideKick =\n    | 'super'\n    | 'widow'\n    | 'america'\n    | 'squirrel'\n    | 'devil'\n    | 'marvel'\n    | 'fantastic';\n\ntype Color = 'red' | 'yellow' | 'green' | 'blue' | 'black';\n\nexport interface BasicFormData {\n    name?: string;\n    home?: string;\n    sidekicks?: SideKick[];\n    newsletters?: boolean;\n    params?: Record<string, any>;\n    date?: string;\n    email?: string;\n    happiness?: number;\n    bananas?: number;\n    color?: Color;\n}\n\nexport const schema: FormSchema<BasicFormData> = {\n    title: 'Registration form',\n    description: 'Please enter your personal information',\n    type: 'object',\n    required: ['name', 'email', 'newsletters'],\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n            default: 'Batman',\n            description: 'Enter your heroic name',\n            minLength: 5,\n            maxLength: 20,\n        },\n        email: {\n            type: 'string',\n            title: 'Email',\n            description: 'Enter your email address',\n            format: 'email',\n        },\n        home: {\n            type: 'string',\n            title: 'Home',\n            default: 'Earth',\n            readOnly: true,\n        },\n        happiness: {\n            type: 'number',\n            title: 'Happiness',\n            description: 'How happy are you?',\n            minimum: 0,\n            maximum: 1,\n            multipleOf: 0.01,\n        },\n        bananas: {\n            type: 'number',\n            title: 'Bananas',\n            description: 'How many bananas do you want?',\n            minimum: 0,\n            maximum: 50,\n            multipleOf: 10,\n        },\n        date: {\n            type: 'string',\n            title: 'Birthdate',\n            format: 'date',\n            description: 'Pick a nice date!',\n        },\n        color: {\n            type: 'string',\n            title: 'Favorite cape color',\n            description: 'Preferably matching your boots',\n            oneOf: [\n                {\n                    type: 'string',\n                    const: 'red',\n                    title: 'Red',\n                },\n                {\n                    type: 'string',\n                    const: 'yellow',\n                    title: 'Yellow',\n                },\n                {\n                    type: 'string',\n                    const: 'green',\n                    title: 'Green',\n                },\n                {\n                    type: 'string',\n                    const: 'blue',\n                    title: 'Blue',\n                },\n                {\n                    type: 'string',\n                    const: 'black',\n                    title: 'Black',\n                },\n            ],\n        },\n        sidekicks: {\n            type: 'array',\n            title: 'Sidekicks',\n            description: 'Please select your sidekicks',\n            uniqueItems: true,\n            minItems: 2,\n            items: {\n                title: 'Friends',\n                type: 'string',\n                anyOf: [\n                    {\n                        type: 'string',\n                        const: 'super',\n                        title: 'Superman',\n                    },\n                    {\n                        type: 'string',\n                        const: 'widow',\n                        title: 'Black Widow',\n                    },\n                    {\n                        type: 'string',\n                        const: 'america',\n                        title: 'Captain America',\n                    },\n                    {\n                        type: 'string',\n                        const: 'squirrel',\n                        title: 'Squirrel Girl',\n                    },\n                    {\n                        type: 'string',\n                        const: 'devil',\n                        title: 'Daredevil',\n                    },\n                    {\n                        type: 'string',\n                        const: 'marvel',\n                        title: 'Captain Marvel',\n                    },\n                    {\n                        type: 'string',\n                        const: 'fantastic',\n                        title: 'Mr. Fantastic',\n                    },\n                ],\n            },\n        },\n        newsletters: {\n            type: 'boolean',\n            title: 'I want to receive daily newsletters!',\n            default: false,\n            const: true,\n        },\n        params: {\n            type: 'object',\n            title: 'Parameters',\n            description: 'Additional data to send',\n            additionalProperties: true,\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/layout-form.tsx","fileName":"layout-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-layout","overview":"Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","usage":{},"docs":"Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","docsTags":[{"name":"sourceFile","text":"layout-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-button"],"dependencyGraph":{"limel-example-form-layout":["limel-form","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"layout-form.tsx","type":"tsx","source":"import { ValidationStatus } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { LayoutFormData, schema } from './layout-schema';\n\n/**\n * Layout\n * By default, each item in a limel-form will be rendered in a single row, and\n * each row occupies the entire available width of the form's container.\n *\n * This default layout may work fine on small screens or narrow containers,\n * but on larger screens it usually won't produce a nice layout. Thus we\n * recommend that you choose an appropriate responsive layout for your form.\n *\n * ###### Enabling responsive layouts\n *\n * By specifying `'grid'` as the layout `type` in your schema, as well as your desired\n * number of `columns`, you can leave the job of responsively handling the form\n * layout to Lime Elements.\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     lime: {\n *         layout: {\n *             type: 'grid',\n *             columns: 3,\n *         },\n *     },\n *     …\n * };\n * ```\n * :::note\n * Value for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\n * specify a value, `limel-form` will choose `5` by default.\n * :::\n *\n * So if you have chosen `4` for instance, the form will do its best to fit\n * four columns in a row. But for smaller containers in which placement of four\n * items per row is not possible, the form will automatically change the layout\n * and fit 3 items per row. As the container's width decreases, the number of\n * columns will also decrease.\n *\n * :::tip\n * You can divide a form into sections,\n * and specify a different layout for each section.\n * :::\n *\n * In this example, each collapsible section has its own `colSpan`.\n * However, since the layout is responsive, make sure to change the browser\n * window size to see how their responsive layout changes.\n *\n * @sourceFile layout-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-layout',\n    shadow: true,\n})\nexport class FormLayoutExample {\n    @State()\n    private formData: LayoutFormData = {};\n\n    @State()\n    private valid = true;\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleFormValidate}\n                value={this.formData}\n                schema={schema}\n            />,\n            <br />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n        console.log(event.detail);\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n}\n"},{"filename":"layout-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\ntype Race =\n    | 'angel'\n    | 'dragon'\n    | 'elf'\n    | 'yeti'\n    | 'vampire'\n    | 'warewolf'\n    | 'orc'\n    | 'wizard';\n\ntype PlaceOfBirth =\n    | 'palight'\n    | 'ekudshire'\n    | 'blarc'\n    | 'kamond'\n    | 'blodholm'\n    | 'wuacross'\n    | 'bruhgnathal'\n    | 'orasas';\n\nexport interface LayoutFormData {\n    info?: {\n        name?: string;\n        age?: number;\n        race?: Race;\n        placeOfBirth?: PlaceOfBirth;\n    };\n    address?: {\n        city?: string;\n        country?: string;\n    };\n    emails?: {\n        email1?: string;\n        email2?: string;\n        email3?: string;\n        email4?: string;\n        email5?: string;\n    };\n}\n\nexport const schema: FormSchema<LayoutFormData> = {\n    title: 'Registration form',\n    description:\n        'This main form has no specified layout, so it gets the default 1 column.',\n    type: 'object',\n    properties: {\n        info: {\n            title: 'Player info',\n            description: 'This section has a 4 column grid layout.',\n            type: 'object',\n            lime: {\n                collapsible: true,\n                layout: {\n                    type: 'grid',\n                    columns: 4,\n                },\n            },\n            properties: {\n                name: {\n                    type: 'string',\n                    title: 'Name',\n                },\n                age: {\n                    type: 'integer',\n                    title: 'Age',\n                },\n                race: {\n                    type: 'string',\n                    title: 'Race',\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'angel',\n                            title: 'Angel',\n                        },\n                        {\n                            type: 'string',\n                            const: 'dragon',\n                            title: 'Dragon',\n                        },\n                        {\n                            type: 'string',\n                            const: 'elf',\n                            title: 'Elf',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yeti',\n                            title: 'Yeti',\n                        },\n                        {\n                            type: 'string',\n                            const: 'vampire',\n                            title: 'Vampire',\n                        },\n                        {\n                            type: 'string',\n                            const: 'warewolf',\n                            title: 'Werewolf',\n                        },\n                        {\n                            type: 'string',\n                            const: 'orc',\n                            title: 'Orc',\n                        },\n                        {\n                            type: 'string',\n                            const: 'wizard',\n                            title: 'Wizard',\n                        },\n                    ],\n                },\n                placeOfBirth: {\n                    type: 'string',\n                    title: 'Place of birth',\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'palight',\n                            title: 'Palight',\n                        },\n                        {\n                            type: 'string',\n                            const: 'ekudshire',\n                            title: 'Ekudshire',\n                        },\n                        {\n                            type: 'string',\n                            const: 'blarc',\n                            title: 'Blarc',\n                        },\n                        {\n                            type: 'string',\n                            const: 'kamond',\n                            title: 'Kamond',\n                        },\n                        {\n                            type: 'string',\n                            const: 'blodholm',\n                            title: 'Blodholm',\n                        },\n                        {\n                            type: 'string',\n                            const: 'wuacross',\n                            title: 'Wuacross',\n                        },\n                        {\n                            type: 'string',\n                            const: 'bruhgnathal',\n                            title: 'Bruhgnathal',\n                        },\n                        {\n                            type: 'string',\n                            const: 'orasas',\n                            title: 'Orasas',\n                        },\n                    ],\n                },\n            },\n        },\n        address: {\n            title: 'Player address',\n            description: 'This section has a 2 column grid layout.',\n            type: 'object',\n            lime: {\n                collapsible: true,\n                layout: {\n                    type: 'grid',\n                    columns: 2,\n                },\n            },\n            properties: {\n                city: {\n                    type: 'string',\n                    title: 'City',\n                },\n                country: {\n                    type: 'string',\n                    title: 'Country',\n                    description: 'It might also be a planet',\n                },\n            },\n        },\n        emails: {\n            title: \"Friends' emails\",\n            description:\n                'This section has a grid layout, but no colSpan is specified; which will result in a 5 column layout.',\n            type: 'object',\n            lime: {\n                collapsible: true,\n                layout: {\n                    type: 'grid',\n                },\n            },\n            properties: {\n                email1: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email2: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email3: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email4: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n                email5: {\n                    type: 'string',\n                    title: 'Email',\n                    description: 'Enter a valid email address',\n                    format: 'email',\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/map-component.tsx","fileName":"map-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-map-component","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"map-component.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-form-map-component',\n    shadow: true,\n    styleUrl: 'map-component.scss',\n})\nexport class ExampleMapComponent {\n    @Prop()\n    public label: string;\n\n    public render() {\n        return (\n            <div class=\"custom-component\">\n                <span class=\"label\">{this.label}</span>\n                <iframe\n                    src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2249.3352777658542!2d13.175623716225816!3d55.683158480534814!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x465397fae5b2e6d9%3A0xff3855ec5b30981f!2sLime%20Technologies%20Sweden%20AB!5e0!3m2!1sen!2sse!4v1605781801916!5m2!1sen!2sse\"\n                    aria-hidden=\"false\"\n                    tabindex=\"0\"\n                    frameborder=\"0\"\n                ></iframe>\n            </div>\n        );\n    }\n}\n"},{"filename":"map-component.scss","type":"scss","source":":host {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.custom-component {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.label {\n    display: inline-block;\n\n    z-index: 1;\n    position: absolute;\n    left: 0.5rem;\n    bottom: 0.5rem;\n\n    border-radius: 0.25rem;\n    width: fit-content;\n    padding: 0 0.25rem;\n    background-color: rgba(var(--contrast-300), 0.9);\n    color: rgb(var(--contrast-1100));\n\n    font-size: 0.875rem;\n}\n\niframe {\n    z-index: 0;\n    position: relative;\n    border: 0;\n    width: 100%;\n    height: 100%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/row-layout.tsx","fileName":"row-layout.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-row-layout","overview":"Row layout","usage":{},"docs":"Row layout","docsTags":[{"name":"sourceFile","text":"row-layout-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form"],"dependencyGraph":{"limel-example-form-row-layout":["limel-form"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"row-layout.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { RowLayoutFormData, schema } from './row-layout-schema';\n\n/**\n * Row layout\n *\n * @sourceFile row-layout-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-row-layout',\n    shadow: true,\n})\nexport class FormRowLayoutExample {\n    @State()\n    private formData: RowLayoutFormData = {};\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"row-layout-schema.ts","type":"ts","source":"import { FormSchema } from '../form.types';\n\ntype Language = 'sv' | 'ua' | 'en' | 'am' | 'fa';\n\nexport interface RowLayoutFormData {\n    info?: {\n        language?: Language;\n        date?: string;\n        notification?: boolean;\n        frequency?: number;\n        personalNumber?: number;\n    };\n}\n\nexport const schema: FormSchema<RowLayoutFormData> = {\n    description: 'This form has the row layout',\n    type: 'object',\n    properties: {\n        info: {\n            title: 'Preferences',\n            description:\n                'These settings will not affect how others see the data. These are only for you.',\n            type: 'object',\n            lime: {\n                layout: {\n                    type: 'row',\n                },\n            },\n            properties: {\n                language: {\n                    type: 'string',\n                    title: 'Language',\n                    default: 'ua',\n                    lime: {\n                        help: {\n                            value: 'This will affect both the language of the user interface of our app, and also the language of the emails we send you.',\n                        },\n                        layout: {\n                            icon: 'globe',\n                        },\n                    },\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'sv',\n                            title: 'Swedish',\n                        },\n                        {\n                            type: 'string',\n                            const: 'ua',\n                            title: 'Ukrainian',\n                        },\n                        {\n                            type: 'string',\n                            const: 'en',\n                            title: 'English',\n                        },\n                        {\n                            type: 'string',\n                            const: 'am',\n                            title: 'Amharic',\n                        },\n                        {\n                            type: 'string',\n                            const: 'fa',\n                            title: 'Farsi',\n                        },\n                    ],\n                },\n                date: {\n                    type: 'string',\n                    title: 'Date format',\n                    default: 'yyyy-mm-dd',\n                    lime: {\n                        layout: {\n                            icon: 'calendar',\n                        },\n                    },\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'yyyy-mm-dd',\n                            title: '1999-01-31',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yyyy.dd.mm',\n                            title: '1999.01.31',\n                        },\n                        {\n                            type: 'string',\n                            const: 'yyyy/dd/mm',\n                            title: '1999/01/31',\n                        },\n                    ],\n                },\n                notification: {\n                    type: 'boolean',\n                    title: 'Receive summary notifications via email',\n                    lime: {\n                        help: {\n                            value: 'You can read more about how we handle our communications with you in our Terms & Privacy Policies.',\n                            readMoreLink: {\n                                href: 'https://www.lime-technologies.com/en/av-saas/',\n                                title: 'This link opens in a new tab',\n                                target: '_blank',\n                                text: 'Our Terms & Privacy Policies',\n                            },\n                        },\n                        component: {\n                            name: 'limel-switch',\n                        },\n                        layout: {\n                            icon: 'filled_message',\n                        },\n                    },\n                },\n                frequency: {\n                    type: 'number',\n                    title: 'Frequency of email notifications',\n                    description:\n                        'How many times per day can we sent you email notifications at most?',\n                    minimum: 0,\n                    maximum: 10,\n                    multipleOf: 1,\n                    lime: {\n                        layout: {\n                            icon: 'notification_center_92458',\n                        },\n                    },\n                },\n                personalNumber: {\n                    type: 'integer',\n                    title: 'Personal identity number',\n                    lime: {\n                        layout: {\n                            icon: 'numbers_input_form',\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/span-fields.tsx","fileName":"span-fields.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-span-fields","overview":"Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","usage":{},"docs":"Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","docsTags":[{"name":"sourceFile","text":"span-fields-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-controls","limel-switch","limel-form","limel-button"],"dependencyGraph":{"limel-example-form-span-fields":["limel-example-controls","limel-switch","limel-form","limel-button"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"span-fields.tsx","type":"tsx","source":"import { ValidationStatus } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { schema } from './span-fields-schema';\n\n/**\n * Stretching fields in a form\n *\n * Sometimes, you need a field in the form to occupy several columns or the\n * entire row, and stretch itself as wide as the form's width,\n * disregarding the form's layout and placement of the item in the list.\n *\n * This could be nice for fields that require more space to provide better\n * usability.\n *\n * :::tip\n * For example, a larger `textarea` is easier for the user to type in and\n * a `slider` that has many steps is easier to interact with when it is rendered wider.\n * :::\n *\n * To do so, in your schema you need to specify a `layout` for the field itself.\n * `span` specifies the number of columns that the field should span.\n *\n * Thus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\n * Since we do not offer a *form layout* that has more than five columns,\n * values higher than 5 (or higher than the maximum number of columns in the form)\n * will only force the field to be full-width, just like `all` does.\n *\n * ```ts\n * export const schema = {\n *     …\n *     properties: {\n *         name: {\n *             type: 'string',\n *             title: 'Comment',\n *             lime: {\n *                 layout: {\n *                       colSpan: 'all',\n *                   },\n *               },\n *         },\n *         …\n *     },\n *     …\n * };\n * ```\n *\n * ###### Dense layout (Auto reorder fields to avoid empty cells)\n * The order of fields and the number of columns that a field must span, can\n * affect the layout of your responsive form when the container width changes.\n *\n * Let's say you have a form with a 4 column layout, and you specify that its\n * second field must span 3 columns.\n * If the container's width decreases, it will force the form to render its\n * layout in 3 columns instead. Therefore, the second field has to jump\n * to the next line to still be able to span 3 columns.\n * This will leave 2 empty cells in the first row, right after the first field.\n *\n * To avoid these empty cells in the UI, limel-form will place the next available\n * field in this hole, provided it fits. So the hole may be filled by a single 2 column\n * wide field, by two 1 column wide fields, or only partially filled by a single 1 column\n * wide field. If none of the remaining fields fit, the hole will be left as it is.\n *\n * However, you can disable this functionality by setting `dense` to `false` in the\n * options for the grid layout.\n *\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     lime: {\n *         layout: {\n *             type: 'grid',\n *             dense: false,\n *         },\n *     },\n * };\n * ```\n *\n * :::note\n * Sometimes, the order of fields are important for the way users perceive the form.\n * If you choose to use the default auto-reordering behavior, make sure to test your\n * form's layout in different screen sizes to see whether you can mitigate unwanted\n * layout changes.\n *\n * Some unwanted results can be avoided by changing the order of the fields,\n * so that they render appropriately on different screens, or by dividing\n * the form into more sections.\n * :::\n *\n * ###### Stretching a field vertically\n * Most standard elements that can be used in forms, such as `limel-input`,\n * `limel-select`, `limel-slider`, etc, have a fixed height, and therefore\n * it does not really make sense to stretch them vertically, and we strongly\n * recommend you not to!\n *\n * But there are some exceptions. One of them is `limel-input-field` with\n * `type='textarea'`.\n *\n * Also, if you create a custom component for your form—let's say a map—you\n * can use `rowSpan` to increase the height of your custom component.\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     properties: {\n *         comment: {\n *             type: 'string',\n *             title: 'Comment',\n *             lime: {\n *                 component: {\n *                     props: {\n *                         type: 'textarea',\n *                     },\n *                 },\n *                 layout: {\n *                       colSpan: 3,\n *                       rowSpan: 2,\n *                 },\n *             },\n *         },\n *     },\n * };\n * ```\n *\n * :::note\n * If you do *not* set the `rowSpan` for a component, it can stretch vertically\n * within its row, and the row will simply expand with the component.\n *\n * If you *do* set a `rowSpan`, even if you set it to `1`, the component is\n * fixed to that height. What happens to any potential overflow depends on the\n * component.\n * :::\n *\n * :::warning\n * Custom web-components that you include in the forms should not have hard-coded\n * `width` or `height` values! Otherwise they will stretch out of their cell and break\n * the UI. Make sure that such components are internally designed to be responsive,\n * and that their `:host` and any potential wrapping container has the following styles:\n * ```scss\n * :host {\n *     display: block; // or another suitable property\n *     width: 100%;\n *     height: 100%;\n * }\n * :host([hidden]) {\n *     display: none;\n * }\n * .my-component {\n *     width: 100%;\n *     height: 100%;\n * }\n * ```\n * :::\n *\n * @sourceFile span-fields-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-span-fields',\n    shadow: true,\n})\nexport class FormLayoutExample {\n    @State()\n    private formData: Record<string, string> = {};\n\n    @State()\n    private valid = true;\n\n    @State()\n    private dense = true;\n\n    @State()\n    private schema = schema;\n\n    public render() {\n        return [\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-switch\n                    label=\"Dense layout\"\n                    value={this.dense}\n                    onChange={this.handleCheckboxChange}\n                />\n            </limel-example-controls>,\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleFormValidate}\n                value={this.formData}\n                schema={this.schema}\n            />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n        console.log(event.detail);\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n\n    private handleCheckboxChange = (event: CustomEvent<boolean>) => {\n        this.dense = event.detail;\n        this.schema = { ...this.schema };\n        this.schema.lime.layout.dense = this.dense;\n    };\n}\n"},{"filename":"span-fields-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\nexport const schema: FormSchema = {\n    title: 'A form with fields that span columns and rows',\n    description:\n        'This main form has a grid layout with 5 columns. Notice how fields reorder to fill holes when the \"Dense layout\" is enabled. You may need to resize your browser window to see this responsive layout in effect.',\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 5,\n            dense: true,\n        },\n    },\n    properties: {\n        field1: {\n            type: 'string',\n            title: 'Nr. 1: spans 1 column',\n        },\n        field2: {\n            type: 'integer',\n            title: 'Nr. 2: spans 2 columns',\n            lime: {\n                layout: {\n                    colSpan: 2,\n                },\n            },\n        },\n        field3: {\n            type: 'string',\n            title: 'Nr. 3: spans 2 columns',\n            lime: {\n                layout: {\n                    colSpan: 2,\n                },\n            },\n        },\n        field4: {\n            type: 'string',\n            title: 'Nr. 4: spans 1 columns',\n        },\n        field5: {\n            type: 'number',\n            title: 'Nr. 6: spans 2 columns & 3 rows',\n            lime: {\n                component: {\n                    name: 'limel-example-form-map-component',\n                },\n                layout: {\n                    colSpan: 2,\n                    rowSpan: 3,\n                },\n            },\n        },\n        field6: {\n            type: 'string',\n            title: 'Nr. 5: spans 2 columns & 2 rows',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                    colSpan: 2,\n                    rowSpan: 2,\n                },\n            },\n        },\n        field7: {\n            type: 'number',\n            title: 'Nr. 7: spans all columns',\n            minimum: 0,\n            maximum: 100,\n            multipleOf: 10,\n            lime: {\n                layout: {\n                    colSpan: 'all',\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/form-with-help.tsx","fileName":"form-with-help.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-form-with-help","overview":"Form fields with help\nIt's possible to add extensive help to any form element.\nThe string you provide can be in Markdown format,\nempowering you to present a rich-text experience to the user,\nincluding bullet points, hyperlinks, etc…\nRead more on [Help](#/component/limel-help) component.\n\n:::note\nDo not confuse `help` and `helperText`!\nThe helper text is a short description for the input fields\nthat becomes visible when the user click on the fields to provide\nbrief clues about the field or its expected value.\n\nIt can also be used to display validation errors.\nThese errors will be displayed in red below the fields, without\nrequiring the users to click on the field.\n\nCheck out the [Input field Component](#/component/limel-input-field)\nexamples, where we describe how to properly use `helperText`, and `placeholder`.\n:::\n\n:::tip\nWhen rendering a form using a schema, the `helperText`s are automatically\npassed for all the fields based on the schema and validation errors.\nThe `description` specified for a field in the schema is used as\nhelper text while the field is shown as valid.\nWhen there is validation feedback to provide to the user,\nthe field is instead marked as invalid with an error message that is displayed\nin the place of the helper text.\n:::","usage":{},"docs":"Form fields with help\nIt's possible to add extensive help to any form element.\nThe string you provide can be in Markdown format,\nempowering you to present a rich-text experience to the user,\nincluding bullet points, hyperlinks, etc…\nRead more on [Help](#/component/limel-help) component.\n\n:::note\nDo not confuse `help` and `helperText`!\nThe helper text is a short description for the input fields\nthat becomes visible when the user click on the fields to provide\nbrief clues about the field or its expected value.\n\nIt can also be used to display validation errors.\nThese errors will be displayed in red below the fields, without\nrequiring the users to click on the field.\n\nCheck out the [Input field Component](#/component/limel-input-field)\nexamples, where we describe how to properly use `helperText`, and `placeholder`.\n:::\n\n:::tip\nWhen rendering a form using a schema, the `helperText`s are automatically\npassed for all the fields based on the schema and validation errors.\nThe `description` specified for a field in the schema is used as\nhelper text while the field is shown as valid.\nWhen there is validation feedback to provide to the user,\nthe field is instead marked as invalid with an error message that is displayed\nin the place of the helper text.\n:::","docsTags":[{"name":"sourceFile","text":"help-form-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-form-with-help":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"form-with-help.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { HelpFormData, schema } from './help-form-schema';\n\n/**\n * Form fields with help\n * It's possible to add extensive help to any form element.\n * The string you provide can be in Markdown format,\n * empowering you to present a rich-text experience to the user,\n * including bullet points, hyperlinks, etc…\n * Read more on [Help](#/component/limel-help) component.\n *\n * :::note\n * Do not confuse `help` and `helperText`!\n * The helper text is a short description for the input fields\n * that becomes visible when the user click on the fields to provide\n * brief clues about the field or its expected value.\n *\n * It can also be used to display validation errors.\n * These errors will be displayed in red below the fields, without\n * requiring the users to click on the field.\n *\n * Check out the [Input field Component](#/component/limel-input-field)\n * examples, where we describe how to properly use `helperText`, and `placeholder`.\n * :::\n *\n * :::tip\n * When rendering a form using a schema, the `helperText`s are automatically\n * passed for all the fields based on the schema and validation errors.\n * The `description` specified for a field in the schema is used as\n * helper text while the field is shown as valid.\n * When there is validation feedback to provide to the user,\n * the field is instead marked as invalid with an error message that is displayed\n * in the place of the helper text.\n * :::\n *\n * @sourceFile help-form-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-with-help',\n    shadow: true,\n})\nexport class NestedFormExample {\n    @State()\n    private formData: HelpFormData = {};\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"help-form-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\ntype Source = 'search' | 'recommendation' | 'ads' | 'work' | 'workshop';\nexport interface HelpFormData {\n    address?: {\n        name?: string;\n        company?: string;\n        email?: string;\n        source?: Source;\n    };\n}\n\nexport const schema: FormSchema<HelpFormData> = {\n    type: 'object',\n    properties: {\n        address: {\n            type: 'object',\n            title: 'Book a demo',\n            properties: {\n                name: {\n                    type: 'string',\n                    title: 'Name',\n                    description: 'Please write your name & surname',\n                    lime: {\n                        help: {\n                            value: '**Why do we need this information?** <br> This enables our sales representatives to contact you personally. We will keep all your personal information safe!',\n                            readMoreLink: {\n                                href: 'https://www.lime-technologies.com/en/av-saas/',\n                                title: 'This link opens in a new tab',\n                                target: '_blank',\n                                text: 'Our Terms & Privacy Policies',\n                            },\n                        },\n                    },\n                },\n                company: {\n                    type: 'string',\n                    title: 'Company',\n                    description: 'Please write your company name',\n                },\n                email: {\n                    type: 'string',\n                    title: 'Work Email',\n                    format: 'email',\n                    lime: {\n                        help: {\n                            value: 'Enter a valid email address so that we can contact you. We will not share this information with any third parties.',\n                            readMoreLink: {\n                                href: 'https://www.lime-technologies.com/en/av-saas/',\n                                title: 'This link opens in a new tab',\n                                target: '_blank',\n                                text: 'Our Terms & Privacy Policies',\n                            },\n                        },\n                    },\n                },\n                source: {\n                    type: 'string',\n                    title: 'How did you hear about Lime CRM?',\n                    oneOf: [\n                        {\n                            type: 'string',\n                            const: 'search',\n                            title: 'Internet search',\n                        },\n                        {\n                            type: 'string',\n                            const: 'recommendation',\n                            title: 'Recommendation from a friend or a colleague',\n                        },\n                        {\n                            type: 'string',\n                            const: 'ads',\n                            title: 'Advertising campaigns',\n                        },\n                        {\n                            type: 'string',\n                            const: 'work',\n                            title: 'Worked with Lime CRM before',\n                        },\n                        {\n                            type: 'string',\n                            const: 'workshop',\n                            title: 'Watched a workshop online',\n                        },\n                    ],\n                    lime: {\n                        help: {\n                            value: '**Why do we need this information?** <br> This enables us to improve our marketing efforts and get a better understanding of how people perceive us as a brand.',\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/grid/examples","filePath":"./src/components/grid/examples/grid.tsx","fileName":"grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/grid/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/grid/examples/usage","tag":"limel-example-grid","overview":"We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it.","usage":{},"docs":"We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-grid"],"dependencyGraph":{"limel-example-grid":["limel-grid"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"grid.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * We use the `grid-area` property to give each component a unique name, and\n * then use this name to \"draw\" our grid layout.\n *\n * You can name each component anything you want, like `salespipe`, or\n * `infotile-active-support-tickets`, but keeping the names to a fixed number of\n * characters makes the \"drawing\" of the grid look more like the actual grid.\n * One to three characters is probably a good number for most cases.\n *\n * Any \"name\" that doesn't match a named element will create empty cells. In our\n * case, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\n * in the grid, not just at the end.\n *\n * Note that we can add some extra spaces after the dot marking an empty cell,\n * in order to align the next cell in our config-string. This can also be used\n * if your elements have named of differing lengths. The extra whitespace is\n * ignored when the CSS is parsed.\n *\n * If the name of an element does not appear in the grid-configuration, it will\n * not be displayed at all. This might be useful if you wish to show a specific\n * component only under certain circumstances, like if the viewport is large\n * enough to accomodate it.\n */\n@Component({\n    tag: 'limel-example-grid',\n    shadow: true,\n    styleUrl: 'grid.scss',\n})\nexport class GridExample {\n    public render() {\n        return (\n            <limel-grid>\n                <my-deep-red-component />\n                <my-red-component />\n                <my-orange-component />\n                <my-yellow-component />\n                <my-green-component />\n                <my-turquoise-component />\n                <my-blue-component />\n                <my-dark-blue-component />\n                <my-magenta-component />\n                <my-light-grey-component />\n                <my-dark-grey-component />\n            </limel-grid>\n        );\n    }\n}\n"},{"filename":"grid.scss","type":"scss","source":"my-deep-red-component {\n    grid-area: drd;\n}\nmy-red-component {\n    grid-area: red;\n}\nmy-orange-component {\n    grid-area: ora;\n}\nmy-yellow-component {\n    grid-area: yel;\n}\nmy-green-component {\n    grid-area: grn;\n}\nmy-turquoise-component {\n    grid-area: trq;\n}\nmy-blue-component {\n    grid-area: blu;\n}\nmy-dark-blue-component {\n    grid-area: dbl;\n}\nmy-magenta-component {\n    grid-area: mag;\n}\nmy-light-grey-component {\n    grid-area: lgr;\n}\nmy-dark-grey-component {\n    grid-area: dgr;\n}\n\n/* prettier-ignore */\nlimel-grid {\n    --lime-grid-columns: 4;\n\n    --lime-grid-area:\n        \"drd drd blu dbl\"\n        \"drd drd blu dbl\"\n        \"trq trq blu dbl\"\n        \"trq trq blu dbl\"\n        \"red red red red\"\n        \"red red red red\"\n        \"red red red red\"\n        \"dgr mag mag lgr\"\n        \"dgr mag mag lgr\"\n        \"dgr mag mag lgr\"\n        \"ora mag mag yel\"\n        \"ora mag mag yel\"\n        \"grn grn .   .  \"\n        \"grn grn .   .  \"\n        \"grn grn .   .  \"\n        \"grn grn .   .  \";\n}\n\n// Below is stuff that's only here for the boxes in the grid\n// to look nice in this example. You wouldn't use any of this\n// when placing real components into a grid.\n\nmy-deep-red-component {\n    background-color: rgb(var(--color-red-darker));\n}\nmy-red-component {\n    background-color: rgb(var(--color-red-default));\n}\nmy-orange-component {\n    background-color: rgb(var(--color-orange-default));\n}\nmy-yellow-component {\n    background-color: rgb(var(--color-yellow-default));\n}\nmy-green-component {\n    background-color: rgb(var(--color-green-default));\n}\nmy-turquoise-component {\n    background-color: rgb(var(--color-teal-default));\n}\nmy-blue-component {\n    background-color: rgb(var(--color-sky-default));\n}\nmy-dark-blue-component {\n    background-color: rgb(var(--color-blue-darker));\n}\nmy-magenta-component {\n    background-color: rgb(var(--color-magenta-default));\n}\nmy-light-grey-component {\n    background-color: rgb(var(--color-glaucous-light));\n}\nmy-dark-grey-component {\n    background-color: rgb(var(--color-glaucous-darker));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header.tsx","fileName":"header.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header","overview":"Basic example\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","usage":{},"docs":"Basic example\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header"],"dependencyGraph":{"limel-example-header":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic example\n *\n * :::tip\n * Users can still hover the cursor on the truncated headings to read the full\n * text.\n * :::\n *\n */\n\n@Component({\n    tag: 'limel-example-header',\n    shadow: true,\n})\nexport class HeaderExample {\n    public render() {\n        return (\n            <limel-header\n                icon=\"brake_warning\"\n                heading=\"Useful information\"\n                subheading=\"Note\"\n                supportingText=\"Data couldn't be loaded!\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header-colors.tsx","fileName":"header-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header-colors","overview":"Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","usage":{},"docs":"Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-header"],"dependencyGraph":{"limel-example-header-colors":["limel-icon-button","limel-header"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-colors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Action } from '@limetech/lime-elements';\n\n/**\n * Colorful header\n * It's up to you to choose colors for the background, text or icon.\n * When you change the default colors pay attention to how they look together.\n * For instance the text is readable and has enough contrast with a background color.\n */\n\n@Component({\n    tag: 'limel-example-header-colors',\n    shadow: true,\n    styleUrl: 'header-colors.scss',\n})\nexport class HeaderExample {\n    private actions = [\n        {\n            id: '1',\n            icon: 'multiply',\n            label: 'Close',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-header\n                icon={{\n                    name: 'create_new',\n                    color: 'rgb(var(--color-white))',\n                }}\n                heading=\"Edit note\"\n                subheading=\"Created: 17 Jan 2023\"\n            >\n                {this.renderActions()}\n            </limel-header>\n        );\n    }\n\n    private renderActions() {\n        if (!this.actions) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\">\n                {this.actions.map(this.renderActionButton)}\n            </div>\n        );\n    }\n\n    private renderActionButton = (action: Action) => {\n        return (\n            <limel-icon-button\n                class=\"action-icon\"\n                icon={action.icon}\n                label={action.label}\n                onClick={this.handleActionClick(action)}\n            />\n        );\n    };\n\n    private handleActionClick = (action: Action) => (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log(action);\n    };\n}\n"},{"filename":"header-colors.scss","type":"scss","source":":host(limel-example-header-colors) {\n    --header-background-color: rgb(var(--color-yellow-dark));\n    --header-heading-color: rgb(var(--color-brown-default));\n    --header-subheading-color: rgb(var(--color-brown-darker));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/header-menu.tsx","fileName":"header-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-header-menu","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-icon"],"dependencyGraph":{"limel-example-header-menu":["limel-menu","limel-icon"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"items","type":"ListItem[]","mutable":false,"reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"ListItem[]"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-menu.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { ListItem } from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-header-menu',\n    shadow: true,\n    styleUrl: 'header-menu.scss',\n})\nexport class HeaderMenu {\n    @Prop()\n    public items: ListItem[];\n\n    @Prop()\n    public icon: string;\n\n    private menuOpen = true;\n\n    public render() {\n        return (\n            <limel-menu items={this.items} open={this.menuOpen}>\n                <limel-icon slot=\"trigger\" name={this.icon} size=\"x-small\" />\n            </limel-menu>\n        );\n    }\n}\n"},{"filename":"header-menu.scss","type":"scss","source":":host {\n    line-height: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header-narrow.tsx","fileName":"header-narrow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header-narrow","overview":"Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::","usage":{},"docs":"Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header"],"dependencyGraph":{"limel-example-header-narrow":["limel-header"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-narrow.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Narrow headers\n * Sometimes your UI design may require having a narrower header.\n * This will be easy to achieve by sending in the class of `is-narrow`\n * to your component.\n *\n * This will render the header icon smaller, and reduces the font size of\n * the `heading`.\n *\n * :::tip\n * Keep in mind that headers are programmed to grow in height, depending\n * on their content. So if you have large custom components in the `actions`\n * slot or use both `heading` and `subheading`, they will still force the header\n * to appear tall.\n * :::\n *\n */\n@Component({\n    tag: 'limel-example-header-narrow',\n    shadow: true,\n    styleUrl: 'header-narrow.scss',\n})\nexport class HeaderExample {\n    public render() {\n        return (\n            <limel-header\n                class=\"is-narrow\"\n                icon={{\n                    name: 'ok',\n                    color: 'rgb(var(--color-blue-default))',\n                }}\n                heading=\"This is a narrow header\"\n            />\n        );\n    }\n}\n"},{"filename":"header-narrow.scss","type":"scss","source":":host(limel-example-header-narrow) {\n    --header-top-right-left-border-radius: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header-responsive.tsx","fileName":"header-responsive.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header-responsive","overview":"How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","usage":{},"docs":"How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-header"],"dependencyGraph":{"limel-example-header-responsive":["limel-icon-button","limel-header"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-header":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-responsive.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Action } from '@limetech/lime-elements';\n/**\n * How Responsive layout of header works\n * However, sometimes you may need to make the layout be responsive and split\n * into two rows, at a break point.\n *\n * To activate this responsive layout, you can simply add the `has-responsive-layout`\n * class to your `limel-header` component.\n *\n * This makes a few changes in the layout. Firstly, both the left side (icon and\n * headings) and right side (actions slot) will occupy 50% of the total header\n * width each. However, the width of left and right side will never become smaller\n * than `22rem`.\n *\n * :::tip\n * The value of `22rem` is the default breakpoint. But you can easily change it\n * by tweaking the `--header-responsive-breakpoint` variable in your component.\n * :::\n *\n */\n\n@Component({\n    tag: 'limel-example-header-responsive',\n    shadow: true,\n    styleUrl: 'header-responsive.scss',\n})\nexport class HeaderExample {\n    private actions = [\n        {\n            id: '1',\n            icon: 'refresh',\n            label: 'Refresh',\n        },\n        {\n            id: '2',\n            icon: 'delete',\n            label: 'Delete',\n            disabled: true,\n        },\n        {\n            id: '3',\n            icon: 'edit',\n            label: 'Edit',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-header\n                class=\"has-responsive-layout\"\n                icon=\"resize_horizontal\"\n                heading=\"This header is responsive\"\n                subheading=\"Resize the container of this header to see how it works\"\n            >\n                {this.renderActions()}\n            </limel-header>\n        );\n    }\n\n    private renderActions() {\n        if (!this.actions) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\" slot=\"actions\">\n                {this.actions.map(this.renderActionButton)}\n            </div>\n        );\n    }\n\n    private renderActionButton = (action: Action) => {\n        return (\n            <limel-icon-button\n                icon={action.icon}\n                label={action.label}\n                disabled={action.disabled}\n                onClick={this.handleActionClick(action)}\n            />\n        );\n    };\n\n    private handleActionClick = (action: Action) => (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log(action);\n    };\n}\n"},{"filename":"header-responsive.scss","type":"scss","source":":host(limel-example-header-responsive) {\n    --header-responsive-breakpoint: 12rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples","filePath":"./src/components/header/examples/header-slot-actions.tsx","fileName":"header-slot-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/examples/usage","tag":"limel-example-header-slot-actions","overview":"Using the \"actions\" slot\nThe component offers a place for including custom actions, or\nany other component that you want to include in the header.\nTo include any component in the `actions` area,\nyou can simply use the `slot=\"actions\"` attribute.\n\n:::note\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n:::","usage":{},"docs":"Using the \"actions\" slot\nThe component offers a place for including custom actions, or\nany other component that you want to include in the header.\nTo include any component in the `actions` area,\nyou can simply use the `slot=\"actions\"` attribute.\n\n:::note\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-select"],"dependencyGraph":{"limel-example-header-slot-actions":["limel-header","limel-select"],"limel-header":["limel-icon"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"header-slot-actions.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Using the \"actions\" slot\n * The component offers a place for including custom actions, or\n * any other component that you want to include in the header.\n * To include any component in the `actions` area,\n * you can simply use the `slot=\"actions\"` attribute.\n *\n * :::note\n * In small containers when having the default layout, the `actions` area\n * wins the battle of limited space! It means, if you have a very wide\n * component in the actions area, it will never shrink in size, and instead\n * forces the headings to truncate.\n *:::\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-header-slot-actions',\n})\nexport class HeaderSlotActionsExample {\n    @State()\n    public value: Option = {\n        text: 'select a colleague',\n        value: 'colleague',\n        disabled: true,\n    };\n\n    private options: Option[] = [\n        {\n            text: 'Luke Skywalker',\n            value: 'luke',\n            icon: 'businessman',\n        },\n        {\n            text: 'Han Solo',\n            value: 'han',\n            icon: 'human_head',\n        },\n        {\n            text: 'Leia Organo',\n            value: 'leia',\n            icon: 'businesswoman',\n        },\n        {\n            text: 'R2',\n            value: 'r2',\n            icon: 'robot',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-header\n                icon=\"combo_chart\"\n                heading=\"Sale performance\"\n                subheading=\"Choose a colleague to see their statistics\"\n            >\n                <limel-select\n                    slot=\"actions\"\n                    value={this.value}\n                    options={this.options}\n                    onChange={this.handleChange}\n                />\n            </limel-header>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples","filePath":"./src/components/help/examples/help.tsx","fileName":"help.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/usage","tag":"limel-example-help","overview":"Basic example\nThis component accepts a string as a value and displays it in a popover.\nThis string can be in markdown format, enabling you to add links, lists, etc;\nproviding a richer experience for the user.","usage":{},"docs":"Basic example\nThis component accepts a string as a value and displays it in a popover.\nThis string can be in markdown format, enabling you to add links, lists, etc;\nproviding a richer experience for the user.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-help"],"dependencyGraph":{"limel-example-help":["limel-help"],"limel-help":["limel-popover","limel-help-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-help-content":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"help.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nconst markdown = `\n#### Why providing contextual help is important\n\n1. **It promotes user engagement.**\n    When users encounter assistance at strategic points within the interface,\n    frustration diminishes, and satisfaction grows.\n    This positive experience contributes to increased user retention,\n    as individuals are more likely to continue using\n    an app that aligns with their needs and supports them on their journey.\n2. **It help serves as a means of communication between the app and its users.**\n    It enables developers to provide users with information about\n    the app’s functionality, or about the actions that the user is expected to do,\n    to complete a task or move to the next step in a process.\n`;\n\n/**\n * Basic example\n * This component accepts a string as a value and displays it in a popover.\n * This string can be in markdown format, enabling you to add links, lists, etc;\n * providing a richer experience for the user.\n */\n@Component({\n    tag: 'limel-example-help',\n    shadow: true,\n})\nexport class HelpExample {\n    public render() {\n        return <limel-help value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples","filePath":"./src/components/helper-line/examples/helper-line.tsx","fileName":"helper-line.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/usage","tag":"limel-example-helper-line","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-helper-line"],"dependencyGraph":{"limel-example-helper-line":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-helper-line',\n    shadow: true,\n})\nexport class HelperLineExample {\n    public render() {\n        return (\n            <limel-helper-line\n                helperText=\"Do not forget to forget things!\"\n                length={10}\n                maxLength={20}\n                helperTextId=\"tf-helper-text\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples","filePath":"./src/components/helper-line/examples/helper-line-animation.tsx","fileName":"helper-line-animation.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/usage","tag":"limel-example-helper-line-animation","overview":"Animating the appearance of the helper line\n\nIt is possible to hide the helper line component with a\nsmooth animation of its height.\nSimply add the `class=\"hide\"` to the component,\nand it will take care fo the animations.","usage":{},"docs":"Animating the appearance of the helper line\n\nIt is possible to hide the helper line component with a\nsmooth animation of its height.\nSimply add the `class=\"hide\"` to the component,\nand it will take care fo the animations.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox","limel-helper-line"],"dependencyGraph":{"limel-example-helper-line-animation":["limel-checkbox","limel-helper-line"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line-animation.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Animating the appearance of the helper line\n *\n * It is possible to hide the helper line component with a\n * smooth animation of its height.\n * Simply add the `class=\"hide\"` to the component,\n * and it will take care fo the animations.\n */\n@Component({\n    tag: 'limel-example-helper-line-animation',\n    shadow: true,\n})\nexport class HelperLineAnimationExample {\n    @State()\n    private hide: boolean = false;\n\n    public render() {\n        const longHelperText =\n            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.';\n\n        return [\n            <limel-checkbox\n                label=\"Hide helper line\"\n                onChange={this.toggleMode}\n                checked={this.hide}\n            />,\n            <limel-helper-line\n                class={{ hide: this.hide }}\n                helperText={longHelperText}\n                length={10}\n                maxLength={20}\n                helperTextId=\"tf-helper-text\"\n            />,\n        ];\n    }\n\n    private toggleMode = () => {\n        this.hide = !this.hide;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples","filePath":"./src/components/helper-line/examples/helper-line-character-counter.tsx","fileName":"helper-line-character-counter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/usage","tag":"limel-example-helper-line-character-counter","overview":"Only with a character counter","usage":{},"docs":"Only with a character counter","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-helper-line"],"dependencyGraph":{"limel-example-helper-line-character-counter":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line-character-counter.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Only with a character counter\n */\n@Component({\n    tag: 'limel-example-helper-line-character-counter',\n    shadow: true,\n})\nexport class HelperLineCharacterCounterExample {\n    public render() {\n        return (\n            <limel-helper-line\n                length={10}\n                maxLength={20}\n                helperTextId=\"tf-helper-text\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples","filePath":"./src/components/helper-line/examples/helper-line-no-content.tsx","fileName":"helper-line-no-content.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/usage","tag":"limel-example-helper-line-empty","overview":"When the helper line is empty\n\nWhen the component has no content, for example when there is no\n`helperTex`t or no character counter, the component will get a `display: none`\nas style, to avoid creating empty holes in the UI of the consumer component.\n\nThis is important for example in a `flex` or `grid` component that has a `gap`\nbetween its children. If so, we don't want the empty\n`limel-helper-line` to get rendered and cause unnecessary gaps in the UI.","usage":{},"docs":"When the helper line is empty\n\nWhen the component has no content, for example when there is no\n`helperTex`t or no character counter, the component will get a `display: none`\nas style, to avoid creating empty holes in the UI of the consumer component.\n\nThis is important for example in a `flex` or `grid` component that has a `gap`\nbetween its children. If so, we don't want the empty\n`limel-helper-line` to get rendered and cause unnecessary gaps in the UI.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-helper-line"],"dependencyGraph":{"limel-example-helper-line-empty":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line-no-content.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * When the helper line is empty\n *\n * When the component has no content, for example when there is no\n * `helperTex`t or no character counter, the component will get a `display: none`\n * as style, to avoid creating empty holes in the UI of the consumer component.\n *\n * This is important for example in a `flex` or `grid` component that has a `gap`\n * between its children. If so, we don't want the empty\n * `limel-helper-line` to get rendered and cause unnecessary gaps in the UI.\n */\n@Component({\n    tag: 'limel-example-helper-line-empty',\n    shadow: true,\n    styleUrl: 'helper-line-empty.scss',\n})\nexport class HelperLineEmptyExample {\n    public render() {\n        return [\n            <span>This is a flex container with gaps between flex items.</span>,\n            <span>There is a helper line here 👇</span>,\n            <limel-helper-line helperTextId=\"tf-helper-text\" />,\n            <span>but it won't show up, since it is empty.</span>,\n        ];\n    }\n}\n"},{"filename":"helper-line-empty.scss","type":"scss","source":":host(limel-example-helper-line-empty) {\n    display: grid;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples","filePath":"./src/components/helper-line/examples/helper-line-invalid.tsx","fileName":"helper-line-invalid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/usage","tag":"limel-example-helper-line-invalid","overview":"Invalid example","usage":{},"docs":"Invalid example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-helper-line"],"dependencyGraph":{"limel-example-helper-line-invalid":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line-invalid.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Invalid example\n */\n@Component({\n    tag: 'limel-example-helper-line-invalid',\n    shadow: true,\n})\nexport class HelperLineInvalidExample {\n    public render() {\n        return (\n            <limel-helper-line\n                helperText=\"This field is required!\"\n                length={0}\n                maxLength={20}\n                helperTextId=\"tf-helper-text\"\n                invalid={true}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples","filePath":"./src/components/helper-line/examples/helper-line-long-text.tsx","fileName":"helper-line-long-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/usage","tag":"limel-example-helper-line-long-text","overview":"With a long helper text","usage":{},"docs":"With a long helper text","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-helper-line"],"dependencyGraph":{"limel-example-helper-line-long-text":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line-long-text.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * With a long helper text\n */\n@Component({\n    tag: 'limel-example-helper-line-long-text',\n    shadow: true,\n})\nexport class HelperLineLongTextExample {\n    public render() {\n        const longHelperText =\n            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\n        return (\n            <limel-helper-line\n                helperText={longHelperText}\n                length={10}\n                maxLength={20}\n                helperTextId=\"tf-helper-text\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples","filePath":"./src/components/helper-line/examples/helper-line-long-text-no-counter.tsx","fileName":"helper-line-long-text-no-counter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/examples/usage","tag":"limel-example-helper-line-long-text-no-counter","overview":"With a long helper text, but no counter","usage":{},"docs":"With a long helper text, but no counter","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-helper-line"],"dependencyGraph":{"limel-example-helper-line-long-text-no-counter":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line-long-text-no-counter.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * With a long helper text, but no counter\n */\n@Component({\n    tag: 'limel-example-helper-line-long-text-no-counter',\n    shadow: true,\n})\nexport class HelperLineLongTextNoCounterExample {\n    public render() {\n        const longHelperText =\n            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\n        return (\n            <limel-helper-line\n                helperText={longHelperText}\n                helperTextId=\"tf-helper-text\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-basic.tsx","fileName":"icon-button-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-basic","overview":"Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","usage":{},"docs":"Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-basic":["limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic Example\n *\n * Just an icon and a click-handler.\n * Open the dev-tools console to see logged clicks.\n */\n@Component({\n    tag: 'limel-example-icon-button-basic',\n    shadow: true,\n})\nexport class IconButtonBasicExample {\n    public render() {\n        return [\n            <limel-icon-button\n                label=\"Add favourite\"\n                icon=\"heart_outlined\"\n                onClick={this.onClick}\n            />,\n        ];\n    }\n\n    private onClick() {\n        console.log('Button clicked.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-composite.tsx","fileName":"icon-button-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-example-controls","limel-switch"],"dependencyGraph":{"limel-example-icon-button-composite":["limel-icon-button","limel-example-controls","limel-switch"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-composite.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-icon-button-composite',\n    shadow: true,\n    styleUrl: 'icon-button-composite.scss',\n})\nexport class IconButtonCompositeExample {\n    @State()\n    private isFavorite = false;\n\n    @State()\n    private props = {\n        disabled: false,\n        elevated: false,\n    };\n\n    public render() {\n        return [\n            <limel-icon-button\n                label={this.isFavorite ? 'Remove Favorite' : 'Add Favorite'}\n                icon={this.isFavorite ? 'heart_filled' : 'heart_outlined'}\n                onClick={this.toggleFavorite}\n                {...this.props}\n            />,\n            <limel-example-controls>\n                {this.renderControls()}\n            </limel-example-controls>,\n        ];\n    }\n\n    private renderControls() {\n        const controls = [\n            {\n                property: 'disabled',\n                label: 'Disabled',\n                value: true,\n            },\n            {\n                property: 'elevated',\n                label: 'Elevated',\n                value: true,\n            },\n        ];\n\n        return controls.map((control) => {\n            return (\n                <limel-switch\n                    label={control.label}\n                    value={!!this.props[control.property]}\n                    onChange={this.handleChange(control)}\n                />\n            );\n        });\n    }\n\n    private handleChange = (control) => (event: CustomEvent) => {\n        this.props = {\n            ...this.props,\n            [control.property]: (event.detail && control.value) || null,\n        };\n    };\n\n    private toggleFavorite = () => {\n        this.isFavorite = !this.isFavorite;\n    };\n}\n"},{"filename":"icon-button-composite.scss","type":"scss","source":"limel-switch {\n    margin-right: 0.9375rem;\n}\n\nlimel-icon-button {\n    margin-bottom: 1.25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-disabled.tsx","fileName":"icon-button-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-disabled","overview":"Disabled","usage":{},"docs":"Disabled","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-disabled":["limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-disabled.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Disabled\n */\n@Component({\n    tag: 'limel-example-icon-button-disabled',\n    shadow: true,\n})\nexport class IconButtonDisabledExample {\n    public render() {\n        return [\n            <limel-icon-button\n                label=\"Add favourite\"\n                icon=\"heart_outlined\"\n                disabled={true}\n                onClick={this.onClick}\n            />,\n        ];\n    }\n\n    private onClick() {\n        console.log('This should never happen, since the button is disabled.');\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-elevated.tsx","fileName":"icon-button-elevated.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-elevated","overview":"Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","usage":{},"docs":"Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-elevated":["limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-elevated.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Elevated\n *\n * An alternative button style, which helps communicate that this is a button\n * which can be clicked.\n */\n@Component({\n    tag: 'limel-example-icon-button-elevated',\n    shadow: true,\n})\nexport class IconButtonElevatedExample {\n    public render() {\n        return (\n            <limel-icon-button\n                label=\"Add favourite\"\n                icon=\"heart_outlined\"\n                elevated={true}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples","filePath":"./src/components/icon-button/examples/icon-button-toggle-state.tsx","fileName":"icon-button-toggle-state.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/examples/usage","tag":"limel-example-icon-button-toggle-state","overview":"Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","usage":{},"docs":"Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button"],"dependencyGraph":{"limel-example-icon-button-toggle-state":["limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button-toggle-state.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Toggle State\n *\n * This isn't really a feature of `limel-icon-button`, but since it is a common\n * use case, here is a simple way to make the icon button toggle between two\n * different \"states\", each with its own icon and label.\n */\n@Component({\n    tag: 'limel-example-icon-button-toggle-state',\n    shadow: true,\n})\nexport class IconButtonToggleStateExample {\n    @State()\n    private isFavorite = false;\n\n    public render() {\n        return (\n            <limel-icon-button\n                label={this.isFavorite ? 'Remove Favorite' : 'Add Favorite'}\n                icon={this.isFavorite ? 'heart_filled' : 'heart_outlined'}\n                onClick={this.toggleFavorite}\n            />\n        );\n    }\n\n    private toggleFavorite = () => {\n        this.isFavorite = !this.isFavorite;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples","filePath":"./src/components/icon/examples/icon-color.tsx","fileName":"icon-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/usage","tag":"limel-example-icon-color","overview":"Colors\nIcons will inherit their colors form the `color` property of the parent element.\nFor styling the background color, you can use the CSS variable\n`--icon-background-color`.\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\nBut the `bade` has effect, only when the `size` attribute is also set.\n:::","usage":{},"docs":"Colors\nIcons will inherit their colors form the `color` property of the parent element.\nFor styling the background color, you can use the CSS variable\n`--icon-background-color`.\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\nBut the `bade` has effect, only when the `size` attribute is also set.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon"],"dependencyGraph":{"limel-example-icon-color":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-color.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Colors\n * Icons will inherit their colors form the `color` property of the parent element.\n * For styling the background color, you can use the CSS variable\n * `--icon-background-color`.\n *:::note\n * Note that `badge` is set to `true` to provide more space around the icon,\n * and make sure the background color is nicely displayed.\n * But the `bade` has effect, only when the `size` attribute is also set.\n *:::\n */\n@Component({\n    tag: 'limel-example-icon-color',\n    shadow: true,\n    styleUrl: 'icon-color.scss',\n})\nexport class IconColorExample {\n    public render() {\n        return [\n            <limel-icon\n                badge={true}\n                class=\"company\"\n                name=\"organization\"\n                size=\"large\"\n            />,\n            <limel-icon\n                badge={true}\n                class=\"person\"\n                name=\"user_group_man_man\"\n                size=\"large\"\n            />,\n            <limel-icon badge={true} class=\"deal\" name=\"money\" size=\"large\" />,\n            <limel-icon\n                badge={true}\n                class=\"todo\"\n                name=\"todo_list\"\n                size=\"large\"\n            />,\n            <limel-icon\n                badge={true}\n                class=\"campaign\"\n                name=\"megaphone\"\n                size=\"large\"\n            />,\n        ];\n    }\n}\n"},{"filename":"icon-color.scss","type":"scss","source":":host(limel-example-icon-color) {\n    display: grid;\n    gap: 1rem;\n}\n\nlimel-icon {\n    color: rgb(var(--color-white)); /* For all icons in this example */\n\n    &.company {\n        --icon-background-color: rgb(var(--color-sky-default));\n    }\n    &.person {\n        --icon-background-color: rgb(var(--color-orange-default));\n    }\n    &.deal {\n        --icon-background-color: rgb(var(--color-green-default));\n    }\n    &.todo {\n        color: rgb(var(--color-teal-default));\n    }\n    &.campaign {\n        --icon-background-color: rgb(var(--color-pink-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples","filePath":"./src/components/icon/examples/icon-name.tsx","fileName":"icon-name.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/usage","tag":"limel-example-icon-name","overview":"Names\nTo display an icon, all you need to do is specifying its name.","usage":{},"docs":"Names\nTo display an icon, all you need to do is specifying its name.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon"],"dependencyGraph":{"limel-example-icon-name":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-name.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Names\n * To display an icon, all you need to do is specifying its name.\n */\n@Component({\n    tag: 'limel-example-icon-name',\n    shadow: true,\n})\nexport class IconExample {\n    public render() {\n        return <limel-icon name=\"happy\" />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples","filePath":"./src/components/icon/examples/icon-size.tsx","fileName":"icon-size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/examples/usage","tag":"limel-example-icon-size","overview":"Size\nThere are preset sizes.\n:::note\nSetting the `bade` prop to `true` affects how big the icon is rendered,\nbut only when the `size` attribute is also set.\n:::","usage":{},"docs":"Size\nThere are preset sizes.\n:::note\nSetting the `bade` prop to `true` affects how big the icon is rendered,\nbut only when the `size` attribute is also set.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon"],"dependencyGraph":{"limel-example-icon-size":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-size.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Size\n * There are preset sizes.\n * :::note\n * Setting the `bade` prop to `true` affects how big the icon is rendered,\n * but only when the `size` attribute is also set.\n * :::\n */\n@Component({\n    tag: 'limel-example-icon-size',\n    shadow: true,\n    styleUrl: 'icon-size.scss',\n})\nexport class IconSizeExample {\n    public render() {\n        return (\n            <table>\n                <thead>\n                    <tr>\n                        <th>Size</th>\n                        <th>\n                            With <code>badge</code>\n                        </th>\n                        <th>\n                            Without <code>badge</code>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            <code>x-small</code>\n                        </td>\n                        <td>\n                            <limel-icon\n                                name=\"thor_hammer\"\n                                size=\"x-small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"mate\"\n                                size=\"x-small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"croissant\"\n                                size=\"x-small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"apple\"\n                                size=\"x-small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"alps\"\n                                size=\"x-small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"ninja\"\n                                size=\"x-small\"\n                                badge={true}\n                            />\n                        </td>\n                        <td>\n                            <limel-icon name=\"thor_hammer\" size=\"x-small\" />\n                            <limel-icon name=\"mate\" size=\"x-small\" />\n                            <limel-icon name=\"croissant\" size=\"x-small\" />\n                            <limel-icon name=\"apple\" size=\"x-small\" />\n                            <limel-icon name=\"alps\" size=\"x-small\" />\n                            <limel-icon name=\"ninja\" size=\"x-small\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <code>small</code>\n                        </td>\n                        <td>\n                            <limel-icon\n                                name=\"squats\"\n                                size=\"small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"pullups\"\n                                size=\"small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"pushups\"\n                                size=\"small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"bench_press\"\n                                size=\"small\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"cancel\"\n                                size=\"small\"\n                                badge={true}\n                            />\n                            <limel-icon name=\"ok\" size=\"small\" badge={true} />\n                        </td>\n                        <td>\n                            <limel-icon name=\"squats\" size=\"small\" />\n                            <limel-icon name=\"pullups\" size=\"small\" />\n                            <limel-icon name=\"pushups\" size=\"small\" />\n                            <limel-icon name=\"bench_press\" size=\"small\" />\n                            <limel-icon name=\"cancel\" size=\"small\" />\n                            <limel-icon name=\"ok\" size=\"small\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <code>medium</code>\n                        </td>\n                        <td>\n                            <limel-icon\n                                name=\"triforce\"\n                                size=\"medium\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"mana\"\n                                size=\"medium\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"pokemon\"\n                                size=\"medium\"\n                                badge={true}\n                            />\n                            <limel-icon name=\"dog\" size=\"medium\" badge={true} />\n                            <limel-icon\n                                name=\"day_of_the_tentacle\"\n                                size=\"medium\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"bad_piggies\"\n                                size=\"medium\"\n                                badge={true}\n                            />\n                        </td>\n                        <td>\n                            <limel-icon name=\"triforce\" size=\"medium\" />\n                            <limel-icon name=\"mana\" size=\"medium\" />\n                            <limel-icon name=\"pokemon\" size=\"medium\" />\n                            <limel-icon name=\"dog\" size=\"medium\" />\n                            <limel-icon\n                                name=\"day_of_the_tentacle\"\n                                size=\"medium\"\n                            />\n                            <limel-icon name=\"bad_piggies\" size=\"medium\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <code>large</code>\n                        </td>\n                        <td>\n                            <limel-icon name=\"frog\" size=\"large\" badge={true} />\n                            <limel-icon\n                                name=\"octopus\"\n                                size=\"large\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"gorilla\"\n                                size=\"large\"\n                                badge={true}\n                            />\n                            <limel-icon name=\"cat\" size=\"large\" badge={true} />\n                            <limel-icon\n                                name=\"dragon\"\n                                size=\"large\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                name=\"caterpillar\"\n                                size=\"large\"\n                                badge={true}\n                            />\n                        </td>\n                        <td>\n                            <limel-icon name=\"frog\" size=\"large\" />\n                            <limel-icon name=\"octopus\" size=\"large\" />\n                            <limel-icon name=\"gorilla\" size=\"large\" />\n                            <limel-icon name=\"cat\" size=\"large\" />\n                            <limel-icon name=\"dragon\" size=\"large\" />\n                            <limel-icon name=\"caterpillar\" size=\"large\" />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <code>custom</code>\n                            <p>Size is set in CSS.</p>\n                        </td>\n                        <td>\n                            <limel-icon\n                                class=\"custom-size\"\n                                name=\"citrus\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                class=\"custom-size\"\n                                name=\"strawberry\"\n                                badge={true}\n                            />\n                            <limel-icon\n                                class=\"custom-size\"\n                                name=\"broccoli\"\n                                badge={true}\n                            />\n                        </td>\n                        <td>\n                            <limel-icon class=\"custom-size\" name=\"citrus\" />\n                            <limel-icon class=\"custom-size\" name=\"strawberry\" />\n                            <limel-icon class=\"custom-size\" name=\"broccoli\" />\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n}\n"},{"filename":"icon-size.scss","type":"scss","source":"@import url('./icon-size-ui.scss');\n\nlimel-icon.custom-size {\n    height: 4rem;\n    width: 4rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile.tsx","fileName":"info-tile.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile","overview":"Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","usage":{},"docs":"Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile"],"dependencyGraph":{"limel-example-info-tile":["limel-info-tile"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic example\n *\n * This component does its best to offer a responsive layout\n * that reacts both to the length of text, and size of the container.\n *\n * :::note\n * To use this component properly, you need to define both\n * a declared `height` and a declared `width` for it. Alternatively,\n * make sure that its container enforces a width and height,\n * for instance, use it as a flex or grid child.\n * :::\n *\n * In this example, you can resize the component to see how it\n * tries to adjust its content to the size of its container.\n *\n * :::tip\n * Try to avoid long textual content to get\n * the best possible visualization. They can cause\n * undesired overlapping of the content, depending on the size of the\n * component.\n * :::\n */\n@Component({\n    tag: 'limel-example-info-tile',\n    shadow: true,\n    styleUrl: 'info-tile.scss',\n})\nexport class InfoTileExample {\n    public render() {\n        const link = {\n            href: 'https://duckduckgo.com/?q=weather',\n            title: 'Click to see real-time weather forecast',\n            target: '_blank',\n        };\n\n        return (\n            <div>\n                <limel-info-tile\n                    icon=\"partly_cloudy_rain\"\n                    label=\"Partly cloudy with a risk of rain\"\n                    prefix=\"temp\"\n                    value=\"23\"\n                    suffix=\"°C\"\n                    link={link}\n                />\n            </div>\n        );\n    }\n}\n"},{"filename":"info-tile.scss","type":"scss","source":"div {\n    resize: both;\n    overflow: auto;\n\n    box-sizing: border-box;\n    position: relative;\n\n    min-width: 8rem;\n    width: 12rem;\n    max-width: 40rem;\n\n    min-height: 8rem;\n    height: 12rem;\n    max-height: 40rem;\n\n    padding: 1rem;\n    border: 0.125rem dashed rgb(var(--contrast-500));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-badge.tsx","fileName":"info-tile-badge.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-badge","overview":"Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","usage":{},"docs":"Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile"],"dependencyGraph":{"limel-example-info-tile-badge":["limel-info-tile"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-badge.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Displaying a notification badge\n *\n * The component can display a badge, which could either be a `number` or\n * a `string`. Read more about how the badge truncates or abbreviates the\n * provided label [here](#/component/limel-badge/).\n */\n@Component({\n    tag: 'limel-example-info-tile-badge',\n    shadow: true,\n    styleUrl: 'info-tile-badge.scss',\n})\nexport class InfoTileBadgeExample {\n    private NumberBadge: number = 6;\n    private NumberValue: number = 23;\n\n    private StringBadge: string = '···';\n    private StringValue: string = '23,89';\n\n    public render() {\n        return [\n            <limel-info-tile\n                icon=\"doctors_bag\"\n                label=\"Active support tickets\"\n                value={this.NumberValue}\n                badge={this.NumberBadge}\n                link={{ href: '#' }}\n            />,\n            <limel-info-tile\n                icon=\"water\"\n                label=\"Average weekly usage\"\n                value={this.StringValue}\n                suffix=\"L\"\n                badge={this.StringBadge}\n                link={{ href: '#' }}\n            />,\n        ];\n    }\n}\n"},{"filename":"info-tile-badge.scss","type":"scss","source":":host(limel-example-info-tile-badge) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 8rem;\n    gap: 2rem;\n    padding: 2rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-loading.tsx","fileName":"info-tile-loading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-loading","overview":"Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","usage":{},"docs":"Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-info-tile-loading":["limel-info-tile","limel-example-controls","limel-checkbox"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-loading.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Loading state\n *\n * Sometimes the value needs to be calculated, updated, or fetched\n * through a process that requires some time. In such cases, it is\n * a great idea to let the users know that the data is being updated.\n *\n * To do so, set the `loading` property to `true`. The component will then\n * show an indeterminate progressbar indicating the data is being updated,\n * while the older value is still being displayed.\n *\n * :::note\n * Note that this does _not_ disable the link, and most probably you\n * do not need it to be disabled either.\n * If the link should be disabled while loading, the\n * `disabled` property should be set to `true` as well.\n * :::\n */\n@Component({\n    tag: 'limel-example-info-tile-loading',\n    shadow: true,\n    styleUrl: 'info-tile-loading.scss',\n})\nexport class InfoTileLoadingExample {\n    @State()\n    public loading = false;\n\n    public render() {\n        const link = {\n            href: 'https://duckduckgo.com/?q=weather',\n            title: 'Click to see real-time weather forecast',\n        };\n\n        return [\n            <limel-info-tile\n                icon=\"partly_cloudy_rain\"\n                label=\"Partly cloudy with a risk of rain\"\n                prefix=\"temp\"\n                value=\"23\"\n                suffix=\"°C\"\n                link={link}\n                loading={this.loading}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Loading\"\n                    checked={this.loading}\n                    onChange={this.setLoading}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setLoading = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.loading = event.detail;\n    };\n}\n"},{"filename":"info-tile-loading.scss","type":"scss","source":":host(limel-example-info-tile-loading) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 8rem;\n    gap: 2rem;\n    padding: 2rem;\n}\n\nlimel-example-controls {\n    margin: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-primary-slot.tsx","fileName":"info-tile-primary-slot.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-primary-slot","overview":"Using the primary slot\nThe component offers a primary slot that can be used to display\nany custom content.\n\n:::important\n1. If there is a component to be displayed in the primary slot,\nthe info tile won't render the inbuilt progress bar.\n1. The primary slot has an aspect ratio of 1:1, so the content\nwill be displayed in a square area.\n:::","usage":{},"docs":"Using the primary slot\nThe component offers a primary slot that can be used to display\nany custom content.\n\n:::important\n1. If there is a component to be displayed in the primary slot,\nthe info tile won't render the inbuilt progress bar.\n1. The primary slot has an aspect ratio of 1:1, so the content\nwill be displayed in a square area.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile","limel-chart"],"dependencyGraph":{"limel-example-info-tile-primary-slot":["limel-info-tile","limel-chart"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"],"limel-chart":["limel-spinner","limel-badge","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-primary-slot.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { InfoTileProgress } from '@limetech/lime-elements';\nimport { chartItems } from '../../chart/examples/chart-items-stack';\n\n/**\n * Using the primary slot\n * The component offers a primary slot that can be used to display\n * any custom content.\n *\n * :::important\n * 1. If there is a component to be displayed in the primary slot,\n * the info tile won't render the inbuilt progress bar.\n * 1. The primary slot has an aspect ratio of 1:1, so the content\n * will be displayed in a square area.\n * :::\n */\n@Component({\n    tag: 'limel-example-info-tile-primary-slot',\n    shadow: true,\n    styleUrl: 'info-tile.scss',\n})\nexport class InfoTilePrimarySlotExample {\n    public render() {\n        const link = {\n            href: '#',\n            title: 'Click to see further details',\n            target: '_blank',\n        };\n\n        const progress: InfoTileProgress = {\n            value: 76,\n        };\n\n        return (\n            <div>\n                <limel-info-tile\n                    icon=\"cloud_storage\"\n                    label=\"Cloud storage usage\"\n                    value=\"215\"\n                    suffix=\"GB\"\n                    link={link}\n                    progress={progress} // won't be rendered\n                >\n                    <limel-chart\n                        slot=\"primary\"\n                        items={chartItems}\n                        type=\"doughnut\"\n                    />\n                </limel-info-tile>\n            </div>\n        );\n    }\n}\n"},{"filename":"info-tile.scss","type":"scss","source":"div {\n    resize: both;\n    overflow: auto;\n\n    box-sizing: border-box;\n    position: relative;\n\n    min-width: 8rem;\n    width: 12rem;\n    max-width: 40rem;\n\n    min-height: 8rem;\n    height: 12rem;\n    max-height: 40rem;\n\n    padding: 1rem;\n    border: 0.125rem dashed rgb(var(--contrast-500));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-progress.tsx","fileName":"info-tile-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-progress","overview":"Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","usage":{},"docs":"Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile","limel-example-controls","limel-input-field"],"dependencyGraph":{"limel-example-info-tile-progress":["limel-info-tile","limel-example-controls","limel-input-field"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-progress.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { InfoTileProgress } from '@limetech/lime-elements';\n\n/**\n * Displaying a progress bar\n *\n * By defining a numeric `progressValue`, you can display\n * a circular progress bar to visualize more data on the component.\n * This can for instance help illustrate how much of a\n * set goal has been reached, which together with the `value` will help users\n * get a better overview of the provided data.\n *\n * When the circular progress is shown, that would become the primary\n * illustrative element on the component,\n * which means the icon will be rendered smaller, only as a supportive\n * contextual visual element.\n *\n * :::tip\n * It is possible to customize the progress bar's suffix, but it is\n * set to display the percentage sign (**%**) by default.\n * :::\n *\n */\n@Component({\n    tag: 'limel-example-info-tile-progress',\n    shadow: true,\n    styleUrl: 'info-tile-progress.scss',\n})\nexport class InfoTileProgressExample {\n    @State()\n    private progress: InfoTileProgress = {\n        value: 76,\n        prefix: '↑',\n        displayPercentageColors: true,\n    };\n\n    public render() {\n        return [\n            <limel-info-tile\n                label=\"Won deals this month\"\n                icon=\"money\"\n                prefix=\"Total value\"\n                value=\"70,659\"\n                suffix=\"EUR\"\n                link={{ href: '#' }}\n                progress={this.progress}\n            />,\n            <limel-example-controls>\n                <limel-input-field\n                    label=\"Progress value\"\n                    type=\"number\"\n                    value={`${this.progress.value}`}\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.progress = {\n            ...this.progress,\n            value: +event.detail,\n        };\n    };\n}\n"},{"filename":"info-tile-progress.scss","type":"scss","source":":host(limel-example-info-tile-progress) {\n    display: grid;\n    grid-template-columns: 3fr 1fr;\n    grid-template-rows: 10rem;\n    gap: 2rem;\n}\n\nlimel-example-controls {\n    margin: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples","filePath":"./src/components/info-tile/examples/info-tile-styling.tsx","fileName":"info-tile-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/examples/usage","tag":"limel-example-info-tile-styling","overview":"How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","usage":{},"docs":"How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-info-tile"],"dependencyGraph":{"limel-example-info-tile-styling":["limel-info-tile"],"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile-styling.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { InfoTileProgress } from '@limetech/lime-elements';\n\n/**\n * How to style the Info tile\n *\n * The component offers different CSS variables for styling\n * the color of the text, background, and it's icon; as well as\n * radius of it's rounded corners, and colors of the notification badge\n * and its text.\n */\n@Component({\n    tag: 'limel-example-info-tile-styling',\n    shadow: true,\n    styleUrl: 'info-tile-styling.scss',\n})\nexport class InfoTileStylingExample {\n    private value: string = '4 876';\n    private badge: number = 3;\n\n    private progress: InfoTileProgress = {\n        value: 12,\n        maxValue: 100,\n        suffix: '%',\n        displayPercentageColors: false,\n    };\n\n    public render() {\n        return [\n            <limel-info-tile\n                icon=\"electricity\"\n                label=\"Average weekly usage\"\n                value={this.value}\n                suffix=\"kWh\"\n                badge={this.badge}\n            />,\n            <limel-info-tile\n                label=\"Average weekly usage\"\n                icon=\"electricity\"\n                value={this.value}\n                suffix=\"kWh\"\n                progress={this.progress}\n                prefix=\"↑\"\n            />,\n        ];\n    }\n}\n"},{"filename":"info-tile-styling.scss","type":"scss","source":":host(limel-example-info-tile-styling) {\n    display: flex;\n    justify-content: space-evenly;\n    gap: 2rem;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: rgb(var(--contrast-1500));\n}\n\nlimel-info-tile {\n    width: 18rem;\n    height: 8rem;\n\n    &:first-of-type {\n        --info-tile-icon-color: rgb(var(--color-cyan-light));\n        --info-tile-text-color: rgb(var(--color-yellow-default));\n        --info-tile-background-color: rgb(var(--color-indigo-dark));\n\n        --info-tile-badge-text-color: rgb(var(--color-indigo-dark));\n        --info-tile-badge-background-color: rgb(var(--color-orange-default));\n    }\n\n    &:last-of-type {\n        --info-tile-border-radius: 0.5rem;\n        --info-tile-icon-color: rgb(var(--color-cyan-dark));\n\n        --info-tile-progress-fill-color: rgb(var(--color-lime-light));\n        --info-tile-progress-prefix-color: rgb(var(--color-red-default));\n        --info-tile-progress-text-color: rgb(var(--color-lime-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-autocomplete.tsx","fileName":"input-field-autocomplete.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-autocomplete","overview":"Input Field with Completions","usage":{},"docs":"Input Field with Completions","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-autocomplete":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-autocomplete.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field with Completions\n */\n@Component({\n    tag: 'limel-example-input-field-autocomplete',\n    shadow: true,\n})\nexport class InputFieldAutocompleteExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value: string;\n\n    @State()\n    private completions: string[] = [\n        'Lundalogik AB',\n        'Lundalogik AS',\n        'SAAB AB',\n        'Lundalogistik & Spedition AB',\n        'Aftonbladet AB',\n        'Expressen AB',\n        'Swedbank',\n        'Handelsbanken',\n        'Väderstad',\n    ];\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Autocomplete\"\n                value={this.value}\n                completions={this.completions}\n                required={this.required}\n                invalid={this.invalid}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    @Watch('required')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-error-icon.tsx","fileName":"input-field-error-icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-error-icon","overview":"Input Field with Error Icon","usage":{},"docs":"Input Field with Error Icon","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-error-icon":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-error-icon.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\nconst MIN_LENGTH = 6;\n\n/**\n * Input Field with Error Icon\n */\n@Component({\n    tag: 'limel-example-input-field-error-icon',\n    shadow: true,\n})\nexport class InputFieldErrorIconExample {\n    @State()\n    private valueNative: string;\n\n    @State()\n    private valueConsumer: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Text Field with native validation\"\n                minlength={MIN_LENGTH}\n                value={this.valueNative}\n                onChange={this.onChangeNative}\n            />,\n            <limel-input-field\n                label=\"Text Field with consumer validation\"\n                type={'email'}\n                invalid={this.isInvalid()}\n                helperText=\"Please enter an email with the domain 'test.com'\"\n                value={this.valueConsumer}\n                onChange={this.onChangeConsumer}\n            />,\n        ];\n    }\n\n    private onChangeNative = (event: CustomEvent<string>) => {\n        this.valueNative = event.detail;\n    };\n\n    private onChangeConsumer = (event: CustomEvent<string>) => {\n        this.valueConsumer = event.detail;\n    };\n\n    private isInvalid = () => {\n        return !!(\n            this.valueConsumer && !this.valueConsumer.endsWith('@test.com')\n        );\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-focus.tsx","fileName":"input-field-focus.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-focus","overview":"Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).","usage":{},"docs":"Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-input-field"],"dependencyGraph":{"limel-example-input-field-focus":["limel-button","limel-input-field"],"limel-button":["limel-icon","limel-spinner"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-focus.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Setting focus programmatically\n *\n * To set focus programmatically, call `.focus()` on the `limel-input-field`\n * element. Note that, for this to work, the `tabindex` property must be set\n * on the `limel-input-field`.\n *\n * - `tabindex=\"0\"` means that the element should be focusable in sequential\n * keyboard navigation, after any positive tabindex values and its order is\n * defined by the document's source order.\n * - A _positive value_ means the element should be focusable in sequential\n * keyboard navigation, with its order defined by the value of the number.\n *\n * Read more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).\n */\n@Component({\n    tag: 'limel-example-input-field-focus',\n    shadow: true,\n})\nexport class InputFieldFocusExample {\n    @State()\n    private value: string;\n\n    private inputField: HTMLLimelInputFieldElement;\n\n    public render() {\n        return [\n            <limel-button\n                onClick={this.setFocus}\n                label={'Set focus'}\n                style={{ 'margin-bottom': '1rem' }}\n            />,\n            <limel-input-field\n                label=\"Set focus on me!\"\n                value={this.value}\n                onChange={this.handleChange}\n                ref={this.getInputFieldRef}\n                tabindex=\"0\"\n            />,\n        ];\n    }\n\n    private getInputFieldRef = (input: HTMLLimelInputFieldElement) => {\n        this.inputField = input;\n\n        return input;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setFocus = (event: MouseEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.inputField.focus();\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-icon-both.tsx","fileName":"input-field-icon-both.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-icon-both","overview":"Input Field with Leading and Trailing Icons & Action","usage":{},"docs":"Input Field with Leading and Trailing Icons & Action","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-icon-both":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-icon-both.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with Leading and Trailing Icons & Action\n */\n@Component({\n    tag: 'limel-example-input-field-icon-both',\n    shadow: true,\n})\nexport class InputFieldIconBothExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Website\"\n                type=\"url\"\n                value={this.value}\n                leadingIcon=\"globe\"\n                trailingIcon=\"external_link\"\n                onChange={this.handleChange}\n                onAction={this.onAction}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private onAction = () => {\n        window.open(this.value);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-icon-leading.tsx","fileName":"input-field-icon-leading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-icon-leading","overview":"Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","usage":{},"docs":"Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-icon-leading":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-icon-leading.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\nconst MIN_LENGTH = 6;\n\n/**\n * Input Field with Leading Icon\n *\n * A leading icon can be used to visually \"decorate\" the input field. The\n * purpose for adding a leading icon should be to help the user understand what\n * the field is for.\n *\n * In this example, we use a map icon in addition to the \"Address\" label, to\n * indicate that this field is meant for a physical address.\n *\n * The example has a minimum length just to show what an invalid field looks\n * like.\n */\n@Component({\n    tag: 'limel-example-input-field-icon-leading',\n    shadow: true,\n})\nexport class InputFieldIconLeadingExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Address\"\n                value={this.value}\n                minlength={MIN_LENGTH}\n                helperText={`Please enter at least ${MIN_LENGTH} characters!`}\n                leadingIcon=\"map_marker\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-icon-trailing.tsx","fileName":"input-field-icon-trailing.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-icon-trailing","overview":"Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","usage":{},"docs":"Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-icon-trailing":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-icon-trailing.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with Trailing Icon & Action\n *\n * A trailing icon can be added to input fields along with an action\n * for that trailing icon.\n * :::note\n * Use trailing icons only when you intend to have an action associated with them.\n * Trailing icons of input fields will get an interactive visual effect when\n * hovered to hint users that they are clickable.\n *\n * Therefore, a purely ornamental trailing icon that has this interactive effect\n * will be confusing for users.\n * :::\n */\n@Component({\n    tag: 'limel-example-input-field-icon-trailing',\n    shadow: true,\n})\nexport class InputFieldIconTrailingExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Email address\"\n                type=\"email\"\n                value={this.value}\n                trailingIcon=\"filled_message\"\n                onChange={this.handleChange}\n                onAction={this.onAction}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private onAction = () => {\n        console.log(`Sending email to ${this.value}`);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-number.tsx","fileName":"input-field-number.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-number","overview":"Input Field of Type Number","usage":{},"docs":"Input Field of Type Number","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-number":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-number.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field of Type Number\n */\n@Component({\n    tag: 'limel-example-input-field-number',\n    shadow: true,\n})\nexport class InputFieldNumberExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private formatNumber = true;\n\n    @State()\n    private value = '';\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Number Field Label\"\n                value={this.value}\n                type=\"number\"\n                formatNumber={this.formatNumber}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                required={this.required}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.formatNumber}\n                    label=\"Format value\"\n                    onChange={this.setFormatNumber}\n                />\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    @Watch('required')\n    private checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string | number>) => {\n        this.value = event.detail + '';\n        this.checkValidity();\n    };\n\n    private setFormatNumber = (event: CustomEvent<boolean>) => {\n        this.formatNumber = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-pattern.tsx","fileName":"input-field-pattern.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-pattern","overview":"Input Field with pattern","usage":{},"docs":"Input Field with pattern","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-pattern":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-pattern.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with pattern\n */\n@Component({\n    tag: 'limel-example-input-field-pattern',\n    shadow: true,\n})\nexport class InputFieldPatternExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Personal identity number (YYYYMMDD-XXXX)\"\n                value={this.value}\n                pattern={'[0-9]{8}-[0-9]{4}'}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-placeholder.tsx","fileName":"input-field-placeholder.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-placeholder","overview":"Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","usage":{},"docs":"Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-placeholder":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-placeholder.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with a placeholder\n *\n * The placeholder text is displayed inside the input field,\n * when the field is focused and empty.\n *\n * :::tip\n * A `placeholder` text is good for providing hints and examples about the expected input.\n * While the `helperText` is better for providing instructions.\n * :::\n *\n * Unlike `helperText` which is constantly visible while the user is typing\n * inside the field, the `placeholder` text disappears as soon as the user has\n * input anything.\n *\n * :::note\n * Make an informed decision when using `placeholder` instead of `helperText`!\n * You may have good intentions to reduce clutter on the user interface\n * and use a placeholder text, because it will disappear after user has started typing.\n * However, if the additional tips or instructions that you are trying to provide is\n * crucial or hard to remember, it is better to display them as helper text instead.\n *\n * This is because disappearing crucial information will strains users’ short-term memory.\n * In a form with many fields, users can easily forget\n * what each field was for. Especially if a field has validations that fail\n * for example after submitting. Instructions that are not visible anymore will make it\n * hard for the user to realize what the problem is or how to solve it.\n * :::\n * :::warning\n * If no `label` is provided, then the placeholder text will be displayed even if the\n * input field is not focused.\n *\n * However, this does not mean that you should use this\n * as a hack, to create a minimalistic and clean user interface. Not providing labels\n * will cause accessibility issues for users of assistive technologies,\n * and strains users’ short-term memory as explained above.\n * Additionally, users may confuse the placeholder text, as an automatically\n * inputted value, and skip filling in information.\n * :::\n */\n@Component({\n    tag: 'limel-example-input-field-placeholder',\n    shadow: true,\n})\nexport class InputFieldPlaceholderExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Your personal identity number\"\n                placeholder=\"example: 19990101-1234\"\n                helperText=\"Use correct format (12 digits, and a dash after your birth date)\"\n                value={this.value}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-number-prefix.tsx","fileName":"input-field-number-prefix.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-prefix","overview":"Prefix\nAn input Field with a currency symbol text displayed as prefix","usage":{},"docs":"Prefix\nAn input Field with a currency symbol text displayed as prefix","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-prefix":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-number-prefix.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Prefix\n * An input Field with a currency symbol text displayed as prefix\n */\n@Component({\n    tag: 'limel-example-input-field-prefix',\n    shadow: true,\n})\nexport class InputFieldPrefixExample {\n    @State()\n    private value = '10000';\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Price per unit\"\n                prefix=\"$\"\n                value={this.value}\n                type=\"number\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string | number>) => {\n        this.value = event.detail + '';\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-search.tsx","fileName":"input-field-search.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-search","overview":"Input Field of Type Search","usage":{},"docs":"Input Field of Type Search","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-search":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-search.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field of Type Search\n */\n@Component({\n    tag: 'limel-example-input-field-search',\n    shadow: true,\n})\nexport class InputFieldSearchExample {\n    @State()\n    private value;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Search\"\n                type=\"search\"\n                leadingIcon=\"search\"\n                value={this.value}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-showlink.tsx","fileName":"input-field-showlink.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-showlink","overview":"With `showLink=true`","usage":{},"docs":"With `showLink=true`","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-showlink":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-showlink.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With `showLink=true`\n */\n@Component({\n    tag: 'limel-example-input-field-showlink',\n    shadow: true,\n    styleUrl: 'show-link.scss',\n})\nexport class InputFieldShowlinkExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private emailValue: string;\n\n    @State()\n    private telValue: string;\n\n    @State()\n    private urlValue: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Email Field\"\n                value={this.emailValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleEmailChange}\n                type=\"email\"\n                showLink\n            />,\n            <limel-input-field\n                label=\"Phone Field\"\n                value={this.telValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleTelChange}\n                type=\"tel\"\n                showLink\n            />,\n            <limel-input-field\n                label=\"URL Field\"\n                value={this.urlValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleUrlChange}\n                type=\"url\"\n                showLink\n            />,\n            <limel-input-field\n                label=\"urlAsText\"\n                value={this.urlValue}\n                required={this.required}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleUrlChange}\n                type=\"urlAsText\"\n                showLink\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.emailValue} />,\n            <limel-example-value value={this.telValue} />,\n            <limel-example-value value={this.urlValue} />,\n        ];\n    }\n\n    private handleEmailChange = (event: CustomEvent<string>) => {\n        this.emailValue = event.detail;\n    };\n\n    private handleTelChange = (event: CustomEvent<string>) => {\n        this.telValue = event.detail;\n    };\n\n    private handleUrlChange = (event: CustomEvent<string>) => {\n        this.urlValue = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"},{"filename":"show-link.scss","type":"scss","source":"limel-input-field {\n    margin-bottom: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-text-suffix.tsx","fileName":"input-field-text-suffix.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-suffix","overview":"Suffix\nAn Input Field with a unit of measurement displayed as suffix","usage":{},"docs":"Suffix\nAn Input Field with a unit of measurement displayed as suffix","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field"],"dependencyGraph":{"limel-example-input-field-suffix":["limel-input-field"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text-suffix.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Suffix\n * An Input Field with a unit of measurement displayed as suffix\n */\n@Component({\n    tag: 'limel-example-input-field-suffix',\n    shadow: true,\n})\nexport class InputFieldSuffixExample {\n    @State()\n    private value = '50';\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Quantity\"\n                suffix=\"pcs\"\n                value={this.value}\n                type=\"number\"\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-text.tsx","fileName":"input-field-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-text","overview":"Input Field of Type Text","usage":{},"docs":"Input Field of Type Text","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-text":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field of Type Text\n */\n@Component({\n    tag: 'limel-example-input-field-text',\n    shadow: true,\n})\nexport class InputFieldTextExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value: string;\n\n    public render() {\n        const MAX_LENGTH = 15;\n\n        return [\n            <limel-input-field\n                label=\"Text Field\"\n                helperText=\"Please enter a useful message!\"\n                maxlength={MAX_LENGTH}\n                value={this.value}\n                required={this.required}\n                invalid={this.invalid}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    @Watch('required')\n    @Watch('value')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples","filePath":"./src/design-guidelines/declutter/examples/input-field-text-decluttering-guidelines.tsx","fileName":"input-field-text-decluttering-guidelines.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/usage","tag":"limel-example-input-field-text-decluttering-guidelines","overview":"Input Field of Type Text","usage":{},"docs":"Input Field of Type Text","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-input-field-text-decluttering-guidelines":["limel-input-field","limel-example-controls","limel-checkbox"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text-decluttering-guidelines.tsx","type":"tsx","source":"import { Component, h, State, Watch } from '@stencil/core';\n\n/**\n * Input Field of Type Text\n */\n@Component({\n    tag: 'limel-example-input-field-text-decluttering-guidelines',\n    shadow: true,\n    styleUrl: 'input-field-text-decluttering-guidelines.scss',\n})\nexport class InputFieldTextExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private value: string;\n\n    public render() {\n        const MAX_LENGTH = 15;\n\n        return [\n            <limel-input-field\n                label=\"Text Field\"\n                helperText=\"Please enter a useful message!\"\n                maxlength={MAX_LENGTH}\n                value={this.value}\n                required={this.required}\n                invalid={this.invalid}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    @Watch('required')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"},{"filename":"input-field-text-decluttering-guidelines.scss","type":"scss","source":":host {\n    display: block;\n    padding: 1rem;\n    border-radius: 0.25rem;\n    background-color: rgb(var(--contrast-100));\n}\nlimel-input-field {\n    margin-bottom: 1rem;\n}\n\nlimel-button {\n    margin-left: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-text-multiple.tsx","fileName":"input-field-text-multiple.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-text-multiple","overview":"Multiple Fields","usage":{},"docs":"Multiple Fields","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-checkbox"],"dependencyGraph":{"limel-example-input-field-text-multiple":["limel-input-field","limel-checkbox"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-text-multiple.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Multiple Fields\n */\n@Component({\n    tag: 'limel-example-input-field-text-multiple',\n    shadow: true,\n    styleUrl: 'input-field-text-multiple.scss',\n})\nexport class InputFieldTextExample {\n    @State()\n    private firstValue: string;\n\n    @State()\n    private secondValue: string;\n\n    @State()\n    private addDistance: boolean = false;\n\n    public render() {\n        return (\n            <div class={{ 'add-distance': this.addDistance }}>\n                <section>\n                    <limel-input-field\n                        label=\"Fields shouldn't be too close!\"\n                        value={this.firstValue}\n                        onChange={this.firstOnChange}\n                    />\n                    <limel-input-field\n                        label=\"Type something here now to see why…\"\n                        helperText=\"See how the label covers the previous field? Now add some distance 👇\"\n                        value={this.secondValue}\n                        onChange={this.secondOnChange}\n                    />\n                </section>\n                <limel-checkbox\n                    label=\"Then click this to add distance between fields\"\n                    onChange={this.toggleMode}\n                    checked={this.addDistance}\n                />\n            </div>\n        );\n    }\n\n    private firstOnChange = (event: CustomEvent<string>) => {\n        this.firstValue = event.detail;\n    };\n\n    private secondOnChange = (event: CustomEvent<string>) => {\n        this.secondValue = event.detail;\n    };\n\n    private toggleMode = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.addDistance = event.detail;\n    };\n}\n"},{"filename":"input-field-text-multiple.scss","type":"scss","source":"section {\n    display: grid;\n}\n\n.add-distance {\n    section {\n        gap: 1rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples","filePath":"./src/components/input-field/examples/input-field-textarea.tsx","fileName":"input-field-textarea.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/examples/usage","tag":"limel-example-input-field-textarea","overview":"Input Field of Type Textarea","usage":{},"docs":"Input Field of Type Textarea","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-input-field-textarea":["limel-input-field","limel-example-controls","limel-checkbox","limel-example-value"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field-textarea.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field of Type Textarea\n */\n@Component({\n    tag: 'limel-example-input-field-textarea',\n    shadow: true,\n})\nexport class InputFieldTextareaExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value: string;\n\n    public render() {\n        const MAX_LENGTH = 500;\n\n        return [\n            <limel-input-field\n                label=\"Job description\"\n                type=\"textarea\"\n                placeholder=\"What is your dream job? Describe it here...\"\n                helperText=\"This text will be displayed in your profile\"\n                maxlength={MAX_LENGTH}\n                value={this.value}\n                required={this.required}\n                onChange={this.handleChange}\n                disabled={this.disabled}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox onChange={this.setDisabled} label=\"Disabled\" />\n                <limel-checkbox onChange={this.setReadonly} label=\"Readonly\" />\n                <limel-checkbox onChange={this.setRequired} label=\"Required\" />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples","filePath":"./src/components/linear-progress/examples/linear-progress.tsx","fileName":"linear-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/usage","tag":"limel-example-linear-progress","overview":"Basic example\nThe component accepts a value between `0` and `1` and visualizes it on a scale.\nIn this example, value `0` stands for `0%` and `1` is `100%`,\nand the `value` of the linear progress is controlled by an input field.","usage":{},"docs":"Basic example\nThe component accepts a value between `0` and `1` and visualizes it on a scale.\nIn this example, value `0` stands for `0%` and `1` is `100%`,\nand the `value` of the linear progress is controlled by an input field.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-linear-progress"],"dependencyGraph":{"limel-example-linear-progress":["limel-input-field","limel-linear-progress"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\nconst FRACTION = 100;\n\n/**\n * Basic example\n * The component accepts a value between `0` and `1` and visualizes it on a scale.\n * In this example, value `0` stands for `0%` and `1` is `100%`,\n * and the `value` of the linear progress is controlled by an input field.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-linear-progress',\n})\nexport class LinearProgressExample {\n    @State()\n    private value = 0.7;\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Value\"\n                type=\"number\"\n                min={0}\n                max={100}\n                suffix=\"%\"\n                value={(this.value * FRACTION).toFixed(0)}\n                onChange={this.handleChange}\n            />,\n            <p>\n                <limel-linear-progress value={this.value} />\n            </p>,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.value = +event.detail / FRACTION;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples","filePath":"./src/components/linear-progress/examples/linear-progress-accessible-label.tsx","fileName":"linear-progress-accessible-label.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/usage","tag":"limel-example-linear-progress-accessible-label","overview":"Using an accessible label\nThe component tells the assistive technologies that it is a \"Progress bar\".\nHowever, instead of relying on such a generic label,\nyou can provide a more specific label that describes what the progress bar is for,\nor what kind of progress it is visualizing.\n\nThis is achieved, using the `accessibleLabel` property.","usage":{},"docs":"Using an accessible label\nThe component tells the assistive technologies that it is a \"Progress bar\".\nHowever, instead of relying on such a generic label,\nyou can provide a more specific label that describes what the progress bar is for,\nor what kind of progress it is visualizing.\n\nThis is achieved, using the `accessibleLabel` property.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-linear-progress"],"dependencyGraph":{"limel-example-linear-progress-accessible-label":["limel-linear-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress-accessible-label.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Using an accessible label\n * The component tells the assistive technologies that it is a \"Progress bar\".\n * However, instead of relying on such a generic label,\n * you can provide a more specific label that describes what the progress bar is for,\n * or what kind of progress it is visualizing.\n *\n * This is achieved, using the `accessibleLabel` property.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-linear-progress-accessible-label',\n})\nexport class LinearProgressAccessibleLabelExample {\n    public render() {\n        return (\n            <limel-linear-progress\n                value={0.87}\n                accessibleLabel=\"Percentage of today's progress\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples","filePath":"./src/components/linear-progress/examples/linear-progress-color.tsx","fileName":"linear-progress-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/usage","tag":"limel-example-linear-progress-color","overview":"Setting the color","usage":{},"docs":"Setting the color","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-linear-progress","limel-select"],"dependencyGraph":{"limel-example-linear-progress-color":["limel-linear-progress","limel-select"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress-color.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Setting the color\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-linear-progress-color',\n})\nexport class LinearProgressExampleColor {\n    @State()\n    private color = { text: 'lime-blue', value: 'lime-blue' };\n\n    private value = 0.85;\n\n    private colors = [\n        { text: 'lime-red', value: 'lime-red' },\n        { text: 'lime-orange', value: 'lime-orange' },\n        { text: 'lime-yellow', value: 'lime-yellow' },\n        { text: 'lime-green', value: 'lime-green' },\n        { text: 'lime-blue', value: 'lime-blue' },\n        { text: 'lime-magenta', value: 'lime-magenta' },\n    ];\n\n    public render() {\n        return [\n            <p>\n                <limel-linear-progress\n                    value={this.value}\n                    style={{\n                        '--lime-primary-color': `var(--${this.color.value})`,\n                    }}\n                />\n            </p>,\n            <limel-select\n                label=\"Color\"\n                options={this.colors}\n                value={this.color}\n                onChange={this.handleChange}\n            />,\n        ];\n    }\n\n    private handleChange = (event) => {\n        this.color = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples","filePath":"./src/components/linear-progress/examples/linear-progress-indeterminate.tsx","fileName":"linear-progress-indeterminate.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/examples/usage","tag":"limel-example-linear-progress-indeterminate","overview":"Indeterminate progress\nThe component can be put in an indeterminate state,\nwhere the progress bar will animate without a specific value.\n\nThis is useful for instance when the progress is not known,\nbut the user should be aware that something is happening.","usage":{},"docs":"Indeterminate progress\nThe component can be put in an indeterminate state,\nwhere the progress bar will animate without a specific value.\n\nThis is useful for instance when the progress is not known,\nbut the user should be aware that something is happening.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-linear-progress"],"dependencyGraph":{"limel-example-linear-progress-indeterminate":["limel-linear-progress"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress-indeterminate.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Indeterminate progress\n * The component can be put in an indeterminate state,\n * where the progress bar will animate without a specific value.\n *\n * This is useful for instance when the progress is not known,\n * but the user should be aware that something is happening.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-linear-progress-indeterminate',\n})\nexport class LinearProgressExampleIndeterminate {\n    public render() {\n        return <limel-linear-progress indeterminate={true} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list.tsx","fileName":"list.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list","overview":"Basic list","usage":{},"docs":"Basic list","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list.tsx","type":"tsx","source":"import { ListItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * Basic list\n */\n@Component({\n    tag: 'limel-example-list',\n    shadow: true,\n})\nexport class ListExample {\n    private items: Array<ListItem<number> | ListSeparator> = [\n        { text: 'King of Tokyo', value: 1 },\n        { text: 'Smash Up!', value: 2 },\n        { text: 'Pandemic', value: 3 },\n        { text: 'Catan', value: 4 },\n        { text: 'Ticket to Ride', value: 5 },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-action.tsx","fileName":"list-action.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-action","overview":"List with action menu","usage":{},"docs":"List with action menu","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-action":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-action.tsx","type":"tsx","source":"import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with action menu\n */\n@Component({\n    tag: 'limel-example-list-action',\n    shadow: true,\n})\nexport class ListActionExample {\n    private actionItems: Array<ListItem<number>> = [\n        { text: 'Go to my fab object', value: 10 },\n        { text: 'Delete object', value: 11 },\n    ];\n\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            value: 1,\n            icon: 'gorilla',\n            actions: this.actionItems,\n        },\n        { text: 'Smash Up!', value: 2, icon: 'alien' },\n        { text: 'Pandemic', value: 3, icon: 'virus' },\n        { text: 'Catan', value: 4, icon: 'wheat' },\n        { text: 'Ticket to Ride', value: 5, icon: 'steam_engine' },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} onSelect={this.onSelectAction} />;\n    }\n\n    private onSelectAction(event: LimelListCustomEvent<ListItem>) {\n        console.log('Executing action:', event.detail);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-badge-icons.tsx","fileName":"list-badge-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-badge-icons","overview":"List with badge icons","usage":{},"docs":"List with badge icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-badge-icons":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-badge-icons.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with badge icons\n */\n@Component({\n    tag: 'limel-example-list-badge-icons',\n    shadow: true,\n    styleUrl: 'list-badge-icons.scss',\n})\nexport class BadgeIconsListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2-6 players',\n            value: 1,\n            icon: 'gorilla',\n        },\n        {\n            text: 'Smash Up!',\n            secondaryText: '2-4 players',\n            value: 2,\n            icon: {\n                name: 'alien',\n                color: 'rgb(var(--color-lime-light))',\n            },\n        },\n        {\n            text: 'Pandemic',\n            secondaryText: '2-4 players',\n            value: 3,\n            icon: {\n                name: 'virus',\n                color: 'rgb(var(--color-red-light))',\n            },\n        },\n        {\n            text: 'Catan',\n            secondaryText: '3-4 players',\n            value: 4,\n            icon: {\n                name: 'wheat',\n                color: 'rgb(var(--color-amber-default))',\n            },\n        },\n        {\n            text: 'Ticket to Ride',\n            secondaryText: '2-5 players',\n            value: 5,\n            icon: {\n                name: 'steam_engine',\n                color: 'rgb(var(--color-glaucous-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} badgeIcons={true} />;\n    }\n}\n"},{"filename":"list-badge-icons.scss","type":"scss","source":"limel-list {\n    // Default icon color for the list if not\n    // set by list items\n    --icon-background-color: rgb(var(--color-magenta-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-badge-icons-with-multiple-lines.tsx","fileName":"list-badge-icons-with-multiple-lines.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-badge-icons-with-multiple-lines","overview":"Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","usage":{},"docs":"Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-badge-icons-with-multiple-lines":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-badge-icons-with-multiple-lines.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * Multi-line versus single-line layout\n * By default, list items will always truncate the `text` line, which is displayed\n * either alone, or as a primary heading (when there are both `text` and `secondaryText`)\n * available. This means users will only see one line of text which is as wides as\n * the list item, and no more. Thus, it is a good idea not to add long strings of\n * text in the heading, as on mobile phones or small containers, they will be\n * chopped off and truncated.\n *\n * However, the `secondaryText` which appears as a sub-heading is not truncated\n * that quickly. By default, lists will display 3 lines of text, and then truncate\n * the rest. Nevertheless, you can increase or decrease this number by specifying\n * `maxLinesSecondaryText`.\n * :::note\n * Do not use `0`, negative numbers, decimal numbers, or very large numbers.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-badge-icons-with-multiple-lines',\n    shadow: true,\n})\nexport class BadgeIconsListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'This item only has one line of primary text, and no secondary text',\n            value: 1,\n            icon: 'text_width',\n        },\n        {\n            text: 'Very long primary texts like this one will truncate and you cannot do anything about it. Just avoid having long primary texts.',\n            secondaryText: 'This is a short secondary text.',\n            value: 2,\n            icon: 'text_width',\n        },\n        {\n            text: 'This item only has one line of primary text',\n            value: 3,\n            secondaryText:\n                'The lengt of secondary text does not exceed maximum allowed number of lines (of course depending on the width of your screen), thus the lines will not truncate.',\n            icon: 'text_width',\n        },\n        {\n            text: 'This is a short primary text',\n            secondaryText:\n                'Very long secondary texts like this one will not truncate on the first line. By default, the list will render 3 lines of text and then truncates the rest. If you need more lines of text to be shown, you can simply define it in your code, and add a maximum number there. For more information regarding this, please read the documentation.',\n            value: 4,\n            icon: 'text_width',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                items={this.items}\n                badgeIcons={true}\n                maxLinesSecondaryText={4}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-checkbox.tsx","fileName":"list-checkbox.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-checkbox","overview":"List with checkboxes","usage":{},"docs":"List with checkboxes","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-checkbox":["limel-list","limel-example-value"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-checkbox.tsx","type":"tsx","source":"import {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with checkboxes\n */\n@Component({\n    tag: 'limel-example-list-checkbox',\n    shadow: true,\n})\nexport class ListCheckboxExample {\n    @State()\n    private items: Array<ListItem | ListSeparator> = [\n        { text: 'Pikachu', value: 1, selected: true },\n        { text: 'Charmander', value: 2, selected: false, disabled: true },\n        { text: 'Super Mario', value: 3, selected: false },\n        { separator: true },\n        { text: 'Yoshi', value: 4, selected: false, disabled: true },\n        { text: 'Minion', value: 6, selected: true },\n        { text: 'Pokéball', value: 5, selected: false },\n    ];\n\n    @State()\n    private selectedItems: Array<ListItem | ListSeparator> = [];\n\n    constructor() {\n        this.selectedItems = this.items.filter((item: ListItem) => {\n            return !!item.selected;\n        });\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"checkbox\"\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem[]>) => {\n        this.selectedItems = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            const selected = event.detail.some((selectedItem: ListItem) => {\n                return selectedItem.value === item.value;\n            });\n\n            return { ...item, selected: selected };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-checkbox-icons.tsx","fileName":"list-checkbox-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-checkbox-icons","overview":"List with checkboxes and icons","usage":{},"docs":"List with checkboxes and icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-checkbox-icons":["limel-list","limel-example-value"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-checkbox-icons.tsx","type":"tsx","source":"import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with checkboxes and icons\n */\n@Component({\n    tag: 'limel-example-list-checkbox-icons',\n    shadow: true,\n})\nexport class ListCheckboxIconsExample {\n    @State()\n    private items: ListItem[] = [\n        {\n            text: 'Pikachu',\n            value: 1,\n            selected: true,\n            icon: {\n                name: 'pokemon',\n                color: 'var(--lime-yellow)',\n            },\n        },\n        {\n            text: 'Charmander',\n            value: 2,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'fire_element',\n                color: 'var(--lime-red)',\n            },\n        },\n        {\n            text: 'Super Mario',\n            value: 3,\n            selected: false,\n            icon: {\n                name: 'super_mario',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Yoshi',\n            value: 4,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'easter_egg',\n                color: 'var(--lime-green)',\n            },\n        },\n        {\n            text: 'Minion',\n            value: 6,\n            selected: true,\n            icon: {\n                name: 'minion_1',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Pokéball',\n            value: 5,\n            selected: false,\n            icon: {\n                name: 'pokeball',\n                color: 'var(--lime-magenta)',\n            },\n        },\n    ];\n\n    @State()\n    private selectedItems: ListItem[] = [];\n\n    constructor() {\n        this.selectedItems = this.items.filter((item) => {\n            return !!item.selected;\n        });\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"checkbox\"\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem[]>) => {\n        this.selectedItems = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            const selected = event.detail.some((selectedItem: ListItem) => {\n                return selectedItem.value === item.value;\n            });\n\n            return { ...item, selected: selected };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/list-form.tsx","fileName":"list-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-list-form","overview":"List data","usage":{},"docs":"List data","docsTags":[{"name":"sourceFile","text":"list-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-list-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ListFormData, schema } from './list-schema';\n\n/**\n * List data\n *\n * @sourceFile list-schema.ts\n */\n@Component({\n    tag: 'limel-example-list-form',\n    shadow: true,\n})\nexport class ListFormExample {\n    @State()\n    private formData: ListFormData = {\n        villains: ['Joker', 'Thanos', 'Green Goblin'],\n        squad: [\n            {\n                powers: ['flight'],\n                name: 'Doctor Strange',\n            },\n        ],\n    };\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"list-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\ntype HeroPower = 'strength' | 'speed' | 'invisibility' | 'vision' | 'flight';\n\ninterface Hero {\n    name?: string;\n    powers?: HeroPower[];\n}\nexport interface ListFormData {\n    villains?: string[];\n    squad?: Hero[];\n}\n\nexport const schema: FormSchema<ListFormData> = {\n    type: 'object',\n    properties: {\n        villains: {\n            type: 'array',\n            title: 'Villains',\n            description: 'Enter the evil villains to capture',\n            items: {\n                type: 'string',\n                title: 'Name',\n                description: 'Enter the name of an evil villain',\n                default: 'The Penguin',\n            },\n        },\n        squad: {\n            type: 'array',\n            title: 'Hero squad',\n            description: 'Enter the team of heroes to capture them',\n            items: {\n                type: 'object',\n                title: 'Hero data',\n                description: 'Name and powers of super heroes',\n                properties: {\n                    name: {\n                        type: 'string',\n                        title: 'Name',\n                        description: 'Super hero name',\n                    },\n                    powers: {\n                        type: 'array',\n                        title: 'Powers',\n                        description: 'Available, powers',\n                        uniqueItems: true,\n                        items: {\n                            anyOf: [\n                                {\n                                    type: 'string',\n                                    const: 'strength',\n                                    title: 'Super human strength',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'speed',\n                                    title: 'Lightning fast',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'invisibility',\n                                    title: 'Invisibility',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'vision',\n                                    title: 'X-Ray vision',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'flight',\n                                    title: 'Flight',\n                                },\n                            ],\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-grid.tsx","fileName":"list-grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-grid","overview":"List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","usage":{},"docs":"List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-grid":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-grid.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with grid layout\n * To display list items in a grid layout instead of a vertical column,\n * simply add `has-grid-layout` class to\n * the component.\n *\n * This layout can be customized, using a few CSS variables.\n * :::warning\n * - This layout should not be used with lists that have checkboxes or radio buttons.\n * - Also, it is recommended to avoid using secondary text with this layout.\n */\n@Component({\n    tag: 'limel-example-list-grid',\n    shadow: true,\n})\nexport class ListGridExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            value: 1,\n            icon: 'gorilla',\n        },\n        {\n            text: 'Smash Up!',\n            value: 2,\n            icon: {\n                name: 'alien',\n                color: 'rgb(var(--color-lime-light))',\n            },\n        },\n        {\n            text: 'Pandemic',\n            value: 3,\n            icon: {\n                name: 'virus',\n                color: 'rgb(var(--color-red-light))',\n            },\n        },\n        {\n            text: 'Catan',\n            value: 4,\n            icon: {\n                name: 'wheat',\n                color: 'rgb(var(--color-amber-default))',\n            },\n        },\n        {\n            text: 'Ticket to Ride',\n            value: 5,\n            icon: {\n                name: 'steam_engine',\n                color: 'rgb(var(--color-glaucous-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                items={this.items}\n                badgeIcons={true}\n                class=\"has-grid-layout has-interactive-items\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-icons.tsx","fileName":"list-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-icons","overview":"List with icons","usage":{},"docs":"List with icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-icons":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-icons.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with icons\n */\n@Component({\n    tag: 'limel-example-list-icons',\n    shadow: true,\n})\nexport class IconsListExample {\n    private items: Array<ListItem<number>> = [\n        { text: 'King of Tokyo', value: 1, icon: 'gorilla' },\n        { text: 'Smash Up!', value: 2, icon: 'alien' },\n        { text: 'Pandemic', value: 3, icon: 'virus' },\n        { text: 'Catan', value: 4, icon: 'wheat' },\n        { text: 'Ticket to Ride', value: 5, icon: 'steam_engine' },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-pictures.tsx","fileName":"list-pictures.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-pictures","overview":"List with Pictures and Icons\n\n:::note\nWhile it's technically possible to display both images and icons simultaneously\nfor each list item, we recommend against using identical icons across all items.\nRepeating the same icon for every list item adds unnecessary visual clutter\nwithout providing additional value.\n\nIcons, like images, should serve to help users quickly differentiate between\nlist items. They are most effective when each icon uniquely identifies\nthe type or category of its list item.\n:::","usage":{},"docs":"List with Pictures and Icons\n\n:::note\nWhile it's technically possible to display both images and icons simultaneously\nfor each list item, we recommend against using identical icons across all items.\nRepeating the same icon for every list item adds unnecessary visual clutter\nwithout providing additional value.\n\nIcons, like images, should serve to help users quickly differentiate between\nlist items. They are most effective when each icon uniquely identifies\nthe type or category of its list item.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-list-pictures":["limel-list","limel-example-controls","limel-checkbox"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-pictures.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with Pictures and Icons\n *\n * :::note\n * While it's technically possible to display both images and icons simultaneously\n * for each list item, we recommend against using identical icons across all items.\n * Repeating the same icon for every list item adds unnecessary visual clutter\n * without providing additional value.\n *\n * Icons, like images, should serve to help users quickly differentiate between\n * list items. They are most effective when each icon uniquely identifies\n * the type or category of its list item.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-pictures',\n    shadow: true,\n})\nexport class PictureListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Lucy Chyzhova',\n            secondaryText: 'UX Designer',\n            value: 1,\n            icon: {\n                name: 'santas_hat',\n                color: 'rgb(var(--color-coral-default))',\n            },\n            image: {\n                src: 'https://lundalogik.github.io/lime-elements/780af2a6-d3d1-4593-8642-f03210d09271.png',\n                alt: 'A picture of Lucy Chyzhova, UX designer at Lime Technologies',\n            },\n        },\n        {\n            text: 'Kiarokh Moattar',\n            secondaryText: 'Product Designer',\n            value: 2,\n            icon: {\n                name: 'party_hat',\n                color: 'rgb(var(--color-pink-default))',\n            },\n            image: {\n                src: 'https://lundalogik.github.io/lime-elements/2e86c284-d190-4c41-8da2-4de50103a0cd.png',\n                alt: 'A picture of Kiarokh Moattar, Product Designer at Lime Technologies',\n            },\n        },\n        {\n            text: 'Adrian Schmidt',\n            secondaryText: 'Engineer',\n            value: 3,\n            icon: 'viking_helmet',\n            image: {\n                src: 'https://lundalogik.github.io/lime-elements/0e6f74c0-11d9-465b-aac6-44f33da3cb7c.png',\n                alt: 'A picture of Adrian Schmidt, Head of Smooth Operations at Lime Technologies',\n            },\n        },\n        {\n            text: 'Befkadu Degefa',\n            secondaryText: 'Engineer',\n            value: 4,\n            icon: {\n                name: 'bowler_hat',\n                color: 'rgb(var(--color-sky-default))',\n            },\n        },\n    ];\n\n    @State()\n    private badgeIcons: boolean = false;\n\n    @State()\n    private hasStripedRows: boolean = true;\n\n    public render() {\n        return [\n            <limel-list\n                items={this.items}\n                type=\"selectable\"\n                badgeIcons={this.badgeIcons}\n                class={this.hasStripedRows ? 'has-striped-rows' : ''}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.badgeIcons}\n                    label=\"badge icons\"\n                    onChange={this.setBadgeIcons}\n                />\n                <limel-checkbox\n                    checked={this.hasStripedRows}\n                    label=\"striped rows\"\n                    onChange={this.setHasStripedRows}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setBadgeIcons = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.badgeIcons = event.detail;\n    };\n\n    private setHasStripedRows = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.hasStripedRows = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-primary-component.tsx","fileName":"list-primary-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-primary-component","overview":"List with a primary component","usage":{},"docs":"List with a primary component","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-primary-component":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-primary-component.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with a primary component\n */\n@Component({\n    tag: 'limel-example-list-primary-component',\n    shadow: true,\n})\nexport class ListCircularProgressExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2 players',\n            value: 1,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 5,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n        {\n            text: 'Smash Up!',\n            secondaryText: '2-5 players',\n            value: 2,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 1,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n        {\n            text: 'Pandemic',\n            secondaryText: '2-4 players',\n            value: 3,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 8,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n        {\n            text: 'Ticket to Ride',\n            secondaryText: '1-3 players',\n            value: 5,\n            primaryComponent: {\n                name: 'limel-circular-progress',\n                props: {\n                    value: 3,\n                    maxValue: 10,\n                    suffix: '%',\n                    displayPercentageColors: true,\n                },\n            },\n        },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} class=\"has-striped-rows\" />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-radio-button.tsx","fileName":"list-radio-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-radio-button","overview":"List with radio buttons","usage":{},"docs":"List with radio buttons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-radio-button":["limel-list","limel-example-value"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-radio-button.tsx","type":"tsx","source":"import {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with radio buttons\n */\n@Component({\n    tag: 'limel-example-list-radio-button',\n    shadow: true,\n})\nexport class ListRadioButtonExample {\n    @State()\n    private items: Array<ListItem | ListSeparator> = [\n        { text: 'Pikachu', value: 1, selected: false },\n        { text: 'Charmander', value: 2, selected: false, disabled: true },\n        { text: 'Super Mario', value: 3, selected: false },\n        { separator: true },\n        { text: 'Yoshi', value: 4, selected: false, disabled: true },\n        { text: 'Minion', value: 6, selected: true },\n        { text: 'Pokéball', value: 5, selected: false },\n    ];\n\n    @State()\n    private selectedItem: ListItem | ListSeparator;\n\n    constructor() {\n        this.selectedItem = this.items.find((item: ListItem) => {\n            return !!item.selected;\n        });\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"radio\"\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        this.selectedItem = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-radio-button-icons.tsx","fileName":"list-radio-button-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-radio-button-icons","overview":"List with radio buttons and icons","usage":{},"docs":"List with radio buttons and icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list","limel-example-value"],"dependencyGraph":{"limel-example-list-radio-button-icons":["limel-list","limel-example-value"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-radio-button-icons.tsx","type":"tsx","source":"import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with radio buttons and icons\n */\n@Component({\n    tag: 'limel-example-list-radio-button-icons',\n    shadow: true,\n})\nexport class ListRadioButtonIconsExample {\n    @State()\n    private items: ListItem[] = [\n        {\n            text: 'Pikachu',\n            value: 1,\n            selected: false,\n            icon: {\n                name: 'pokemon',\n                color: 'var(--lime-yellow)',\n            },\n        },\n        {\n            text: 'Charmander',\n            value: 2,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'fire_element',\n                color: 'var(--lime-red)',\n            },\n        },\n        {\n            text: 'Super Mario',\n            value: 3,\n            selected: false,\n            icon: {\n                name: 'super_mario',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Yoshi',\n            value: 4,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'easter_egg',\n                color: 'var(--lime-green)',\n            },\n        },\n        {\n            text: 'Minion',\n            value: 6,\n            selected: true,\n            icon: {\n                name: 'minion_1',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Pokéball',\n            value: 5,\n            selected: false,\n            icon: {\n                name: 'pokeball',\n                color: 'var(--lime-magenta)',\n            },\n        },\n    ];\n\n    @State()\n    private selectedItem: ListItem;\n\n    constructor() {\n        this.selectedItem = this.items.find((item) => {\n            return !!item.selected;\n        });\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"radio\"\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        this.selectedItem = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-secondary.tsx","fileName":"list-secondary.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-secondary","overview":"List with secondary text","usage":{},"docs":"List with secondary text","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-secondary":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-secondary.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with secondary text\n */\n@Component({\n    tag: 'limel-example-list-secondary',\n    shadow: true,\n})\nexport class SecondaryTextListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2-6 players',\n            value: 1,\n            disabled: true,\n        },\n        { text: 'Smash Up!', secondaryText: '2-4 players', value: 2 },\n        { text: 'Pandemic', secondaryText: '2-4 players', value: 3 },\n        { text: 'Memory', value: 3 },\n        { text: 'Catan', secondaryText: '3-4 players', value: 4 },\n        { text: 'Ticket to Ride', secondaryText: '2-5 players', value: 5 },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-selectable.tsx","fileName":"list-selectable.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-selectable","overview":"List with selectable items","usage":{},"docs":"List with selectable items","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-selectable":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-selectable.tsx","type":"tsx","source":"import {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with selectable items\n */\n@Component({\n    tag: 'limel-example-list-selectable',\n    shadow: true,\n})\nexport class SelectableListExample {\n    @State()\n    private items: Array<ListItem<number> | ListSeparator> = [\n        { text: 'King of Tokyo', value: 1 },\n        { text: 'Smash Up!', value: 2 },\n        { text: 'Pandemic', value: 3, selected: true },\n        { separator: true },\n        { text: 'Catan', value: 4 },\n        { text: 'Ticket to Ride', value: 5 },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                onChange={this.handleChange}\n                type=\"selectable\"\n                items={this.items}\n            />\n        );\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-separator.tsx","fileName":"list-separator.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-separator","overview":"List with separators\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists.\n\n- **Grouping and Hierarchy:**\nSeparators can be used to group related items, signaling to users that\nthose items share a common attribute or purpose.\nThis grouping effect aids in creating a hierarchical structure within the list,\nmaking it simpler for users to grasp relationships and make informed decisions.\n- **Visual Scannability:**\nWhen users quickly scan a list, their eyes naturally use the separator lines\nas visual anchors, making it easier to find items and remember their whereabouts\nnext time they revisit the same list.\n- **Reduced Cognitive Effort:**\nSeparators contribute to a user's overall comprehension and experience\nby reducing the cognitive effort required to process the information.\n\nYou can optionally add a short title to the separators,\nto clarify further what each group of items is about,\nand by doing so improve the users perception and experience.","usage":{},"docs":"List with separators\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists.\n\n- **Grouping and Hierarchy:**\nSeparators can be used to group related items, signaling to users that\nthose items share a common attribute or purpose.\nThis grouping effect aids in creating a hierarchical structure within the list,\nmaking it simpler for users to grasp relationships and make informed decisions.\n- **Visual Scannability:**\nWhen users quickly scan a list, their eyes naturally use the separator lines\nas visual anchors, making it easier to find items and remember their whereabouts\nnext time they revisit the same list.\n- **Reduced Cognitive Effort:**\nSeparators contribute to a user's overall comprehension and experience\nby reducing the cognitive effort required to process the information.\n\nYou can optionally add a short title to the separators,\nto clarify further what each group of items is about,\nand by doing so improve the users perception and experience.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-separator":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-separator.tsx","type":"tsx","source":"import { ListItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with separators\n *\n * Separators are simple yet powerful design elements that can be\n * employed in lists of items. They offer significant usability advantages\n * by providing valuable visual cues that aid users in perceiving\n * and navigating through lists.\n *\n * - **Grouping and Hierarchy:**\n * Separators can be used to group related items, signaling to users that\n * those items share a common attribute or purpose.\n * This grouping effect aids in creating a hierarchical structure within the list,\n * making it simpler for users to grasp relationships and make informed decisions.\n * - **Visual Scannability:**\n * When users quickly scan a list, their eyes naturally use the separator lines\n * as visual anchors, making it easier to find items and remember their whereabouts\n * next time they revisit the same list.\n * - **Reduced Cognitive Effort:**\n * Separators contribute to a user's overall comprehension and experience\n * by reducing the cognitive effort required to process the information.\n *\n * You can optionally add a short title to the separators,\n * to clarify further what each group of items is about,\n * and by doing so improve the users perception and experience.\n */\n@Component({\n    tag: 'limel-example-list-separator',\n    shadow: true,\n})\nexport class ListSeparatorExample {\n    private items: Array<ListItem<number> | ListSeparator> = [\n        { separator: true, text: 'Unread emails' },\n        {\n            text: 'Kerry Anderson',\n            secondaryText: 'Picture from last Saturday',\n            value: 1,\n        },\n        {\n            text: 'Regis, Peter, and Rachel',\n            secondaryText: 'Board game night?',\n            value: 2,\n        },\n        {\n            text: 'Aruna Knight',\n            secondaryText: 'The book you recommended',\n            value: 3,\n        },\n        { separator: true, text: 'Everything else' },\n        {\n            text: 'Ara Azadi',\n            secondaryText: 'Oops… Need to reschedule',\n            value: 4,\n        },\n        {\n            text: 'Anissa Lee',\n            secondaryText: 'Furniture we no longer need',\n            value: 5,\n        },\n        {\n            text: 'Gustaf Lundberg',\n            secondaryText: 'Re: Job Interview',\n            value: 6,\n        },\n        {\n            text: 'Separator without a title',\n            secondaryText: 'Next item is a separator without a title',\n            value: 7,\n        },\n        { separator: true },\n        {\n            text: 'Separator should not be last',\n            secondaryText: 'Never put a separator as the last list item',\n            value: 7,\n        },\n    ];\n\n    public render() {\n        return <limel-list items={this.items} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples","filePath":"./src/components/list/examples/list-striped.tsx","fileName":"list-striped.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/examples/usage","tag":"limel-example-list-striped","overview":"List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","usage":{},"docs":"List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-list"],"dependencyGraph":{"limel-example-list-striped":["limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list-striped.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * List with custom styles\n *\n * Adding the `has-striped-rows` class to the list will make the items more\n * distinct by adding different background colors to even and odd rows.\n *\n * Also, by taking advantage of the `has-interactive-items`, hovering on a list\n * item which is not `disabled` will display an elevated visual effect, giving\n * it more affordance and a solid feeling of interactivity.\n *\n * | Class name              | Description                                                                                     |\n * | ----------------------- | ----------------------------------------------------------------------------------------------- |\n * | `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n * | `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n *\n * :::note\n * to get both effects, you need to apply both of these classes.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-striped',\n    shadow: true,\n})\nexport class StripedListExample {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'King of Tokyo',\n            secondaryText: '2-6 players',\n            value: 1,\n            disabled: true,\n        },\n        { text: 'Smash Up!', secondaryText: '2-4 players', value: 2 },\n        { text: 'Pandemic', secondaryText: '2-4 players', value: 3 },\n        { text: 'Catan', secondaryText: '3-4 players', value: 4 },\n        { text: 'Ticket to Ride', secondaryText: '2-5 players', value: 5 },\n    ];\n\n    public render() {\n        return (\n            <limel-list\n                items={this.items}\n                class=\"has-striped-rows has-interactive-items\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-blockquotes.tsx","fileName":"markdown-blockquotes.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-blockquotes","overview":"Blockquotes","usage":{},"docs":"Blockquotes","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-blockquotes":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-blockquotes.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n\nNested blockquotes\n> This is a blockquote.\n> > This is a nested blockquote.\n> > > This is a nested blockquote, in a nested blockquote.\n`;\n\n/**\n * Blockquotes\n */\n@Component({\n    tag: 'limel-example-markdown-blockquotes',\n    shadow: true,\n})\nexport class MarkdownBlockquotesExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-code.tsx","fileName":"markdown-code.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-code","overview":"Code","usage":{},"docs":"Code","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-code":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-code.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\n~~~\nconst s = \"JavaScript no syntax highlighting\";\nalert(s);\n~~~\n\n~~~javascript\nconst a = \"JavaScript no syntax highlighting\";\nalert(a);\n~~~\n\nEven if the language is indicated, we can only render\nthe <code>code</code> blocks without syntax highlighting.\n`;\n\n/**\n * Code\n */\n@Component({\n    tag: 'limel-example-markdown-code',\n    shadow: true,\n})\nexport class MarkdownCodeExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-composite.tsx","fileName":"markdown-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-composite","overview":"Composite example\nTest your markdown code and see what you get in return in real-time.","usage":{},"docs":"Composite example\nTest your markdown code and see what you get in return in real-time.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-input-field","limel-markdown"],"dependencyGraph":{"limel-example-markdown-composite":["limel-input-field","limel-markdown"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-composite.tsx","type":"tsx","source":"import { LimelInputFieldCustomEvent } from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\n\n/**\n * Composite example\n * Test your markdown code and see what you get in return in real-time.\n */\n@Component({\n    tag: 'limel-example-markdown-composite',\n    styleUrl: 'markdown-composite.scss',\n    shadow: true,\n})\nexport class MarkdownRenderContentExample {\n    @State()\n    private markdown = '# Hello, world!\\n\\nThis is **markdown**!';\n\n    public render() {\n        return [\n            <limel-input-field\n                label=\"Markdown to render\"\n                type=\"textarea\"\n                value={this.markdown}\n                onChange={this.handleMarkdownChange}\n            />,\n            <fieldset>\n                <legend>Rendered markdown</legend>\n                <limel-markdown value={this.markdown} />\n            </fieldset>,\n        ];\n    }\n\n    private handleMarkdownChange = (\n        event: LimelInputFieldCustomEvent<string>\n    ) => {\n        this.markdown = event.detail;\n    };\n}\n"},{"filename":"markdown-composite.scss","type":"scss","source":":host(limel-example-markdown-composite) {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    * {\n        min-width: 0;\n    }\n\n    limel-input-field {\n        height: 10rem;\n    }\n\n    fieldset {\n        padding-block: 1rem;\n        padding-inline: 1rem;\n        margin-inline: 0;\n        border: 0.125rem dashed rgb(var(--contrast-700));\n\n        legend {\n            color: rgb(var(--contrast-1000));\n            text-align: center;\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-custom-component.tsx","fileName":"markdown-custom-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-custom-component","overview":"Custom Element\n\nYou can allow custom elements by adding them to a whitelist. You need to specify both\nthe `tagName` of the element as well as the allowed `attributes`.","usage":{},"docs":"Custom Element\n\nYou can allow custom elements by adding them to a whitelist. You need to specify both\nthe `tagName` of the element as well as the allowed `attributes`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-custom-component":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-custom-component.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown =\n    'This is 20% <meter value=\"0.2\"></meter> and this is 100% <meter value=\"1\" />';\n\n/**\n * Custom Element\n *\n * You can allow custom elements by adding them to a whitelist. You need to specify both\n * the `tagName` of the element as well as the allowed `attributes`.\n */\n@Component({\n    tag: 'limel-example-markdown-custom-component',\n    shadow: true,\n})\nexport class MarkdownCustomComponentExample {\n    public render() {\n        return (\n            <limel-markdown\n                value={markdown}\n                whitelist={[\n                    {\n                        tagName: 'meter',\n                        attributes: ['value'],\n                    },\n                ]}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-emphasis.tsx","fileName":"markdown-emphasis.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-emphasis","overview":"Emphasis","usage":{},"docs":"Emphasis","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-emphasis":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-emphasis.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n`;\n\n/**\n * Emphasis\n */\n@Component({\n    tag: 'limel-example-markdown-emphasis',\n    shadow: true,\n})\nexport class MarkdownEmphasisExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-footnotes.tsx","fileName":"markdown-footnotes.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-footnotes","overview":"Footnote","usage":{},"docs":"Footnote","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-footnotes":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-footnotes.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\nHere is a simple footnote[^1].\n\nA footnote can also have multiple lines[^2].\n\nYou can also use words, to fit your writing style more closely[^note].\n\n[^1]: My reference.\n[^2]: Every new line should be prefixed with 2 spaces.\n  This allows you to have a footnote with multiple lines.\n[^note]:\n    Named footnotes will still render with numbers instead of the text but allow easier identification and linking.\n    This footnote also has been made with a different syntax using 4 spaces for new lines.\n`;\n\n/**\n * Footnote\n */\n@Component({\n    tag: 'limel-example-markdown-footnotes',\n    shadow: true,\n})\nexport class MarkdownFootnotesExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-headings.tsx","fileName":"markdown-headings.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-headings","overview":"Headings","usage":{},"docs":"Headings","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-headings":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-headings.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\n# Headline 1\n## Headline 2\n### Headline 3\n#### Headline 4\n##### Headline 5\n###### Headline 6\n\nAlternatively, H1 and H2 can be typed underline-ish style like this:\n\nAlternative H1\n===\n\nAlternative H2\n---\n`;\n\n/**\n * Headings\n */\n@Component({\n    tag: 'limel-example-markdown-headings',\n    shadow: true,\n})\nexport class MarkdownHeadingsExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-horizontal-rule.tsx","fileName":"markdown-horizontal-rule.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-horizontal-rule","overview":"Horizontal Rule","usage":{},"docs":"Horizontal Rule","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-horizontal-rule":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-horizontal-rule.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\nThree or more of…\n\n---\n\nHyphens,\n\n***\n\nAsterisks,\n\n___\n\nOr Underscores\n`;\n\n/**\n * Horizontal Rule\n */\n@Component({\n    tag: 'limel-example-markdown-horizontal-rule',\n    shadow: true,\n})\nexport class MarkdownHorizontalRuleExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-html.tsx","fileName":"markdown-html.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-html","overview":"HTML","usage":{},"docs":"HTML","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-html":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-html.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { allowedCssProperties } from '../allowed-css-properties';\n\nconst markdown = `\n<dl>\n  <dt>A Definition list</dt>\n  <dd>is something people sometimes use.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>does *not* work **very** well.</dd>\n\n  <dt>What to do?</dt>\n  <dd>It's better to use HTML <em>tags</em>.</dd>\n\n  <dt>Can you use text colors?</dt>\n  <dd style=\"color: red\">Yes, since I'm red!</dd>\n\n  <dt>Can you use background colors?</dt>\n  <dd style=\"background-color: rgb(var(--color-green-default))\">Yes, since I'm on a green background!</dd>\n\n  <dt>Can you use more than one style at the same time?</dt>\n  <dd style=\"color: rgb(var(--color-sky-lighter)); background-color: rgb(var(--color-coral-dark)); font-weight: bold;\">Yes, since I'm a light sky blue on a dark coral background!</dd>\n\n  <dt>Can you use background images?</dt>\n  <dd style=\"background-image: url(https://lundalogik.github.io/lime-icons8/assets/icons/poison.svg)\">No, you should not be able to, so if there's a skull and crossbones background here, something is wrong.</dd>\n\n  <dt>Can you use <code>background</code> with a color value?</dt>\n  <dd style=\"background: #4ca250\">Yes. If the value is recognized as a color value, the value will be moved to <code>background-color</code></dd>\n\n  <dt>Can you sneakily use <code>background</code> to insert an image?</dt>\n  <dd style=\"background: #4ca250 url(https://lundalogik.github.io/lime-icons8/assets/icons/poison.svg)\">No. If the value is not recognized as a color value, the background property will be stripped.</dd>\n</dl>\n`;\n\n/**\n * HTML\n */\n@Component({\n    tag: 'limel-example-markdown-html',\n    shadow: true,\n})\nexport class MarkdownHtmlExample {\n    public render() {\n        return (\n            <div>\n                <limel-markdown value={markdown} />\n                <br />\n                Allowed CSS properties:\n                <ul>\n                    {allowedCssProperties.map((property) => {\n                        return <li>{property}</li>;\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-images.tsx","fileName":"markdown-images.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-images","overview":"Images","usage":{},"docs":"Images","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-images":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-images.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://lundalogik.github.io/lime-elements/versions/latest/favicon.svg \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://lundalogik.github.io/lime-elements/versions/latest/favicon.svg \"Logo Title Text 2\"\n`;\n\n/**\n * Images\n */\n@Component({\n    tag: 'limel-example-markdown-images',\n    shadow: true,\n})\nexport class MarkdownImageExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-keys.tsx","fileName":"markdown-keys.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-keys","overview":"Keys","usage":{},"docs":"Keys","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-keys":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-keys.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\nTo render physical keyboard keys within your text, you can use the \\`<kbd>\\` HTML element. This represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device.\n\nFor example: <kbd>⌘ cmd</kbd> + <kbd>⌥ alt</kbd> + <kbd>R</kbd>\n`;\n\n/**\n * Keys\n */\n@Component({\n    tag: 'limel-example-markdown-keys',\n    shadow: true,\n})\nexport class MarkdownFootnotesExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-links.tsx","fileName":"markdown-links.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-links","overview":"Links\nThere are two ways to create links.","usage":{},"docs":"Links\nThere are two ways to create links.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-links":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-links.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\nURLs and URLs in angle brackets will automatically get turned into links, like\nhttp://www.example.com or <http://www.example.com>.\n\n***\n\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nBelow, you find some text that the reference links can follow, but they will not be rendered in the body.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://wikipedia.org\n[link text itself]: http://www.wikipedia.org\n`;\n\n/**\n * Links\n * There are two ways to create links.\n */\n@Component({\n    tag: 'limel-example-markdown-links',\n    shadow: true,\n})\nexport class MarkdownLinksExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-lists.tsx","fileName":"markdown-lists.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-lists","overview":"Lists","usage":{},"docs":"Lists","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-lists":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-lists.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\n1. First ordered list item\n2. Another item\n    * Unordered sub-list\n1. Actual numbers don't matter, just that it's a number\n    1. Ordered sub-list\n4. And another item.\n\n    You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n    To have a line break without a paragraph, you will need to use two trailing spaces.\n    Note that this line is separate, but within the same paragraph.\n    (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n`;\n\n/**\n * Lists\n */\n@Component({\n    tag: 'limel-example-markdown-lists',\n    shadow: true,\n})\nexport class MarkdownListExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples","filePath":"./src/components/markdown/examples/markdown-tables.tsx","fileName":"markdown-tables.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/examples/usage","tag":"limel-example-markdown-tables","overview":"Tables","usage":{},"docs":"Tables","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-example-markdown-tables":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown-tables.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst markdown = `\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | renders | **nicely**\n1 | 2 | 3\n`;\n\n/**\n * Tables\n */\n@Component({\n    tag: 'limel-example-markdown-tables',\n    shadow: true,\n})\nexport class MarkdownTablesExample {\n    public render() {\n        return <limel-markdown value={markdown} />;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-badge-icons.tsx","fileName":"menu-badge-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-badge-icons","overview":"With badge icons","usage":{},"docs":"With badge icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-badge-icons":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-badge-icons.tsx","type":"tsx","source":"import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With badge icons\n */\n@Component({\n    tag: 'limel-example-menu-badge-icons',\n    shadow: true,\n})\nexport class MenuBadgeIconsExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Copy',\n            icon: {\n                name: 'copy',\n                color: 'rgb(var(--color-lime-light))',\n            },\n        },\n        {\n            text: 'Cut',\n            icon: {\n                name: 'cut',\n                color: 'rgb(var(--color-red-light))',\n            },\n        },\n        { separator: true },\n        {\n            text: 'Paste',\n            icon: {\n                name: 'paste',\n                color: 'rgb(var(--color-amber-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items} badgeIcons={true}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-basic.tsx","fileName":"menu-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-basic","overview":"Basic example\n\nWith a simple `onSelect` handler.","usage":{},"docs":"Basic example\n\nWith a simple `onSelect` handler.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-basic":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-basic.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n *\n * With a simple `onSelect` handler.\n */\n@Component({\n    tag: 'limel-example-menu-basic',\n    shadow: true,\n})\nexport class MenuBasicExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy' },\n        { text: 'Cut' },\n        { separator: true },\n        { text: 'Paste' },\n    ];\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-composite.tsx","fileName":"menu-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-composite","overview":"Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value.","usage":{},"docs":"Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-controls","limel-form","limel-example-event-printer"],"dependencyGraph":{"limel-example-menu-composite":["limel-menu","limel-button","limel-example-controls","limel-form","limel-example-event-printer"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-composite.tsx","type":"tsx","source":"import { Components, FormSchema } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states. This example has a slightly\n * more advanced `onSelect` handler, which disables the last selected value.\n */\n@Component({\n    tag: 'limel-example-menu-composite',\n    shadow: true,\n})\nexport class MenuCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        badgeIcons: true,\n        disabled: false,\n        items: [\n            {\n                text: 'Copy',\n                icon: {\n                    name: 'copy',\n                    color: 'rgb(var(--color-lime-light))',\n                },\n            },\n            {\n                text: 'Cut',\n                icon: {\n                    name: 'cut',\n                    color: 'rgb(var(--color-red-light))',\n                },\n            },\n            { separator: true },\n            {\n                text: 'Paste',\n                disabled: true,\n                icon: {\n                    name: 'paste',\n                    color: 'rgb(var(--color-amber-default))',\n                },\n            },\n        ],\n        open: false,\n        openDirection: 'right',\n        gridLayout: false,\n    } as Components.LimelMenu;\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n\n        delete this.schema.properties.currentSubMenu;\n        delete this.schema.properties.searcher;\n        delete this.schema.properties.loadSubItems;\n        delete this.schema.properties.surfaceWidth;\n    }\n\n    public render() {\n        console.log('Composite example schema:', this.schema);\n\n        return [\n            <limel-menu\n                items={this.props.items}\n                disabled={this.props.disabled}\n                openDirection={this.props.openDirection}\n                badgeIcons={this.props.badgeIcons}\n                open={this.props.open}\n                gridLayout={this.props.gridLayout}\n                onSelect={this.handleSelect}\n                onCancel={this.handleCancel}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>,\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: CustomEvent) => {\n        this.eventPrinter.writeEvent(event);\n        this.props.items = this.props.items.map((item) => {\n            if (!('separator' in item)) {\n                item.disabled = item.text === event.detail.text;\n            }\n\n            return item;\n        });\n\n        this.props = { ...this.props };\n    };\n\n    private handleCancel = (event: Event) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private handleChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-disabled.tsx","fileName":"menu-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-disabled","overview":"Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","usage":{},"docs":"Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-disabled":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-disabled.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * Disabled\n *\n * Note that you don't need to disable the trigger button separately, as the\n * component takes care of this for you.\n */\n@Component({\n    tag: 'limel-example-menu-disabled',\n    shadow: true,\n})\nexport class MenuDisabledExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy' },\n        { text: 'Cut' },\n        { separator: true },\n        { text: 'Paste' },\n    ];\n\n    public render() {\n        return (\n            <limel-menu\n                items={this.items}\n                disabled={true}\n                onSelect={this.handleSelect}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        console.error(\n            'This should never happen, since the menu is disabled.',\n            event\n        );\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-grid.tsx","fileName":"menu-grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-grid","overview":"With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","usage":{},"docs":"With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-grid":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-grid.tsx","type":"tsx","source":"import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With grid layout\n * To render items of a menu in a grid layout instead of a vertical list,\n * simply setting the `gridLayout` property to `true`.\n *\n * :::note\n * Menus with the grid layout has a responsive width by default,\n * which will not grow wider than a certain size. However, if the default size is not\n * wide enough for your use case, you can try setting another responsive width, using\n * the `--menu-surface-width` variable.\n *\n * To achieve a responsive width, try using the `min()` function.\n * This function selects the smallest value from a list of comma-separated expressions\n * which are placed within the parentheses.\n *\n * For example, `--menu-surface-width: min(100vw, 40rem);` will output\n * `width: min(100wv, 40rem);` which will tell the browser to render the menu\n * content in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\n * is larger than `40rem`.\n * :::\n *\n *\n * To tweak the grid layout, a few other variables are available:\n * - `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n * - `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n * - `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.\n *\n */\n@Component({\n    tag: 'limel-example-menu-grid',\n    shadow: true,\n    styleUrl: 'menu-grid.scss',\n})\nexport class MenuGridExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Companies',\n            icon: {\n                name: 'organization',\n                color: 'rgb(var(--color-blue-default)',\n            },\n        },\n        {\n            text: 'Deals',\n            icon: {\n                name: 'money',\n                color: 'rgb(var(--color-green-default))',\n            },\n        },\n        {\n            text: 'Agreements',\n            icon: {\n                name: 'handshake',\n                color: 'rgb(var(--color-pink-default))',\n            },\n        },\n        {\n            text: 'Todos',\n            icon: {\n                name: 'today',\n                color: 'rgb(var(--color-teal-default))',\n            },\n        },\n        {\n            text: 'History',\n            icon: {\n                name: 'comments',\n                color: 'rgb(var(--color-grey-light))',\n            },\n        },\n        { separator: true },\n        {\n            text: 'Coworkers',\n            icon: {\n                name: 'gender_neutral_user',\n                color: 'rgb(var(--color-orange-light))',\n            },\n        },\n        {\n            text: 'Persons',\n            icon: {\n                name: 'user_group_man_man',\n                color: 'rgb(var(--color-yellow-dark)',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items} badgeIcons={true} gridLayout={true}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n}\n"},{"filename":"menu-grid.scss","type":"scss","source":":host {\n    --menu-surface-width: min(\n        calc(100vw - 4rem),\n        40rem\n    ); // The `min()` function selects the smallest value from a list of comma-separated expressions.\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-hotkeys.tsx","fileName":"menu-hotkeys.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-hotkeys","overview":"Menu with supporting hotkeys","usage":{},"docs":"Menu with supporting hotkeys","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-hotkeys":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-hotkeys.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Menu with supporting hotkeys\n *\n */\n@Component({\n    tag: 'limel-example-menu-hotkeys',\n    shadow: true,\n})\nexport class MenuHotkeysExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<ListSeparator | MenuItem> = [\n        { text: 'Copy', commandText: 'alt + C' },\n        { text: 'Cut', commandText: 'alt + X' },\n        { separator: true },\n        { text: 'Paste', commandText: 'alt + V' },\n    ];\n\n    public render() {\n        console.log(this.items);\n\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-icons.tsx","fileName":"menu-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-icons","overview":"With icons","usage":{},"docs":"With icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-icons":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-icons.tsx","type":"tsx","source":"import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With icons\n */\n@Component({\n    tag: 'limel-example-menu-icons',\n    shadow: true,\n})\nexport class MenuIconsExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy', icon: 'copy' },\n        { text: 'Cut', icon: 'cut' },\n        { separator: true },\n        { text: 'Paste', icon: 'paste' },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-notification.tsx","fileName":"menu-notification.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-notification","overview":"With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","usage":{},"docs":"With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-icon-button"],"dependencyGraph":{"limel-example-menu-notification":["limel-menu","limel-icon-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-icon-button":["limel-icon","limel-tooltip"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-notification.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n/**\n * With notification\n *\n * It is possible to display a notification badge on each individual\n * list item inside the menu's dropdown.\n *\n * These notification badges are supposed to inform the user that\n * there is something in the menu item that requires their attention.\n *\n * This is typically done by displaying a number, which summarizes\n * the quantity of the items that require user's attention.\n * However, if a number is not meaningful, it is possible to send an\n * empty string (`badge: ''`), which will display a circle on the\n * list item.\n *\n * Since list items in the menu are hidden away, users would not\n * realize that there is something inside the menu which requires their\n * attention. Which is why the trigger automatically displays a\n * notification badge on its top-right corner,\n * when the menu contains badges.\n *\n * By default, the badge is red and its text is white.\n * This is to attract users' attention. However, this is possible to override using\n * [provided style variables](/#/component/limel-menu/styles/).\n *\n * :::warning\n * - Do not negatively exploit this possibility and spam users' attention.\n * Crowding the UI with too much noise _will_ negatively affect the user experience.\n * - Notification badges *must* be cleared as soon as the list item is clicked by the user!\n * :::\n */\n@Component({\n    tag: 'limel-example-menu-notification',\n    shadow: true,\n})\nexport class MenuNotificationExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Profile', icon: 'cat_profile' },\n        { text: 'Settings', icon: 'horizontal_settings_mixer', badge: '' },\n        { text: 'Notifications', icon: 'bell', badge: 7 },\n        { separator: true },\n        { text: 'Log out' },\n    ];\n\n    public render() {\n        return (\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-icon-button\n                    slot=\"trigger\"\n                    icon=\"gender_neutral_user\"\n                    label=\"User Menu\"\n                    elevated={true}\n                />\n            </limel-menu>\n        );\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        console.log(event.detail.text);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-open-direction.tsx","fileName":"menu-open-direction.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-open-direction","overview":"openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","usage":{},"docs":"openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-select"],"dependencyGraph":{"limel-example-menu-open-direction":["limel-menu","limel-button","limel-select"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-open-direction.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    OpenDirection,\n    Option,\n    LimelSelectCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * openDirection\n *\n * The value of the `openDirection` property defines how the menu content\n * is aligned with its trigger element, and in which direction it opens.\n */\n@Component({\n    tag: 'limel-example-menu-open-direction',\n    shadow: true,\n    styleUrl: 'menu-open-direction.scss',\n})\nexport class MenuOpenDirectionExample {\n    @State()\n    private selectedOpenDirection: Option<OpenDirection>;\n\n    private availableOpenDirections: Array<Option<OpenDirection>>;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Copy' },\n        { text: 'Cut' },\n        { separator: true },\n        { text: 'Paste' },\n    ];\n\n    constructor() {\n        const openDirections: OpenDirection[] = [\n            'left-start',\n            'left',\n            'left-end',\n            'right-start',\n            'right',\n            'right-end',\n            'top-start',\n            'top',\n            'top-end',\n            'bottom-start',\n            'bottom',\n            'bottom-end',\n        ];\n        this.availableOpenDirections = openDirections.map((value) => {\n            return {\n                text: value as string,\n                value: value,\n            } as Option<OpenDirection>;\n        });\n        this.selectedOpenDirection = this.availableOpenDirections.find(\n            (v) => v.value === 'bottom-start'\n        );\n    }\n\n    public render() {\n        return [\n            <limel-menu\n                items={this.items}\n                openDirection={this.selectedOpenDirection?.value}\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-select\n                class=\"is-narrow\"\n                label=\"openDirection\"\n                options={this.availableOpenDirections}\n                value={this.selectedOpenDirection}\n                onChange={this.handleNewSelection}\n            />,\n        ];\n    }\n\n    private handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<OpenDirection>>\n    ) => {\n        this.selectedOpenDirection = event.detail;\n    };\n}\n"},{"filename":"menu-open-direction.scss","type":"scss","source":":host(limel-example-menu-open-direction) {\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\nlimel-select {\n    min-width: 8.75rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-open-sub-menu-programmatically.tsx","fileName":"menu-open-sub-menu-programmatically.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-open-sub-menu-programmatically","overview":"Opening sub-menus programmatically\n\n**This example is currently not in use because it's an experimental feature**\n\nIt is possible to open any sub-menu in the menu-hierarchy.\nThis is done by using the parentItem property of the MenuItem class.","usage":{},"docs":"Opening sub-menus programmatically\n\n**This example is currently not in use because it's an experimental feature**\n\nIt is possible to open any sub-menu in the menu-hierarchy.\nThis is done by using the parentItem property of the MenuItem class.","docsTags":[{"name":"sourceFile","text":"item-constants.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-value","limel-menu","limel-button"],"dependencyGraph":{"limel-example-menu-open-sub-menu-programmatically":["limel-example-value","limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-open-sub-menu-programmatically.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h, Host } from '@stencil/core';\nimport { CascadingMenuItems } from './item-constants';\n\n/**\n * Opening sub-menus programmatically\n *\n * **This example is currently not in use because it's an experimental feature**\n *\n * It is possible to open any sub-menu in the menu-hierarchy.\n * This is done by using the parentItem property of the MenuItem class.\n *\n * @sourceFile item-constants.ts\n */\n@Component({\n    tag: 'limel-example-menu-open-sub-menu-programmatically',\n    shadow: true,\n    styleUrl: 'menu-open-sub-menu-programmatically.scss',\n})\nexport class MenuOpenSubMenuProgrammaticallyExample {\n    private readonly rootItems: Array<MenuItem | ListSeparator> =\n        CascadingMenuItems;\n\n    @State()\n    private items: Array<MenuItem | ListSeparator> = this.rootItems;\n\n    @State()\n    private lastSelectedItem: string;\n\n    @State()\n    private currentSubMenu: MenuItem;\n\n    @State()\n    private openMenu: boolean = false;\n\n    public render() {\n        return (\n            <Host>\n                {this.renderMenu()}\n                <limel-example-value\n                    label=\"Last selected item\"\n                    value={this.lastSelectedItem}\n                />\n            </Host>\n        );\n    }\n\n    private renderMenu() {\n        return (\n            <div class=\"menu-container\">\n                <limel-menu\n                    items={this.items}\n                    open={this.openMenu}\n                    currentSubMenu={this.currentSubMenu}\n                    onSelect={this.handleSelect}\n                    onNavigateMenu={this.handleNavigateMenu}\n                    onCancel={this.handleMenuCancel}\n                >\n                    <limel-button label=\"Menu\" slot=\"trigger\" />\n                </limel-menu>\n                <limel-button\n                    label='Shortcut to \"Bullets and numbering\"'\n                    primary={true}\n                    onClick={this.buttonClick}\n                />\n            </div>\n        );\n    }\n\n    private handleNavigateMenu = (event: LimelMenuCustomEvent<MenuItem>) => {\n        if (!event.detail) {\n            this.items = this.rootItems;\n        }\n    };\n\n    private handleMenuCancel = () => {\n        this.items = this.rootItems;\n        this.openMenu = false;\n    };\n\n    private buttonClick = () => {\n        const formatMenuItem = this.rootItems.find(\n            (i) => i.text === 'Format'\n        ) as MenuItem;\n\n        const menuToOpen = (\n            formatMenuItem.items as Array<MenuItem | ListSeparator>\n        ).find((i) => i.text === 'Bullets and numbering') as MenuItem;\n\n        this.currentSubMenu = {\n            ...menuToOpen,\n            parentItem: formatMenuItem,\n        };\n        this.items = menuToOpen.items as Array<MenuItem | ListSeparator>;\n        this.openMenu = true;\n    };\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.currentSubMenu = null;\n        this.items = this.rootItems;\n        this.lastSelectedItem = event.detail.text;\n        this.openMenu = false;\n    };\n}\n"},{"filename":"menu-open-sub-menu-programmatically.scss","type":"scss","source":":host(limel-example-menu-open-sub-menu-programmatically) {\n    display: flex;\n    flex-direction: column;\n}\n\n.menu-container {\n    display: flex;\n    gap: 2rem;\n}\n"},{"filename":"item-constants.ts","type":"ts","source":"import { MenuItem } from '../menu.types';\n\nexport const CascadingMenuItems: MenuItem[] = [\n    {\n        text: 'Format',\n        items: [\n            {\n                text: 'Bold',\n                icon: 'bold',\n            },\n            {\n                text: 'Italic',\n                icon: 'italic',\n            },\n            {\n                text: 'Bullets and numbering',\n                icon: 'bulleted_list',\n                items: [\n                    {\n                        text: 'Numbered list',\n                        icon: 'numbered_list',\n                    },\n                    {\n                        text: 'Bullet list',\n                        icon: 'bulleted_list',\n                    },\n                    {\n                        text: 'Checklist',\n                        icon: 'todo_list',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        text: 'Edit',\n        items: [\n            {\n                text: 'Copy',\n                icon: 'copy',\n            },\n            {\n                text: 'Cut',\n                icon: 'cut',\n            },\n            { separator: true },\n            {\n                text: 'Paste',\n                icon: 'paste',\n            },\n        ],\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-searchable.tsx","fileName":"menu-searchable.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-searchable","overview":"Searchable items","usage":{},"docs":"Searchable items","docsTags":[{"name":"sourceFile","text":"subitems-search.ts"},{"name":"sourceFile","text":"item-constants.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-searchable":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-searchable.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\nimport { SearchMenuItems } from './subitems-search';\nimport { CascadingMenuItems } from './item-constants';\n\n/**\n * Searchable items\n *\n * @sourceFile subitems-search.ts\n * @sourceFile item-constants.ts\n */\n@Component({\n    tag: 'limel-example-menu-searchable',\n    shadow: true,\n})\nexport class MenuSubItemsExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            separator: true,\n            text: 'Example items',\n        },\n        ...CascadingMenuItems,\n        {\n            text: 'Long sub list',\n            items: Array.from(Array.from({ length: 50 }), (_value, index) => {\n                return {\n                    text: `Item ${index + 1}`,\n                };\n            }),\n        },\n    ];\n\n    @State()\n    private lastSelectedItem: MenuItem;\n\n    public render() {\n        return [\n            <limel-menu\n                items={this.items}\n                searcher={this.handleSearch}\n                onSelect={this.handleSelect}\n                emptyResultMessage=\"No items found\"\n            >\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem?.text ?? ''}\n            />,\n        ];\n    }\n\n    private handleSearch = async (queryString: string) => {\n        return SearchMenuItems(queryString, this.items);\n    };\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail;\n    };\n}\n"},{"filename":"subitems-search.ts","type":"ts","source":"import { MenuItem, ListSeparator } from '@limetech/lime-elements';\n\n/**\n *\n * @param searchValue\n * @param menuItems\n */\nexport function SearchMenuItems(\n    searchValue: string,\n    menuItems: Array<MenuItem | ListSeparator>\n): MenuItem[] {\n    if (!searchValue) {\n        return [];\n    }\n\n    searchValue = searchValue?.toLowerCase();\n    const flattenedItems = flattenMenuItems(menuItems);\n\n    return flattenedItems.filter(\n        (i) =>\n            !('separator' in i) && i.text?.toLowerCase().includes(searchValue)\n    );\n}\n\nfunction flattenMenuItems(\n    menuItems: Array<MenuItem | ListSeparator>\n): MenuItem[] {\n    const flattenedItems: MenuItem[] = [];\n\n    function flatten(menuItem: MenuItem) {\n        flattenedItems.push(menuItem);\n\n        if (Array.isArray(menuItem.items)) {\n            for (const subItem of menuItem.items) {\n                if (!('separator' in subItem)) {\n                    flatten(subItem as MenuItem);\n                }\n            }\n        }\n    }\n\n    for (const menuItem of menuItems) {\n        if (!('separator' in menuItem)) {\n            flatten(menuItem as MenuItem);\n        }\n    }\n\n    return flattenedItems;\n}\n"},{"filename":"item-constants.ts","type":"ts","source":"import { MenuItem } from '../menu.types';\n\nexport const CascadingMenuItems: MenuItem[] = [\n    {\n        text: 'Format',\n        items: [\n            {\n                text: 'Bold',\n                icon: 'bold',\n            },\n            {\n                text: 'Italic',\n                icon: 'italic',\n            },\n            {\n                text: 'Bullets and numbering',\n                icon: 'bulleted_list',\n                items: [\n                    {\n                        text: 'Numbered list',\n                        icon: 'numbered_list',\n                    },\n                    {\n                        text: 'Bullet list',\n                        icon: 'bulleted_list',\n                    },\n                    {\n                        text: 'Checklist',\n                        icon: 'todo_list',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        text: 'Edit',\n        items: [\n            {\n                text: 'Copy',\n                icon: 'copy',\n            },\n            {\n                text: 'Cut',\n                icon: 'cut',\n            },\n            { separator: true },\n            {\n                text: 'Paste',\n                icon: 'paste',\n            },\n        ],\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-basic-secondary-text.tsx","fileName":"menu-basic-secondary-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-secondary-text","overview":"With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","usage":{},"docs":"With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-secondary-text":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-basic-secondary-text.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With `secondaryText`\n *\n * Menu items can display secondary text as well. By default, the secondary text\n * will be displayed in two lines, and then get truncated.\n *\n * :::important\n * Keep in mind that a menu's drop-down surface will stretch as much as its default\n * maximum width values allow. However, if this default maximum width does not suit\n * your use case, you can override it using the `--menu-surface-width` variable.\n *\n * But do not forget that menus should still behave responsively, thus assigning a fixed value\n * should be avoided. To make the width responsive, try using the `min()` function.\n * This function selects the smallest value from a list of comma-separated expressions\n * which are placed within the parentheses.\n *\n * For example, `--menu-surface-width: min(90vw, 40rem);` will output\n * `width: min(90wv, 40rem);` which will tell the browser to render the menu\n * content in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\n * up to a maximum of `40rem`.\n * :::\n */\n@Component({\n    tag: 'limel-example-menu-secondary-text',\n    shadow: true,\n    styleUrl: 'menu-basic-secondary-text.scss',\n})\nexport class MenuBasicExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'This item only has one line of primary text',\n        },\n        { separator: true },\n        {\n            text: 'Very long primary texts like this one can truncate based on what you specify for `--menu-surface-width`.',\n            secondaryText: 'This is a short secondary text.',\n        },\n        {\n            text: 'This item only has one line of primary text',\n            secondaryText:\n                'The length of secondary text exceeds maximum allowed number of lines, which is two. This happens because `--menu-surface-width` specified here is not so large. Thus the lines will truncate.',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"},{"filename":"menu-basic-secondary-text.scss","type":"scss","source":":host {\n    --menu-surface-width: min(\n        calc(100vw - 4rem),\n        20rem\n    ); // The `min()` function selects the smallest value from a list of comma-separated expressions.\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-separators.tsx","fileName":"menu-separators.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-separators","overview":"Using separators with titles\n\nYou divide groups of items using separators.\nIt is also possible add a short title to the separators,\nto clarify further what each group of menu items is about,\nand by doing so improve the users perception and experience.","usage":{},"docs":"Using separators with titles\n\nYou divide groups of items using separators.\nIt is also possible add a short title to the separators,\nto clarify further what each group of menu items is about,\nand by doing so improve the users perception and experience.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-separators":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-separators.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Using separators with titles\n *\n * You divide groups of items using separators.\n * It is also possible add a short title to the separators,\n * to clarify further what each group of menu items is about,\n * and by doing so improve the users perception and experience.\n */\n@Component({\n    tag: 'limel-example-menu-separators',\n    shadow: true,\n})\nexport class MenuSeparatorExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private items: Array<MenuItem | ListSeparator> = [\n        { text: 'Home' },\n        { text: 'Back' },\n        { text: 'Forward' },\n        { separator: true, text: 'Recently closed' },\n        { text: 'Lime CRM' },\n        { text: 'Lime Go' },\n        { separator: true, text: 'Recently visited' },\n        { text: 'Lime Elements' },\n        { text: 'Github' },\n        { text: 'DuckDuckGo' },\n        { separator: true },\n        { text: 'Show full history' },\n    ];\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Browsing History\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-sub-menu-lazy-loading.tsx","fileName":"menu-sub-menu-lazy-loading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-sub-menu-lazy-loading","overview":"Lazy loading items in sub-menus","usage":{},"docs":"Lazy loading items in sub-menus","docsTags":[{"name":"sourceFile","text":"menu-sub-menu-lazy-loading-service-mock.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-sub-menu-lazy-loading":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-sub-menu-lazy-loading.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\nimport { LazyLoader } from './menu-sub-menu-lazy-loading-service-mock';\n\n/**\n * Lazy loading items in sub-menus\n *\n * @sourceFile menu-sub-menu-lazy-loading-service-mock.ts\n */\n@Component({\n    tag: 'limel-example-menu-sub-menu-lazy-loading',\n    shadow: true,\n})\nexport class MenuSubMenuLazyLoadingExample {\n    @State()\n    private lastSelectedItem: string;\n\n    private lazyLoader: LazyLoader;\n\n    private items: Array<MenuItem | ListSeparator>;\n\n    constructor() {\n        this.lazyLoader = new LazyLoader();\n        this.items = [\n            {\n                text: 'Format',\n                items: this.lazyLoader.loadItems,\n                value: 'format_menu',\n            },\n            {\n                text: 'Edit',\n                items: this.lazyLoader.loadItems,\n                value: 'edit_menu',\n            },\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"},{"filename":"menu-sub-menu-lazy-loading-service-mock.ts","type":"ts","source":"import { ListSeparator } from '../../list/list-item.types';\nimport { MenuItem } from '../menu.types';\nimport { fakeServer } from './menu-sub-menu-lazy-loading-service-mock-server';\n\n/**\n * This example service can be copied and used in your package or solution.\n */\nexport class LazyLoader {\n    private cache: Record<string, Array<MenuItem | ListSeparator>> = {};\n\n    public loadItems = async (\n        subMenu: MenuItem\n    ): Promise<Array<MenuItem | ListSeparator>> => {\n        // First check if the items are already in the cache.\n        const cachedItems = this.getFromCache(subMenu);\n\n        if (cachedItems) {\n            return cachedItems;\n        }\n\n        // If not cached, load them from the server.\n        //\n        // ::: note\n        // If you copy this service, you should replace this with\n        // something that actually loads the items from the server.\n        // :::\n        const items = await fakeServer.loadItems(subMenu);\n\n        // If any of the items have their own sub-menu, and those items\n        // are not loaded yet, we add a function for loading them.\n        for (const item of items) {\n            if ('items' in item && item.items === null) {\n                item.items = this.loadItems;\n            }\n        }\n\n        // Remember to cache the items, so we don't have to load them again later.\n        this.setToCache(subMenu, items);\n\n        return items;\n    };\n\n    private getFromCache(subMenu: MenuItem): Array<MenuItem | ListSeparator> {\n        return this.cache[subMenu.value];\n    }\n\n    private setToCache(\n        parentItem: MenuItem,\n        items: Array<MenuItem | ListSeparator>\n    ): void {\n        this.cache[parentItem.value] = items;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-sub-menu-lazy-loading-infinite.tsx","fileName":"menu-sub-menu-lazy-loading-infinite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-sub-menu-lazy-loading-infinite","overview":"Lazy loading infinite amount of sub-menu\n\n:::note\nThis example is here to show what the component looks like when you have a\nlot of nested sub-menus, and what the breadcrumb component looks like when\nyou are deep into the menu.\n\nIf you are looking for code examples, please see the\n_Lazy loading items in sub-menus_ example instead.\n:::","usage":{},"docs":"Lazy loading infinite amount of sub-menu\n\n:::note\nThis example is here to show what the component looks like when you have a\nlot of nested sub-menus, and what the breadcrumb component looks like when\nyou are deep into the menu.\n\nIf you are looking for code examples, please see the\n_Lazy loading items in sub-menus_ example instead.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-sub-menu-lazy-loading-infinite":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-sub-menu-lazy-loading-infinite.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\n\nconst NETWORK_DELAY = 1000;\n\n/**\n * Lazy loading infinite amount of sub-menu\n *\n * :::note\n * This example is here to show what the component looks like when you have a\n * lot of nested sub-menus, and what the breadcrumb component looks like when\n * you are deep into the menu.\n *\n * If you are looking for code examples, please see the\n * _Lazy loading items in sub-menus_ example instead.\n * :::\n */\n@Component({\n    tag: 'limel-example-menu-sub-menu-lazy-loading-infinite',\n    shadow: true,\n})\nexport class MenuSubMenuLazyLoadingInfiniteExample {\n    private items: Array<MenuItem | ListSeparator> = [];\n\n    @State()\n    private lastSelectedItem: string;\n\n    public componentWillLoad() {\n        this.items = [\n            {\n                text: 'Item 1',\n                items: this.handleLoadSubItems,\n            },\n            {\n                text: 'Item 2',\n                items: this.handleLoadSubItems,\n            },\n            {\n                text: 'Item 3',\n                items: this.handleLoadSubItems,\n            },\n            {\n                text: 'Item 4',\n                items: this.handleLoadSubItems,\n            },\n            {\n                text: 'Item 5',\n                items: this.handleLoadSubItems,\n            },\n        ];\n    }\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleLoadSubItems = async (\n        item: MenuItem\n    ): Promise<MenuItem[]> => {\n        return new Promise<MenuItem[]>((resolve) => {\n            // Simulate some network delay\n            setTimeout(() => {\n                const subItems = [];\n                for (let i = 1; i < 6; i++) {\n                    subItems.push({\n                        text: `${item.text}.${i}`,\n                        items: this.handleLoadSubItems,\n                    });\n                }\n\n                resolve(subItems);\n            }, NETWORK_DELAY);\n        });\n    };\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-sub-menu.tsx","fileName":"menu-sub-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-sub-menus","overview":"Sub-menus\nTo have an enhanced navigation and provide a better organization of items,\nyou can incorporate sub-menus within the menu structure;\nand create a so called \"Cascading menu\".\nThese sub-menus provide the user with an efficient way to access a\nwide range of choices without overwhelming them with clutter or complexity.\n\nThe main menu, often called the parent menu,\ntypically consists of top-level options that represent primary categories or options.\nSub-menus, on the other hand, are secondary or menus that are nested\nbeneath these primary options.\n\nSome of the benefits of creating tree-structure for the menus are:\n- **Organized Information:** Sub-menus enable a clear and organized presentation of content,\nmaking it easier for the user to find what they're looking for within a specific category.\n- **Space Efficiency:** They save screen space by concealing secondary options until needed,\nreducing visual clutter and making the interface cleaner and more user-friendly.\n- **Scalability:** Sub-menus can accommodate a large number of choices or features\nwithin a single parent menu, making them suitable for complex applications or websites.\n- **Logical Hierarchy:** By structuring information hierarchically,\nsub-menus help the user understand the relationships between various\noptions and navigate through the interface more intuitively.\n\nOur cascading menus are designed to be mobile-friendly.\nThis means that sub-menus are opened within the same menu surface,\ninstead of the classic way of sticking out on the side, as a secondary menu.\nThanks to a breadcrumbs component on the top, the user can easily navigate back\nand forth within the menu structure.\n\n:::tip\nIt is also very easy to navigate the nested menu structure using the keyboard.\n\n- Using the <kbd>↓</kbd> & <kbd>↑</kbd> keys, the user can naturally\nnavigate within the presented menu,\n- pressing the <kbd>→</kbd> key on a menu item that has sub-menu opens a nested menu,\n- and pressing the <kbd>←</kbd> key takes the user back to the previous/parent menu.\n:::","usage":{},"docs":"Sub-menus\nTo have an enhanced navigation and provide a better organization of items,\nyou can incorporate sub-menus within the menu structure;\nand create a so called \"Cascading menu\".\nThese sub-menus provide the user with an efficient way to access a\nwide range of choices without overwhelming them with clutter or complexity.\n\nThe main menu, often called the parent menu,\ntypically consists of top-level options that represent primary categories or options.\nSub-menus, on the other hand, are secondary or menus that are nested\nbeneath these primary options.\n\nSome of the benefits of creating tree-structure for the menus are:\n- **Organized Information:** Sub-menus enable a clear and organized presentation of content,\nmaking it easier for the user to find what they're looking for within a specific category.\n- **Space Efficiency:** They save screen space by concealing secondary options until needed,\nreducing visual clutter and making the interface cleaner and more user-friendly.\n- **Scalability:** Sub-menus can accommodate a large number of choices or features\nwithin a single parent menu, making them suitable for complex applications or websites.\n- **Logical Hierarchy:** By structuring information hierarchically,\nsub-menus help the user understand the relationships between various\noptions and navigate through the interface more intuitively.\n\nOur cascading menus are designed to be mobile-friendly.\nThis means that sub-menus are opened within the same menu surface,\ninstead of the classic way of sticking out on the side, as a secondary menu.\nThanks to a breadcrumbs component on the top, the user can easily navigate back\nand forth within the menu structure.\n\n:::tip\nIt is also very easy to navigate the nested menu structure using the keyboard.\n\n- Using the <kbd>↓</kbd> & <kbd>↑</kbd> keys, the user can naturally\nnavigate within the presented menu,\n- pressing the <kbd>→</kbd> key on a menu item that has sub-menu opens a nested menu,\n- and pressing the <kbd>←</kbd> key takes the user back to the previous/parent menu.\n:::","docsTags":[{"name":"sourceFile","text":"item-constants.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-menu-sub-menus":["limel-menu","limel-button","limel-example-value"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-sub-menu.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\nimport { CascadingMenuItems } from './item-constants';\n\n/**\n * Sub-menus\n * To have an enhanced navigation and provide a better organization of items,\n * you can incorporate sub-menus within the menu structure;\n * and create a so called \"Cascading menu\".\n * These sub-menus provide the user with an efficient way to access a\n * wide range of choices without overwhelming them with clutter or complexity.\n *\n * The main menu, often called the parent menu,\n * typically consists of top-level options that represent primary categories or options.\n * Sub-menus, on the other hand, are secondary or menus that are nested\n * beneath these primary options.\n *\n * Some of the benefits of creating tree-structure for the menus are:\n * - **Organized Information:** Sub-menus enable a clear and organized presentation of content,\n * making it easier for the user to find what they're looking for within a specific category.\n * - **Space Efficiency:** They save screen space by concealing secondary options until needed,\n * reducing visual clutter and making the interface cleaner and more user-friendly.\n * - **Scalability:** Sub-menus can accommodate a large number of choices or features\n * within a single parent menu, making them suitable for complex applications or websites.\n * - **Logical Hierarchy:** By structuring information hierarchically,\n * sub-menus help the user understand the relationships between various\n * options and navigate through the interface more intuitively.\n *\n * Our cascading menus are designed to be mobile-friendly.\n * This means that sub-menus are opened within the same menu surface,\n * instead of the classic way of sticking out on the side, as a secondary menu.\n * Thanks to a breadcrumbs component on the top, the user can easily navigate back\n * and forth within the menu structure.\n *\n * :::tip\n * It is also very easy to navigate the nested menu structure using the keyboard.\n *\n * - Using the <kbd>↓</kbd> & <kbd>↑</kbd> keys, the user can naturally\n * navigate within the presented menu,\n * - pressing the <kbd>→</kbd> key on a menu item that has sub-menu opens a nested menu,\n * - and pressing the <kbd>←</kbd> key takes the user back to the previous/parent menu.\n * :::\n *\n * @sourceFile item-constants.ts\n */\n@Component({\n    tag: 'limel-example-menu-sub-menus',\n    shadow: true,\n})\nexport class MenuSubMenusExample {\n    private items: Array<MenuItem | ListSeparator> = CascadingMenuItems;\n\n    @State()\n    private lastSelectedItem: string;\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"},{"filename":"item-constants.ts","type":"ts","source":"import { MenuItem } from '../menu.types';\n\nexport const CascadingMenuItems: MenuItem[] = [\n    {\n        text: 'Format',\n        items: [\n            {\n                text: 'Bold',\n                icon: 'bold',\n            },\n            {\n                text: 'Italic',\n                icon: 'italic',\n            },\n            {\n                text: 'Bullets and numbering',\n                icon: 'bulleted_list',\n                items: [\n                    {\n                        text: 'Numbered list',\n                        icon: 'numbered_list',\n                    },\n                    {\n                        text: 'Bullet list',\n                        icon: 'bulleted_list',\n                    },\n                    {\n                        text: 'Checklist',\n                        icon: 'todo_list',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        text: 'Edit',\n        items: [\n            {\n                text: 'Copy',\n                icon: 'copy',\n            },\n            {\n                text: 'Cut',\n                icon: 'cut',\n            },\n            { separator: true },\n            {\n                text: 'Paste',\n                icon: 'paste',\n            },\n        ],\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples","filePath":"./src/components/menu/examples/menu-surface-width.tsx","fileName":"menu-surface-width.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/examples/usage","tag":"limel-example-menu-surface-width","overview":"Size of the menu drop-down surface\n\nAny element in the UI can be configured to open a menu.\nBy default, the dropdown that opens up after the menu trigger is clicked\ninherits its width from the items that are inside the dropdown menu.\n\nHowever, for some designs, you may want the width of the menu dropdown\nto be exactly as wide as the width of its trigger element, or\nas wide as `limel-menu` element itself. This is easily achieved using the\n`surfaceWidth` prop. Read more on `SurfaceWidth`.\n\n:::tip\nIn this example, `limel-menu` is highlighted with a dashed border,\nto make it easier to see its width.\n:::\n:::note\nThe `--menu-surface-width` Overrides the width defined by `surfaceWidth`!\n:::","usage":{},"docs":"Size of the menu drop-down surface\n\nAny element in the UI can be configured to open a menu.\nBy default, the dropdown that opens up after the menu trigger is clicked\ninherits its width from the items that are inside the dropdown menu.\n\nHowever, for some designs, you may want the width of the menu dropdown\nto be exactly as wide as the width of its trigger element, or\nas wide as `limel-menu` element itself. This is easily achieved using the\n`surfaceWidth` prop. Read more on `SurfaceWidth`.\n\n:::tip\nIn this example, `limel-menu` is highlighted with a dashed border,\nto make it easier to see its width.\n:::\n:::note\nThe `--menu-surface-width` Overrides the width defined by `surfaceWidth`!\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-menu","limel-button","limel-select"],"dependencyGraph":{"limel-example-menu-surface-width":["limel-menu","limel-button","limel-select"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-surface-width.tsx","type":"tsx","source":"import {\n    MenuItem,\n    ListSeparator,\n    SurfaceWidth,\n    Option,\n    LimelSelectCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\n\ninterface SurfaceWidthOption extends Option<SurfaceWidth> {\n    buttonLabel: string;\n}\n\n/**\n * Size of the menu drop-down surface\n *\n * Any element in the UI can be configured to open a menu.\n * By default, the dropdown that opens up after the menu trigger is clicked\n * inherits its width from the items that are inside the dropdown menu.\n *\n * However, for some designs, you may want the width of the menu dropdown\n * to be exactly as wide as the width of its trigger element, or\n * as wide as `limel-menu` element itself. This is easily achieved using the\n * `surfaceWidth` prop. Read more on `SurfaceWidth`.\n *\n * :::tip\n * In this example, `limel-menu` is highlighted with a dashed border,\n * to make it easier to see its width.\n * :::\n * :::note\n * The `--menu-surface-width` Overrides the width defined by `surfaceWidth`!\n * :::\n */\n@Component({\n    tag: 'limel-example-menu-surface-width',\n    styleUrl: 'menu-surface-width.scss',\n    shadow: true,\n})\nexport class MenuSurfaceWidthExample {\n    private items: Array<MenuItem | ListSeparator> = [\n        {\n            text: 'Small text',\n        },\n        {\n            text: 'Very very wide text',\n        },\n    ];\n\n    private availableSurfaceWidths: SurfaceWidthOption[] = [];\n\n    @State()\n    private selectedSurfaceWidth: SurfaceWidthOption;\n\n    constructor() {\n        this.availableSurfaceWidths = [\n            {\n                text: 'inherit-from-items',\n                value: 'inherit-from-items',\n                buttonLabel: 'Width based on menu items (default)',\n            },\n            {\n                text: 'inherit-from-menu',\n                value: 'inherit-from-menu',\n                buttonLabel: 'Width based on limel-menu',\n            },\n            {\n                text: 'inherit-from-trigger',\n                value: 'inherit-from-trigger',\n                buttonLabel: 'Width based on trigger element',\n            },\n        ] as SurfaceWidthOption[];\n\n        this.selectedSurfaceWidth = this.availableSurfaceWidths.find(\n            (v) => v.value === 'inherit-from-items'\n        );\n    }\n\n    public render() {\n        return [\n            <div class=\"is-resizable\">\n                <limel-menu\n                    class=\"highlight-limel-menu\"\n                    items={this.items}\n                    surfaceWidth={this.selectedSurfaceWidth?.value}\n                >\n                    <limel-button\n                        slot=\"trigger\"\n                        label={this.selectedSurfaceWidth?.buttonLabel}\n                    />\n                </limel-menu>\n            </div>,\n            <limel-select\n                class=\"is-narrow\"\n                label=\"surfaceWidth\"\n                options={this.availableSurfaceWidths}\n                value={this.selectedSurfaceWidth}\n                onChange={this.handleNewSelection}\n            />,\n        ];\n    }\n\n    private handleNewSelection = (\n        event: LimelSelectCustomEvent<SurfaceWidthOption>\n    ) => {\n        this.selectedSurfaceWidth = event.detail;\n    };\n}\n"},{"filename":"menu-surface-width.scss","type":"scss","source":":host(limel-example-menu-surface-width) {\n    box-sizing: border-box;\n    display: flex;\n    justify-content: space-between;\n    gap: 1rem;\n}\n\n.is-resizable {\n    position: relative;\n    resize: horizontal;\n    overflow: auto;\n    width: clamp(10rem, 30rem, 100%);\n\n    padding: 0.5rem 0.5rem 3rem 0.5rem;\n    border: 1px solid rgb(var(--contrast-500));\n\n    &::after {\n        content: 'Resize me ⤵';\n        font-size: 0.75rem;\n        position: absolute;\n        right: 0.25rem;\n        bottom: 0.25rem;\n    }\n}\n\nlimel-menu {\n    width: 100%;\n}\n\n.highlight-limel-menu {\n    box-sizing: border-box;\n    border: 1px dashed rgb(var(--color-orange-light));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/nested-form.tsx","fileName":"nested-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-nested-form","overview":"Nested data","usage":{},"docs":"Nested data","docsTags":[{"name":"sourceFile","text":"nested-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-nested-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"nested-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { NestedFormData, schema } from './nested-schema';\n\n/**\n * Nested data\n *\n * @sourceFile nested-schema.ts\n */\n@Component({\n    tag: 'limel-example-nested-form',\n    shadow: true,\n})\nexport class NestedFormExample {\n    @State()\n    private formData: NestedFormData = {};\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"nested-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\nexport interface NestedFormData {\n    name?: string;\n    age?: number;\n    address?: {\n        city?: string;\n        country?: string;\n    };\n    data?: {\n        eyeColor?: string;\n        shoeSize?: number;\n    };\n}\n\nexport const schema: FormSchema<NestedFormData> = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n        },\n        age: {\n            type: 'integer',\n            title: 'Age',\n        },\n        address: {\n            type: 'object',\n            title: 'Location',\n            description: 'Please enter your location',\n            properties: {\n                city: {\n                    type: 'string',\n                    title: 'City',\n                },\n                country: {\n                    type: 'string',\n                    title: 'Country',\n                    description: 'It might also be a planet',\n                },\n            },\n        },\n        data: {\n            type: 'object',\n            title: 'Data',\n            description: 'Some additional data we would like you to submit',\n            properties: {\n                eyeColor: {\n                    type: 'string',\n                    title: 'Eye color',\n                },\n                shoeSize: {\n                    type: 'integer',\n                    title: 'Shoe size',\n                },\n            },\n            lime: {\n                collapsible: true,\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/notched-outline/examples","filePath":"./src/components/notched-outline/examples/notched-outline-basic.tsx","fileName":"notched-outline-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/notched-outline/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/notched-outline/examples/usage","tag":"limel-example-notched-outline-basic","overview":"Basic example\n\nNotice that the wrapping div has a hardcoded height,\nwhich results in the notched outline to wrap around\nthe div.","usage":{},"docs":"Basic example\n\nNotice that the wrapping div has a hardcoded height,\nwhich results in the notched outline to wrap around\nthe div.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-notched-outline","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-notched-outline-basic":["limel-notched-outline","limel-example-controls","limel-checkbox","limel-example-value"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"notched-outline-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n *\n * Notice that the wrapping div has a hardcoded height,\n * which results in the notched outline to wrap around\n * the div.\n */\n@Component({\n    tag: 'limel-example-notched-outline-basic',\n    shadow: true,\n    styleUrl: 'notched-outline-basic.scss',\n})\nexport class NotchedOutlineBasicExample {\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private hasValue = false;\n\n    @State()\n    private hasLeadingIcon = false;\n\n    @State()\n    private hasFloatingLabel = false;\n\n    @State()\n    private inputValue: string;\n\n    public render() {\n        const id = 'abcd';\n\n        return [\n            <section>\n                <limel-notched-outline\n                    labelId={id}\n                    label=\"Label\"\n                    required={this.required}\n                    invalid={this.invalid}\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                    hasValue={this.hasValue}\n                    hasLeadingIcon={this.hasLeadingIcon}\n                    hasFloatingLabel={this.hasFloatingLabel}\n                >\n                    <input\n                        slot=\"content\"\n                        id={id}\n                        type=\"text\"\n                        required={this.required}\n                        disabled={this.disabled}\n                        readonly={this.readonly}\n                        value={this.inputValue}\n                        onInput={this.handleInput}\n                    />\n                </limel-notched-outline>\n            </section>,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <hr\n                    style={{\n                        gridColumn: '1/-1',\n                    }}\n                />\n                <limel-checkbox\n                    checked={this.hasValue}\n                    label=\"Has value\"\n                    onChange={this.setHasValue}\n                />\n                <limel-checkbox\n                    checked={this.hasLeadingIcon}\n                    label=\"Has leading icon\"\n                    onChange={this.setHasLeadingIcon}\n                />\n                <limel-checkbox\n                    checked={this.hasFloatingLabel}\n                    label=\"Has floating label\"\n                    onChange={this.setHasFloatingLabel}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.hasValue} />,\n        ];\n    }\n\n    private handleInput = (event: Event) => {\n        const input = event.target as HTMLInputElement;\n        this.inputValue = input.value;\n        this.hasValue = !!input.value;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private setHasValue = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.hasValue = event.detail;\n    };\n\n    private setHasLeadingIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.hasLeadingIcon = event.detail;\n    };\n\n    private setHasFloatingLabel = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.hasFloatingLabel = event.detail;\n    };\n}\n"},{"filename":"notched-outline-basic.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n}\n\nsection {\n    padding: 1rem;\n    background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n    background-size: 0.5rem;\n}\n\ninput[type='text'] {\n    // Overriding some of the native input styles for the\n    // sake of this example.\n    border: none;\n    outline: none;\n\n    height: 2.5rem;\n    width: 100%;\n    padding: 0 1rem;\n\n    background-color: transparent;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples","filePath":"./src/components/help/examples/help-open-direction.tsx","fileName":"help-open-direction.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/usage","tag":"limel-example-open-direction","overview":"Help with custom open direction","usage":{},"docs":"Help with custom open direction","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-help"],"dependencyGraph":{"limel-example-open-direction":["limel-help"],"limel-help":["limel-popover","limel-help-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-help-content":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"help-open-direction.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Help with custom open direction\n */\n@Component({\n    tag: 'limel-example-open-direction',\n    shadow: true,\n})\nexport class HelpOpenDirectionExample {\n    public render() {\n        return (\n            <limel-help\n                openDirection=\"right\"\n                value=\"This popover is opened on the right side of the trigger.\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-basic.tsx","fileName":"picker-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-basic","overview":"Single value can be picked.\n\nSince all items are already loaded from the server, we can use the\n`allItems` property to provide the picker with all the items at once.\nThe picker uses a default search function that filters the items based on\nthe `text` and `secondaryText` properties of the items.\n\n:::note\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.\n:::","usage":{},"docs":"Single value can be picked.\n\nSince all items are already loaded from the server, we can use the\n`allItems` property to provide the picker with all the items at once.\nThe picker uses a default search function that filters the items based on\nthe `text` and `secondaryText` properties of the items.\n\n:::note\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-basic":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-basic.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Single value can be picked.\n *\n * Since all items are already loaded from the server, we can use the\n * `allItems` property to provide the picker with all the items at once.\n * The picker uses a default search function that filters the items based on\n * the `text` and `secondaryText` properties of the items.\n *\n * :::note\n * For performance reasons, the default searcher will never return more\n * than 20 items, but if there are more than 20 items, the rest can be\n * found by typing more characters in the search field.\n * :::\n */\n@Component({\n    tag: 'limel-example-picker-basic',\n    shadow: true,\n})\nexport class PickerBasicExample {\n    @State()\n    private selectedItem: ListItem<number>;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItem}\n                allItems={this.allItems}\n                emptyResultMessage=\"No matching awesomenauts found\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private onChange = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        this.selectedItem = event.detail;\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-composite.tsx","fileName":"picker-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-event-printer","limel-example-controls","limel-form"],"dependencyGraph":{"limel-example-picker-composite":["limel-picker","limel-example-event-printer","limel-example-controls","limel-form"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[{"name":"schema","type":"FormSchema","mutable":true,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-composite.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\nimport { FormSchema, ListItem } from '@limetech/lime-elements';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-picker-composite',\n    shadow: true,\n})\nexport class PickerCompositeExample {\n    @Prop({ mutable: true })\n    public schema: FormSchema;\n\n    @State()\n    private props: {\n        value: ListItem<number | string> | Array<ListItem<number | string>>;\n        [key: string]: any;\n    } = {\n        label: 'My label',\n        searchLabel: 'My search label',\n        helperText: 'My helper text',\n        leadingIcon: 'search',\n        emptyResultMessage: 'No matches found',\n        delimiter: '',\n        value: [],\n        required: false,\n        disabled: false,\n        readonly: false,\n        loading: false,\n        multiple: true,\n        badgeIcons: true,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    private availableItems: Array<ListItem<number>> = [...this.allItems];\n\n    public componentWillLoad() {\n        const schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n        delete schema.properties.actionPosition;\n        delete schema.properties.actionScrollBehavior;\n        delete schema.properties.actions;\n        delete schema.properties.allItems;\n        delete schema.properties.searcher;\n        this.schema = schema;\n    }\n\n    public render() {\n        return [\n            <limel-picker\n                {...this.props}\n                allItems={this.availableItems}\n                onChange={this.handleChange}\n                onInteract={this.handleEvent}\n            />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleChange = (\n        event: CustomEvent<\n            ListItem<number | string> | Array<ListItem<number | string>>\n        >\n    ) => {\n        this.props = {\n            ...this.props,\n            value: event.detail as any,\n        };\n        this.updateAvailableItems();\n    };\n\n    private updateAvailableItems = () => {\n        this.availableItems = this.allItems.filter((item) => {\n            return !(this.props.value as any)?.find?.(\n                (selectedItem: ListItem<number | string>) => {\n                    return item.value === selectedItem.value;\n                }\n            );\n        });\n    };\n\n    private handleEvent = (event: CustomEvent) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-empty-suggestions.tsx","fileName":"picker-empty-suggestions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-empty-suggestions","overview":"With a custom search function\n\nThe custom search function returns two suggestions if the query is empty.\nOtherwise, it filters the items based on the query.\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","usage":{},"docs":"With a custom search function\n\nThe custom search function returns two suggestions if the query is empty.\nOtherwise, it filters the items based on the query.\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-empty-suggestions":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-empty-suggestions.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\nconst NETWORK_DELAY = 500;\n\n/**\n * With a custom search function\n *\n * The custom search function returns two suggestions if the query is empty.\n * Otherwise, it filters the items based on the query.\n *\n * :::important\n * This example simulates that searching is done on the server. Because these\n * examples do not _actually_ send requests to the server, we simulate a small\n * delay, using `setTimeout`. **Please do NOT copy that to production code!**\n * See the other examples for code that does not include this artificial delay.\n * :::\n */\n@Component({\n    tag: 'limel-example-picker-empty-suggestions',\n    shadow: true,\n})\nexport class PickerExample {\n    @State()\n    private selectedItem: ListItem<number>;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItem}\n                searcher={this.search}\n                emptyResultMessage=\"No results\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItem} />,\n        ];\n    }\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        // Simulate network delay\n        await new Promise((resolve) => setTimeout(resolve, NETWORK_DELAY));\n\n        if (query === '') {\n            return this.allItems.slice(8, 10);\n        }\n\n        const filteredItems = this.allItems.filter((item) => {\n            return item.text.toLowerCase().includes(query.toLowerCase());\n        });\n\n        return filteredItems;\n    };\n\n    private onChange = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        this.selectedItem = event.detail;\n    };\n\n    private onInteract = (event) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-icons.tsx","fileName":"picker-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-icons","overview":"With icons","usage":{},"docs":"With icons","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-icons":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-icons.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With icons\n */\n@Component({\n    tag: 'limel-example-picker-icons',\n    shadow: true,\n})\nexport class PickerIconsExample {\n    @State()\n    private selectedItems: Array<ListItem<number>> = [];\n\n    private allItems: Array<ListItem<number>> = [\n        {\n            text: 'Admiral Swiggins',\n            secondaryText:\n                'Anchor Hook, Anchor Drop, Ink Spray, Ink Propulsion',\n            value: 1,\n            icon: {\n                name: 'octopus',\n                color: 'var(--lime-red)',\n            },\n        },\n        {\n            text: 'Ayla',\n            secondaryText: 'Evil Eye, Rage, Chain Whack, Hop Skip',\n            value: 2,\n            icon: {\n                name: 'visible',\n                color: 'var(--lime-magenta)',\n            },\n        },\n        {\n            text: 'Clunk',\n            secondaryText: 'Vacuum Bite, Explode, Missiles, Jet Boost',\n            value: 3,\n            icon: {\n                name: 'robot_3',\n                color: 'var(--lime-dark-blue)',\n            },\n        },\n        {\n            text: 'Coco',\n            secondaryText: 'Ball Lightning, Blaze, Shock, Ollie',\n            value: 4,\n            icon: {\n                name: 'surfing',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Derpl',\n            secondaryText: 'Grid Trap, Siege Mode, Cat Shot, Booster Rocket',\n            value: 5,\n            icon: {\n                name: 'cat',\n                color: 'var(--lime-green)',\n            },\n        },\n        {\n            text: 'Froggy G',\n            secondaryText:\n                'Splash Dash, Tornado Move, Bolt .45 Fish-gun, Frog Jump',\n            value: 6,\n            icon: {\n                name: 'frog',\n                color: 'var(--lime-turquoise)',\n            },\n        },\n        {\n            text: 'Gnaw',\n            secondaryText: 'Acid Spit, Grow Weedling, Bite, Skroggle Jump',\n            value: 7,\n            icon: {\n                name: 'dog',\n                color: 'var(--lime-orange)',\n            },\n        },\n        {\n            text: 'Lonestar',\n            secondaryText:\n                'Dynamite Throw, Summon Hyper Bull, Blaster, Double Jump',\n            value: 8,\n            icon: {\n                name: 'sheriff',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Leon',\n            secondaryText: 'Tounge Snatch, Cloaking Skin, Slash, Reptile Jump',\n            value: 9,\n            icon: {\n                name: 'croissant',\n                color: 'var(--lime-yellow)',\n            },\n        },\n        {\n            text: 'Raelynn',\n            secondaryText:\n                'Timerift, Snipe, Protoblaster, Six Million Solar Human Jump',\n            value: 10,\n            icon: {\n                name: 'sniper_rifle',\n                color: 'var(--lime-dark-grey)',\n            },\n        },\n        {\n            text: 'Skølldir',\n            secondaryText: 'Mighty Throw, Earthquake, Bash, Explosive Fart',\n            value: 11,\n            icon: {\n                name: 'beer',\n                color: 'var(--lime-orange)',\n            },\n        },\n        {\n            text: 'Voltar',\n            secondaryText:\n                'Suicide Drones, Healbot, Techno Synaptic Wave, Hover',\n            value: 12,\n            icon: {\n                name: 'brain',\n                color: 'var(--lime-magenta)',\n            },\n        },\n        {\n            text: 'Yuri',\n            secondaryText: 'Mine Deploying, Time Warp, Laser, Jet Pack',\n            value: 13,\n            icon: {\n                name: 'year_of_monkey',\n                color: 'var(--lime-light-grey)',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItems}\n                searchLabel={'Search your awesomenaut'}\n                multiple={true}\n                allItems={this.allItems}\n                emptyResultMessage=\"No matching awesomenauts found\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private onChange = (\n        event: LimelPickerCustomEvent<Array<ListItem<number>>>\n    ) => {\n        this.selectedItems = [...event.detail];\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-leading-icon-example.tsx","fileName":"picker-leading-icon-example.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-leading-icon","overview":"With a \"search\" leading icon","usage":{},"docs":"With a \"search\" leading icon","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker"],"dependencyGraph":{"limel-example-picker-leading-icon":["limel-picker"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-leading-icon-example.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With a \"search\" leading icon\n */\n@Component({\n    tag: 'limel-example-picker-leading-icon',\n    shadow: true,\n})\nexport class PickerLeadingIconExample {\n    @State()\n    private selectedItem: ListItem<number>;\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                leadingIcon=\"search\"\n                value={this.selectedItem}\n                allItems={this.allItems}\n                emptyResultMessage=\"No results\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <p>\n                Value: <code>{JSON.stringify(this.selectedItem)}</code>\n            </p>,\n        ];\n    }\n\n    private onChange = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        this.selectedItem = event.detail;\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-multiple.tsx","fileName":"picker-multiple.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-multiple","overview":"Multiple values can be picked.\n\n- Already picked items are removed from the available options.","usage":{},"docs":"Multiple values can be picked.\n\n- Already picked items are removed from the available options.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-multiple":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-multiple.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Multiple values can be picked.\n *\n * - Already picked items are removed from the available options.\n */\n@Component({\n    tag: 'limel-example-picker-multiple',\n    shadow: true,\n})\nexport class PickerMultipleExample {\n    @State()\n    private selectedItems: Array<ListItem<number>> = [];\n\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    private availableItems: Array<ListItem<number>> = [...this.allItems];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItems}\n                multiple={true}\n                allItems={this.availableItems}\n                emptyResultMessage=\"No matching awesomenauts found\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private onChange = (\n        event: LimelPickerCustomEvent<Array<ListItem<number>>>\n    ) => {\n        this.selectedItems = [...event.detail];\n        this.updateAvailableItems();\n    };\n\n    private updateAvailableItems = () => {\n        this.availableItems = this.allItems.filter((item) => {\n            return !this.selectedItems.some((selectedItem) => {\n                return item.value === selectedItem.value;\n            });\n        });\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-pictures.tsx","fileName":"picker-pictures.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-pictures","overview":"With pictures","usage":{},"docs":"With pictures","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-pictures":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-pictures.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With pictures\n */\n@Component({\n    tag: 'limel-example-picker-pictures',\n    shadow: true,\n})\nexport class PickerPicturesExample {\n    @State()\n    private selectedItems: Array<ListItem<number>> = [];\n\n    private allItems: Array<ListItem<number>> = [\n        {\n            text: 'Lucy Chyzhova',\n            secondaryText: 'UX Designer',\n            value: 1,\n            icon: {\n                name: 'santas_hat',\n                color: 'rgb(var(--color-coral-default))',\n            },\n            image: {\n                src: 'https://lundalogik.github.io/lime-elements/780af2a6-d3d1-4593-8642-f03210d09271.png',\n                alt: 'A picture of Lucy Chyzhova, UX designer at Lime Technologies',\n            },\n        },\n        {\n            text: 'Kiarokh Moattar',\n            secondaryText: 'Product Designer',\n            value: 2,\n            icon: {\n                name: 'party_hat',\n                color: 'rgb(var(--color-pink-default))',\n            },\n            image: {\n                src: 'https://lundalogik.github.io/lime-elements/2e86c284-d190-4c41-8da2-4de50103a0cd.png',\n                alt: 'A picture of Kiarokh Moattar, Product Designer at Lime Technologies',\n            },\n        },\n        {\n            text: 'Adrian Schmidt',\n            secondaryText: 'Engineer',\n            value: 3,\n            icon: 'viking_helmet',\n            image: {\n                src: 'https://lundalogik.github.io/lime-elements/0e6f74c0-11d9-465b-aac6-44f33da3cb7c.png',\n                alt: 'A picture of Adrian Schmidt, Head of Smooth Operations at Lime Technologies',\n            },\n        },\n        {\n            text: 'Befkadu Degefa',\n            secondaryText: 'Engineer',\n            value: 4,\n            icon: {\n                name: 'bowler_hat',\n                color: 'rgb(var(--color-sky-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite awesomenaut\"\n                value={this.selectedItems}\n                searchLabel={'Search your awesomenaut'}\n                multiple={true}\n                allItems={this.allItems}\n                emptyResultMessage=\"No matching awesomenauts found\"\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private onChange = (\n        event: LimelPickerCustomEvent<Array<ListItem<number>>>\n    ) => {\n        this.selectedItems = [...event.detail];\n    };\n\n    private onInteract = (event: LimelPickerCustomEvent<ListItem<number>>) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-static-action.tsx","fileName":"picker-static-action.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-static-actions","overview":"With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","usage":{},"docs":"With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-controls","limel-select","limel-example-value"],"dependencyGraph":{"limel-example-picker-static-actions":["limel-picker","limel-example-controls","limel-select","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-static-action.tsx","type":"tsx","source":"import {\n    Action,\n    ActionPosition,\n    ActionScrollBehavior,\n    LimelPickerCustomEvent,\n    LimelSelectCustomEvent,\n    ListItem,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With static actions\n *\n * Static items can be added to the picker to enable triggering custom actions\n * directly from the results dropdown list.\n *\n * :::tip\n * A typical use case of such actions is scenarios in which the picker's search\n * results or suggestions list does not include what the user wants to pick. By\n * offering custom actions right in the list, we can enable users to add missing\n * items.\n * :::\n */\n@Component({\n    tag: 'limel-example-picker-static-actions',\n    shadow: true,\n})\nexport class PickerStaticActionsExample {\n    private allItems: Array<ListItem<number>> = [\n        { text: 'Admiral Swiggins', value: 1 },\n        { text: 'Ayla', value: 2 },\n        { text: 'Clunk', value: 3 },\n        { text: 'Coco', value: 4 },\n        { text: 'Derpl', value: 5 },\n        { text: 'Froggy G', value: 6 },\n        { text: 'Gnaw', value: 7 },\n        { text: 'Lonestar', value: 8 },\n        { text: 'Leon', value: 9 },\n        { text: 'Raelynn', value: 10 },\n        { text: 'Skølldir', value: 11 },\n        { text: 'Voltar', value: 12 },\n        { text: 'Yuri', value: 13 },\n    ];\n\n    private actions: Array<ListItem<Action>> = [\n        {\n            text: 'Add a dog',\n            icon: {\n                name: 'dog',\n                color: 'rgb(var(--color-orange-default))',\n            },\n            value: { id: 'dog' },\n        },\n        {\n            text: 'Add a cat',\n            icon: {\n                name: 'cat',\n                color: 'rgb(var(--color-green-default))',\n            },\n            value: { id: 'cat' },\n        },\n    ];\n\n    private actionPositions: Array<Option<ActionPosition>> = [\n        { text: 'Bottom', value: 'bottom' },\n        { text: 'Top', value: 'top' },\n    ];\n\n    private actionScrollBehaviors: Array<Option<ActionScrollBehavior>> = [\n        { text: 'Sticky', value: 'sticky' },\n        { text: 'Scroll', value: 'scroll' },\n    ];\n\n    @State()\n    private selectedItem: ListItem<number> = null;\n\n    @State()\n    private lastUsedAction: Action = null;\n\n    @State()\n    private actionScrollBehavior: Option<ActionScrollBehavior> =\n        this.actionScrollBehaviors[0];\n\n    @State()\n    private actionPosition: Option<ActionPosition> = this.actionPositions[0];\n\n    constructor() {\n        this.onChange = this.onChange.bind(this);\n        this.onAction = this.onAction.bind(this);\n        this.setBehavior = this.setBehavior.bind(this);\n        this.setPosition = this.setPosition.bind(this);\n    }\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Select your favorite pet\"\n                value={this.selectedItem}\n                searchLabel={'Search your awesomenaut'}\n                allItems={this.allItems}\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n                onAction={this.onAction}\n                actions={this.actions}\n                actionScrollBehavior={this.actionScrollBehavior?.value}\n                actionPosition={this.actionPosition?.value}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '10rem' }}\n            >\n                <limel-select\n                    class=\"is-narrow\"\n                    label=\"Action Scroll Behavior\"\n                    onChange={this.setBehavior}\n                    value={this.actionScrollBehavior}\n                    options={this.actionScrollBehaviors}\n                />\n\n                <limel-select\n                    class=\"is-narrow\"\n                    label=\"Action Position\"\n                    onChange={this.setPosition}\n                    value={this.actionPosition}\n                    options={this.actionPositions}\n                />\n            </limel-example-controls>,\n            <limel-example-value\n                label=\"Last pressed action\"\n                value={this.lastUsedAction}\n            />,\n        ];\n    }\n\n    private onChange(event: LimelPickerCustomEvent<ListItem<number>>) {\n        this.selectedItem = event.detail;\n    }\n\n    private onAction(event: CustomEvent<Action>) {\n        this.lastUsedAction = event.detail;\n    }\n\n    private onInteract(event) {\n        console.log('Value interacted with:', event.detail);\n    }\n\n    private setBehavior(\n        event: LimelSelectCustomEvent<Option<ActionScrollBehavior>>\n    ) {\n        this.actionScrollBehavior = event.detail;\n    }\n\n    private setPosition(event: LimelSelectCustomEvent<Option<ActionPosition>>) {\n        this.actionPosition = event.detail;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-value-as-object.tsx","fileName":"picker-value-as-object.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-value-as-object","overview":"With a value as an object","usage":{},"docs":"With a value as an object","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-value-as-object":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-value-as-object.tsx","type":"tsx","source":"import { LimelPickerCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { AUTHORS } from './authors';\n\n/**\n * With a value as an object\n */\n@Component({\n    tag: 'limel-example-picker-value-as-object',\n    shadow: true,\n})\nexport class PickerValueAsObjectExample {\n    @State()\n    private selectedItems: Array<ListItem<{ id: string; limetype: string }>> =\n        [];\n\n    private allItems: Array<ListItem<{ id: string; limetype: string }>> =\n        AUTHORS;\n\n    public render() {\n        return [\n            <limel-picker\n                label=\"Favorite authors\"\n                value={this.selectedItems}\n                searchLabel=\"Search your favorite authors\"\n                emptyResultMessage=\"No matching authors found\"\n                multiple={true}\n                allItems={this.allItems}\n                onChange={this.onChange}\n                onInteract={this.onInteract}\n            />,\n            <limel-example-value value={this.selectedItems} />,\n        ];\n    }\n\n    private onChange = (\n        event: LimelPickerCustomEvent<\n            Array<\n                ListItem<{\n                    id: string;\n                    limetype: string;\n                }>\n            >\n        >\n    ) => {\n        this.selectedItems = event.detail;\n    };\n\n    private onInteract = (\n        event: LimelPickerCustomEvent<\n            ListItem<{ id: string; limetype: string }>\n        >\n    ) => {\n        console.log('Value interacted with:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples","filePath":"./src/components/picker/examples/picker-value-as-object-with-actions.tsx","fileName":"picker-value-as-object-with-actions.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/examples/usage","tag":"limel-example-picker-value-as-object-with-actions","overview":"Picker with `value` as an object, containing items with menus\nWhile chips inside the picker can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","usage":{},"docs":"Picker with `value` as an object, containing items with menus\nWhile chips inside the picker can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker","limel-example-value"],"dependencyGraph":{"limel-example-picker-value-as-object-with-actions":["limel-picker","limel-example-value"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker-value-as-object-with-actions.tsx","type":"tsx","source":"import {\n    LimelChipCustomEvent,\n    LimelPickerCustomEvent,\n    ListItem,\n    MenuItem,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\nimport { AUTHORS } from './authors';\n\nconst ACTIONS = [\n    {\n        '1': [\n            {\n                text: 'Email',\n                secondaryText: 'erick.remarque@lime.tech',\n                icon: 'email_sign',\n                value: 1,\n            },\n            {\n                text: 'Direct phone',\n                secondaryText: '+46 987 654 321',\n                icon: 'phone',\n                value: 2,\n            },\n        ],\n    },\n    {\n        '2': [\n            {\n                text: 'Email',\n                secondaryText: 'ernest.hemingway@lime.tech',\n                icon: 'email_sign',\n                value: 1,\n            },\n        ],\n    },\n];\n\n/**\n * Picker with `value` as an object, containing items with menus\n * While chips inside the picker can be clicked on, resulting in\n * an action, they can also have an ellipsis menu which will provide the end users with\n * additional actions.\n *\n * When a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\n * will be emitted, reflecting the `value` of the selected item.\n *\n * :::note\n * When a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\n * chip will be automatically added as the last item in the ellipsis menu.\n *\n * Clicking the remove button will emit the same `onRemove` event.\n * :::\n */\n@Component({\n    tag: 'limel-example-picker-value-as-object-with-actions',\n    shadow: true,\n})\nexport class PickerValueAsObjectWithActionsExample {\n    @State()\n    private selectedItems: Array<ListItem<{ id: string; limetype: string }>> =\n        [];\n\n    private allItems: Array<ListItem<{ id: string; limetype: string }>> =\n        AUTHORS;\n\n    public render() {\n        return (\n            <Host onMenuItemSelected={this.onMenuItemSelected}>\n                <limel-picker\n                    label=\"Favorite authors\"\n                    value={this.selectedItems}\n                    searchLabel={'Find your favorite authors'}\n                    emptyResultMessage=\"No matching authors found\"\n                    multiple={true}\n                    allItems={this.allItems}\n                    onChange={this.onChange}\n                    onInteract={this.onInteract}\n                />\n                <limel-example-value value={this.selectedItems} />\n            </Host>\n        );\n    }\n\n    private onChange = (\n        event: LimelPickerCustomEvent<\n            Array<\n                ListItem<{\n                    id: string;\n                    limetype: string;\n                }>\n            >\n        >\n    ) => {\n        this.selectedItems = [...event.detail].map((item) => {\n            const itemActions = ACTIONS.find((action) =>\n                Object.prototype.hasOwnProperty.call(action, item.value.id)\n            );\n\n            return {\n                ...item,\n                actions: itemActions?.[item.value.id],\n            };\n        });\n    };\n\n    private onInteract = (\n        event: LimelPickerCustomEvent<\n            ListItem<{ id: string; limetype: string }>\n        >\n    ) => {\n        console.log('Value interacted with:', event.detail);\n    };\n\n    private onMenuItemSelected = (event: LimelChipCustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        console.log('Selected action:', event.detail);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples","filePath":"./src/components/help/examples/help-placement.tsx","fileName":"help-placement.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/usage","tag":"limel-example-placement","overview":"Placement of the trigger element and the layout\n\nThe trigger element of the help component can be placed\nbefore or after the element it is describing.\n\nHowever, to provide a consistent layout, we recommend placing the\ntrigger element on the left side of all elements.\n\nJust make sure the elements are aligned correctly,\neven when there is no help component beside them.\n\nAlso see how we have implemented this component in the\n[Form](#/component/limel-form) component.","usage":{},"docs":"Placement of the trigger element and the layout\n\nThe trigger element of the help component can be placed\nbefore or after the element it is describing.\n\nHowever, to provide a consistent layout, we recommend placing the\ntrigger element on the left side of all elements.\n\nJust make sure the elements are aligned correctly,\neven when there is no help component beside them.\n\nAlso see how we have implemented this component in the\n[Form](#/component/limel-form) component.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-help","limel-checkbox"],"dependencyGraph":{"limel-example-placement":["limel-help","limel-checkbox"],"limel-help":["limel-popover","limel-help-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-help-content":["limel-markdown"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"help-placement.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\nconst helpAutoUpdates =\n    'Automatically download and install updates, when the phone is connected to a Wi-Fi, is charging and is locked.';\nconst helpBetaUpdates =\n    'Receive updates on this phone to test-drive pre-release versions of the operating system and provide feedback to help us become even better.';\n\n/**\n * Placement of the trigger element and the layout\n *\n * The trigger element of the help component can be placed\n * before or after the element it is describing.\n *\n * However, to provide a consistent layout, we recommend placing the\n * trigger element on the left side of all elements.\n *\n * Just make sure the elements are aligned correctly,\n * even when there is no help component beside them.\n *\n * Also see how we have implemented this component in the\n * [Form](#/component/limel-form) component.\n */\n@Component({\n    tag: 'limel-example-placement',\n    shadow: true,\n    styleUrl: 'help-placement.scss',\n})\nexport class HelpPlacementExample {\n    public render() {\n        return [\n            <h4>Better layout</h4>,\n            <ul>\n                <li>\n                    <limel-help value={helpAutoUpdates} class=\"pull-left\" />\n                    <limel-checkbox label=\"Automatic updates\" />\n                </li>\n                <li>\n                    <limel-help value={helpBetaUpdates} class=\"pull-left\" />\n                    <limel-checkbox label=\"Beta updates\" />\n                </li>\n                <li>\n                    <limel-checkbox label=\"Notify after update\" />\n                </li>\n            </ul>,\n            <hr />,\n            <h4>Worse layout</h4>,\n            <ul>\n                <li>\n                    <limel-checkbox label=\"Automatic updates\" />\n                    <limel-help value={helpAutoUpdates} />\n                </li>\n                <li>\n                    <limel-checkbox label=\"Beta updates\" />\n                    <limel-help value={helpBetaUpdates} />\n                </li>\n                <li>\n                    <limel-checkbox label=\"Notify after update\" />\n                </li>\n            </ul>,\n        ];\n    }\n}\n"},{"filename":"help-placement.scss","type":"scss","source":":host(limel-example-placement) {\n    --form-padding: 1rem;\n}\n\nul,\nli {\n    all: unset;\n    display: flex;\n}\n\nul {\n    flex-direction: column;\n    padding: 0 var(--form-padding);\n}\n\nli {\n    position: relative;\n    flex-direction: row;\n    align-items: center;\n}\n\nhr {\n    all: unset;\n    display: block;\n    margin: 1.5rem 0 0 0;\n    border-bottom: 1px solid rgb(var(--contrast-600));\n}\n\nlimel-checkbox {\n    margin-right: 0.5rem;\n}\n\nlimel-help {\n    &.pull-left {\n        position: absolute;\n        left: calc(var(--form-padding) * -1);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples","filePath":"./src/components/popover/examples/popover-basic.tsx","fileName":"popover-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/usage","tag":"limel-example-popover-basic","overview":"Basic example\nThis example shows a simple trigger element that opens a popover when clicked.\n\n:::note\nDue accessibility concerns, the trigger element should be something that can be\ninteracted with, using both mouse click and the <kbd>  spacebar  </kbd>\nor the <kbd>↩ return</kbd> key on the keyboard.\n\nThis is why we are using a `limel-button` element as the trigger in this example,\nwhich is both accessible with mouse and keyboard.\n:::\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::","usage":{},"docs":"Basic example\nThis example shows a simple trigger element that opens a popover when clicked.\n\n:::note\nDue accessibility concerns, the trigger element should be something that can be\ninteracted with, using both mouse click and the <kbd>  spacebar  </kbd>\nor the <kbd>↩ return</kbd> key on the keyboard.\n\nThis is why we are using a `limel-button` element as the trigger in this example,\nwhich is both accessible with mouse and keyboard.\n:::\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-popover","limel-button"],"dependencyGraph":{"limel-example-popover-basic":["limel-popover","limel-button"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"popover-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n * This example shows a simple trigger element that opens a popover when clicked.\n *\n * :::note\n * Due accessibility concerns, the trigger element should be something that can be\n * interacted with, using both mouse click and the <kbd>  spacebar  </kbd>\n * or the <kbd>↩ return</kbd> key on the keyboard.\n *\n * This is why we are using a `limel-button` element as the trigger in this example,\n * which is both accessible with mouse and keyboard.\n * :::\n *\n * :::warning\n * The component is emitting a close event when you click outside its container\n * or press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\n * properly on this event and hide the component (preferably by setting the\n * property `open` to `false`).\n * :::\n */\n\n@Component({\n    tag: 'limel-example-popover-basic',\n    shadow: true,\n})\nexport class PopoverBasicExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-popover open={this.isOpen} onClose={this.onPopoverClose}>\n                <limel-button\n                    slot=\"trigger\"\n                    primary={true}\n                    label=\"Click me!\"\n                    onClick={this.openPopover}\n                />\n                <p style={{ margin: '0.5rem 1rem' }} tabindex=\"0\">\n                    Content\n                </p>\n            </limel-popover>,\n        ];\n    }\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log('opening');\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        console.log('closing');\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples","filePath":"./src/components/popover/examples/popover-styling.tsx","fileName":"popover-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/usage","tag":"limel-example-popover-styling","overview":"Styling\nThere are a few custom CSS properties that you can use to style the popover.","usage":{},"docs":"Styling\nThere are a few custom CSS properties that you can use to style the popover.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-popover","limel-button","limel-card"],"dependencyGraph":{"limel-example-popover-styling":["limel-popover","limel-button","limel-card"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-button":["limel-icon","limel-spinner"],"limel-card":["limel-3d-hover-effect-glow","limel-icon","limel-markdown","limel-action-bar"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"popover-styling.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Styling\n * There are a few custom CSS properties that you can use to style the popover.\n */\n\n@Component({\n    tag: 'limel-example-popover-styling',\n    shadow: true,\n    styleUrl: 'popover-styling.scss',\n})\nexport class PopoverStylingExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        const image = {\n            src: 'https://unsplash.it/800/800/?random',\n            alt: 'Some random image',\n        };\n\n        return [\n            <limel-popover open={this.isOpen} onClose={this.onPopoverClose}>\n                <limel-button\n                    slot=\"trigger\"\n                    label=\"Click me!\"\n                    onClick={this.openPopover}\n                />\n                <limel-card\n                    style={{ 'max-width': '20rem' }}\n                    orientation=\"landscape\"\n                    image={image}\n                    heading=\"Heading\"\n                    subheading=\"Subheading\"\n                    value=\"This is the body of the card.\"\n                />\n            </limel-popover>,\n        ];\n    }\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log('opening');\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        console.log('closing');\n        this.isOpen = false;\n    };\n}\n"},{"filename":"popover-styling.scss","type":"scss","source":"limel-popover {\n    --popover-border-radius: 0.95rem;\n    --popover-body-background-color: transparent;\n    --popover-box-shadow: var(--shadow-depth-8);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples","filePath":"./src/components/popover/examples/popover-trigger-interaction.tsx","fileName":"popover-trigger-interaction.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover/examples/usage","tag":"limel-example-popover-trigger-interaction","overview":"Trigger Interaction for Popovers\n\nPopovers are typically triggered by a click event, but they can also be triggered\nby hover or focus events. This approach is especially useful when the click event\nis reserved for other interactions, such as navigating to another page or activating\na different function.\n\nTriggering a popover with hover or focus is useful when clicking the trigger element\nis required for actions like navigation, while still providing contextual information\nor options through the popover.\n\n:::important\nKey considerations when using hover and focus triggers:\n\n**Delayed Popover Opening**:\nHovering or focusing on the trigger element should not immediately open the popover.\nAlways introduce a reasonable delay before opening the popover to prevent accidental activation.\nThis prevents an annoying user experience where the popover opens as the user moves\ntheir cursor across the UI. It's especially important in UIs with multiple trigger elements.\n\n**Popover Should Remain Open**:\nThe popover should remain open even if the user moves the cursor away from\nthe trigger element or navigates away with the keyboard.\nThis allows the user to interact with the popover content without it closing unexpectedly.\n\n**Touchscreen Accessibility**:\nConsider the experience for users on touchscreen devices. Hover interactions might not be available,\nso ensure the design is accessible to them.\n\n**Provide Proper Cues**:\nProvide clear visual indicators, or use accessible attributes like `title` or `aria-label`,\nto signal that the trigger element is interactive when hovered or focused.\nThis ensures that users understand they can interact with the element even without clicking.\n\n**Low discoverability**:\nRemember that such interaction are not easily discovered by the end-users.\nTherefore, you should avoid having any critical functionality to be hidden\nbehind such interactions, and only use it as supplementary means of enriching\nthe user experience.\n:::","usage":{},"docs":"Trigger Interaction for Popovers\n\nPopovers are typically triggered by a click event, but they can also be triggered\nby hover or focus events. This approach is especially useful when the click event\nis reserved for other interactions, such as navigating to another page or activating\na different function.\n\nTriggering a popover with hover or focus is useful when clicking the trigger element\nis required for actions like navigation, while still providing contextual information\nor options through the popover.\n\n:::important\nKey considerations when using hover and focus triggers:\n\n**Delayed Popover Opening**:\nHovering or focusing on the trigger element should not immediately open the popover.\nAlways introduce a reasonable delay before opening the popover to prevent accidental activation.\nThis prevents an annoying user experience where the popover opens as the user moves\ntheir cursor across the UI. It's especially important in UIs with multiple trigger elements.\n\n**Popover Should Remain Open**:\nThe popover should remain open even if the user moves the cursor away from\nthe trigger element or navigates away with the keyboard.\nThis allows the user to interact with the popover content without it closing unexpectedly.\n\n**Touchscreen Accessibility**:\nConsider the experience for users on touchscreen devices. Hover interactions might not be available,\nso ensure the design is accessible to them.\n\n**Provide Proper Cues**:\nProvide clear visual indicators, or use accessible attributes like `title` or `aria-label`,\nto signal that the trigger element is interactive when hovered or focused.\nThis ensures that users understand they can interact with the element even without clicking.\n\n**Low discoverability**:\nRemember that such interaction are not easily discovered by the end-users.\nTherefore, you should avoid having any critical functionality to be hidden\nbehind such interactions, and only use it as supplementary means of enriching\nthe user experience.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-popover","limel-chip","limel-markdown"],"dependencyGraph":{"limel-example-popover-trigger-interaction":["limel-popover","limel-chip","limel-markdown"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"popover-trigger-interaction.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nconst TRIGGER_DELAY = 1000;\n/**\n * Trigger Interaction for Popovers\n *\n * Popovers are typically triggered by a click event, but they can also be triggered\n * by hover or focus events. This approach is especially useful when the click event\n * is reserved for other interactions, such as navigating to another page or activating\n * a different function.\n *\n * Triggering a popover with hover or focus is useful when clicking the trigger element\n * is required for actions like navigation, while still providing contextual information\n * or options through the popover.\n *\n * :::important\n * Key considerations when using hover and focus triggers:\n *\n * **Delayed Popover Opening**:\n * Hovering or focusing on the trigger element should not immediately open the popover.\n * Always introduce a reasonable delay before opening the popover to prevent accidental activation.\n * This prevents an annoying user experience where the popover opens as the user moves\n * their cursor across the UI. It's especially important in UIs with multiple trigger elements.\n *\n * **Popover Should Remain Open**:\n * The popover should remain open even if the user moves the cursor away from\n * the trigger element or navigates away with the keyboard.\n * This allows the user to interact with the popover content without it closing unexpectedly.\n *\n * **Touchscreen Accessibility**:\n * Consider the experience for users on touchscreen devices. Hover interactions might not be available,\n * so ensure the design is accessible to them.\n *\n * **Provide Proper Cues**:\n * Provide clear visual indicators, or use accessible attributes like `title` or `aria-label`,\n * to signal that the trigger element is interactive when hovered or focused.\n * This ensures that users understand they can interact with the element even without clicking.\n *\n * **Low discoverability**:\n * Remember that such interaction are not easily discovered by the end-users.\n * Therefore, you should avoid having any critical functionality to be hidden\n * behind such interactions, and only use it as supplementary means of enriching\n * the user experience.\n * :::\n */\n\n@Component({\n    tag: 'limel-example-popover-trigger-interaction',\n    shadow: true,\n    styleUrl: 'popover-trigger-interaction.scss',\n})\nexport class PopoverTriggerInteractionExample {\n    @State()\n    private isOpen = false;\n\n    private hoverTimeout: number;\n\n    public render() {\n        const chipImage = {\n            src: 'https://lundalogik.github.io/lime-elements/0e6f74c0-11d9-465b-aac6-44f33da3cb7c.png',\n            alt: 'A picture of Adrian Schmidt, Head of Smooth Operations at Lime Technologies',\n        };\n\n        const markdown = `\n![Adrian Schmidt](https://lundalogik.github.io/lime-elements/0e6f74c0-11d9-465b-aac6-44f33da3cb7c.png)\n### Adrian Schmidt\nHead of\nSmooth Operations\n\n[Get in touch](https://github.com/adrianschmidt)\n        `;\n\n        return [\n            <limel-popover\n                open={this.isOpen}\n                onClose={this.onPopoverClose}\n                open-direction=\"top\"\n                style={{ '--popover-timeout': `${TRIGGER_DELAY}ms` }}\n            >\n                <div slot=\"trigger\">\n                    <limel-chip\n                        text=\"Adrian Schmidt\"\n                        image={chipImage}\n                        title=\"Hover or focus me!\"\n                        onMouseEnter={this.openPopoverWithDelay}\n                        onMouseLeave={this.resetTimeout}\n                        onFocus={this.openPopoverWithDelay}\n                        onClick={this.handleClick}\n                    />\n                    {this.renderTimeoutFeedback()}\n                </div>\n                <limel-markdown\n                    style={{\n                        display: 'flex',\n                        'flex-direction': 'column',\n                        gap: '0.5rem',\n                        padding: '0.5rem',\n                    }}\n                    tabIndex={0}\n                    value={markdown}\n                />\n            </limel-popover>,\n        ];\n    }\n\n    private renderTimeoutFeedback() {\n        return <div class=\"opening-countdown-indicator\" />;\n    }\n\n    private openPopoverWithDelay = (event: FocusEvent | MouseEvent) => {\n        event.stopPropagation();\n        console.log('opening popover with delay');\n\n        clearTimeout(this.hoverTimeout);\n\n        this.hoverTimeout = window.setTimeout(() => {\n            this.isOpen = true;\n        }, TRIGGER_DELAY);\n    };\n\n    private resetTimeout = () => {\n        if (this.isOpen) {\n            return;\n        }\n\n        console.log('resetting timeout');\n        clearTimeout(this.hoverTimeout);\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        console.log('closing popover instantly');\n        this.isOpen = false;\n    };\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        console.log('chip is clicked, closing popover and opening alert');\n        this.isOpen = false;\n\n        alert('Popover closed, you clicked on the trigger!');\n    };\n}\n"},{"filename":"popover-trigger-interaction.scss","type":"scss","source":"div[slot='trigger'] {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n    align-items: center;\n}\n\n.opening-countdown-indicator {\n    // For inspiration only!\n    // Here we created a CSS-only countdown indicator\n    // which informs the users if they wait long enough while hovering,\n    // they can expect something to happen.\n    display: block;\n    height: 0.125rem;\n    background-color: rgb(var(--color-sky-light));\n    border-radius: 1rem;\n\n    transition:\n        width ease-out,\n        opacity ease;\n    transition-duration: 260ms;\n    opacity: 0;\n    width: 0%;\n\n    div[slot='trigger']:not([aria-expanded='true']):has(limel-chip:hover) & {\n        transition-duration: var(--popover-timeout);\n        opacity: 1;\n        width: calc(100% - 1rem);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/portal/examples","filePath":"./src/components/portal/examples/portal-basic.tsx","fileName":"portal-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/portal/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/portal/examples/usage","tag":"limel-example-portal-basic","overview":"Disconnect test\n\nThis is an example to test that it works to remove a popover from the DOM,\nthen add it back again without breaking it","usage":{},"docs":"Disconnect test\n\nThis is an example to test that it works to remove a popover from the DOM,\nthen add it back again without breaking it","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-popover"],"dependencyGraph":{"limel-example-portal-basic":["limel-button","limel-popover"],"limel-button":["limel-icon","limel-spinner"],"limel-popover":["limel-portal","limel-popover-surface"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"portal-basic.tsx","type":"tsx","source":"import { Component, h, Element, State } from '@stencil/core';\n\n/**\n * Disconnect test\n *\n * This is an example to test that it works to remove a popover from the DOM,\n * then add it back again without breaking it\n */\n@Component({\n    tag: 'limel-example-portal-basic',\n    shadow: true,\n})\nexport class PortalBasicExample {\n    @State()\n    private isOpen = false;\n\n    @Element()\n    private host: HTMLLimelExamplePortalBasicElement;\n\n    @State()\n    private container: HTMLElement;\n\n    public render() {\n        return (\n            <div class=\"root\">\n                <limel-button\n                    label=\"Disconnect from DOM\"\n                    disabled={!!this.container}\n                    onClick={this.handleDisconnect}\n                />\n                <limel-button\n                    label=\"Connect to DOM\"\n                    disabled={!this.container}\n                    onClick={this.handleConnect}\n                />\n                <div class=\"container\">\n                    <limel-popover\n                        open={this.isOpen}\n                        onClose={this.onPopoverClose}\n                    >\n                        <limel-button\n                            slot=\"trigger\"\n                            primary={true}\n                            label=\"Click me!\"\n                            onClick={this.openPopover}\n                        />\n                        <div>CONTENT</div>\n                    </limel-popover>\n                </div>\n            </div>\n        );\n    }\n\n    private handleDisconnect = () => {\n        if (this.container) {\n            return;\n        }\n\n        const root = this.host.shadowRoot.querySelector('.root');\n        this.container = root.querySelector('.container');\n\n        this.container.remove();\n    };\n\n    private handleConnect = () => {\n        if (!this.container) {\n            return;\n        }\n\n        const root = this.host.shadowRoot.querySelector('.root');\n        root.append(this.container);\n        this.container = null;\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/primary-color-palette.tsx","fileName":"primary-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-primary-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"primary-color-palette.tsx","type":"tsx","source":"import { Component, h, JSX } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-primary-color-palette',\n    shadow: true,\n    styleUrl: 'primary-color-palette.scss',\n})\nexport class PaletteExample {\n    private colors = [\n        'red',\n        'pink',\n        'magenta',\n        'purple',\n        'violet',\n        'indigo',\n        'blue',\n        'sky',\n        'cyan',\n        'teal',\n        'green',\n        'lime',\n        'grass',\n        'yellow',\n        'amber',\n        'orange',\n        'coral',\n        'brown',\n        'gray',\n        'glaucous',\n    ];\n\n    public render() {\n        return (\n            <div>\n                <div class=\"color-palette\">\n                    {this.renderSwatches()}\n                    <div class=\"brightness-label\">light</div>\n                    <div class=\"brightness-label\">default</div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderSwatches = (): JSX.Element[][] => {\n        return this.colors.map((color) => {\n            return [\n                <div class={`swatch --color-${color}-light`}></div>,\n                <div class={`swatch --color-${color}-default`}>·</div>,\n                <div class=\"swatch hue\">{color}</div>,\n            ];\n        });\n    };\n}\n"},{"filename":"primary-color-palette.scss","type":"scss","source":"@use './shared-styles';\n\n.color-palette {\n    grid-template-rows: repeat(2, 1fr) auto;\n    grid-template-columns: repeat(20, 1fr) auto;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-basic.tsx","fileName":"progress-flow-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-basic","overview":"Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","usage":{},"docs":"Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-progress-flow-basic":["limel-progress-flow","limel-example-controls","limel-checkbox","limel-example-value"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '@limetech/lime-elements';\n\n/**\n * Basic Example\n *\n * Progress flow can visualize linear process, consisting of distinct steps.\n * Sometimes, this is a great alternative to use instead of `limel-select`.\n * For instance, when there are too few options available to choose from, and\n * the options have an incremental order.\n *\n * Each step can optionally get an icon, to help users understand its meaning\n * faster, and recognize it quicker next time.\n */\n@Component({\n    tag: 'limel-example-progress-flow-basic',\n    shadow: true,\n})\nexport class ProgressFlowBasicExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: '1',\n            text: 'Step 1',\n            selected: true,\n            icon: 'add_shopping_cart',\n        },\n        { value: '2', text: 'Step 2', icon: 'shopping_cart_loaded' },\n        { value: '3', text: 'Step 3', icon: 'insert_money_euro' },\n    ];\n\n    public render() {\n        return [\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n                disabled={this.disabled}\n                readonly={this.readonly}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value\n                value={this.flowItems.find((i) => i.selected)}\n            />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-colors.tsx","fileName":"progress-flow-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-colors","overview":"Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","usage":{},"docs":"Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-colors":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-colors.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '@limetech/lime-elements';\n\n/**\n * Using colors\n *\n * By default, each step appears with a light grey background, and when\n * selected, it gets the defined `--lime-primary-color` as background. Also,\n * passed steps will get the same background color as selected steps by default.\n *\n * However, both of these colors can be customized by specifying color values\n * for `selectedColor` and `passedColor`.\n *\n * Any icons will get the same color as the text for that step, but the color of\n * icons for steps which are neither selected nor passed can be specified using\n * the `iconColor` property.\n */\n@Component({\n    tag: 'limel-example-progress-flow-colors',\n    shadow: true,\n})\nexport class ProgressFlowColorsExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'lime',\n            text: 'Magenta step',\n            selectedColor: 'rgb(var(--color-magenta-default)',\n            passedColor: 'rgb(var(--color-green-light))',\n            icon: {\n                name: 'roller_brush',\n                color: 'rgb(var(--color-magenta-default)',\n            },\n        },\n        {\n            value: 'purple',\n            text: 'Purple step',\n            selectedColor: 'rgb(var(--color-purple-default))',\n            passedColor: 'rgb(var(--color-green-default))',\n            icon: {\n                name: 'brush',\n                color: 'rgb(var(--color-purple-default))',\n            },\n        },\n        {\n            value: 'organge',\n            text: 'Blue step',\n            selectedColor: 'rgb(var(--color-blue-default))',\n            passedColor: 'rgb(var(--color-green-dark))',\n            icon: {\n                name: 'paint_brush',\n                color: 'rgb(var(--color-blue-default))',\n            },\n        },\n        {\n            value: 'red',\n            text: 'Green step',\n            selectedColor: 'rgb(var(--color-green-darker))',\n            icon: {\n                name: 'cosmetic_brush',\n                color: 'rgb(var(--color-green-darker))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-colors-css.tsx","fileName":"progress-flow-colors-css.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-colors-css","overview":"Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","usage":{},"docs":"Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-colors-css":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-colors-css.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '@limetech/lime-elements';\n\n/**\n * Customizing colors further, using CSS\n *\n * A few CSS variables can be used to customize the look and feel of the steps.\n * But keep in mind that it is not possible to target steps individually and\n * change their colors, using these CSS variables.\n * :::note\n * Using CSS variables to tweak the colors, applies the colors globally to the\n * component, not to individual steps!\n * :::\n * :::note\n * Make sure that:\n * - text has enough contrast with its background and is readable.\n * - the `--progress-flow-step-divider-color` has the same color as the component's\n * container.\n * :::\n */\n@Component({\n    tag: 'limel-example-progress-flow-colors-css',\n    shadow: true,\n    styleUrl: 'progress-flow-colors-css.scss',\n})\nexport class ProgressFlowColorsCssExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'first',\n            text: 'First step',\n            selected: true,\n        },\n        {\n            value: 'second',\n            text: 'Second step',\n        },\n        {\n            value: 'third',\n            text: 'Third step',\n        },\n        {\n            value: 'fourth',\n            text: 'Fourth step',\n            icon: 'finish_flag',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange(event: CustomEvent<FlowItem>) {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    }\n}\n"},{"filename":"progress-flow-colors-css.scss","type":"scss","source":":host {\n    --container-background-color: rgb(var(--contrast-1400));\n    background-color: var(--container-background-color);\n    display: block;\n    padding: 2rem;\n    border-radius: 0.6rem;\n\n    --progress-flow-step-divider-color: var(--container-background-color);\n\n    --progress-flow-step-background-color: rgb(var(--contrast-1200));\n    --progress-flow-step-background-color--selected: rgb(var(--color-sky-dark));\n    --progress-flow-step-background-color--passed: rgb(var(--contrast-700));\n\n    --progress-flow-step-text-color: rgb(var(--contrast-200));\n    --progress-flow-step-text-color--passed: rgb(var(--contrast-1100));\n\n    --progress-flow-icon-color--inactive: rgb(var(--color-lime-default));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-with-disabled-step.tsx","fileName":"progress-flow-with-disabled-step.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-disabled-step","overview":"Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","usage":{},"docs":"Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-disabled-step":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-with-disabled-step.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '@limetech/lime-elements';\n\n/**\n * Disabled steps\n *\n * While the entire component can be `disabled`,\n * each step can also be `disabled` individually.\n * This enables you to ask users to provide required data to be able to continue.\n */\n@Component({\n    tag: 'limel-example-progress-flow-disabled-step',\n    shadow: true,\n})\nexport class ProgressFlowDisabledStepExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: '1',\n            text: 'Choose a user name',\n        },\n        {\n            value: '2',\n            text: 'Choose a password',\n            selected: true,\n        },\n        {\n            value: '3',\n            text: 'Enable 2-factor authentication',\n            disabled: true,\n        },\n        {\n            value: '4',\n            text: \"Let's go!\",\n            disabled: true,\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-narrow.tsx","fileName":"progress-flow-narrow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-narrow","overview":"Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component.","usage":{},"docs":"Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-narrow":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-narrow.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '@limetech/lime-elements';\n\n/**\n * Compact layout\n *\n * For cases where this component needs to take as little space as possible,\n * we offer an alternative layout. All you need to do is addin the `is-narrow`\n * class to the component.\n */\n@Component({\n    tag: 'limel-example-progress-flow-narrow',\n    shadow: true,\n})\nexport class ProgressNarrowExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'first',\n            text: 'First step',\n            selected: true,\n        },\n        {\n            value: 'second',\n            text: 'Second step',\n        },\n        {\n            value: 'third',\n            text: 'Third step',\n        },\n        {\n            value: 'fourth',\n            text: 'Fourth step',\n            icon: 'finish_flag',\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n                class=\"is-narrow\"\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-off-progress-steps.tsx","fileName":"progress-flow-off-progress-steps.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-off-progress-steps","overview":"Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","usage":{},"docs":"Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-off-progress-steps":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-off-progress-steps.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '@limetech/lime-elements';\n\n/**\n * Example with off-progress steps\n *\n * Naturally, the Progress Flow component is used to visualize a continuous linear\n * process. But sometimes such processes can be abrupted, despite the level of progress.\n *\n * Abruptions can be excluded and displayed separately (not as a part of the flow)\n * using the `isOffProgress` property.\n *\n */\n@Component({\n    tag: 'limel-example-progress-flow-off-progress-steps',\n    shadow: true,\n})\nexport class ProgressFlowOffProgressStepsExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: 'contact',\n            text: 'Customer contact',\n            selectedColor: 'rgb(var(--color-orange-default))',\n            selected: true,\n            icon: 'meeting',\n        },\n        {\n            value: 'requirement',\n            text: 'Demand analysis',\n            selectedColor: 'rgb(var(--color-sky-default))',\n            icon: 'combo_chart',\n        },\n        {\n            value: 'tender',\n            text: 'Quote',\n            selectedColor: 'rgb(var(--color-green-default))',\n            icon: 'paper_plane',\n        },\n        {\n            value: 'agreement',\n            text: 'Agreement',\n            selectedColor: 'rgb(var(--color-teal-default))',\n            icon: 'agreement',\n        },\n        {\n            value: 'rejected',\n            text: 'Rejected',\n            isOffProgress: true,\n            selectedColor: 'rgb(var(--color-red-dark))',\n            icon: {\n                name: 'do_not_disturb',\n                color: 'rgb(var(--color-red-dark))',\n            },\n        },\n        {\n            value: 'onhold',\n            text: 'On hold',\n            isOffProgress: true,\n            selectedColor: 'rgb(var(--color-coral-default))',\n            icon: {\n                name: 'circled_pause',\n                color: 'rgb(var(--color-coral-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples","filePath":"./src/components/progress-flow/examples/progress-flow-with-secondary-text.tsx","fileName":"progress-flow-with-secondary-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/examples/usage","tag":"limel-example-progress-flow-secondary-text","overview":"Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","usage":{},"docs":"Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-progress-flow"],"dependencyGraph":{"limel-example-progress-flow-secondary-text":["limel-progress-flow"],"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-with-secondary-text.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FlowItem } from '@limetech/lime-elements';\n\n/**\n * Example with secondary text\n *\n * A `secondaryText` can be used to add further information to steps.\n * This could be for instance a timestamp of when a step was activated by the user\n * or an explainatory text.\n */\n@Component({\n    tag: 'limel-example-progress-flow-secondary-text',\n    shadow: true,\n})\nexport class ProgressFlowSecondaryTextExample {\n    @State()\n    private flowItems: FlowItem[] = [\n        {\n            value: '1',\n            text: 'Todo',\n            icon: 'add_ticket',\n            secondaryText: 'Added: 2021-May-26',\n        },\n        {\n            value: '2',\n            text: 'Working on it',\n            icon: 'outgoing_data',\n            selected: true,\n            secondaryText: 'Started: 2021-May-27',\n        },\n        { value: '3', text: 'Done', icon: 'ok' },\n    ];\n\n    public render() {\n        return (\n            <limel-progress-flow\n                flowItems={this.flowItems}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<FlowItem>) => {\n        this.flowItems = this.flowItems.map((item) => {\n            return {\n                ...item,\n                selected: item.value === event.detail?.value,\n            };\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/props-factory-form.tsx","fileName":"props-factory-form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-props-factory-form","overview":"Using `propsFactory`","usage":{},"docs":"Using `propsFactory`","docsTags":[{"name":"sourceFile","text":"props-factory-schema.ts"},{"name":"sourceFile","text":"props-factory-picker.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-example-value"],"dependencyGraph":{"limel-example-props-factory-form":["limel-form","limel-example-value"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"props-factory-form.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { PropsFactoryFormData, schema } from './props-factory-schema';\nimport { FormSchema } from '@limetech/lime-elements';\n\n/**\n * Using `propsFactory`\n *\n * @sourceFile props-factory-schema.ts\n * @sourceFile props-factory-picker.tsx\n */\n@Component({\n    tag: 'limel-example-props-factory-form',\n    shadow: true,\n})\nexport class PropsFactoryFormExample {\n    @State()\n    private formData: PropsFactoryFormData = {\n        hero: 1001,\n    };\n\n    private anObjectToInject = {\n        someProp: 'The object was successfully injected!',\n    };\n    private aStringToInject = 'The string was successfully injected!';\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n                propsFactory={this.propsFactory}\n            />,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private propsFactory = (subSchema: FormSchema) => {\n        if (\n            subSchema.lime?.component?.name ===\n            'limel-example-props-factory-picker'\n        ) {\n            return {\n                injectedObject: this.anObjectToInject,\n                injectedString: this.aStringToInject,\n            };\n        }\n    };\n\n    private handleFormChange = (event: CustomEvent<object>) => {\n        this.formData = event.detail;\n    };\n}\n"},{"filename":"props-factory-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\nexport interface PropsFactoryFormData {\n    hero?: number;\n}\n\nexport const schema: FormSchema<PropsFactoryFormData> = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'limel-example-props-factory-picker',\n                },\n            },\n        },\n    },\n};\n"},{"filename":"props-factory-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport {\n    FormComponent,\n    LimelPickerCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-props-factory-picker',\n    shadow: true,\n})\nexport class PropsFactoryPickerExample implements FormComponent<number> {\n    /**\n     * An object injected using `propsFactory`\n     */\n    @Prop()\n    public injectedObject: { someProp: string };\n\n    /**\n     * A string injected using `propsFactory`\n     */\n    @Prop()\n    public injectedString: string;\n\n    /**\n     * The value of the property\n     */\n    @Prop()\n    public value: number;\n\n    /**\n     * Label to display next to the input field\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop()\n    public required: boolean;\n\n    /**\n     * Set to `true` if the value is readonly\n     */\n    @Prop()\n    public readonly: boolean;\n\n    /**\n     * Set to `true` if input should be disabled\n     */\n    @Prop()\n    public disabled: boolean;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: {\n                name: 'superman',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: {\n                name: 'squirrel',\n                color: 'var(--lime-orange)',\n            },\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: {\n                name: 'captain_america',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: {\n                name: 'spider',\n                color: 'var(--lime-dark-grey)',\n            },\n        },\n    ];\n\n    public componentWillLoad() {\n        console.log(\n            'propsFactory-picker - this.injectedObject.someProp:',\n            this.injectedObject.someProp\n        );\n        console.log(\n            'propsFactory-picker - this.injectedString:',\n            this.injectedString\n        );\n    }\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/props-factory-picker.tsx","fileName":"props-factory-picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-props-factory-picker","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-picker"],"dependencyGraph":{"limel-example-props-factory-picker":["limel-picker"],"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Set to `true` if input should be disabled","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"injectedObject","type":"{ someProp: string; }","mutable":false,"reflectToAttr":false,"docs":"An object injected using `propsFactory`","docsTags":[],"values":[{"type":"{ someProp: string; }"}],"optional":false,"required":false},{"name":"injectedString","type":"string","mutable":false,"attr":"injected-string","reflectToAttr":false,"docs":"A string injected using `propsFactory`","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"Label to display next to the input field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"Set to `true` if the value is readonly","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":false,"docs":"Set to `true` if a value is required","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value of the property","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value is changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"props-factory-picker.tsx","type":"tsx","source":"import { Component, h, Prop, EventEmitter, Event } from '@stencil/core';\nimport {\n    FormComponent,\n    LimelPickerCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-props-factory-picker',\n    shadow: true,\n})\nexport class PropsFactoryPickerExample implements FormComponent<number> {\n    /**\n     * An object injected using `propsFactory`\n     */\n    @Prop()\n    public injectedObject: { someProp: string };\n\n    /**\n     * A string injected using `propsFactory`\n     */\n    @Prop()\n    public injectedString: string;\n\n    /**\n     * The value of the property\n     */\n    @Prop()\n    public value: number;\n\n    /**\n     * Label to display next to the input field\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop()\n    public required: boolean;\n\n    /**\n     * Set to `true` if the value is readonly\n     */\n    @Prop()\n    public readonly: boolean;\n\n    /**\n     * Set to `true` if input should be disabled\n     */\n    @Prop()\n    public disabled: boolean;\n\n    /**\n     * Emitted when the value is changed\n     */\n    @Event()\n    public change: EventEmitter<number>;\n\n    private heroes: Array<ListItem<number>> = [\n        {\n            text: 'Superman',\n            value: 1001,\n            icon: {\n                name: 'superman',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Squirrel Girl',\n            value: 1002,\n            icon: {\n                name: 'squirrel',\n                color: 'var(--lime-orange)',\n            },\n        },\n        {\n            text: 'Captain America',\n            value: 1003,\n            icon: {\n                name: 'captain_america',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Black Widow',\n            value: 1004,\n            icon: {\n                name: 'spider',\n                color: 'var(--lime-dark-grey)',\n            },\n        },\n    ];\n\n    public componentWillLoad() {\n        console.log(\n            'propsFactory-picker - this.injectedObject.someProp:',\n            this.injectedObject.someProp\n        );\n        console.log(\n            'propsFactory-picker - this.injectedString:',\n            this.injectedString\n        );\n    }\n\n    private handleChange = (\n        event: LimelPickerCustomEvent<ListItem<number>>\n    ) => {\n        event.stopPropagation();\n        this.change.emit(event.detail?.value);\n    };\n\n    private search = async (query: string): Promise<ListItem[]> => {\n        return this.heroes.filter((hero) => {\n            return hero.text.toLowerCase().includes(query.toLowerCase());\n        });\n    };\n\n    public render() {\n        const value = this.heroes.find((hero) => hero.value === this.value);\n\n        return (\n            <limel-picker\n                label={this.label}\n                value={value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                searcher={this.search}\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/examples","filePath":"./src/components/text-editor/prosemirror-adapter/examples/prosemirror-adapter-basic.tsx","fileName":"prosemirror-adapter-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/examples/usage","tag":"limel-example-prosemirror-adapter-basic","overview":"Basic example\n\nTry typing and editing text, or copy & paste in some rendered HTML code\nfrom your browser into the editor to see how it is rendered and what you get\nas an output value.","usage":{},"docs":"Basic example\n\nTry typing and editing text, or copy & paste in some rendered HTML code\nfrom your browser into the editor to see how it is rendered and what you get\nas an output value.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-prosemirror-adapter","limel-example-value"],"dependencyGraph":{"limel-example-prosemirror-adapter-basic":["limel-prosemirror-adapter","limel-example-value"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"prosemirror-adapter-basic.tsx","type":"tsx","source":"import { LimelProsemirrorAdapterCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Basic example\n *\n * Try typing and editing text, or copy & paste in some rendered HTML code\n * from your browser into the editor to see how it is rendered and what you get\n * as an output value.\n */\n@Component({\n    tag: 'limel-example-prosemirror-adapter-basic',\n    shadow: true,\n})\nexport class ProsemirrorAdapterBasicExample {\n    @State()\n    private text: string = '';\n\n    public render() {\n        return [\n            <limel-prosemirror-adapter onChange={this.handleChange} />,\n            <limel-example-value value={this.text} />,\n        ];\n    }\n\n    private handleChange = (\n        event: LimelProsemirrorAdapterCustomEvent<string>\n    ): void => {\n        event.stopPropagation();\n\n        this.text = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/examples","filePath":"./src/components/text-editor/prosemirror-adapter/examples/prosemirror-adapter-with-custom-menu.tsx","fileName":"prosemirror-adapter-with-custom-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/examples/usage","tag":"limel-example-prosemirror-adapter-with-custom-menu","overview":"Example with custom menu","usage":{},"docs":"Example with custom menu","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-prosemirror-adapter","limel-example-value"],"dependencyGraph":{"limel-example-prosemirror-adapter-with-custom-menu":["limel-prosemirror-adapter","limel-example-value"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"prosemirror-adapter-with-custom-menu.tsx","type":"tsx","source":"import { LimelProsemirrorAdapterCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Example with custom menu\n */\n@Component({\n    tag: 'limel-example-prosemirror-adapter-with-custom-menu',\n    shadow: true,\n})\nexport class ProsemirrorAdapterWithCustomMenuExample {\n    @State()\n    private text: string = '';\n\n    public render() {\n        return [\n            <limel-prosemirror-adapter\n                onChange={this.handleChange}\n                // menuItems={menuItems}\n            />,\n            <limel-example-value value={this.text} />,\n        ];\n    }\n\n    private handleChange = (\n        event: LimelProsemirrorAdapterCustomEvent<string>\n    ): void => {\n        event.stopPropagation();\n\n        this.text = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples","filePath":"./src/components/help/examples/help-read-more.tsx","fileName":"help-read-more.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/help/examples/usage","tag":"limel-example-read-more","overview":"Help with the read more link\nIf a `readMoreLink` supplied, it will render a \"Read more\" link at the bottom of the content.\n\nEven though you can add a link anywhere in the content, it is recommended to\nuse the read more link. Because it will always be displayed at the bottom\nof the popover after the content, does not scroll away with the content,\nand it will be styled in a consistent way.","usage":{},"docs":"Help with the read more link\nIf a `readMoreLink` supplied, it will render a \"Read more\" link at the bottom of the content.\n\nEven though you can add a link anywhere in the content, it is recommended to\nuse the read more link. Because it will always be displayed at the bottom\nof the popover after the content, does not scroll away with the content,\nand it will be styled in a consistent way.","docsTags":[{"name":"sourceFile","text":"help-and-documentation.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-help"],"dependencyGraph":{"limel-example-read-more":["limel-help"],"limel-help":["limel-popover","limel-help-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-help-content":["limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"help-read-more.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { helpAndDocumentation, link } from './help-and-documentation';\n\n/**\n * Help with the read more link\n * If a `readMoreLink` supplied, it will render a \"Read more\" link at the bottom of the content.\n *\n * Even though you can add a link anywhere in the content, it is recommended to\n * use the read more link. Because it will always be displayed at the bottom\n * of the popover after the content, does not scroll away with the content,\n * and it will be styled in a consistent way.\n *\n * @sourceFile help-and-documentation.ts\n */\n\n@Component({\n    tag: 'limel-example-read-more',\n    shadow: true,\n})\nexport class HelpReadMoreExample {\n    public render() {\n        return <limel-help value={helpAndDocumentation} readMoreLink={link} />;\n    }\n}\n"},{"filename":"help-and-documentation.ts","type":"ts","source":"export const helpAndDocumentation = `\n### Help and Documentation\n\n_(Usability Heuristic #10)_\n\n#### Summary\n\nInterface help comes in two forms: proactive and reactive. Proactive help is intended to get users familiar with an interface while reactive help is meant for troubleshooting and gaining system proficiency.\n\n#### Intro\n\nWebsites and applications can offer two types of help: _proactive_ and _reactive_.\n\n- **Proactive help** is provided before the user has encountered a problem, in order to prevent issues. It includes [onboarding tutorials](https://www.nngroup.com/articles/mobile-app-onboarding/) and contextual tips.\n- **Reactive help** in contrast includes materials such as documentation, videos, or even tutorials for those situations when users have an issue and they seek out advice to address it. (Even though some users may consume such materials proactively, it is rare that they do so.)\n`;\n\nexport const link = {\n    href: 'https://www.nngroup.com/articles/help-and-documentation/',\n    title: 'Opens in a new window',\n    target: '_blank',\n    text: 'Read more...',\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples","filePath":"./src/design-guidelines/boolean/examples/readonly-props.tsx","fileName":"readonly-props.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/usage","tag":"limel-example-readonly-props","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox","limel-switch","limel-example-controls","limel-example-value"],"dependencyGraph":{"limel-example-readonly-props":["limel-checkbox","limel-switch","limel-example-controls","limel-example-value"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-switch":["limel-helper-line","limel-dynamic-label"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"readonly-props.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-readonly-props',\n    shadow: true,\n    styleUrl: 'readonly-props.scss',\n})\nexport class ReadonlyPropsExample {\n    @State()\n    private value: boolean = false;\n\n    @State()\n    private readonly: boolean = true;\n\n    public render() {\n        return [\n            <table>\n                <thead>\n                    <tr>\n                        <th>Default</th>\n                        <th>Customized</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            <limel-checkbox\n                                readonly={this.readonly}\n                                label=\"Debt\"\n                                checked={this.value}\n                            />\n                        </td>\n                        <td>\n                            <limel-checkbox\n                                readonly={this.readonly}\n                                label=\"Debt\"\n                                checked={this.value}\n                                readonlyLabels={[\n                                    {\n                                        value: true,\n                                        icon: {\n                                            name: 'error',\n                                            color: 'rgb(var(--color-red-default))',\n                                            backgroundColor:\n                                                'rgb(var(--color-yellow-default))',\n                                        },\n                                        text: 'Has debts',\n                                    },\n                                    {\n                                        value: false,\n                                        icon: {\n                                            name: 'ok',\n                                            color: 'rgb(var(--color-green-default))',\n                                        },\n                                        text: 'Does not have debts',\n                                    },\n                                ]}\n                            />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <limel-checkbox\n                                readonly={this.readonly}\n                                label=\"Quit\"\n                                checked={this.value}\n                            />\n                        </td>\n                        <td>\n                            <limel-checkbox\n                                readonly={this.readonly}\n                                label=\"Quit\"\n                                checked={this.value}\n                                readonlyLabels={[\n                                    {\n                                        value: true,\n                                        icon: {\n                                            name: 'inactive_state',\n                                            color: 'rgb(var(--color-gray-default))',\n                                        },\n                                        text: 'Has quit their job',\n                                    },\n                                    {\n                                        value: false,\n                                        icon: {\n                                            name: 'in_progress',\n                                            color: 'rgb(var(--color-sky-default))',\n                                        },\n                                        text: 'Still works here',\n                                    },\n                                ]}\n                            />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <limel-switch\n                                readonly={this.readonly}\n                                label=\"Newsletter\"\n                                value={this.value}\n                            />\n                        </td>\n                        <td>\n                            <limel-switch\n                                readonly={this.readonly}\n                                label=\"Newsletter\"\n                                value={this.value}\n                                readonlyLabels={[\n                                    {\n                                        value: true,\n                                        icon: 'news',\n                                        text: 'Subscribed to receive newsletters',\n                                    },\n                                    {\n                                        value: false,\n                                        icon: {\n                                            name: 'cancel_subscription',\n                                            color: 'rgb(var(--color-orange-default))',\n                                        },\n                                        text: 'Unsubscribed from newsletters',\n                                    },\n                                ]}\n                            />\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <limel-switch\n                                readonly={this.readonly}\n                                label=\"Mute\"\n                                value={this.value}\n                            />\n                        </td>\n                        <td>\n                            <limel-switch\n                                readonly={this.readonly}\n                                label=\"Mute\"\n                                value={this.value}\n                                readonlyLabels={[\n                                    {\n                                        value: true,\n                                        icon: {\n                                            name: 'no_microphone',\n                                            color: 'rgb(var(--color-gray-light))',\n                                        },\n                                        text: \"You're muted\",\n                                    },\n                                    {\n                                        value: false,\n                                        icon: 'microphone',\n                                        text: 'Microphone is active…',\n                                    },\n                                ]}\n                            />\n                        </td>\n                    </tr>\n                </tbody>\n            </table>,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Toggle value\"\n                    onChange={this.setChecked}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Toggle readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-example-value label=\"Current value\" value={this.value} />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"},{"filename":"readonly-props.scss","type":"scss","source":":host {\n    --example-controls-column-layout: auto-fit;\n    display: block;\n    font-family: var(--kompendium-example-font-family, inherit);\n    font-size: var(--kompendium-example-font-size, inherit);\n    line-height: var(--kompendium-example-line-height, inherit);\n    color: var(--kompendium-example-color, inherit);\n    padding: 1.25rem;\n    margin: 1rem;\n    border-radius: 0.875rem;\n    background-color: rgb(var(--kompendium-contrast-100));\n    border: 1px solid rgb(var(--kompendium-contrast-300));\n    box-shadow: var(--shadow-showcase);\n}\n\ntable {\n    text-align: left;\n    width: 100%;\n}\n\ntd {\n    padding: 0.5rem 0;\n    width: 50%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select.tsx","fileName":"select.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-select":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-select',\n})\nexport class SelectExample {\n    @State()\n    public value: Option;\n\n    @State()\n    public disabled = false;\n\n    @State()\n    public readonly = false;\n\n    @State()\n    public required = false;\n\n    @State()\n    public invalid = false;\n\n    private options: Option[] = [\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han', disabled: true },\n        { text: 'Leia Organo', value: 'leia' },\n    ];\n\n    public render() {\n        return [\n            <limel-select\n                label=\"Favorite hero\"\n                helperText=\"May the force be with him or her\"\n                value={this.value}\n                options={this.options}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                invalid={this.invalid}\n                onChange={this.changeHandler}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-change-options.tsx","fileName":"select-change-options.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-change-options","overview":"Changing Available Options\n\nThis example shows how the component works when options are changed\nprogrammatically during the lifetime of the component.\n\nWe have 5 different sets of options:\n1. A set of options with an empty and disabled first option. This is used to ensure that the empty option cannot be re-selected.\n2. A set of options with an empty but non-disabled first option. This is used to ensure that the empty option can be re-selected.\n3. An empty array. This is used to ensure that the component can handle an empty set of options. To load the component with an empty set of options, select this group, then click the \"Reinitialize\" button.\n4. A set of 3 options.\n5. A set of 4 options. Set 4 and 5 are used to ensure that the component can handle sets of different sizes.","usage":{},"docs":"Changing Available Options\n\nThis example shows how the component works when options are changed\nprogrammatically during the lifetime of the component.\n\nWe have 5 different sets of options:\n1. A set of options with an empty and disabled first option. This is used to ensure that the empty option cannot be re-selected.\n2. A set of options with an empty but non-disabled first option. This is used to ensure that the empty option can be re-selected.\n3. An empty array. This is used to ensure that the component can handle an empty set of options. To load the component with an empty set of options, select this group, then click the \"Reinitialize\" button.\n4. A set of 3 options.\n5. A set of 4 options. Set 4 and 5 are used to ensure that the component can handle sets of different sizes.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-controls","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-select-change-options":["limel-select","limel-example-controls","limel-button","limel-example-value"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-change-options.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Changing Available Options\n *\n * This example shows how the component works when options are changed\n * programmatically during the lifetime of the component.\n *\n * We have 5 different sets of options:\n * 1. A set of options with an empty and disabled first option. This is used to ensure that the empty option cannot be re-selected.\n * 2. A set of options with an empty but non-disabled first option. This is used to ensure that the empty option can be re-selected.\n * 3. An empty array. This is used to ensure that the component can handle an empty set of options. To load the component with an empty set of options, select this group, then click the \"Reinitialize\" button.\n * 4. A set of 3 options.\n * 5. A set of 4 options. Set 4 and 5 are used to ensure that the component can handle sets of different sizes.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-change-options',\n})\nexport class SelectExample {\n    @State()\n    private value: Option;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private currentOptionGroup = 0;\n\n    @State()\n    private key = crypto.randomUUID();\n\n    private optionGroups: Option[][] = [\n        [\n            { text: '', value: '', disabled: true },\n            { text: 'Bart Simpson', value: 'bart' },\n            { text: 'Ned Flanders', value: 'ned' },\n        ],\n        [\n            { text: '', value: '' },\n            { text: 'Homer Simpson', value: 'homer' },\n            { text: 'Moe Szyslak', value: 'moe' },\n            { text: 'Ned Flanders', value: 'ned' },\n        ],\n        [],\n        [\n            { text: 'Luke Skywalker', value: 'luke' },\n            { text: 'Han Solo', value: 'han' },\n            { text: 'Leia Organo', value: 'leia' },\n        ],\n        [\n            { text: 'David Tennant', value: '10' },\n            { text: 'Matt Smith', value: '11' },\n            { text: 'Peter Capaldi', value: '12' },\n            { text: 'Jodie Witthaker', value: '13' },\n        ],\n    ];\n\n    private optionGroupSelectOptions: Option[] = [\n        { text: '1 - with empty disabled first option', value: '0' },\n        { text: '2 - with empty non-disabled first option', value: '1' },\n        { text: '3 - empty set', value: '2' },\n        { text: '4 - 3 options', value: '3' },\n        { text: '5 - 4 options', value: '4' },\n    ];\n\n    public componentWillLoad() {\n        this.selectFirstValue();\n    }\n\n    public render() {\n        return (\n            <Host>\n                <limel-select\n                    label=\"Favorite hero\"\n                    value={this.value}\n                    options={this.optionGroups[this.currentOptionGroup]}\n                    disabled={this.disabled}\n                    onChange={this.handleChange}\n                    key={this.key}\n                />\n                <limel-example-controls\n                    style={{ '--example-controls-max-columns-width': '9rem' }}\n                >\n                    <limel-select\n                        label=\"Select Options Group\"\n                        options={this.optionGroupSelectOptions}\n                        value={\n                            this.optionGroupSelectOptions[\n                                this.currentOptionGroup\n                            ]\n                        }\n                        onChange={this.handleOptionsGroupChange}\n                    />\n                    <limel-button\n                        label={this.disabled ? 'Enable' : 'Disable'}\n                        onClick={this.toggleEnabled}\n                    />\n                    <limel-button\n                        label=\"Unset value\"\n                        onClick={this.unsetValue}\n                    />\n                    <limel-button\n                        label=\"Select first value in group\"\n                        onClick={this.selectFirstValue}\n                    />\n                    <limel-button\n                        label=\"Reinitialize\"\n                        onClick={this.reinitialize}\n                    />\n                </limel-example-controls>\n                <limel-example-value value={this.value} />\n                <limel-example-value\n                    label=\"Currently showing option group\"\n                    value={`${this.currentOptionGroup + 1} / ${\n                        this.optionGroups.length\n                    }`}\n                />\n            </Host>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n\n    private handleOptionsGroupChange = (\n        event: LimelSelectCustomEvent<Option>\n    ) => {\n        event.stopPropagation();\n        this.currentOptionGroup = +event.detail.value;\n    };\n\n    private unsetValue = () => {\n        this.value = undefined;\n    };\n\n    private selectFirstValue = () => {\n        this.value = this.optionGroups[this.currentOptionGroup][0];\n    };\n\n    private reinitialize = () => {\n        // We need to change the key to force destruction and recreation of the\n        // component. This is necessary to ensure that the component can handle\n        // being reinitialized with an empty set of options.\n        this.key = crypto.randomUUID();\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-dialog.tsx","fileName":"select-dialog.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-dialog","overview":"Select field inside a dialog","usage":{},"docs":"Select field inside a dialog","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-dialog","limel-select","limel-icon","limel-example-value"],"dependencyGraph":{"limel-example-select-dialog":["limel-button","limel-dialog","limel-select","limel-icon","limel-example-value"],"limel-button":["limel-icon","limel-spinner"],"limel-dialog":["limel-header"],"limel-header":["limel-icon"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-dialog.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Select field inside a dialog\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-dialog',\n    styleUrl: 'select-dialog.scss',\n})\nexport class SelectDialogExample {\n    @State()\n    public heroValue: Option;\n\n    @State()\n    public villainValue: Option;\n\n    @State()\n    public open = false;\n\n    private heroOptions: Option[] = [\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organa', value: 'leia' },\n    ];\n\n    private villainOptions: Option[] = [\n        { text: 'BB-9E', value: 'bb-9e' },\n        { text: 'Unkar Plutt', value: 'unkar' },\n        { text: 'Zam Wessell', value: 'zam' },\n        { text: 'Greedo', value: 'greedo' },\n        { text: 'Evazan and Baba', value: 'evazan_baba' },\n        { text: 'Bossk', value: 'bossk' },\n        { text: 'Count Dooku', value: 'dooku' },\n        { text: 'Captain Phasma', value: 'phasma' },\n        { text: 'Commander Cody', value: 'cody' },\n        { text: 'DJ', value: 'dj' },\n        { text: 'Supreme Leader Snoke', value: 'snoke' },\n        { text: 'Jango Fett', value: 'jango' },\n        { text: 'General Grievous', value: 'grievous' },\n        { text: 'General Hux', value: 'hux' },\n        { text: 'Orson Krennic', value: 'orson' },\n        { text: 'Sebulba', value: 'sebulba' },\n        { text: 'Boba Fett', value: 'boba' },\n        { text: 'Watto', value: 'watto' },\n        { text: 'Jar Jar Binks', value: 'jarjar' },\n        { text: 'The Sarlacc', value: 'sarlacc' },\n        { text: 'Darth Maul', value: 'maul' },\n        { text: 'Jabba the Hutt', value: 'jabba' },\n        { text: 'Anakin Skywalker', value: 'anakin' },\n        { text: 'Grand Moff Tarkin', value: 'tarkin' },\n        { text: 'Kylo Ren', value: 'ren' },\n        { text: 'Emperor Palpatine', value: 'palpatine' },\n        { text: 'Darth Vader', value: 'vader' },\n    ];\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Select characters\"\n                primary={true}\n                onClick={this.handleButtonClick}\n            />,\n            <limel-dialog onClose={this.handleClose} open={this.open}>\n                <limel-select\n                    label=\"Favorite hero\"\n                    value={this.heroValue}\n                    options={this.heroOptions}\n                    onChange={this.handleHeroChange}\n                />\n                <limel-select\n                    label=\"Loathed villain\"\n                    value={this.villainValue}\n                    options={this.villainOptions}\n                    onChange={this.handleVillainChange}\n                />\n                <limel-icon name=\"star_wars\" />\n                <limel-button\n                    slot=\"button\"\n                    primary={true}\n                    label=\"Close\"\n                    onClick={this.handleClose}\n                />\n            </limel-dialog>,\n            <limel-example-value\n                label=\"Favorite hero\"\n                value={this.heroValue}\n            />,\n            <limel-example-value\n                label=\"Loathed villain\"\n                value={this.villainValue}\n            />,\n        ];\n    }\n\n    private handleHeroChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.heroValue = event.detail;\n    };\n\n    private handleVillainChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.villainValue = event.detail;\n    };\n\n    private handleButtonClick = () => {\n        this.open = true;\n    };\n\n    private handleClose = () => {\n        this.open = false;\n    };\n}\n"},{"filename":"select-dialog.scss","type":"scss","source":"limel-dialog {\n    --dialog-height: 400px;\n}\n\nlimel-select {\n    margin-bottom: 1rem;\n}\n\nlimel-icon {\n    height: 300px;\n    width: 300px;\n    color: rgb(var(--contrast-1200));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-multiple.tsx","fileName":"select-multiple.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-multiple","overview":"Select multiple values","usage":{},"docs":"Select multiple values","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-select-multiple":["limel-select","limel-example-controls","limel-checkbox","limel-example-value"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-multiple.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Select multiple values\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-multiple',\n})\nexport class SelectMultipleExample {\n    @State()\n    public value: Option[] = [];\n\n    @State()\n    public disabled = false;\n\n    @State()\n    public readonly = false;\n\n    @State()\n    public required = false;\n\n    private options: Option[] = [\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Obi-Wan Kenobi', value: 'Obi-Wan' },\n        { text: 'Yoda', value: 'Yoda' },\n        { text: 'Rey', value: 'Rey' },\n        { text: 'Leia Organa', value: 'leia4' },\n        { text: 'Ahsoka Tano', value: 'ahsoka' },\n        { text: 'Finn', value: 'finn' },\n        { text: 'Poe Dameron', value: 'poe' },\n        { text: 'Chewbacca', value: 'chewbacca' },\n        { text: 'Mace Windu', value: 'mace' },\n        { text: 'Jyn Erso', value: 'jyn' },\n        { text: 'Qui-Gon Jinn', value: 'qui-gon' },\n        { text: 'Lando Calrissian', value: 'lando' },\n        { text: 'Ezra Bridger', value: 'ezra' },\n        { text: 'Padmé Amidala', value: 'padme' },\n        { text: 'C-3PO', value: 'c-3po' },\n        { text: 'R2-D2', value: 'r2-d2' },\n        { text: 'Aayla Secura', value: 'aayla' },\n        { text: 'Kit Fisto', value: 'kit' },\n        { text: 'Captain Rex', value: 'rex' },\n        { text: 'Sabine Wren', value: 'sabine' },\n        { text: 'Hera Syndulla', value: 'hera' },\n        { text: 'Kanan Jarrus', value: 'kanan' },\n        { text: 'Bodhi Rook', value: 'bodhi' },\n    ];\n\n    public render() {\n        return [\n            <limel-select\n                label=\"Favorite heroes\"\n                value={this.value}\n                options={this.options}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                onChange={this.handleChange}\n                multiple={true}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.required}\n                    label=\"Required\"\n                    onChange={this.setRequired}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: LimelSelectCustomEvent<Option[]>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-preselected.tsx","fileName":"select-preselected.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-preselected","overview":"Specific Value Preselected","usage":{},"docs":"Specific Value Preselected","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-value"],"dependencyGraph":{"limel-example-select-preselected":["limel-select","limel-example-value"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-preselected.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Specific Value Preselected\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-preselected',\n})\nexport class SelectExample {\n    @State()\n    public value: Option = { text: 'Leia Organo', value: 'leia' };\n\n    private options: Option[] = [\n        { text: '', value: '' },\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organo', value: 'leia' },\n    ];\n\n    public render() {\n        return (\n            <section>\n                <limel-select\n                    label=\"Favorite hero\"\n                    value={this.value}\n                    options={this.options}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-with-empty-option.tsx","fileName":"select-with-empty-option.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-with-empty-option","overview":"With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nany chosen value.\n\nThis example demonstrates two different approaches to empty options in select components:\n\n**1. Unlabeled empty option**:\nA select with a completely empty option (both `text` and `value` are empty).\n\nProvides a way to clear a selection without any visible text.\nThis works well when the select's purpose is clear from context\nand \"no selection\" feels intuitive.\n\n**2. Labeled empty option**:\nA select with a labeled empty option (using a label as `text`,\nbut with an empty `value`).\n\nThis approach uses descriptive labels like \"All\", \"None\", while still\nhaving an empty `value`. When good labels are used in the right context,\nthis improves clarity for users by explicitly communicating what an empty\nselection means in this specific context.\n\nTry selecting a value below, and then selecting the empty\noption again. Notice how the select's UI resets to an empty default state,\nif no `text` is provided to label the empty option.\n\n:::important\nIf the component is set as `required`, and the empty option is unlabeled,\nit will be removed from the list.\nThis is to ensure that if users open the required dropdown,\nand close it without selecting anything, the component can make set\nitself to `invalid`, forcing the user to choose a choice,\nbefore being able to continue.\n\nHowever, when the empty option is labeled, it will remain in the list,\neven if the component is set as `required`. This can be confusing for users,\nas they may not understand why the empty option is still available and selectable,\nbut once selected, the component becomes `invalid`.\n:::","usage":{},"docs":"With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nany chosen value.\n\nThis example demonstrates two different approaches to empty options in select components:\n\n**1. Unlabeled empty option**:\nA select with a completely empty option (both `text` and `value` are empty).\n\nProvides a way to clear a selection without any visible text.\nThis works well when the select's purpose is clear from context\nand \"no selection\" feels intuitive.\n\n**2. Labeled empty option**:\nA select with a labeled empty option (using a label as `text`,\nbut with an empty `value`).\n\nThis approach uses descriptive labels like \"All\", \"None\", while still\nhaving an empty `value`. When good labels are used in the right context,\nthis improves clarity for users by explicitly communicating what an empty\nselection means in this specific context.\n\nTry selecting a value below, and then selecting the empty\noption again. Notice how the select's UI resets to an empty default state,\nif no `text` is provided to label the empty option.\n\n:::important\nIf the component is set as `required`, and the empty option is unlabeled,\nit will be removed from the list.\nThis is to ensure that if users open the required dropdown,\nand close it without selecting anything, the component can make set\nitself to `invalid`, forcing the user to choose a choice,\nbefore being able to continue.\n\nHowever, when the empty option is labeled, it will remain in the list,\neven if the component is set as `required`. This can be confusing for users,\nas they may not understand why the empty option is still available and selectable,\nbut once selected, the component becomes `invalid`.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-value","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-select-with-empty-option":["limel-select","limel-example-value","limel-example-controls","limel-checkbox"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-with-empty-option.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * With Empty Option\n *\n * Adding an empty option makes it possible for the user to \"unset\"\n * any chosen value.\n *\n * This example demonstrates two different approaches to empty options in select components:\n *\n * **1. Unlabeled empty option**:\n * A select with a completely empty option (both `text` and `value` are empty).\n *\n * Provides a way to clear a selection without any visible text.\n * This works well when the select's purpose is clear from context\n * and \"no selection\" feels intuitive.\n *\n * **2. Labeled empty option**:\n * A select with a labeled empty option (using a label as `text`,\n * but with an empty `value`).\n *\n * This approach uses descriptive labels like \"All\", \"None\", while still\n * having an empty `value`. When good labels are used in the right context,\n * this improves clarity for users by explicitly communicating what an empty\n * selection means in this specific context.\n *\n * Try selecting a value below, and then selecting the empty\n * option again. Notice how the select's UI resets to an empty default state,\n * if no `text` is provided to label the empty option.\n *\n * :::important\n * If the component is set as `required`, and the empty option is unlabeled,\n * it will be removed from the list.\n * This is to ensure that if users open the required dropdown,\n * and close it without selecting anything, the component can make set\n * itself to `invalid`, forcing the user to choose a choice,\n * before being able to continue.\n *\n * However, when the empty option is labeled, it will remain in the list,\n * even if the component is set as `required`. This can be confusing for users,\n * as they may not understand why the empty option is still available and selectable,\n * but once selected, the component becomes `invalid`.\n * :::\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-with-empty-option',\n})\nexport class SelectWithEmptyOptionExample {\n    @State()\n    public value1: Option;\n\n    @State()\n    public value2: Option;\n\n    @State()\n    public required = false;\n\n    private optionsWithUnlabeledEmpty: Option[] = [\n        { text: '', value: '' },\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organa', value: 'leia' },\n        { text: 'Obi-Wan Kenobi', value: 'obi-wan' },\n    ];\n\n    private optionsWithLabeledEmpty: Option[] = [\n        { text: 'None', value: '' },\n        { text: 'Luke Skywalker', value: 'luke' },\n        { text: 'Han Solo', value: 'han' },\n        { text: 'Leia Organa', value: 'leia' },\n        { text: 'Obi-Wan Kenobi', value: 'obi-wan' },\n    ];\n\n    public render() {\n        return (\n            <section>\n                <h4>Unlabeled Empty Option</h4>\n                <limel-select\n                    label=\"Select a character\"\n                    value={this.value1}\n                    options={this.optionsWithUnlabeledEmpty}\n                    required={this.required}\n                    onChange={this.handleChange1}\n                />\n                <limel-example-value value={this.value1} />\n\n                <h4>Labeled Empty Option</h4>\n                <limel-select\n                    label=\"Select a character\"\n                    value={this.value2}\n                    options={this.optionsWithLabeledEmpty}\n                    required={this.required}\n                    onChange={this.handleChange2}\n                />\n                <limel-example-value value={this.value2} />\n\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.required}\n                        label=\"Required\"\n                        onChange={this.setRequired}\n                    />\n                </limel-example-controls>\n            </section>\n        );\n    }\n\n    private handleChange1 = (event: LimelSelectCustomEvent<Option<string>>) => {\n        this.value1 = event.detail;\n    };\n\n    private handleChange2 = (event: LimelSelectCustomEvent<Option<string>>) => {\n        this.value2 = event.detail;\n    };\n\n    private setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-with-icons.tsx","fileName":"select-with-icons.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-with-icons","overview":"Select with icons for options","usage":{},"docs":"Select with icons for options","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-value"],"dependencyGraph":{"limel-example-select-with-icons":["limel-select","limel-example-value"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-with-icons.tsx","type":"tsx","source":"import { Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Select with icons for options\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-with-icons',\n})\nexport class SelectExample {\n    @State()\n    public value: Option;\n\n    private options: Option[] = [\n        {\n            text: 'Batman',\n            value: 'bat',\n            icon: {\n                name: 'batman_old',\n                color: 'rgb(var(--color-black))',\n            },\n        },\n        {\n            text: 'Iron Man',\n            value: 'iron',\n            disabled: true,\n            icon: {\n                name: 'iron_man',\n                color: 'rgb(var(--color-coral-default))',\n            },\n        },\n        {\n            text: 'Spider-Man',\n            value: 'spider',\n            icon: {\n                name: 'spiderman_head',\n                color: 'rgb(var(--color-red-default))',\n            },\n        },\n        {\n            text: 'Superman',\n            value: 'super',\n            icon: {\n                name: 'superman',\n                color: 'rgb(var(--color-blue-default))',\n            },\n        },\n        {\n            text: 'Wonder Woman',\n            value: 'wonder',\n            icon: {\n                name: 'wonder_woman',\n                color: 'rgb(var(--color-yellow-darker))',\n            },\n        },\n    ];\n\n    public render() {\n        return (\n            <section>\n                <limel-select\n                    label=\"Favorite hero\"\n                    helperText=\"If you see a lack of diversity, it's our icon-provider's fault\"\n                    value={this.value}\n                    options={this.options}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-secondary-text.tsx","fileName":"select-secondary-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-with-secondary-text","overview":"Select with secondary text for options\nUsing a `secondaryText` you can provide additional information about\neach option in the list, helping the users to select the right choice.\n\n:::note\n1. The secondary text is only visible in the dropdown list,\nnot on the selected option in the input field.\n1. Additionally, on touch screen devices, the secondary text will not\nbe visible in the dropdown list, since the component uses the \"native\"\nselect, which does not have support for additional features like this,\nor displaying icons beside the options.\n:::","usage":{},"docs":"Select with secondary text for options\nUsing a `secondaryText` you can provide additional information about\neach option in the list, helping the users to select the right choice.\n\n:::note\n1. The secondary text is only visible in the dropdown list,\nnot on the selected option in the input field.\n1. Additionally, on touch screen devices, the secondary text will not\nbe visible in the dropdown list, since the component uses the \"native\"\nselect, which does not have support for additional features like this,\nor displaying icons beside the options.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-value"],"dependencyGraph":{"limel-example-select-with-secondary-text":["limel-select","limel-example-value"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-secondary-text.tsx","type":"tsx","source":"import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Select with secondary text for options\n * Using a `secondaryText` you can provide additional information about\n * each option in the list, helping the users to select the right choice.\n *\n * :::note\n * 1. The secondary text is only visible in the dropdown list,\n * not on the selected option in the input field.\n * 1. Additionally, on touch screen devices, the secondary text will not\n * be visible in the dropdown list, since the component uses the \"native\"\n * select, which does not have support for additional features like this,\n * or displaying icons beside the options.\n * :::\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-with-secondary-text',\n})\nexport class SelectSecondaryTextExample {\n    @State()\n    public value: Option;\n\n    private options: Option[] = [\n        {\n            text: 'Auto',\n            value: 'auto',\n        },\n        {\n            text: 'English (United States)',\n            secondaryText: '4/4/24 | 123,456.001',\n            value: 'en-US',\n        },\n        {\n            text: 'English (United Kingdom)',\n            secondaryText: '04/04/2024 | 123,456.001',\n            value: 'en-GB',\n        },\n        {\n            text: 'Svenska',\n            secondaryText: '2024-04-04 | 123 456,001',\n            value: 'sv-SE',\n        },\n        {\n            text: 'Soumi',\n            secondaryText: '4.4.2024 | 123 456,001',\n            value: 'fi-FI',\n        },\n        {\n            text: 'Nederlands',\n            secondaryText: '04-04-2024 | 123.456,001',\n            value: 'nl-NL',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-select\n                label=\"Formatting standard\"\n                helperText=\"Affects how dates, and numbers are displayed.\"\n                value={this.value}\n                options={this.options}\n                onChange={this.handleChange}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: LimelSelectCustomEvent<Option>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples","filePath":"./src/components/select/examples/select-separators.tsx","fileName":"select-separators.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/examples/usage","tag":"limel-example-select-with-separators","overview":"Select with separators between options\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists. Read more about advantages of using\nseparators in the\n[List component's documentations](/#/component/limel-list/).","usage":{},"docs":"Select with separators between options\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists. Read more about advantages of using\nseparators in the\n[List component's documentations](/#/component/limel-list/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-select","limel-example-value"],"dependencyGraph":{"limel-example-select-with-separators":["limel-select","limel-example-value"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select-separators.tsx","type":"tsx","source":"import { Option, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n/**\n * Select with separators between options\n *\n * Separators are simple yet powerful design elements that can be\n * employed in lists of items. They offer significant usability advantages\n * by providing valuable visual cues that aid users in perceiving\n * and navigating through lists. Read more about advantages of using\n * separators in the\n * [List component's documentations](/#/component/limel-list/).\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-with-separators',\n})\nexport class SelectSeparatorsExample {\n    @State()\n    public value: Option;\n\n    private options: Array<Option | ListSeparator> = [\n        { separator: true, text: 'Alaskan / Hawaiian' },\n        {\n            text: 'Alaska',\n            value: 'AK',\n        },\n        {\n            text: 'Hawaii',\n            value: 'HI',\n        },\n        { separator: true, text: 'Pacific' },\n        {\n            text: 'California',\n            value: 'CA',\n        },\n        {\n            text: 'Nevada',\n            value: 'NV',\n        },\n        {\n            text: 'Oregon',\n            value: 'OR',\n        },\n        {\n            text: 'Washington',\n            value: 'WA',\n        },\n        { separator: true, text: 'Mountain' },\n        {\n            text: 'Arizona',\n            value: 'AZ',\n        },\n        {\n            text: 'Colorado',\n            value: 'CO',\n        },\n        {\n            text: 'Idaho',\n            value: 'ID',\n        },\n        {\n            text: 'Montana',\n            value: 'MT',\n        },\n        {\n            text: 'Nebraska',\n            value: 'NE',\n        },\n        {\n            text: 'North Dakota',\n            value: 'ND',\n        },\n        {\n            text: 'New Mexico',\n            value: 'NM',\n        },\n        {\n            text: 'Utah',\n            value: 'UT',\n        },\n        {\n            text: 'Wyoming',\n            value: 'WY',\n        },\n        { separator: true, text: 'Central Time Zone' },\n        {\n            text: 'Alabama',\n            value: 'AL',\n        },\n        {\n            text: 'Arkansas',\n            value: 'AR',\n        },\n        {\n            text: 'Illinois',\n            value: 'IL',\n        },\n        {\n            text: 'Iowa',\n            value: 'IA',\n        },\n        {\n            text: 'Kansas',\n            value: 'KS',\n        },\n        {\n            text: 'Louisiana',\n            value: 'LA',\n        },\n        {\n            text: 'Minnesota',\n            value: 'MN',\n        },\n        {\n            text: 'Mississippi',\n            value: 'MS',\n        },\n        {\n            text: 'Missouri',\n            value: 'MO',\n        },\n        {\n            text: 'Oklahoma',\n            value: 'OK',\n        },\n        {\n            text: 'Texas',\n            value: 'TX',\n        },\n        {\n            text: 'Wisconsin',\n            value: 'WI',\n        },\n        { separator: true, text: 'Eastern Time Zone' },\n        {\n            text: 'Connecticut',\n            value: 'CT',\n        },\n        {\n            text: 'Delaware',\n            value: 'DE',\n        },\n        {\n            text: 'Florida',\n            value: 'FL',\n        },\n        {\n            text: 'Georgia',\n            value: 'GA',\n        },\n        {\n            text: 'Indiana',\n            value: 'IN',\n        },\n        {\n            text: 'Kentucky',\n            value: 'KY',\n        },\n        {\n            text: 'Maine',\n            value: 'ME',\n        },\n        {\n            text: 'Maryland',\n            value: 'MD',\n        },\n        {\n            text: 'Massachusetts',\n            value: 'MA',\n        },\n        {\n            text: 'Michigan',\n            value: 'MI',\n        },\n        {\n            text: 'New Hampshire',\n            value: 'NH',\n        },\n        {\n            text: 'New Jersey',\n            value: 'NJ',\n        },\n        {\n            text: 'New York',\n            value: 'NY',\n        },\n        {\n            text: 'North Carolina',\n            value: 'NC',\n        },\n        {\n            text: 'Ohio',\n            value: 'OH',\n        },\n        {\n            text: 'Pennsylvania',\n            value: 'PA',\n        },\n        {\n            text: 'Rhode Island',\n            value: 'RI',\n        },\n        {\n            text: 'South Carolina',\n            value: 'SC',\n        },\n        {\n            text: 'Tennessee',\n            value: 'TN',\n        },\n        {\n            text: 'Vermont',\n            value: 'VT',\n        },\n        {\n            text: 'Virginia',\n            value: 'VA',\n        },\n        {\n            text: 'West Virginia',\n            value: 'WV',\n        },\n        {\n            text: 'Washington D.C.',\n            value: 'DC',\n        },\n    ];\n\n    public render() {\n        return (\n            <section>\n                <limel-select\n                    label=\"Timezone\"\n                    value={this.value}\n                    options={this.options}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples","filePath":"./src/components/form/examples/server-errors.tsx","fileName":"server-errors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/examples/usage","tag":"limel-example-server-errors","overview":"Form with server validation","usage":{},"docs":"Form with server validation","docsTags":[{"name":"sourceFile","text":"list-schema.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form"],"dependencyGraph":{"limel-example-server-errors":["limel-form"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"server-errors.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ValidationError } from '@limetech/lime-elements';\nimport { schema, ListFormData } from './list-schema';\n\n/**\n * Form with server validation\n *\n * @sourceFile list-schema.ts\n */\n@Component({\n    tag: 'limel-example-server-errors',\n    shadow: true,\n})\nexport class FormErrorExample {\n    private formData: ListFormData = {\n        villains: ['Joker', 'Doctor Strange', 'Green Goblin'],\n        squad: [\n            {\n                powers: ['strength'],\n                name: 'Thanos',\n            },\n        ],\n    };\n\n    private errors: ValidationError = {\n        villains: {\n            1: ['This is not a valid villain!'],\n        },\n        squad: {\n            0: {\n                name: ['This is not a valid hero!'],\n            },\n        },\n    };\n\n    public render() {\n        return (\n            <limel-form\n                schema={schema}\n                value={this.formData}\n                errors={this.errors}\n            />\n        );\n    }\n}\n"},{"filename":"list-schema.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\ntype HeroPower = 'strength' | 'speed' | 'invisibility' | 'vision' | 'flight';\n\ninterface Hero {\n    name?: string;\n    powers?: HeroPower[];\n}\nexport interface ListFormData {\n    villains?: string[];\n    squad?: Hero[];\n}\n\nexport const schema: FormSchema<ListFormData> = {\n    type: 'object',\n    properties: {\n        villains: {\n            type: 'array',\n            title: 'Villains',\n            description: 'Enter the evil villains to capture',\n            items: {\n                type: 'string',\n                title: 'Name',\n                description: 'Enter the name of an evil villain',\n                default: 'The Penguin',\n            },\n        },\n        squad: {\n            type: 'array',\n            title: 'Hero squad',\n            description: 'Enter the team of heroes to capture them',\n            items: {\n                type: 'object',\n                title: 'Hero data',\n                description: 'Name and powers of super heroes',\n                properties: {\n                    name: {\n                        type: 'string',\n                        title: 'Name',\n                        description: 'Super hero name',\n                    },\n                    powers: {\n                        type: 'array',\n                        title: 'Powers',\n                        description: 'Available, powers',\n                        uniqueItems: true,\n                        items: {\n                            anyOf: [\n                                {\n                                    type: 'string',\n                                    const: 'strength',\n                                    title: 'Super human strength',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'speed',\n                                    title: 'Lightning fast',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'invisibility',\n                                    title: 'Invisibility',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'vision',\n                                    title: 'X-Ray vision',\n                                },\n                                {\n                                    type: 'string',\n                                    const: 'flight',\n                                    title: 'Flight',\n                                },\n                            ],\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows-bad-usage.tsx","fileName":"surface-shadows-bad-usage.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-shadows-bad-usage","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-icon"],"dependencyGraph":{"limel-example-shadows-bad-usage":["limel-example-do-do-not","limel-icon"],"limel-example-do-do-not":["limel-icon","limel-markdown"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows-bad-usage.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-shadows-bad-usage',\n    shadow: true,\n    styleUrl: 'surface-shadows-bad-usage.scss',\n})\nexport class SurfaceShadowBadUsageExample {\n    public render() {\n        return (\n            <limel-example-do-do-not>\n                <div slot=\"do-not\" class=\"content\">\n                    <p>\n                        Lorem Ipsum racconta una storia. Non come le altre. Un\n                        individuo che, in un giorno d'estate, s'imbatte in\n                        qualcosa di diverso dalla sua consuetudine. Egli\n                        intreccia la sua vita con quelle di altre persone del\n                        suo paese. Persone che hanno problemi di cuore, persone\n                        che, semplicemente, vorrebbero qualcuno con cui parlare.\n                    </p>\n                    <div\n                        class=\"box\"\n                        style={{\n                            boxShadow: 'var(--shadow-depth-64)',\n                        }}\n                    >\n                        <p>To look distinct, I only use a shadow effect.</p>\n                        <p>\n                            But that makes me look like a temporary popover or\n                            some sort of message. The user might think I am\n                            covering some of the content.\n                        </p>\n                    </div>\n                    <p>\n                        Il tutto amalgamato in un viaggio introspettivo nei\n                        pensieri profondi dell'autore. Non è un romanzo. Questa\n                        storia è semplicemente la descrizione di ciò che lo\n                        scrittore si è trovato ad osservare con un taccuino tra\n                        le mani. Perché non c'è nulla di più affascinante della\n                        realtà.\n                    </p>\n                </div>\n\n                <div slot=\"do\" class=\"content\">\n                    <p>\n                        Lorem Ipsum racconta una storia. Non come le altre. Un\n                        individuo che, in un giorno d'estate, s'imbatte in\n                        qualcosa di diverso dalla sua consuetudine. Egli\n                        intreccia la sua vita con quelle di altre persone del\n                        suo paese. Persone che hanno problemi di cuore, persone\n                        che, semplicemente, vorrebbero qualcuno con cui parlare.\n                    </p>\n                    <div\n                        class=\"box\"\n                        style={{\n                            backgroundColor: 'rgb(var(--contrast-400))',\n                            margin: '2rem 0',\n                            paddingTop: '0.25rem',\n                        }}\n                    >\n                        <p>\n                            <limel-icon\n                                name=\"information\"\n                                size=\"x-small\"\n                                badge={true}\n                            />\n                            To look distinct,\n                        </p>\n                        <p>\n                            I use a different background color, a better layout\n                            and enough space with my surrounding content.\n                        </p>\n                    </div>\n                    <p>\n                        Il tutto amalgamato in un viaggio introspettivo nei\n                        pensieri profondi dell'autore. Non è un romanzo. Questa\n                        storia è semplicemente la descrizione di ciò che lo\n                        scrittore si è trovato ad osservare con un taccuino tra\n                        le mani. Perché non c'è nulla di più affascinante della\n                        realtà.\n                    </p>\n                </div>\n            </limel-example-do-do-not>\n        );\n    }\n}\n"},{"filename":"surface-shadows-bad-usage.scss","type":"scss","source":"@use '../../../style/functions';\n\n.surface-shadows-bad-usage {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: functions.pxToRem(40);\n    padding: functions.pxToRem(20);\n}\n\n.content {\n    padding: functions.pxToRem(8) functions.pxToRem(20);\n}\n\n.box {\n    padding: functions.pxToRem(8) functions.pxToRem(20);\n    border-radius: functions.pxToRem(8);\n}\n\nlimel-icon {\n    color: rgb(var(--color-white));\n    background-color: rgb(var(--color-sky-light));\n    display: inline-block;\n    margin-right: functions.pxToRem(8);\n    transform: translateY(functions.pxToRem(3));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut.tsx","fileName":"shortcut.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut","overview":"Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","usage":{},"docs":"Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon","limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Basic example\n *\n * This component acts as a link, and therefore comes with features\n * such as `title` and `target`.\n *\n * The `title` tag of the hyperlink can be used to\n * provide additional information about the link.\n * It improves accessibility both for users with assistive technologies,\n * and sighted users. Hovering and holding the mouse cursor will\n * display a tooltip generated with the specified `title`.\n *\n * What the `target` does is described well in\n * [mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).\n *\n */\n@Component({\n    tag: 'limel-example-shortcut',\n    shadow: true,\n    styleUrl: 'shortcut.scss',\n})\nexport class ShortcutExample {\n    public render() {\n        const link = {\n            href: 'https://www.wikipedia.org/',\n            title: 'Open Wikipedia in a new tab.',\n            target: '_blank',\n        };\n\n        return (\n            <limel-shortcut icon=\"wikipedia\" label=\"Wikipedia\" link={link} />\n        );\n    }\n}\n"},{"filename":"shortcut.scss","type":"scss","source":"limel-shortcut {\n    width: 20%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut-notification.tsx","fileName":"shortcut-notification.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut-notification","overview":"Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","usage":{},"docs":"Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut-notification":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon","limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut-notification.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Displaying a notification badge\n *\n * The component can display a notification badge, which could either be\n * a `number` or a `string`. Read more about how the badge truncates\n * or abbreviates the provided label [here](#/component/limel-badge/).\n *\n */\n@Component({\n    tag: 'limel-example-shortcut-notification',\n    shadow: true,\n    styleUrl: 'shortcut-notification.scss',\n})\nexport class ShortcutNotificationExample {\n    private label1: number = 9951;\n    private label2: string = 'NEW';\n    private label3: string = '';\n\n    public render() {\n        return [\n            <limel-shortcut\n                icon=\"visual_studio\"\n                label=\"Visual Studio Code\"\n                badge={this.label1}\n            />,\n            <limel-shortcut\n                icon=\"skype_copyrighted\"\n                label=\"Skype\"\n                badge={this.label2}\n            />,\n            <limel-shortcut icon=\"slack\" label=\"Slack\" badge={this.label3} />,\n        ];\n    }\n}\n"},{"filename":"shortcut-notification.scss","type":"scss","source":":host(limel-example-shortcut-notification) {\n    display: grid;\n    grid-template-columns: repeat(3, 5rem);\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut-styling.tsx","fileName":"shortcut-styling.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut-styling","overview":"How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","usage":{},"docs":"How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut-styling":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon","limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut-styling.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * How to style the shortcut\n *\n * The component offers different CSS variables for styling\n * the color of the shortcut, and it's icon; as well as\n * radius of it's rounded corners, and colors of the notification badge\n * and its text.\n */\n@Component({\n    tag: 'limel-example-shortcut-styling',\n    shadow: true,\n    styleUrl: 'shortcut-styling.scss',\n})\nexport class ShortcutStylingExample {\n    private label1: number = 9951;\n    private label2: string = '⚠️';\n\n    public render() {\n        return [\n            <limel-shortcut icon=\"visual_studio\" label=\"Visual Studio Code\" />,\n            <limel-shortcut\n                icon=\"skype_copyrighted\"\n                label=\"Skype\"\n                badge={this.label1}\n            />,\n            <limel-shortcut icon=\"slack\" label=\"Slack\" badge={this.label2} />,\n        ];\n    }\n}\n"},{"filename":"shortcut-styling.scss","type":"scss","source":":host(limel-example-shortcut-styling) {\n    display: grid;\n    grid-template-columns: repeat(3, 7rem);\n    align-items: center;\n    justify-content: center;\n    gap: 1rem;\n}\n\nlimel-shortcut {\n    --shortcut-border-radius: 0.5rem;\n\n    &:nth-of-type(1) {\n        --shortcut-icon-color: rgb(var(--color-blue-dark));\n        --shortcut-label-color: rgb(var(--color-blue-darker));\n        --shortcut-background-color: rgb(var(--color-white));\n    }\n\n    &:nth-of-type(2) {\n        --shortcut-icon-color: rgb(var(--color-white));\n        --shortcut-background-color: rgb(var(--color-blue-default));\n        --shortcut-badge-text-color: rgb(var(--contrast-200));\n        --shortcut-badge-background-color: rgb(var(--contrast-1300));\n    }\n\n    &:nth-of-type(3) {\n        --shortcut-icon-color: rgb(var(--color-cyan-lighter));\n        --shortcut-background-color: rgb(var(--color-pink-default));\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples","filePath":"./src/components/shortcut/examples/shortcut-with-click-handler.tsx","fileName":"shortcut-with-click-handler.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/examples/usage","tag":"limel-example-shortcut-with-click-handler","overview":"Example with click handler","usage":{},"docs":"Example with click handler","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-shortcut"],"dependencyGraph":{"limel-example-shortcut-with-click-handler":["limel-shortcut"],"limel-shortcut":["limel-badge","limel-icon","limel-3d-hover-effect-glow"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut-with-click-handler.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Example with click handler\n */\n@Component({\n    tag: 'limel-example-shortcut-with-click-handler',\n    shadow: true,\n    styleUrl: 'shortcut.scss',\n})\nexport class ShortcutWithClickHandlerExample {\n    public render() {\n        const link = {\n            href: '#/component/limel-table',\n            title: 'Open the documentation for limel-table',\n        };\n\n        return (\n            <limel-shortcut\n                icon=\"pivot_table\"\n                label=\"limel-table\"\n                onClick={this.handleClick}\n                link={link}\n            />\n        );\n    }\n\n    private handleClick = (event: PointerEvent) => {\n        if (\n            !(event.altKey || event.ctrlKey || event.metaKey || event.shiftKey)\n        ) {\n            event.preventDefault();\n            alert(\n                \"No modifier key pressed. Link should open in current window, but we might want to handle the navigation with our application's router, to avoid reloading the whole application (if we're in a single page app, like Lime CRM Web Client).\\n\\nTry holding down a modifier key, like Shift, while clicking.\"\n            );\n        }\n    };\n}\n"},{"filename":"shortcut.scss","type":"scss","source":"limel-shortcut {\n    width: 20%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples","filePath":"./src/design-guidelines/size/examples/size.tsx","fileName":"size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/usage","tag":"limel-example-size","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-size":["limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"size.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-size',\n    shadow: true,\n    styleUrl: 'size.scss',\n})\nexport class SizeExample {\n    @State()\n    private visualizeSizes: boolean = false;\n\n    public render() {\n        return [\n            <div\n                id=\"size-rhythm-example\"\n                class={{ 'visualize-sizes': this.visualizeSizes }}\n            >\n                <button class=\"button one\">\n                    <div class=\"label one\">Button 1</div>\n                </button>\n                <button class=\"button two\">\n                    <div class=\"label two\">Button 2</div>\n                </button>\n                <button class=\"button three\">\n                    <div class=\"label three\">Button 3</div>\n                </button>\n            </div>,\n            <limel-checkbox\n                label=\"Visualize sizes\"\n                onChange={this.toggleMode}\n                checked={this.visualizeSizes}\n            />,\n        ];\n    }\n\n    private toggleMode = () => {\n        this.visualizeSizes = !this.visualizeSizes;\n    };\n}\n"},{"filename":"size.scss","type":"scss","source":"@use '../../../style/functions';\n\n:host {\n    display: block;\n    background-color: rgb(var(--contrast-200));\n    border-radius: functions.pxToRem(4);\n}\n\n#size-rhythm-example {\n    background-color: rgb(var(--contrast-400));\n    border-radius: functions.pxToRem(4) functions.pxToRem(4) 0 0;\n    padding: functions.pxToRem(20);\n}\n\n.button {\n    box-sizing: border-box;\n\n    display: inline-block;\n    border: none;\n    border-radius: functions.pxToRem(6);\n\n    height: functions.pxToRem(40);\n    line-height: functions.pxToRem(40);\n    padding: 0 functions.pxToRem(16);\n    margin: 0 functions.pxToRem(6);\n\n    font-size: functions.pxToRem(16);\n    background-color: rgb(var(--contrast-200));\n    box-shadow:\n        0 #{functions.pxToRem(1.5)} #{functions.pxToRem(3.6)} 0\n            rgba(0, 0, 0, 0.232),\n        0 #{functions.pxToRem(0.3)} #{functions.pxToRem(0.9)} 0\n            rgba(0, 0, 0, 0.208);\n\n    &:first-of-type {\n        margin-left: 0;\n    }\n\n    &:focus {\n        outline: none;\n    }\n}\n\n.label {\n    color: rgb(var(--contrast-1200));\n}\n\n// Below visualizes the sizes only, you can ignore it\n@import './partial-styles/visualize-sizes';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples","filePath":"./src/design-guidelines/size/examples/size-edge-case.tsx","fileName":"size-edge-case.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/examples/usage","tag":"limel-example-size-edge-case","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-checkbox"],"dependencyGraph":{"limel-example-size-edge-case":["limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"size-edge-case.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-size-edge-case',\n    shadow: true,\n    styleUrl: 'size-edge-case.scss',\n})\nexport class SizeEdgeCaseExample {\n    @State()\n    private visualizeSizes: boolean = true;\n\n    public render() {\n        return [\n            <div\n                id=\"size-rhythm-edge-case-example\"\n                class={{ 'visualize-sizes': this.visualizeSizes }}\n            >\n                <div class=\"grid\">\n                    <div class=\"row row-1\">\n                        <div class=\"cell picture\"></div>\n                        <div class=\"cell name\">Mäkelä Jehkinen</div>\n                        <div class=\"cell role\">Head of Guardians</div>\n                    </div>\n                    <div class=\"row row-2\">\n                        <div class=\"cell picture\"></div>\n                        <div class=\"cell name\">Goliham Gigantlle</div>\n                        <div class=\"cell role\">Chief Cool Stuff Officer</div>\n                    </div>\n                </div>\n            </div>,\n            <limel-checkbox\n                label=\"Visualize sizes\"\n                onChange={this.toggleMode}\n                checked={this.visualizeSizes}\n            />,\n        ];\n    }\n\n    private toggleMode = () => {\n        this.visualizeSizes = !this.visualizeSizes;\n    };\n}\n"},{"filename":"size-edge-case.scss","type":"scss","source":"@use '../../../style/functions';\n\n$scale-factor: 3.5;\n\n:host {\n    display: block;\n    background-color: rgb(var(--contrast-200));\n    border-radius: functions.pxToRem(4);\n}\n\n* {\n    box-sizing: border-box;\n}\n\n#size-rhythm-edge-case-example {\n    position: relative;\n    background-color: rgb(var(--contrast-400));\n    color: rgb(var(--contrast-1100));\n    padding: functions.pxToRem(40) 0 functions.pxToRem(40) functions.pxToRem(80);\n\n    &:after {\n        content: '';\n        position: absolute;\n        z-index: 1;\n        top: 0;\n        bottom: 0;\n        right: 0;\n        width: 50%;\n        background-image: linear-gradient(\n            to right,\n            rgba(var(--contrast-300), 0),\n            rgb(var(--contrast-300))\n        );\n    }\n}\n\n.grid {\n    display: grid;\n    grid-auto-flow: row;\n    border-radius: functions.pxToRem(12) 0 0 functions.pxToRem(12);\n    overflow: hidden;\n    border: 1px solid rgb(var(--contrast-500));\n}\n\n.row {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns:\n        functions.pxToRem(12 * $scale-factor) functions.pxToRem(\n            48 * $scale-factor\n        )\n        auto;\n    gap: functions.pxToRem(8 * $scale-factor);\n\n    background-color: rgb(var(--contrast-200));\n    padding: functions.pxToRem(6 * $scale-factor);\n\n    &:not(first-of-type) {\n        border-bottom: 1px solid rgb(var(--contrast-500));\n    }\n}\n\n.cell {\n    font-size: functions.pxToRem(20);\n    line-height: functions.pxToRem(12 * $scale-factor);\n    white-space: nowrap;\n\n    &.picture {\n        background-color: rgb(var(--contrast-400));\n        border-radius: functions.pxToRem(6);\n        width: functions.pxToRem(12 * $scale-factor);\n        height: functions.pxToRem(12 * $scale-factor);\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n\n        .row-1 & {\n            background-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 512 512'><defs/><path fill='rgb(255, 87, 34)' fill-rule='nonzero' d='M414.784 512.09H97.218v-63.14c-.06-60.442 38.812-114.482 96.134-133.646 1.911-.693 123.387-.658 125.298.035 57.322 19.165 96.195 73.204 96.134 133.646v63.104z'/><path fill='rgb(255, 204, 188)' fill-rule='nonzero' d='M256.001 369.652a88.178 88.178 0 01-56.38-20.315c-44.608-36.998-69.596-92.69-67.575-150.61l.688-19.474c2.228-66.055 57.175-119.18 123.267-119.18s121.04 53.125 123.267 119.18l.689 19.474c2.02 57.92-22.968 113.612-67.576 150.61A88.178 88.178 0 01256 369.652z'/></svg>\");\n        }\n\n        .row-2 & {\n            background-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 512 512'><defs/><path fill='rgb(139, 195, 74)' fill-rule='nonzero' d='M414.784 512.09H97.218v-63.14c-.06-60.442 38.812-114.482 96.134-133.646 1.911-.693 123.387-.658 125.298.035 57.322 19.165 96.195 73.204 96.134 133.646v63.104z'/><path fill='rgb(255, 204, 188)' fill-rule='nonzero' d='M256.001 369.652a88.178 88.178 0 01-56.38-20.315c-44.608-36.998-69.596-92.69-67.575-150.61l.688-19.474c2.228-66.055 57.175-119.18 123.267-119.18s121.04 53.125 123.267 119.18l.689 19.474c2.02 57.92-22.968 113.612-67.576 150.61A88.178 88.178 0 01256 369.652z'/></svg>\");\n        }\n    }\n}\n\n#size-rhythm-edge-case-example,\n.row,\n.cell {\n    position: relative;\n    &:before,\n    &:after {\n        transition: opacity 0.4s ease;\n        z-index: 1;\n        position: absolute;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: functions.pxToRem(12);\n        color: rgb(var(--contrast-1100));\n        box-sizing: border-box;\n        opacity: 0;\n    }\n}\n\n#size-rhythm-edge-case-example {\n    &:before {\n        content: '24';\n        height: functions.pxToRem(24 * $scale-factor);\n        width: functions.pxToRem(20);\n        top: functions.pxToRem(40);\n        left: functions.pxToRem(52);\n        background-color: rgba(var(--color-gray-dark), 0.7);\n        color: rgb(var(--color-gray-lighter));\n    }\n}\n\n.row-2 {\n    &:before {\n        content: '6';\n        background-color: rgba(var(--color-cyan-light), 0.5);\n        left: functions.pxToRem(1);\n        top: 0;\n        bottom: 0;\n        margin: auto;\n        width: functions.pxToRem(20);\n        height: functions.pxToRem(6 * $scale-factor);\n        transition-delay: 0.2s;\n    }\n\n    .picture {\n        &:before,\n        &:after {\n            content: '6';\n            background-color: rgba(var(--color-cyan-light), 0.5);\n            left: 0;\n            right: 0;\n            margin: auto;\n            width: functions.pxToRem(20);\n            height: functions.pxToRem(6 * $scale-factor);\n            transition-delay: 0.2s;\n        }\n\n        &:before {\n            top: functions.pxToRem(-21);\n        }\n\n        &:after {\n            bottom: functions.pxToRem(-21);\n        }\n    }\n}\n\n.row-1 {\n    .picture,\n    .name {\n        &:after {\n            content: '12';\n            height: functions.pxToRem(12 * $scale-factor);\n            right: functions.pxToRem(-20);\n            top: 0;\n            background-color: rgba(var(--color-orange-default), 0.5);\n            transition-delay: 0.1s;\n        }\n    }\n}\n\n.visualize-sizes {\n    .row,\n    .cell {\n        &:before,\n        &:after {\n            opacity: 1;\n        }\n    }\n    &#size-rhythm-edge-case-example {\n        &:before {\n            opacity: 1;\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider-basic.tsx","fileName":"slider-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider-basic","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-slider-basic":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"],"limel-slider":["limel-helper-line"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-slider-basic',\n    shadow: true,\n})\nexport class SliderBasicExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value = 25;\n\n    private minValue = 15;\n    private maxValue = 75;\n\n    public render() {\n        return [\n            <limel-slider\n                label=\"Basic slider\"\n                unit=\" %\"\n                value={this.value}\n                valuemax={this.maxValue}\n                valuemin={this.minValue}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider-composite.tsx","fileName":"slider-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-controls","limel-form","limel-slider","limel-example-event-printer"],"dependencyGraph":{"limel-example-slider-composite":["limel-example-controls","limel-form","limel-slider","limel-example-event-printer"],"limel-slider":["limel-helper-line"]},"props":[{"name":"schema","type":"FormSchema","mutable":false,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider-composite.tsx","type":"tsx","source":"import { FormSchema } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-slider-composite',\n    shadow: true,\n})\nexport class SliderCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        disabled: false,\n        factor: 1,\n        label: 'Slider',\n        readonly: false,\n        unit: '%',\n        value: 25,\n        valuemin: 0,\n        valuemax: 100,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-slider {...this.props} onChange={this.handleSliderChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private handleSliderChange = (event: CustomEvent<number>) => {\n        this.eventPrinter.writeEvent(event);\n        this.props = { ...this.props, value: event.detail };\n    };\n\n    private renderForm = () => {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider-multiplier.tsx","fileName":"slider-multiplier.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider-multiplier","overview":"With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","usage":{},"docs":"With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-slider","limel-example-value"],"dependencyGraph":{"limel-example-slider-multiplier":["limel-slider","limel-example-value"],"limel-slider":["limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider-multiplier.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With multiplier and step\n *\n * When step is configured and the initial value is not a multiple of the step\n * value, the slider will round the value to the nearest step when it is changed\n * for the first time. After a valid value has been set, only discrete valid\n * values will be possible to pick.\n */\n@Component({\n    tag: 'limel-example-slider-multiplier',\n    shadow: true,\n})\nexport class SliderMultiplierExample {\n    @State()\n    private value = 0.25;\n\n    private factor = 100;\n    private minValue = 0;\n    private maxValue = 1;\n    private step = 0.1;\n\n    public render() {\n        return (\n            <section>\n                <limel-slider\n                    label=\"Slider with multiplier\"\n                    unit=\" %\"\n                    value={this.value}\n                    factor={this.factor}\n                    step={this.step}\n                    valuemax={this.maxValue}\n                    valuemin={this.minValue}\n                    onChange={this.handleChange}\n                />\n                <limel-example-value value={this.value} />\n            </section>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples","filePath":"./src/components/slider/examples/slider-multiplier-percentage-colors.tsx","fileName":"slider-multiplier-percentage-colors.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/examples/usage","tag":"limel-example-slider-multiplier-percentage-colors","overview":"With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","usage":{},"docs":"With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-slider-multiplier-percentage-colors":["limel-slider","limel-example-controls","limel-checkbox","limel-example-value"],"limel-slider":["limel-helper-line"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider-multiplier-percentage-colors.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With percentage colors\n * You can add the `displays-percentage-colors` class to your slider component\n * and it will automatically visualize current percentage colors in real-time.\n *\n * The colors change with intervals of 10 as users drags the slider pin.\n * The color spectrum is not modifiable, and looks like red → orange → yellow\n * → green → teal.\n */\n@Component({\n    tag: 'limel-example-slider-multiplier-percentage-colors',\n    shadow: true,\n})\nexport class SliderMultiplierPercentageColorsExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private value = 0.25;\n\n    private factor = 100;\n    private minValue = 0;\n    private maxValue = 1;\n\n    public render() {\n        return [\n            <limel-slider\n                class=\"displays-percentage-colors\"\n                label=\"Slider with percentage colors\"\n                unit=\" %\"\n                value={this.value}\n                factor={this.factor}\n                valuemax={this.maxValue}\n                valuemin={this.minValue}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.changeHandler}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event: CustomEvent<number>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples","filePath":"./src/components/snackbar/examples/snackbar.tsx","fileName":"snackbar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/usage","tag":"limel-example-snackbar","overview":"Basic example\n\nSnackbars should not necessarily require a deliberate action from the user to dismiss them.\nThis is why the component has a default `timeout` and will disappear even if the user\ndoes not interact with it.\n\nAs you see in this example, there is no `timeout` specified.\nTherefore the snackbar will automatically disappear after a few seconds.\n\n:::important\nMake sure to set a proper timeout, based on the length of the text.\nAn average user must be able to read the full message within the given\ntime!\n:::","usage":{},"docs":"Basic example\n\nSnackbars should not necessarily require a deliberate action from the user to dismiss them.\nThis is why the component has a default `timeout` and will disappear even if the user\ndoes not interact with it.\n\nAs you see in this example, there is no `timeout` specified.\nTherefore the snackbar will automatically disappear after a few seconds.\n\n:::important\nMake sure to set a proper timeout, based on the length of the text.\nAn average user must be able to read the full message within the given\ntime!\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-snackbar"],"dependencyGraph":{"limel-example-snackbar":["limel-button","limel-snackbar"],"limel-button":["limel-icon","limel-spinner"],"limel-snackbar":["limel-button","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Basic example\n *\n * Snackbars should not necessarily require a deliberate action from the user to dismiss them.\n * This is why the component has a default `timeout` and will disappear even if the user\n * does not interact with it.\n *\n * As you see in this example, there is no `timeout` specified.\n * Therefore the snackbar will automatically disappear after a few seconds.\n *\n * :::important\n * Make sure to set a proper timeout, based on the length of the text.\n * An average user must be able to read the full message within the given\n * time!\n * :::\n */\n@Component({\n    tag: 'limel-example-snackbar',\n    shadow: true,\n})\nexport class SnackbarExample {\n    @State()\n    private isOpen: boolean = false;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show snackbar\"\n                onClick={this.handleShowSnackbar}\n            />,\n            <limel-snackbar\n                open={this.isOpen}\n                message=\"Quick scan started. It takes a couple of minutes…\"\n                onHide={this.handleHideSnackbar}\n            />,\n        ];\n    }\n\n    private handleShowSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private handleHideSnackbar = () => {\n        this.isOpen = false;\n        console.log('The scan is still going on in the background.');\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples","filePath":"./src/components/snackbar/examples/snackbar-dismissible.tsx","fileName":"snackbar-dismissible.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/usage","tag":"limel-example-snackbar-dismissible","overview":"Dismissible\nBy default, snackbars display a dismiss button.\nThis allows users to close them at any time, before they time out.\n\nThe reason for this default behavior is that snackbars could be\ncovering other important content on the screen,\nor simply have a timeout longer than the time it takes\nfor the user to read the message.\n\nHowever, you can override this default interaction design by setting the\n`dismissible` property to `false`, which removes the close button.","usage":{},"docs":"Dismissible\nBy default, snackbars display a dismiss button.\nThis allows users to close them at any time, before they time out.\n\nThe reason for this default behavior is that snackbars could be\ncovering other important content on the screen,\nor simply have a timeout longer than the time it takes\nfor the user to read the message.\n\nHowever, you can override this default interaction design by setting the\n`dismissible` property to `false`, which removes the close button.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-example-controls","limel-checkbox","limel-snackbar"],"dependencyGraph":{"limel-example-snackbar-dismissible":["limel-button","limel-example-controls","limel-checkbox","limel-snackbar"],"limel-button":["limel-icon","limel-spinner"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-snackbar":["limel-button","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar-dismissible.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Dismissible\n * By default, snackbars display a dismiss button.\n * This allows users to close them at any time, before they time out.\n *\n * The reason for this default behavior is that snackbars could be\n * covering other important content on the screen,\n * or simply have a timeout longer than the time it takes\n * for the user to read the message.\n *\n * However, you can override this default interaction design by setting the\n * `dismissible` property to `false`, which removes the close button.\n */\n@Component({\n    tag: 'limel-example-snackbar-dismissible',\n    shadow: true,\n})\nexport class SnackbarExample {\n    @State()\n    private dismissible = true;\n\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show snackbar\"\n                onClick={this.triggerSnackbar}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Dismissible\"\n                    checked={this.dismissible}\n                    onChange={this.onChange}\n                />\n            </limel-example-controls>,\n            <limel-snackbar\n                message=\"Your internet connection is restored!\"\n                dismissible={this.dismissible}\n                open={this.isOpen}\n                onHide={this.snackbarWithoutActionOnHide}\n            />,\n        ];\n    }\n\n    private triggerSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private snackbarWithoutActionOnHide = () => {\n        console.log('We will try to reconnect if the connection drops again.');\n        this.isOpen = false;\n    };\n\n    private onChange = (event: CustomEvent<boolean>) => {\n        this.dismissible = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples","filePath":"./src/components/snackbar/examples/snackbar-persistent.tsx","fileName":"snackbar-persistent.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/usage","tag":"limel-example-snackbar-persistent","overview":"Persistent\nDismissive Snackbars appear temporarily, and disappear automatically\nwithout requiring users to manually dismiss them.\nHowever, sometimes you may need to display a Snackbar\nwhich keeps being displayed persistently until the user deliberately takes\nan action or clicks the dismiss button. This could be to ensure that\n\n- the user actually reads message that is being displayed.\n- has time to take an informed decision to press the action button.\n\nTo make a Snackbar persistent, set the `timeout` property to `-1`.","usage":{},"docs":"Persistent\nDismissive Snackbars appear temporarily, and disappear automatically\nwithout requiring users to manually dismiss them.\nHowever, sometimes you may need to display a Snackbar\nwhich keeps being displayed persistently until the user deliberately takes\nan action or clicks the dismiss button. This could be to ensure that\n\n- the user actually reads message that is being displayed.\n- has time to take an informed decision to press the action button.\n\nTo make a Snackbar persistent, set the `timeout` property to `-1`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-snackbar"],"dependencyGraph":{"limel-example-snackbar-persistent":["limel-button","limel-snackbar"],"limel-button":["limel-icon","limel-spinner"],"limel-snackbar":["limel-button","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar-persistent.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Persistent\n * Dismissive Snackbars appear temporarily, and disappear automatically\n * without requiring users to manually dismiss them.\n * However, sometimes you may need to display a Snackbar\n * which keeps being displayed persistently until the user deliberately takes\n * an action or clicks the dismiss button. This could be to ensure that\n *\n * - the user actually reads message that is being displayed.\n * - has time to take an informed decision to press the action button.\n *\n * To make a Snackbar persistent, set the `timeout` property to `-1`.\n */\n@Component({\n    tag: 'limel-example-snackbar-persistent',\n    shadow: true,\n})\nexport class SnackbarPersistentExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show a persistent alert\"\n                onClick={this.triggerSnackbar}\n            />,\n            <limel-snackbar\n                message=\"We use cookies to deliver services and analyze traffic.\"\n                actionText=\"Okay, I got it!\"\n                open={this.isOpen}\n                timeout={-1}\n                onAction={this.snackbarOnAction}\n                onHide={this.handleHide}\n            />,\n        ];\n    }\n\n    private triggerSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private snackbarOnAction = () => {\n        console.log(\n            'Great! You have just agreed with our terms & conditions without reading it.'\n        );\n        this.isOpen = false;\n    };\n\n    private handleHide = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples","filePath":"./src/components/snackbar/examples/snackbar-persistent-non-dismissible.tsx","fileName":"snackbar-persistent-non-dismissible.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/usage","tag":"limel-example-snackbar-persistent-non-dismissible","overview":"Persistent and non-dismissible\nIn some scenarios, a Snackbar that is persistent\ncan simultaneously be non-dismissible.\n\nThis is good for handling cases in which the system tries to\ncommunicate an ongoing background process or a status that the user\ncannot take an action on, but should be kept informed about.\n\nIn such cases, you should programmatically close the Snackbar\nwhen the process is completed or the status changes!","usage":{},"docs":"Persistent and non-dismissible\nIn some scenarios, a Snackbar that is persistent\ncan simultaneously be non-dismissible.\n\nThis is good for handling cases in which the system tries to\ncommunicate an ongoing background process or a status that the user\ncannot take an action on, but should be kept informed about.\n\nIn such cases, you should programmatically close the Snackbar\nwhen the process is completed or the status changes!","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-snackbar","limel-example-controls","limel-switch"],"dependencyGraph":{"limel-example-snackbar-persistent-non-dismissible":["limel-button","limel-snackbar","limel-example-controls","limel-switch"],"limel-button":["limel-icon","limel-spinner"],"limel-snackbar":["limel-button","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar-persistent-non-dismissible.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * Persistent and non-dismissible\n * In some scenarios, a Snackbar that is persistent\n * can simultaneously be non-dismissible.\n *\n * This is good for handling cases in which the system tries to\n * communicate an ongoing background process or a status that the user\n * cannot take an action on, but should be kept informed about.\n *\n * In such cases, you should programmatically close the Snackbar\n * when the process is completed or the status changes!\n */\n@Component({\n    tag: 'limel-example-snackbar-persistent-non-dismissible',\n    shadow: true,\n})\nexport class SnackbarPersistentNonDismissibleExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show a persistent & non-dismissible alert\"\n                onClick={this.triggerSnackbar}\n            />,\n            <limel-snackbar\n                message=\"Your internet connection was lost! Hang on while we're trying to reconnect…\"\n                timeout={0}\n                open={this.isOpen}\n                dismissible={false}\n                onHide={this.handleHide}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-switch\n                    label=\"Toggle online status\"\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private triggerSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private handleChange = (event: CustomEvent<boolean>) => {\n        if (!this.isOpen) {\n            return;\n        }\n\n        if (!event.detail) {\n            return;\n        }\n\n        this.isOpen = false;\n    };\n\n    private handleHide = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples","filePath":"./src/components/snackbar/examples/snackbar-with-action.tsx","fileName":"snackbar-with-action.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/usage","tag":"limel-example-snackbar-with-action","overview":"With actions\nYou can include a single action button inside the snackbar.\n\n:::important\nKeep in mind that pressing the action button will close\nthe snackbar immediately. The user must be informed that their\nrequested action actually took place. If there is no instant\nvisual feedback (for sighted users) in the user interface that\ninforms the user about the updated state, displaying another\nsnackbar could be a good idea.\n:::","usage":{},"docs":"With actions\nYou can include a single action button inside the snackbar.\n\n:::important\nKeep in mind that pressing the action button will close\nthe snackbar immediately. The user must be informed that their\nrequested action actually took place. If there is no instant\nvisual feedback (for sighted users) in the user interface that\ninforms the user about the updated state, displaying another\nsnackbar could be a good idea.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-snackbar"],"dependencyGraph":{"limel-example-snackbar-with-action":["limel-button","limel-snackbar"],"limel-button":["limel-icon","limel-spinner"],"limel-snackbar":["limel-button","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar-with-action.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n\n/**\n * With actions\n * You can include a single action button inside the snackbar.\n *\n * :::important\n * Keep in mind that pressing the action button will close\n * the snackbar immediately. The user must be informed that their\n * requested action actually took place. If there is no instant\n * visual feedback (for sighted users) in the user interface that\n * informs the user about the updated state, displaying another\n * snackbar could be a good idea.\n * :::\n */\n@Component({\n    tag: 'limel-example-snackbar-with-action',\n    shadow: true,\n})\nexport class SnackbarExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        const timeout = 7000;\n\n        return [\n            <limel-button label=\"Send\" onClick={this.triggerSnackbar} />,\n            <limel-snackbar\n                message=\"Your email has been sent.\"\n                actionText=\"Undo\"\n                timeout={timeout}\n                open={this.isOpen}\n                onAction={this.snackbarOnAction}\n                onHide={this.snackbarWithActionOnHide}\n            />,\n        ];\n    }\n\n    private triggerSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private snackbarOnAction = () => {\n        console.log('All good. We did not send the email.');\n        this.isOpen = false;\n    };\n\n    private snackbarWithActionOnHide = () => {\n        console.log(\n            'Now the email has really been sent! There is no way to undo this.'\n        );\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples","filePath":"./src/components/snackbar/examples/snackbar-changing-message.tsx","fileName":"snackbar-changing-message.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/examples/usage","tag":"limel-example-snackbar-with-changing-messages","overview":"With changing messages","usage":{},"docs":"With changing messages","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-snackbar"],"dependencyGraph":{"limel-example-snackbar-with-changing-messages":["limel-button","limel-snackbar"],"limel-button":["limel-icon","limel-spinner"],"limel-snackbar":["limel-button","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"snackbar-changing-message.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With changing messages\n */\n@Component({\n    tag: 'limel-example-snackbar-with-changing-messages',\n    shadow: true,\n})\nexport class SnackbarExample {\n    @State()\n    private isOpen = false;\n\n    @State()\n    private message: string;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Spam me\"\n                onClick={this.triggerSnackbarWithChangingMessage}\n            />,\n            <limel-snackbar\n                message={this.message}\n                open={this.isOpen}\n                timeout={4000}\n                onHide={this.handleHide}\n            />,\n        ];\n    }\n\n    private triggerSnackbarWithChangingMessage = () => {\n        this.trigger('We will show you a new message in 5 seconds', 0);\n        this.trigger('You will see another message in 5 seconds', 5000);\n        this.trigger('The last message comes in 5 seconds', 10_000);\n        this.trigger('There will be no more messages!', 15_000);\n    };\n\n    private trigger = (message: string, timeoutMs: number) => {\n        setTimeout(() => {\n            this.message = message;\n            this.isOpen = true;\n        }, timeoutMs);\n    };\n\n    private handleHide = () => {\n        this.isOpen = false;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples","filePath":"./src/components/spinner/examples/spinner.tsx","fileName":"spinner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/usage","tag":"limel-example-spinner","overview":"With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default, the spinner is rendered as a circle.\nHowever, it is possible to set `limeBranded={true}`,\nwhich renders the spinner's shape as Lime Technologies' logo.","usage":{},"docs":"With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default, the spinner is rendered as a circle.\nHowever, it is possible to set `limeBranded={true}`,\nwhich renders the spinner's shape as Lime Technologies' logo.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-spinner","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-spinner":["limel-spinner","limel-example-controls","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n/**\n * With a generic design or branded for Lime Technologies\n * The `limel-spinner` makes the boring waiting times slightly more cheerful by\n * cycling through nine delightful colors.\n *\n * By default, the spinner is rendered as a circle.\n * However, it is possible to set `limeBranded={true}`,\n * which renders the spinner's shape as Lime Technologies' logo.\n */\n@Component({\n    tag: 'limel-example-spinner',\n    shadow: true,\n})\nexport class SpinnerExample {\n    @State()\n    private limeBranded = true;\n\n    public render() {\n        return [\n            <limel-spinner size=\"medium\" limeBranded={this.limeBranded} />,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-checkbox\n                    checked={this.limeBranded}\n                    label=\"Lime branded\"\n                    onChange={this.renderBranded}\n                />\n            </limel-example-controls>,\n        ];\n    }\n    private renderBranded = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.limeBranded = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples","filePath":"./src/components/spinner/examples/spinner-color.tsx","fileName":"spinner-color.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/usage","tag":"limel-example-spinner-color","overview":"With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","usage":{},"docs":"With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-spinner","limel-example-controls","limel-checkbox"],"dependencyGraph":{"limel-example-spinner-color":["limel-spinner","limel-example-controls","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner-color.tsx","type":"tsx","source":"import { Component, State, h } from '@stencil/core';\n/**\n * With custom colors\n * The `limel-spinner` is designed to cycle through ten colors which are all\n * from Lime Technologies' brand colors.\n *\n * It is of course possible to override these colors.\n */\n@Component({\n    tag: 'limel-example-spinner-color',\n    shadow: true,\n    styleUrl: 'spinner-color.scss',\n})\nexport class SpinnerColorExample {\n    @State()\n    private limeBranded = false;\n\n    public render() {\n        return [\n            <limel-spinner size=\"medium\" limeBranded={this.limeBranded} />,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-checkbox\n                    checked={this.limeBranded}\n                    label=\"Lime branded (default design)\"\n                    onChange={this.renderBranded}\n                />\n            </limel-example-controls>,\n        ];\n    }\n    private renderBranded = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.limeBranded = event.detail;\n    };\n}\n"},{"filename":"spinner-color.scss","type":"scss","source":":host {\n    --spinner-color-1: rgb(var(--lime-brand-color-lime-green));\n    --spinner-color-2: rgb(var(--lime-brand-color-ocean-teal));\n    --spinner-color-3: rgb(var(--lime-brand-color-aqua));\n    --spinner-color-4: rgb(var(--lime-brand-color-bubble-gum));\n    --spinner-color-4: rgb(var(--lime-brand-color-sunny-orange));\n    --spinner-color-5: rgb(var(--lime-brand-color-lime-green));\n    --spinner-color-6: rgb(var(--lime-brand-color-ocean-teal));\n    --spinner-color-7: rgb(var(--lime-brand-color-aqua));\n    --spinner-color-8: rgb(var(--lime-brand-color-bubble-gum));\n    --spinner-color-9: rgb(var(--lime-brand-color-sunny-orange));\n    --spinner-color-10: rgb(var(--lime-brand-color-aqua));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples","filePath":"./src/components/spinner/examples/spinner-size.tsx","fileName":"spinner-size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/examples/usage","tag":"limel-example-spinner-size","overview":"Spinner sizes","usage":{},"docs":"Spinner sizes","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-spinner"],"dependencyGraph":{"limel-example-spinner-size":["limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner-size.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Spinner sizes\n */\n@Component({\n    tag: 'limel-example-spinner-size',\n    shadow: true,\n    styleUrl: 'spinner.scss',\n})\nexport class SpinnerSizeExample {\n    public render() {\n        return [\n            <div class=\"spinner-sizes\">\n                <limel-spinner />\n                <limel-spinner size=\"mini\" />\n                <limel-spinner size=\"x-small\" />\n                <limel-spinner size=\"small\" />\n                <limel-spinner size=\"medium\" />\n                <limel-spinner size=\"large\" />\n            </div>,\n        ];\n    }\n}\n"},{"filename":"spinner.scss","type":"scss","source":".spinner-sizes {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples","filePath":"./src/components/split-button/examples/split-button-basic.tsx","fileName":"split-button-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/usage","tag":"limel-example-split-button-basic","overview":"Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","usage":{},"docs":"Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-split-button"],"dependencyGraph":{"limel-example-split-button-basic":["limel-split-button"],"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"split-button-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ListSeparator, MenuItem } from '@limetech/lime-elements';\n\n/**\n * Basic Example\n *\n * When used correctly, a split button reduces visual complexity of the user interface\n * by grouping similar commands together.\n *\n * :::important\n * Commands which are included in the menu must be variations of the default command,\n * or be very relevant to it.\n * :::\n */\n@Component({\n    tag: 'limel-example-split-button-basic',\n    shadow: true,\n})\nexport class SplitButtonBasicExample {\n    private items: Array<ListSeparator | MenuItem> = [\n        { text: 'Later today', secondaryText: 'at 16:45' },\n        { text: 'Tomorrow', secondaryText: 'at 08:00' },\n        { separator: true },\n        { text: 'Custom time', icon: 'calendar' },\n    ];\n\n    public render() {\n        return (\n            <limel-split-button\n                label=\"Send\"\n                icon=\"send\"\n                items={this.items}\n                onClick={this.onClick}\n                onSelect={this.handleSelect}\n            />\n        );\n    }\n\n    private onClick = () => {\n        console.log('Button clicked.');\n    };\n\n    private handleSelect = (event: CustomEvent<MenuItem>) => {\n        console.log('Menu item chosen', event.detail.text);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples","filePath":"./src/components/split-button/examples/split-button-loading.tsx","fileName":"split-button-loading.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/usage","tag":"limel-example-split-button-loading","overview":"Split button with loading","usage":{},"docs":"Split button with loading","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-split-button"],"dependencyGraph":{"limel-example-split-button-loading":["limel-split-button"],"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"split-button-loading.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { ListSeparator, MenuItem } from '@limetech/lime-elements';\n\n/**\n * Split button with loading\n *\n *\n */\n@Component({\n    tag: 'limel-example-split-button-loading',\n    shadow: true,\n})\nexport class SplitButtonLoadingExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private loadingFailed = false;\n    private items: Array<ListSeparator | MenuItem> = [\n        { text: 'Later today', secondaryText: 'at 16:45' },\n        { text: 'Tomorrow', secondaryText: 'at 08:00' },\n    ];\n\n    public render() {\n        return (\n            <limel-split-button\n                primary={true}\n                loading={this.loading}\n                loadingFailed={this.loadingFailed}\n                disabled={this.disabled}\n                label=\"Send\"\n                icon=\"send\"\n                items={this.items}\n                onClick={this.onClick}\n                onSelect={this.handleSelect}\n            />\n        );\n    }\n\n    private onClick = () => {\n        console.log('Button clicked.');\n        this.disabled = true;\n        this.loading = true;\n        this.loadingFailed = false;\n\n        const TIME_LOADING = 2000;\n        setTimeout(() => {\n            this.loading = false;\n            this.disabled = false;\n            this.loadingFailed = false;\n        }, TIME_LOADING);\n    };\n\n    private handleSelect = (event: CustomEvent<MenuItem>) => {\n        console.log('Menu item chosen', event.detail.text);\n        this.loading = true;\n        this.disabled = true;\n        this.loadingFailed = false;\n\n        const TIME_LOADING = 2000;\n        setTimeout(() => {\n            this.loading = false;\n            this.disabled = false;\n            this.loadingFailed = false;\n        }, TIME_LOADING);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples","filePath":"./src/components/split-button/examples/split-button-repeat-default-command.tsx","fileName":"split-button-repeat-default-command.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/examples/usage","tag":"limel-example-split-button-repeat-default-command","overview":"Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::","usage":{},"docs":"Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-split-button"],"dependencyGraph":{"limel-example-split-button-repeat-default-command":["limel-split-button"],"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"split-button-repeat-default-command.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { ListSeparator, MenuItem } from '@limetech/lime-elements';\n\n/**\n * Repeating the default command in the menu\n *\n * The default command must be the most commonly used action.\n * Such actions typically have a very short label.\n *\n * However, sometimes it could be useful to repeat the default command again\n * in the list of commands, using a more descriptive label which\n * clarifies the default action.\n *\n * :::tip\n * - **Limit the overall number of choices** within the menu to less than 10\n * - **Order the items within the menu by popularity** and put the most popular ones on top.\n * :::\n */\n@Component({\n    tag: 'limel-example-split-button-repeat-default-command',\n    shadow: true,\n})\nexport class SplitButtonRepeatDefaultCommandExample {\n    private items: Array<ListSeparator | MenuItem> = [\n        {\n            text: 'Save',\n            secondaryText: 'and update this file',\n            commandText: '⌘ + S',\n        },\n        { text: 'Save as a new file', commandText: '⌘ + ⌥ + S' },\n    ];\n\n    public render() {\n        return (\n            <limel-split-button\n                label=\"Save\"\n                icon=\"save\"\n                primary={true}\n                items={this.items}\n                onClick={this.onClick}\n                onSelect={this.handleSelect}\n            />\n        );\n    }\n\n    private onClick = () => {\n        console.log('Button clicked.');\n    };\n\n    private handleSelect = (event: CustomEvent<MenuItem>) => {\n        console.log('Menu item chosen', event.detail.text);\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows.tsx","fileName":"surface-shadows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-surface-shadows","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-surface-shadows',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class SurfaceShadowExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid\">\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8\">\n                        <div class=\"label\">Depth 8</div>\n                    </div>\n                    <code>--shadow-depth-8</code>\n                    <p>\n                        suitable for command bars, command dropdowns, context\n                        menus\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-16\">\n                        <div class=\"label two\">Depth 16</div>\n                    </div>\n                    <code>--shadow-depth-16</code>\n                    <p>\n                        suitable for callouts, search result dropdowns, cards,\n                        or tooltips\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-16\">\n                        <div class=\"label two\">Depth 64</div>\n                    </div>\n                    <code>--shadow-depth-64</code>\n                    <p>suitable for modals, dialogs, or pop overs.</p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8-reversed\">\n                        <div class=\"label two\">Depth 8 · Reversed</div>\n                    </div>\n                    <code>--shadow-depth-8-reversed</code>\n                    <p>\n                        Same as `--shadow-depth-8`, but the light source is\n                        below the element. Good to use on bars when they are\n                        placed at the bottom edge of the screen.\n                    </p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows-inflated.tsx","fileName":"surface-shadows-inflated.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-surface-shadows-inflated","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows-inflated.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-surface-shadows-inflated',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class SurfaceShadowInflatedExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid inflated-examples\">\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-inflated-8\">\n                        <div class=\"label\">Inflated 8</div>\n                    </div>\n                    <code>--shadow-inflated-8</code>\n                    <p></p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-inflated-16\">\n                        <div class=\"label two\">Inflated 16</div>\n                    </div>\n                    <code>--shadow-inflated-16</code>\n                    <p></p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-inflated-64\">\n                        <div class=\"label two\">Inflated 64</div>\n                    </div>\n                    <code>--shadow-inflated-64</code>\n                    <p></p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples","filePath":"./src/design-guidelines/shadows/examples/surface-shadows-states.tsx","fileName":"surface-shadows-states.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/examples/usage","tag":"limel-example-surface-shadows-states","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"surface-shadows-states.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-surface-shadows-states',\n    shadow: true,\n    styleUrl: 'shadow-examples.scss',\n})\nexport class SurfaceShadowStateExample {\n    public render() {\n        return [\n            <div class=\"shadow-example-grid\">\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8-focused\">\n                        <div class=\"label\">Depth 8 · Focused</div>\n                    </div>\n                    <code>--shadow-depth-8-focused</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-8`,\n                        when visualizing element focus, e.g. due to keyboard\n                        navigation.\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-16-focused\">\n                        <div class=\"label two\">Depth 16 · Focused</div>\n                    </div>\n                    <code>--shadow-depth-16-focused</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-16`,\n                        when visualizing element focus, e.g. due to keyboard\n                        navigation.\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-64-focused\">\n                        <div class=\"label two\">Depth 64 · Focused</div>\n                    </div>\n                    <code>--shadow-depth-64-focused</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-64`,\n                        when visualizing element focus, e.g. due to keyboard\n                        navigation.\n                    </p>\n                </div>\n                <div class=\"visualization\">\n                    <div class=\"surface shadow-depth-8-error\">\n                        <div class=\"label\">Depth 8 · Error</div>\n                    </div>\n                    <code>--shadow-depth-8-error</code>\n                    <p>\n                        Can be used for elements that have `--shadow-depth-8`,\n                        when visualizing that the element requires attention,\n                        e.g. due to errors.\n                    </p>\n                </div>\n            </div>,\n        ];\n    }\n}\n"},{"filename":"shadow-examples.scss","type":"scss","source":"@use '../../../style/functions';\n@use './button-shadows';\n@use './surface-shadows';\n@use './surface-shadows-inflated';\n\n.shadow-example-grid {\n    display: grid;\n    gap: functions.pxToRem(28);\n    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));\n    padding: functions.pxToRem(20) 0;\n}\n\n.visualization {\n    display: flex;\n    flex-direction: column;\n\n    code {\n        font-size: functions.pxToRem(12);\n        background-color: rgb(var(--kompendium-contrast-500));\n        color: rgb(var(--kompendium-contrast-1100));\n        padding: 0 functions.pxToRem(4);\n        border-radius: functions.pxToRem(3);\n        margin-top: functions.pxToRem(12);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples","filePath":"./src/components/switch/examples/switch.tsx","fileName":"switch.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/usage","tag":"limel-example-switch","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-switch":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"switch.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-switch',\n})\nexport class SwitchExample {\n    @State()\n    private value = true;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    public render() {\n        return [\n            <limel-switch\n                label=\"Bluetooth\"\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                onChange={this.changeHandler}\n                invalid={this.invalid}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Selected\"\n                    onChange={this.setChecked}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event: CustomEvent<boolean>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples","filePath":"./src/components/switch/examples/switch-helper-text.tsx","fileName":"switch-helper-text.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/usage","tag":"limel-example-switch-helper-text","overview":"With `helperText`\n\nSwitch can have a helper text, which is useful when providing additional information and\ncan clarify functionality of the switch for the user.\n\nThe helper text is displayed when the user puts focus on the switch, and works with keyboard\nnavigation as well. However, on touchscreen devices, the helper text is always displayed.","usage":{},"docs":"With `helperText`\n\nSwitch can have a helper text, which is useful when providing additional information and\ncan clarify functionality of the switch for the user.\n\nThe helper text is displayed when the user puts focus on the switch, and works with keyboard\nnavigation as well. However, on touchscreen devices, the helper text is always displayed.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-switch-helper-text":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"switch-helper-text.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * With `helperText`\n *\n * Switch can have a helper text, which is useful when providing additional information and\n * can clarify functionality of the switch for the user.\n *\n * The helper text is displayed when the user puts focus on the switch, and works with keyboard\n * navigation as well. However, on touchscreen devices, the helper text is always displayed.\n */\n\n@Component({\n    shadow: true,\n    tag: 'limel-example-switch-helper-text',\n})\nexport class SwitchExampleHelperText {\n    @State()\n    private value = true;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    public render() {\n        return [\n            <limel-switch\n                label={`Ask Siri: ${this.value.toString()}`}\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                onChange={this.changeHandler}\n                helperText={'Siri helps you get things done, just by asking.'}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Selected\"\n                    onChange={this.setChecked}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private changeHandler = (event: CustomEvent<boolean>) => {\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples","filePath":"./src/components/switch/examples/switch-readonly.tsx","fileName":"switch-readonly.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/switch/examples/usage","tag":"limel-example-switch-readonly","overview":"Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors.","usage":{},"docs":"Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-switch-readonly":["limel-switch","limel-example-controls","limel-checkbox","limel-example-value"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"switch-readonly.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n\n/**\n * Customizing the visualization of the `readonly` state\n * It is possible and recommended that you enhance the visualization of a `boolean` field\n * in a `readonly` state.\n *\n * Because depending on the context, the default UI of the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * :::important\n * Before reading the documentations below, make sure to read\n * 1. our guides about the difference between\n * [Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n * 2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n * :::\n *\n * Using the `readonlyLabels` optional prop, you can override the `label` and\n * customize it accordingly. Additionally, by using the `icon` prop, you can\n * override the default icons and their colors.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-switch-readonly',\n})\nexport class SwitchReadonlyExample {\n    @State()\n    private readonly = true;\n\n    @State()\n    private value = true;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private invalid = false;\n\n    public render() {\n        return [\n            <limel-switch\n                label=\"Subscribe to email newsletters\"\n                readonlyLabels={[\n                    {\n                        value: true,\n                        icon: 'news',\n                        text: 'Is subscribed to receive newsletters',\n                    },\n                    {\n                        value: false,\n                        icon: {\n                            name: 'cancel_subscription',\n                            color: 'rgb(var(--color-orange-default))',\n                        },\n                        text: 'Is unsubscribed from newsletters',\n                    },\n                ]}\n                helperText={this.invalid ? 'Something is wrong' : ''}\n                value={this.value}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n                <limel-checkbox\n                    checked={this.disabled}\n                    label=\"Disabled\"\n                    onChange={this.setDisabled}\n                />\n                <limel-checkbox\n                    checked={this.invalid}\n                    label=\"Invalid\"\n                    onChange={this.setInvalid}\n                />\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Selected\"\n                    onChange={this.setSelected}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private setSelected = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples","filePath":"./src/design-guidelines/boolean/examples/switch-vs-checkbox.tsx","fileName":"switch-vs-checkbox.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/examples/usage","tag":"limel-example-switch-vs-checkbox","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-checkbox","limel-switch","limel-button"],"dependencyGraph":{"limel-example-switch-vs-checkbox":["limel-example-do-do-not","limel-checkbox","limel-switch","limel-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"switch-vs-checkbox.tsx","type":"tsx","source":"import { Component, h, Host } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-switch-vs-checkbox',\n    shadow: true,\n    styleUrl: 'switch-vs-checkbox.scss',\n})\nexport class SwitchVsCheckboxExample {\n    public render() {\n        return (\n            <Host>\n                <limel-example-do-do-not>\n                    <div slot=\"do-not\" class=\"container\">\n                        <p>Settings</p>\n                        <limel-checkbox label=\"Mobile data\" />\n                        <limel-checkbox label=\"Wi-Fi\" />\n                        <limel-checkbox label=\"Bluetooth\" />\n                    </div>\n                    <div slot=\"do\" class=\"container\">\n                        <p>Settings</p>\n                        <limel-switch label=\"Mobile data\" />\n                        <limel-switch label=\"Wi-Fi\" />\n                        <limel-switch label=\"Bluetooth\" />\n                    </div>\n                </limel-example-do-do-not>\n                <hr />\n                <limel-example-do-do-not>\n                    <div slot=\"do-not\" class=\"container\">\n                        <p>Cookie Settings</p>\n                        <limel-switch label=\"Necessary\" />\n                        <limel-switch label=\"Functional\" />\n                        <limel-switch label=\"Session Replay\" />\n                        <limel-switch label=\"Advertising\" />\n                        <div class=\"action-bar\">\n                            <limel-button label=\"Cancel\" />\n                            <limel-button label=\"Save\" primary={true} />\n                        </div>\n                    </div>\n                    <div slot=\"do\" class=\"container\">\n                        <p>Cookie Settings</p>\n                        <limel-checkbox label=\"Necessary\" />\n                        <limel-checkbox label=\"Functional\" />\n                        <limel-checkbox label=\"Session Replay\" />\n                        <limel-checkbox label=\"Advertising\" />\n                        <div class=\"action-bar\">\n                            <limel-button label=\"Cancel\" />\n                            <limel-button label=\"Save\" primary={true} />\n                        </div>\n                    </div>\n                </limel-example-do-do-not>\n            </Host>\n        );\n    }\n}\n"},{"filename":"switch-vs-checkbox.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n}\n\n.container {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n}\n\nlimel-switch {\n    margin-top: 0.25rem;\n\n    &:not(:last-child) {\n        margin-bottom: 0.75rem;\n    }\n}\n\n.action-bar {\n    display: flex;\n    gap: 0.5rem;\n    width: 100%;\n    justify-content: flex-end;\n}\n\nhr {\n    opacity: 0.1;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples","filePath":"./src/components/tab-bar/examples/tab-bar.tsx","fileName":"tab-bar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/usage","tag":"limel-example-tab-bar","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-bar","limel-example-value"],"dependencyGraph":{"limel-example-tab-bar":["limel-tab-bar","limel-example-value"],"limel-tab-bar":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-bar.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-tab-bar',\n    shadow: true,\n})\nexport class TabBarExample {\n    @State()\n    private text: string = 'Joker';\n\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 1,\n            text: 'Joker',\n            icon: {\n                name: 'joker',\n                color: 'var(--lime-green)',\n            },\n            active: true,\n        },\n        {\n            id: 2,\n            text: 'Parasite',\n            icon: {\n                name: 'insect',\n                color: 'var(--lime-magenta)',\n            },\n            badge: 999,\n        },\n        {\n            id: 3,\n            text: 'Harriet',\n            icon: {\n                name: 'administrator_female',\n                color: 'var(--lime-orange)',\n            },\n            badge: 99_940,\n        },\n        {\n            id: 4,\n            text: 'Bombshell',\n            icon: {\n                name: 'surprised',\n                color: 'var(--lime-blue)',\n            },\n            badge: 999_990,\n        },\n        {\n            id: 5,\n            text: 'Judy',\n            icon: {\n                name: 'female',\n                color: 'var(--lime-deep-red)',\n            },\n            badge: 940_000,\n        },\n        {\n            id: 6,\n            text: 'Friends',\n            icon: {\n                name: 'friends',\n                color: 'var(--lime-yellow)',\n            },\n            badge: 1_290_000,\n        },\n        {\n            id: 7,\n            text: 'Little Women',\n            icon: {\n                name: 'female',\n                color: 'var(--lime-deep-red)',\n            },\n            badge: 4,\n        },\n        {\n            id: 8,\n            text: 'Inception',\n            badge: 'NEW',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-bar tabs={this.tabs} onChangeTab={this.handleChange} />,\n            <limel-example-value label=\"Tab\" value={this.text} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<Tab>) => {\n        this.text = event.detail.text;\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples","filePath":"./src/components/tab-bar/examples/tab-bar-with-dynamic-tab-width.tsx","fileName":"tab-bar-with-dynamic-tab-width.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/usage","tag":"limel-example-tab-bar-with-dynamic-tab-width","overview":"Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","usage":{},"docs":"Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-bar","limel-example-value"],"dependencyGraph":{"limel-example-tab-bar-with-dynamic-tab-width":["limel-tab-bar","limel-example-value"],"limel-tab-bar":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-bar-with-dynamic-tab-width.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n/**\n * Default UI of Tab bars\n * By default, tabs dynamically adjust their width to their own content, which\n * means a tab with a larger label will be bigger than one with a shorter one.\n * This is the preferred layout for tabs.\n */\n@Component({\n    tag: 'limel-example-tab-bar-with-dynamic-tab-width',\n    shadow: true,\n})\nexport class TabBarExample {\n    @State()\n    private text: string = 'cats';\n\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 1,\n            text: 'Cats',\n            icon: {\n                name: 'black_cat',\n                color: 'var(--lime-dark-grey)',\n            },\n            active: true,\n        },\n        {\n            id: 2,\n            text: 'Dogs',\n            icon: {\n                name: 'dog',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            id: 3,\n            text: 'Birds',\n            icon: {\n                name: 'bird',\n                color: 'var(--lime-red)',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-bar tabs={this.tabs} onChangeTab={this.handleChange} />,\n            <limel-example-value label=\"Tab\" value={this.text} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<Tab>) => {\n        this.text = event.detail.text;\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples","filePath":"./src/components/tab-bar/examples/tab-bar-with-equal-tab-width.tsx","fileName":"tab-bar-with-equal-tab-width.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/examples/usage","tag":"limel-example-tab-bar-with-equal-tab-width","overview":"Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar.","usage":{},"docs":"Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-bar","limel-example-value"],"dependencyGraph":{"limel-example-tab-bar-with-equal-tab-width":["limel-tab-bar","limel-example-value"],"limel-tab-bar":["limel-icon","limel-badge"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-bar-with-equal-tab-width.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n/**\n * Tab bars with custom styles\n * In some situations and for the sake of UI design, you may want to have tabs\n * that equally share the available screen width and stretch. To get such a\n * result, you can add the `has-tabs-with-equal-width` class to the tab bar.\n */\n@Component({\n    tag: 'limel-example-tab-bar-with-equal-tab-width',\n    shadow: true,\n})\nexport class TabBarExample {\n    @State()\n    private text: string = 'cats';\n\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 1,\n            text: 'Cats',\n            icon: {\n                name: 'black_cat',\n                color: 'var(--lime-dark-grey)',\n            },\n            active: true,\n        },\n        {\n            id: 2,\n            text: 'Dogs',\n            icon: {\n                name: 'dog',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            id: 3,\n            text: 'Birds',\n            icon: {\n                name: 'bird',\n                color: 'var(--lime-red)',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-bar\n                tabs={this.tabs}\n                onChangeTab={this.handleChange}\n                class=\"has-tabs-with-equal-width\"\n            />,\n            <limel-example-value label=\"Tab\" value={this.text} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<Tab>) => {\n        this.text = event.detail.text;\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples","filePath":"./src/components/tab-panel/examples/tab-panel.tsx","fileName":"tab-panel.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/usage","tag":"limel-example-tab-panel","overview":"This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab.","usage":{},"docs":"This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab.","docsTags":[{"name":"sourceFile","text":"tab-panel-content.tsx"},{"name":"sourceFile","text":"tab-panel-content.scss"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-tab-panel","limel-example-tab-panel-content"],"dependencyGraph":{"limel-example-tab-panel":["limel-tab-panel","limel-example-tab-panel-content"],"limel-tab-panel":["limel-tab-bar"],"limel-tab-bar":["limel-icon","limel-badge"],"limel-example-tab-panel-content":["limel-spinner","limel-icon","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-panel.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Tab } from '@limetech/lime-elements';\n\n/**\n * This example illustrates how to add custom components inside the `limel-tab-panel`.\n *\n * Each component will simulate loading the data it needs once the tab has been\n * activated and then display the actual content. If the button is pressed, the\n * component will emit the `changeTab` event to change the badge inside the\n * corresponding tab.\n *\n * @sourceFile tab-panel-content.tsx\n * @sourceFile tab-panel-content.scss\n */\n@Component({\n    tag: 'limel-example-tab-panel',\n    shadow: true,\n    styleUrl: 'tab-panel.scss',\n})\nexport class TabPanelExample {\n    @State()\n    private tabs: Tab[] = [\n        {\n            id: 'joker',\n            text: 'Joker',\n            icon: {\n                name: 'joker',\n                color: 'var(--lime-green)',\n            },\n            active: true,\n        },\n        {\n            id: 'parasite',\n            text: 'Parasite',\n            icon: {\n                name: 'insect',\n                color: 'var(--lime-magenta)',\n            },\n        },\n        {\n            id: 'harriet',\n            text: 'Harriet',\n            icon: {\n                name: 'administrator_female',\n                color: 'var(--lime-orange)',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-tab-panel\n                tabs={this.tabs}\n                onChangeTab={this.handleChangeTab}\n            >\n                <limel-example-tab-panel-content id=\"joker\" />\n                <limel-example-tab-panel-content id=\"parasite\" />\n                <limel-example-tab-panel-content id=\"harriet\" />\n            </limel-tab-panel>,\n        ];\n    }\n\n    private handleChangeTab = (event: CustomEvent<Tab>) => {\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n    };\n}\n"},{"filename":"tab-panel.scss","type":"scss","source":"limel-tab-panel {\n    height: 20rem;\n}\n\nlimel-example-tab-panel-content {\n    display: flex;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n}\n"},{"filename":"tab-panel-content.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Tab, TabPanelComponent } from '@limetech/lime-elements';\n\nconst LOAD_TIME = 1000;\n\n@Component({\n    tag: 'limel-example-tab-panel-content',\n    shadow: true,\n    styleUrl: 'tab-panel-content.scss',\n})\nexport class TabPanelContentExample implements TabPanelComponent {\n    /**\n     * The tab that this component belongs to\n     */\n    @Prop()\n    public tab: Tab;\n\n    /**\n     * Emitted when the vote button is clicked to update the badge in the tab\n     */\n    @Event()\n    public changeTab: EventEmitter<Tab>;\n\n    @State()\n    private votes = 0;\n\n    @State()\n    private loaded = false;\n\n    public render() {\n        if (!this.loaded) {\n            return <limel-spinner />;\n        }\n\n        const style = {\n            backgroundColor: this.tab.icon.color,\n            color: 'white',\n        };\n\n        return (\n            <div class=\"container\">\n                <div class=\"text\">\n                    <limel-icon\n                        badge={true}\n                        size=\"large\"\n                        name={this.tab.icon.name}\n                        style={style}\n                    />\n                    <p>\n                        {this.tab.text} has received {this.votes} votes!\n                    </p>\n                </div>\n                <limel-button\n                    outlined={true}\n                    icon=\"star\"\n                    label=\"Vote\"\n                    onClick={this.vote}\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Load the tab contents the first time the tab is activated\n     */\n    @Watch('tab')\n    protected watchTab() {\n        if (!this.loaded && this.tab.active) {\n            this.loadTabContent();\n        }\n    }\n\n    /**\n     * Simulate loading the tab content\n     */\n    private loadTabContent() {\n        setTimeout(() => {\n            this.loaded = true;\n        }, LOAD_TIME);\n    }\n\n    private vote = () => {\n        this.votes++;\n        this.changeTab.emit({\n            ...this.tab,\n            badge: this.votes,\n        });\n    };\n}\n"},{"filename":"tab-panel-content.scss","type":"scss","source":".text {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n}\n\np {\n    margin: 0;\n}\n\nlimel-icon {\n    margin-right: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples","filePath":"./src/components/tab-panel/examples/tab-panel-content.tsx","fileName":"tab-panel-content.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/examples/usage","tag":"limel-example-tab-panel-content","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":["limel-example-tab-panel"],"dependencies":["limel-spinner","limel-icon","limel-button"],"dependencyGraph":{"limel-example-tab-panel-content":["limel-spinner","limel-icon","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-example-tab-panel":["limel-example-tab-panel-content"]},"props":[{"name":"tab","type":"Tab","mutable":false,"attr":"tab","reflectToAttr":false,"docs":"The tab that this component belongs to","docsTags":[],"values":[{"type":"Tab"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"changeTab","detail":"Tab","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the vote button is clicked to update the badge in the tab","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tab-panel-content.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Tab, TabPanelComponent } from '@limetech/lime-elements';\n\nconst LOAD_TIME = 1000;\n\n@Component({\n    tag: 'limel-example-tab-panel-content',\n    shadow: true,\n    styleUrl: 'tab-panel-content.scss',\n})\nexport class TabPanelContentExample implements TabPanelComponent {\n    /**\n     * The tab that this component belongs to\n     */\n    @Prop()\n    public tab: Tab;\n\n    /**\n     * Emitted when the vote button is clicked to update the badge in the tab\n     */\n    @Event()\n    public changeTab: EventEmitter<Tab>;\n\n    @State()\n    private votes = 0;\n\n    @State()\n    private loaded = false;\n\n    public render() {\n        if (!this.loaded) {\n            return <limel-spinner />;\n        }\n\n        const style = {\n            backgroundColor: this.tab.icon.color,\n            color: 'white',\n        };\n\n        return (\n            <div class=\"container\">\n                <div class=\"text\">\n                    <limel-icon\n                        badge={true}\n                        size=\"large\"\n                        name={this.tab.icon.name}\n                        style={style}\n                    />\n                    <p>\n                        {this.tab.text} has received {this.votes} votes!\n                    </p>\n                </div>\n                <limel-button\n                    outlined={true}\n                    icon=\"star\"\n                    label=\"Vote\"\n                    onClick={this.vote}\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Load the tab contents the first time the tab is activated\n     */\n    @Watch('tab')\n    protected watchTab() {\n        if (!this.loaded && this.tab.active) {\n            this.loadTabContent();\n        }\n    }\n\n    /**\n     * Simulate loading the tab content\n     */\n    private loadTabContent() {\n        setTimeout(() => {\n            this.loaded = true;\n        }, LOAD_TIME);\n    }\n\n    private vote = () => {\n        this.votes++;\n        this.changeTab.emit({\n            ...this.tab,\n            badge: this.votes,\n        });\n    };\n}\n"},{"filename":"tab-panel-content.scss","type":"scss","source":".text {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n}\n\np {\n    margin: 0;\n}\n\nlimel-icon {\n    margin-right: 1rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table.tsx","fileName":"table.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table","overview":"","usage":{},"docs":"","docsTags":[{"name":"sourceFile","text":"persons.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { Person, persons } from './persons';\n\n/**\n *\n * @sourceFile persons.ts\n */\n@Component({\n    tag: 'limel-example-table',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExample {\n    @State()\n    private tableData: Person[] = persons;\n\n    @State()\n    private columns: Column[] = [\n        { title: 'Name', field: 'name' },\n        { title: 'Age', field: 'age', horizontalAlign: 'right' },\n        { title: 'Kind', field: 'kind' },\n        { title: 'Height', field: 'height', horizontalAlign: 'right' },\n        { title: 'Stamina', field: 'stamina' },\n        { title: 'Place of Birth', field: 'placeOfBirth' },\n        { title: 'Sign', field: 'sign' },\n        { title: 'Date of Birth', field: 'dateOfBirth' },\n        { title: 'Role', field: 'role' },\n    ];\n\n    render() {\n        return <limel-table data={this.tableData} columns={this.columns} />;\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-activate-row.tsx","fileName":"table-activate-row.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-activate-row","overview":"Activate a row","usage":{},"docs":"Activate a row","docsTags":[{"name":"sourceFile","text":"persons.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-value"],"dependencyGraph":{"limel-example-table-activate-row":["limel-table","limel-example-value"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-activate-row.tsx","type":"tsx","source":"import { Column, LimelTableCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { persons, Person } from './persons';\n\n/**\n * Activate a row\n *\n * @sourceFile persons.ts\n */\n@Component({\n    tag: 'limel-example-table-activate-row',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleActivateRow {\n    @State()\n    private activeRow: Person;\n\n    private tableData: Person[] = persons;\n    private columns: Column[] = [\n        { title: 'Name', field: 'name' },\n        { title: 'Age', field: 'age', horizontalAlign: 'right' },\n        { title: 'Kind', field: 'kind' },\n        { title: 'Height', field: 'height', horizontalAlign: 'right' },\n        { title: 'Stamina', field: 'stamina' },\n        { title: 'Place of Birth', field: 'placeOfBirth' },\n        { title: 'Sign', field: 'sign' },\n        { title: 'Date of Birth', field: 'dateOfBirth' },\n        { title: 'Role', field: 'role' },\n    ];\n\n    public render() {\n        return [\n            <limel-table\n                data={this.tableData}\n                activeRow={this.activeRow}\n                columns={this.columns}\n                onActivate={this.onActivateRow}\n                class=\"has-interactive-rows\"\n            />,\n            <limel-example-value label=\"Active row\" value={this.activeRow} />,\n        ];\n    }\n\n    private onActivateRow = (event: LimelTableCustomEvent<Person>) => {\n        this.activeRow = event.detail;\n    };\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-custom-components.tsx","fileName":"table-custom-components.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-custom-components","overview":"Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","usage":{},"docs":"Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","docsTags":[{"name":"sourceFile","text":"birds.ts"},{"name":"sourceFile","text":"table-food.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-custom-components":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-custom-components.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Custom components\n *\n * You can specify a custom component to use for any column in your table. This\n * is done under the `component` key in the schema, following the\n * [TableComponentDefinition](#/type/TableComponentDefinition/) specification,\n * for example:\n *\n * ```ts\n * const columns = [\n *     {\n *         title: 'Food',\n *         field: 'food',\n *         component: { name: 'my-fancy-food-displayer' },\n *     },\n * ];\n * ```\n *\n * While you can, in principle, use any component in a table, your custom table\n * components should implement the [TableComponent](#/type/TableComponent/)\n * interface.\n *\n * @sourceFile birds.ts\n * @sourceFile table-food.tsx\n */\n@Component({\n    tag: 'limel-example-table-custom-components',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleCustomComponents {\n    private columns: Array<Column<Bird>> = [];\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            {\n                title: 'Food',\n                field: 'food',\n                component: { name: 'limel-example-table-food' },\n            },\n            {\n                title: 'Habitat',\n                field: 'habitat',\n                formatter: this.capitalizeStrings,\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                horizontalAlign: 'right',\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private capitalizeStrings(value: string | string[]) {\n        if (typeof value === 'string') {\n            return capitalize(value);\n        }\n\n        if (Array.isArray(value)) {\n            return value.map((v) => capitalize(v)).join(', ');\n        }\n\n        return value;\n    }\n\n    public render() {\n        return <limel-table data={data} columns={this.columns} />;\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"},{"filename":"table-food.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { TableComponent } from '@limetech/lime-elements';\nimport { Bird, Food } from './birds';\nimport { capitalize } from 'lodash-es';\n\n@Component({\n    tag: 'limel-example-table-food',\n    styleUrl: 'table-food.scss',\n    shadow: true,\n})\nexport class TableFood implements TableComponent<Bird> {\n    /**\n     * Name of the field for the column\n     */\n    @Prop()\n    public field: string;\n\n    /**\n     * The value to display in the table cell\n     */\n    @Prop()\n    public value: any;\n\n    /**\n     * Data for the whole row\n     */\n    @Prop()\n    public data: Bird;\n\n    public render() {\n        let value: string[] = this.value;\n        if (!Array.isArray(value)) {\n            value = [value];\n        }\n\n        return value.map(this.renderIcon);\n    }\n\n    private renderIcon(value: Food) {\n        const nameMap: Record<Food, string> = {\n            fruit: 'cherry',\n            invertebrate: 'caterpillar',\n            rodent: 'rabbit',\n            seed: 'wheat',\n            fish: 'fish',\n        };\n\n        return (\n            <limel-icon\n                title={capitalize(value)}\n                badge={true}\n                name={nameMap[value]}\n                size=\"x-small\"\n            />\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-default-sorted.tsx","fileName":"table-default-sorted.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-default-sorted","overview":"Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","usage":{},"docs":"Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-default-sorted":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-default-sorted.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column, ColumnSorter } from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Default sorted columns\n *\n * In this example, the table is sorted on *two* columns. Primary sorting is\n * done on the \"Eggs per clutch\" column, and secondary sorting is done on the\n * \"Name\" column. The result is that within each \"group\" of birds that have the\n * same number of eggs per clutch, the birds are sorted by name.\n */\n@Component({\n    tag: 'limel-example-table-default-sorted',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleDefaultSorted {\n    @State()\n    private columns: Array<Column<Bird>> = [];\n\n    private tableData: Bird[] = data;\n    private sortedColumns: ColumnSorter[] = [];\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                horizontalAlign: 'right',\n            },\n            {\n                title: 'Origin',\n                field: 'origin',\n                horizontalAlign: 'right',\n            },\n        ];\n\n        this.sortedColumns = [\n            { column: this.columns[0], direction: 'ASC' },\n            { column: this.columns[4], direction: 'ASC' },\n        ];\n    }\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                sorting={this.sortedColumns}\n            />\n        );\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-food.tsx","fileName":"table-food.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-food","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon"],"dependencyGraph":{"limel-example-table-food":["limel-icon"]},"props":[{"name":"data","type":"Bird","mutable":false,"reflectToAttr":false,"docs":"Data for the whole row","docsTags":[],"values":[{"type":"Bird"}],"optional":false,"required":false},{"name":"field","type":"string","mutable":false,"attr":"field","reflectToAttr":false,"docs":"Name of the field for the column","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"any","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value to display in the table cell","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-food.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { TableComponent } from '@limetech/lime-elements';\nimport { Bird, Food } from './birds';\nimport { capitalize } from 'lodash-es';\n\n@Component({\n    tag: 'limel-example-table-food',\n    styleUrl: 'table-food.scss',\n    shadow: true,\n})\nexport class TableFood implements TableComponent<Bird> {\n    /**\n     * Name of the field for the column\n     */\n    @Prop()\n    public field: string;\n\n    /**\n     * The value to display in the table cell\n     */\n    @Prop()\n    public value: any;\n\n    /**\n     * Data for the whole row\n     */\n    @Prop()\n    public data: Bird;\n\n    public render() {\n        let value: string[] = this.value;\n        if (!Array.isArray(value)) {\n            value = [value];\n        }\n\n        return value.map(this.renderIcon);\n    }\n\n    private renderIcon(value: Food) {\n        const nameMap: Record<Food, string> = {\n            fruit: 'cherry',\n            invertebrate: 'caterpillar',\n            rodent: 'rabbit',\n            seed: 'wheat',\n            fish: 'fish',\n        };\n\n        return (\n            <limel-icon\n                title={capitalize(value)}\n                badge={true}\n                name={nameMap[value]}\n                size=\"x-small\"\n            />\n        );\n    }\n}\n"},{"filename":"table-food.scss","type":"scss","source":"limel-icon {\n    color: white;\n}\nlimel-icon[name='cherry'] {\n    background-color: var(--lime-deep-red);\n}\nlimel-icon[name='fish'] {\n    background-color: var(--lime-blue);\n}\nlimel-icon[name='caterpillar'] {\n    background-color: var(--lime-green);\n}\nlimel-icon[name='wheat'] {\n    background-color: var(--lime-orange);\n}\nlimel-icon[name='rabbit'] {\n    background-color: var(--lime-light-grey);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-header-menu.tsx","fileName":"table-header-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-header-menu","overview":"Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","usage":{},"docs":"Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","docsTags":[{"name":"sourceFile","text":"persons.ts"},{"name":"sourceFile","text":"header-menu.tsx"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-header-menu":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-header-menu.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { persons, Person } from './persons';\n\n/**\n * Column header menu\n *\n * You can also add custom components to the header cell of a column. In\n * contrast to custom components used elsewhere in the table, custom components\n * used in the header do not replace the entire content of the cell. Instead,\n * they appear in a slot next to the column sorting icon.\n *\n * @sourceFile persons.ts\n * @sourceFile header-menu.tsx\n */\n@Component({\n    tag: 'limel-example-table-header-menu',\n    shadow: true,\n    styleUrl: 'table.scss',\n})\nexport class TableExampleHeadermenu {\n    private tableData: Person[] = persons;\n    private columns: Column[] = [\n        {\n            title: 'Name',\n            field: 'name',\n            headerComponent: {\n                name: 'limel-example-header-menu',\n                props: {\n                    icon: 'menu',\n                    items: [\n                        { text: 'All' },\n                        { text: 'Me' },\n                        { text: 'Contains' },\n                        { text: 'Equals' },\n                        { text: 'Not equals' },\n                    ],\n                },\n            },\n        },\n        {\n            title: 'Age',\n            field: 'age',\n            horizontalAlign: 'right',\n        },\n        {\n            title: 'Kind',\n            field: 'kind',\n        },\n        {\n            title: 'Height',\n            field: 'height',\n            horizontalAlign: 'right',\n        },\n        {\n            title: 'Stamina',\n            field: 'stamina',\n        },\n        {\n            title: 'Place of Birth',\n            field: 'placeOfBirth',\n        },\n        {\n            title: 'Sign',\n            field: 'sign',\n        },\n        {\n            title: 'Date of Birth',\n            field: 'dateOfBirth',\n        },\n        {\n            title: 'Role',\n            field: 'role',\n        },\n    ];\n\n    public render() {\n        return [<limel-table data={this.tableData} columns={this.columns} />];\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"},{"filename":"header-menu.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { ListItem } from '@limetech/lime-elements';\n\n@Component({\n    tag: 'limel-example-header-menu',\n    shadow: true,\n    styleUrl: 'header-menu.scss',\n})\nexport class HeaderMenu {\n    @Prop()\n    public items: ListItem[];\n\n    @Prop()\n    public icon: string;\n\n    private menuOpen = true;\n\n    public render() {\n        return (\n            <limel-menu items={this.items} open={this.menuOpen}>\n                <limel-icon slot=\"trigger\" name={this.icon} size=\"x-small\" />\n            </limel-menu>\n        );\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-low-clickable-rows.tsx","fileName":"table-low-clickable-rows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-interactive-rows","overview":"Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::","usage":{},"docs":"Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-interactive-rows":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-low-clickable-rows.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\n\n/**\n * Visualizing clickable rows better\n * By taking advantage of the `has-interactive-rows` class, hovering on a row\n * will display an elevated visual effect, giving it more affordance and a solid\n * feeling of interactivity.\n *\n * :::note usage notes\n * - Only use this class when clicking on an entire row triggers a reaction in\n * the system, for example a card or a modal is opened to show further details.\n *:::\n */\n@Component({\n    tag: 'limel-example-table-interactive-rows',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExample {\n    @State()\n    public tableData: any[] = [\n        {\n            id: 1,\n            invoiceNumber: '15467',\n            clientNumber: '98457',\n            vat: '5,325',\n            amount: '21,300',\n            invoiceDate: '02/10/2020',\n            referencePerson: 'Fauji Sheladia',\n        },\n        {\n            id: 2,\n            invoiceNumber: '15433',\n            clientNumber: '43256',\n            vat: '2,292',\n            amount: '9,169',\n            invoiceDate: '03/06/2020',\n            referencePerson: 'Mäkelä Jehkinen',\n        },\n        {\n            id: 3,\n            invoiceNumber: '34326',\n            clientNumber: '12456',\n            vat: '234',\n            amount: '1,295',\n            invoiceDate: '30/03/2021',\n            referencePerson: 'Helrover Shgrover',\n        },\n        {\n            id: 4,\n            invoiceNumber: '12357',\n            clientNumber: '22334',\n            vat: '2,867',\n            amount: '11,468',\n            invoiceDate: '14/09/2020',\n            referencePerson: 'Goliham Gigantlle',\n        },\n        {\n            id: 5,\n            invoiceNumber: '12467',\n            clientNumber: '54555',\n            vat: '625',\n            amount: '2,500',\n            invoiceDate: '07/08/2020',\n            referencePerson: 'Eloise Sullivan',\n        },\n        {\n            id: 6,\n            invoiceNumber: '12653',\n            clientNumber: '45365',\n            vat: '1,300',\n            amount: '5,201',\n            invoiceDate: '01/01/2021',\n            referencePerson: 'Gladys Fyffe',\n        },\n        {\n            id: 7,\n            invoiceNumber: '12655',\n            clientNumber: '76476',\n            vat: '1,295',\n            amount: '5,180',\n            invoiceDate: '01/01/2021',\n            referencePerson: 'Cunninghamarms',\n        },\n        {\n            id: 8,\n            invoiceNumber: '12622',\n            clientNumber: '65345',\n            vat: '4,550',\n            amount: '18,200',\n            invoiceDate: '23/12/2020',\n            referencePerson: 'Agalle Cunningpower',\n        },\n    ];\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Client no.', field: 'clientNumber' },\n        { title: 'VAT', field: 'vat', horizontalAlign: 'right' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n    ] as any;\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                class=\"has-interactive-rows\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-default.tsx","fileName":"table-layout-default.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-default","overview":"Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n```tsx\nlayout=\"default\"\n```\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","usage":{},"docs":"Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n```tsx\nlayout=\"default\"\n```\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","docsTags":[{"name":"sourceFile","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-default":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-default.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { invoices, Invoice } from './invoices';\n\n/**\n * Layout\n * Columns and their content can be decisive factors in how a table is\n * preferred to rendered in the user interface. To set your preferred\n * rendering, choose one of the available `layout` properties.\n *\n *\n * ```tsx\n * layout=\"default\"\n * ```\n * The default layout resizes the table's columns,\n * in a way that each column becomes as wide as the data it holds.\n *\n * :::important\n * Note that be default, table columns have a maximum width of `40rem`.\n * This means, they can never grow wider than that, unless you specify\n * another size using the `--table-max-column-width` CSS variable.\n *\n * This applies to all other layouts presented further down as well!\n * :::\n *\n * If there is additional space available on the right side of the last column,\n * rows will stretch to fill the space and look visually as wide as the table.\n *\n * :::note\n * While scrolling, new rows get lazy-loaded. Since the new data may have wider\n * length, it might affect rendering of the layout in real-time.\n * This means columns can get resized while user is scrolling down.\n * :::\n *\n * :::tip\n * It is also possible to affect internal layout of each column, by specifying\n * `horizontalAlign` on the column headers, to `left` (default), `center`,\n * or `right`. This basically defines the text-alignment for all the cells in that column.\n * :::\n *\n * @sourceFile invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-default',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutDefault {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        {\n            title: 'Amount',\n            field: 'amount',\n            horizontalAlign: 'right',\n        },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"default\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15_467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15_433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34_326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12_357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12_467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12_653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12_655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12_622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-low-density.tsx","fileName":"table-layout-low-density.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-low-density","overview":"lowDensity\n\n```tsx\nlayout=\"lowDensity\"\n```\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","usage":{},"docs":"lowDensity\n\n```tsx\nlayout=\"lowDensity\"\n```\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","docsTags":[{"name":"sourceFile","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-low-density":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-low-density.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { invoices, Invoice } from './invoices';\n\n/**\n * lowDensity\n *\n * ```tsx\n * layout=\"lowDensity\"\n * ```\n * By using this layout option, you can easily convert the table into an airy list of items.\n *\n * This type of UI is suitable for generating minimalist lists of items with\n * only a few properties on each. Especially when the property values are not\n * self-explanatory (such as an email address) and require a bit of extra help\n * to know what they are.\n *\n * Using this UI, you can take advantage of the sticky header of the table which\n * explains what each cell is about, and also enjoy sorting possibilities it\n * offers.\n *\n * :::note usage notes\n * - In this low-density UI, all cells will get a fixed height, which may affect\n * the layout of custom components that you place inside them.\n * - This UI is not preferred for data intensive views, in which the user's main\n * task is processing the presented data and making sense of it. For such views,\n * use the table component with its normal density.\n * :::\n *\n * @sourceFile invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-low-density',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutLowDensity {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"lowDensity\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15_467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15_433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34_326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12_357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12_467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12_653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12_655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12_622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-stretch-columns.tsx","fileName":"table-layout-stretch-columns.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-stretch-columns","overview":"stretchColumns\n\n```tsx\nlayout=\"stretchColumns\"\n```\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","usage":{},"docs":"stretchColumns\n\n```tsx\nlayout=\"stretchColumns\"\n```\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","docsTags":[{"name":"sourceFile","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-stretch-columns":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-stretch-columns.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { invoices, Invoice } from './invoices';\n\n/**\n * stretchColumns\n *\n * ```tsx\n * layout=\"stretchColumns\"\n * ```\n *\n * With this layout, the table stretches columns so that all\n * fit perfectly in the table container, when extra space is available.\n * If all columns cannot fit within the available width,\n * then a horizontal scrollbar will appear.\n *\n * @sourceFile invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-stretch-columns',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutStretchColumns {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"stretchColumns\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15_467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15_433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34_326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12_357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12_467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12_653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12_655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12_622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-layout-stretch-last-column.tsx","fileName":"table-layout-stretch-last-column.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-layout-stretch-last-column","overview":"stretchLastColumn\n\n```tsx\nlayout=\"stretchLastColumn\"\n```\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","usage":{},"docs":"stretchLastColumn\n\n```tsx\nlayout=\"stretchLastColumn\"\n```\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","docsTags":[{"name":"sourceFile","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-layout-stretch-last-column":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-layout-stretch-last-column.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { invoices, Invoice } from './invoices';\n\n/**\n * stretchLastColumn\n *\n * ```tsx\n * layout=\"stretchLastColumn\"\n * ```\n *\n * Works just like `default`, but unlike the default layout\n * which resulted in having an empty last column, in this layout\n * the last existing column will stretch out to fill up the remaining table width.\n *\n * @sourceFile invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-layout-stretch-last-column',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLayoutStretchLastColumn {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        { title: 'Reference Person', field: 'referencePerson' },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return (\n            <limel-table\n                data={this.tableData}\n                columns={this.columns}\n                layout=\"stretchLastColumn\"\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15_467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15_433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34_326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12_357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12_467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12_653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12_655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12_622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-local.tsx","fileName":"table-local.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-local","overview":"Local sorting and pagination","usage":{},"docs":"Local sorting and pagination","docsTags":[{"name":"sourceFile","text":"birds.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-value"],"dependencyGraph":{"limel-example-table-local":["limel-table","limel-example-value"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-local.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport {\n    Column,\n    ColumnSorter,\n    ColumnAggregatorType,\n} from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Local sorting and pagination\n *\n * @sourceFile birds.ts\n */\n@Component({\n    tag: 'limel-example-table-local',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLocal {\n    private columns: Array<Column<Bird>> = [];\n\n    @State()\n    private currentPage: number = 1;\n\n    @State()\n    private currentSorting: string = 'None';\n\n    private pageSize = 10;\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                aggregator: ColumnAggregatorType.Average,\n                horizontalAlign: 'right',\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private handleChangePage = (event: CustomEvent<number>) => {\n        this.currentPage = event.detail;\n    };\n\n    private handleSort = (event: CustomEvent<ColumnSorter[]>) => {\n        this.currentSorting = event.detail[0].column.title;\n    };\n\n    public render() {\n        return [\n            <limel-table\n                data={data}\n                columns={this.columns}\n                pageSize={this.pageSize}\n                onChangePage={this.handleChangePage}\n                onSort={this.handleSort}\n            />,\n            <limel-example-value\n                label=\"Current page is\"\n                value={this.currentPage}\n            />,\n            <limel-example-value\n                label=\"Currently sorting on\"\n                value={this.currentSorting}\n            />,\n        ];\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-movable-columns.tsx","fileName":"table-movable-columns.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-movable-columns","overview":"Movable columns","usage":{},"docs":"Movable columns","docsTags":[{"name":"sourceFile","text":"birds.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-value"],"dependencyGraph":{"limel-example-table-movable-columns":["limel-table","limel-example-value"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-movable-columns.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Movable columns\n *\n * @sourceFile birds.ts\n */\n@Component({\n    tag: 'limel-example-table-movable-columns',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleLocal {\n    @State()\n    private columns: Array<Column<Bird>> = [\n        { title: 'Name', field: 'name' },\n        { title: 'Binominal name', field: 'binominalName' },\n        { title: 'Nest type', field: 'nest', formatter: capitalize },\n        { title: 'Eggs per clutch', field: 'eggs', horizontalAlign: 'right' },\n        { title: 'Origin', field: 'origin' },\n    ];\n\n    private handleChangeColumns = (event: CustomEvent<Column[]>) => {\n        this.columns = event.detail;\n    };\n\n    public render() {\n        const columnOrder = this.columns.map((column) => column.title);\n\n        return [\n            <limel-table\n                data={data}\n                columns={this.columns}\n                movableColumns={true}\n                onChangeColumns={this.handleChangeColumns}\n            />,\n            <limel-example-value\n                label=\"Current column order is\"\n                value={columnOrder}\n            />,\n        ];\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-remote.tsx","fileName":"table-remote.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-remote","overview":"Remote sorting and pagination","usage":{},"docs":"Remote sorting and pagination","docsTags":[{"name":"sourceFile","text":"birds.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-remote":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-remote.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column, TableParams, ColumnSorter } from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\nconst NETWORK_DELAY = 500;\n\n/**\n * Remote sorting and pagination\n *\n * @sourceFile birds.ts\n */\n@Component({\n    tag: 'limel-example-table-remote',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleRemote {\n    private columns: Array<Column<Bird>> = [];\n\n    @State()\n    private currentData: object[] = [];\n\n    private allData: object[] = data;\n\n    private pageSize = 10;\n\n    private currentPage: number;\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                horizontalAlign: 'right',\n                field: 'eggs',\n                aggregator: this.calculateAverage,\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private handleLoad = (event: CustomEvent<TableParams>) => {\n        console.log('Loading new data', event.detail);\n        const sorter = event.detail.sorters[0];\n\n        this.currentPage = event.detail.page;\n        if (sorter) {\n            this.allData = [...data].sort(this.compareBy(sorter));\n        }\n\n        this.loadData();\n    };\n\n    /**\n     * This will only handle how to compare strings. This means the two number\n     * columns in the example will not be sorted in the correct way\n     * @param sorter\n     */\n    private compareBy = (sorter: ColumnSorter) => (a: Bird, b: Bird) => {\n        const column = sorter.column;\n        const fieldA = a[column.field];\n        const fieldB = b[column.field];\n\n        if (sorter.direction === 'ASC') {\n            return String(fieldA).localeCompare(String(fieldB));\n        }\n\n        return String(fieldB).localeCompare(String(fieldA));\n    };\n\n    /**\n     * Calculate the average value for a column for all the available data\n     *\n     * `values` and `rowsData` are not needed in this example since they only\n     * contain the values for the data that is currently loaded in the table\n     * @param column\n     * @param values\n     * @param rowsData\n     */\n    private calculateAverage(column: Column, values: any[], rowsData: Bird[]) {\n        console.log(values, rowsData);\n\n        const total = data.reduce((sum: number, value: Bird) => {\n            return sum + value[column.field];\n        }, 0);\n\n        return total / data.length;\n    }\n\n    /**\n     * Simulate some network delay, like loading data from a server\n     */\n    private loadData() {\n        setTimeout(() => {\n            const start = (this.currentPage - 1) * this.pageSize;\n            const end = start + this.pageSize;\n            this.currentData = this.allData.slice(start, end);\n        }, NETWORK_DELAY);\n    }\n\n    public render() {\n        return (\n            <limel-table\n                mode=\"remote\"\n                data={this.currentData}\n                columns={this.columns}\n                pageSize={this.pageSize}\n                totalRows={data.length}\n                onLoad={this.handleLoad}\n            />\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"birds.ts","type":"ts","source":"export interface Bird {\n    name: string;\n    binominalName: string;\n    wingspan: number;\n    habitat: Habitat | Habitat[];\n    food: Food | Food[];\n    nest: Nest;\n    eggs: number;\n    origin: string | string[];\n}\n\nexport type Habitat = 'forest' | 'grassland' | 'wetland';\nexport type Food = 'invertebrate' | 'seed' | 'fruit' | 'fish' | 'rodent';\nexport type Nest = 'bowl' | 'cavity' | 'ground' | 'platform';\n\nexport const data: Bird[] = [\n    {\n        name: 'Greater Roadrunner',\n        binominalName: 'Geococcyx californianus',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'American Bittern',\n        binominalName: 'Botaurus lentiginosus',\n        wingspan: 107,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: 'North America',\n    },\n    {\n        name: 'Bobolink',\n        binominalName: 'Dolichonyx oryzivorus',\n        wingspan: 30,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Northern Cardinal',\n        binominalName: 'Cardinalis cardinalis',\n        wingspan: 30,\n        habitat: 'forest',\n        food: ['seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 4,\n        origin: 'North America',\n    },\n    {\n        name: 'Ruddy Duck',\n        binominalName: 'Oxyura jamaicensis',\n        wingspan: 48,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'platform',\n        eggs: 15,\n        origin: 'America',\n    },\n    {\n        name: 'White Wagtail',\n        binominalName: 'Motacilla alba',\n        wingspan: 28,\n        habitat: ['grassland', 'wetland'],\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 8,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Short-toed Treecreeper',\n        binominalName: 'Certhia brachydactyla',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'Europe',\n    },\n    {\n        name: 'Ruff',\n        binominalName: 'Calidris pugnax',\n        wingspan: 56,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'fruit', 'fish', 'rodent', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Common Chiffchaff',\n        binominalName: 'Phylloscopus collybita',\n        wingspan: 20,\n        habitat: ['wetland', 'forest'],\n        food: ['invertebrate', 'fruit', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Africa'],\n    },\n    {\n        name: 'Common Little Bittern',\n        binominalName: 'Ixobrychus minutus',\n        wingspan: 49,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa'],\n    },\n    {\n        name: 'Willet',\n        binominalName: 'Tringa semipalmata',\n        wingspan: 66,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Yellow-Rumped Warbler',\n        binominalName: 'Setophaga coronata',\n        wingspan: 23,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Eurasian Magpie',\n        binominalName: 'Pica pica',\n        wingspan: 56,\n        habitat: 'grassland',\n        food: ['invertebrate', 'fruit', 'seed', 'fish', 'rodent'],\n        nest: 'platform',\n        eggs: 6,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dunnock',\n        binominalName: 'Prunella modularis',\n        wingspan: 20,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: \"Wilson's Snipe\",\n        binominalName: 'Gallinago delicata',\n        wingspan: 41,\n        habitat: 'wetland',\n        food: 'invertebrate',\n        nest: 'ground',\n        eggs: 3,\n        origin: 'America',\n    },\n    {\n        name: 'Little Bustard',\n        binominalName: 'Tetrax tetrax',\n        wingspan: 110,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 5,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'Dickcissel',\n        binominalName: 'Spiza americana',\n        wingspan: 25,\n        habitat: 'grassland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 4,\n        origin: 'America',\n    },\n    {\n        name: 'Prothonotary Warbler',\n        binominalName: 'Protonotaria citrea',\n        wingspan: 23,\n        habitat: ['forest', 'wetland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Killdeer',\n        binominalName: 'Charadrius vociferus',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Tufted Titmouse',\n        binominalName: 'Baeolophus bicolor',\n        wingspan: 25,\n        habitat: 'forest',\n        food: ['invertebrate', 'seed', 'fruit'],\n        nest: 'cavity',\n        eggs: 7,\n        origin: 'North America',\n    },\n    {\n        name: 'Black-Tailed Godwit',\n        binominalName: 'Limosa limosa',\n        wingspan: 76,\n        habitat: 'wetland',\n        food: ['invertebrate', 'seed'],\n        nest: 'ground',\n        eggs: 6,\n        origin: ['Europe', 'Asia', 'Africa', 'Australia'],\n    },\n    {\n        name: 'Yellow-Breasted Chat',\n        binominalName: 'Icteria virens',\n        wingspan: 25,\n        habitat: ['wetland', 'grassland', 'forest'],\n        food: ['invertebrate', 'fruit'],\n        nest: 'bowl',\n        eggs: 5,\n        origin: 'North America',\n    },\n    {\n        name: 'Purple Martin',\n        binominalName: 'Progne subis',\n        wingspan: 46,\n        habitat: ['wetland', 'grassland'],\n        food: 'invertebrate',\n        nest: 'cavity',\n        eggs: 6,\n        origin: 'America',\n    },\n    {\n        name: 'Goldcrest',\n        binominalName: 'Regulus regulus',\n        wingspan: 15,\n        habitat: 'forest',\n        food: 'invertebrate',\n        nest: 'bowl',\n        eggs: 11,\n        origin: ['Europe', 'Asia'],\n    },\n    {\n        name: 'King Rail',\n        binominalName: 'Rallus elegans',\n        wingspan: 51,\n        habitat: 'wetland',\n        food: ['invertebrate', 'fish', 'fruit', 'seed', 'rodent'],\n        nest: 'platform',\n        eggs: 14,\n        origin: 'North America',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-selectable-rows.tsx","fileName":"table-selectable-rows.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-selectable-rows","overview":"Selectable rows with updating aggregates","usage":{},"docs":"Selectable rows with updating aggregates","docsTags":[{"name":"sourceFile","text":"persons.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table","limel-example-controls","limel-button","limel-example-value","limel-example-event-printer"],"dependencyGraph":{"limel-example-table-selectable-rows":["limel-table","limel-example-controls","limel-button","limel-example-value","limel-example-event-printer"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-selectable-rows.tsx","type":"tsx","source":"import {\n    Column,\n    ColumnAggregate,\n    LimelTableCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { persons, Person } from './persons';\n\n/**\n * Selectable rows with updating aggregates\n *\n * @sourceFile persons.ts\n */\n@Component({\n    tag: 'limel-example-table-selectable-rows',\n    styleUrl: 'table-selectable-rows.scss',\n    shadow: true,\n})\nexport class TableExampleSelectableRows {\n    @State()\n    private activeRow: Person;\n    @State()\n    private selection: Person[];\n    @State()\n    private aggregates: ColumnAggregate[];\n\n    private tableData: Person[] = persons;\n    private defaultSelection = [persons[0], persons[2]];\n\n    private columns: Column[] = [\n        {\n            title: 'Name',\n            field: 'name',\n        },\n        {\n            title: 'Age',\n            field: 'age',\n            horizontalAlign: 'right',\n        },\n        { title: 'Kind', field: 'kind' },\n        {\n            title: 'Height',\n            field: 'height',\n            horizontalAlign: 'right',\n        },\n        { title: 'Stamina', field: 'stamina' },\n        { title: 'Place of Birth', field: 'placeOfBirth' },\n        { title: 'Sign', field: 'sign' },\n        { title: 'Date of Birth', field: 'dateOfBirth' },\n        { title: 'Role', field: 'role' },\n    ];\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    constructor() {\n        this.selection = [...this.defaultSelection];\n        this.updateAggregates();\n    }\n\n    public render() {\n        return [\n            <limel-table\n                data={this.tableData}\n                activeRow={this.activeRow}\n                selectable={true}\n                selection={this.selection}\n                aggregates={this.aggregates}\n                columns={this.columns}\n                onActivate={this.onActivateRow}\n                onSelect={this.onSelect}\n                onSelectAll={this.onSelectAll}\n                pageSize={5}\n                mode=\"local\"\n                totalRows={persons.length}\n                movableColumns={true}\n                class=\"has-interactive-rows\"\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-max-columns-width': '10rem' }}\n            >\n                <limel-button label=\"Select all\" onClick={this.selectAll} />\n                <limel-button\n                    label=\"Clear selection\"\n                    onClick={this.clearSelection}\n                />\n                <limel-button label=\"Reset\" onClick={this.resetSelection} />\n            </limel-example-controls>,\n            <limel-example-value label=\"Active row\" value={this.activeRow} />,\n            <limel-example-value\n                label={`Selected rows: (${this.selection?.length || 0})`}\n                value={this.selection}\n            />,\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private onActivateRow = (event: LimelTableCustomEvent<Person>) => {\n        this.activeRow = event.detail;\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private onSelect = (event: LimelTableCustomEvent<Person[]>) => {\n        this.selection = event.detail;\n        this.updateAggregates();\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private onSelectAll = (event: CustomEvent<boolean>) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private selectAll = () => {\n        this.selection = [...this.tableData];\n        this.updateAggregates();\n    };\n\n    private clearSelection = () => {\n        this.selection = [];\n        this.updateAggregates();\n    };\n\n    private resetSelection = () => {\n        this.selection = [...this.defaultSelection];\n        this.updateAggregates();\n    };\n\n    private updateAggregates = () => {\n        this.aggregates = [\n            this.getNameAggregate(),\n            this.getHeightAggregate(),\n            this.getAgeAggregate(),\n            this.getStaminaAggregate(),\n        ];\n    };\n\n    private getNameAggregate = () => {\n        const selected = this.selection.length;\n        const count = this.tableData.length;\n        const value = selected ? `Selected: ${selected}` : `Count: ${count}`;\n\n        return {\n            field: 'name',\n            value: value,\n        };\n    };\n\n    private getStaminaAggregate = () => {\n        const items =\n            this.selection.length > 0 ? this.selection : this.tableData;\n        const stamina = items.map((d) => Number.parseInt(d.stamina, 10));\n        const minStamina = Math.min(...stamina);\n        const maxStamina = Math.max(...stamina);\n        let value = `${minStamina}%`;\n        if (minStamina !== maxStamina) {\n            value = `${minStamina}% - ${maxStamina}%`;\n        }\n\n        return {\n            field: 'stamina',\n            value: value,\n        };\n    };\n\n    private sumProperty = (\n        items: Person[],\n        valueProvider: (person: Person) => number\n    ) => {\n        return items.reduce((s, person) => s + valueProvider(person), 0);\n    };\n\n    private getAgeAggregate = () => {\n        const items =\n            this.selection.length > 0 ? this.selection : this.tableData;\n        const sum = this.sumProperty(items, (p) => p.age);\n        const avg = sum / items.length || 0;\n\n        return {\n            field: 'age',\n            value: `Avg: ${Math.round(avg * 100) / 100}`,\n        };\n    };\n\n    private getHeightAggregate = () => {\n        const items =\n            this.selection.length > 0 ? this.selection : this.tableData;\n        const sum = this.sumProperty(items, (p) => p.height);\n\n        return {\n            field: 'height',\n            value: `${sum} cm`,\n        };\n    };\n}\n"},{"filename":"table-selectable-rows.scss","type":"scss","source":"@use './table.scss';\n"},{"filename":"persons.ts","type":"ts","source":"export interface Person {\n    id: number;\n    name: string;\n    age: number;\n    kind: string;\n    height: number;\n    placeOfBirth: string;\n    stamina: string;\n    sign: string;\n    dateOfBirth: string;\n    role: string;\n}\n\nexport const persons: Person[] = [\n    {\n        id: 1,\n        name: 'Fauji Sheladia',\n        age: 29,\n        kind: 'Angel',\n        height: 95,\n        placeOfBirth: 'Palight',\n        stamina: '40%',\n        sign: '🧚‍♂️',\n        dateOfBirth: '14/05/1991',\n        role: 'The Big Boss',\n    },\n    {\n        id: 2,\n        name: 'Mäkelä Jehkinen',\n        age: 42,\n        kind: 'Dragon',\n        height: 1800,\n        stamina: '96%',\n        placeOfBirth: 'Ekudshire',\n        sign: '🐉',\n        dateOfBirth: '30/07/1987',\n        role: 'Head of Guardians',\n    },\n    {\n        id: 3,\n        name: 'Helrover Shgrover Ohmslmer',\n        age: 723,\n        kind: 'Elf',\n        height: 186,\n        stamina: '84%',\n        placeOfBirth: 'Blarc',\n        sign: '🧝‍♂️',\n        dateOfBirth: '29/10/1297',\n        role: 'Head of External Politics',\n    },\n    {\n        id: 4,\n        name: 'Goliham Gigantlle',\n        age: 350,\n        kind: 'Yeti',\n        height: 325,\n        stamina: '95%',\n        placeOfBirth: 'Kamond',\n        sign: '❄️',\n        dateOfBirth: '23/07/1670',\n        role: 'Chief Cool Stuff Officer',\n    },\n    {\n        id: 5,\n        name: 'Eloise Sullivan',\n        age: 35,\n        kind: 'Vampire',\n        height: 170,\n        stamina: '47%',\n        placeOfBirth: 'Blodholm',\n        sign: '🧛‍♀️',\n        dateOfBirth: '10/11/1985',\n        role: 'Bloodline Quality Controller',\n    },\n    {\n        id: 6,\n        name: 'Gladys E. Fyffe',\n        age: 36,\n        kind: 'Werewolf',\n        height: 176,\n        stamina: '83%',\n        placeOfBirth: 'Wuacross',\n        sign: '🐺',\n        dateOfBirth: '06/06/1984',\n        role: 'Head Hunter',\n    },\n    {\n        id: 7,\n        name: 'Cunninghamarms',\n        age: 44,\n        kind: 'Ork',\n        height: 176,\n        stamina: '74%',\n        placeOfBirth: 'Bruhgnathal',\n        sign: '🐗',\n        dateOfBirth: '26/01/1976',\n        role: 'Head of Security',\n    },\n    {\n        id: 8,\n        name: 'Agalle Cunningpower',\n        age: 75,\n        kind: 'Wizard',\n        height: 176,\n        stamina: '40%',\n        placeOfBirth: 'Orasas',\n        sign: '🔮',\n        dateOfBirth: '05/10/1945',\n        role: 'Chief Entertainment Officer',\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples","filePath":"./src/components/table/examples/table-sorting-disabled.tsx","fileName":"table-sorting-disabled.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/examples/usage","tag":"limel-example-table-sorting-disabled","overview":"Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","usage":{},"docs":"Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","docsTags":[{"name":"sourceFile","text":"invoices.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-table"],"dependencyGraph":{"limel-example-table-sorting-disabled":["limel-table"],"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table-sorting-disabled.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { invoices, Invoice } from './invoices';\n\n/**\n * Disable column sorting\n *\n * By default, all columns can be sorted by end-users, if they click on\n * a column header. An arrow icon on the header visualizes the\n * direction of sorting, when a column is sorted.\n *\n * However, you can disable the sorting possibility in individual columns,\n * by setting the `headerSort` to `false`.\n *\n * @sourceFile invoices.ts\n */\n@Component({\n    tag: 'limel-example-table-sorting-disabled',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleSortingDisabled {\n    @State()\n    private tableData: Invoice[] = invoices;\n\n    @State()\n    public columns: Column[] = [\n        { title: 'Invoice no.', field: 'invoiceNumber' },\n        { title: 'Invoice Date', field: 'invoiceDate' },\n        {\n            title: 'Reference Person',\n            field: 'referencePerson',\n            headerSort: false,\n        },\n        { title: 'Amount', field: 'amount', horizontalAlign: 'right' },\n    ];\n\n    render() {\n        return <limel-table data={this.tableData} columns={this.columns} />;\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n"},{"filename":"invoices.ts","type":"ts","source":"export interface Invoice {\n    id: number;\n    invoiceNumber: number;\n    invoiceDate: string;\n    referencePerson: string;\n    amount: number;\n}\n\nexport const invoices: Invoice[] = [\n    {\n        id: 1,\n        invoiceNumber: 15_467,\n        invoiceDate: '02/10/2020',\n        referencePerson: 'Fauji Sheladia',\n        amount: 21.328,\n    },\n    {\n        id: 2,\n        invoiceNumber: 15_433,\n        invoiceDate: '03/06/2020',\n        referencePerson: 'Mäkelä Jehkinen',\n        amount: 9.169,\n    },\n    {\n        id: 3,\n        invoiceNumber: 34_326,\n        invoiceDate: '30/03/2021',\n        referencePerson: 'Helrover Shgrover',\n        amount: 1.295,\n    },\n    {\n        id: 4,\n        invoiceNumber: 12_357,\n        invoiceDate: '14/09/2020',\n        referencePerson: 'Goliham Gigantlle',\n        amount: 11.468,\n    },\n    {\n        id: 5,\n        invoiceNumber: 12_467,\n        invoiceDate: '07/08/2020',\n        referencePerson: 'Eloise Sullivan',\n        amount: 2.583,\n    },\n    {\n        id: 6,\n        invoiceNumber: 12_653,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Gladys Fyffe',\n        amount: 5.201,\n    },\n    {\n        id: 7,\n        invoiceNumber: 12_655,\n        invoiceDate: '01/01/2021',\n        referencePerson: 'Cunninghamarms',\n        amount: 5.181,\n    },\n    {\n        id: 8,\n        invoiceNumber: 12_622,\n        invoiceDate: '23/12/2020',\n        referencePerson: 'Agalle Cunningpower',\n        amount: 18.257,\n    },\n];\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-allow-resize.tsx","fileName":"text-editor-allow-resize.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-allow-resize","overview":"Allow resize\nThe text editor automatically adjusts its own height to fit the content inside.\nSo as the user types, the editor will grow taller, potentially resizing its own\ncontainer element.\n\nBy default, the user can also manually change the height of the text editor\nby dragging its bottom right corner.\n\nAs soon as the user has changed the height, this will override the automatic\nresizing, and the editor will no longer adjust its height to fit the content inside.\n\nBy setting `allowResize` to `false`, you can disable the end user\nto resize the text editor vertically.\n\n:::tip\n1. The text editor makes sure that it never becomes taller than the viewport's height.\nThis way, its toolbar and resize control will remain reasonably visible, when\nthe component is auto resizing itself based on the content it holds.\nThis behavior is controlled by the `--text-editor-max-height` CSS variable,\nwhich defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`,\ntaking also into account the safe zones which are defined by the environment variables.\n\n1. Using `max-height` and `min-height` CSS properties on the component itself,\n(or using `--text-editor-max-height`), you can limit the resizing to a specific range.\n:::","usage":{},"docs":"Allow resize\nThe text editor automatically adjusts its own height to fit the content inside.\nSo as the user types, the editor will grow taller, potentially resizing its own\ncontainer element.\n\nBy default, the user can also manually change the height of the text editor\nby dragging its bottom right corner.\n\nAs soon as the user has changed the height, this will override the automatic\nresizing, and the editor will no longer adjust its height to fit the content inside.\n\nBy setting `allowResize` to `false`, you can disable the end user\nto resize the text editor vertically.\n\n:::tip\n1. The text editor makes sure that it never becomes taller than the viewport's height.\nThis way, its toolbar and resize control will remain reasonably visible, when\nthe component is auto resizing itself based on the content it holds.\nThis behavior is controlled by the `--text-editor-max-height` CSS variable,\nwhich defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`,\ntaking also into account the safe zones which are defined by the environment variables.\n\n1. Using `max-height` and `min-height` CSS properties on the component itself,\n(or using `--text-editor-max-height`), you can limit the resizing to a specific range.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-allow-resize":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-allow-resize.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Allow resize\n * The text editor automatically adjusts its own height to fit the content inside.\n * So as the user types, the editor will grow taller, potentially resizing its own\n * container element.\n *\n * By default, the user can also manually change the height of the text editor\n * by dragging its bottom right corner.\n *\n * As soon as the user has changed the height, this will override the automatic\n * resizing, and the editor will no longer adjust its height to fit the content inside.\n *\n * By setting `allowResize` to `false`, you can disable the end user\n * to resize the text editor vertically.\n *\n * :::tip\n * 1. The text editor makes sure that it never becomes taller than the viewport's height.\n * This way, its toolbar and resize control will remain reasonably visible, when\n * the component is auto resizing itself based on the content it holds.\n * This behavior is controlled by the `--text-editor-max-height` CSS variable,\n * which defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`,\n * taking also into account the safe zones which are defined by the environment variables.\n *\n * 1. Using `max-height` and `min-height` CSS properties on the component itself,\n * (or using `--text-editor-max-height`), you can limit the resizing to a specific range.\n * :::\n */\n@Component({\n    tag: 'limel-example-text-editor-allow-resize',\n    shadow: true,\n    styleUrl: 'text-editor-allow-resize.scss',\n})\nexport class TextEditorAllowResizeExample {\n    @State()\n    private value: string;\n\n    @State()\n    private allowResize = true;\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                allowResize={this.allowResize}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.allowResize}\n                    label=\"Allow resize\"\n                    onChange={this.setAllowResize}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private setAllowResize = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.allowResize = event.detail;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"},{"filename":"text-editor-allow-resize.scss","type":"scss","source":"limel-text-editor {\n    min-height: 8rem;\n    max-height: 20rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-as-form-component.tsx","fileName":"text-editor-as-form-component.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-as-form-component","overview":"Using the text editor as a form component\n\nHere we have a simple form that uses the `limel-text-editor` component,\ninstead of a regular text input field.\n\n:::note\nThis allows the user to write rich text, with markdown support, in the form.\nBut keep in mind that the value will be saved as a markdown string,\nand can also contain HTML tags, depending on what the users input\nin the filed.\n:::","usage":{},"docs":"Using the text editor as a form component\n\nHere we have a simple form that uses the `limel-text-editor` component,\ninstead of a regular text input field.\n\n:::note\nThis allows the user to write rich text, with markdown support, in the form.\nBut keep in mind that the value will be saved as a markdown string,\nand can also contain HTML tags, depending on what the users input\nin the filed.\n:::","docsTags":[{"name":"sourceFile","text":"text-editor-form-data.ts"}],"encapsulation":"shadow","dependents":[],"dependencies":["limel-form","limel-button","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-as-form-component":["limel-form","limel-button","limel-example-value"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-as-form-component.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport { FormComponentFormData, schema } from './text-editor-form-data';\nimport { cloneDeep } from 'lodash-es';\n\n/**\n * Using the text editor as a form component\n *\n * Here we have a simple form that uses the `limel-text-editor` component,\n * instead of a regular text input field.\n *\n * :::note\n * This allows the user to write rich text, with markdown support, in the form.\n * But keep in mind that the value will be saved as a markdown string,\n * and can also contain HTML tags, depending on what the users input\n * in the filed.\n * :::\n * @sourceFile text-editor-form-data.ts\n */\n@Component({\n    tag: 'limel-example-text-editor-as-form-component',\n    shadow: true,\n    styleUrl: 'text-editor-as-form-component.scss',\n})\nexport class TextEditorAsFormComponentExample {\n    @State()\n    private formData: FormComponentFormData = {\n        name: 'Muhammad Ali',\n        value: '<p>I am the <b>greatest</b>.</p>',\n    };\n\n    @State()\n    private formDirty = false;\n\n    // We fake a bit of state handling here, to\n    // be able to reset and \"save\" the form.\n    // This is mainly to visualize when the form\n    // is considered dirty.\n    private savedFormData: FormComponentFormData;\n\n    public componentWillLoad() {\n        this.savedFormData = cloneDeep(this.formData);\n    }\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <div class=\"buttons\">\n                <limel-button\n                    label=\"Save\"\n                    disabled={!this.formDirty}\n                    onClick={this.handleSave}\n                    primary={true}\n                    class=\"has-reduced-presence\"\n                />\n                <limel-button\n                    label=\"Reset\"\n                    disabled={!this.formDirty}\n                    onClick={this.handleReset}\n                    class=\"has-reduced-presence\"\n                />\n            </div>,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event: CustomEvent<FormComponentFormData>) => {\n        event.stopPropagation();\n        this.formData = event.detail;\n        this.formDirty = this.getFormDirtyState();\n    };\n\n    private handleSave = () => {\n        this.savedFormData = cloneDeep(this.formData);\n        this.formDirty = this.getFormDirtyState();\n    };\n\n    private handleReset = () => {\n        this.formData = cloneDeep(this.savedFormData);\n        this.formDirty = this.getFormDirtyState();\n    };\n\n    private getFormDirtyState = () => {\n        return (\n            JSON.stringify(this.formData) !== JSON.stringify(this.savedFormData)\n        );\n    };\n}\n"},{"filename":"text-editor-as-form-component.scss","type":"scss","source":".buttons {\n    display: flex;\n    flex-direction: row-reverse;\n    column-gap: 1rem;\n    align-items: end;\n}\n"},{"filename":"text-editor-form-data.ts","type":"ts","source":"import { FormSchema } from '@limetech/lime-elements';\n\nexport interface FormComponentFormData {\n    name?: string;\n    value?: string;\n}\n\nexport const schema: FormSchema<FormComponentFormData> = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n            description: 'Your name',\n        },\n        value: {\n            type: 'string',\n            title: 'Description',\n            description: 'A personal description',\n            lime: {\n                component: {\n                    name: 'limel-text-editor',\n                    props: {\n                        contentType: 'html',\n                    },\n                },\n            },\n        },\n    },\n};\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-basic.tsx","fileName":"text-editor-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-basic","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-basic":["limel-text-editor","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-basic.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-text-editor-basic',\n    shadow: true,\n})\nexport class TextEditorBasicExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-composite.tsx","fileName":"text-editor-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-composite","overview":"Composite example","usage":{},"docs":"Composite example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-controls","limel-checkbox","limel-select","limel-input-field","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-composite":["limel-text-editor","limel-example-controls","limel-checkbox","limel-select","limel-input-field","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-composite.tsx","type":"tsx","source":"import {\n    EditorUiType,\n    LimelSelectCustomEvent,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State, Watch } from '@stencil/core';\n\n/**\n * Composite example\n */\n@Component({\n    tag: 'limel-example-text-editor-composite',\n    shadow: true,\n})\nexport class TextEditorCompositeExample {\n    @State()\n    private value: string = 'Hello, world!';\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private allowResize = false;\n\n    @State()\n    private label: string;\n\n    @State()\n    private placeholder: string;\n\n    @State()\n    private helperText: string;\n\n    @State()\n    private selectedUi: Option<EditorUiType> = {\n        text: 'standard',\n        value: 'standard',\n    };\n\n    private readonly availableUis: Array<Option<EditorUiType>> = [\n        { text: 'standard', value: 'standard' },\n        { text: 'minimal', value: 'minimal' },\n        { text: 'no-toolbar', value: 'no-toolbar' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-text-editor\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    readonly={this.readonly}\n                    required={this.required}\n                    disabled={this.disabled}\n                    invalid={this.invalid}\n                    placeholder={this.placeholder}\n                    allowResize={this.allowResize}\n                    ui={this.selectedUi.value}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.readonly}\n                        label=\"Readonly\"\n                        onChange={this.setReadonly}\n                    />\n                    <limel-checkbox\n                        checked={this.invalid}\n                        label=\"Invalid\"\n                        onChange={this.setInvalid}\n                    />\n                    <limel-checkbox\n                        checked={this.required}\n                        label=\"Required\"\n                        onChange={this.setRequired}\n                    />\n                    <limel-checkbox\n                        checked={this.disabled}\n                        label=\"Disabled\"\n                        onChange={this.setDisabled}\n                    />\n                    <limel-checkbox\n                        checked={this.allowResize}\n                        label=\"Allow resize\"\n                        onChange={this.setAllowResize}\n                    />\n                    <limel-select\n                        label=\"ui\"\n                        options={this.availableUis}\n                        value={this.selectedUi}\n                        onChange={this.handleNewSelection}\n                    />\n                    <hr\n                        style={{\n                            'grid-column': '1/-1',\n                        }}\n                    />\n                    <limel-input-field\n                        label=\"label\"\n                        value={this.label}\n                        onChange={this.handleLabelChange}\n                    />\n                    <limel-input-field\n                        label=\"helperText\"\n                        value={this.helperText}\n                        onChange={this.handleHelperTextChange}\n                    />\n                    <limel-input-field\n                        label=\"placeholder\"\n                        value={this.placeholder}\n                        onChange={this.handlePlaceholderChange}\n                    />\n                </limel-example-controls>\n                <limel-example-value value={this.value} />\n            </Host>\n        );\n    }\n\n    @Watch('required')\n    @Watch('value')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private readonly setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private readonly setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private readonly setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private readonly setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private readonly setAllowResize = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.allowResize = event.detail;\n    };\n\n    private readonly handleLabelChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.label = event.detail;\n    };\n\n    private readonly handleHelperTextChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.helperText = event.detail;\n    };\n\n    private readonly handlePlaceholderChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.placeholder = event.detail;\n    };\n\n    private readonly handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private readonly handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<EditorUiType>>\n    ) => {\n        this.selectedUi = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-custom-element.tsx","fileName":"text-editor-custom-element.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-custom-element","overview":"A custom element can be configured\n\nThe default behavior of the text editor is to only allow standard HTML element\nlike `em` and `h`. To add your own custom elements one can add custom elements\npassing them to the `plugins` property.\n\nIn this example we pass `limel-chip` as a custom element along with the allowed\nattributes `text` and `icon`.","usage":{},"docs":"A custom element can be configured\n\nThe default behavior of the text editor is to only allow standard HTML element\nlike `em` and `h`. To add your own custom elements one can add custom elements\npassing them to the `plugins` property.\n\nIn this example we pass `limel-chip` as a custom element along with the allowed\nattributes `text` and `icon`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-custom-element":["limel-text-editor","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-custom-element.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * A custom element can be configured\n *\n * The default behavior of the text editor is to only allow standard HTML element\n * like `em` and `h`. To add your own custom elements one can add custom elements\n * passing them to the `plugins` property.\n *\n * In this example we pass `limel-chip` as a custom element along with the allowed\n * attributes `text` and `icon`.\n */\n@Component({\n    tag: 'limel-example-text-editor-custom-element',\n    shadow: true,\n})\nexport class TextEditorCustomElementExample {\n    @State()\n    private value: string =\n        \"This chip doesn't fit \" +\n        '<limel-chip text=\"Github\" icon=\"github_copyrighted\">nested element</limel-chip>';\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                customElements={[\n                    {\n                        tagName: 'limel-chip',\n                        attributes: ['text', 'icon'],\n                    },\n                ]}\n            />,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-size.tsx","fileName":"text-editor-size.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-size","overview":"Resize with container\nSometimes, you may want to make the text editor to follow the size of its container,\nboth in width and height; for instance, when the container is resizable by the user.\n\nIn such cases, make sure to set `allowResize={false}` on the component.\n\nHowever, you can still constrain the text editor to never grow beyond a certain height,\nby either\n- setting a fixed `height` or `max-height` the component itself, or using\n`--text-editor-max-height` CSS variable;\n- or alternatively by setting a fixed `height` or `max-height` on the container\nelement of the component.\n\nIn this example, the maximum height is set to `15rem`, which means that:\n1. the editor will adjust itself to the content inside,\npushing out its container and making it taller, until it reaches `15rem` in height.\n1. and also when you manually resize the container,\nthe editor will try to fill the available surface area, until its height reaches `15rem`.","usage":{},"docs":"Resize with container\nSometimes, you may want to make the text editor to follow the size of its container,\nboth in width and height; for instance, when the container is resizable by the user.\n\nIn such cases, make sure to set `allowResize={false}` on the component.\n\nHowever, you can still constrain the text editor to never grow beyond a certain height,\nby either\n- setting a fixed `height` or `max-height` the component itself, or using\n`--text-editor-max-height` CSS variable;\n- or alternatively by setting a fixed `height` or `max-height` on the container\nelement of the component.\n\nIn this example, the maximum height is set to `15rem`, which means that:\n1. the editor will adjust itself to the content inside,\npushing out its container and making it taller, until it reaches `15rem` in height.\n1. and also when you manually resize the container,\nthe editor will try to fill the available surface area, until its height reaches `15rem`.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor"],"dependencyGraph":{"limel-example-text-editor-size":["limel-text-editor"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-size.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n/**\n * Resize with container\n * Sometimes, you may want to make the text editor to follow the size of its container,\n * both in width and height; for instance, when the container is resizable by the user.\n *\n * In such cases, make sure to set `allowResize={false}` on the component.\n *\n * However, you can still constrain the text editor to never grow beyond a certain height,\n * by either\n * - setting a fixed `height` or `max-height` the component itself, or using\n * `--text-editor-max-height` CSS variable;\n * - or alternatively by setting a fixed `height` or `max-height` on the container\n * element of the component.\n *\n * In this example, the maximum height is set to `15rem`, which means that:\n * 1. the editor will adjust itself to the content inside,\n * pushing out its container and making it taller, until it reaches `15rem` in height.\n * 1. and also when you manually resize the container,\n * the editor will try to fill the available surface area, until its height reaches `15rem`.\n */\n@Component({\n    tag: 'limel-example-text-editor-size',\n    shadow: true,\n    styleUrl: 'text-editor-size.scss',\n})\nexport class TextEditorSizeExample {\n    public render() {\n        return <limel-text-editor allowResize={false} />;\n    }\n}\n"},{"filename":"text-editor-size.scss","type":"scss","source":":host(limel-example-text-editor-size) {\n    box-sizing: border-box;\n    position: relative;\n    display: block;\n\n    overflow: auto;\n    resize: both;\n    max-width: 100%;\n\n    border: 1px dashed rgb(var(--contrast-700));\n    padding: 0.75rem;\n    padding-bottom: 2rem;\n\n    &::after {\n        content: 'Resize me ⤵';\n        font-size: 0.75rem;\n        position: absolute;\n        right: 0.25rem;\n        bottom: 0.25rem;\n    }\n}\n\nlimel-text-editor {\n    max-height: 15rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-custom-triggers.tsx","fileName":"text-editor-custom-triggers.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-triggers","overview":"Custom triggers\n\nA trigger is a character or sequence of characters that if typed in the text editor\nwill initiate a trigger session. The session is initialized with a `triggerStart`\nevent. Subsequent characters written after the trigger sequence will be sent in a\n`triggerChange` event. When the focus is removed from the trigger a `triggerStop`\nevent will be sent.\n\nThe `triggerStart` event contains a `TextEditorInserter` object containing functions\nto manipulate the state of the text editor around the trigger. Using any of the\nsupplied methods will effectivly replace the trigger content in the text editor with\nthe content of choice.\n\nIn this example we pass either plain text, HTML string, or a `limel-chip`\nrepresenting some chosen user in a mention like situation.\n\n:::note\nChanging the contentType resets the text editor with an empty value.","usage":{},"docs":"Custom triggers\n\nA trigger is a character or sequence of characters that if typed in the text editor\nwill initiate a trigger session. The session is initialized with a `triggerStart`\nevent. Subsequent characters written after the trigger sequence will be sent in a\n`triggerChange` event. When the focus is removed from the trigger a `triggerStop`\nevent will be sent.\n\nThe `triggerStart` event contains a `TextEditorInserter` object containing functions\nto manipulate the state of the text editor around the trigger. Using any of the\nsupplied methods will effectivly replace the trigger content in the text editor with\nthe content of choice.\n\nIn this example we pass either plain text, HTML string, or a `limel-chip`\nrepresenting some chosen user in a mention like situation.\n\n:::note\nChanging the contentType resets the text editor with an empty value.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-popover","limel-menu-list","limel-example-controls","limel-button-group","limel-text-editor","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-triggers":["limel-popover","limel-menu-list","limel-example-controls","limel-button-group","limel-text-editor","limel-example-value"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-button-group":["limel-icon","limel-tooltip","limel-badge"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-custom-triggers.tsx","type":"tsx","source":"import {\n    Button,\n    LimelMenuListCustomEvent,\n    MenuItem,\n} from '@limetech/lime-elements';\nimport { Component, h, State, Element, Watch } from '@stencil/core';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    TAB,\n} from '../../../util/keycodes';\nimport { TextEditor, TriggerEventDetail } from '../text-editor.types';\n\n/**\n * Custom triggers\n *\n * A trigger is a character or sequence of characters that if typed in the text editor\n * will initiate a trigger session. The session is initialized with a `triggerStart`\n * event. Subsequent characters written after the trigger sequence will be sent in a\n * `triggerChange` event. When the focus is removed from the trigger a `triggerStop`\n * event will be sent.\n *\n * The `triggerStart` event contains a `TextEditorInserter` object containing functions\n * to manipulate the state of the text editor around the trigger. Using any of the\n * supplied methods will effectivly replace the trigger content in the text editor with\n * the content of choice.\n *\n * In this example we pass either plain text, HTML string, or a `limel-chip`\n * representing some chosen user in a mention like situation.\n *\n * :::note\n * Changing the contentType resets the text editor with an empty value.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n    styleUrl: 'text-editor-custom-triggers.scss',\n})\nexport class TextEditorCustomTriggersExample {\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private tagValue: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private insertMode: 'text' | 'chip' | 'html' = 'text';\n\n    @State()\n    private contentType: 'markdown' | 'html' = 'markdown';\n\n    @State()\n    private items: Array<MenuItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf', selected: true },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    @State()\n    private visibleItems: Array<MenuItem<number>>;\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n        {\n            id: '3',\n            title: 'html',\n        },\n    ];\n\n    private contentTypeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'markdown',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'html',\n        },\n    ];\n\n    private triggerFunction?: TextEditor;\n\n    @Watch('isPickerOpen')\n    protected watchOpen() {\n        this.setupEventHandlers();\n    }\n\n    @Watch('tagValue')\n    protected watchTagValue() {\n        if (this.isPickerOpen) {\n            this.visibleItems = this.items.filter((item: MenuItem<number>) =>\n                item.text.toLowerCase().includes(this.tagValue)\n            );\n        }\n    }\n    public componentWillLoad() {\n        this.visibleItems = this.items;\n        this.setupEventHandlers();\n    }\n\n    private setupEventHandlers() {\n        if (this.isPickerOpen) {\n            this.host.addEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        } else {\n            this.host.removeEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        }\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        const capturedKeys = [ESCAPE, ARROW_UP, ARROW_DOWN, ENTER, TAB];\n        if (capturedKeys.includes(event.key)) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if (event.key === ARROW_DOWN || event.key === ARROW_UP) {\n            this.moveSelection(event.key);\n        }\n\n        if (event.key === ENTER || event.key === TAB) {\n            const selectedItem: MenuItem | undefined = this.visibleItems.find(\n                (item) => item.selected\n            );\n\n            if (selectedItem) {\n                this.insertItem(selectedItem);\n            }\n        }\n\n        if (event.key === ESCAPE) {\n            this.isPickerOpen = false;\n            this.triggerFunction?.stopTrigger();\n        }\n    };\n\n    private moveSelection = (\n        direction: typeof ARROW_UP | typeof ARROW_DOWN\n    ) => {\n        const increment = direction === ARROW_DOWN ? 1 : -1;\n        const numberOfItems = this.visibleItems.length;\n        const currentSelectionIndex = this.visibleItems.findIndex(\n            (item) => item.selected\n        );\n\n        const selectionIndex =\n            (currentSelectionIndex + increment + numberOfItems) % numberOfItems;\n\n        this.removeAllSelections();\n        this.setSelection(selectionIndex);\n    };\n\n    private removeAllSelections = () => {\n        this.items = this.items.map((currentItem) => {\n            currentItem.selected = false;\n\n            return { ...currentItem };\n        });\n    };\n\n    private setSelection = (selectionIndex: number) => {\n        let selectedItemId;\n        this.visibleItems = this.visibleItems.map((item, index) => {\n            const isSelected = index === selectionIndex;\n\n            if (isSelected) {\n                selectedItemId = item.value;\n            }\n\n            return { ...item, selected: isSelected };\n        });\n\n        if (selectedItemId) {\n            this.items[selectedItemId - 1].selected = true;\n        }\n    };\n\n    public render() {\n        return [\n            <limel-example-controls>\n                <label>\n                    contentType:\n                    <limel-button-group\n                        class=\"mode\"\n                        value={this.contentTypeButtons}\n                        onChange={this.handleContentTypeChange}\n                    />\n                </label>\n            </limel-example-controls>,\n            this.renderPicker(),\n            <limel-text-editor\n                style={{ display: 'block' }}\n                value={this.value}\n                customElements={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n                onChange={this.handleChange}\n                contentType={this.contentType}\n                key={this.contentType}\n            />,\n            <limel-example-controls>\n                <label>\n                    Insert mode:\n                    <limel-button-group\n                        class=\"mode\"\n                        value={this.insertModeButtons}\n                        onChange={this.handleInsertModeChange}\n                    />\n                </label>\n                <div class=\"value\">\n                    <limel-example-value\n                        label=\"Action\"\n                        value={this.triggerState}\n                    />\n                    <limel-example-value\n                        label=\"Tag value\"\n                        value={this.tagValue}\n                    />\n                </div>\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private renderPicker = () => {\n        return (\n            <limel-popover\n                open={this.isPickerOpen}\n                openDirection=\"top-start\"\n                onClose={this.handleTriggerStop}\n            >\n                {this.renderList(this.visibleItems)}\n            </limel-popover>\n        );\n    };\n\n    private renderList = (items: Array<MenuItem<number>>) => {\n        if (items.length === 0) {\n            return (\n                <div style={{ padding: '0.5rem' }}>\n                    Couldn't find. Not a hero yet! 🥲\n                </div>\n            );\n        }\n\n        return (\n            <limel-menu-list\n                items={items}\n                onInteract={this.handleListInteraction}\n            />\n        );\n    };\n\n    private handleTriggerStart = (event: CustomEvent<TriggerEventDetail>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail.textEditor;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.tagValue = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<TriggerEventDetail>) => {\n        this.tagValue = event.detail.value.toLowerCase();\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleListInteraction = (\n        event: LimelMenuListCustomEvent<MenuItem<number>>\n    ) => {\n        this.insertItem(event.detail);\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n\n    private handleContentTypeChange = (event: CustomEvent<Button>) => {\n        this.contentType = event.detail.title as any;\n        this.value = '';\n    };\n\n    private insertItem = (item: MenuItem) => {\n        this.removeAllSelections();\n        this.visibleItems = this.items;\n\n        if (this.insertMode === 'html') {\n            this.triggerFunction\n                .insertHtml(`<strong>${item.text}</strong>`)\n                .then(() => console.log('HTML inserted successfully'))\n                .catch((error) =>\n                    console.error('Error inserting HTML:', error)\n                );\n\n            return;\n        }\n\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insert('@' + item.text);\n\n            return;\n        }\n\n        this.triggerFunction.insert({\n            node: {\n                tagName: 'limel-chip',\n                attributes: {\n                    icon: item.icon,\n                    text: item.text,\n                },\n            },\n            children: [\"I'm a teapot\"],\n        });\n    };\n}\n"},{"filename":"text-editor-custom-triggers.scss","type":"scss","source":"limel-button-group {\n    min-width: 8rem;\n}\n\nlimel-example-controls {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.mode {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.value {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-portal {\n    width: auto;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-ui.tsx","fileName":"text-editor-ui.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-ui","overview":"UI\nBy configuring the `ui` prop, you can define how the editor should be\nrendered for the end users. The following options are available:\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.\n\n:::important\nIt's very important to add a `placeholder` or `label` when using\nthe `minimal` or `no-toolbar` UI. The reason is that without a placeholder or a label,\nthere is no visual clue for the user to realize that the grey box is\nactually an input field that they can type in,\nsince the toolbar would not be shown unless the input filed is focused.\n:::","usage":{},"docs":"UI\nBy configuring the `ui` prop, you can define how the editor should be\nrendered for the end users. The following options are available:\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.\n\n:::important\nIt's very important to add a `placeholder` or `label` when using\nthe `minimal` or `no-toolbar` UI. The reason is that without a placeholder or a label,\nthere is no visual clue for the user to realize that the grey box is\nactually an input field that they can type in,\nsince the toolbar would not be shown unless the input filed is focused.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-controls","limel-example-value","limel-select"],"dependencyGraph":{"limel-example-text-editor-ui":["limel-text-editor","limel-example-controls","limel-example-value","limel-select"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-ui.tsx","type":"tsx","source":"import {\n    EditorUiType,\n    LimelSelectCustomEvent,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * UI\n * By configuring the `ui` prop, you can define how the editor should be\n * rendered for the end users. The following options are available:\n * - `standard`: The default editor appearance with a full toolbar and\n *    standard layout.\n * - `minimal`: A compact editor appearance, ideal for limited space\n *    scenarios such as mobile devices. In this mode, the toolbar is hidden\n *    until the editor is focused.\n * - `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n *    This mode is suitable for scenarios where you want to provide a simple\n *    text input without any visible formatting options; but still provide\n *    support for markdown syntax and rich text, using hotkeys or when pasting.\n *\n * :::important\n * It's very important to add a `placeholder` or `label` when using\n * the `minimal` or `no-toolbar` UI. The reason is that without a placeholder or a label,\n * there is no visual clue for the user to realize that the grey box is\n * actually an input field that they can type in,\n * since the toolbar would not be shown unless the input filed is focused.\n * :::\n */\n@Component({\n    tag: 'limel-example-text-editor-ui',\n    shadow: true,\n})\nexport class TextEditorUiExample {\n    @State()\n    private selectedUi: Option<EditorUiType> = {\n        text: 'standard',\n        value: 'standard',\n    };\n\n    private readonly availableUis: Array<Option<EditorUiType>> = [\n        { text: 'standard', value: 'standard' },\n        { text: 'minimal', value: 'minimal' },\n        { text: 'no-toolbar', value: 'no-toolbar' },\n    ];\n\n    @State()\n    private value: string;\n\n    public render() {\n        const placeholderText =\n            this.selectedUi.value === 'standard' ? '' : 'Write a comment…';\n\n        return (\n            <Host>\n                <limel-text-editor\n                    value={this.value}\n                    onChange={this.handleChange}\n                    ui={this.selectedUi.value}\n                    placeholder={placeholderText}\n                />\n                <limel-example-controls\n                    style={{ '--example-controls-column-layout': 'auto-fit' }}\n                >\n                    <limel-example-value value={this.value} />\n                    <limel-select\n                        label=\"ui\"\n                        options={this.availableUis}\n                        value={this.selectedUi}\n                        onChange={this.handleNewSelection}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private readonly handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private readonly handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<EditorUiType>>\n    ) => {\n        this.selectedUi = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-with-html.tsx","fileName":"text-editor-with-html.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-with-html","overview":"Text editor in HTML mode.\n\nWhen using the text editor in HTML mode the `value` property is expected to contain\nan html formatted string and the output will likewise be html.","usage":{},"docs":"Text editor in HTML mode.\n\nWhen using the text editor in HTML mode the `value` property is expected to contain\nan html formatted string and the output will likewise be html.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-with-html":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-with-html.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Text editor in HTML mode.\n *\n * When using the text editor in HTML mode the `value` property is expected to contain\n * an html formatted string and the output will likewise be html.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-html',\n    shadow: true,\n})\nexport class TextEditorWithHtmlExample {\n    @State()\n    private value: string = '<em>Hello</em>, <strong>html</strong>!';\n\n    @State()\n    private readonly = false;\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                readonly={this.readonly}\n                contentType=\"html\"\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-with-inline-images-base64.tsx","fileName":"text-editor-with-inline-images-base64.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-with-inline-images-base64","overview":"Handling inline images (with base64 encoded data)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can immediately insert the image\nas base64 encoded data using the `insertImage` method.\n\n:::note\nThis example demonstrates the simplest approach using base64 encoding.\nHowever, for production use, it is recommended to upload images to\nexternal file storage and insert the src URL of the uploaded image\ninstead, as shown in the file-storage example.","usage":{},"docs":"Handling inline images (with base64 encoded data)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can immediately insert the image\nas base64 encoded data using the `insertImage` method.\n\n:::note\nThis example demonstrates the simplest approach using base64 encoding.\nHowever, for production use, it is recommended to upload images to\nexternal file storage and insert the src URL of the uploaded image\ninstead, as shown in the file-storage example.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor"],"dependencyGraph":{"limel-example-text-editor-with-inline-images-base64":["limel-text-editor"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-with-inline-images-base64.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\nimport {\n    ImageInserter,\n    LimelTextEditorCustomEvent,\n} from '@limetech/lime-elements';\n/**\n * Handling inline images (with base64 encoded data)\n *\n * To allow users to paste images directly into the text editor, you can\n * listen to the `imagePasted` event, which is triggered when an image file\n * is pasted into the editor.\n *\n * The `imagePasted` event contains an `ImageInserter` object, which you can\n * use to insert a thumbnail of the pasted image into the editor.\n * After the thumbnail is inserted, you can immediately insert the image\n * as base64 encoded data using the `insertImage` method.\n *\n * :::note\n * This example demonstrates the simplest approach using base64 encoding.\n * However, for production use, it is recommended to upload images to\n * external file storage and insert the src URL of the uploaded image\n * instead, as shown in the file-storage example.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-inline-images-base64',\n    shadow: true,\n})\nexport class TextEditorWithInlineImagesExample {\n    @State()\n    private value = 'Copy an image file and paste it here.';\n\n    public render() {\n        return (\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                onImagePasted={this.handleImagePasted}\n                contentType=\"html\"\n            />\n        );\n    }\n\n    private handleChange = (event: LimelTextEditorCustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleImagePasted = async (\n        event: LimelTextEditorCustomEvent<ImageInserter>\n    ) => {\n        const imageInserter = event.detail;\n\n        imageInserter.insertThumbnail();\n        imageInserter.insertImage();\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-with-inline-images-file-storage.tsx","fileName":"text-editor-with-inline-images-file-storage.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-with-inline-images-file-storage","overview":"Handling inline images (with external file storage)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can upload the image to an external\nfile storage and insert the src url of the uploaded image using the\n`insertImage` method.\n\nIf the image upload fails, you can insert a failed thumbnail using the\n`insertFailedThumbnail` method.\n\n:::note\nIn this example, because we don't actually upload the image you paste\nanywhere, once the \"upload\" is done, we will replace the image you\npasted with a url to an image of the Lime CRM logo.\n\nIn reality, you would of course insert the url to the newly uploaded\nimage instead.","usage":{},"docs":"Handling inline images (with external file storage)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can upload the image to an external\nfile storage and insert the src url of the uploaded image using the\n`insertImage` method.\n\nIf the image upload fails, you can insert a failed thumbnail using the\n`insertFailedThumbnail` method.\n\n:::note\nIn this example, because we don't actually upload the image you paste\nanywhere, once the \"upload\" is done, we will replace the image you\npasted with a url to an image of the Lime CRM logo.\n\nIn reality, you would of course insert the url to the newly uploaded\nimage instead.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-with-inline-images-file-storage":["limel-text-editor","limel-checkbox","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-with-inline-images-file-storage.tsx","type":"tsx","source":"import { Component, h, State, Host } from '@stencil/core';\nimport {\n    ImageInserter,\n    FileInfo,\n    EditorImage,\n    LimelTextEditorCustomEvent,\n    LimelCheckboxCustomEvent,\n    EditorMetadata,\n} from '@limetech/lime-elements';\n/**\n * Handling inline images (with external file storage)\n *\n * To allow users to paste images directly into the text editor, you can\n * listen to the `imagePasted` event, which is triggered when an image file\n * is pasted into the editor.\n *\n * The `imagePasted` event contains an `ImageInserter` object, which you can\n * use to insert a thumbnail of the pasted image into the editor.\n * After the thumbnail is inserted, you can upload the image to an external\n * file storage and insert the src url of the uploaded image using the\n * `insertImage` method.\n *\n * If the image upload fails, you can insert a failed thumbnail using the\n * `insertFailedThumbnail` method.\n *\n * :::note\n * In this example, because we don't actually upload the image you paste\n * anywhere, once the \"upload\" is done, we will replace the image you\n * pasted with a url to an image of the Lime CRM logo.\n *\n * In reality, you would of course insert the url to the newly uploaded\n * image instead.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-inline-images-file-storage',\n    shadow: true,\n})\nexport class TextEditorWithInlineImagesExample {\n    @State()\n    private value = 'Copy an image file and paste it here.';\n\n    @State()\n    private uploadImageFails = false;\n\n    private metadata: EditorMetadata = { links: [], images: [] };\n\n    public render() {\n        return (\n            <Host>\n                <limel-text-editor\n                    value={this.value}\n                    onChange={this.handleChange}\n                    onImagePasted={this.handleImagePasted}\n                    onMetadataChange={this.handleMetadataChange}\n                />\n                <limel-checkbox\n                    label=\"Upload image fails - insert failed thumbnail\"\n                    onChange={this.handleFailedThumbnailChange}\n                />\n                <limel-example-value label=\"Value\" value={this.value} />\n            </Host>\n        );\n    }\n\n    private handleFailedThumbnailChange = (\n        event: LimelCheckboxCustomEvent<boolean>\n    ) => {\n        this.uploadImageFails = event.detail;\n    };\n\n    private handleChange = (event: LimelTextEditorCustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleImagePasted = async (\n        event: LimelTextEditorCustomEvent<ImageInserter>\n    ) => {\n        const imageInserter = event.detail;\n\n        imageInserter.insertThumbnail();\n\n        const imageSrc = await this.uploadImage(imageInserter.fileInfo);\n        if (imageSrc) {\n            imageInserter.insertImage(imageSrc);\n        } else {\n            imageInserter.insertFailedThumbnail();\n        }\n    };\n\n    private uploadImage = async (fileInfo: FileInfo): Promise<string> => {\n        try {\n            // Upload image to external file storage.\n            // fileInfo.fileContent contains the image data.\n\n            // Simulate upload delay.\n            const imageSrc: string = await new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    if (this.uploadImageFails) {\n                        reject('Server error');\n                    } else {\n                        resolve('https://cdn.lime-crm.com/mail-addin-logo.png');\n                    }\n                }, 2000);\n            });\n\n            // Return the src url of the uploaded image.\n            return imageSrc;\n        } catch (error) {\n            console.error(\n                `Failed to upload image ${fileInfo.filename}: ${error}`\n            );\n        }\n    };\n\n    private handleMetadataChange = (\n        event: LimelTextEditorCustomEvent<EditorMetadata>\n    ) => {\n        const removedImages = this.getRemovedImages(\n            this.metadata,\n            event.detail\n        );\n\n        for (const image of removedImages) {\n            if (image.state === 'success') {\n                this.removeImage(image);\n            }\n        }\n\n        this.metadata = event.detail;\n    };\n\n    private getRemovedImages(\n        oldMetadata: EditorMetadata,\n        newMetadata: EditorMetadata\n    ): EditorImage[] {\n        const newImageIds = new Set(\n            newMetadata.images.map((image) => image.fileInfoId)\n        );\n\n        return oldMetadata.images.filter(\n            (image) => !newImageIds.has(image.fileInfoId)\n        );\n    }\n\n    private removeImage(image: EditorImage) {\n        // Remove image from external file storage if desired.\n        console.log(`Image removed: ${image.fileInfoId}`);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-with-markdown.tsx","fileName":"text-editor-with-markdown.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-with-markdown","overview":"Text editor in markdown mode.\n\nWhen using the text editor in markdown mode the `value` property is expected to contain\na markdown formatted string and the output will likewise be markdown. This is the default\nif no value for `contentType` is provided.","usage":{},"docs":"Text editor in markdown mode.\n\nWhen using the text editor in markdown mode the `value` property is expected to contain\na markdown formatted string and the output will likewise be markdown. This is the default\nif no value for `contentType` is provided.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-with-markdown":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-with-markdown.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Text editor in markdown mode.\n *\n * When using the text editor in markdown mode the `value` property is expected to contain\n * a markdown formatted string and the output will likewise be markdown. This is the default\n * if no value for `contentType` is provided.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-markdown',\n    shadow: true,\n})\nexport class TextEditorWithMarkdownExample {\n    @State()\n    private value: string = '*Hello*, **markdown**!';\n\n    @State()\n    private readonly = false;\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                readonly={this.readonly}\n                contentType=\"markdown\"\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples","filePath":"./src/components/text-editor/examples/text-editor-with-tables.tsx","fileName":"text-editor-with-tables.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/examples/usage","tag":"limel-example-text-editor-with-tables","overview":"Text editor with tables (HTML mode only).\n\nBasic table support is available when using the text editor in `HTML` mode.\nThis allows you to paste and display tables in the text editor.\nComplex operations are not supported, adding and removing columns are not supported.\n\nTables will only appear as expected in text-editor fields that are in `HTML` mode.","usage":{},"docs":"Text editor with tables (HTML mode only).\n\nBasic table support is available when using the text editor in `HTML` mode.\nThis allows you to paste and display tables in the text editor.\nComplex operations are not supported, adding and removing columns are not supported.\n\nTables will only appear as expected in text-editor fields that are in `HTML` mode.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"dependencyGraph":{"limel-example-text-editor-with-tables":["limel-text-editor","limel-example-controls","limel-checkbox","limel-example-value"],"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor-with-tables.tsx","type":"tsx","source":"import { Component, h, State } from '@stencil/core';\n/**\n * Text editor with tables (HTML mode only).\n *\n * Basic table support is available when using the text editor in `HTML` mode.\n * This allows you to paste and display tables in the text editor.\n * Complex operations are not supported, adding and removing columns are not supported.\n *\n * Tables will only appear as expected in text-editor fields that are in `HTML` mode.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-tables',\n    shadow: true,\n})\nexport class TextEditorWithTablesExample {\n    @State()\n    private value: string = `<table><tbody>\n        <tr>\n        <td style=\"background-color: rgb(25, 107, 36);color: white;\"><p><strong>Column1</strong></p></td>\n        <td style=\"background-color: rgb(25, 107, 36);color: white;\"><p><strong>Column2</strong></p></td>\n        </tr>\n        <tr>\n        <td style=\"background-color: rgb(193, 240, 200);color: black;\"><p>Cell A1</p></td>\n        <td style=\"background-color: rgb(193, 240, 200);color: black;\"><p>Cell B1</p></td>\n        </tr>\n        <tr>\n        <td style=\"background-color: yellow;color: red;\"><p>Cell A2</p></td>\n        <td style=\"background-color: yellow;color: red;\"><p>Cell B2</p></td>\n        </tr>\n        </tbody></table>`;\n\n    @State()\n    private readonly = false;\n\n    public render() {\n        return [\n            <limel-text-editor\n                key=\"html-editor\"\n                value={this.value}\n                onChange={this.handleChange}\n                readonly={this.readonly}\n                contentType=\"html\"\n            />,\n            <limel-example-controls key=\"controls\">\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value key=\"example-value\" value={this.value} />,\n        ];\n    }\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples","filePath":"./src/components/tooltip/examples/tooltip-basic.tsx","fileName":"tooltip-basic.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/usage","tag":"limel-example-tooltip-basic","overview":"Basic example","usage":{},"docs":"Basic example","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-tooltip"],"dependencyGraph":{"limel-example-tooltip-basic":["limel-button","limel-tooltip"],"limel-button":["limel-icon","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-basic.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Basic example\n */\n@Component({\n    tag: 'limel-example-tooltip-basic',\n    shadow: true,\n})\nexport class TooltipBasicExample {\n    public render() {\n        return [\n            <limel-button icon=\"search\" id=\"tooltip-example\" />,\n            <limel-tooltip\n                label=\"Search\"\n                helperLabel=\"alt + F\"\n                elementId=\"tooltip-example\"\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples","filePath":"./src/components/tooltip/examples/tooltip-composite.tsx","fileName":"tooltip-composite.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/usage","tag":"limel-example-tooltip-composite","overview":"Composite\n\nA place to try different combinations of states.","usage":{},"docs":"Composite\n\nA place to try different combinations of states.","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-button","limel-tooltip","limel-collapsible-section","limel-form"],"dependencyGraph":{"limel-example-tooltip-composite":["limel-button","limel-tooltip","limel-collapsible-section","limel-form"],"limel-button":["limel-icon","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-collapsible-section":["limel-icon","limel-icon-button"],"limel-icon-button":["limel-icon","limel-tooltip"]},"props":[{"name":"schema","type":"FormSchema","mutable":true,"attr":"schema","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"FormSchema"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-composite.tsx","type":"tsx","source":"import { FormSchema } from '@limetech/lime-elements';\nimport { Component, h, Prop, State } from '@stencil/core';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-tooltip-composite',\n    shadow: true,\n})\nexport class TooltipCompositeExample {\n    @Prop({ mutable: true })\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        label: 'Search',\n        helperLabel: 'alt + F',\n        maxlength: 50,\n    };\n\n    public componentWillLoad() {\n        this.schema = {\n            ...this.schema,\n            lime: {\n                layout: {\n                    type: 'grid',\n                },\n            },\n        };\n        delete this.schema.properties.elementId;\n    }\n\n    public render() {\n        return [\n            <limel-button icon=\"search\" id=\"tooltip-example\" />,\n            <limel-tooltip {...this.props} elementId=\"tooltip-example\" />,\n            this.renderForm(),\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-collapsible-section header=\"Settings\">\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleChange}\n                />\n            </limel-collapsible-section>\n        );\n    }\n\n    private handleChange = (event: CustomEvent) => {\n        this.props = event.detail;\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples","filePath":"./src/design-guidelines/declutter/examples/tooltip-declutter.tsx","fileName":"tooltip-declutter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/examples/usage","tag":"limel-example-tooltip-declutter","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-example-do-do-not","limel-tooltip","limel-button"],"dependencyGraph":{"limel-example-tooltip-declutter":["limel-example-do-do-not","limel-tooltip","limel-button"],"limel-example-do-do-not":["limel-icon","limel-markdown"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-button":["limel-icon","limel-spinner"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-declutter.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-tooltip-declutter',\n    shadow: true,\n    styleUrl: 'tooltip-declutter.scss',\n})\nexport class TooltipUsageExample {\n    public render() {\n        return (\n            <limel-example-do-do-not\n                doDescription=\"When a UI is regularly used to perform a task, provide the information that most users already know, in a tooltip.\"\n                doNotDescription=\"Avoid having UIs that are cluttered with information that most users already know.\"\n            >\n                <div slot=\"do\" class=\"fake-dialog-container shows-full-dialog\">\n                    <div class=\"fake-dialog\">\n                        <p>\n                            <span class=\"tooltip-trigger\" id=\"tooltip-example\">\n                                ?\n                            </span>\n                            Schedule this task?\n                            <limel-tooltip\n                                label=\"Scheduled tasks will be run at night\"\n                                helperLabel=\"between 01:00 to 02:00\"\n                                elementId=\"tooltip-example\"\n                            />\n                        </p>\n                        <div class=\"action-bar\">\n                            <limel-button label=\"Cancel\" />\n                            <limel-button label=\"Schedule\" primary={true} />\n                        </div>\n                    </div>\n                </div>\n                <div\n                    slot=\"do-not\"\n                    class=\"fake-dialog-container shows-full-dialog\"\n                >\n                    <div class=\"fake-dialog\">\n                        <p>Schedule this task?</p>\n                        <p>\n                            Scheduled tasks will be run at night between 01:00\n                            to 02:00.\n                        </p>\n                        <div class=\"action-bar\">\n                            <limel-button label=\"Cancel\" />\n                            <limel-button label=\"Schedule\" primary={true} />\n                        </div>\n                    </div>\n                </div>\n            </limel-example-do-do-not>\n        );\n    }\n}\n"},{"filename":"tooltip-declutter.scss","type":"scss","source":"@import '../../action-buttons/examples/action-buttons';\n\n.tooltip-trigger {\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    aspect-ratio: 1 / 1;\n    height: 1rem;\n    border-radius: 50%;\n    margin-right: 0.5rem;\n\n    font-size: 80%;\n\n    color: rgb(var(--contrast-100));\n    background-color: rgb(var(--contrast-1300));\n\n    cursor: pointer;\n\n    transition: box-shadow 0.2s ease;\n\n    &:hover {\n        box-shadow: var(--shadow-depth-8-focused);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples","filePath":"./src/components/tooltip/examples/tooltip-max-character.tsx","fileName":"tooltip-max-character.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/examples/usage","tag":"limel-example-tooltip-max-character","overview":"Using `maxlength` property\nTo present an easy to read content, the tooltip's maximum text\nlength is set to 50 characters, including spaces.\nWhen this threshold is reached, content will be rendered with line breaks.\nHowever, it is possible to override this value by specifying `maxlength`.\n\n:::note\nTooltips are intended to display very brief information.\nTry not to place large amount of text in them.\n:::","usage":{},"docs":"Using `maxlength` property\nTo present an easy to read content, the tooltip's maximum text\nlength is set to 50 characters, including spaces.\nWhen this threshold is reached, content will be rendered with line breaks.\nHowever, it is possible to override this value by specifying `maxlength`.\n\n:::note\nTooltips are intended to display very brief information.\nTry not to place large amount of text in them.\n:::","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-icon-button","limel-tooltip"],"dependencyGraph":{"limel-example-tooltip-max-character":["limel-icon-button","limel-tooltip"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-max-character.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * Using `maxlength` property\n * To present an easy to read content, the tooltip's maximum text\n * length is set to 50 characters, including spaces.\n * When this threshold is reached, content will be rendered with line breaks.\n * However, it is possible to override this value by specifying `maxlength`.\n *\n * :::note\n * Tooltips are intended to display very brief information.\n * Try not to place large amount of text in them.\n * :::\n */\n@Component({\n    tag: 'limel-example-tooltip-max-character',\n    shadow: true,\n    styleUrl: 'tooltip-max-character.scss',\n})\nexport class TooltipExample {\n    public render() {\n        return [\n            <limel-icon-button icon=\"info\" id=\"tooltip1\" />,\n            <limel-icon-button icon=\"info\" id=\"tooltip2\" />,\n            <limel-icon-button icon=\"info\" id=\"tooltip3\" />,\n            <limel-tooltip\n                label=\"Short text\"\n                helperLabel=\"less than 25ch\"\n                elementId=\"tooltip1\"\n                maxlength={25}\n            />,\n            <limel-tooltip\n                label=\"Long text\"\n                helperLabel=\"The total amount of characters is more than 25\"\n                elementId=\"tooltip2\"\n                maxlength={25}\n            />,\n            <limel-tooltip\n                label=\"Very long text\"\n                helperLabel=\"The total amount of characters is more than default max character length, which is 50ch. Note that there is no max character length specified here.\"\n                elementId=\"tooltip3\"\n            />,\n        ];\n    }\n}\n"},{"filename":"tooltip-max-character.scss","type":"scss","source":":host(limel-example-tooltip-max-character) {\n    display: flex;\n    gap: 1rem;\n    justify-content: space-between;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples","filePath":"./src/design-guidelines/color-system/examples/ui-color-palette.tsx","fileName":"ui-color-palette.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/examples/usage","tag":"limel-example-ui-color-palette","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"ui-color-palette.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'limel-example-ui-color-palette',\n    shadow: true,\n    styleUrl: 'ui-color-palette.scss',\n})\nexport class PaletteExample {\n    public render() {\n        return (\n            <div class=\"color-palette\">\n                <div class=\"swatch --color-red-light\"></div>\n                <div class=\"swatch --color-red-default\">·</div>\n                <div class=\"swatch hue\">red</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>danger</li>\n                        <li>irreversible change</li>\n                        <li>delete</li>\n                        <li>failed</li>\n                        <li>serious error</li>\n                        <li>stop</li>\n                        <li>negative feedback</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-blue-light\"></div>\n                <div class=\"swatch --color-blue-default\">·</div>\n                <div class=\"swatch hue\">blue</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>success</li>\n                        <li>external links</li>\n                        <li>information</li>\n                        <li>help</li>\n                        <li>accented (generic)</li>\n                        <li>positive feedback</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-green-light\"></div>\n                <div class=\"swatch --color-green-default\">·</div>\n                <div class=\"swatch hue\">green</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>ok</li>\n                        <li>safe</li>\n                        <li>turned on</li>\n                        <li>ongoing</li>\n                        <li>new</li>\n                        <li>restore</li>\n                        <li>continue</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-amber-light\"></div>\n                <div class=\"swatch --color-amber-default\">·</div>\n                <div class=\"swatch hue\">amber</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>caution</li>\n                        <li>attention</li>\n                        <li>paused</li>\n                    </ul>\n                </div>\n                <div class=\"swatch --color-orange-light\"></div>\n                <div class=\"swatch --color-orange-default\">·</div>\n                <div class=\"swatch hue\">orange</div>\n                <div class=\"usage\">\n                    <ul>\n                        <li>warning</li>\n                        <li>moderate error</li>\n                    </ul>\n                </div>\n                <div class=\"brightness-label\">light</div>\n                <div class=\"brightness-label\">default</div>\n            </div>\n        );\n    }\n}\n"},{"filename":"ui-color-palette.scss","type":"scss","source":"@use '../../../style/functions';\n@use './shared-styles';\n\n.color-palette {\n    grid-template-rows: repeat(3, 1fr) auto;\n    grid-template-columns: repeat(5, 1fr) auto;\n}\n\n.swatch {\n    max-height: functions.pxToRem(32);\n\n    &.hue {\n        writing-mode: initial;\n        padding-top: 0;\n    }\n}\n\n.usage {\n    ul {\n        padding-inline-start: functions.pxToRem(16);\n        font-size: functions.pxToRem(14);\n        color: rgb(var(--contrast-1300));\n        margin: 0 0 functions.pxToRem(16) 0;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/examples","filePath":"./src/examples/example-value.tsx","fileName":"example-value.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/examples/usage","tag":"limel-example-value","overview":"The `limel-example-value` component is a utility component\nused internally in the Lime Elements documentation to display\nproperty values and component states in a formatted way.\n\n## Purpose\nThis component helps visualize different types of values in\nour component examples and documentation.\nIt's particularly useful for:\n- Displaying primitive values\n- Formatting dates\n- Pretty-printing objects and arrays\n- Showing undefined values\n\n## Usage\n```tsx\n<limel-example-value label=\"Selected item\" value={this.selectedItem} />\n```\n\nDisplay Formatting\nThe component automatically formats different value types:\n- `undefined` values are displayed as `undefined`\n- `Date` objects are converted to strings using `toString()`\n- Objects and arrays are pretty-printed using `JSON.stringify` with indentation\n- Primitive values are displayed within `<code>` tags.","usage":{},"docs":"The `limel-example-value` component is a utility component\nused internally in the Lime Elements documentation to display\nproperty values and component states in a formatted way.\n\n## Purpose\nThis component helps visualize different types of values in\nour component examples and documentation.\nIt's particularly useful for:\n- Displaying primitive values\n- Formatting dates\n- Pretty-printing objects and arrays\n- Showing undefined values\n\n## Usage\n```tsx\n<limel-example-value label=\"Selected item\" value={this.selectedItem} />\n```\n\nDisplay Formatting\nThe component automatically formats different value types:\n- `undefined` values are displayed as `undefined`\n- `Date` objects are converted to strings using `toString()`\n- Objects and arrays are pretty-printed using `JSON.stringify` with indentation\n- Primitive values are displayed within `<code>` tags.","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-example-breadcrumbs-buttons","limel-example-chart-clickable-items","limel-example-checkbox","limel-example-checkbox-readonly","limel-example-chip-menu","limel-example-chip-removable","limel-example-chip-set-input","limel-example-chip-set-input-type-with-menu-items","limel-example-custom-component-form","limel-example-date-picker-custom-formatter","limel-example-date-picker-date","limel-example-date-picker-datetime","limel-example-date-picker-formatted","limel-example-date-picker-month","limel-example-date-picker-programmatic-change","limel-example-date-picker-quarter","limel-example-date-picker-time","limel-example-date-picker-week","limel-example-date-picker-year","limel-example-dynamic-form","limel-example-dynamic-label","limel-example-dynamic-label-readonly-boolean","limel-example-file","limel-example-file-custom-icon","limel-example-file-dropzone","limel-example-file-dropzone-type-filtering","limel-example-file-input","limel-example-file-input-type-filtering","limel-example-file-menu-items","limel-example-form","limel-example-form-with-help","limel-example-input-field-autocomplete","limel-example-input-field-number","limel-example-input-field-showlink","limel-example-input-field-text","limel-example-input-field-textarea","limel-example-list-checkbox","limel-example-list-checkbox-icons","limel-example-list-form","limel-example-list-radio-button","limel-example-list-radio-button-icons","limel-example-menu-basic","limel-example-menu-hotkeys","limel-example-menu-open-sub-menu-programmatically","limel-example-menu-searchable","limel-example-menu-secondary-text","limel-example-menu-separators","limel-example-menu-sub-menu-lazy-loading","limel-example-menu-sub-menu-lazy-loading-infinite","limel-example-menu-sub-menus","limel-example-nested-form","limel-example-notched-outline-basic","limel-example-picker-basic","limel-example-picker-empty-suggestions","limel-example-picker-icons","limel-example-picker-multiple","limel-example-picker-pictures","limel-example-picker-static-actions","limel-example-picker-value-as-object","limel-example-picker-value-as-object-with-actions","limel-example-progress-flow-basic","limel-example-props-factory-form","limel-example-prosemirror-adapter-basic","limel-example-prosemirror-adapter-with-custom-menu","limel-example-readonly-props","limel-example-select","limel-example-select-change-options","limel-example-select-dialog","limel-example-select-multiple","limel-example-select-preselected","limel-example-select-with-empty-option","limel-example-select-with-icons","limel-example-select-with-secondary-text","limel-example-select-with-separators","limel-example-slider-basic","limel-example-slider-multiplier","limel-example-slider-multiplier-percentage-colors","limel-example-switch","limel-example-switch-helper-text","limel-example-switch-readonly","limel-example-tab-bar","limel-example-tab-bar-with-dynamic-tab-width","limel-example-tab-bar-with-equal-tab-width","limel-example-table-activate-row","limel-example-table-local","limel-example-table-movable-columns","limel-example-table-selectable-rows","limel-example-text-editor-allow-resize","limel-example-text-editor-as-form-component","limel-example-text-editor-basic","limel-example-text-editor-composite","limel-example-text-editor-custom-element","limel-example-text-editor-triggers","limel-example-text-editor-ui","limel-example-text-editor-with-html","limel-example-text-editor-with-inline-images-file-storage","limel-example-text-editor-with-markdown","limel-example-text-editor-with-tables"],"dependencies":[],"dependencyGraph":{"limel-example-breadcrumbs-buttons":["limel-example-value"],"limel-example-chart-clickable-items":["limel-example-value"],"limel-example-checkbox":["limel-example-value"],"limel-example-checkbox-readonly":["limel-example-value"],"limel-example-chip-menu":["limel-example-value"],"limel-example-chip-removable":["limel-example-value"],"limel-example-chip-set-input":["limel-example-value"],"limel-example-chip-set-input-type-with-menu-items":["limel-example-value"],"limel-example-custom-component-form":["limel-example-value"],"limel-example-date-picker-custom-formatter":["limel-example-value"],"limel-example-date-picker-date":["limel-example-value"],"limel-example-date-picker-datetime":["limel-example-value"],"limel-example-date-picker-formatted":["limel-example-value"],"limel-example-date-picker-month":["limel-example-value"],"limel-example-date-picker-programmatic-change":["limel-example-value"],"limel-example-date-picker-quarter":["limel-example-value"],"limel-example-date-picker-time":["limel-example-value"],"limel-example-date-picker-week":["limel-example-value"],"limel-example-date-picker-year":["limel-example-value"],"limel-example-dynamic-form":["limel-example-value"],"limel-example-dynamic-label":["limel-example-value"],"limel-example-dynamic-label-readonly-boolean":["limel-example-value"],"limel-example-file":["limel-example-value"],"limel-example-file-custom-icon":["limel-example-value"],"limel-example-file-dropzone":["limel-example-value"],"limel-example-file-dropzone-type-filtering":["limel-example-value"],"limel-example-file-input":["limel-example-value"],"limel-example-file-input-type-filtering":["limel-example-value"],"limel-example-file-menu-items":["limel-example-value"],"limel-example-form":["limel-example-value"],"limel-example-form-with-help":["limel-example-value"],"limel-example-input-field-autocomplete":["limel-example-value"],"limel-example-input-field-number":["limel-example-value"],"limel-example-input-field-showlink":["limel-example-value"],"limel-example-input-field-text":["limel-example-value"],"limel-example-input-field-textarea":["limel-example-value"],"limel-example-list-checkbox":["limel-example-value"],"limel-example-list-checkbox-icons":["limel-example-value"],"limel-example-list-form":["limel-example-value"],"limel-example-list-radio-button":["limel-example-value"],"limel-example-list-radio-button-icons":["limel-example-value"],"limel-example-menu-basic":["limel-example-value"],"limel-example-menu-hotkeys":["limel-example-value"],"limel-example-menu-open-sub-menu-programmatically":["limel-example-value"],"limel-example-menu-searchable":["limel-example-value"],"limel-example-menu-secondary-text":["limel-example-value"],"limel-example-menu-separators":["limel-example-value"],"limel-example-menu-sub-menu-lazy-loading":["limel-example-value"],"limel-example-menu-sub-menu-lazy-loading-infinite":["limel-example-value"],"limel-example-menu-sub-menus":["limel-example-value"],"limel-example-nested-form":["limel-example-value"],"limel-example-notched-outline-basic":["limel-example-value"],"limel-example-picker-basic":["limel-example-value"],"limel-example-picker-empty-suggestions":["limel-example-value"],"limel-example-picker-icons":["limel-example-value"],"limel-example-picker-multiple":["limel-example-value"],"limel-example-picker-pictures":["limel-example-value"],"limel-example-picker-static-actions":["limel-example-value"],"limel-example-picker-value-as-object":["limel-example-value"],"limel-example-picker-value-as-object-with-actions":["limel-example-value"],"limel-example-progress-flow-basic":["limel-example-value"],"limel-example-props-factory-form":["limel-example-value"],"limel-example-prosemirror-adapter-basic":["limel-example-value"],"limel-example-prosemirror-adapter-with-custom-menu":["limel-example-value"],"limel-example-readonly-props":["limel-example-value"],"limel-example-select":["limel-example-value"],"limel-example-select-change-options":["limel-example-value"],"limel-example-select-dialog":["limel-example-value"],"limel-example-select-multiple":["limel-example-value"],"limel-example-select-preselected":["limel-example-value"],"limel-example-select-with-empty-option":["limel-example-value"],"limel-example-select-with-icons":["limel-example-value"],"limel-example-select-with-secondary-text":["limel-example-value"],"limel-example-select-with-separators":["limel-example-value"],"limel-example-slider-basic":["limel-example-value"],"limel-example-slider-multiplier":["limel-example-value"],"limel-example-slider-multiplier-percentage-colors":["limel-example-value"],"limel-example-switch":["limel-example-value"],"limel-example-switch-helper-text":["limel-example-value"],"limel-example-switch-readonly":["limel-example-value"],"limel-example-tab-bar":["limel-example-value"],"limel-example-tab-bar-with-dynamic-tab-width":["limel-example-value"],"limel-example-tab-bar-with-equal-tab-width":["limel-example-value"],"limel-example-table-activate-row":["limel-example-value"],"limel-example-table-local":["limel-example-value"],"limel-example-table-movable-columns":["limel-example-value"],"limel-example-table-selectable-rows":["limel-example-value"],"limel-example-text-editor-allow-resize":["limel-example-value"],"limel-example-text-editor-as-form-component":["limel-example-value"],"limel-example-text-editor-basic":["limel-example-value"],"limel-example-text-editor-composite":["limel-example-value"],"limel-example-text-editor-custom-element":["limel-example-value"],"limel-example-text-editor-triggers":["limel-example-value"],"limel-example-text-editor-ui":["limel-example-value"],"limel-example-text-editor-with-html":["limel-example-value"],"limel-example-text-editor-with-inline-images-file-storage":["limel-example-value"],"limel-example-text-editor-with-markdown":["limel-example-value"],"limel-example-text-editor-with-tables":["limel-example-value"]},"props":[{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"A label describing the value.","docsTags":[],"default":"'Value'","values":[{"type":"string"}],"optional":true,"required":false},{"name":"value","type":"any","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value that should be displayed.","docsTags":[],"values":[{"type":"any"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"example-value.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { isDate, isObject, isArray, isUndefined } from 'lodash-es';\n\n/**\n * The `limel-example-value` component is a utility component\n * used internally in the Lime Elements documentation to display\n * property values and component states in a formatted way.\n *\n * ## Purpose\n * This component helps visualize different types of values in\n * our component examples and documentation.\n * It's particularly useful for:\n * - Displaying primitive values\n * - Formatting dates\n * - Pretty-printing objects and arrays\n * - Showing undefined values\n *\n * ## Usage\n * ```tsx\n * <limel-example-value label=\"Selected item\" value={this.selectedItem} />\n * ```\n *\n * Display Formatting\n * The component automatically formats different value types:\n * - `undefined` values are displayed as `undefined`\n * - `Date` objects are converted to strings using `toString()`\n * - Objects and arrays are pretty-printed using `JSON.stringify` with indentation\n * - Primitive values are displayed within `<code>` tags.\n *\n * @private\n */\n@Component({\n    tag: 'limel-example-value',\n    styleUrl: 'example-value.scss',\n})\nexport class ExampleValue {\n    /**\n     * A label describing the value.\n     */\n    @Prop({ reflect: true })\n    public label? = 'Value';\n\n    /**\n     * The value that should be displayed.\n     */\n    @Prop()\n    public value: any;\n\n    public render() {\n        return (\n            <p>\n                {this.label}: {this.format(this.value)}\n            </p>\n        );\n    }\n\n    private format(val: any) {\n        if (isUndefined(val)) {\n            return <code>undefined</code>;\n        }\n\n        if (isDate(val)) {\n            return <code>{val.toString()}</code>;\n        }\n\n        if (isObject(val) || isArray(val)) {\n            return (\n                <pre>\n                    <code>{JSON.stringify(val, null, 2)}</code>\n                </pre>\n            );\n        }\n\n        return <code>{JSON.stringify(val, null, 2)}</code>;\n    }\n}\n"},{"filename":"example-value.scss","type":"scss","source":"@use '../style/functions';\n\ncode {\n    font-family: 'Source Code Pro', monospace;\n    font-size: functions.pxToRem(12);\n\n    -moz-tab-size: 4;\n    -o-tab-size: 4;\n    tab-size: 4;\n\n    -webkit-hyphens: none;\n    -moz-hyphens: none;\n    -ms-hyphens: none;\n    hyphens: none;\n\n    display: inline-block;\n    border-radius: functions.pxToRem(3);\n    padding: functions.pxToRem(1) functions.pxToRem(5);\n    color: rgb(var(--kompendium-contrast-1300));\n    background-color: rgb(var(--kompendium-contrast-600));\n}\n\npre > code {\n    display: block;\n    border-radius: functions.pxToRem(8);\n    margin: functions.pxToRem(8) 0;\n    padding: functions.pxToRem(16);\n    overflow: auto;\n    white-space: pre-wrap;\n\n    color: rgb(var(--kompendium-contrast-800));\n    background-color: rgb(var(--kompendium-contrast-1600));\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file","filePath":"./src/components/file/file.tsx","fileName":"file.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file/usage","tag":"limel-file","overview":"This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","usage":{},"docs":"This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-file"},{"name":"exampleComponent","text":"limel-example-file-custom-icon"},{"name":"exampleComponent","text":"limel-example-file-menu-items"},{"name":"exampleComponent","text":"limel-example-file-accepted-types"},{"name":"exampleComponent","text":"limel-example-file-composite"}],"encapsulation":"shadow","dependents":["limel-example-file","limel-example-file-accepted-types","limel-example-file-composite","limel-example-file-custom-icon","limel-example-file-menu-items","limel-example-file-viewer-with-picker"],"dependencies":["limel-file-dropzone","limel-chip-set","limel-file-input"],"dependencyGraph":{"limel-file":["limel-file-dropzone","limel-chip-set","limel-file-input"],"limel-file-dropzone":["limel-icon"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-file":["limel-file"],"limel-example-file-accepted-types":["limel-file"],"limel-example-file-composite":["limel-file"],"limel-example-file-custom-icon":["limel-file"],"limel-example-file-menu-items":["limel-file"],"limel-example-file-viewer-with-picker":["limel-file"]},"props":[{"name":"accept","type":"string","mutable":false,"attr":"accept","reflectToAttr":true,"docs":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","docsTags":[],"default":"'*'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"True if the input should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the chosen file is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The input label.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the localisation for translations.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the field is required.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"FileInfo","mutable":false,"reflectToAttr":false,"docs":"The selected file.","docsTags":[],"values":[{"type":"FileInfo"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"FileInfo","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a file is selected/deselected","docsTags":[]},{"event":"interact","detail":"number | string","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when clicking on a chip","docsTags":[]}],"styles":[{"name":"--icon-background-color","annotation":"prop","docs":"Background color of the icon. Defaults to `--contrast-400`."},{"name":"--icon-color","annotation":"prop","docs":"Color of the icon. Defaults to `--contrast-1100`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file.tsx","type":"tsx","source":"import translate from '../../global/translations';\nimport { Chip } from '../chip-set/chip.types';\nimport { Languages } from '../date-picker/date.types';\nimport { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport {\n    getFileBackgroundColor,\n    getFileColor,\n    getFileExtensionTitle,\n    getFileIcon,\n} from '../../util/file-metadata';\nimport { FileInfo } from '../../global/shared-types/file.types';\n\nconst DEFAULT_FILE_CHIP: Chip = {\n    id: null,\n    text: null,\n    removable: true,\n};\n\n/**\n * This component lets end-users select a *single* file from their device\n * storage. Regardless of the user's device or operating system, this component\n * opens up a file picker dialog that allows the user to choose a file.\n *\n * ## Using correct labels\n *\n * This file picker can be used in different contexts. The component's distinct\n * visual design including the upload icon hints end-users that this is not a\n * normal input field like other fields in the form for example.\n *\n * :::important\n * you need to use a descriptive `label` that clarifies the\n * functionality of the file picker, and/or provides users with clear\n * instructions.\n *\n * Depending on the context, you may need to avoid labels such as:\n * - File\n * - Document\n *\n * and instead consider using labels like:\n * - Attach a file\n * - Upload a file\n * - Choose a document\n * - Choose a file\n *\n * and similar phrases...\n * :::\n *\n * @exampleComponent limel-example-file\n * @exampleComponent limel-example-file-custom-icon\n * @exampleComponent limel-example-file-menu-items\n * @exampleComponent limel-example-file-accepted-types\n * @exampleComponent limel-example-file-composite\n */\n@Component({\n    tag: 'limel-file',\n    shadow: true,\n    styleUrl: 'file.scss',\n})\nexport class File {\n    /**\n     * The selected file.\n     */\n    @Prop()\n    public value: FileInfo;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * True if the input should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing files, but allow interaction\n     * with any already existing file.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the chosen file is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Defines the localisation for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a file is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<FileInfo>;\n\n    /**\n     * Dispatched when clicking on a chip\n     */\n    @Event()\n    private interact: EventEmitter<number | string>;\n\n    public render() {\n        return [\n            <limel-file-dropzone\n                disabled={this.disabled || this.readonly || !!this.value}\n                accept={this.accept}\n                onFilesSelected={this.handleNewFiles}\n            >\n                {this.renderChipset()}\n            </limel-file-dropzone>,\n            this.renderDragAndDropTip(),\n        ];\n    }\n\n    private renderDragAndDropTip() {\n        if (this.value || this.disabled || this.readonly) {\n            return;\n        }\n\n        return (\n            <div class=\"drag-and-drop-tip\">\n                <span class=\"invisible-label-mock\" role=\"presentation\">\n                    {this.label}\n                </span>\n                <span class=\"tip\">{this.dropZoneTip()}</span>\n            </div>\n        );\n    }\n\n    private dropZoneTip = (): string => {\n        return this.getTranslation('file.drag-and-drop-tips');\n    };\n\n    private handleNewFiles = (event: CustomEvent<FileInfo[]>) => {\n        this.preventAndStop(event);\n        this.change.emit(event.detail[0]);\n    };\n\n    private getChipArray(): Chip[] {\n        if (!this.value) {\n            return [];\n        }\n\n        return [\n            {\n                ...DEFAULT_FILE_CHIP,\n                text: this.value.filename,\n                id: this.value.id,\n                icon: {\n                    name: getFileIcon(this.value),\n                    title: getFileExtensionTitle(this.value),\n                    color: getFileColor(this.value),\n                    backgroundColor: getFileBackgroundColor(this.value),\n                },\n                href: this.value.href,\n                menuItems: this.value.menuItems,\n            },\n        ];\n    }\n\n    private renderChipset() {\n        const chipset = (\n            <limel-chip-set\n                disabled={this.disabled}\n                readonly={this.readonly}\n                invalid={this.invalid}\n                label={this.label}\n                leadingIcon=\"upload_to_cloud\"\n                language={this.language}\n                onChange={this.handleChipSetChange}\n                onInteract={this.handleChipInteract}\n                required={this.required}\n                type=\"input\"\n                value={this.getChipArray()}\n            />\n        );\n\n        if (this.value) {\n            return chipset;\n        }\n\n        return (\n            <limel-file-input\n                accept={this.accept}\n                disabled={this.disabled || this.readonly}\n            >\n                {chipset}\n            </limel-file-input>\n        );\n    }\n\n    private handleChipSetChange = (event: CustomEvent) => {\n        event.stopPropagation();\n        const file = event.detail.length === 0 ? event.detail[0] : null;\n        if (!file) {\n            this.change.emit(file);\n        }\n    };\n\n    private handleChipInteract = (event: CustomEvent<Chip>) => {\n        this.preventAndStop(event);\n        this.interact.emit(event.detail.id);\n    };\n\n    private preventAndStop(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    private getTranslation(key: string) {\n        return translate.get(key, this.language);\n    }\n}\n"},{"filename":"file.scss","type":"scss","source":"@use '../../style/mixins';\n\n/**\n * @prop --icon-background-color: Background color of the icon. Defaults to `--contrast-400`.\n * @prop --icon-color: Color of the icon. Defaults to `--contrast-1100`.\n */\n\n:host(limel-file) {\n    position: relative;\n}\n\n.drag-and-drop-tip {\n    pointer-events: none;\n    position: absolute;\n    box-sizing: border-box;\n    margin: 0.25rem;\n    inset: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    flex-wrap: nowrap;\n\n    border-radius: 0.25rem;\n    border: 1px dashed rgb(var(--contrast-700));\n\n    padding: 0 0.5rem;\n\n    .invisible-label-mock {\n        flex-shrink: 0;\n        opacity: 0;\n        padding-right: 1rem;\n        padding-left: 1.5rem;\n    }\n\n    .tip {\n        font-size: smaller;\n        color: var(--mdc-theme-text-secondary-on-background);\n\n        // Below tries to render text in two lines,\n        // and then truncate if there is no more space\n        height: auto;\n        max-height: 3rem;\n        line-height: 1;\n        @include mixins.truncate-text-on-line(2);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone","filePath":"./src/components/file-dropzone/file-dropzone.tsx","fileName":"file-dropzone.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-dropzone/usage","tag":"limel-file-dropzone","overview":"This component enables you to seamlessly convert any region of the user interface into\na file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n\nThe file dropzone can then be used to allow end-users to upload files\nby dragging and dropping them into the specified area, for example to trigger an upload process.\n\nAfter receiving the files, the component emits a `filesSelected` event. For unsupported\nfiles (specified with the `accept` prop) a `filesRejected` event will be emitted.\n\nThe event detail would be an array of `FileInfo` objects,\neach representing a file dropped into the dropzone.","usage":{},"docs":"This component enables you to seamlessly convert any region of the user interface into\na file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n\nThe file dropzone can then be used to allow end-users to upload files\nby dragging and dropping them into the specified area, for example to trigger an upload process.\n\nAfter receiving the files, the component emits a `filesSelected` event. For unsupported\nfiles (specified with the `accept` prop) a `filesRejected` event will be emitted.\n\nThe event detail would be an array of `FileInfo` objects,\neach representing a file dropped into the dropzone.","docsTags":[{"name":"exampleComponent","text":"limel-example-file-dropzone"},{"name":"exampleComponent","text":"limel-example-file-dropzone-type-filtering"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-example-file-dropzone","limel-example-file-dropzone-type-filtering","limel-file"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-file-dropzone":["limel-icon"],"limel-example-file-dropzone":["limel-file-dropzone"],"limel-example-file-dropzone-type-filtering":["limel-file-dropzone"],"limel-file":["limel-file-dropzone"]},"props":[{"name":"accept","type":"string","mutable":false,"attr":"accept","reflectToAttr":true,"docs":"Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n\nFor media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\nUnique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\nA comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n`.png, .jpg, .jpeg`.","docsTags":[{"name":"see","text":"[HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\ndetails."}],"default":"'*'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Set to `true` to disable the file dropzone.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":false,"docs":"Is displayed to provide supplementary information to the end users,\nfor instance, which filetypes or file sizes are accepted.","docsTags":[],"default":"''","values":[{"type":"string"}],"optional":true,"required":false},{"name":"text","type":"string","mutable":false,"attr":"text","reflectToAttr":false,"docs":"Is displayed when the user is dragging a file over the dropzone.\nA suitable text could for instance be \"Drop your files here\".","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"filesRejected","detail":"FileInfo[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when files are selected but do not conform with the `accept` property specifications.\nThis can happen when the file types or formats of the selected files are not among the ones allowed by the dropzone,\nas defined by the `accept` property.","docsTags":[{"name":"see","text":" `accept` for details on how to specify acceptable file types."}]},{"event":"filesSelected","detail":"FileInfo[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when files are selected","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-dropzone.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo, isTypeAccepted } from '../../util/files';\nimport { partition } from 'lodash-es';\n\n/**\n * This component enables you to seamlessly convert any region of the user interface into\n * a file dropzone area, just by wrapping it inside the `limel-file-dropzone`.\n *\n * The file dropzone can then be used to allow end-users to upload files\n * by dragging and dropping them into the specified area, for example to trigger an upload process.\n *\n * After receiving the files, the component emits a `filesSelected` event. For unsupported\n * files (specified with the `accept` prop) a `filesRejected` event will be emitted.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-dropzone\n * @exampleComponent limel-example-file-dropzone-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-dropzone',\n    shadow: true,\n    styleUrl: 'file-dropzone.scss',\n})\nexport class FileDropzone {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable the file dropzone.\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Is displayed when the user is dragging a file over the dropzone.\n     * A suitable text could for instance be \"Drop your files here\".\n     */\n    @Prop()\n    public text: string;\n\n    /**\n     * Is displayed to provide supplementary information to the end users,\n     * for instance, which filetypes or file sizes are accepted.\n     */\n    @Prop()\n    public helperText?: string = '';\n\n    /**\n     * Sets to true when there is a file to drop\n     */\n    @State()\n    private hasFileToDrop: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    /**\n     * Emitted when files are selected but do not conform with the `accept` property specifications.\n     * This can happen when the file types or formats of the selected files are not among the ones allowed by the dropzone,\n     * as defined by the `accept` property.\n     *\n     * @see `accept` for details on how to specify acceptable file types.\n     */\n    @Event()\n    filesRejected: EventEmitter<FileInfo[]>;\n\n    public render() {\n        return (\n            <Host\n                onDrop={this.handleDrop}\n                onDragOver={this.handleDragOver}\n                onDragLeave={this.handleDragLeave}\n            >\n                <slot />\n                {this.renderOnDragLayout()}\n            </Host>\n        );\n    }\n\n    private renderOnDragLayout = () => {\n        if (this.disabled || !this.hasFileToDrop) {\n            return;\n        }\n\n        return (\n            <div class=\"has-file-to-drop\">\n                <limel-icon class=\"icon\" name=\"upload_2\" />\n                <div class=\"text-helpertext\">\n                    {this.renderText()}\n                    {this.renderHelperText()}\n                </div>\n            </div>\n        );\n    };\n\n    private renderText = () => {\n        if (!this.text) {\n            return;\n        }\n\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return <span class=\"helper-text\">{this.helperText}</span>;\n    };\n\n    private handleDrop = (event: DragEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n        this.hasFileToDrop = false;\n\n        if (this.disabled) {\n            return;\n        }\n\n        const files: File[] = [...event.dataTransfer.files];\n        const fileInfos: FileInfo[] = files.map(createFileInfo);\n\n        const [acceptedFileInfos, rejectedFileInfos] = partition(\n            fileInfos,\n            (file) => isTypeAccepted(file, this.accept)\n        );\n\n        if (acceptedFileInfos.length > 0) {\n            this.filesSelected.emit(acceptedFileInfos);\n        }\n\n        if (rejectedFileInfos.length > 0) {\n            this.filesRejected.emit(rejectedFileInfos);\n        }\n    };\n\n    private handleDragOver = (event: DragEvent) => {\n        this.hasFileToDrop = true;\n        event.preventDefault();\n    };\n\n    private handleDragLeave = (event: DragEvent) => {\n        this.hasFileToDrop = false;\n        event.preventDefault();\n    };\n}\n"},{"filename":"file-dropzone.scss","type":"scss","source":":host(limel-file-dropzone) {\n    display: block;\n    position: relative;\n}\n\n.has-file-to-drop {\n    animation: display-drop-zone 0.6s ease forwards;\n\n    box-sizing: border-box;\n    isolation: isolate;\n    z-index: 1;\n    position: absolute;\n    inset: 0.25rem;\n\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 0.5rem;\n\n    color: rgb(var(--contrast-700));\n\n    border: 0.125rem dashed rgb(var(--color-cyan-light));\n    border-radius: 0.75rem;\n}\n\n.text-helpertext {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n}\n\n.icon {\n    width: clamp(2rem, 5vh, 7rem);\n}\n\n.text {\n    font-size: clamp(1rem, 2vh, 1.75rem);\n}\n\n.helper-text {\n    font-size: clamp(0.75rem, 1.5vh, 1rem);\n}\n\n@keyframes display-drop-zone {\n    0% {\n        background-color: rgb(var(--contrast-1100), 0);\n        backdrop-filter: blur(0);\n        -webkit-backdrop-filter: blur(0);\n        scale: 0.9;\n        opacity: 0;\n    }\n\n    50% {\n        scale: 1;\n        opacity: 1;\n    }\n\n    100% {\n        background-color: rgb(var(--contrast-1100), 0.8);\n        backdrop-filter: blur(0.25rem);\n        -webkit-backdrop-filter: blur(0.25rem);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-input","filePath":"./src/components/file-input/file-input.tsx","fileName":"file-input.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-input/usage","tag":"limel-file-input","overview":"This component enables you to seamlessly transform any other clickable component that\ngenerates a `click` event into a file input selector.\n\nTo use it, just wrap any clickable component inside the `limel-file-input` component.\nUpon reception of the `click` event this component will open the native file selection\ndialog.\n\nAfter receiving the files, the component emits a `filesSelected` event.\n\nThe event detail would be an array of `FileInfo` objects,\neach representing a file dropped into the dropzone.","usage":{},"docs":"This component enables you to seamlessly transform any other clickable component that\ngenerates a `click` event into a file input selector.\n\nTo use it, just wrap any clickable component inside the `limel-file-input` component.\nUpon reception of the `click` event this component will open the native file selection\ndialog.\n\nAfter receiving the files, the component emits a `filesSelected` event.\n\nThe event detail would be an array of `FileInfo` objects,\neach representing a file dropped into the dropzone.","docsTags":[{"name":"exampleComponent","text":"limel-example-file-input"},{"name":"exampleComponent","text":"limel-example-file-input-type-filtering"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-example-file-input","limel-example-file-input-type-filtering","limel-file"],"dependencies":[],"dependencyGraph":{"limel-example-file-input":["limel-file-input"],"limel-example-file-input-type-filtering":["limel-file-input"],"limel-file":["limel-file-input"]},"props":[{"name":"accept","type":"string","mutable":false,"attr":"accept","reflectToAttr":true,"docs":"Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n\nFor media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\nUnique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\nA comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n`.png, .jpg, .jpeg`.","docsTags":[{"name":"see","text":"[HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\ndetails."}],"default":"'*'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable file input selection.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"multiple","type":"boolean","mutable":false,"attr":"multiple","reflectToAttr":true,"docs":"Set to `true` to enable selection of multiple files","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"filesSelected","detail":"FileInfo[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when files are selected","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-input.tsx","type":"tsx","source":"import {\n    h,\n    Event,\n    EventEmitter,\n    Host,\n    Component,\n    Element,\n    Prop,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { FileInfo } from '../../global/shared-types/file.types';\nimport { createFileInfo } from '../../util/files';\n\n/**\n * This component enables you to seamlessly transform any other clickable component that\n * generates a `click` event into a file input selector.\n *\n * To use it, just wrap any clickable component inside the `limel-file-input` component.\n * Upon reception of the `click` event this component will open the native file selection\n * dialog.\n *\n * After receiving the files, the component emits a `filesSelected` event.\n *\n * The event detail would be an array of `FileInfo` objects,\n * each representing a file dropped into the dropzone.\n *\n * @exampleComponent limel-example-file-input\n * @exampleComponent limel-example-file-input-type-filtering\n * @private\n */\n@Component({\n    tag: 'limel-file-input',\n    shadow: true,\n})\nexport class FileInput {\n    /**\n     * Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n     *\n     * For media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\n     * Unique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\n     * A comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n     * `.png, .jpg, .jpeg`.\n     *\n     * @see [HTML attribute: accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more\n     * details.\n     */\n    @Prop({ reflect: true })\n    public accept: string = '*';\n\n    /**\n     * Set to `true` to disable file input selection.\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to enable selection of multiple files\n     */\n    @Prop({ reflect: true })\n    public multiple: boolean = false;\n\n    /**\n     * Emitted when files are selected\n     */\n    @Event()\n    filesSelected: EventEmitter<FileInfo[]>;\n\n    @Element()\n    private element: HTMLLimelFileElement;\n\n    private fileInput: HTMLInputElement;\n    private fileInputId = createRandomString();\n\n    public componentDidLoad() {\n        // eslint-disable-next-line unicorn/prefer-query-selector\n        this.fileInput = this.element.shadowRoot.getElementById(\n            this.fileInputId\n        ) as HTMLInputElement;\n    }\n\n    public render() {\n        return (\n            <Host\n                onClick={this.handleClick}\n                onKeyUp={this.handleKeyUp}\n                onKeyDown={this.handleKeyDown}\n            >\n                <input\n                    hidden={true}\n                    id={this.fileInputId}\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept={this.accept}\n                    disabled={this.disabled}\n                    multiple={this.multiple}\n                />\n                <slot />\n            </Host>\n        );\n    }\n\n    private handleClick = (event: Event) => {\n        if (this.disabled) {\n            event.stopPropagation();\n            event.preventDefault();\n\n            return;\n        }\n\n        this.triggerFileDialog();\n\n        event.stopPropagation();\n    };\n\n    private handleKeyUp = (event: KeyboardEvent) => {\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (event.code === 'Enter') {\n            this.triggerFileDialog();\n        }\n    };\n\n    private handleKeyDown(event: KeyboardEvent) {\n        if (\n            event.code === 'Tab' ||\n            event.code === 'Backspace' ||\n            event.code === 'Enter'\n        ) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    private triggerFileDialog() {\n        this.fileInput.click();\n    }\n\n    private handleFileChange = (event: Event) => {\n        const files = [...this.fileInput.files];\n        if (files.length > 0) {\n            event.stopPropagation();\n            this.filesSelected.emit(files.map(createFileInfo));\n            this.fileInput.value = '';\n        }\n    };\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer","filePath":"./src/components/file-viewer/file-viewer.tsx","fileName":"file-viewer.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/usage","tag":"limel-file-viewer","overview":"This is a smart component that automatically detects\nthe most common file types such as image, audio, video, and text,\nand properly displays them in the browser.\nThe component is also capable to render the most common office files.\n\n:::note\nImage files will always be contained in their containers, which means\nthey automatically increase or decrease in size to fill their containing box\nwhilst preserving their aspect-ratio.\n\nText and PDF files will also always respect the width and height of the\ncontainer in which the `limel-file-viewer` is loaded.\n:::\n\nFor some file types such as text and images, the component will display a\ndownload button and a button to open the file in a new browser tab.\nThis will allow users to preview the file in a fullscreen mode with the\nbrowser and take advantage of for example native zooming and panning\nfunctionalities.","usage":{},"docs":"This is a smart component that automatically detects\nthe most common file types such as image, audio, video, and text,\nand properly displays them in the browser.\nThe component is also capable to render the most common office files.\n\n:::note\nImage files will always be contained in their containers, which means\nthey automatically increase or decrease in size to fill their containing box\nwhilst preserving their aspect-ratio.\n\nText and PDF files will also always respect the width and height of the\ncontainer in which the `limel-file-viewer` is loaded.\n:::\n\nFor some file types such as text and images, the component will display a\ndownload button and a button to open the file in a new browser tab.\nThis will allow users to preview the file in a fullscreen mode with the\nbrowser and take advantage of for example native zooming and panning\nfunctionalities.","docsTags":[{"name":"exampleComponent","text":"limel-example-file-viewer-basic"},{"name":"exampleComponent","text":"limel-example-file-viewer-office"},{"name":"exampleComponent","text":"limel-example-file-viewer-filename"},{"name":"exampleComponent","text":"limel-example-file-viewer-inbuilt-actions"},{"name":"exampleComponent","text":"limel-example-file-viewer-custom-actions"},{"name":"exampleComponent","text":"limel-example-file-viewer-with-picker"},{"name":"beta"}],"encapsulation":"shadow","dependents":["limel-example-file-viewer-basic","limel-example-file-viewer-custom-actions","limel-example-file-viewer-filename","limel-example-file-viewer-inbuilt-actions","limel-example-file-viewer-office","limel-example-file-viewer-with-picker"],"dependencies":["limel-icon","limel-tooltip","limel-menu","limel-spinner"],"dependencyGraph":{"limel-file-viewer":["limel-icon","limel-tooltip","limel-menu","limel-spinner"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-file-viewer-basic":["limel-file-viewer"],"limel-example-file-viewer-custom-actions":["limel-file-viewer"],"limel-example-file-viewer-filename":["limel-file-viewer"],"limel-example-file-viewer-inbuilt-actions":["limel-file-viewer"],"limel-example-file-viewer-office":["limel-file-viewer"],"limel-example-file-viewer-with-picker":["limel-file-viewer"]},"props":[{"name":"actions","type":"ListItem<any>[]","mutable":false,"reflectToAttr":false,"docs":"An array of custom actions that can be displayed\nas an action menu on the file which is being displayed.","docsTags":[],"values":[{"type":"ListItem<any>[]"}],"optional":false,"required":false},{"name":"allowDownload","type":"boolean","mutable":false,"attr":"allow-download","reflectToAttr":true,"docs":"Displays a button that allows the user to download the file.\nNote that due to the browser's security policies,\nthe file should be hosted on the same domain\nfor the download button to work properly.\nNot displayed for office files!","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"allowFullscreen","type":"boolean","mutable":false,"attr":"allow-fullscreen","reflectToAttr":true,"docs":"Displays a button that allows the user to view the file\nin fullscreen mode.\nNot displayed for office files!","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"allowOpenInNewTab","type":"boolean","mutable":false,"attr":"allow-open-in-new-tab","reflectToAttr":true,"docs":"Displays a button that allows the user to open the file\nin a new browser tab.\nNot displayed for office files!","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"alt","type":"string","mutable":false,"attr":"alt","reflectToAttr":true,"docs":"An optional alternative text, mainly for assistive technologies and screen readers.\nIt is used for only image files, as an `alt` attribute.\nShould optimally hold a description of the image,\nwhich is also displayed on the page if the image can't be loaded for some reason.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"filename","type":"string","mutable":false,"attr":"filename","reflectToAttr":true,"docs":"The name of the file that must also contains its extension.\nThis overrides the filename that the `url` ends with.\nUseful when the `url` does not contain the filename.\nWhen specified, the `filename` will be used as filename of\nthe downloaded file.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the localization for translations.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"officeViewer","type":"\"google-drive\" | \"microsoft-office\"","mutable":false,"attr":"office-viewer","reflectToAttr":true,"docs":"Defines the third-party viewer that should be used to render\nthe content of office files, such as word processing documents,\npresentations, or spreadsheets.","docsTags":[],"default":"'microsoft-office'","values":[{"value":"google-drive","type":"string"},{"value":"microsoft-office","type":"string"}],"optional":false,"required":false},{"name":"url","type":"string","mutable":false,"attr":"url","reflectToAttr":true,"docs":"Link to the file","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"action","detail":"ListItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a custom action is selected from the action menu.","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"file-viewer.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    h,\n    Prop,\n    State,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { Languages } from '../date-picker/date.types';\nimport { ListItem } from '../list/list-item.types';\nimport translate from '../../global/translations';\nimport { detectExtension } from './extension-mapping';\nimport { Fullscreen } from './fullscreen';\nimport { FileType, OfficeViewer } from './file-viewer.types';\nimport { LimelMenuCustomEvent } from '../../components';\n\n/**\n * This is a smart component that automatically detects\n * the most common file types such as image, audio, video, and text,\n * and properly displays them in the browser.\n * The component is also capable to render the most common office files.\n *\n * :::note\n * Image files will always be contained in their containers, which means\n * they automatically increase or decrease in size to fill their containing box\n * whilst preserving their aspect-ratio.\n *\n * Text and PDF files will also always respect the width and height of the\n * container in which the `limel-file-viewer` is loaded.\n * :::\n *\n * For some file types such as text and images, the component will display a\n * download button and a button to open the file in a new browser tab.\n * This will allow users to preview the file in a fullscreen mode with the\n * browser and take advantage of for example native zooming and panning\n * functionalities.\n *\n * @exampleComponent limel-example-file-viewer-basic\n * @exampleComponent limel-example-file-viewer-office\n * @exampleComponent limel-example-file-viewer-filename\n * @exampleComponent limel-example-file-viewer-inbuilt-actions\n * @exampleComponent limel-example-file-viewer-custom-actions\n * @exampleComponent limel-example-file-viewer-with-picker\n *\n * @beta\n */\n\n@Component({\n    tag: 'limel-file-viewer',\n    shadow: true,\n    styleUrl: 'file-viewer.scss',\n})\nexport class FileViewer {\n    /**\n     * Link to the file\n     */\n    @Prop({ reflect: true })\n    public url: string;\n\n    /**\n     * The name of the file that must also contains its extension.\n     * This overrides the filename that the `url` ends with.\n     * Useful when the `url` does not contain the filename.\n     * When specified, the `filename` will be used as filename of\n     * the downloaded file.\n     */\n    @Prop({ reflect: true })\n    public filename?: string;\n\n    /**\n     * An optional alternative text, mainly for assistive technologies and screen readers.\n     * It is used for only image files, as an `alt` attribute.\n     * Should optimally hold a description of the image,\n     * which is also displayed on the page if the image can't be loaded for some reason.\n     */\n    @Prop({ reflect: true })\n    public alt?: string;\n\n    /**\n     * Displays a button that allows the user to view the file\n     * in fullscreen mode.\n     * Not displayed for office files!\n     */\n    @Prop({ reflect: true })\n    public allowFullscreen?: boolean = false;\n\n    /**\n     * Displays a button that allows the user to open the file\n     * in a new browser tab.\n     * Not displayed for office files!\n     */\n    @Prop({ reflect: true })\n    public allowOpenInNewTab?: boolean = false;\n\n    /**\n     * Displays a button that allows the user to download the file.\n     * Note that due to the browser's security policies,\n     * the file should be hosted on the same domain\n     * for the download button to work properly.\n     * Not displayed for office files!\n     */\n    @Prop({ reflect: true })\n    public allowDownload?: boolean = false;\n\n    /**\n     * Defines the localization for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Defines the third-party viewer that should be used to render\n     * the content of office files, such as word processing documents,\n     * presentations, or spreadsheets.\n     */\n    @Prop({ reflect: true })\n    public officeViewer: OfficeViewer = 'microsoft-office';\n\n    /**\n     * An array of custom actions that can be displayed\n     * as an action menu on the file which is being displayed.\n     */\n    @Prop()\n    public actions: ListItem[];\n\n    /**\n     * Emitted when a custom action is selected from the action menu.\n     */\n    @Event()\n    public action: EventEmitter<ListItem>;\n\n    @Element()\n    public HostElement: HTMLLimelFileViewerElement;\n\n    private fullscreen: Fullscreen;\n\n    @State()\n    private isFullscreen: boolean = false;\n\n    @State()\n    private fileType: FileType;\n\n    /**\n     * True while the file is being loaded.\n     */\n    @State()\n    private loading: boolean = true;\n\n    @State()\n    private fileUrl: string = '';\n\n    constructor() {\n        this.fullscreen = new Fullscreen(this.HostElement);\n    }\n\n    public async componentWillLoad() {\n        this.fileType = detectExtension(this.filename, this.url);\n        await this.createURL(this.fileType);\n    }\n\n    public render() {\n        if (!this.isOfficeFileAccessibleViaURL) {\n            return this.renderNoFileSupportMessage();\n        }\n\n        if (this.loading) {\n            return <limel-spinner size=\"x-small\" limeBranded={false} />;\n        }\n\n        return this.renderFileViewer();\n    }\n\n    @Watch('url')\n    protected async watchUrl(newUrl: string, oldUrl: string) {\n        if (newUrl === oldUrl) {\n            return;\n        }\n\n        this.loading = true;\n        this.fileType = detectExtension(this.filename, this.fileUrl);\n        await this.createURL(this.fileType);\n    }\n\n    private renderFileViewer() {\n        const fileViewerFunctions = {\n            pdf: this.renderPdf,\n            image: this.renderImage,\n            video: this.renderVideo,\n            audio: this.renderAudio,\n            text: this.renderText,\n            office: this.renderOffice,\n        };\n        const fileViewerFunction =\n            fileViewerFunctions[this.fileType] ||\n            this.renderNoFileSupportMessage;\n\n        return fileViewerFunction();\n    }\n\n    private renderPdf = () => {\n        return [\n            <div class=\"action-menu-for-pdf-files\">\n                {this.renderActionMenu()}\n            </div>,\n            <iframe src={this.fileUrl} loading=\"lazy\" />,\n        ];\n    };\n\n    private renderImage = () => {\n        return [\n            this.renderButtons(),\n            <img src={this.fileUrl} alt={this.alt} loading=\"lazy\" />,\n        ];\n    };\n\n    private renderVideo = () => {\n        return (\n            <video controls>\n                <source src={this.fileUrl} />\n            </video>\n        );\n    };\n\n    private renderAudio = () => {\n        return (\n            <audio controls>\n                <source src={this.fileUrl} />\n            </audio>\n        );\n    };\n\n    private renderText = () => {\n        return [\n            this.renderButtons(),\n            <object data={this.fileUrl} type=\"text/plain\">\n                {`Text content from: ${this.filename || this.url}`}\n                <a\n                    href={this.fileUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Open text file in new tab\n                </a>\n            </object>,\n        ];\n    };\n\n    private renderOffice = () => {\n        return [\n            <div class=\"action-menu-for-office-files\">\n                {this.renderActionMenu()}\n            </div>,\n            <iframe\n                src={\n                    this.getOfficeViewerUrl() + this.fileUrl + '&embedded=true'\n                }\n                loading=\"lazy\"\n            />,\n        ];\n    };\n\n    private isOfficeFileAccessibleViaURL = () => {\n        return (\n            this.fileType === 'office' &&\n            !(\n                this.fileUrl.startsWith('http://') ||\n                this.fileUrl.startsWith('https://')\n            )\n        );\n    };\n\n    private getOfficeViewerUrl = () => {\n        const officeViewers = {\n            'microsoft-office':\n                'https://view.officeapps.live.com/op/embed.aspx?src=',\n            'google-drive': 'https://docs.google.com/gview?url=',\n        };\n\n        return officeViewers[this.officeViewer];\n    };\n\n    private renderNoFileSupportMessage = () => {\n        return (\n            <div class=\"no-support\" role=\"alert\">\n                <limel-icon\n                    class=\"icon--warning\"\n                    name=\"brake_warning\"\n                    size=\"large\"\n                    role=\"presentation\"\n                />\n                <p>\n                    {this.getTranslation(\n                        'file-viewer.message.unsupported-filetype'\n                    )}\n                </p>\n                {this.renderDownloadButton()}\n            </div>\n        );\n    };\n\n    private renderButtons = () => {\n        return (\n            <div class=\"buttons\">\n                {this.renderActionMenu()}\n                {this.renderToggleFullscreenButton()}\n                {this.renderDownloadButton()}\n                {this.renderOpenInNewTabButton()}\n            </div>\n        );\n    };\n\n    private renderToggleFullscreenButton = () => {\n        if (!this.allowFullscreen || !this.fullscreen.isSupported()) {\n            return;\n        }\n\n        const icon = this.isFullscreen ? 'multiply' : 'fit_to_width';\n\n        const label = this.isFullscreen\n            ? this.getTranslation('file-viewer.exit-fullscreen')\n            : this.getTranslation('file-viewer.open-in-fullscreen');\n\n        return [\n            <button\n                class=\"button--toggle-fullscreen\"\n                id=\"tooltip-toggle-fullscreen\"\n                role=\"button\"\n                onClick={this.handleToggleFullscreen}\n            >\n                <limel-icon name={icon} />\n                <limel-tooltip\n                    label={label}\n                    elementId=\"tooltip-toggle-fullscreen\"\n                    openDirection=\"left\"\n                />\n            </button>,\n        ];\n    };\n\n    private renderDownloadButton = () => {\n        if (!this.allowDownload || this.isFullscreen) {\n            return;\n        }\n\n        return (\n            <a\n                class=\"button--download\"\n                id=\"tooltip-download\"\n                role=\"button\"\n                download={this.filename ?? ''}\n                href={this.fileUrl}\n                target=\"_blank\"\n            >\n                <limel-icon name=\"download_2\" />\n                <limel-tooltip\n                    label={this.getTranslation('file-viewer.download')}\n                    elementId=\"tooltip-download\"\n                    openDirection=\"left\"\n                />\n            </a>\n        );\n    };\n\n    private renderOpenInNewTabButton = () => {\n        if (!this.allowOpenInNewTab || this.isFullscreen) {\n            return;\n        }\n\n        return (\n            <a\n                class=\"button--new-tab\"\n                id=\"tooltip-new-tab\"\n                role=\"button\"\n                href={this.fileUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <limel-icon name=\"external_link\" />\n                <limel-tooltip\n                    label={this.getTranslation('file-viewer.open-in-new-tab')}\n                    elementId=\"tooltip-new-tab\"\n                    openDirection=\"left\"\n                />\n            </a>\n        );\n    };\n\n    private renderActionMenu = () => {\n        if (!this.actions || this.isFullscreen) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class=\"action-menu\"\n                items={this.actions}\n                onSelect={this.emitOnAction}\n                open-direction=\"left\"\n            >\n                <button\n                    class=\"button--action\"\n                    id=\"tooltip-more\"\n                    role=\"button\"\n                    slot=\"trigger\"\n                >\n                    <limel-icon name=\"menu_2\" />\n                    <limel-tooltip\n                        label={this.getTranslation('file-viewer.more-actions')}\n                        elementId=\"tooltip-more\"\n                        openDirection=\"left\"\n                    />\n                </button>\n            </limel-menu>\n        );\n    };\n\n    private createURL = async (fileType: string) => {\n        if (['pdf'].includes(fileType)) {\n            const response = await fetch(this.url);\n            const blob = await response.blob();\n\n            this.fileUrl = URL.createObjectURL(blob);\n        } else {\n            this.fileUrl = this.url;\n        }\n\n        this.loading = false;\n    };\n\n    private handleToggleFullscreen = () => {\n        if (this.fullscreen.isSupported()) {\n            this.fullscreen.toggle();\n            this.isFullscreen = !this.isFullscreen;\n        }\n    };\n\n    private emitOnAction = (event: LimelMenuCustomEvent<ListItem>) => {\n        event.stopPropagation();\n        this.action.emit(event.detail);\n    };\n\n    private getTranslation(key: string) {\n        return translate.get(key, this.language);\n    }\n}\n"},{"filename":"file-viewer.scss","type":"scss","source":"@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n$size-of-buttons: 2rem;\n\n:host {\n    isolation: isolate;\n    position: relative;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nimg,\nvideo,\naudio,\nobject,\niframe {\n    max-height: 100%;\n    max-width: 100%;\n    box-sizing: border-box;\n}\n\niframe {\n    border: none;\n    width: 100%;\n    height: 100%;\n    min-height: 20rem; // makes sure to get minimum comfortable space for viewing office files, and Microsoft Office viewers toolbars\n}\n\nimg {\n    min-width: 7rem;\n    object-fit: contain; // increases or decreases the size of the image to fill the box whilst preserving its aspect-ratio.\n}\n\nvideo {\n    width: 100%;\n    height: auto;\n}\n\naudio {\n    width: 100%;\n}\n\nobject {\n    width: 100%;\n    height: 100%;\n}\n\nobject[type='application/pdf'] {\n    min-height: 20rem;\n    // makes sure to get browsers' native controls for the PDF\n}\n\nobject[type='text/plain'] {\n    border-radius: 0.25rem;\n    padding-right: $size-of-buttons;\n\n    overflow-y: auto;\n}\n\n@mixin plain-text-in-fullscreen {\n    background-color: rgb(var(--color-gray-darker));\n\n    object[type='text/plain'] {\n        max-width: 50rem;\n        max-height: calc(100% - 2rem);\n    }\n}\n\n:host(:fullscreen) {\n    @include plain-text-in-fullscreen;\n}\n:host(:-webkit-full-screen) {\n    // this is repetition of the previous block,\n    // but needed for Safari to work.\n    // Cannot write SCSS rules for `:host` using commas for some reason.\n    // e.g.: `:host(:fullscreen), :host(:-webkit-full-screen)`.\n    // So you have to repeat it sadly.\n    @include plain-text-in-fullscreen;\n}\n\n@import './partial-styles/ui-controls.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/flatpickr-adapter","filePath":"./src/components/date-picker/flatpickr-adapter/flatpickr-adapter.tsx","fileName":"flatpickr-adapter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/flatpickr-adapter/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/date-picker/flatpickr-adapter/usage","tag":"limel-flatpickr-adapter","overview":"This component is internal and only supposed to be used by\nthe limel-date-picker. This component is needed in order for us\nto render the flatpickr calendar in a portal.","usage":{},"docs":"This component is internal and only supposed to be used by\nthe limel-date-picker. This component is needed in order for us\nto render the flatpickr calendar in a portal.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-date-picker"],"dependencies":[],"dependencyGraph":{"limel-date-picker":["limel-flatpickr-adapter"]},"props":[{"name":"format","type":"string","mutable":false,"attr":"format","reflectToAttr":false,"docs":"Format to display the selected date in.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"formatter","type":"(date: Date) => string","mutable":false,"reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"(date: Date) => string"}],"optional":false,"required":true},{"name":"inputElement","type":"HTMLElement","mutable":false,"reflectToAttr":false,"docs":"The native input element to use with flatpickr.","docsTags":[],"values":[{"type":"HTMLElement"}],"optional":false,"required":false},{"name":"isOpen","type":"boolean","mutable":false,"attr":"is-open","reflectToAttr":false,"docs":"Set to `true` if the calendar should be open.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"Type of date picker.","docsTags":[],"default":"'datetime'","values":[{"value":"date","type":"string"},{"value":"datetime","type":"string"},{"value":"month","type":"string"},{"value":"quarter","type":"string"},{"value":"time","type":"string"},{"value":"week","type":"string"},{"value":"year","type":"string"}],"optional":false,"required":false},{"name":"value","type":"Date","mutable":false,"reflectToAttr":false,"docs":"The value of the field.","docsTags":[],"values":[{"type":"Date"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Date","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the date picker value is changed.","docsTags":[]}],"styles":[{"name":"--today-label","annotation":"prop","docs":"Tooltip label for \"today\"."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"flatpickr-adapter.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { DateType, Languages } from '../../date-picker/date.types';\nimport translate from '../../../global/translations';\nimport { DatePicker as DateOnlyPicker } from '../pickers/date-picker';\nimport { DatetimePicker } from '../pickers/datetime-picker';\nimport { MonthPicker } from '../pickers/month-picker';\nimport { Picker } from '../pickers/picker';\nimport { QuarterPicker } from '../pickers/quarter-picker';\nimport { TimePicker } from '../pickers/time-picker';\nimport { WeekPicker } from '../pickers/week-picker';\nimport { YearPicker } from '../pickers/year-picker';\n\n/**\n * This component is internal and only supposed to be used by\n * the limel-date-picker. This component is needed in order for us\n * to render the flatpickr calendar in a portal.\n *\n * @private\n */\n@Component({\n    tag: 'limel-flatpickr-adapter',\n    shadow: true,\n    styleUrl: 'flatpickr-adapter.scss',\n})\nexport class DatePickerCalendar {\n    /**\n     * The value of the field.\n     */\n    @Prop()\n    public value: Date;\n\n    /**\n     * Type of date picker.\n     */\n    @Prop()\n    public type: DateType = 'datetime';\n\n    /**\n     * Format to display the selected date in.\n     */\n    @Prop()\n    public format: string;\n\n    /**\n     * Set to `true` if the calendar should be open.\n     */\n    @Prop()\n    public isOpen: boolean;\n\n    /**\n     * The native input element to use with flatpickr.\n     */\n    @Prop()\n    public inputElement: HTMLElement;\n\n    /**\n     * Defines the localisation for translations and date formatting.\n     * Property `format` customizes the localized date format.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Prop()\n    public formatter!: (date: Date) => string;\n\n    /**\n     * Emitted when the date picker value is changed.\n     */\n    @Event()\n    public change: EventEmitter<Date>;\n\n    private picker: Picker;\n    private flatPickrCreated: boolean = false;\n\n    private container: HTMLElement;\n\n    public componentWillLoad() {\n        switch (this.type) {\n            case 'date': {\n                this.picker = new DateOnlyPicker(\n                    this.language,\n                    this.change,\n                    this.format\n                );\n                break;\n            }\n\n            case 'time': {\n                this.picker = new TimePicker(\n                    this.language,\n                    this.change,\n                    this.format\n                );\n                break;\n            }\n\n            case 'week': {\n                this.picker = new WeekPicker(\n                    this.language,\n                    this.change,\n                    this.format\n                );\n                break;\n            }\n\n            case 'month': {\n                this.picker = new MonthPicker(\n                    this.language,\n                    this.change,\n                    translate,\n                    this.format\n                );\n                break;\n            }\n\n            case 'quarter': {\n                this.picker = new QuarterPicker(\n                    this.language,\n                    this.change,\n                    translate,\n                    this.format\n                );\n                break;\n            }\n            case 'year': {\n                this.picker = new YearPicker(\n                    this.language,\n                    this.change,\n                    translate,\n                    this.format\n                );\n                break;\n            }\n\n            default: {\n                this.picker = new DatetimePicker(\n                    this.language,\n                    this.change,\n                    this.format\n                );\n                break;\n            }\n        }\n\n        if (this.formatter) {\n            this.picker.formatter = this.formatter;\n        }\n    }\n\n    public componentDidUpdate() {\n        if (!this.flatPickrCreated) {\n            this.createFlatpickr();\n        } else if (!this.isOpen) {\n            this.picker.setValue(this.value);\n        }\n    }\n\n    private createFlatpickr() {\n        if (!this.inputElement) {\n            // The input element is programatically set on this element\n            // after its been rendered.\n            return;\n        }\n\n        if (!this.isOpen || !this.container.checkVisibility()) {\n            return;\n        }\n\n        this.picker.init(this.inputElement, this.container, this.value);\n        this.flatPickrCreated = true;\n    }\n\n    public disconnectedCallback() {\n        this.picker.destroy();\n        this.flatPickrCreated = false;\n    }\n\n    public render() {\n        return (\n            <div\n                class=\"container\"\n                ref={(el) => (this.container = el)}\n                style={{\n                    '--today-label': `\"${translate.get('date-picker.today')}\"`,\n                }}\n            />\n        );\n    }\n}\n"},{"filename":"flatpickr-adapter.scss","type":"scss","source":"@use '../../../style/functions';\n@use '../../../style/mixins';\n\n@use '@material/theme/mdc-theme';\n@import '_flatpickr.scss';\n\n/**\n * @prop --today-label: Tooltip label for \"today\".\n */\n\n:host(limel-flatpickr-adapter) {\n    --calendar-text-color: rgb(var(--contrast-1400));\n    color: var(--calendar-text-color);\n\n    * {\n        box-sizing: border-box;\n    }\n}\n\nsvg {\n    fill: var(--calendar-text-color) !important;\n}\n\n.flatpickr-calendar {\n    isolation: isolate;\n    border-radius: 0.25rem;\n    background-color: var(--lime-elevated-surface-background-color);\n    box-shadow: var(--shadow-depth-16);\n}\n\n.flatpickr-weekwrapper {\n    .flatpickr-day,\n    .flatpickr-weekday {\n        color: rgb(var(--contrast-700));\n    }\n}\n\n.flatpickr-weeks {\n    padding: 0 0.5rem;\n    box-shadow: 1px 0 0 rgb(var(--contrast-300));\n}\n\n.flatpickr-weekdaycontainer,\n.dayContainer {\n    flex-grow: 1;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n}\n\n.flatpickr-day {\n    .dayContainer & {\n        @include mixins.is-flat-clickable();\n    }\n    position: relative;\n    cursor: pointer;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--calendar-text-color);\n\n    border: 1px solid transparent;\n    border-radius: 2.5rem;\n    width: 2.5rem;\n    height: 2.5rem;\n    line-height: 2.5rem;\n\n    &:hover {\n        z-index: 1;\n    }\n\n    &.prevMonthDay,\n    &.nextMonthDay {\n        color: rgb(var(--contrast-800));\n\n        &.inRange {\n            opacity: 0.6;\n        }\n    }\n\n    &.selected,\n    &.startRange,\n    &.endRange,\n    &.inRange,\n    &.selected:hover {\n        border-color: var(--mdc-theme-primary);\n        color: var(--mdc-theme-on-primary);\n        background: var(--mdc-theme-primary);\n    }\n\n    &.today {\n        border-color: var(--mdc-theme-on-primary);\n        box-shadow: 0 0 0 0.125rem var(--mdc-theme-primary);\n\n        &:hover {\n            &:not(.selected) {\n                background-color: transparent;\n                color: var(--mdc-theme-primary);\n            }\n            &:before {\n                top: -60%;\n                opacity: 1;\n            }\n        }\n\n        &:before {\n            transition:\n                opacity 0.2s ease,\n                top 0.2s ease;\n\n            pointer-events: none;\n            content: var(--today-label);\n            display: inline-block;\n            position: absolute;\n            inset: auto;\n            top: -50%;\n\n            height: 1.25rem;\n            line-height: 1.25rem;\n            font-size: 0.75rem;\n\n            color: rgb(var(--contrast-1100));\n            border-radius: 1rem;\n            padding: 0.125rem 0.5rem;\n\n            background-color: rgb(var(--contrast-100), 0.9);\n            box-shadow: var(--shadow-depth-16);\n            opacity: 0;\n        }\n    }\n\n    &.inRange {\n        transition-duration: 0s;\n    }\n}\n\n.flatpickr-time {\n    border-top: 1px solid rgb(var(--contrast-400));\n\n    input {\n        color: var(--mdc-theme-on-surface);\n    }\n\n    input,\n    .flatpickr-am-pm {\n        &:hover,\n        &:focus {\n            background: rgb(var(--contrast-100));\n        }\n    }\n}\n\n.flatpickr-weekdays {\n    background-color: rgb(var(--contrast-300));\n}\n\n// top bar of month view\n.flatpickr-months {\n    justify-items: center;\n    padding: 0.125rem;\n    color: var(--calendar-text-color) !important;\n    border-bottom: 1px solid rgb(var(--contrast-300));\n\n    svg {\n        height: 0.75rem;\n        width: 0.75rem;\n    }\n\n    .flatpickr-month {\n        display: flex;\n        align-items: stretch;\n    }\n\n    .flatpickr-current-month {\n        display: flex;\n        justify-content: space-evenly;\n        align-items: stretch;\n        gap: 1rem;\n        inset: 0;\n\n        height: unset;\n        width: 100%;\n\n        padding: 0.25rem;\n\n        .numInputWrapper {\n            width: 4rem;\n            border-radius: 0.25rem;\n\n            &:hover {\n                background-color: rgb(var(--contrast-300));\n            }\n        }\n\n        input {\n            height: 100%;\n        }\n    }\n\n    .flatpickr-prev-month,\n    .flatpickr-next-month {\n        position: relative;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        width: 2rem;\n    }\n}\n\n.flatpickr-monthDropdown-months,\n.flatpickr-prev-month,\n.flatpickr-next-month,\n.arrowUp,\n.arrowDown {\n    @include mixins.is-flat-clickable;\n    border-radius: 0.25rem;\n}\n\n.arrowUp {\n    border-radius: 0 0.25rem 0 0;\n}\n\n.arrowDown {\n    border-radius: 0 0 0.25rem 0;\n}\n\n.numInputWrapper {\n    border-radius: 0.25rem;\n\n    span {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 1rem;\n\n        &.arrowUp:after {\n            border-bottom-color: rgb(var(--contrast-1400));\n        }\n\n        &.arrowDown:after {\n            border-top-color: rgb(var(--contrast-1400));\n        }\n    }\n}\n\n// ***************************\n\n.datepicker-months-container,\n.datepicker-quarters-container,\n.datepicker-years-container {\n    display: grid;\n    gap: 0.5rem;\n    padding: 0.5rem;\n}\n\n.datepicker-months-container {\n    grid-template-columns: repeat(6, 1fr);\n}\n.datepicker-quarters-container {\n    grid-template-columns: repeat(4, 1fr);\n}\n.datepicker-years-container {\n    grid-template-columns: repeat(5, 1fr);\n}\n\n.datepicker-month,\n.datepicker-quarter,\n.datepicker-year {\n    @include mixins.is-flat-clickable;\n    min-width: 0;\n    text-align: center;\n\n    &.selected {\n        color: var(--mdc-theme-on-primary);\n        background: var(--mdc-theme-primary);\n    }\n}\n\n.datepicker-month-heading,\n.datepicker-quarter-heading,\n.datepicker-year-heading {\n    align-self: center;\n}\n\n.datepicker-month {\n    padding: 0.125rem 0.5rem;\n    border-radius: 2rem;\n}\n.datepicker-quarter {\n    padding: 0.75rem 0;\n    border-radius: 1rem;\n}\n.datepicker-year {\n    padding: 0.125rem 0.25rem;\n    border-radius: 2rem;\n}\n\n.datepicker-quarter {\n    font-weight: bold;\n    font-size: 1rem;\n}\n\n.datepicker-month-in-quarter {\n    opacity: 0.7;\n    display: block;\n    font-size: 0.75rem;\n    font-weight: normal;\n\n    &:first-of-type {\n        margin-top: 0.5rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/flex-container","filePath":"./src/components/flex-container/flex-container.tsx","fileName":"flex-container.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/flex-container/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/flex-container/usage","tag":"limel-flex-container","overview":"This component is deprecated and will be removed in a future version of\nLime Elements. Please use CSS for your flexible container needs 🙂\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox","usage":{},"docs":"This component is deprecated and will be removed in a future version of\nLime Elements. Please use CSS for your flexible container needs 🙂\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox","docsTags":[{"name":"deprecated","text":"- Please use CSS instead https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"},{"name":"private"},{"name":"slot","text":"- Container content"}],"encapsulation":"shadow","dependents":[],"dependencies":[],"dependencyGraph":{},"deprecation":"- Please use CSS instead https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox","props":[{"name":"align","type":"\"center\" | \"end\" | \"start\" | \"stretch\"","mutable":false,"attr":"align","reflectToAttr":true,"docs":"Specify how items are aligned along the cross axis","docsTags":[],"default":"'center'","values":[{"value":"center","type":"string"},{"value":"end","type":"string"},{"value":"start","type":"string"},{"value":"stretch","type":"string"}],"optional":false,"required":false},{"name":"direction","type":"\"horizontal\" | \"vertical\"","mutable":false,"attr":"direction","reflectToAttr":true,"docs":"Direction of the main axis","docsTags":[],"default":"'horizontal'","values":[{"value":"horizontal","type":"string"},{"value":"vertical","type":"string"}],"optional":false,"required":false},{"name":"justify","type":"\"center\" | \"end\" | \"space-around\" | \"space-between\" | \"space-evenly\" | \"start\"","mutable":false,"attr":"justify","reflectToAttr":true,"docs":"Specify how items are aligned along the main axis","docsTags":[],"default":"'space-between'","values":[{"value":"center","type":"string"},{"value":"end","type":"string"},{"value":"space-around","type":"string"},{"value":"space-between","type":"string"},{"value":"space-evenly","type":"string"},{"value":"start","type":"string"}],"optional":false,"required":false},{"name":"reverse","type":"boolean","mutable":false,"attr":"reverse","reflectToAttr":true,"docs":"Reverse the order of the items","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[{"name":"","docs":"Container content"}],"parts":[],"listeners":[],"sources":[{"filename":"flex-container.tsx","type":"tsx","source":"import {\n    FlexContainerAlign,\n    FlexContainerDirection,\n    FlexContainerJustify,\n} from './flex-container.types';\nimport { Component, h, Prop } from '@stencil/core';\n\n/**\n * This component is deprecated and will be removed in a future version of\n * Lime Elements. Please use CSS for your flexible container needs 🙂\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox\n *\n * @deprecated - Please use CSS instead https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox\n * @private\n * @slot - Container content\n */\n@Component({\n    tag: 'limel-flex-container',\n    shadow: true,\n    styleUrl: 'flex-container.scss',\n})\nexport class FlexContainer {\n    /**\n     * Direction of the main axis\n     */\n    @Prop({ reflect: true })\n    public direction: FlexContainerDirection = 'horizontal';\n\n    /**\n     * Specify how items are aligned along the main axis\n     */\n    @Prop({ reflect: true })\n    public justify: FlexContainerJustify = 'space-between';\n\n    /**\n     * Specify how items are aligned along the cross axis\n     */\n    @Prop({ reflect: true })\n    public align: FlexContainerAlign = 'center';\n\n    /**\n     * Reverse the order of the items\n     */\n    @Prop({ reflect: true })\n    public reverse = false;\n\n    public componentWillLoad() {\n        console.warn(\n            'limel-flex-container is deprecated, please use CSS instead: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox'\n        );\n    }\n\n    public render() {\n        return <slot />;\n    }\n}\n"},{"filename":"flex-container.scss","type":"scss","source":":host(limel-flex-container) {\n    display: flex;\n}\n:host(limel-flex-container[hidden]) {\n    display: none;\n}\n:host(limel-flex-container[direction='horizontal']) {\n    flex-direction: row;\n}\n:host(limel-flex-container[direction='horizontal'][reverse]) {\n    flex-direction: row-reverse;\n}\n:host(limel-flex-container[direction='vertical']) {\n    flex-direction: column;\n}\n:host(limel-flex-container[direction='vertical'][reverse]) {\n    flex-direction: column-reverse;\n}\n:host(limel-flex-container[align='start']) {\n    align-items: flex-start;\n}\n:host(limel-flex-container[align='end']) {\n    align-items: flex-end;\n}\n:host(limel-flex-container[align='center']) {\n    align-items: center;\n}\n:host(limel-flex-container[align='stretch']) {\n    align-items: stretch;\n}\n:host(limel-flex-container[justify='start']) {\n    justify-content: flex-start;\n}\n:host(limel-flex-container[justify='end']) {\n    justify-content: flex-end;\n}\n:host(limel-flex-container[justify='center']) {\n    justify-content: center;\n}\n:host(limel-flex-container[justify='space-between']) {\n    justify-content: space-between;\n}\n:host(limel-flex-container[justify='space-around']) {\n    justify-content: space-around;\n}\n:host(limel-flex-container[justify='space-evenly']) {\n    justify-content: space-evenly;\n}\n\n// Since consumers often copy/paste from examples of `limel-dialog` from the\n// documentations, they often put their buttons in a `limel-flex-container`\n// which is used in the footer slot of those examples with buttons.\n// So to prevent unwanted layout problems of buttons having no distance, we use\n// below code to target `limel-flex-container`s in those slots.\n:host(limel-flex-container[slot='button']) {\n    gap: 0.5rem; // Makes sure buttons get some default distance\n    width: 100%;\n    justify-content: flex-end;\n}\n:host(limel-flex-container[slot='button'][direction='horizontal'][reverse]) {\n    justify-content: flex-start;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/form","filePath":"./src/components/form/form.tsx","fileName":"form.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/form/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/form/usage","tag":"limel-form","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-form"},{"name":"exampleComponent","text":"limel-example-nested-form"},{"name":"exampleComponent","text":"limel-example-list-form"},{"name":"exampleComponent","text":"limel-example-dynamic-form"},{"name":"exampleComponent","text":"limel-example-custom-component-form"},{"name":"exampleComponent","text":"limel-example-props-factory-form"},{"name":"exampleComponent","text":"limel-example-form-layout"},{"name":"exampleComponent","text":"limel-example-form-span-fields"},{"name":"exampleComponent","text":"limel-example-custom-error-message"},{"name":"exampleComponent","text":"limel-example-server-errors"},{"name":"exampleComponent","text":"limel-example-form-with-help"},{"name":"exampleComponent","text":"limel-example-form-row-layout"}],"encapsulation":"shadow","dependents":["limel-example-button-composite","limel-example-button-group-composite","limel-example-callout-composite","limel-example-chip-set-composite","limel-example-custom-component-form","limel-example-custom-error-message","limel-example-date-picker-composite","limel-example-dialog-form","limel-example-dynamic-form","limel-example-file-composite","limel-example-form","limel-example-form-layout","limel-example-form-row-layout","limel-example-form-span-fields","limel-example-form-with-help","limel-example-list-form","limel-example-menu-composite","limel-example-nested-form","limel-example-picker-composite","limel-example-props-factory-form","limel-example-server-errors","limel-example-slider-composite","limel-example-text-editor-as-form-component","limel-example-tooltip-composite"],"dependencies":[],"dependencyGraph":{"limel-example-button-composite":["limel-form"],"limel-example-button-group-composite":["limel-form"],"limel-example-callout-composite":["limel-form"],"limel-example-chip-set-composite":["limel-form"],"limel-example-custom-component-form":["limel-form"],"limel-example-custom-error-message":["limel-form"],"limel-example-date-picker-composite":["limel-form"],"limel-example-dialog-form":["limel-form"],"limel-example-dynamic-form":["limel-form"],"limel-example-file-composite":["limel-form"],"limel-example-form":["limel-form"],"limel-example-form-layout":["limel-form"],"limel-example-form-row-layout":["limel-form"],"limel-example-form-span-fields":["limel-form"],"limel-example-form-with-help":["limel-form"],"limel-example-list-form":["limel-form"],"limel-example-menu-composite":["limel-form"],"limel-example-nested-form":["limel-form"],"limel-example-picker-composite":["limel-form"],"limel-example-props-factory-form":["limel-form"],"limel-example-server-errors":["limel-form"],"limel-example-slider-composite":["limel-form"],"limel-example-text-editor-as-form-component":["limel-form"],"limel-example-tooltip-composite":["limel-form"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Set to `true` to disable the whole form.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"errors","type":"{ [key: string]: string[] | ValidationError; }","mutable":false,"reflectToAttr":false,"docs":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","docsTags":[],"values":[{"type":"{ [key: string]: string[]"},{"type":"ValidationError; }"}],"optional":false,"required":false},{"name":"propsFactory","type":"(schema: FormSchema<any>) => Record<string, any>","mutable":false,"reflectToAttr":false,"docs":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","docsTags":[],"values":[{"type":"(schema: FormSchema<any>) => Record<string, any>"}],"optional":true,"required":false},{"name":"schema","type":"FormSchema<any>","mutable":false,"reflectToAttr":false,"docs":"The schema used to render the form","docsTags":[],"default":"{}","values":[{"type":"FormSchema<any>"}],"optional":false,"required":false},{"name":"transformErrors","type":"(errors: FormError[]) => FormError[]","mutable":false,"reflectToAttr":false,"docs":"Custom function to customize the default error messages","docsTags":[],"values":[{"type":"(errors: FormError[]) => FormError[]"}],"optional":true,"required":false},{"name":"value","type":"object","mutable":false,"reflectToAttr":false,"docs":"Value of the form","docsTags":[],"values":[{"type":"object"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"object","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a change is made within the form","docsTags":[]},{"event":"validate","detail":"ValidationStatus","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the validity of the form changes, or when\na change is made to an invalid form","docsTags":[]}],"styles":[{"name":"--form-background-color-of-even-rows","annotation":"prop","docs":"Background of even rows in the form, when layout type is `row`. Defaults to `transparent`."},{"name":"--form-background-color-of-odd-rows","annotation":"prop","docs":"Background of odd rows in the form, when layout type is `row`. Defaults to `--contrast-200`."},{"name":"--form-body-padding","annotation":"prop","docs":"space around content of the form. Defaults to `1rem`."},{"name":"--form-column-gap","annotation":"prop","docs":"defines the vertical space between elements of the form with `grid` and `default` layouts. Defaults to `1rem`."},{"name":"--form-gap","annotation":"prop","docs":"defines the space between elements of the form with `grid` and `default` layouts. Defaults to `1rem`."},{"name":"--form-row-gap","annotation":"prop","docs":"defines the horizontal space between elements of the form with `grid` and `default` layouts. Defaults to `1rem`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"form.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport React from 'react';\nimport { createRoot, Root } from 'react-dom/client';\nimport JSONSchemaForm, { AjvError } from '@rjsf/core';\nimport retargetEvents from 'react-shadow-dom-retarget-events';\nimport {\n    FormError,\n    FormSchema,\n    ValidationError,\n    ValidationStatus,\n} from './form.types';\nimport {\n    ArrayFieldTemplate,\n    FieldTemplate,\n    ObjectFieldTemplate,\n} from './templates';\nimport { SchemaField as CustomSchemaField } from './fields/schema-field';\nimport { ArrayField as CustomArrayField } from './fields/array-field';\nimport { ObjectField as CustomObjectField } from './fields/object-field';\nimport { widgets } from './widgets';\nimport { createRandomString } from '../../util/random-string';\nimport Ajv, { RequiredParams } from 'ajv';\nimport { isInteger } from './validators';\nimport { mapValues } from 'lodash-es';\n\n/**\n * @exampleComponent limel-example-form\n * @exampleComponent limel-example-nested-form\n * @exampleComponent limel-example-list-form\n * @exampleComponent limel-example-dynamic-form\n * @exampleComponent limel-example-custom-component-form\n * @exampleComponent limel-example-props-factory-form\n * @exampleComponent limel-example-form-layout\n * @exampleComponent limel-example-form-span-fields\n * @exampleComponent limel-example-custom-error-message\n * @exampleComponent limel-example-server-errors\n * @exampleComponent limel-example-form-with-help\n * @exampleComponent limel-example-form-row-layout\n */\n@Component({\n    tag: 'limel-form',\n    shadow: true,\n    styleUrl: 'form.scss',\n})\nexport class Form {\n    /**\n     * The schema used to render the form\n     */\n    @Prop()\n    public schema: FormSchema = {};\n\n    /**\n     * Value of the form\n     */\n    @Prop()\n    public value: object;\n\n    /**\n     * Set to `true` to disable the whole form.\n     */\n    @Prop()\n    public disabled = false;\n\n    /**\n     * Factory for creating properties for custom form components\n     *\n     * When using custom components in the form some properties might have to be\n     * set dynamically. If this factory is set, it will be called with the\n     * current schema for the field for each custom component in the form. The\n     * factory must return an object where each key is the name of the property\n     * that should be set, along with its value.\n     */\n    @Prop()\n    public propsFactory?: (schema: FormSchema) => Record<string, any>;\n\n    /**\n     * Custom function to customize the default error messages\n     */\n    @Prop()\n    public transformErrors?: (errors: FormError[]) => FormError[];\n\n    /**\n     * Extra errors to display in the form. Typical use case is asynchronous\n     * errors generated server side.\n     */\n    @Prop()\n    public errors: ValidationError;\n\n    /**\n     * Emitted when a change is made within the form\n     */\n    @Event()\n    public change: EventEmitter<object>;\n\n    /**\n     * Emitted when the validity of the form changes, or when\n     * a change is made to an invalid form\n     */\n    @Event()\n    public validate: EventEmitter<ValidationStatus>;\n\n    @Element()\n    private host: HTMLLimelFormElement;\n\n    private isValid = true;\n    private modifiedSchema: FormSchema;\n    private validator: Ajv.ValidateFunction;\n    private root: Root;\n\n    public constructor() {\n        this.handleChange = this.handleChange.bind(this);\n        this.getCustomErrorMessages = this.getCustomErrorMessages.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        this.setSchemaId();\n        this.createValidator();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (!this.host.shadowRoot.querySelector('.root')) {\n            return;\n        }\n\n        this.reactRender();\n        retargetEvents(this.host.shadowRoot);\n        this.validateForm(this.value);\n    }\n\n    public componentDidUpdate() {\n        this.reactRender();\n        this.validateForm(this.value);\n    }\n\n    public disconnectedCallback() {\n        if (this.root) {\n            this.root.unmount();\n            this.root = undefined;\n        }\n    }\n\n    public render() {\n        return <div class=\"root\" />;\n    }\n\n    private reactRender() {\n        if (!this.root) {\n            const rootElement = this.host.shadowRoot.querySelector('.root');\n            this.root = createRoot(rootElement);\n        }\n\n        this.root.render(\n            React.createElement(\n                JSONSchemaForm,\n                {\n                    schema: this.modifiedSchema,\n                    formData: this.value,\n                    onChange: this.handleChange,\n                    widgets: widgets,\n                    liveValidate: true,\n                    showErrorList: false,\n                    extraErrors: this.getExtraErrors(this.errors),\n                    FieldTemplate: FieldTemplate,\n                    ArrayFieldTemplate: ArrayFieldTemplate as any,\n                    ObjectFieldTemplate: ObjectFieldTemplate,\n                    disabled: this.disabled,\n                    transformErrors: this.getCustomErrorMessages,\n                    formContext: {\n                        schema: this.modifiedSchema,\n                        rootValue: this.value,\n                        propsFactory: this.propsFactory,\n                    },\n                    fields: {\n                        SchemaField: CustomSchemaField as any,\n                        ArrayField: CustomArrayField as any,\n                        ObjectField: CustomObjectField as any,\n                    },\n                },\n                []\n            )\n        );\n    }\n\n    private handleChange(event: any) {\n        this.change.emit(event.formData);\n    }\n\n    private validateForm(value: object) {\n        const isValid = this.validator(value) === true;\n        const errors: FormError[] = this.getValidationErrors();\n        const status: ValidationStatus = {\n            valid: isValid,\n            errors: errors,\n        };\n\n        if (this.isValid !== status.valid || !status.valid) {\n            this.validate.emit(status);\n        }\n\n        this.isValid = status.valid;\n    }\n\n    @Watch('schema')\n    public setSchema() {\n        this.setSchemaId();\n        this.createValidator();\n    }\n\n    private setSchemaId() {\n        // Due to a bug in react-jsonschema-form, validation will stop working if the schema is updated.\n        // A workaround at the moment is to always give it a unique ID\n        // https://github.com/rjsf-team/react-jsonschema-form/issues/1563\n        const id = `${this.schema.$id}-${createRandomString()}`;\n        this.modifiedSchema = {\n            ...this.schema,\n            id: id,\n            $id: id,\n        };\n    }\n\n    private createValidator() {\n        const validator = new Ajv({\n            unknownFormats: 'ignore',\n            allErrors: true,\n            multipleOfPrecision: 2,\n        }).addFormat('integer', isInteger);\n        this.validator = validator.compile(this.schema);\n    }\n\n    private getValidationErrors(): FormError[] {\n        const errors = this.validator.errors || [];\n\n        return errors.map((error: Ajv.ErrorObject): FormError => {\n            let property = error.dataPath;\n            if (error.keyword === 'required') {\n                property = (error.params as RequiredParams).missingProperty;\n            }\n\n            return {\n                name: error.keyword,\n                property: property,\n                message: error.message,\n                schemaPath: error.schemaPath,\n            };\n        });\n    }\n\n    private getExtraErrors(errors: ValidationError): ExtraError | undefined {\n        if (!errors) {\n            return;\n        }\n\n        return mapValues(errors, (error) => {\n            if (Array.isArray(error)) {\n                return { __errors: error };\n            }\n\n            return this.getExtraErrors(error);\n        });\n    }\n\n    private getCustomErrorMessages(originalErrors: AjvError[]): AjvError[] {\n        if (!this.transformErrors) {\n            return originalErrors;\n        }\n\n        const errors: FormError[] = originalErrors.map((error: AjvError) => {\n            return {\n                name: error.name,\n                params: error.params,\n                property: error.property,\n                message: error.message,\n                // For some reason 'schemaPath' is missing from the AjvError type definition:\n                // https://github.com/rjsf-team/react-jsonschema-form/issues/2140\n\n                schemaPath: error['schemaPath'],\n            };\n        });\n\n        // Use `.call({}, …)` here to bind `this` to an empty object to prevent\n        // the consumer submitted `transformErrors` from getting access to our\n        // component's internals. /Ads\n        return this.transformErrors\n            .call({}, errors)\n            .map((transformedError: FormError) => {\n                const originalError = originalErrors.find((error: AjvError) => {\n                    return transformedError.property === error.property;\n                });\n\n                return {\n                    ...originalError,\n                    message: transformedError.message,\n                };\n            });\n    }\n}\n\ninterface ExtraError {\n    [key: string]:\n        | ExtraError\n        | {\n              __errors: string[];\n          };\n}\n"},{"filename":"form.scss","type":"scss","source":"@use '../../style/internal/shared_input-select-picker';\n\n/**\n * @prop --form-body-padding: space around content of the form. Defaults to `1rem`.\n * @prop --form-column-gap: defines the vertical space between elements of the form with `grid` and `default` layouts. Defaults to `1rem`.\n * @prop --form-row-gap: defines the horizontal space between elements of the form with `grid` and `default` layouts. Defaults to `1rem`.\n * @prop --form-gap: defines the space between elements of the form with `grid` and `default` layouts. Defaults to `1rem`.\n * @prop --form-background-color-of-even-rows: Background of even rows in the form, when layout type is `row`. Defaults to `transparent`.\n * @prop --form-background-color-of-odd-rows:Background of odd rows in the form, when layout type is `row`. Defaults to `--contrast-200`.\n */\n\n.form-group {\n    min-width: 0;\n}\n\n.limel-form-array-item--simple {\n    display: flex;\n    align-items: center;\n    padding-bottom: var(--form-row-gap, 1rem);\n\n    *:first-child {\n        flex-grow: 1;\n    }\n}\n\nlimel-code-editor {\n    margin-bottom: 0.75rem;\n}\n\n.limel-form-array-item--object {\n    margin-bottom: 0.25rem;\n}\n\n.limel-form-layout--default {\n    display: grid;\n    column-gap: var(--form-column-gap, 1rem);\n    row-gap: var(--form-row-gap, 1rem);\n    padding: var(--form-body-padding, 1rem);\n}\n\n.limel-form-layout--grid {\n    --min-height-of-one-row: #{shared_input-select-picker.$height-of-mdc-text-field};\n    display: grid;\n    column-gap: var(--form-column-gap, 1rem);\n    row-gap: var(--form-row-gap, 1rem);\n    padding: var(--form-body-padding, 1rem);\n\n    // Using `minmax(0, 1fr)` below, instead of just `1fr` ensures that\n    // components that are wider than their column don't make the column grow\n    // wider and squash the other columns. /Ads\n    grid-template-columns: repeat(var(--number-of-columns), minmax(0, 1fr));\n\n    &.auto-reorder-to-avoid-empty-cells {\n        grid-auto-flow: dense;\n    }\n\n    &.layout-1-columns {\n        .limel-form-layout-colspan--1,\n        .limel-form-layout-colspan--2,\n        .limel-form-layout-colspan--3,\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 1;\n        }\n    }\n\n    &.layout-2-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2,\n        .limel-form-layout-colspan--3,\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 2;\n        }\n    }\n\n    &.layout-3-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2 {\n            grid-column: span 2;\n        }\n        .limel-form-layout-colspan--3,\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 3;\n        }\n    }\n\n    &.layout-4-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2 {\n            grid-column: span 2;\n        }\n        .limel-form-layout-colspan--3 {\n            grid-column: span 3;\n        }\n        .limel-form-layout-colspan--4,\n        .limel-form-layout-colspan--5 {\n            grid-column: span 4;\n        }\n    }\n\n    &.layout-5-columns {\n        .limel-form-layout-colspan--1 {\n            grid-column: span 1;\n        }\n        .limel-form-layout-colspan--2 {\n            grid-column: span 2;\n        }\n        .limel-form-layout-colspan--3 {\n            grid-column: span 3;\n        }\n        .limel-form-layout-colspan--4 {\n            grid-column: span 4;\n        }\n        .limel-form-layout-colspan--5 {\n            grid-column: span 5;\n        }\n    }\n\n    .limel-form-layout-colspan--all {\n        grid-column: 1/-1;\n    }\n}\n\n.limel-form-layout--grid {\n    limel-checkbox,\n    limel-switch {\n        // This is because we have to align these items to top and\n        // make sure they align correctly even in one-columned layouts\n        min-height: var(--min-height-of-one-row);\n    }\n    limel-checkbox {\n        //  margin-top: 0.5rem;\n        display: block;\n    }\n    limel-switch {\n        margin-left: 0.5rem;\n    }\n}\n\n.form-error {\n    color: var(--mdc-theme-error, #b00020);\n    font-size: 0.6875rem;\n    line-height: 1.5;\n    visibility: inherit;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    padding-top: 0.25rem;\n}\n\n.button-add-new {\n    margin-top: 0.5rem;\n    width: 100%;\n}\n\n.mdc-typography--headline1 {\n    position: relative;\n}\n\n.form-group {\n    position: relative;\n\n    limel-help {\n        position: absolute;\n        top: calc(var(--form-row-gap, 1rem) * -0.5);\n        left: calc(var(--form-column-gap, 1rem) * -0.5);\n    }\n\n    .mdc-typography--headline1,\n    .mdc-typography--body1 {\n        color: rgb(var(--contrast-1100));\n    }\n\n    .mdc-typography--headline1 {\n        --mdc-typography-headline1-font-size: 2rem;\n        --mdc-typography-headline1-line-height: 2.25rem;\n        --mdc-typography-headline1-letter-spacing: -0.01rem;\n        --mdc-typography-headline1-font-weight: 400;\n        margin-top: 1.5rem;\n        margin-bottom: 0.25rem;\n    }\n\n    .mdc-typography--body1 {\n        margin-top: 0;\n        margin-bottom: 0.5rem;\n    }\n\n    .form-group {\n        .mdc-typography--headline1,\n        .mdc-typography--body1 {\n            color: rgb(var(--contrast-1200));\n        }\n\n        .mdc-typography--headline1 {\n            --mdc-typography-headline1-font-size: 1.625rem;\n            --mdc-typography-headline1-line-height: 1.25rem;\n            --mdc-typography-headline1-font-weight: 300;\n            margin-top: 1rem;\n\n            &:before {\n                content: '';\n                display: block;\n                position: absolute;\n                top: 0;\n                bottom: 0;\n                margin: auto;\n                left: -0.75rem;\n\n                background-color: var(--mdc-theme-primary);\n                width: 0.125rem;\n                height: var(--mdc-typography-headline1-line-height);\n                border-radius: 0.125rem;\n\n                opacity: 0.6;\n            }\n        }\n\n        .form-group {\n            .mdc-typography--headline1,\n            .mdc-typography--body1 {\n                color: rgb(var(--contrast-1300));\n            }\n\n            .mdc-typography--headline1 {\n                --mdc-typography-headline1-font-size: 1.375rem;\n                --mdc-typography-headline1-line-height: 1.5rem;\n                margin-top: 0.5rem;\n\n                &:before {\n                    display: none;\n                }\n            }\n\n            .form-group {\n                .mdc-typography--headline1,\n                .mdc-typography--body1 {\n                    color: rgb(var(--contrast-1400));\n                }\n\n                .mdc-typography--headline1 {\n                    --mdc-typography-headline1-font-size: 1.25rem;\n                    --mdc-typography-headline1-line-height: 1.25rem;\n                    margin-top: 1rem;\n\n                    &:before {\n                        display: none;\n                    }\n                }\n            }\n            .form-group {\n                .mdc-typography--headline1,\n                .mdc-typography--body1 {\n                    color: rgb(var(--contrast-1400));\n                }\n\n                .mdc-typography--headline1 {\n                    --mdc-typography-headline1-font-size: 1.25rem;\n                    --mdc-typography-headline1-line-height: 1.25rem;\n                    margin-top: 0.25rem;\n\n                    &:before {\n                        display: none;\n                    }\n                }\n\n                .form-group {\n                    .mdc-typography--headline1,\n                    .mdc-typography--body1 {\n                        color: rgb(var(--contrast-1400));\n                    }\n\n                    .mdc-typography--headline1 {\n                        --mdc-typography-headline1-font-size: 1rem;\n                        --mdc-typography-headline1-line-height: 1rem;\n                        margin-top: 0.25rem;\n\n                        &:before {\n                            display: none;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@import './row/row.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/grid","filePath":"./src/components/grid/grid.tsx","fileName":"grid.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/grid/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/grid/usage","tag":"limel-grid","overview":"The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","usage":{},"docs":"The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","docsTags":[{"name":"exampleComponent","text":"limel-example-grid"},{"name":"slot","text":"- Grid content"}],"encapsulation":"shadow","dependents":["limel-example-grid"],"dependencies":[],"dependencyGraph":{"limel-example-grid":["limel-grid"]},"props":[],"methods":[],"events":[],"styles":[{"name":"--lime-grid-area","annotation":"prop","docs":"Grid layout"},{"name":"--lime-grid-cell-height","annotation":"prop","docs":"Height of grid cells, defaults to `2.5rem` (40px)"},{"name":"--lime-grid-columns","annotation":"prop","docs":"Number of columns in the grid, defaults to 4"},{"name":"--lime-grid-gutter","annotation":"prop","docs":"width of the gutter between columns and rows, defaults to `1rem` (16px) - see https://material.io/design/layout/responsive-layout-grid.html#breakpoints for guidelines"}],"slots":[{"name":"","docs":"Grid content"}],"parts":[],"listeners":[],"sources":[{"filename":"grid.tsx","type":"tsx","source":"import { Component, h } from '@stencil/core';\n\n/**\n * The `limel-grid` component creates a grid which can be used to control the\n * layout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\n * to enable easy configuration of its child-elements.\n *\n * @exampleComponent limel-example-grid\n * @slot - Grid content\n */\n@Component({\n    tag: 'limel-grid',\n    shadow: true,\n    styleUrl: 'grid.scss',\n})\nexport class Grid {\n    public render() {\n        return <slot />;\n    }\n}\n"},{"filename":"grid.scss","type":"scss","source":"@use '../../style/functions';\n\n/**\n * @prop --lime-grid-area: Grid layout\n * @prop --lime-grid-columns: Number of columns in the grid, defaults to 4\n * @prop --lime-grid-cell-height: Height of grid cells, defaults to `2.5rem` (40px)\n * @prop --lime-grid-gutter: width of the gutter between columns and rows, defaults to `1rem` (16px) - see https://material.io/design/layout/responsive-layout-grid.html#breakpoints for guidelines\n */\n\n:host {\n    display: block;\n    position: relative;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\nslot {\n    display: grid;\n    grid-template-areas: var(--lime-grid-area, '');\n    grid-template-columns: repeat(var(--lime-grid-columns, 4), minmax(0, 1fr));\n    gap: var(--lime-grid-gutter, functions.pxToRem(16));\n    grid-auto-flow: row dense;\n    grid-auto-rows: var(--lime-grid-cell-height, functions.pxToRem(40));\n    margin: 0;\n    height: 100%;\n    width: 100%;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/header","filePath":"./src/components/header/header.tsx","fileName":"header.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/header/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/header/usage","tag":"limel-header","overview":"A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","usage":{},"docs":"A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-header"},{"name":"exampleComponent","text":"limel-example-header-slot-actions"},{"name":"exampleComponent","text":"limel-example-header-colors"},{"name":"exampleComponent","text":"limel-example-header-responsive"},{"name":"exampleComponent","text":"limel-example-header-narrow"},{"name":"slot","text":"actions - Content (actions) to be put inside the far right surface of\nthe header"},{"name":"slot","text":"[no name] - DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements."}],"encapsulation":"shadow","dependents":["limel-dialog","limel-example-action-buttons-colors-do-dont","limel-example-action-buttons-icon-color","limel-example-action-buttons-third-alternative","limel-example-chart-accessibility","limel-example-header","limel-example-header-colors","limel-example-header-narrow","limel-example-header-responsive","limel-example-header-slot-actions","my-custom-menu","my-custom-menu-with-notifications"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-header":["limel-icon"],"limel-dialog":["limel-header"],"limel-example-action-buttons-colors-do-dont":["limel-header"],"limel-example-action-buttons-icon-color":["limel-header"],"limel-example-action-buttons-third-alternative":["limel-header"],"limel-example-chart-accessibility":["limel-header"],"limel-example-header":["limel-header"],"limel-example-header-colors":["limel-header"],"limel-example-header-narrow":["limel-header"],"limel-example-header-responsive":["limel-header"],"limel-example-header-slot-actions":["limel-header"],"my-custom-menu":["limel-header"],"my-custom-menu-with-notifications":["limel-header"]},"props":[{"name":"heading","type":"string","mutable":false,"attr":"heading","reflectToAttr":false,"docs":"Title to display","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"icon","type":"Icon | string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"Icon to display","docsTags":[],"values":[{"type":"Icon"},{"type":"string"}],"optional":true,"required":false},{"name":"subheading","type":"string","mutable":false,"attr":"subheading","reflectToAttr":false,"docs":"Subheading to display","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"subheadingDivider","type":"string","mutable":false,"attr":"subheading-divider","reflectToAttr":false,"docs":"The visual divider that separates the `subheading` and the `supportingText`.\nIt must be a single character such as `-` or `,`.","docsTags":[],"default":"'·'","values":[{"type":"string"}],"optional":true,"required":false},{"name":"supportingText","type":"string","mutable":false,"attr":"supporting-text","reflectToAttr":false,"docs":"An extra string of text to display along with with the Subheading","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--header-background-color","annotation":"prop","docs":"Background color of header, defaults to `--contrast-300`."},{"name":"--header-heading-color","annotation":"prop","docs":"Color of heading text, defaults to `--contrast-1100`."},{"name":"--header-responsive-breakpoint","annotation":"prop","docs":"Defines the minimum allowed `width` of both information and actions areas in the header, defaults to `22rem`."},{"name":"--header-subheading-color","annotation":"prop","docs":"Color of subheading text, defaults to `--contrast-900`."},{"name":"--header-supporting-text-color","annotation":"prop","docs":"Color of supporting text in subheading, defaults to `--header-subheading-color`."},{"name":"--header-top-right-left-border-radius","annotation":"prop","docs":"Top-left and top-right border radius of header, defaults to `0.75rem`."}],"slots":[{"name":"[no name]","docs":"DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements."},{"name":"actions","docs":"Content (actions) to be put inside the far right surface of\nthe header"}],"parts":[],"listeners":[],"sources":[{"filename":"header.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { getIconName } from '../icon/get-icon-props';\n\n/**\n * A header is the top most visual element in a component, page, card, or a view.\n *\n * ## Usage\n * A header is the first thing that clarifies a context for users.\n * Due to their positions in the UI hierarchy, headers are the most\n * prominent elements of a user interface; and because of that, they carry both\n * vital information and fundamental controls for the area of the interface\n * they represent.\n *\n * For example, when a header is placed on top of a card, it should quickly\n * explain the card to the user. When placed on top of a modal, it should easily\n * clarify what the modal is about. When displayed on top of a fullscreen view,\n * it should indicate where in the system users are, and what part of the app\n * they are looking at.\n *\n *\n * ## Layout\n * The vital information in a header is usually manifested in form of an icon,\n * and a heading. A subheading also could be added to provide supplementary\n * information. There is also a third place for displaying supplementary information\n * or \"supporting text\", which will be rendered as a part of the subheading.\n * Along with this information, headers can also include actions, controls, or\n * menus.\n *\n * :::important\n * Such actions or menus must affect the entire section of the interface\n * which the header is representing. For example, a _Delete_ button on a card\n * header must delete that entire card and its respective contents all together,\n * not for example a selected item which is visible in the content of that card.\n * :::\n *\n *\n * :::warning\n * Do not user background color on icons in the headers. It is much better and\n * much easier for the eye if your icon itself has a color.\n * Background colors behind icons make them look like \"call to action\" buttons\n * and take a lot of attention from users.\n * :::\n *\n * @exampleComponent limel-example-header\n * @exampleComponent limel-example-header-slot-actions\n * @exampleComponent limel-example-header-colors\n * @exampleComponent limel-example-header-responsive\n * @exampleComponent limel-example-header-narrow\n * @slot actions - Content (actions) to be put inside the far right surface of\n * the header\n * @slot [no name] - DEPRECATED. The `actions` slot used to be unnamed. This\n * behavior has been deprecated, and support will be dropped in a future\n * version. Please add `slot=\"actions\"` to your elements to ensure your code\n * will continue to work with future versions of Lime Elements.\n */\n@Component({\n    tag: 'limel-header',\n    shadow: true,\n    styleUrl: 'header.scss',\n})\nexport class Header {\n    /**\n     * Icon to display\n     */\n    @Prop()\n    public icon?: string | Icon;\n\n    /**\n     * Title to display\n     */\n    @Prop()\n    public heading?: string;\n\n    /**\n     * Subheading to display\n     */\n    @Prop()\n    public subheading?: string;\n\n    /**\n     * An extra string of text to display along with with the Subheading\n     */\n    @Prop()\n    public supportingText?: string;\n\n    /**\n     * The visual divider that separates the `subheading` and the `supportingText`.\n     * It must be a single character such as `-` or `,`.\n     */\n    @Prop()\n    public subheadingDivider?: string = '·';\n\n    public render() {\n        return [\n            <div class=\"information\">\n                {this.renderIcon()}\n                <div class=\"headings\">\n                    <h1 class=\"heading\" title={this.heading}>\n                        {this.heading}\n                    </h1>\n                    <h2 class=\"subheading\" title={this.subheading}>\n                        {this.subheading}\n                        {this.renderSupportingText()}\n                    </h2>\n                </div>\n            </div>,\n            <slot name=\"actions\">\n                <slot />\n            </slot>,\n        ];\n    }\n\n    private renderIcon() {\n        const icon = getIconName(this.icon);\n\n        if (!icon) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                class=\"icon\"\n                badge={true}\n                name={icon}\n                style={{\n                    '--limel-header-icon-color': `${(this.icon as Icon)?.color ?? ''}`,\n                    '--limel-header-icon-background-color': `${\n                        (this.icon as Icon)?.backgroundColor ?? ''\n                    }`,\n                    title: `${(this.icon as Icon)?.title}`,\n                }}\n            />\n        );\n    }\n\n    private renderSupportingText() {\n        if (!this.supportingText) {\n            return;\n        }\n\n        return (\n            <span class=\"subheading__supporting-text\">\n                {this.renderSubheadingDivider()}\n                {this.supportingText}\n            </span>\n        );\n    }\n\n    private renderSubheadingDivider() {\n        if (!this.subheadingDivider) {\n            return;\n        }\n\n        return <span>{this.subheadingDivider}</span>;\n    }\n}\n"},{"filename":"header.scss","type":"scss","source":"@use '../../style/mixins.scss';\n@use '../../style/functions.scss';\n\n/**\n * @prop --header-background-color: Background color of header, defaults to `--contrast-300`.\n * @prop --header-heading-color: Color of heading text, defaults to `--contrast-1100`.\n * @prop --header-subheading-color: Color of subheading text, defaults to `--contrast-900`.\n * @prop --header-supporting-text-color: Color of supporting text in subheading, defaults to `--header-subheading-color`.\n * @prop --header-top-right-left-border-radius: Top-left and top-right border radius of header, defaults to `0.75rem`.\n * @prop --header-responsive-breakpoint: Defines the minimum allowed `width` of both information and actions areas in the header, defaults to `22rem`.\n */\n\n:host(limel-header) {\n    display: flex;\n    align-items: center;\n    box-sizing: border-box;\n    width: 100%;\n    background-color: var(--header-background-color, rgb(var(--contrast-300)));\n    border-top-left-radius: var(--header-top-right-left-border-radius, 0.75rem);\n    border-top-right-radius: var(\n        --header-top-right-left-border-radius,\n        0.75rem\n    );\n    padding: 0.25rem;\n}\n\n.information {\n    display: flex;\n    flex-grow: 1;\n    align-items: center;\n    min-width: 0;\n}\n\n.icon {\n    --limel-icon-svg-margin: 0.25rem;\n    flex-shrink: 0;\n    color: var(\n        --limel-header-icon-color,\n        var(--header-icon-color, rgb(var(--contrast-1100)))\n    );\n    background-color: var(\n        --limel-header-icon-background-color,\n        var(--header-icon-background-color, transparent)\n    );\n    width: 2.25rem;\n    border-radius: 0.56rem;\n}\n\n.headings {\n    min-width: 0;\n    margin-left: 0.25rem;\n}\n\n.heading,\n.subheading {\n    @include mixins.truncate-text;\n    margin: 0;\n    padding: 0;\n}\n\n.heading {\n    color: var(--header-heading-color, rgb(var(--contrast-1100)));\n    font-size: 1rem;\n    font-weight: 500;\n}\n\n.subheading {\n    color: var(--header-subheading-color, rgb(var(--contrast-900)));\n    font-size: functions.pxToRem(13);\n    font-weight: 400;\n}\n\n.subheading__supporting-text {\n    color: var(--header-supporting-text-color, var(--header-subheading-color));\n    span {\n        margin: 0 0.125rem;\n    }\n}\n\nslot[name='actions'] {\n    flex-shrink: 0;\n}\n\n:host(limel-header.is-narrow) {\n    padding: 0.125rem 0.25rem;\n\n    .icon {\n        --limel-icon-svg-margin: 0;\n        width: 1.25rem;\n    }\n\n    .heading {\n        font-size: functions.pxToRem(15);\n    }\n}\n\n:host(limel-header.has-responsive-layout) {\n    display: grid;\n    grid-template-columns: repeat(\n        auto-fit,\n        minmax(\n            clamp(\n                50%,\n                var(--header-responsive-breakpoint, functions.pxToRem(352)),\n                100%\n            ),\n            1fr\n        )\n    );\n    .headings {\n        padding-right: 0.5rem;\n    }\n    slot[name='actions'] {\n        display: flex;\n        justify-content: flex-end;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/help","filePath":"./src/components/help/help.tsx","fileName":"help.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/help/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/help/usage","tag":"limel-help","overview":"A good design is self-explanatory! However, sometimes concepts are\ntoo complex to understand, no matter how well-designed a user interface is.\nIn such cases, contextual help can be a great way to provide users with\nhelp precisely where and when users need it.\n\nIn app interface design, providing contextual help emerges as a viable practice\nfor enhancing user experience and usability.\nContextual help serves as a quick-to-access guiding,\nempowering users to more easily understand and navigate through\nthe intricacies of an application.\n\nUsing this component designers empower users to grasp the functionality\nof an app more effortlessly, minimizes the learning curve,\ntransforming complex features into accessible opportunities for exploration.","usage":{},"docs":"A good design is self-explanatory! However, sometimes concepts are\ntoo complex to understand, no matter how well-designed a user interface is.\nIn such cases, contextual help can be a great way to provide users with\nhelp precisely where and when users need it.\n\nIn app interface design, providing contextual help emerges as a viable practice\nfor enhancing user experience and usability.\nContextual help serves as a quick-to-access guiding,\nempowering users to more easily understand and navigate through\nthe intricacies of an application.\n\nUsing this component designers empower users to grasp the functionality\nof an app more effortlessly, minimizes the learning curve,\ntransforming complex features into accessible opportunities for exploration.","docsTags":[{"name":"exampleComponent","text":"limel-example-help"},{"name":"exampleComponent","text":"limel-example-read-more"},{"name":"exampleComponent","text":"limel-example-open-direction"},{"name":"exampleComponent","text":"limel-example-placement"}],"encapsulation":"shadow","dependents":["limel-example-help","limel-example-open-direction","limel-example-placement","limel-example-read-more"],"dependencies":["limel-popover","limel-help-content"],"dependencyGraph":{"limel-help":["limel-popover","limel-help-content"],"limel-popover":["limel-portal","limel-popover-surface"],"limel-help-content":["limel-markdown"],"limel-example-help":["limel-help"],"limel-example-open-direction":["limel-help"],"limel-example-placement":["limel-help"],"limel-example-read-more":["limel-help"]},"props":[{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"{@inheritdoc Help.openDirection}","docsTags":[],"default":"'top-start'","values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false},{"name":"readMoreLink","type":"Link","mutable":false,"reflectToAttr":false,"docs":"{@inheritdoc Help.readMoreLink}","docsTags":[],"values":[{"type":"Link"}],"optional":true,"required":false},{"name":"trigger","type":"string","mutable":false,"attr":"trigger","reflectToAttr":false,"docs":"{@inheritdoc Help.trigger}","docsTags":[],"default":"'?'","values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"{@inheritdoc Help.value}","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"help.tsx","type":"tsx","source":"import { Component, h, Prop, State } from '@stencil/core';\nimport { OpenDirection } from '../menu/menu.types';\nimport { Help } from '../help/help.types';\nimport { Link } from '../../global/shared-types/link.types';\n\n/**\n * A good design is self-explanatory! However, sometimes concepts are\n * too complex to understand, no matter how well-designed a user interface is.\n * In such cases, contextual help can be a great way to provide users with\n * help precisely where and when users need it.\n *\n * In app interface design, providing contextual help emerges as a viable practice\n * for enhancing user experience and usability.\n * Contextual help serves as a quick-to-access guiding,\n * empowering users to more easily understand and navigate through\n * the intricacies of an application.\n *\n * Using this component designers empower users to grasp the functionality\n * of an app more effortlessly, minimizes the learning curve,\n * transforming complex features into accessible opportunities for exploration.\n *\n * @exampleComponent limel-example-help\n * @exampleComponent limel-example-read-more\n * @exampleComponent limel-example-open-direction\n * @exampleComponent limel-example-placement\n */\n@Component({\n    tag: 'limel-help',\n    shadow: true,\n    styleUrl: 'help.scss',\n})\nexport class HelpComponent implements Help {\n    /**\n     * {@inheritdoc Help.value}\n     */\n    @Prop()\n    public value: string;\n\n    /**\n     * {@inheritdoc Help.trigger}\n     */\n    @Prop()\n    public trigger: string = '?';\n\n    /**\n     * {@inheritdoc Help.readMoreLink}\n     */\n    @Prop()\n    public readMoreLink?: Link;\n\n    /**\n     * {@inheritdoc Help.openDirection}\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'top-start';\n\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-popover\n                open={this.isOpen}\n                onClose={this.onPopoverClose}\n                openDirection={this.openDirection}\n            >\n                <button\n                    slot=\"trigger\"\n                    onClick={this.openPopover}\n                    class={{\n                        'is-open': this.isOpen,\n                    }}\n                >\n                    {this.trigger}\n                </button>\n                <limel-help-content\n                    value={this.value}\n                    readMoreLink={this.readMoreLink}\n                />\n            </limel-popover>,\n        ];\n    }\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        this.isOpen = false;\n    };\n}\n"},{"filename":"help.scss","type":"scss","source":"@use '../../style/mixins';\n\nlimel-popover {\n    display: flex;\n    --popover-surface-width: min(calc(100vw - 4rem), 22rem);\n}\n\nbutton[slot='trigger'] {\n    all: unset;\n\n    @include mixins.is-flat-clickable(\n        $color--hovered: rgb(var(--color-sky-dark)),\n        $background-color: var(--lime-elevated-surface-background-color)\n    );\n    @include mixins.visualize-keyboard-focus;\n\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: rgb(var(--color-sky-default));\n    border-radius: 50%;\n    box-shadow: 0 0 0 1px rgb(var(--color-sky-lighter), 0.7);\n    width: 0.875rem;\n    height: 0.875rem;\n    font-size: 0.75rem;\n\n    &.is-open {\n        color: rgb(var(--color-white));\n        background-color: rgb(var(--color-sky-default));\n        box-shadow: var(--button-shadow-inset);\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/help","filePath":"./src/components/help/help-content.tsx","fileName":"help-content.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/help/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/help/usage","tag":"limel-help-content","overview":"Help content\nThis is scrollable content that is placed in the popover of the Help component.\nMoved here mostly to avoid having inlined styles in the parent component.\nSince you cannot send styles to the Portal component, we need to have this\nchild component.","usage":{},"docs":"Help content\nThis is scrollable content that is placed in the popover of the Help component.\nMoved here mostly to avoid having inlined styles in the parent component.\nSince you cannot send styles to the Portal component, we need to have this\nchild component.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-help"],"dependencies":["limel-markdown"],"dependencyGraph":{"limel-help-content":["limel-markdown"],"limel-help":["limel-help-content"]},"props":[{"name":"readMoreLink","type":"Link","mutable":false,"reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"Link"}],"optional":true,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"help-content.tsx","type":"tsx","source":"import { Component, Prop, h } from '@stencil/core';\nimport { Link } from '../../global/shared-types/link.types';\n\n/**\n * Help content\n * This is scrollable content that is placed in the popover of the Help component.\n * Moved here mostly to avoid having inlined styles in the parent component.\n * Since you cannot send styles to the Portal component, we need to have this\n * child component.\n *\n * @private\n */\n@Component({\n    tag: 'limel-help-content',\n    shadow: true,\n    styleUrl: 'limel-help-content.scss',\n})\nexport class HelpContent {\n    @Prop()\n    public value: string;\n\n    @Prop()\n    public readMoreLink?: Link;\n\n    public render() {\n        return [\n            <limel-markdown value={this.value} />,\n            this.renderReadMoreLink(),\n        ];\n    }\n\n    private renderReadMoreLink = () => {\n        if (!this.readMoreLink) {\n            return;\n        }\n\n        return (\n            <span>\n                <a\n                    href={this.readMoreLink?.href}\n                    target={this.readMoreLink?.target}\n                    title={this.readMoreLink?.title}\n                    tabindex=\"0\"\n                >\n                    {this.readMoreLink?.text}\n                </a>\n            </span>\n        );\n    };\n}\n"},{"filename":"limel-help-content.scss","type":"scss","source":"@use '../../style/mixins';\n\n:host(limel-help-content) {\n    display: flex;\n    box-sizing: border-box;\n    flex-direction: column;\n    gap: 0.5rem;\n\n    max-height: 30rem;\n    height: 100%;\n}\n\nlimel-markdown {\n    @include mixins.fade-out-overflowed-content-on-edges(vertically);\n\n    padding-right: 1rem;\n    padding-left: 1rem;\n    min-height: 0;\n    min-width: 0;\n    overflow: hidden auto;\n}\n\na {\n    @include mixins.truncate-text;\n    @include mixins.hyperlink;\n\n    position: sticky;\n    bottom: 0;\n\n    text-decoration: none;\n    font-size: 0.875rem;\n    padding-bottom: 0.125rem;\n}\n\nspan {\n    padding: 0 1rem 0.5rem 1rem;\n    min-width: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line","filePath":"./src/components/helper-line/helper-line.tsx","fileName":"helper-line.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/helper-line/usage","tag":"limel-helper-line","overview":"This is an internal and private component that many input fields\nuse to display a helper text, along with a character counter below the\ninput field.\n\nWe created this to keep the visual styles the same everywhere\nand to avoid importing styles separately.\n\nAlso this enables us to open the helper line in limel-portal,\nmore easily without having to send the styles to the portal.","usage":{},"docs":"This is an internal and private component that many input fields\nuse to display a helper text, along with a character counter below the\ninput field.\n\nWe created this to keep the visual styles the same everywhere\nand to avoid importing styles separately.\n\nAlso this enables us to open the helper line in limel-portal,\nmore easily without having to send the styles to the portal.","docsTags":[{"name":"exampleComponent","text":"limel-example-helper-line"},{"name":"exampleComponent","text":"limel-example-helper-line-invalid"},{"name":"exampleComponent","text":"limel-example-helper-line-long-text"},{"name":"exampleComponent","text":"limel-example-helper-line-long-text-no-counter"},{"name":"exampleComponent","text":"limel-example-helper-line-character-counter"},{"name":"exampleComponent","text":"limel-example-helper-line-empty"},{"name":"exampleComponent","text":"limel-example-helper-line-animation"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-checkbox","limel-chip-set","limel-example-helper-line","limel-example-helper-line-animation","limel-example-helper-line-character-counter","limel-example-helper-line-empty","limel-example-helper-line-invalid","limel-example-helper-line-long-text","limel-example-helper-line-long-text-no-counter","limel-input-field","limel-list","limel-select","limel-slider","limel-switch","limel-text-editor"],"dependencies":[],"dependencyGraph":{"limel-checkbox":["limel-helper-line"],"limel-chip-set":["limel-helper-line"],"limel-example-helper-line":["limel-helper-line"],"limel-example-helper-line-animation":["limel-helper-line"],"limel-example-helper-line-character-counter":["limel-helper-line"],"limel-example-helper-line-empty":["limel-helper-line"],"limel-example-helper-line-invalid":["limel-helper-line"],"limel-example-helper-line-long-text":["limel-helper-line"],"limel-example-helper-line-long-text-no-counter":["limel-helper-line"],"limel-input-field":["limel-helper-line"],"limel-list":["limel-helper-line"],"limel-select":["limel-helper-line"],"limel-slider":["limel-helper-line"],"limel-switch":["limel-helper-line"],"limel-text-editor":["limel-helper-line"]},"props":[{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"The helper text that is displayed on the left side.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"helperTextId","type":"string","mutable":false,"attr":"helper-text-id","reflectToAttr":true,"docs":"Used by `aria-controls` and `aria-describedby` in the parent component.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Turns `true`, when the parent component is invalid.\nFor example, when the parent component is `required` but is left empty.\nOr when the input format is invalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"length","type":"number","mutable":false,"attr":"length","reflectToAttr":true,"docs":"Length of the current input value, coming from the parent component.\nUsed in the character counter section on the right side.","docsTags":[],"values":[{"type":"number"}],"optional":true,"required":false},{"name":"maxLength","type":"number","mutable":false,"attr":"max-length","reflectToAttr":true,"docs":"Maximum length of the characters, defined on the parent component.\nUsed in the character counter section on the right side.","docsTags":[],"values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"helper-line.tsx","type":"tsx","source":"import { Component, Host, Prop, h } from '@stencil/core';\n\n/**\n * This is an internal and private component that many input fields\n * use to display a helper text, along with a character counter below the\n * input field.\n *\n * We created this to keep the visual styles the same everywhere\n * and to avoid importing styles separately.\n *\n * Also this enables us to open the helper line in limel-portal,\n * more easily without having to send the styles to the portal.\n *\n * @exampleComponent limel-example-helper-line\n * @exampleComponent limel-example-helper-line-invalid\n * @exampleComponent limel-example-helper-line-long-text\n * @exampleComponent limel-example-helper-line-long-text-no-counter\n * @exampleComponent limel-example-helper-line-character-counter\n * @exampleComponent limel-example-helper-line-empty\n * @exampleComponent limel-example-helper-line-animation\n * @private\n */\n@Component({\n    tag: 'limel-helper-line',\n    shadow: true,\n    styleUrl: 'helper-line.scss',\n})\nexport class HelperLine {\n    /**\n     * The helper text that is displayed on the left side.\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Length of the current input value, coming from the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public length?: number;\n\n    /**\n     * Maximum length of the characters, defined on the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public maxLength?: number;\n\n    /**\n     * Turns `true`, when the parent component is invalid.\n     * For example, when the parent component is `required` but is left empty.\n     * Or when the input format is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid?: boolean = false;\n\n    /**\n     * Used by `aria-controls` and `aria-describedby` in the parent component.\n     */\n    @Prop({ reflect: true })\n    public helperTextId?: string;\n\n    public render() {\n        return (\n            <Host\n                tabIndex={-1}\n                class={{\n                    invalid: this.invalid,\n                }}\n                style={this.hasContent() ? {} : { display: 'none' }}\n                aria-hidden={!this.hasContent()}\n            >\n                <div>\n                    {this.renderHelperText()}\n                    {this.renderCharacterCounter()}\n                </div>\n            </Host>\n        );\n    }\n\n    private hasContent = () => {\n        return !!(\n            this.maxLength > 0 ||\n            (this.helperText && this.helperText.length > 0)\n        );\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <span class=\"helper-text\" id={this.helperTextId}>\n                {this.helperText}\n            </span>\n        );\n    };\n\n    private renderCharacterCounter = () => {\n        const counter = `${this.length} / ${this.maxLength}`;\n\n        if (!this.maxLength) {\n            return;\n        }\n\n        return <span class=\"counter\">{counter}</span>;\n    };\n}\n"},{"filename":"helper-line.scss","type":"scss","source":":host(limel-helper-line) {\n    transition: opacity 0.2s ease;\n\n    box-sizing: border-box;\n    display: grid;\n\n    min-width: 0; // prevents overflowing, if component is placed in flex containers\n\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.6875rem;\n    line-height: normal;\n\n    color: rgb(var(--contrast-1200));\n}\n\ndiv {\n    display: flex;\n    justify-content: space-between;\n    gap: 0.75rem;\n    overflow: hidden;\n    padding: 0 1rem;\n}\n\n:host(limel-helper-line.invalid) {\n    --limel-h-l-grid-template-rows-transition-speed: 0.46s;\n    --limel-h-l-grid-template-rows: 1fr;\n\n    .helper-text {\n        color: var(--mdc-theme-error);\n    }\n}\n\n.counter {\n    flex-shrink: 0;\n    margin-left: auto;\n}\n\n.helper-text,\n.counter {\n    padding-top: 0.125rem;\n}\n\n// This animates height of the helper line, from `0` to `auto`.\n// To get this animation effect, the consumer component should\n// add `hide` classed accordingly.\n:host(limel-helper-line) {\n    transition: grid-template-rows\n        var(--limel-h-l-grid-template-rows-transition-speed, 0.46s)\n        cubic-bezier(1, 0.09, 0, 0.89);\n    grid-template-rows: var(--limel-h-l-grid-template-rows, 1fr);\n}\n\n:host(limel-helper-line.hide) {\n    --limel-h-l-grid-template-rows-transition-speed: 0.3s;\n    --limel-h-l-grid-template-rows: 0fr;\n}\n// End: animating height\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon","filePath":"./src/components/icon/icon.tsx","fileName":"icon.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon/usage","tag":"limel-icon","overview":":::important\nTo install your icon set correctly, please read the [documentation here](#/).\n:::\n\nThe size and color of the icon is normally set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.","usage":{},"docs":":::important\nTo install your icon set correctly, please read the [documentation here](#/).\n:::\n\nThe size and color of the icon is normally set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.","docsTags":[{"name":"exampleComponent","text":"limel-example-icon-name"},{"name":"exampleComponent","text":"limel-example-icon-size"},{"name":"exampleComponent","text":"limel-example-icon-color"}],"encapsulation":"shadow","dependents":["limel-action-bar","limel-action-bar-item","limel-action-bar-overflow-menu","limel-banner","limel-breadcrumbs","limel-button","limel-button-group","limel-callout","limel-card","limel-chip","limel-chip-set","limel-collapsible-section","limel-dock","limel-dock-button","limel-dynamic-label","limel-example-button-disabled-vs-hidden","limel-example-collapsible-section-actions","limel-example-do-do-not","limel-example-header-menu","limel-example-icon-color","limel-example-icon-name","limel-example-icon-size","limel-example-select-dialog","limel-example-shadows-bad-usage","limel-example-tab-panel-content","limel-example-table-food","limel-file-dropzone","limel-file-viewer","limel-header","limel-icon-button","limel-info-tile","limel-input-field","limel-progress-flow-item","limel-select","limel-shortcut","limel-tab-bar"],"dependencies":[],"dependencyGraph":{"limel-action-bar":["limel-icon"],"limel-action-bar-item":["limel-icon"],"limel-action-bar-overflow-menu":["limel-icon"],"limel-banner":["limel-icon"],"limel-breadcrumbs":["limel-icon"],"limel-button":["limel-icon"],"limel-button-group":["limel-icon"],"limel-callout":["limel-icon"],"limel-card":["limel-icon"],"limel-chip":["limel-icon"],"limel-chip-set":["limel-icon"],"limel-collapsible-section":["limel-icon"],"limel-dock":["limel-icon"],"limel-dock-button":["limel-icon"],"limel-dynamic-label":["limel-icon"],"limel-example-button-disabled-vs-hidden":["limel-icon"],"limel-example-collapsible-section-actions":["limel-icon"],"limel-example-do-do-not":["limel-icon"],"limel-example-header-menu":["limel-icon"],"limel-example-icon-color":["limel-icon"],"limel-example-icon-name":["limel-icon"],"limel-example-icon-size":["limel-icon"],"limel-example-select-dialog":["limel-icon"],"limel-example-shadows-bad-usage":["limel-icon"],"limel-example-tab-panel-content":["limel-icon"],"limel-example-table-food":["limel-icon"],"limel-file-dropzone":["limel-icon"],"limel-file-viewer":["limel-icon"],"limel-header":["limel-icon"],"limel-icon-button":["limel-icon"],"limel-info-tile":["limel-icon"],"limel-input-field":["limel-icon"],"limel-progress-flow-item":["limel-icon"],"limel-select":["limel-icon"],"limel-shortcut":["limel-icon"],"limel-tab-bar":["limel-icon"]},"props":[{"name":"badge","type":"boolean","mutable":false,"attr":"badge","reflectToAttr":true,"docs":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"name","type":"string","mutable":false,"attr":"name","reflectToAttr":true,"docs":"Name of the icon","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"size","type":"\"large\" | \"medium\" | \"small\" | \"x-small\"","mutable":false,"attr":"size","reflectToAttr":true,"docs":"Size of the icon","docsTags":[],"values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--icon-background-color","annotation":"prop","docs":"Background color when attribute `badge` is set to `true`. Defaults to `transparent`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon.tsx","type":"tsx","source":"import { Component, Element, h, Prop, Watch } from '@stencil/core';\nimport { globalConfig } from '../../global/config';\nimport iconCache from '../../global/icon-cache/factory';\nimport { IconSize } from './icon.types';\n\n/**\n * :::important\n * To install your icon set correctly, please read the [documentation here](#/).\n * :::\n *\n * The size and color of the icon is normally set in CSS, however there are a few\n * standard sizes defined that can be used with the `size` property.\n *\n * @exampleComponent limel-example-icon-name\n * @exampleComponent limel-example-icon-size\n * @exampleComponent limel-example-icon-color\n */\n@Component({\n    tag: 'limel-icon',\n    shadow: true,\n    styleUrl: 'icon.scss',\n})\nexport class Icon {\n    /**\n     * Size of the icon\n     */\n    @Prop({ reflect: true })\n    public size: IconSize;\n\n    /**\n     * Name of the icon\n     */\n    @Prop({ reflect: true })\n    public name: string;\n\n    /**\n     * Set to `true` to give the icon a round background with some padding.\n     * Only works when the `size` attribute is also set.\n     */\n    @Prop({ reflect: true })\n    public badge: boolean;\n\n    @Element()\n    private host: HTMLLimelIconElement;\n\n    public componentDidLoad() {\n        this.loadIcon(this.name);\n    }\n\n    public render() {\n        return <div class=\"container\" />;\n    }\n\n    @Watch('name')\n    protected async loadIcon(name: string) {\n        if (name === undefined || name === '') {\n            return;\n        }\n\n        const svgData = await this.loadSvg(name);\n        this.renderSvg(svgData);\n    }\n\n    /**\n     * Load the SVG data for the icon from the icon cache\n     *\n     * @param name - name of the icon\n     * @returns the icon SVG data\n     */\n    private loadSvg(name: string) {\n        return iconCache.get(name, globalConfig.iconPath);\n    }\n\n    /*\n     * There is no way to style external SVG files with CSS, i.e. SVGs loaded\n     * with <img src=\"file.svg\" /> or <object data=\"file.svg\" type=\"image/svg+xml\" />\n     * will remain the way they look in the file.\n     * Therefore we inject the svg as inline markup instead.\n     */\n    private renderSvg(svgData: string) {\n        const container = this.host.shadowRoot.querySelector('div.container');\n        if (container) {\n            container.innerHTML = svgData;\n        }\n    }\n}\n"},{"filename":"icon.scss","type":"scss","source":"/**\n * @prop --icon-background-color: Background color when attribute `badge` is set to `true`. Defaults to `transparent`.\n */\n\n:host {\n    background-color: var(--icon-background-color, transparent);\n    border-radius: 50%;\n    display: inline-block;\n    line-height: 0;\n    box-sizing: border-box;\n\n    svg {\n        fill: currentColor;\n        height: 100%;\n        pointer-events: none;\n        width: 100%;\n    }\n\n    div {\n        margin: var(--limel-icon-svg-margin, 0);\n    }\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([size='x-small']) {\n    height: 1rem !important;\n    width: 1rem !important;\n}\n:host([size='small']) {\n    height: 1.25rem !important;\n    width: 1.25rem !important;\n}\n:host([size='medium']) {\n    height: 1.5rem !important;\n    width: 1.5rem !important;\n}\n:host([size='large']) {\n    height: 1.75rem !important;\n    width: 1.75rem !important;\n}\n\n:host([badge][size='x-small']) {\n    height: 1.5rem !important;\n    width: 1.5rem !important;\n\n    --limel-icon-svg-margin: 0.25rem;\n}\n:host([badge][size='small']) {\n    height: 1.75rem !important;\n    width: 1.75rem !important;\n\n    --limel-icon-svg-margin: 0.25rem;\n}\n:host([badge][size='medium']) {\n    height: 2.5rem !important;\n    width: 2.5rem !important;\n\n    --limel-icon-svg-margin: 0.5rem;\n}\n:host([badge][size='large']) {\n    height: 2.75rem !important;\n    width: 2.75rem !important;\n\n    --limel-icon-svg-margin: 0.5rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button","filePath":"./src/components/icon-button/icon-button.tsx","fileName":"icon-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/icon-button/usage","tag":"limel-icon-button","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-icon-button-basic"},{"name":"exampleComponent","text":"limel-example-icon-button-disabled"},{"name":"exampleComponent","text":"limel-example-icon-button-elevated"},{"name":"exampleComponent","text":"limel-example-icon-button-toggle-state"},{"name":"exampleComponent","text":"limel-example-icon-button-composite"}],"encapsulation":"shadow","dependents":["limel-collapsible-section","limel-example-dialog-heading-actions","limel-example-header-colors","limel-example-header-responsive","limel-example-icon-button-basic","limel-example-icon-button-composite","limel-example-icon-button-disabled","limel-example-icon-button-elevated","limel-example-icon-button-toggle-state","limel-example-menu-notification","limel-example-tooltip-max-character","limel-snackbar"],"dependencies":["limel-icon","limel-tooltip"],"dependencyGraph":{"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-collapsible-section":["limel-icon-button"],"limel-example-dialog-heading-actions":["limel-icon-button"],"limel-example-header-colors":["limel-icon-button"],"limel-example-header-responsive":["limel-icon-button"],"limel-example-icon-button-basic":["limel-icon-button"],"limel-example-icon-button-composite":["limel-icon-button"],"limel-example-icon-button-disabled":["limel-icon-button"],"limel-example-icon-button-elevated":["limel-icon-button"],"limel-example-icon-button-toggle-state":["limel-icon-button"],"limel-example-menu-notification":["limel-icon-button"],"limel-example-tooltip-max-character":["limel-icon-button"],"limel-snackbar":["limel-icon-button"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"elevated","type":"boolean","mutable":false,"attr":"elevated","reflectToAttr":true,"docs":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"The icon to display.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show to screenreaders and other assistive tech.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--icon-background-color","annotation":"prop","docs":"Background color of the button."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"icon-button.tsx","type":"tsx","source":"import { Component, Element, h, Host, Prop } from '@stencil/core';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * @exampleComponent limel-example-icon-button-basic\n * @exampleComponent limel-example-icon-button-disabled\n * @exampleComponent limel-example-icon-button-elevated\n * @exampleComponent limel-example-icon-button-toggle-state\n * @exampleComponent limel-example-icon-button-composite\n */\n@Component({\n    tag: 'limel-icon-button',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'icon-button.scss',\n})\nexport class IconButton {\n    /**\n     * The icon to display.\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    /**\n     * Set to `true` to give the button our standard \"elevated\" look, lifting\n     * it off the flat layout.\n     */\n    @Prop({ reflect: true })\n    public elevated = false;\n\n    /**\n     * The text to show to screenreaders and other assistive tech.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to disable the button.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    @Element()\n    private host: HTMLLimelIconButtonElement;\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private tooltipId = createRandomString();\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector('.mdc-icon-button');\n        if (!element) {\n            return;\n        }\n    }\n\n    public render() {\n        const buttonAttributes: { tabindex?: string } = {};\n\n        if (this.host.hasAttribute('tabindex')) {\n            buttonAttributes.tabindex = this.host.getAttribute('tabindex');\n        }\n\n        return (\n            <Host onClick={this.filterClickWhenDisabled}>\n                <button\n                    disabled={this.disabled}\n                    id={this.tooltipId}\n                    {...buttonAttributes}\n                >\n                    <limel-icon name={this.icon} badge={true} />\n                    {this.renderTooltip(this.tooltipId)}\n                </button>\n            </Host>\n        );\n    }\n    private renderTooltip(tooltipId) {\n        if (this.label) {\n            return <limel-tooltip elementId={tooltipId} label={this.label} />;\n        }\n    }\n\n    private filterClickWhenDisabled = (e) => {\n        if (this.disabled) {\n            e.preventDefault();\n        }\n    };\n}\n"},{"filename":"icon-button.scss","type":"scss","source":"@use '../../style/mixins';\n\n/**\n * @prop --icon-background-color: Background color of the button.\n */\n\n:host([hidden]) {\n    display: none;\n}\n\n@include mixins.visualize-aria-expanded('button');\n\nbutton {\n    all: unset;\n    &:not(:disabled) {\n        @include mixins.is-flat-clickable(\n            $background-color: var(--icon-background-color, transparent)\n        );\n        @include mixins.visualize-keyboard-focus;\n    }\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n\n    height: 2.25rem;\n    width: 2.25rem;\n    border-radius: 50%;\n\n    &:disabled {\n        cursor: not-allowed;\n\n        color: var(--mdc-theme-text-disabled-on-background);\n    }\n}\n\n:host([elevated]) {\n    button {\n        box-shadow: var(--button-shadow-normal);\n        &:disabled {\n            box-shadow: var(--button-shadow-normal);\n        }\n    }\n}\n\nlimel-icon {\n    width: 1.25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile","filePath":"./src/components/info-tile/info-tile.tsx","fileName":"info-tile.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/info-tile/usage","tag":"limel-info-tile","overview":"This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","usage":{},"docs":"This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","docsTags":[{"name":"exampleComponent","text":"limel-example-info-tile"},{"name":"exampleComponent","text":"limel-example-info-tile-badge"},{"name":"exampleComponent","text":"limel-example-info-tile-progress"},{"name":"exampleComponent","text":"limel-example-info-tile-loading"},{"name":"exampleComponent","text":"limel-example-info-tile-primary-slot"},{"name":"exampleComponent","text":"limel-example-info-tile-styling"}],"encapsulation":"shadow","dependents":["limel-example-info-tile","limel-example-info-tile-badge","limel-example-info-tile-loading","limel-example-info-tile-primary-slot","limel-example-info-tile-progress","limel-example-info-tile-styling"],"dependencies":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"],"dependencyGraph":{"limel-info-tile":["limel-icon","limel-circular-progress","limel-badge","limel-linear-progress","limel-3d-hover-effect-glow"],"limel-example-info-tile":["limel-info-tile"],"limel-example-info-tile-badge":["limel-info-tile"],"limel-example-info-tile-loading":["limel-info-tile"],"limel-example-info-tile-primary-slot":["limel-info-tile"],"limel-example-info-tile-progress":["limel-info-tile"],"limel-example-info-tile-styling":["limel-info-tile"]},"props":[{"name":"badge","type":"number | string","mutable":false,"attr":"badge","reflectToAttr":true,"docs":"If supplied, the info tile will display a notification badge.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` if info tile is disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":false,"docs":"Name of icon for the info tile.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show below the info tile. Long labels will be truncated.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"link","type":"Link","mutable":false,"reflectToAttr":false,"docs":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","docsTags":[],"values":[{"type":"Link"}],"optional":true,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":true,"docs":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"prefix","type":"string","mutable":false,"attr":"prefix","reflectToAttr":true,"docs":"A string of text that is visually placed before the value.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"progress","type":"InfoTileProgress","mutable":false,"reflectToAttr":false,"docs":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `displayPercentageColors`: false\n\nColors change with intervals of 10 %.","docsTags":[],"values":[{"type":"InfoTileProgress"}],"optional":true,"required":false},{"name":"suffix","type":"string","mutable":false,"attr":"suffix","reflectToAttr":true,"docs":"A string of text that is visually placed after the value.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"value","type":"number | string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--info-tile-background-color","annotation":"prop","docs":"defines the backgrounds color of the info-tile icon. Defaults to `--contrast-100`"},{"name":"--info-tile-badge-background-color","annotation":"prop","docs":"Background color of the notification badge. Defaults to `--color-red-default`"},{"name":"--info-tile-badge-text-color","annotation":"prop","docs":"Text color of the notification badge. Defaults to `--color-white`"},{"name":"--info-tile-border-radius","annotation":"prop","docs":"defines the radius of corners of the info-tile. Defaults to `1rem`"},{"name":"--info-tile-icon-color","annotation":"prop","docs":"defines the fill color of the info-tile icon. Defaults to `--contrast-1000`"},{"name":"--info-tile-progress-background-color","annotation":"prop","docs":"Determines the background color of the central section of the progress bar. Defaults to `--info-tile-background-color`."},{"name":"--info-tile-progress-fill-color","annotation":"prop","docs":"Determines the color of the progressed section. Defaults to `--lime-primary-color`."},{"name":"--info-tile-progress-prefix-color","annotation":"prop","docs":"Determines the color of the progress suffix. Defaults to `--contrast-1000`."},{"name":"--info-tile-progress-suffix-color","annotation":"prop","docs":"Determines the color of the progress prefix. Defaults to `--contrast-1000`."},{"name":"--info-tile-progress-text-color","annotation":"prop","docs":"Determines the color of the progress value. Defaults to `--info-tile-text-color`."},{"name":"--info-tile-text-color","annotation":"prop","docs":"defines the color of the info-tile label. Defaults to `--contrast-1100`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"info-tile.tsx","type":"tsx","source":"import { Component, Prop, h, Element, Host, State } from '@stencil/core';\nimport { InfoTileProgress } from '../info-tile/info-tile.types';\nimport { Link } from '../../global/shared-types/link.types';\nimport { getMouseEventHandlers } from '../../util/3d-tilt-hover-effect';\nimport { getRel } from '../../util/link-helper';\n\n/**\n * This component can be used on places such as a start page or a dashboard.\n * It offers features for visualizing aggregated data along with supplementary\n * information.\n *\n * If clicking on the component should navigate the user to\n * a new screen or web page, you need to provide a URL,\n * using the `link` property.\n *\n * @exampleComponent limel-example-info-tile\n * @exampleComponent limel-example-info-tile-badge\n * @exampleComponent limel-example-info-tile-progress\n * @exampleComponent limel-example-info-tile-loading\n * @exampleComponent limel-example-info-tile-primary-slot\n * @exampleComponent limel-example-info-tile-styling\n */\n@Component({\n    tag: 'limel-info-tile',\n    shadow: true,\n    styleUrl: 'info-tile.scss',\n})\nexport class InfoTile {\n    /**\n     * A piece of text or number that is the main piece of information\n     * which the component is intended to visualize.\n     */\n    @Prop({ reflect: true })\n    public value: number | string;\n\n    /**\n     * Name of icon for the info tile.\n     */\n    @Prop()\n    public icon?: string;\n\n    /**\n     * The text to show below the info tile. Long labels will be truncated.\n     */\n    @Prop({ reflect: true })\n    public label?: string = null;\n\n    /**\n     * A string of text that is visually placed before the value.\n     */\n    @Prop({ reflect: true })\n    public prefix?: string;\n\n    /**\n     * A string of text that is visually placed after the value.\n     */\n    @Prop({ reflect: true })\n    public suffix?: string;\n\n    /**\n     * Set to `true` if info tile is disabled.\n     */\n    @Prop({ reflect: true })\n    public disabled? = false;\n\n    /**\n     * If supplied, the info tile will display a notification badge.\n     */\n    @Prop({ reflect: true })\n    public badge?: number | string;\n\n    /**\n     * Set to `true` to put the component in the `loading` state.\n     * This does _not_ disable the link. To do so, the\n     * `disabled` property should be set to `true` as well.\n     */\n    @Prop({ reflect: true })\n    public loading? = false;\n\n    /**\n     * If supplied, the info tile will be a clickable link.\n     *\n     * Supplying a value also adds an elevated effect using a shadow,\n     * as well as `cursor: pointer`, which appears on hover.\n     * While we strongly recommend supplying a link whenever the\n     * component should act as a link, if this is not possible, and\n     * you need to provide interaction through a click handler,\n     * you can still get the correct styling by supplying a `Link`\n     * object with the `href` property set to `'#'`.\n     */\n    @Prop()\n    public link?: Link;\n\n    /**\n     * Properties of the optional circular progress bar.\n     *\n     * Defaults:\n     * - `maxValue`: 100\n     * - `suffix`: %\n     * - `displayPercentageColors`: false\n     *\n     * Colors change with intervals of 10 %.\n     */\n    @Prop()\n    public progress?: InfoTileProgress;\n\n    @Element()\n    private host: HTMLElement;\n\n    /**\n     * `true` when something is assigned to the `primary` slot\n     */\n    @State()\n    private hasPrimarySlot = false;\n\n    private handleMouseEnter: () => void;\n    private handleMouseLeave: () => void;\n\n    public componentWillLoad() {\n        const { handleMouseEnter, handleMouseLeave } = getMouseEventHandlers(\n            this.host\n        );\n        this.handleMouseEnter = handleMouseEnter;\n        this.handleMouseLeave = handleMouseLeave;\n        this.updateHasPrimarySlotContent();\n    }\n\n    public render() {\n        const extendedAriaLabel =\n            this.checkProps(this?.prefix) +\n            this.value +\n            ' ' +\n            this.checkProps(this?.suffix) +\n            this.checkProps(this?.label) +\n            '. ' +\n            this.checkProps(this?.progress?.prefix) +\n            this.checkProps(this?.progress?.value) +\n            this.checkProps(this?.progress?.suffix) +\n            this.checkProps(this?.link?.title);\n\n        const link = this.disabled ? '#' : this.link?.href;\n        const rel = getRel(this.link?.target, this.link?.rel);\n\n        return (\n            <Host\n                onMouseEnter={this.handleMouseEnter}\n                onMouseLeave={this.handleMouseLeave}\n                class={{ 'has-primary-slot-content': this.hasPrimarySlot }}\n            >\n                <a\n                    title={this.link?.title}\n                    href={link}\n                    target={this.link?.target}\n                    rel={rel}\n                    tabindex=\"0\"\n                    aria-label={extendedAriaLabel}\n                    aria-disabled={this.disabled}\n                    aria-busy={this.loading ? 'true' : 'false'}\n                    aria-live=\"polite\"\n                    class={{\n                        'is-clickable': !!this.link?.href && !this.disabled,\n                    }}\n                >\n                    {this.renderIcon()}\n                    {this.renderProgress()}\n                    <slot\n                        name=\"primary\"\n                        onSlotchange={this.updateHasPrimarySlotContent}\n                    />\n                    <div class=\"value-group\">\n                        {this.renderPrefix()}\n                        <div class=\"value-and-suffix\">\n                            {this.renderValue()}\n                            {this.renderSuffix()}\n                        </div>\n                        {this.renderSpinner()}\n                    </div>\n                    {this.renderLabel()}\n                    <limel-3d-hover-effect-glow />\n                </a>\n                {this.renderNotification()}\n            </Host>\n        );\n    }\n\n    private checkProps(propValue) {\n        return propValue ? propValue + ' ' : '';\n    }\n\n    private renderPrefix = () => {\n        if (this.prefix) {\n            return <span class=\"prefix\">{this.prefix}</span>;\n        }\n    };\n\n    private renderValue = () => {\n        const characterCount = (this.value ?? '').toString().length;\n\n        if (!this.value && this.loading) {\n            return <span class=\"value\">···</span>;\n        }\n\n        if (this.value) {\n            return (\n                <span\n                    class={{\n                        value: true,\n                        [`ch-${characterCount}`]: true,\n                    }}\n                >\n                    {this.value}\n                </span>\n            );\n        }\n    };\n\n    private renderSuffix = () => {\n        if (this.suffix) {\n            return <span class=\"suffix\">{this.suffix}</span>;\n        }\n    };\n\n    private renderIcon = () => {\n        if (this.icon) {\n            return <limel-icon class=\"icon\" name={this.icon} />;\n        }\n    };\n\n    private updateHasPrimarySlotContent = (e?: Event) => {\n        const slot =\n            (e?.target as HTMLSlotElement) ??\n            this.host.shadowRoot.querySelector('slot[name=\"primary\"]');\n        this.hasPrimarySlot = slot && slot.assignedElements().length > 0;\n    };\n\n    private renderProgress = () => {\n        if (this.hasPrimarySlot) {\n            return;\n        }\n\n        if (!this.progress?.value && this.progress?.value !== 0) {\n            return;\n        }\n\n        return (\n            <limel-circular-progress\n                class=\"progress\"\n                prefix={this.progress.prefix}\n                value={this.progress.value}\n                suffix={this.progress.suffix}\n                maxValue={this.progress.maxValue}\n                displayPercentageColors={this.progress.displayPercentageColors}\n            />\n        );\n    };\n\n    private renderLabel = () => {\n        if (this.label) {\n            return <span class=\"label\">{this.label}</span>;\n        }\n    };\n\n    private renderNotification = () => {\n        if (this.badge) {\n            return <limel-badge label={this.badge} />;\n        }\n    };\n\n    private renderSpinner = () => {\n        if (this.loading) {\n            return <limel-linear-progress indeterminate={true} />;\n        }\n    };\n}\n"},{"filename":"info-tile.scss","type":"scss","source":"/**\n* @prop --info-tile-border-radius: defines the radius of corners of the info-tile. Defaults to `1rem`\n* @prop --info-tile-icon-color: defines the fill color of the info-tile icon. Defaults to `--contrast-1000`\n* @prop --info-tile-text-color: defines the color of the info-tile label. Defaults to `--contrast-1100`\n* @prop --info-tile-background-color: defines the backgrounds color of the info-tile icon. Defaults to `--contrast-100`\n* @prop --info-tile-badge-text-color: Text color of the notification badge. Defaults to `--color-white`\n* @prop --info-tile-badge-background-color: Background color of the notification badge. Defaults to `--color-red-default`\n* @prop --info-tile-progress-fill-color: Determines the color of the progressed section. Defaults to `--lime-primary-color`.\n* @prop --info-tile-progress-background-color: Determines the background color of the central section of the progress bar. Defaults to `--info-tile-background-color`.\n* @prop --info-tile-progress-suffix-color: Determines the color of the progress prefix. Defaults to `--contrast-1000`.\n * @prop --info-tile-progress-text-color: Determines the color of the progress value. Defaults to `--info-tile-text-color`.\n * @prop --info-tile-progress-prefix-color: Determines the color of the progress suffix. Defaults to `--contrast-1000`.\n*/\n\n@use '../../style/mixins';\n\n:host(limel-info-tile) {\n    --badge-text-color: var(\n        --info-tile-badge-text-color,\n        rgb(var(--color-white))\n    );\n    --badge-background-color: var(\n        --info-tile-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n\n    --circular-progress-text-color: var(\n        --info-tile-progress-text-color,\n        var(--info-tile-text-color)\n    );\n    --circular-progress-suffix-color: var(--info-tile-progress-suffix-color);\n    --circular-progress-prefix-color: var(--info-tile-progress-prefix-color);\n    --circular-progress-track-color: rgb(var(--contrast-800), 0.3);\n    --circular-progress-fill-color: var(--info-tile-progress-fill-color);\n    --circular-progress-background-color: var(\n        --info-tile-progress-background-color,\n        var(--info-tile-background-color)\n    );\n\n    --label-min-size: 0.75rem;\n    --label-preferred-size: 6cqw;\n    --label-max-size: 1rem;\n\n    --value-min-size: 1rem;\n    --value-preferred-size: 20cqw;\n    --value-max-size: 4rem;\n\n    --suffix-prefix-min-size: 0.75rem;\n    --suffix-prefix-preferred-size: 8cqw;\n    --suffix-prefix-max-size: 1.5rem;\n\n    --icon-min-size: 2rem;\n    --icon-preferred-size: 60cqh;\n    --icon-max-size: calc(100cqw - 0.5rem);\n\n    container-type: size;\n    position: relative;\n    display: flex;\n\n    width: 100%;\n    height: 100%;\n\n    * {\n        box-sizing: border-box;\n    }\n}\n\n:host(limel-info-tile[disabled]) {\n    a {\n        opacity: 0.5;\n        cursor: not-allowed;\n    }\n}\n\na {\n    all: unset;\n    overflow: hidden;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: flex-start;\n\n    height: 100%;\n    width: 100%;\n    flex-grow: 1;\n\n    padding: 0.25rem 1rem 0.5rem 1rem;\n    border-radius: var(--info-tile-border-radius, 1rem);\n    background-color: var(\n        --info-tile-background-color,\n        var(--lime-elevated-surface-background-color)\n    );\n}\n\n:host ::slotted([slot='primary']) {\n    width: 100%;\n    height: 100%;\n}\n\n.icon {\n    z-index: 1;\n    position: absolute;\n    top: 0.5rem;\n    right: 0.75rem;\n    padding: 0.25rem;\n\n    aspect-ratio: 1/1;\n\n    color: var(--info-tile-icon-color, rgb(var(--contrast-1000)));\n\n    border-radius: 0;\n    height: clamp(\n        var(--icon-min-size),\n        var(--icon-preferred-size),\n        var(--icon-max-size)\n    );\n\n    @supports not (container-type: size) {\n        width: max(10%, 3rem);\n    }\n\n    :host(.has-primary-slot-content) &,\n    a:has(limel-circular-progress) & {\n        top: unset;\n        bottom: 0.5rem;\n        --icon-min-size: 1.5rem;\n        --icon-preferred-size: 20cqh;\n    }\n}\n\nslot[name='primary'] {\n    display: block;\n    aspect-ratio: 1;\n    width: min(var(--icon-preferred-size), var(--icon-max-size));\n}\n\n.progress,\nslot[name='primary'] {\n    position: absolute;\n    top: 0.75rem;\n    right: 0.75rem;\n}\n\n.progress {\n    --circular-progress-size: min(\n        var(--icon-preferred-size),\n        var(--icon-max-size)\n    );\n    @supports not (container-type: size) {\n        --circular-progress-size: initial;\n    }\n}\n\n.label {\n    z-index: 1;\n    color: var(--info-tile-text-color, rgb(var(--contrast-1100)));\n\n    line-height: 1.2;\n    font-size: clamp(\n        var(--label-min-size),\n        var(--label-preferred-size),\n        var(--label-max-size)\n    );\n    @supports not (container-type: size) {\n        font-size: 0.875rem;\n    }\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.25rem;\n    right: -0.25rem;\n}\n\nlimel-linear-progress {\n    --lime-primary-color: var(--info-tile-text-color);\n    position: absolute;\n    inset: auto 0 0 0;\n}\n\n.value-group {\n    position: relative;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    color: var(--info-tile-text-color, rgb(var(--contrast-1100)));\n}\n\n.value-and-suffix,\n.label {\n    text-shadow:\n        0 0 0.5rem var(--info-tile-background-color, rgb(var(--contrast-100))),\n        0 0 0.25rem var(--info-tile-background-color, rgb(var(--contrast-100)));\n}\n\n.value-and-suffix {\n    display: flex;\n}\n\n.prefix,\n.suffix {\n    font-size: clamp(\n        var(--suffix-prefix-min-size),\n        var(--suffix-prefix-preferred-size),\n        var(--suffix-prefix-max-size)\n    );\n    opacity: 0.7;\n\n    @supports not (container-type: size) {\n        font-size: 0.75rem;\n    }\n}\n\n.prefix {\n    align-self: flex-start;\n    line-height: normal;\n    transform: translateY(40%);\n}\n\n.value {\n    transition:\n        opacity 0.2s ease,\n        transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.95);\n    transform-origin: left;\n    transform: translate3d(0, 0, 0) scale(1);\n\n    @include mixins.truncate-text;\n    font-weight: bold;\n    line-height: normal;\n\n    font-size: clamp(\n        var(--value-min-size),\n        var(--value-preferred-size),\n        var(--value-max-size)\n    );\n    @supports not (container-type: size) {\n        font-size: 1.5rem;\n    }\n\n    :host(limel-info-tile[loading]) & {\n        opacity: 0.3;\n        transform: translate3d(0, 0, 0) scale(0.9);\n    }\n}\n\n.suffix {\n    transform: translateY(10%);\n}\n\n$xs: 8rem; //128px:\n$s: 18.75rem; //300px\n$m: 40.5rem; //648px\n$l: 62.5rem; //1000px\n\n@container (width < #{$xs}) {\n    .progress,\n    slot[name='primary'] {\n        top: 0.25rem;\n        right: 0.25rem;\n    }\n    a {\n        padding: 0.375rem;\n        gap: 0.125rem;\n    }\n}\n\n@container (width < #{$s}) {\n    .progress,\n    slot[name='primary'] {\n        top: 0.5rem;\n        right: 0.5rem;\n    }\n    .icon {\n        top: 0.25rem;\n        right: 0.5rem;\n\n        :host(.has-primary-slot-content) &,\n        a:has(limel-circular-progress) & {\n            right: 0.25rem;\n            bottom: 0.25rem;\n        }\n    }\n}\n\n@container (width < #{$m}) {\n    .value {\n        &.ch-1,\n        &.ch-2,\n        &.ch-3,\n        &.ch-4 {\n            --value-preferred-size: 20cqw;\n        }\n        &.ch-5 {\n            --value-preferred-size: 18cqw;\n        }\n        &.ch-6 {\n            --value-preferred-size: 17cqw;\n        }\n        &.ch-7 {\n            --value-preferred-size: 16cqw;\n        }\n        &.ch-8 {\n            --value-preferred-size: 15cqw;\n        }\n        &.ch-9 {\n            --value-preferred-size: 14cqw;\n        }\n        --value-preferred-size: 13cqw;\n    }\n}\n\n@container (height > #{$xs}) {\n    a {\n        padding-top: 0.75rem;\n        padding-bottom: 1rem;\n    }\n}\n\n@container (height < #{$xs}) and (width > #{$xs}) {\n    .value {\n        --value-preferred-size: 32cqh !important;\n    }\n    .suffix,\n    .prefix {\n        --suffix-prefix-preferred-size: 16cqh !important;\n    }\n}\n\n@container (height > #{$s}) {\n    .progress,\n    slot[name='primary'],\n    .icon {\n        position: relative;\n        top: unset;\n        right: unset;\n    }\n    a {\n        align-items: center;\n        justify-content: center;\n    }\n    .label {\n        text-align: center;\n        // -webkit-line-clamp: 3;\n    }\n\n    :host(.has-primary-slot-content),\n    a:has(limel-circular-progress) {\n        .icon {\n            position: absolute;\n            top: 0.5rem;\n            right: 0.5rem;\n            --icon-max-size: 3rem;\n        }\n    }\n}\n\n// The 3D effect\nlimel-3d-hover-effect-glow {\n    border-radius: var(--info-tile-border-radius, 1rem);\n}\n\n:host(limel-info-tile) {\n    @include mixins.parent-of-the-3d-element;\n}\n\na {\n    @include mixins.the-3d-element;\n\n    &.is-clickable {\n        @include mixins.the-3d-element--clickable;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field","filePath":"./src/components/input-field/input-field.tsx","fileName":"input-field.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/input-field/usage","tag":"limel-input-field","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-input-field-text"},{"name":"exampleComponent","text":"limel-example-input-field-placeholder"},{"name":"exampleComponent","text":"limel-example-input-field-text-multiple"},{"name":"exampleComponent","text":"limel-example-input-field-number"},{"name":"exampleComponent","text":"limel-example-input-field-autocomplete"},{"name":"exampleComponent","text":"limel-example-input-field-icon-leading"},{"name":"exampleComponent","text":"limel-example-input-field-icon-trailing"},{"name":"exampleComponent","text":"limel-example-input-field-icon-both"},{"name":"exampleComponent","text":"limel-example-input-field-showlink"},{"name":"exampleComponent","text":"limel-example-input-field-error-icon"},{"name":"exampleComponent","text":"limel-example-input-field-textarea"},{"name":"exampleComponent","text":"limel-example-input-field-suffix"},{"name":"exampleComponent","text":"limel-example-input-field-prefix"},{"name":"exampleComponent","text":"limel-example-input-field-search"},{"name":"exampleComponent","text":"limel-example-input-field-pattern"},{"name":"exampleComponent","text":"limel-example-input-field-focus"}],"encapsulation":"shadow","dependents":["limel-color-picker","limel-color-picker-palette","limel-date-picker","limel-example-chart-axis-increment","limel-example-chart-type-area","limel-example-chart-type-bar","limel-example-chart-type-dot","limel-example-chart-type-doughnut","limel-example-chart-type-gantt","limel-example-chart-type-line","limel-example-chart-type-pie","limel-example-chart-type-ring","limel-example-chip-set-input","limel-example-circular-progress","limel-example-circular-progress-percentage-colors","limel-example-collapsible-section-invalid","limel-example-dialog-heading","limel-example-file-dropzone-type-filtering","limel-example-info-tile-progress","limel-example-input-field-autocomplete","limel-example-input-field-error-icon","limel-example-input-field-focus","limel-example-input-field-icon-both","limel-example-input-field-icon-leading","limel-example-input-field-icon-trailing","limel-example-input-field-number","limel-example-input-field-pattern","limel-example-input-field-placeholder","limel-example-input-field-prefix","limel-example-input-field-search","limel-example-input-field-showlink","limel-example-input-field-suffix","limel-example-input-field-text","limel-example-input-field-text-decluttering-guidelines","limel-example-input-field-text-multiple","limel-example-input-field-textarea","limel-example-linear-progress","limel-example-markdown-composite","limel-example-text-editor-composite","limel-menu","limel-text-editor-link-menu"],"dependencies":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"dependencyGraph":{"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-color-picker":["limel-input-field"],"limel-color-picker-palette":["limel-input-field"],"limel-date-picker":["limel-input-field"],"limel-example-chart-axis-increment":["limel-input-field"],"limel-example-chart-type-area":["limel-input-field"],"limel-example-chart-type-bar":["limel-input-field"],"limel-example-chart-type-dot":["limel-input-field"],"limel-example-chart-type-doughnut":["limel-input-field"],"limel-example-chart-type-gantt":["limel-input-field"],"limel-example-chart-type-line":["limel-input-field"],"limel-example-chart-type-pie":["limel-input-field"],"limel-example-chart-type-ring":["limel-input-field"],"limel-example-chip-set-input":["limel-input-field"],"limel-example-circular-progress":["limel-input-field"],"limel-example-circular-progress-percentage-colors":["limel-input-field"],"limel-example-collapsible-section-invalid":["limel-input-field"],"limel-example-dialog-heading":["limel-input-field"],"limel-example-file-dropzone-type-filtering":["limel-input-field"],"limel-example-info-tile-progress":["limel-input-field"],"limel-example-input-field-autocomplete":["limel-input-field"],"limel-example-input-field-error-icon":["limel-input-field"],"limel-example-input-field-focus":["limel-input-field"],"limel-example-input-field-icon-both":["limel-input-field"],"limel-example-input-field-icon-leading":["limel-input-field"],"limel-example-input-field-icon-trailing":["limel-input-field"],"limel-example-input-field-number":["limel-input-field"],"limel-example-input-field-pattern":["limel-input-field"],"limel-example-input-field-placeholder":["limel-input-field"],"limel-example-input-field-prefix":["limel-input-field"],"limel-example-input-field-search":["limel-input-field"],"limel-example-input-field-showlink":["limel-input-field"],"limel-example-input-field-suffix":["limel-input-field"],"limel-example-input-field-text":["limel-input-field"],"limel-example-input-field-text-decluttering-guidelines":["limel-input-field"],"limel-example-input-field-text-multiple":["limel-input-field"],"limel-example-input-field-textarea":["limel-input-field"],"limel-example-linear-progress":["limel-input-field"],"limel-example-markdown-composite":["limel-input-field"],"limel-example-text-editor-composite":["limel-input-field"],"limel-menu":["limel-input-field"],"limel-text-editor-link-menu":["limel-input-field"]},"props":[{"name":"completions","type":"string[]","mutable":false,"reflectToAttr":false,"docs":"list of suggestions `value` can autocomplete to.","docsTags":[],"default":"[]","values":[{"type":"string[]"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"formatNumber","type":"boolean","mutable":false,"attr":"format-number","reflectToAttr":true,"docs":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the input field is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The input label.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"leadingIcon","type":"string","mutable":false,"attr":"leading-icon","reflectToAttr":true,"docs":"Leading icon to show to the far left in the field.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"locale","type":"string","mutable":false,"attr":"locale","reflectToAttr":true,"docs":"The locale to use for formatting numbers.","docsTags":[],"default":"globalConfig.defaultLocale","values":[{"type":"string"}],"optional":false,"required":false},{"name":"max","type":"number","mutable":false,"attr":"max","reflectToAttr":true,"docs":"Maximum allowed value if input type is `number`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"maxlength","type":"number","mutable":false,"attr":"maxlength","reflectToAttr":true,"docs":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"min","type":"number","mutable":false,"attr":"min","reflectToAttr":true,"docs":"Minimum allowed value if input type is `number`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"minlength","type":"number","mutable":false,"attr":"minlength","reflectToAttr":true,"docs":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"pattern","type":"string","mutable":false,"attr":"pattern","reflectToAttr":true,"docs":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":true,"docs":"The placeholder text shown inside the input field, when the field is focused and empty.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"prefix","type":"string","mutable":false,"attr":"prefix","reflectToAttr":true,"docs":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the field is required.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"showLink","type":"boolean","mutable":false,"attr":"show-link","reflectToAttr":true,"docs":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"step","type":"\"any\" | number","mutable":false,"attr":"step","reflectToAttr":true,"docs":"Incremental values that are valid if the field type is `number`.","docsTags":[],"default":"'any'","values":[{"value":"any","type":"string"},{"type":"number"}],"optional":false,"required":false},{"name":"suffix","type":"string","mutable":false,"attr":"suffix","reflectToAttr":true,"docs":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"trailingIcon","type":"string","mutable":false,"attr":"trailing-icon","reflectToAttr":true,"docs":"Trailing icon to show to the far right in the field.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"type","type":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\"","mutable":false,"attr":"type","reflectToAttr":true,"docs":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","docsTags":[],"default":"'text'","values":[{"value":"date","type":"string"},{"value":"datetime-local","type":"string"},{"value":"email","type":"string"},{"value":"month","type":"string"},{"value":"number","type":"string"},{"value":"password","type":"string"},{"value":"search","type":"string"},{"value":"tel","type":"string"},{"value":"text","type":"string"},{"value":"textarea","type":"string"},{"value":"time","type":"string"},{"value":"url","type":"string"},{"value":"urlAsText","type":"string"},{"value":"week","type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the field.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"action","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when `trailingIcon` or `leadingIcon` is set\nand the icon is interacted with.","docsTags":[]},{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the input value is changed.","docsTags":[]}],"styles":[{"name":"--textarea-height","annotation":"prop","docs":"Height of the field when type is set to `textarea`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"input-field.tsx","type":"tsx","source":"import { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { debounce } from 'lodash-es';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    SPACE,\n    TAB,\n} from '../../util/keycodes';\nimport { InputType } from '../input-field/input-field.types';\nimport { ListItem } from '../list/list-item.types';\nimport { getHref, getTarget, getRel } from '../../util/link-helper';\nimport { JSXBase } from '@stencil/core/internal';\nimport { createRandomString } from '../../util/random-string';\nimport { LimelListCustomEvent } from '../../components';\nimport { globalConfig } from '../../global/config';\n\ninterface LinkProperties {\n    href: string;\n    target?: string;\n    rel?: string;\n}\n\nconst CHANGE_EVENT_DEBOUNCE_TIMEOUT = 300;\nconst RESIZE_HANDLER_DEBOUNCE_TIMEOUT = 100;\n\n/**\n * @exampleComponent limel-example-input-field-text\n * @exampleComponent limel-example-input-field-placeholder\n * @exampleComponent limel-example-input-field-text-multiple\n * @exampleComponent limel-example-input-field-number\n * @exampleComponent limel-example-input-field-autocomplete\n * @exampleComponent limel-example-input-field-icon-leading\n * @exampleComponent limel-example-input-field-icon-trailing\n * @exampleComponent limel-example-input-field-icon-both\n * @exampleComponent limel-example-input-field-showlink\n * @exampleComponent limel-example-input-field-error-icon\n * @exampleComponent limel-example-input-field-textarea\n * @exampleComponent limel-example-input-field-suffix\n * @exampleComponent limel-example-input-field-prefix\n * @exampleComponent limel-example-input-field-search\n * @exampleComponent limel-example-input-field-pattern\n * @exampleComponent limel-example-input-field-focus\n */\n@Component({\n    tag: 'limel-input-field',\n    shadow: true,\n    styleUrl: 'input-field.scss',\n})\nexport class InputField {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty.\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * A short piece of text to display before the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public prefix: string;\n\n    /**\n     * A short piece of text to display after the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public suffix: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Trailing icon to show to the far right in the field.\n     */\n    @Prop({ reflect: true })\n    public trailingIcon: string;\n\n    /**\n     * Leading icon to show to the far left in the field.\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string;\n\n    /**\n     * Regular expression that the current value of the input field must match.\n     * No forward slashes should be specified around the pattern.\n     * Only used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n     * `password`, or `search`.\n     */\n    @Prop({ reflect: true })\n    public pattern: string;\n\n    /**\n     * Type of input.\n     *\n     * Note** regarding type `url`: `limel-input` uses the native validation\n     * built into the browser for many types of input fields. The native\n     * validation for `url` is very strict, and does not allow relative urls,\n     * nor any other formats that are not a \"fully qualified\" url. To allow\n     * such urls, use the type `urlAsText` instead. `urlAsText` works exactly\n     * like `text` in all regards, except that it enables use of the `showLink`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public type: InputType = 'text';\n\n    /**\n     * Set to `true` to format the current value of the input field only\n     * if the field is of type number.\n     * The number format is determined by the current language of the browser.\n     */\n    @Prop({ reflect: true })\n    public formatNumber = true;\n\n    /**\n     * Incremental values that are valid if the field type is `number`.\n     */\n    @Prop({ reflect: true })\n    public step: number | 'any' = 'any';\n\n    /**\n     * Maximum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public max: number;\n\n    /**\n     * Minimum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public min: number;\n\n    /**\n     * Maximum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public maxlength: number;\n\n    /**\n     * Minimum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public minlength: number;\n\n    /**\n     * list of suggestions `value` can autocomplete to.\n     */\n    @Prop()\n    public completions: string[] = [];\n\n    /**\n     * For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n     * `true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\n     * respectively. The default icon can be overridden using the `trailingIcon`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public showLink = false;\n\n    /**\n     * The locale to use for formatting numbers.\n     */\n    @Prop({ reflect: true })\n    public locale: string = globalConfig.defaultLocale;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<string>;\n\n    /**\n     * Emitted when `trailingIcon` or `leadingIcon` is set\n     * and the icon is interacted with.\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    @Element()\n    private limelInputField: HTMLLimelInputFieldElement;\n\n    @State()\n    private isFocused: boolean = false;\n\n    @State()\n    private wasInvalid: boolean = false;\n\n    @State()\n    public showCompletions: boolean = false;\n\n    private inputElement?: HTMLInputElement | HTMLTextAreaElement;\n    private mdcTextField: MDCTextField;\n    private completionsList: ListItem[] = [];\n    private portalId: string;\n    private helperTextId: string;\n    private labelId: string;\n\n    private changeWaiting = false;\n\n    constructor() {\n        this.portalId = createRandomString();\n        this.helperTextId = createRandomString();\n        this.labelId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n\n        this.restyleCompletionsDropDown.cancel();\n        window.removeEventListener('resize', this.layout);\n        this.limelInputField.removeEventListener('focus', this.setFocus);\n    }\n\n    public componentDidUpdate() {\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n\n        this.mdcTextField.disabled = this.disabled || this.readonly;\n    }\n\n    public render() {\n        const properties = this.getAdditionalProps();\n        properties['aria-labelledby'] = this.labelId;\n        properties.class = 'mdc-text-field__input';\n        properties.ref = this.setInputElement;\n        properties.onInput = this.handleInput;\n        properties.onChange = this.handleChange;\n        properties.onFocus = this.onFocus;\n        properties.onBlur = this.onBlur;\n        properties.required = this.required;\n        properties.readonly = this.readonly;\n        properties.disabled = this.disabled || this.readonly;\n\n        let ariaControls = '';\n\n        if (this.hasHelperText()) {\n            ariaControls += this.helperTextId;\n            properties['aria-describedby'] = this.helperTextId;\n        }\n\n        if (this.renderAutocompleteList()) {\n            if (ariaControls) {\n                ariaControls += ' ';\n            }\n\n            ariaControls += this.portalId;\n        }\n\n        if (ariaControls) {\n            properties['aria-controls'] = ariaControls;\n        }\n\n        return [\n            <limel-notched-outline\n                labelId={this.labelId}\n                label={this.label}\n                required={this.required}\n                invalid={this.invalid || this.isInvalid()}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                hasValue={!!this.value}\n                hasLeadingIcon={!!this.leadingIcon}\n            >\n                <label slot=\"content\" class={this.getContainerClassList()}>\n                    {this.renderLeadingIcon()}\n                    {this.renderPrefix()}\n                    {this.renderFormattedNumber()}\n                    {this.renderInput(properties)}\n                    {this.renderSuffix()}\n                    {this.renderTextarea(properties)}\n                    {this.renderTrailingLinkOrButton()}\n                </label>\n            </limel-notched-outline>,\n            this.renderHelperLine(),\n            this.renderAutocompleteList(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: string) {\n        if (!this.mdcTextField) {\n            return;\n        }\n\n        if (this.changeWaiting) {\n            return;\n        }\n\n        if (\n            this.type === 'number' &&\n            this.isFocused &&\n            Number(newValue) === Number(this.mdcTextField.value)\n        ) {\n            return;\n        }\n\n        if (newValue !== this.mdcTextField.value) {\n            this.mdcTextField.value = newValue || '';\n        }\n\n        if (this.wasInvalid) {\n            this.validate();\n        }\n    }\n\n    @Watch('completions')\n    protected completionsWatcher() {\n        this.mapCompletions();\n    }\n\n    private initialize = () => {\n        const element =\n            this.limelInputField.shadowRoot.querySelector('.mdc-text-field');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTextField = new MDCTextField(element);\n        if (this.value) {\n            this.mdcTextField.value = this.value;\n        }\n\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n\n        this.mapCompletions();\n\n        window.addEventListener('resize', this.layout, { passive: true });\n        this.limelInputField.addEventListener('focus', this.setFocus);\n    };\n\n    private mapCompletions = () => {\n        this.completionsList = [...this.completions].map((item) => {\n            return { text: item };\n        });\n    };\n\n    private setFocus = () => {\n        this.mdcTextField.focus();\n    };\n\n    private getContainerClassList = () => {\n        const classList = {\n            'mdc-text-field': true,\n            'mdc-text-field--outlined': true,\n            'mdc-text-field--invalid': this.isInvalid(),\n            'mdc-text-field--disabled': this.disabled || this.readonly,\n            'lime-text-field--readonly': this.readonly,\n            'mdc-text-field--required': this.required,\n            'lime-text-field--empty': this.isEmpty(),\n            'lime-has-prefix': this.hasPrefix(),\n            'lime-has-suffix': this.hasSuffix(),\n        };\n\n        if (this.type === 'textarea') {\n            classList['mdc-text-field--textarea'] = true;\n        } else {\n            classList['mdc-text-field--with-leading-icon'] = !!this.leadingIcon;\n            classList['mdc-text-field--with-trailing-icon'] =\n                !!this.getTrailingIcon();\n        }\n\n        return classList;\n    };\n\n    private isEmpty = () => {\n        if (this.type === 'number' && this.inputElement?.validity.badInput) {\n            return false;\n        }\n\n        return !this.getCurrentValue();\n    };\n\n    private getCurrentValue = () => {\n        if (this.changeWaiting && this.inputElement) {\n            return this.inputElement.value;\n        }\n\n        return this.value;\n    };\n\n    private renderInput = (\n        properties: JSXBase.InputHTMLAttributes<HTMLInputElement>\n    ) => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const type = this.type === 'urlAsText' ? 'text' : this.type;\n\n        return (\n            <input\n                {...properties}\n                type={type}\n                pattern={this.pattern}\n                onWheel={this.handleWheel}\n                onKeyDown={this.onKeyDown}\n                placeholder={this.placeholder}\n            />\n        );\n    };\n\n    private renderTextarea = (\n        properties: JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement>\n    ) => {\n        if (this.type !== 'textarea') {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-text-field__resizer\">\n                <textarea\n                    {...properties}\n                    placeholder={this.placeholder}\n                ></textarea>\n            </span>\n        );\n    };\n\n    private layout = () => {\n        this.mdcTextField?.layout();\n        this.restyleCompletionsDropDown();\n    };\n\n    private restyleCompletionsDropDown = debounce(() => {\n        const stateOfShowCompletions = this.showCompletions;\n        this.showCompletions = false;\n        requestAnimationFrame(() => {\n            this.showCompletions = stateOfShowCompletions;\n        });\n    }, RESIZE_HANDLER_DEBOUNCE_TIMEOUT);\n\n    private getAdditionalProps = () => {\n        const props: any = {};\n\n        if (this.type === 'number') {\n            props.step = this.step;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.min)) {\n            props.min = this.min;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.max)) {\n            props.max = this.max;\n        }\n\n        if (this.minlength) {\n            props.minlength = this.minlength;\n        }\n\n        if (this.maxlength) {\n            props.maxlength = this.maxlength;\n        }\n\n        return props;\n    };\n\n    private onFocus = () => {\n        this.isFocused = true;\n        this.showCompletions = true;\n    };\n\n    private onBlur = () => {\n        this.isFocused = false;\n        this.validate();\n        this.changeEmitter.flush();\n    };\n\n    private get validationMessage(): string {\n        if (this.isInvalid() && !this.invalid) {\n            return this.inputElement?.validationMessage || '';\n        }\n\n        return '';\n    }\n\n    private hasHelperText = () => {\n        return !!(this.helperText ?? this.validationMessage);\n    };\n\n    private hasHelperLine = () => {\n        return this.maxlength > 0 || this.hasHelperText();\n    };\n\n    private renderHelperLine = () => {\n        const text: string = this.getCurrentValue() || '';\n        const length = text.length;\n\n        if (!this.hasHelperLine()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperTextId={this.helperTextId}\n                helperText={this.helperText ?? this.validationMessage}\n                length={length}\n                maxLength={this.maxlength}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderSuffix = () => {\n        if (!this.hasSuffix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--suffix': true,\n        };\n\n        return <span class={classList}>{this.suffix}</span>;\n    };\n\n    private hasSuffix = () => {\n        return this.suffix !== null && this.suffix !== undefined;\n    };\n\n    private renderPrefix = () => {\n        if (!this.hasPrefix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--prefix': true,\n        };\n\n        return <span class={classList}>{this.prefix}</span>;\n    };\n\n    private hasPrefix = () => {\n        return this.prefix !== null && this.prefix !== undefined;\n    };\n\n    private isInvalid = () => {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            // `this.invalid` is set by the consumer. If the consumer explicitly\n            // told us to consider the field invalid, we consider it invalid\n            // regardless of what our internal validation thinks, and regardless\n            // of whether the field has been modified.\n            return true;\n        }\n\n        return this.wasInvalid;\n    };\n\n    private validate = () => {\n        if (this.readonly || this.invalid) {\n            this.wasInvalid = false;\n\n            return;\n        }\n\n        if (this.inputElement) {\n            this.wasInvalid = !this.inputElement.checkValidity();\n        }\n    };\n\n    private setInputElement = (\n        element?: HTMLInputElement | HTMLTextAreaElement\n    ) => {\n        if (element) {\n            this.inputElement = element;\n        }\n    };\n\n    private renderLeadingIcon = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        if (this.leadingIcon) {\n            return (\n                <i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\">\n                    <limel-icon name={this.leadingIcon} />\n                </i>\n            );\n        }\n    };\n\n    private renderTrailingLinkOrButton = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const trailingIcon = this.getTrailingIcon();\n\n        if (!this.isInvalid() && this.hasLink()) {\n            return this.renderLinkIcon(this.getLink(), trailingIcon);\n        } else if (trailingIcon) {\n            return this.renderTrailingIcon(trailingIcon);\n        }\n    };\n\n    private hasLink = () => {\n        return (\n            this.showLink &&\n            ['email', 'tel', 'url', 'urlAsText'].includes(this.type)\n        );\n    };\n\n    private getLink = () => {\n        const props: LinkProperties = { href: '' };\n        switch (this.type) {\n            case 'email': {\n                props.href = `mailto:${this.value}`;\n                break;\n            }\n            case 'tel': {\n                props.href = `tel:${this.value}`;\n                break;\n            }\n            default: {\n                props.href = getHref(this.value);\n                props.target = getTarget(this.value);\n                props.rel = getRel(props.target);\n            }\n        }\n\n        return props;\n    };\n\n    private renderLinkIcon = (linkProps: LinkProperties, icon: string) => {\n        // If the trailing icon uses the class `mdc-text-field__icon--trailing`,\n        // MDC attaches a click handler to it, which apparently runs\n        // `preventDefault()` on the event. For links, we don't want that,\n        // so instead of `mdc-text-field__icon--trailing`, we use our own class\n        // `lime-trailing-icon-for-link`, which uses all the same styling. /Ads\n        return (\n            <a\n                {...linkProps}\n                class=\"material-icons mdc-text-field__icon lime-trailing-icon-for-link\"\n                tabindex={this.disabled || this.isEmpty() ? '-1' : '0'}\n                role=\"button\"\n            >\n                <limel-icon name={icon} />\n            </a>\n        );\n    };\n\n    private renderTrailingIcon = (icon: string) => {\n        if (this.isInvalid()) {\n            return (\n                <i\n                    key=\"invalid\"\n                    class=\"material-icons mdc-text-field__icon invalid-icon\"\n                >\n                    <limel-icon name={icon} />\n                </i>\n            );\n        }\n\n        return (\n            <i\n                key=\"action\"\n                class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\"\n                tabIndex={0}\n                role=\"button\"\n                onKeyDown={this.handleIconKeyPress}\n                onClick={this.handleIconClick}\n            >\n                <limel-icon name={icon} />\n            </i>\n        );\n    };\n\n    private getTrailingIcon = () => {\n        if (this.isInvalid()) {\n            return 'high_importance';\n        }\n\n        if (this.trailingIcon) {\n            return this.trailingIcon;\n        }\n\n        if (this.showLink && this.type === 'email') {\n            return 'filled_message';\n        }\n\n        if (this.showLink && this.type === 'tel') {\n            return 'phone';\n        }\n\n        if (\n            this.showLink &&\n            (this.type === 'url' || this.type === 'urlAsText')\n        ) {\n            return 'external_link';\n        }\n    };\n\n    private renderFormattedNumber = () => {\n        if (this.type !== 'number') {\n            return;\n        }\n\n        let renderValue = this.value;\n        if (this.formatNumber && this.value) {\n            renderValue = new Intl.NumberFormat(this.locale).format(\n                Number(this.value)\n            );\n            if (renderValue === 'NaN') {\n                return;\n            }\n        }\n\n        return (\n            <span class=\"lime-formatted-input lime-looks-like-input-value\">\n                {renderValue}\n            </span>\n        );\n    };\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param event - event\n     */\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        this.showCompletions = true;\n        const isForwardTab =\n            event.key === TAB &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp = event.key === ARROW_UP;\n        const isDown = event.key === ARROW_DOWN;\n\n        if (event.key === TAB && event.shiftKey) {\n            this.showCompletions = false;\n        }\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child'\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child'\n            );\n            listElement.focus();\n        }\n    };\n\n    private handleCompletionChange = (\n        event: LimelListCustomEvent<ListItem>\n    ) => {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.showCompletions = false;\n\n        /*\n         This change event doesn't need to be debounced in itself, but we want\n         to make absolutely sure that an earlier change event that *has* been\n         debounced doesn't emit after this one. Therefore, we run this through\n         the same debounced emitter function. /Ads\n         */\n        this.changeEmitter(event.detail.text);\n        this.changeEmitter.flush();\n    };\n\n    private renderAutocompleteList = () => {\n        if (this.type === 'textarea' || this.completions.length === 0) {\n            return;\n        }\n\n        const dropdownZIndex = getComputedStyle(\n            this.limelInputField\n        ).getPropertyValue('--dropdown-z-index');\n\n        return (\n            <limel-portal\n                visible={this.showCompletions}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={this.showCompletions}\n                    allowClicksElement={this.limelInputField}\n                    style={{\n                        '--menu-surface-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {this.renderListResult()}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    };\n\n    private renderListResult = () => {\n        const filteredCompletions: ListItem[] = this.filterCompletions(\n            this.getCurrentValue()\n        );\n        if (!filteredCompletions || filteredCompletions.length === 0) {\n            return null;\n        }\n\n        return (\n            <limel-list\n                onChange={this.handleCompletionChange}\n                onKeyDown={this.handleKeyDownInDropdown}\n                type=\"selectable\"\n                items={filteredCompletions}\n            />\n        );\n    };\n\n    private handleKeyDownInDropdown = (event: KeyboardEvent) => {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        if (keyFound) {\n            this.setFocus();\n        }\n    };\n\n    private handleCloseMenu = () => {\n        this.showCompletions = false;\n    };\n\n    private filterCompletions = (filter: string) => {\n        if (!filter) {\n            return this.completionsList;\n        }\n\n        return this.completionsList.filter((completion) =>\n            completion.text.toLowerCase().includes(filter.toLowerCase())\n        );\n    };\n\n    private handleInput = (event) => {\n        event.stopPropagation();\n        let value = event.target.value;\n\n        if (this.type === 'number') {\n            if (!value && event.data) {\n                event.stopPropagation();\n\n                return;\n            }\n\n            if (value) {\n                value = Number(value);\n            }\n        }\n\n        this.changeWaiting = true;\n        this.changeEmitter(value);\n    };\n\n    private changeEmitter = debounce((value: string) => {\n        this.change.emit(value);\n        this.changeWaiting = false;\n    }, CHANGE_EVENT_DEBOUNCE_TIMEOUT);\n\n    private handleChange = (event: Event) => {\n        event.stopPropagation();\n        this.changeEmitter.flush();\n    };\n\n    private handleIconClick = () => {\n        this.action.emit();\n    };\n\n    private handleIconKeyPress = (event: KeyboardEvent) => {\n        const isEnter = event.key === ENTER;\n        const isSpace = event.key === SPACE;\n\n        if (isSpace || isEnter) {\n            this.action.emit();\n        }\n    };\n\n    private handleWheel = () => {\n        // This empty event handler is here to circumvent a bug.\n        // In some browsers (Chrome for example), hovering the input with\n        // the input focused, and scrolling, will both change the value\n        // AND scroll the page. We would prefer to never change the value\n        // on scroll, instead always scrolling the page, but since we\n        // haven't found a way to do that, this is the next best thing, as\n        // it prevents the page from being scrolled, but only in the\n        // circumstances when the value is changed by the scrolling.\n        // Please test THOROUGHLY if you remove this event handler 😄\n    };\n}\n"},{"filename":"input-field.scss","type":"scss","source":"@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/list';\n@use '@material/elevation';\n@use '@material/menu-surface';\n\n/**\n * @prop --textarea-height: Height of the field when type is set to `textarea`\n */\n\n:host(limel-input-field) {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([type='textarea']) {\n    height: var(--textarea-height, 100%);\n\n    limel-notched-outline {\n        flex-grow: 1;\n    }\n\n    .mdc-text-field.mdc-text-field--textarea {\n        height: var(--textarea-height, 100%);\n\n        .mdc-text-field__input {\n            @include shared_input-select-picker.input-field-placeholder;\n            margin-top: functions.pxToRem(8);\n            margin-bottom: 0;\n        }\n    }\n}\n\n@include mixins.hide-helper-line-when-not-needed(limel-input-field);\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.trailing-icon;\n@include shared_input-select-picker.lime-looks-like-input-value;\n\n.lime-text-field--empty {\n    .mdc-text-field__icon--trailing {\n        @include shared_input-select-picker.looks-disabled;\n        pointer-events: none;\n        box-shadow: none !important;\n    }\n}\n\nlimel-notched-outline {\n    &[has-value],\n    &:focus-within {\n        .mdc-text-field__affix {\n            opacity: 1;\n        }\n    }\n}\n\n:host(limel-input-field:not([type='textarea'])) {\n    .limel-notched-outline {\n        // Needed only for Safari,\n        // to ensure that the outlines are not rendered\n        // larger than the input element.\n        height: shared_input-select-picker.$height-of-mdc-text-field;\n    }\n}\n\n.mdc-text-field {\n    width: 100%;\n\n    &:not(.mdc-text-field--disabled) {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-900));\n        }\n    }\n    &.mdc-text-field--disabled {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-700));\n        }\n    }\n}\n\n.lime-formatted-input {\n    display: none;\n    width: calc(100% - #{functions.pxToRem(20)});\n    z-index: z-index.$input-field--formatted-value;\n\n    pointer-events: none;\n\n    .mdc-text-field:not(.mdc-text-field--focused):not(.mdc-text-field--invalid)\n        & {\n        display: block;\n    }\n\n    + .mdc-text-field__input {\n        z-index: z-index.$input-field--input-with-formatted-value;\n    }\n}\n\n.mdc-text-field:not(.mdc-text-field--focused):not(.mdc-text-field--invalid) {\n    .mdc-text-field__input[type='number'] {\n        color: transparent;\n        -webkit-text-fill-color: transparent;\n    }\n\n    &.lime-text-field--readonly {\n        .mdc-text-field__input[type='number'] {\n            visibility: hidden;\n            // Not having `visibility: hidden;` makes the unformatted\n            // value selectable; which is not so nice when users\n            // click drag to select content on the screen.\n            // The reason to have it only on `readonly` mode is\n            // 1. This is the use case where it makes most sense\n            // 2. We don't want to repeat the same thing in the\n            // accessibility tree, and make it readable for assistive\n            // technologies.\n            // 3. When not readonly, clicking on the `<input />`\n            // element sets the focus and activates the edit mode.\n            // So we cannot always have it `hidden` on.\n            // which is why we have instead\n            // `color: transparent` a few lines before this.\n        }\n    }\n}\n\n.autocomplete-list-container {\n    position: relative;\n}\n\n.autocomplete-list {\n    background-color: var(--lime-elevated-surface-background-color);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-height: functions.pxToRem(200);\n    overflow-y: auto;\n}\n\n.mdc-deprecated-list-item {\n    cursor: pointer;\n}\n\n.mdc-text-field__input {\n    .mdc-text-field:not(.mdc-text-field--disabled) & {\n        color: shared_input-select-picker.$input-text-color;\n    }\n    .mdc-text-field.mdc-text-field--disabled & {\n        color: shared_input-select-picker.$input-text-color-disabled;\n    }\n}\n\ninput.mdc-text-field__input {\n    @include shared_input-select-picker.input-field-placeholder;\n\n    &::-webkit-search-cancel-button {\n        @include mixins.clear-all-button;\n\n        -webkit-appearance: none;\n\n        position: absolute;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        &:active {\n            transform: none; //Makes the \"clear-all button\" work\n        }\n        .mdc-text-field--label-floating & {\n            opacity: 1;\n        }\n    }\n}\n\n@import './partial-styles/trailing-icon.scss';\n@import './partial-styles/readonly';\n\n// To make the input field render smaller than the default MDC UI\n.mdc-text-field {\n    &.mdc-text-field--outlined {\n        height: shared_input-select-picker.$height-of-mdc-text-field;\n    }\n}\n.mdc-text-field--with-trailing-icon {\n    .mdc-text-field__icon:last-child {\n        padding: 0.25rem;\n        margin-right: 0.25rem;\n    }\n}\n.mdc-text-field--outlined.mdc-text-field--with-leading-icon {\n    .mdc-text-field__icon--leading {\n        margin-left: 0.25rem;\n    }\n    .mdc-floating-label {\n        left: 1.5rem;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress","filePath":"./src/components/linear-progress/linear-progress.tsx","fileName":"linear-progress.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/linear-progress/usage","tag":"limel-linear-progress","overview":"The linear progress component can be used to visualize the current state of a progress in a scale;\nfor example percentage of completion of a task.","usage":{},"docs":"The linear progress component can be used to visualize the current state of a progress in a scale;\nfor example percentage of completion of a task.","docsTags":[{"name":"exampleComponent","text":"limel-example-linear-progress"},{"name":"exampleComponent","text":"limel-example-linear-progress-indeterminate"},{"name":"exampleComponent","text":"limel-example-linear-progress-accessible-label"},{"name":"exampleComponent","text":"limel-example-linear-progress-color"}],"encapsulation":"shadow","dependents":["limel-chip","limel-example-colors-in-components","limel-example-linear-progress","limel-example-linear-progress-accessible-label","limel-example-linear-progress-color","limel-example-linear-progress-indeterminate","limel-info-tile"],"dependencies":[],"dependencyGraph":{"limel-chip":["limel-linear-progress"],"limel-example-colors-in-components":["limel-linear-progress"],"limel-example-linear-progress":["limel-linear-progress"],"limel-example-linear-progress-accessible-label":["limel-linear-progress"],"limel-example-linear-progress-color":["limel-linear-progress"],"limel-example-linear-progress-indeterminate":["limel-linear-progress"],"limel-info-tile":["limel-linear-progress"]},"props":[{"name":"accessibleLabel","type":"string","mutable":false,"attr":"accessible-label","reflectToAttr":true,"docs":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nIf not provided, the generic word of \"Progress bar\" will be used.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"indeterminate","type":"boolean","mutable":false,"attr":"indeterminate","reflectToAttr":true,"docs":"Puts the progress bar in an indeterminate state","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.\nWill translate the translatable strings on the components.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the progress bar. Should be between `0` and `1`.","docsTags":[],"default":"0","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--background-color","annotation":"prop","docs":"Color to use for progress-bar track."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"linear-progress.tsx","type":"tsx","source":"import { Component, Element, h, Host, Prop, Watch } from '@stencil/core';\nimport { Languages } from '../date-picker/date.types';\nimport translate from '../../global/translations';\n\nconst PERCENT = 100;\n\n/**\n * The linear progress component can be used to visualize the current state of a progress in a scale;\n * for example percentage of completion of a task.\n *\n * @exampleComponent limel-example-linear-progress\n * @exampleComponent limel-example-linear-progress-indeterminate\n * @exampleComponent limel-example-linear-progress-accessible-label\n * @exampleComponent limel-example-linear-progress-color\n */\n@Component({\n    tag: 'limel-linear-progress',\n    shadow: true,\n    styleUrl: 'linear-progress.scss',\n})\nexport class LinearProgress {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * The value of the progress bar. Should be between `0` and `1`.\n     */\n    @Prop({ reflect: true })\n    public value: number = 0;\n\n    /**\n     * Puts the progress bar in an indeterminate state\n     */\n    @Prop({ reflect: true })\n    public indeterminate: boolean = false;\n\n    /**\n     * A label used to describe the purpose of the element to users\n     * of assistive technologies, like screen readers.\n     * If not provided, the generic word of \"Progress bar\" will be used.\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    @Element()\n    private host: HTMLLimelLinearProgressElement;\n\n    public render() {\n        if (!this.isFinite(this.value)) {\n            return;\n        }\n\n        const loadingText = translate.get('loading', this.language);\n        const ariaLabel = translate.get('progress-bar', this.language);\n        const ariaValueNow = this.indeterminate ? undefined : this.value;\n        const ariaValueText = this.indeterminate ? loadingText : undefined;\n\n        return (\n            <Host\n                role=\"progressbar\"\n                aria-label={this.accessibleLabel || ariaLabel}\n                aria-live=\"polite\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"1\"\n                aria-valuenow={ariaValueNow}\n                aria-valuetext={ariaValueText}\n                style={{ '--percentage': `${this.value * PERCENT}%` }}\n            >\n                <div class=\"progress\" />\n            </Host>\n        );\n    }\n\n    @Watch('value')\n    protected watchValue(newValue: number) {\n        if (!this.isFinite(newValue)) {\n            return;\n        }\n\n        this.updateProgress(newValue);\n    }\n\n    private updateProgress(value: number): void {\n        if (this.host) {\n            this.host.style.setProperty('--percentage', `${value * PERCENT}%`);\n        }\n    }\n\n    private isFinite(value: unknown) {\n        return Number.isFinite(value);\n    }\n}\n"},{"filename":"linear-progress.scss","type":"scss","source":"/**\n * @prop --background-color: Color to use for progress-bar track.\n */\n\n:host(limel-linear-progress) {\n    isolation: isolate;\n    position: relative;\n    overflow: hidden;\n\n    display: flex;\n    width: 100%;\n    height: 0.25rem;\n    border-radius: 0.25rem;\n\n    background-color: var(--background-color, rgb(var(--contrast-800), 0.5));\n}\n\n.progress {\n    height: 100%;\n    width: var(--percentage, 0%);\n\n    border-radius: 0.25rem;\n    background-color: var(--mdc-theme-primary);\n}\n\n:host(limel-linear-progress[indeterminate]) {\n    .progress {\n        background-color: transparent;\n        width: 100%;\n\n        &:before,\n        &:after {\n            will-change: left, right, opacity;\n            content: '';\n            position: absolute;\n            inset: 0;\n            height: 100%;\n            border-radius: 0.25rem;\n            opacity: 0;\n            background-color: var(--mdc-theme-primary);\n        }\n\n        &:before {\n            animation: indeterminate 2.1s\n                cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n        }\n\n        &:after {\n            animation: indeterminate-short 2.1s\n                cubic-bezier(0.165, 0.84, 0.44, 1) infinite 1.15s;\n        }\n    }\n}\n\n@keyframes indeterminate {\n    0% {\n        left: -35%;\n        right: 100%;\n        opacity: 0;\n    }\n    10%,\n    80% {\n        opacity: 1;\n    }\n    60% {\n        left: 100%;\n        right: -90%;\n    }\n    100% {\n        left: 100%;\n        right: -90%;\n        opacity: 0;\n    }\n}\n\n@keyframes indeterminate-short {\n    0% {\n        left: -200%;\n        right: 100%;\n        opacity: 0;\n    }\n    10%,\n    80% {\n        opacity: 1;\n    }\n    60% {\n        left: 107%;\n        right: -8%;\n    }\n    100% {\n        left: 107%;\n        right: -8%;\n        opacity: 0;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/list","filePath":"./src/components/list/list.tsx","fileName":"list.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/list/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/list/usage","tag":"limel-list","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-list"},{"name":"exampleComponent","text":"limel-example-list-secondary"},{"name":"exampleComponent","text":"limel-example-list-separator"},{"name":"exampleComponent","text":"limel-example-list-selectable"},{"name":"exampleComponent","text":"limel-example-list-icons"},{"name":"exampleComponent","text":"limel-example-list-badge-icons"},{"name":"exampleComponent","text":"limel-example-list-pictures"},{"name":"exampleComponent","text":"limel-example-list-checkbox"},{"name":"exampleComponent","text":"limel-example-list-checkbox-icons"},{"name":"exampleComponent","text":"limel-example-list-radio-button"},{"name":"exampleComponent","text":"limel-example-list-radio-button-icons"},{"name":"exampleComponent","text":"limel-example-list-action"},{"name":"exampleComponent","text":"limel-example-list-striped"},{"name":"exampleComponent","text":"limel-example-list-badge-icons-with-multiple-lines"},{"name":"exampleComponent","text":"limel-example-list-grid"},{"name":"exampleComponent","text":"limel-example-list-primary-component"}],"encapsulation":"shadow","dependents":["limel-example-action-bar-as-primary-component","limel-example-action-bar-icon-title","limel-example-boolean-radio-buttons","limel-example-list","limel-example-list-action","limel-example-list-badge-icons","limel-example-list-badge-icons-with-multiple-lines","limel-example-list-checkbox","limel-example-list-checkbox-icons","limel-example-list-grid","limel-example-list-icons","limel-example-list-pictures","limel-example-list-primary-component","limel-example-list-radio-button","limel-example-list-radio-button-icons","limel-example-list-secondary","limel-example-list-selectable","limel-example-list-separator","limel-example-list-striped","limel-input-field","limel-picker","limel-select","my-custom-menu","my-custom-menu-with-notifications"],"dependencies":["limel-dynamic-label","limel-helper-line"],"dependencyGraph":{"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-action-bar-as-primary-component":["limel-list"],"limel-example-action-bar-icon-title":["limel-list"],"limel-example-boolean-radio-buttons":["limel-list"],"limel-example-list":["limel-list"],"limel-example-list-action":["limel-list"],"limel-example-list-badge-icons":["limel-list"],"limel-example-list-badge-icons-with-multiple-lines":["limel-list"],"limel-example-list-checkbox":["limel-list"],"limel-example-list-checkbox-icons":["limel-list"],"limel-example-list-grid":["limel-list"],"limel-example-list-icons":["limel-list"],"limel-example-list-pictures":["limel-list"],"limel-example-list-primary-component":["limel-list"],"limel-example-list-radio-button":["limel-list"],"limel-example-list-radio-button-icons":["limel-list"],"limel-example-list-secondary":["limel-list"],"limel-example-list-selectable":["limel-list"],"limel-example-list-separator":["limel-list"],"limel-example-list-striped":["limel-list"],"limel-input-field":["limel-list"],"limel-picker":["limel-list"],"limel-select":["limel-list"],"my-custom-menu":["limel-list"],"my-custom-menu-with-notifications":["limel-list"]},"props":[{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":false,"docs":"Set to `true` if the list should display larger icons with a background","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"iconSize","type":"\"large\" | \"medium\" | \"small\" | \"x-small\"","mutable":false,"attr":"icon-size","reflectToAttr":false,"docs":"Size of the icons in the list","docsTags":[],"default":"'small'","values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false},{"name":"items","type":"(ListSeparator | ListItem<any>)[]","mutable":false,"reflectToAttr":false,"docs":"List of items to display","docsTags":[],"values":[{"type":"(ListSeparator"},{"type":"ListItem<any>)[]"}],"optional":false,"required":false},{"name":"maxLinesSecondaryText","type":"number","mutable":false,"attr":"max-lines-secondary-text","reflectToAttr":false,"docs":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","docsTags":[],"default":"3","values":[{"type":"number"}],"optional":false,"required":false},{"name":"type","type":"\"checkbox\" | \"radio\" | \"selectable\"","mutable":false,"attr":"type","reflectToAttr":false,"docs":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","docsTags":[],"values":[{"value":"checkbox","type":"string"},{"value":"radio","type":"string"},{"value":"selectable","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"ListItem<any> | ListItem<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the list.\nOnly fired if `type` is set to `selectable`, `radio` or `checkbox`.","docsTags":[]},{"event":"interact","detail":"ListItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fires when a user interacts with an item in the list (e.g., click,\nkeyboard select).","docsTags":[]},{"event":"select","detail":"ListItem<any> | ListItem<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when an action has been selected from the action menu of a list item","docsTags":[]}],"styles":[{"name":"--checkbox-unchecked-border-color","annotation":"prop","docs":"Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`."},{"name":"--icon-background-color","annotation":"prop","docs":"Color to use for icon background when `badgeIcons=true`."},{"name":"--icon-color","annotation":"prop","docs":"Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`."},{"name":"--list-background-color-of-even-interactive-items","annotation":"prop","docs":"Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`."},{"name":"--list-background-color-of-odd-interactive-items","annotation":"prop","docs":"Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`."},{"name":"--list-grid-gap","annotation":"prop","docs":"Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`."},{"name":"--list-grid-item-max-width","annotation":"prop","docs":"Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`."},{"name":"--list-grid-item-min-width","annotation":"prop","docs":"Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`."},{"name":"--list-grid-max-width","annotation":"prop","docs":"Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`."},{"name":"--list-margin","annotation":"prop","docs":"Space around the list. Defaults to `0.25rem`, which visualizes keyboard-focused items in a better way, as it adds some space for the outline effect;"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"list.tsx","type":"tsx","source":"import { IconSize } from '../icon/icon.types';\nimport { ListItem, ListSeparator } from './list-item.types';\nimport { ListType } from './list.types';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { strings as listStrings } from '@material/list/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { ListRenderer } from './list-renderer';\nimport { ListRendererConfig } from './list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\n\n/**\n * @exampleComponent limel-example-list\n * @exampleComponent limel-example-list-secondary\n * @exampleComponent limel-example-list-separator\n * @exampleComponent limel-example-list-selectable\n * @exampleComponent limel-example-list-icons\n * @exampleComponent limel-example-list-badge-icons\n * @exampleComponent limel-example-list-pictures\n * @exampleComponent limel-example-list-checkbox\n * @exampleComponent limel-example-list-checkbox-icons\n * @exampleComponent limel-example-list-radio-button\n * @exampleComponent limel-example-list-radio-button-icons\n * @exampleComponent limel-example-list-action\n * @exampleComponent limel-example-list-striped\n * @exampleComponent limel-example-list-badge-icons-with-multiple-lines\n * @exampleComponent limel-example-list-grid\n * @exampleComponent limel-example-list-primary-component\n */\n@Component({\n    tag: 'limel-list',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'list.scss',\n})\nexport class List {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<ListItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the list, omit to get a regular list. Available types are:\n     * `selectable`: regular list with single selection.\n     * `radio`: radio button list with single selection.\n     * `checkbox`: checkbox list with multiple selection.\n     */\n    @Prop()\n    public type: ListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelListElement;\n\n    private config: ListRendererConfig;\n    private listRenderer = new ListRenderer();\n    private mdcList: MDCList;\n    private multiple: boolean;\n    private selectable: boolean;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     * Only fired if `type` is set to `selectable`, `radio` or `checkbox`.\n     */\n    @Event()\n    private change: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fired when an action has been selected from the action menu of a list item\n     */\n    @Event()\n    protected select: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fires when a user interacts with an item in the list (e.g., click,\n     * keyboard select).\n     */\n    @Event()\n    interact: EventEmitter<ListItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n        let maxLinesSecondaryText = +this.maxLinesSecondaryText?.toFixed();\n        if (this.maxLinesSecondaryText < 1) {\n            maxLinesSecondaryText = 1;\n        }\n\n        const html = this.listRenderer.render(this.items, this.config);\n\n        return (\n            <Host\n                style={{\n                    '--maxLinesSecondaryText': `${maxLinesSecondaryText}`,\n                }}\n            >\n                {html}\n            </Host>\n        );\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.setup();\n\n            const listItems = this.items.filter(this.isListItem);\n\n            if (this.multiple) {\n                this.mdcList.selectedIndex = listItems\n                    .filter((item: ListItem) => item.selected)\n                    .map((item: ListItem) => listItems.indexOf(item));\n            } else {\n                const selectedIndex = listItems.findIndex(\n                    (item: ListItem) => item.selected\n                );\n\n                if (selectedIndex === -1) {\n                    this.mdcList.initializeListType();\n                } else {\n                    this.mdcList.selectedIndex = selectedIndex;\n                }\n            }\n        }, 0);\n    }\n\n    private setup = () => {\n        this.setupList();\n\n        this.setupListeners();\n    };\n\n    private setupList = () => {\n        if (this.mdcList) {\n            this.teardown();\n            this.mdcList = null;\n        }\n\n        const element = this.element.shadowRoot.querySelector(\n            '.mdc-deprecated-list'\n        );\n        if (!element) {\n            return;\n        }\n\n        this.mdcList = new MDCList(element);\n        this.mdcList.hasTypeahead = true;\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcList) {\n            return;\n        }\n\n        this.mdcList.unlisten(ACTION_EVENT, this.handleAction);\n\n        this.selectable = ['selectable', 'radio', 'checkbox'].includes(\n            this.type\n        );\n        this.multiple = this.type === 'checkbox';\n\n        if (!this.selectable) {\n            return;\n        }\n\n        this.mdcList.listen(ACTION_EVENT, this.handleAction);\n        this.mdcList.singleSelection = !this.multiple;\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        if (!this.multiple) {\n            this.handleSingleSelect(event.detail.index);\n\n            return;\n        }\n\n        this.handleMultiSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: ListItem = listItems.find((item: ListItem) => {\n            return !!item.selected;\n        });\n\n        let interactedItem: ListItem;\n\n        if (selectedItem) {\n            if (this.type !== 'radio') {\n                this.mdcList.selectedIndex = -1;\n            }\n\n            interactedItem = { ...selectedItem, selected: false };\n            this.change.emit(interactedItem);\n        }\n\n        if (listItems[index] !== selectedItem) {\n            interactedItem = { ...listItems[index], selected: true };\n            this.change.emit(interactedItem);\n        }\n\n        this.interact.emit(interactedItem);\n    };\n\n    private handleMultiSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItems: ListItem[] = listItems\n            .filter((item: ListItem, listIndex: number) => {\n                if (listIndex === index) {\n                    // This is the item that was selected or deselected,\n                    // so we negate its previous selection status.\n                    return !item.selected;\n                }\n\n                // This is an item that didn't change, so we keep its selection status.\n                return item.selected;\n            })\n            .map((item: ListItem) => {\n                return { ...item, selected: true };\n            });\n\n        this.change.emit(selectedItems);\n        this.interact.emit({ ...selectedItems[index] });\n    };\n\n    private isListItem = (item: ListItem): boolean => {\n        return !('separator' in item);\n    };\n\n    private triggerIconColorWarning() {\n        if (this.items?.some((item) => 'iconColor' in item)) {\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\"\n            );\n        }\n    }\n}\n"},{"filename":"list.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n@use '../checkbox/checkbox.scss';\n\n@use '@material/list';\n\n$list-border-radius: 0.375rem; // 6px\n$list--has-interactive-items--mdc-list-item--hover: 1;\n$list-static-actions-list: 1;\n$list-mdc-list-item: 0;\n\n/**\n * @prop --icon-background-color: Color to use for icon background when `badgeIcons=true`.\n * @prop --icon-color: Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`.\n * @prop --list-grid-max-width: Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`.\n * @prop --list-grid-item-max-width: Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`.\n * @prop --list-background-color-of-odd-interactive-items: Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`.\n * @prop --list-background-color-of-even-interactive-items:  Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`.\n * @prop --list-margin: Space around the list. Defaults to `0.25rem`, which visualizes keyboard-focused items in a better way, as it adds some space for the outline effect;\n */\n\n:host(limel-list) {\n    display: block;\n    isolation: isolate;\n    @include checkbox.custom-checkbox-styles;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n@include list.deprecated-core-styles;\n\n.mdc-deprecated-list,\n.mdc-deprecated-list-item__secondary-text {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-deprecated-list {\n    --mdc-theme-text-icon-on-background: var(\n        --icon-color,\n        rgb(var(--contrast-900))\n    );\n    margin: var(\n        --list-margin,\n        0.25rem\n    ); // added space to visualize keyboard-focused items\n    padding: 0;\n    border-radius: $list-border-radius;\n\n    .mdc-deprecated-list-divider {\n        border-bottom-color: transparent;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n        height: auto;\n        padding: 0 0.5rem;\n    }\n\n    .limel-list-divider-line {\n        background-color: rgb(var(--contrast-400));\n        height: 0.125rem;\n        border-radius: 1rem;\n        min-width: 1rem;\n        flex-grow: 1;\n    }\n\n    .limel-list-divider-title {\n        all: unset;\n        @include mixins.truncate-text;\n        color: rgb(var(--contrast-900));\n        font-size: 0.8125rem; // 13px\n    }\n\n    .mdc-deprecated-list-item {\n        gap: 0.5rem;\n        transition: background-color 0.2s ease;\n        box-sizing: border-box;\n        z-index: $list-mdc-list-item; // in Chrome on Windows, menus flicker when they have a scroll bar and user hovers on them. We may be able to remove this in future versions of Chrome. Kia 2021-May-12\n        min-height: 2.5rem;\n\n        &:not(.mdc-deprecated-list-item--disabled) {\n            &:hover {\n                background-color: rgb(var(--contrast-300));\n                z-index: 1;\n            }\n        }\n\n        &.mdc-deprecated-list-item--disabled {\n            cursor: not-allowed;\n\n            limel-icon {\n                opacity: 0.38; // similar to `mdc-deprecated-list-item__text` when disabled\n            }\n        }\n\n        &:first-child {\n            border-top-left-radius: $list-border-radius;\n            border-top-right-radius: $list-border-radius;\n        }\n        &:last-child {\n            border-bottom-right-radius: $list-border-radius;\n            border-bottom-left-radius: $list-border-radius;\n        }\n    }\n\n    &.selectable\n        .mdc-deprecated-list-item:not(.mdc-deprecated-list-item--disabled) {\n        cursor: pointer;\n    }\n\n    .mdc-deprecated-list-item__meta {\n        // the action menu on the right side a list item\n        line-height: 100%;\n        margin-right: -0.5rem;\n        order: var(--limel-list-meta-order, 3);\n    }\n\n    .mdc-deprecated-list-item__graphic {\n        margin-right: 0;\n    }\n\n    &.mdc-deprecated-list--avatar-list {\n        position: relative;\n\n        limel-icon.mdc-deprecated-list-item__graphic {\n            background-color: var(\n                --icon-background-color,\n                rgb(var(--contrast-900))\n            );\n            color: var(--icon-color, rgba(var(--color-white), 0.88));\n            margin-left: functions.pxToRem(-4);\n        }\n\n        hr.mdc-deprecated-list-divider {\n            position: absolute;\n            bottom: 0;\n\n            &.mdc-deprecated-list-divider--inset {\n                --icon-width: #{functions.pxToRem(40)};\n                --icon-right-padding: #{functions.pxToRem(12)};\n                --list-right-padding: #{functions.pxToRem(12)};\n                right: 0;\n                width: calc(\n                    100% - var(--icon-width) - var(--icon-right-padding) - var(\n                            --list-right-padding\n                        )\n                );\n\n                &.x-small {\n                    --icon-width: #{functions.pxToRem(24)};\n                }\n\n                &.small {\n                    --icon-width: #{functions.pxToRem(32)};\n                }\n\n                &.medium {\n                    --icon-width: #{functions.pxToRem(40)};\n                }\n\n                &.large {\n                    --icon-width: #{functions.pxToRem(48)};\n                }\n            }\n        }\n\n        .mdc-deprecated-list-item:last-child hr.mdc-deprecated-list-divider {\n            display: none;\n        }\n    }\n\n    &.mdc-deprecated-list--two-line {\n        .mdc-deprecated-list-item__text {\n            padding-top: functions.pxToRem(8);\n            padding-bottom: functions.pxToRem(8);\n        }\n    }\n\n    .mdc-deprecated-list-item__secondary-text,\n    .mdc-deprecated-list-item__primary-text,\n    .mdc-deprecated-list-item__command-text {\n        margin: 0;\n        &:before,\n        &:after {\n            display: none;\n        }\n    }\n\n    .mdc-deprecated-list-item__command-text {\n        color: rgb(var(--contrast-800));\n        margin-left: 0.7rem;\n    }\n\n    .mdc-deprecated-list-item__text {\n        align-self: center;\n        width: 100%;\n    }\n\n    .mdc-deprecated-list-item__primary-command-text {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: baseline;\n    }\n\n    // Tweaks to display the icon correctly in Edge\n    limel-icon.mdc-deprecated-list-item__graphic {\n        display: block;\n    }\n}\n\n.mdc-deprecated-list:not(.mdc-deprecated-list--avatar-list) {\n    limel-icon.mdc-deprecated-list-item__graphic {\n        // Tweaks to make icon lists align nicely with badge-icon lists.\n        &[size='x-small'] {\n            margin-right: 0;\n        }\n        &[size='small'] {\n            margin-right: 0;\n        }\n        &[size='medium'] {\n            margin-right: 0.25rem;\n        }\n        &[size='large'] {\n            margin-right: 0.5rem;\n        }\n    }\n}\n\n.mdc-deprecated-list-item.mdc-deprecated-list-item--selected {\n    &:before {\n        background-color: var(--mdc-theme-primary);\n        opacity: 0.15;\n    }\n}\n\n:not(.mdc-deprecated-list--non-interactive) {\n    > {\n        :not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item {\n            @include mixins.visualize-keyboard-focus;\n\n            &:focus-visible {\n                border-radius: $list-border-radius;\n                z-index: $list--has-interactive-items--mdc-list-item--hover;\n            }\n        }\n    }\n}\n\nimg {\n    flex-shrink: 0;\n    object-fit: cover;\n\n    border-radius: 50%;\n    width: 2rem;\n    height: 2rem;\n    box-shadow: 0 0 0 1px rgb(var(--contrast-800), 0.5);\n}\n\n.mdc-deprecated-list-item {\n    &:has(img) {\n        limel-icon {\n            position: absolute;\n            top: 0.125rem;\n            left: 0.125rem;\n            padding: 0.1875rem; // 3px\n            background-color: rgb(var(--contrast-200), 0.8);\n\n            &[badge] {\n                top: 0;\n                padding: 0;\n                scale: 0.6;\n            }\n        }\n    }\n}\n\n@import '../checkbox/checkbox.scss';\n\n@import './radio-button/radio-button.scss';\n\n@import './partial-styles/custom-styles.scss';\n@import './partial-styles/enable-multiline-text.scss';\n@import './partial-styles/_has-grid-layout.scss';\n@import './partial-styles/_static-actions.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown","filePath":"./src/components/markdown/markdown.tsx","fileName":"markdown.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/markdown/usage","tag":"limel-markdown","overview":"The Markdown component receives markdown syntax\nand renders it as HTML.","usage":{},"docs":"The Markdown component receives markdown syntax\nand renders it as HTML.","docsTags":[{"name":"exampleComponent","text":"limel-example-markdown-headings"},{"name":"exampleComponent","text":"limel-example-markdown-emphasis"},{"name":"exampleComponent","text":"limel-example-markdown-lists"},{"name":"exampleComponent","text":"limel-example-markdown-links"},{"name":"exampleComponent","text":"limel-example-markdown-images"},{"name":"exampleComponent","text":"limel-example-markdown-code"},{"name":"exampleComponent","text":"limel-example-markdown-footnotes"},{"name":"exampleComponent","text":"limel-example-markdown-tables"},{"name":"exampleComponent","text":"limel-example-markdown-html"},{"name":"exampleComponent","text":"limel-example-markdown-keys"},{"name":"exampleComponent","text":"limel-example-markdown-blockquotes"},{"name":"exampleComponent","text":"limel-example-markdown-horizontal-rule"},{"name":"exampleComponent","text":"limel-example-markdown-composite"},{"name":"exampleComponent","text":"limel-example-markdown-custom-component"}],"encapsulation":"shadow","dependents":["limel-card","limel-example-do-do-not","limel-example-markdown-blockquotes","limel-example-markdown-code","limel-example-markdown-composite","limel-example-markdown-custom-component","limel-example-markdown-emphasis","limel-example-markdown-footnotes","limel-example-markdown-headings","limel-example-markdown-horizontal-rule","limel-example-markdown-html","limel-example-markdown-images","limel-example-markdown-keys","limel-example-markdown-links","limel-example-markdown-lists","limel-example-markdown-tables","limel-example-popover-trigger-interaction","limel-help-content","limel-text-editor"],"dependencies":[],"dependencyGraph":{"limel-card":["limel-markdown"],"limel-example-do-do-not":["limel-markdown"],"limel-example-markdown-blockquotes":["limel-markdown"],"limel-example-markdown-code":["limel-markdown"],"limel-example-markdown-composite":["limel-markdown"],"limel-example-markdown-custom-component":["limel-markdown"],"limel-example-markdown-emphasis":["limel-markdown"],"limel-example-markdown-footnotes":["limel-markdown"],"limel-example-markdown-headings":["limel-markdown"],"limel-example-markdown-horizontal-rule":["limel-markdown"],"limel-example-markdown-html":["limel-markdown"],"limel-example-markdown-images":["limel-markdown"],"limel-example-markdown-keys":["limel-markdown"],"limel-example-markdown-links":["limel-markdown"],"limel-example-markdown-lists":["limel-markdown"],"limel-example-markdown-tables":["limel-markdown"],"limel-example-popover-trigger-interaction":["limel-markdown"],"limel-help-content":["limel-markdown"],"limel-text-editor":["limel-markdown"]},"props":[{"name":"lazyLoadImages","type":"boolean","mutable":false,"attr":"lazy-load-images","reflectToAttr":false,"docs":"Enable lazy loading for images","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The input text. Treated as GitHub Flavored Markdown, with the addition\nthat any included HTML will be parsed and rendered as HTML, rather than\nas text.","docsTags":[],"default":"''","values":[{"type":"string"}],"optional":false,"required":false},{"name":"whitelist","type":"CustomElementDefinition[]","mutable":false,"reflectToAttr":false,"docs":"Whitelisted html elements.\n\nAny custom element added here will not be sanitized and thus rendered.\nCan also be set via `limel-config`. Setting this property will override\nthe global config.","docsTags":[{"name":"alpha"}],"default":"globalConfig.markdownWhitelist","values":[{"type":"CustomElementDefinition[]"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--markdown-hyperlink-color","annotation":"prop","docs":"color of text for hyperlinks. Defaults to `--color-blue-dark`;"},{"name":"--markdown-hyperlink-color--hovered","annotation":"prop","docs":"color of text for hyperlinks when hovered. Defaults to `--color-blue-default`;"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"markdown.tsx","type":"tsx","source":"import { Component, h, Prop, Watch } from '@stencil/core';\nimport { markdownToHTML } from './markdown-parser';\nimport { globalConfig } from '../../global/config';\nimport { CustomElementDefinition } from '../../global/shared-types/custom-element.types';\nimport { ImageIntersectionObserver } from './image-intersection-observer';\n\n/**\n * The Markdown component receives markdown syntax\n * and renders it as HTML.\n *\n * @exampleComponent limel-example-markdown-headings\n * @exampleComponent limel-example-markdown-emphasis\n * @exampleComponent limel-example-markdown-lists\n * @exampleComponent limel-example-markdown-links\n * @exampleComponent limel-example-markdown-images\n * @exampleComponent limel-example-markdown-code\n * @exampleComponent limel-example-markdown-footnotes\n * @exampleComponent limel-example-markdown-tables\n * @exampleComponent limel-example-markdown-html\n * @exampleComponent limel-example-markdown-keys\n * @exampleComponent limel-example-markdown-blockquotes\n * @exampleComponent limel-example-markdown-horizontal-rule\n * @exampleComponent limel-example-markdown-composite\n * @exampleComponent limel-example-markdown-custom-component\n */\n@Component({\n    tag: 'limel-markdown',\n    styleUrl: 'markdown.scss',\n    shadow: true,\n})\nexport class Markdown {\n    /**\n     * The input text. Treated as GitHub Flavored Markdown, with the addition\n     * that any included HTML will be parsed and rendered as HTML, rather than\n     * as text.\n     */\n    @Prop()\n    public value: string = '';\n\n    /**\n     * Whitelisted html elements.\n     *\n     * Any custom element added here will not be sanitized and thus rendered.\n     * Can also be set via `limel-config`. Setting this property will override\n     * the global config.\n     * @alpha\n     */\n    @Prop()\n    public whitelist?: CustomElementDefinition[] =\n        globalConfig.markdownWhitelist;\n\n    /**\n     * Enable lazy loading for images\n     */\n    @Prop()\n    public lazyLoadImages = false;\n\n    @Watch('value')\n    public async textChanged() {\n        try {\n            this.cleanupImageIntersectionObserver();\n\n            const html = await markdownToHTML(this.value, {\n                forceHardLineBreaks: true,\n                whitelist: this.whitelist ?? [],\n                lazyLoadImages: this.lazyLoadImages,\n            });\n\n            this.rootElement.innerHTML = html;\n\n            this.setupImageIntersectionObserver();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    private rootElement: HTMLDivElement;\n    private imageIntersectionObserver: ImageIntersectionObserver | null = null;\n\n    public async componentDidLoad() {\n        this.textChanged();\n    }\n\n    public disconnectedCallback() {\n        this.cleanupImageIntersectionObserver();\n    }\n\n    public render() {\n        return [\n            <div\n                id=\"markdown\"\n                ref={(el) => (this.rootElement = el as HTMLDivElement)}\n            />,\n        ];\n    }\n\n    private setupImageIntersectionObserver() {\n        if (this.lazyLoadImages) {\n            this.imageIntersectionObserver = new ImageIntersectionObserver(\n                this.rootElement\n            );\n        }\n    }\n\n    private cleanupImageIntersectionObserver() {\n        if (this.imageIntersectionObserver) {\n            this.imageIntersectionObserver.disconnect();\n            this.imageIntersectionObserver = null;\n        }\n    }\n}\n"},{"filename":"markdown.scss","type":"scss","source":"/**\n* @prop --markdown-hyperlink-color: color of text for hyperlinks. Defaults to `--color-blue-dark`;\n* @prop --markdown-hyperlink-color--hovered: color of text for hyperlinks when hovered. Defaults to `--color-blue-default`;\n*/\n\n@forward './partial-styles/pre-code';\n@forward './partial-styles/headings';\n@forward './partial-styles/body-text';\n@forward './partial-styles/lists';\n@forward './partial-styles/tables';\n@forward './partial-styles/blockquotes';\n@forward './partial-styles/definition-lists';\n@forward './partial-styles/img';\n@forward './partial-styles/kbd';\n@forward './partial-styles/_adjust-for-table-cell';\n\n*,\n*::before,\n*::after {\n    box-sizing: border-box;\n\n    & :where(:not(img, video, svg, canvas, iframe)) {\n        min-width: 0;\n        min-height: 0;\n    }\n}\n\n// body-text\nhr {\n    border-top: 1px solid rgb(var(--contrast-700));\n}\n\n.MsoNormal {\n    margin: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu","filePath":"./src/components/menu/menu.tsx","fileName":"menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu/usage","tag":"limel-menu","overview":"","usage":{},"docs":"","docsTags":[{"name":"slot","text":"trigger - Element to use as a trigger for the menu."},{"name":"exampleComponent","text":"limel-example-menu-basic"},{"name":"exampleComponent","text":"limel-example-menu-disabled"},{"name":"exampleComponent","text":"limel-example-menu-open-direction"},{"name":"exampleComponent","text":"limel-example-menu-surface-width"},{"name":"exampleComponent","text":"limel-example-menu-separators"},{"name":"exampleComponent","text":"limel-example-menu-icons"},{"name":"exampleComponent","text":"limel-example-menu-badge-icons"},{"name":"exampleComponent","text":"limel-example-menu-grid"},{"name":"exampleComponent","text":"limel-example-menu-hotkeys"},{"name":"exampleComponent","text":"limel-example-menu-secondary-text"},{"name":"exampleComponent","text":"limel-example-menu-notification"},{"name":"exampleComponent","text":"limel-example-menu-sub-menus"},{"name":"exampleComponent","text":"limel-example-menu-sub-menu-lazy-loading"},{"name":"exampleComponent","text":"limel-example-menu-sub-menu-lazy-loading-infinite"},{"name":"exampleComponent","text":"limel-example-menu-searchable"},{"name":"exampleComponent","text":"limel-example-menu-composite"}],"encapsulation":"shadow","dependents":["limel-action-bar-overflow-menu","limel-chip","limel-example-header-menu","limel-example-menu-badge-icons","limel-example-menu-basic","limel-example-menu-composite","limel-example-menu-disabled","limel-example-menu-grid","limel-example-menu-hotkeys","limel-example-menu-icons","limel-example-menu-notification","limel-example-menu-open-direction","limel-example-menu-open-sub-menu-programmatically","limel-example-menu-searchable","limel-example-menu-secondary-text","limel-example-menu-separators","limel-example-menu-sub-menu-lazy-loading","limel-example-menu-sub-menu-lazy-loading-infinite","limel-example-menu-sub-menus","limel-example-menu-surface-width","limel-file-viewer","limel-split-button"],"dependencies":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"dependencyGraph":{"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-action-bar-overflow-menu":["limel-menu"],"limel-chip":["limel-menu"],"limel-example-header-menu":["limel-menu"],"limel-example-menu-badge-icons":["limel-menu"],"limel-example-menu-basic":["limel-menu"],"limel-example-menu-composite":["limel-menu"],"limel-example-menu-disabled":["limel-menu"],"limel-example-menu-grid":["limel-menu"],"limel-example-menu-hotkeys":["limel-menu"],"limel-example-menu-icons":["limel-menu"],"limel-example-menu-notification":["limel-menu"],"limel-example-menu-open-direction":["limel-menu"],"limel-example-menu-open-sub-menu-programmatically":["limel-menu"],"limel-example-menu-searchable":["limel-menu"],"limel-example-menu-secondary-text":["limel-menu"],"limel-example-menu-separators":["limel-menu"],"limel-example-menu-sub-menu-lazy-loading":["limel-menu"],"limel-example-menu-sub-menu-lazy-loading-infinite":["limel-menu"],"limel-example-menu-sub-menus":["limel-menu"],"limel-example-menu-surface-width":["limel-menu"],"limel-file-viewer":["limel-menu"],"limel-split-button":["limel-menu"]},"props":[{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":true,"docs":"Defines whether the menu should show badges.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Sets the disabled state of the menu.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"emptyResultMessage","type":"string","mutable":false,"attr":"empty-result-message","reflectToAttr":false,"docs":"Message to display when search returns 0 results.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"gridLayout","type":"boolean","mutable":false,"attr":"grid-layout","reflectToAttr":true,"docs":"Renders list items in a grid layout, rather than a vertical list","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"items","type":"(ListSeparator | MenuItem<any>)[]","mutable":false,"reflectToAttr":false,"docs":"A list of items and separators to show in the menu.","docsTags":[],"default":"[]","values":[{"type":"(ListSeparator"},{"type":"MenuItem<any>)[]"}],"optional":false,"required":false},{"name":"open","type":"boolean","mutable":true,"attr":"open","reflectToAttr":true,"docs":"Sets the open state of the menu.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Decides the menu's location in relation to its trigger","docsTags":[],"default":"'bottom-start'","values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false},{"name":"rootItem","type":"BreadcrumbsItem","mutable":false,"reflectToAttr":false,"docs":"A root breadcrumb item to show above the menu items.\nClicking it navigates back from a sub-menu to the root menu.","docsTags":[],"default":"DEFAULT_ROOT_BREADCRUMBS_ITEM","values":[{"type":"BreadcrumbsItem"}],"optional":false,"required":false},{"name":"searcher","type":"(query: string) => Promise<(ListSeparator | MenuItem<any>)[]>","mutable":false,"reflectToAttr":false,"docs":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `MenuItem`:s.\n\nSee the docs for the type `MenuSearcher` for type information on\nthe searcher function itself.","docsTags":[],"values":[{"type":"(query: string) => Promise<(ListSeparator"},{"type":"MenuItem<any>)[]>"}],"optional":false,"required":false},{"name":"surfaceWidth","type":"\"inherit-from-items\" | \"inherit-from-menu\" | \"inherit-from-trigger\"","mutable":false,"attr":"surface-width","reflectToAttr":true,"docs":"Decides the width of menu's dropdown","docsTags":[],"default":"'inherit-from-items'","values":[{"value":"inherit-from-items","type":"string"},{"value":"inherit-from-menu","type":"string"},{"value":"inherit-from-trigger","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Is emitted when the menu is cancelled.","docsTags":[]},{"event":"navigateMenu","detail":"MenuItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Is emitted when a menu item with a sub-menu is selected.","docsTags":[]},{"event":"select","detail":"MenuItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Is emitted when a menu item is selected.","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"`z-index` of the dropdown menu."},{"name":"--list-grid-gap","annotation":"prop","docs":"Distance between the items in the menu list when `gridLayout={true}`. Defaults to `0.75rem`."},{"name":"--list-grid-item-max-width","annotation":"prop","docs":"Maximum width of items in the menu list when `gridLayout={true}`. Defaults to `10rem`."},{"name":"--list-grid-item-min-width","annotation":"prop","docs":"Minimum width of items in the menu list when `gridLayout={true}`. Defaults to `7.5rem`."},{"name":"--menu-surface-width","annotation":"prop","docs":"Width of the menu surface. Overrides the width defined by `surfaceWidth`."},{"name":"--notification-badge-background-color","annotation":"prop","docs":"Defines the background color of notification badges. Defaults to `--color-red-default`."},{"name":"--notification-badge-text-color","annotation":"prop","docs":"Defines the text color of notification badges. Defaults to `--color-white`."}],"slots":[{"name":"trigger","docs":"Element to use as a trigger for the menu."}],"parts":[],"listeners":[],"sources":[{"filename":"menu.tsx","type":"tsx","source":"import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Element,\n    Watch,\n    State,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { zipObject, isFunction } from 'lodash-es';\nimport {\n    LimelBreadcrumbsCustomEvent,\n    LimelInputFieldCustomEvent,\n} from '../../components';\n\nimport { BreadcrumbsItem } from '../breadcrumbs/breadcrumbs.types';\nimport { ListSeparator } from '../list/list-item.types';\nimport {\n    OpenDirection,\n    MenuItem,\n    MenuLoader,\n    SurfaceWidth,\n    MenuSearcher,\n} from './menu.types';\n\nimport {\n    ARROW_DOWN,\n    ARROW_LEFT,\n    ARROW_RIGHT,\n    ARROW_UP,\n    TAB,\n} from '../../util/keycodes';\n\ninterface MenuCrumbItem extends BreadcrumbsItem {\n    menuItem?: MenuItem;\n}\n\nconst DEFAULT_ROOT_BREADCRUMBS_ITEM: BreadcrumbsItem = {\n    text: '',\n    icon: {\n        name: 'home',\n    },\n    type: 'icon-only',\n};\n\n/**\n * @slot trigger - Element to use as a trigger for the menu.\n * @exampleComponent limel-example-menu-basic\n * @exampleComponent limel-example-menu-disabled\n * @exampleComponent limel-example-menu-open-direction\n * @exampleComponent limel-example-menu-surface-width\n * @exampleComponent limel-example-menu-separators\n * @exampleComponent limel-example-menu-icons\n * @exampleComponent limel-example-menu-badge-icons\n * @exampleComponent limel-example-menu-grid\n * @exampleComponent limel-example-menu-hotkeys\n * @exampleComponent limel-example-menu-secondary-text\n * @exampleComponent limel-example-menu-notification\n * @exampleComponent limel-example-menu-sub-menus\n * @exampleComponent limel-example-menu-sub-menu-lazy-loading\n * @exampleComponent limel-example-menu-sub-menu-lazy-loading-infinite\n * @exampleComponent limel-example-menu-searchable\n * @exampleComponent limel-example-menu-composite\n */\n@Component({\n    tag: 'limel-menu',\n    shadow: true,\n    styleUrl: 'menu.scss',\n})\nexport class Menu {\n    /**\n     * A list of items and separators to show in the menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Sets the disabled state of the menu.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Decides the menu's location in relation to its trigger\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom-start';\n\n    /**\n     * Decides the width of menu's dropdown\n     */\n    @Prop({ reflect: true })\n    public surfaceWidth: SurfaceWidth = 'inherit-from-items';\n\n    /**\n     * Sets the open state of the menu.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines whether the menu should show badges.\n     */\n    @Prop({ reflect: true })\n    public badgeIcons = false;\n\n    /**\n     * Renders list items in a grid layout, rather than a vertical list\n     */\n    @Prop({ reflect: true })\n    public gridLayout = false;\n\n    /**\n     * :::warning Internal Use Only\n     * This property is for internal use only. We need it for now, but want to\n     * find a better implementation of the functionality it currently enables.\n     * If and when we do so, this property will be removed without prior\n     * notice. If you use it, your code _will_ break in the future.\n     * :::\n     *\n     * @internal\n     */\n    @Prop({ reflect: true })\n    public loading = false;\n\n    /**\n     * :::warning Internal Use Only\n     * This property is for internal use only. We need it for now, but want to\n     * find a better implementation of the functionality it currently enables.\n     * If and when we do so, this property will be removed without prior\n     * notice. If you use it, your code _will_ break in the future.\n     * :::\n     *\n     * @internal\n     */\n    @Prop({ mutable: true })\n    public currentSubMenu: MenuItem;\n\n    /**\n     * A root breadcrumb item to show above the menu items.\n     * Clicking it navigates back from a sub-menu to the root menu.\n     */\n    @Prop()\n    public rootItem: BreadcrumbsItem = DEFAULT_ROOT_BREADCRUMBS_ITEM;\n\n    /**\n     * Is emitted when the menu is cancelled.\n     */\n    @Event()\n    public cancel: EventEmitter<void>;\n\n    /**\n     * Is emitted when a menu item is selected.\n     */\n    @Event()\n    public select: EventEmitter<MenuItem>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `MenuItem`:s.\n     *\n     * See the docs for the type `MenuSearcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher: MenuSearcher;\n\n    /**\n     * Message to display when search returns 0 results.\n     */\n    @Prop()\n    public emptyResultMessage?: string;\n\n    /**\n     * Is emitted when a menu item with a sub-menu is selected.\n     */\n    @Event()\n    public navigateMenu: EventEmitter<MenuItem | null>;\n\n    @Element()\n    private host: HTMLLimelMenuElement;\n\n    @State()\n    private loadingSubItems: boolean;\n\n    @State()\n    private searchValue: string;\n\n    @State()\n    private searchResults: Array<MenuItem | ListSeparator> | null;\n\n    private list: HTMLLimelMenuListElement;\n    private searchInput: HTMLLimelInputFieldElement;\n    private portalId: string;\n    private triggerElement: HTMLSlotElement;\n    private selectedMenuItem?: MenuItem;\n\n    constructor() {\n        this.portalId = createRandomString();\n    }\n\n    public componentDidRender() {\n        const slotElement = this.host.shadowRoot.querySelector('slot');\n        // eslint-disable-next-line unicorn/no-array-for-each\n        slotElement.assignedElements().forEach(this.setTriggerAttributes);\n    }\n\n    public render() {\n        const cssProperties = this.getCssProperties();\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        const menuSurfaceWidth = this.getMenuSurfaceWidth(\n            cssProperties['--menu-surface-width']\n        );\n\n        return (\n            <div class=\"mdc-menu-surface--anchor\" onClick={this.onTriggerClick}>\n                <slot ref={this.setTriggerRef} name=\"trigger\" />\n                {this.renderNotificationBadge()}\n                <limel-portal\n                    visible={this.open}\n                    containerId={this.portalId}\n                    openDirection={this.openDirection}\n                    position=\"absolute\"\n                    containerStyle={{ 'z-index': dropdownZIndex }}\n                >\n                    <limel-menu-surface\n                        open={this.open}\n                        onDismiss={this.onClose}\n                        style={{\n                            ...cssProperties,\n                            '--menu-surface-width': menuSurfaceWidth,\n                            '--limel-menu-surface-display': 'flex',\n                            '--limel-menu-surface-flex-direction': 'column',\n                        }}\n                        class={{\n                            'has-grid-layout': this.gridLayout,\n                        }}\n                    >\n                        {this.renderSearchField()}\n                        {this.renderBreadcrumb()}\n                        {this.renderLoader()}\n                        {this.renderEmptyMessage()}\n                        {this.renderMenuList()}\n                    </limel-menu-surface>\n                </limel-portal>\n            </div>\n        );\n    }\n\n    @Watch('items')\n    protected itemsWatcher() {\n        this.clearSearch();\n        this.setFocus();\n    }\n\n    @Watch('open')\n    protected openWatcher(newValue: boolean) {\n        const opened = newValue;\n        if (opened) {\n            this.setFocus();\n        } else {\n            this.clearSearch();\n        }\n    }\n\n    private getBreadcrumbsItems() {\n        const breadCrumbItems: MenuCrumbItem[] = [];\n        let currentItem = this.currentSubMenu;\n        while (currentItem) {\n            breadCrumbItems.push({\n                text: currentItem.text,\n                icon: currentItem.icon,\n                menuItem: currentItem,\n            });\n            currentItem = currentItem.parentItem;\n        }\n\n        if (\n            breadCrumbItems.length > 0 ||\n            this.rootItem !== DEFAULT_ROOT_BREADCRUMBS_ITEM\n        ) {\n            breadCrumbItems.push(this.rootItem);\n        }\n\n        return breadCrumbItems.reverse();\n    }\n\n    private renderLoader = () => {\n        if (!this.loadingSubItems && !this.loading) {\n            return;\n        }\n\n        const cssProperties = this.getCssProperties();\n\n        return (\n            <div\n                style={{\n                    width: cssProperties['--menu-surface-width'],\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '0.5rem 0',\n                }}\n            >\n                <limel-spinner size=\"mini\" limeBranded={false} />\n            </div>\n        );\n    };\n\n    private renderBreadcrumb = () => {\n        const breadcrumbsItems = this.getBreadcrumbsItems();\n        if (breadcrumbsItems.length === 0) {\n            return;\n        }\n\n        return (\n            <limel-breadcrumbs\n                style={{\n                    'border-bottom': 'solid 1px rgb(var(--contrast-500))',\n                    'flex-shrink': '0',\n                }}\n                onSelect={this.handleBreadcrumbsSelect}\n                items={breadcrumbsItems}\n            />\n        );\n    };\n\n    private handleBreadcrumbsSelect = (\n        event: LimelBreadcrumbsCustomEvent<MenuCrumbItem>\n    ) => {\n        if (!event.detail.menuItem) {\n            this.currentSubMenu = null;\n            this.clearSearch();\n            this.navigateMenu.emit(null);\n\n            this.setFocus();\n\n            return;\n        }\n\n        this.handleSelect(event.detail.menuItem);\n    };\n\n    private renderSearchField = () => {\n        if (!this.searcher) {\n            return;\n        }\n\n        return (\n            <limel-input-field\n                tabindex=\"0\"\n                ref={this.setSearchElement}\n                type=\"search\"\n                leadingIcon=\"search\"\n                style={{\n                    padding: '0.25rem',\n                    'box-sizing': 'border-box',\n                }}\n                value={this.searchValue}\n                onChange={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n            />\n        );\n    };\n\n    private renderEmptyMessage = () => {\n        if (\n            this.loading ||\n            this.loadingSubItems ||\n            !this.emptyResultMessage ||\n            !Array.isArray(this.searchResults) ||\n            this.searchResults?.length\n        ) {\n            return null;\n        }\n\n        return (\n            <p\n                style={{\n                    padding: '0 1rem',\n                    'text-align': 'center',\n                }}\n            >\n                {this.emptyResultMessage}\n            </p>\n        );\n    };\n\n    private renderMenuList = () => {\n        let items = this.visibleItems;\n\n        if (this.loadingSubItems || this.loading) {\n            items = [];\n        }\n\n        return (\n            <limel-menu-list\n                style={{\n                    'overflow-y': 'auto',\n                    'flex-grow': '1',\n                }}\n                class={{\n                    'has-grid-layout has-interactive-items': this.gridLayout,\n                }}\n                items={items}\n                badgeIcons={this.badgeIcons}\n                onSelect={this.onSelect}\n                ref={this.setListElement}\n                onKeyDown={this.handleMenuKeyDown}\n            />\n        );\n    };\n\n    private handleTextInput = async (\n        event: LimelInputFieldCustomEvent<string>\n    ) => {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.searchValue = query;\n        if (query === '') {\n            this.searchResults = null;\n            this.loadingSubItems = false;\n\n            return;\n        }\n\n        this.loadingSubItems = true;\n\n        const result = await this.searcher(query);\n\n        if (this.searchValue !== query) {\n            return;\n        }\n\n        this.searchResults = result;\n        this.loadingSubItems = false;\n    };\n\n    // Key handler for the input search field\n    // Will change focus to the first/last item in the dropdown\n    // list to enable selection with the keyboard\n    private handleInputKeyDown = (event: KeyboardEvent) => {\n        const isForwardTab =\n            event.key === TAB &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp = event.key === ARROW_UP;\n        const isDown = event.key === ARROW_DOWN;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        if (!this.list) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listItems =\n                this.list.shadowRoot.querySelectorAll<HTMLElement>(\n                    '.mdc-deprecated-list-item'\n                );\n            const listElement = listItems[0];\n            listElement?.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listItems =\n                this.list.shadowRoot.querySelectorAll<HTMLElement>(\n                    '.mdc-deprecated-list-item'\n                );\n            const listElement = [...listItems].at(-1);\n            listElement?.focus();\n        }\n    };\n\n    // Key handler for the menu list\n    // Will change focus to the search field if using shift+tab\n    // And can go forward/back with righ/left arrow keys\n    private handleMenuKeyDown = (event: KeyboardEvent) => {\n        const isBackwardTab =\n            event.key === TAB &&\n            !event.altKey &&\n            !event.metaKey &&\n            event.shiftKey;\n\n        const isLeft = event.key === ARROW_LEFT;\n\n        const isRight = event.key === ARROW_RIGHT;\n\n        if (!isBackwardTab && !isLeft && !isRight) {\n            return;\n        }\n\n        if (isBackwardTab) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.searchInput?.focus();\n        } else if (!this.gridLayout) {\n            const currentItem = this.getCurrentItem();\n\n            event.stopPropagation();\n            event.preventDefault();\n            if (isRight) {\n                this.goForward(currentItem);\n            } else if (isLeft) {\n                this.goBack();\n            }\n        }\n    };\n\n    private clearSearch = () => {\n        this.searchValue = '';\n        this.searchResults = null;\n        this.loadingSubItems = false;\n    };\n\n    private getCurrentItem = (): MenuItem => {\n        const activeItem = this.list?.shadowRoot?.querySelector(\n            '[role=\"menuitem\"][tabindex=\"0\"]'\n        );\n        const attrIndex = activeItem?.attributes?.getNamedItem('data-index');\n        const dataIndex = Number.parseInt(attrIndex?.value || '0', 10);\n\n        return this.visibleItems[dataIndex] as MenuItem;\n    };\n\n    private goForward = (currentItem: MenuItem) => {\n        this.handleSelect(currentItem, false);\n    };\n\n    private goBack = () => {\n        if (!this.currentSubMenu) {\n            // Already in the root of the menu\n            return;\n        }\n\n        const parent = this.currentSubMenu.parentItem;\n        if (!parent) {\n            // If only one step down, go to the root of the menu.\n            // No need to load a sub-menu.\n            this.currentSubMenu = null;\n            this.clearSearch();\n            this.navigateMenu.emit(null);\n\n            this.setFocus();\n\n            return;\n        }\n\n        this.handleSelect(parent);\n    };\n\n    private setTriggerAttributes = (element: HTMLElement) => {\n        const attributes = {\n            'aria-haspopup': true,\n            'aria-expanded': this.open,\n            'aria-controls': this.portalId,\n            disabled: this.disabled,\n            role: 'button',\n        };\n\n        for (const [key, value] of Object.entries(attributes)) {\n            if (value) {\n                element.setAttribute(key, String(value));\n            } else {\n                element.removeAttribute(key);\n            }\n        }\n    };\n\n    private onClose = () => {\n        this.cancel.emit();\n        this.open = false;\n        this.currentSubMenu = null;\n    };\n\n    private onTriggerClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n\n        this.open = !this.open;\n    };\n\n    private handleSelect = async (\n        menuItem: MenuItem,\n        selectOnEmptyChildren: boolean = true\n    ) => {\n        if (Array.isArray(menuItem?.items) && menuItem.items.length > 0) {\n            this.selectedMenuItem = menuItem;\n            this.clearSearch();\n            this.currentSubMenu = menuItem;\n            this.navigateMenu.emit(menuItem);\n\n            this.setFocus();\n\n            return;\n        } else if (isFunction(menuItem?.items)) {\n            const menuLoader = menuItem.items as MenuLoader;\n            this.selectedMenuItem = menuItem;\n            this.loadingSubItems = true;\n            const subItems = await menuLoader(menuItem);\n\n            if (this.selectedMenuItem !== menuItem) {\n                return;\n            }\n\n            menuItem.items = subItems;\n            this.loadingSubItems = false;\n\n            if (subItems?.length) {\n                this.currentSubMenu = menuItem;\n                this.clearSearch();\n                this.navigateMenu.emit(menuItem);\n\n                this.setFocus();\n\n                return;\n            }\n        }\n\n        if (!selectOnEmptyChildren) {\n            return;\n        }\n\n        this.selectedMenuItem = menuItem;\n        this.loadingSubItems = false;\n\n        this.select.emit(menuItem);\n        this.open = false;\n        this.currentSubMenu = null;\n        this.setFocus();\n    };\n\n    private onSelect = (event: CustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        this.handleSelect(event.detail);\n    };\n\n    private getCssProperties() {\n        const propertyNames = [\n            '--menu-surface-width',\n            '--list-grid-item-max-width',\n            '--list-grid-item-min-width',\n            '--list-grid-gap',\n            '--notification-badge-background-color',\n            '--notification-badge-text-color',\n        ] as const;\n        const style = getComputedStyle(this.host);\n        const values = propertyNames.map((property) => {\n            return style.getPropertyValue(property);\n        });\n\n        type PropName = (typeof propertyNames)[number];\n\n        return zipObject(propertyNames, values) as Record<PropName, string>;\n    }\n\n    private setListElement = (element: HTMLLimelMenuListElement) => {\n        this.list = element;\n    };\n\n    private setFocus = () => {\n        setTimeout(() => {\n            if (this.searchInput && this.searcher) {\n                const observer = new IntersectionObserver(() => {\n                    observer.unobserve(this.searchInput);\n                    if (this.searchInput === window.document.activeElement) {\n                        return;\n                    }\n\n                    this.searchInput.focus();\n                });\n                observer.observe(this.searchInput);\n            } else if (this.list) {\n                const observer = new IntersectionObserver(() => {\n                    observer.unobserve(this.list);\n                    this.focusMenuItem();\n                });\n                observer.observe(this.list);\n            }\n        }, 0);\n    };\n\n    private setSearchElement = (element: HTMLLimelInputFieldElement) => {\n        this.searchInput = element;\n    };\n\n    private focusMenuItem = () => {\n        if (!this.list) {\n            return;\n        }\n\n        const activeElement = this.list.shadowRoot.activeElement as HTMLElement;\n        activeElement?.blur();\n\n        const menuItems = this.visibleItems.filter(this.isMenuItem);\n        const selectedIndex = Math.max(\n            menuItems.findIndex((item) => item.selected),\n            0\n        );\n        const menuElements: HTMLElement[] = [\n            ...this.list.shadowRoot.querySelectorAll('[role=\"menuitem\"]'),\n        ] as HTMLElement[];\n        menuElements[selectedIndex]?.focus();\n    };\n\n    private isMenuItem(item: MenuItem | ListSeparator): item is MenuItem {\n        return !('separator' in item);\n    }\n\n    private renderNotificationBadge = () => {\n        if (this.items.some(this.hasNotificationBadge)) {\n            return <limel-badge />;\n        }\n    };\n\n    private hasNotificationBadge = (item: MenuItem | ListSeparator) =>\n        this.isMenuItem(item) && item.badge !== undefined;\n\n    private setTriggerRef = (elm?: HTMLSlotElement) => {\n        this.triggerElement = elm;\n    };\n\n    private getMenuSurfaceWidth(customWidth: string): string {\n        if (customWidth) {\n            return customWidth;\n        }\n\n        if (this.surfaceWidth === 'inherit-from-trigger') {\n            const assignedTriggers = this.triggerElement?.assignedElements();\n\n            if (\n                !assignedTriggers?.length ||\n                !assignedTriggers[0]?.clientWidth\n            ) {\n                return '';\n            }\n\n            return `${assignedTriggers[0].clientWidth}px`;\n        } else if (this.surfaceWidth === 'inherit-from-menu') {\n            if (!this.host?.clientWidth) {\n                return '';\n            }\n\n            return `${this.host?.clientWidth}px`;\n        }\n\n        return '';\n    }\n\n    private get visibleItems(): Array<MenuItem | ListSeparator> {\n        if (Array.isArray(this.searchResults) && this.searchValue) {\n            return this.searchResults;\n        } else if (Array.isArray(this.currentSubMenu?.items)) {\n            return this.currentSubMenu.items.map((item) => ({\n                ...item,\n                parentItem: this.currentSubMenu,\n            }));\n        }\n\n        return this.items;\n    }\n}\n"},{"filename":"menu.scss","type":"scss","source":"@use '../../style/functions';\n\n// Note! The `--dropdown-z-index` property is used from `menu.tsx`.\n\n/**\n * @prop --dropdown-z-index: `z-index` of the dropdown menu.\n * @prop --menu-surface-width: Width of the menu surface. Overrides the width defined by `surfaceWidth`.\n * @prop --list-grid-item-max-width: Maximum width of items in the menu list when `gridLayout={true}`. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in the menu list when `gridLayout={true}`. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between the items in the menu list when `gridLayout={true}`. Defaults to `0.75rem`.\n * @prop --notification-badge-text-color: Defines the text color of notification badges. Defaults to `--color-white`.\n * @prop --notification-badge-background-color: Defines the background color of notification badges. Defaults to `--color-red-default`.\n */\n\n:host(limel-menu) {\n    isolation: isolate;\n    position: relative;\n    display: inline-block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n.menu__trigger {\n    border-color: transparent;\n    border-width: 1px;\n    border-style: solid;\n    background: none;\n    color: rgb(var(--contrast-800));\n    height: functions.pxToRem(36);\n\n    &-enabled {\n        &:hover {\n            border-color: rgb(var(--contrast-800));\n            color: rgb(var(--contrast-1100));\n        }\n    }\n}\n\n.mdc-menu-surface--anchor {\n    position: relative;\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.25rem;\n    right: -0.25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-list","filePath":"./src/components/menu-list/menu-list.tsx","fileName":"menu-list.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-list/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu-list/usage","tag":"limel-menu-list","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-example-text-editor-triggers","limel-menu"],"dependencies":[],"dependencyGraph":{"limel-example-text-editor-triggers":["limel-menu-list"],"limel-menu":["limel-menu-list"]},"props":[{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":false,"docs":"Set to `true` if the list should display larger icons with a background","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"iconSize","type":"\"large\" | \"medium\" | \"small\" | \"x-small\"","mutable":false,"attr":"icon-size","reflectToAttr":false,"docs":"Size of the icons in the list","docsTags":[],"default":"'small'","values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false},{"name":"items","type":"(ListSeparator | MenuItem<any>)[]","mutable":false,"reflectToAttr":false,"docs":"List of items to display","docsTags":[],"values":[{"type":"(ListSeparator"},{"type":"MenuItem<any>)[]"}],"optional":false,"required":false},{"name":"maxLinesSecondaryText","type":"number","mutable":false,"attr":"max-lines-secondary-text","reflectToAttr":false,"docs":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","docsTags":[],"default":"3","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"interact","detail":"MenuItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fires when a user interacts with an item in the list (e.g., click,\nkeyboard select).","docsTags":[]},{"event":"select","detail":"MenuItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the list.","docsTags":[]}],"styles":[{"name":"--checkbox-unchecked-border-color","annotation":"prop","docs":"Affects the border color of the default state of the checkbox (when it is not checked). Defaults to `--contrast-900`."},{"name":"--icon-background-color","annotation":"prop","docs":"Color to use for icon background when `badgeIcons=true`."},{"name":"--icon-color","annotation":"prop","docs":"Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`."},{"name":"--list-background-color-of-even-interactive-items","annotation":"prop","docs":"Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`."},{"name":"--list-background-color-of-odd-interactive-items","annotation":"prop","docs":"Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`."},{"name":"--list-grid-gap","annotation":"prop","docs":"Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`."},{"name":"--list-grid-item-max-width","annotation":"prop","docs":"Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`."},{"name":"--list-grid-item-min-width","annotation":"prop","docs":"Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`."},{"name":"--list-grid-max-width","annotation":"prop","docs":"Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`."},{"name":"--list-margin","annotation":"prop","docs":"Space around the list. Defaults to `0.25rem`, which visualizes keyboard-focused items in a better way, as it adds some space for the outline effect;"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"menu-list.tsx","type":"tsx","source":"import { IconSize } from '../icon/icon.types';\nimport { ListSeparator } from '../list/list-item.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { MDCMenu, MDCMenuItemEvent } from '@material/menu';\nimport { MDCRipple } from '@material/ripple';\nimport { strings as menuStrings } from '@material/menu/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { MenuListRenderer } from './menu-list-renderer';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\n\nconst { SELECTED_EVENT } = menuStrings;\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-menu-list',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'menu-list.scss',\n})\nexport class MenuList {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelMenuListElement;\n\n    private config: MenuListRendererConfig;\n    private MenuListRenderer = new MenuListRenderer();\n    private mdcMenu: MDCMenu;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     */\n    @Event()\n    private select: EventEmitter<MenuItem>;\n\n    /**\n     * Fires when a user interacts with an item in the list (e.g., click,\n     * keyboard select).\n     */\n    @Event()\n    interact: EventEmitter<MenuItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            iconSize: this.iconSize,\n        };\n\n        const html = this.MenuListRenderer.render(this.items, this.config);\n\n        return <div class=\"mdc-menu mdc-menu-surface\">{html}</div>;\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        setTimeout(() => {\n            this.setup();\n        }, 0);\n    }\n\n    private setup = () => {\n        this.setupMenu();\n        this.setupListeners();\n    };\n\n    private setupMenu = () => {\n        if (this.mdcMenu) {\n            this.teardown();\n            this.mdcMenu = null;\n        }\n\n        const element = this.element.shadowRoot.querySelector('.mdc-menu');\n        if (!element) {\n            return;\n        }\n\n        this.mdcMenu = new MDCMenu(element);\n        this.mdcMenu.hasTypeahead = true;\n        this.mdcMenu.wrapFocus = true;\n        // eslint-disable-next-line sonarjs/constructor-for-side-effects\n        for (const item of this.mdcMenu.items) new MDCRipple(item);\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcMenu) {\n            return;\n        }\n\n        this.mdcMenu.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu.listen(SELECTED_EVENT, this.handleMenuSelect);\n    };\n\n    private teardown = () => {\n        this.mdcMenu?.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu?.destroy();\n    };\n\n    private handleMenuSelect = (event: MDCMenuItemEvent) => {\n        this.handleSingleSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const MenuItems = this.items.filter(this.isMenuItem) as MenuItem[];\n        if (MenuItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: MenuItem = MenuItems.find((item: MenuItem) => {\n            return !!item.selected;\n        });\n\n        let interactedItem: MenuItem;\n        if (selectedItem) {\n            interactedItem = { ...selectedItem, selected: false };\n            this.select.emit(interactedItem);\n        }\n\n        if (MenuItems[index] !== selectedItem) {\n            interactedItem = { ...MenuItems[index], selected: false };\n            this.select.emit(interactedItem);\n        }\n\n        this.interact.emit(interactedItem);\n    };\n\n    private isMenuItem = (item: MenuItem): boolean => {\n        return !('separator' in item);\n    };\n\n    private triggerIconColorWarning() {\n        if (this.items?.some((item) => 'iconColor' in item)) {\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\"\n            );\n        }\n    }\n}\n"},{"filename":"menu-list.scss","type":"scss","source":"@use '../../style/functions';\n\n@import '../list/list';\n\n:host(limel-menu-list) {\n    display: block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n.mdc-menu {\n    max-height: 70vh; // force tall menus render inside the viewport when menu is at the bottom of the screen\n}\n\n.mdc-deprecated-list {\n    margin: functions.pxToRem(4);\n    // added space to visualize keyboard-focused items\n    .mdc-deprecated-list-item[role='menuitem'] {\n        font-size: functions.pxToRem(13);\n\n        .mdc-deprecated-list-item__graphic {\n            margin-right: 0;\n            margin-left: -0.75rem;\n        }\n    }\n\n    hr.mdc-deprecated-list-divider {\n        &.mdc-deprecated-list-divider--inset {\n            display: none;\n        }\n    }\n}\n\nlimel-badge {\n    transform: translateX(0.75rem);\n}\n\n.sub-menu-icon {\n    width: 1rem;\n    transform: translateX(0.75rem);\n    flex-shrink: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-surface","filePath":"./src/components/menu-surface/menu-surface.tsx","fileName":"menu-surface.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/menu-surface/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/menu-surface/usage","tag":"limel-menu-surface","overview":"","usage":{},"docs":"","docsTags":[{"name":"slot","text":"- Content to put inside the surface"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-input-field","limel-menu","limel-picker","limel-select"],"dependencies":[],"dependencyGraph":{"limel-input-field":["limel-menu-surface"],"limel-menu":["limel-menu-surface"],"limel-picker":["limel-menu-surface"],"limel-select":["limel-menu-surface"]},"props":[{"name":"allowClicksElement","type":"HTMLElement","mutable":false,"reflectToAttr":false,"docs":"Clicks in this element should not be prevented when the menu surface is open","docsTags":[],"values":[{"type":"HTMLElement"}],"optional":false,"required":false},{"name":"open","type":"boolean","mutable":false,"attr":"open","reflectToAttr":false,"docs":"True if the menu surface is open, false otherwise","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"dismiss","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the menu surface is dismissed and should be closed","docsTags":[]}],"styles":[{"name":"--limel-menu-surface-display","annotation":"prop","docs":"defines whether the surface is treated as a block, flex or grid. It affects layout used to display its children. Defaults to `block`."},{"name":"--limel-menu-surface-flex-direction","annotation":"prop","docs":"defines the direction of menu-surface layout."}],"slots":[{"name":"","docs":"Content to put inside the surface"}],"parts":[],"listeners":[],"sources":[{"filename":"menu-surface.tsx","type":"tsx","source":"import { Corner, MDCMenuSurface } from '@material/menu-surface';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport { ESCAPE, TAB } from '../../util/keycodes';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n@Component({\n    tag: 'limel-menu-surface',\n    shadow: true,\n    styleUrl: 'menu-surface.scss',\n})\nexport class MenuSurface {\n    /**\n     * True if the menu surface is open, false otherwise\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Clicks in this element should not be prevented when the menu surface is open\n     */\n    @Prop()\n    public allowClicksElement: HTMLElement;\n\n    /**\n     * Emitted when the menu surface is dismissed and should be closed\n     */\n    @Event()\n    public dismiss: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelMenuSurfaceElement;\n\n    private menuSurface: MDCMenuSurface;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        const classList = {\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n            'mdc-menu-surface--open': this.open,\n            'mdc-elevation-transition': true,\n            'mdc-elevation--z4': true,\n        };\n\n        return (\n            <div class={classList} tabindex=\"-1\">\n                <slot />\n            </div>\n        );\n    }\n\n    private setup = () => {\n        const menuElement: HTMLElement =\n            this.host.shadowRoot.querySelector('.mdc-menu-surface');\n        if (!menuElement) {\n            return;\n        }\n\n        this.menuSurface = new MDCMenuSurface(menuElement);\n        this.menuSurface.setAnchorCorner(Corner.TOP_START);\n\n        document.addEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.addEventListener('keydown', this.handleKeyDown);\n    };\n\n    private teardown = () => {\n        this.menuSurface?.destroy();\n        document.removeEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.removeEventListener('keydown', this.handleKeyDown);\n    };\n\n    private handleDocumentClick = (event) => {\n        const elementPath = event.composedPath ? event.composedPath() : [];\n\n        if (!this.open) {\n            return;\n        }\n\n        if (isDescendant(event.target, this.host)) {\n            return;\n        }\n\n        if (this.allowClicksElement) {\n            const clickedInAllowedElement = elementPath.includes(\n                this.allowClicksElement\n            );\n\n            if (clickedInAllowedElement) {\n                return;\n            }\n        }\n\n        this.dismiss.emit();\n        this.preventClickEventPropagation();\n    };\n\n    private preventClickEventPropagation = () => {\n        // When the menu surface is open, we want to stop the `click` event from propagating\n        // when clicking outside the surface itself. This is to prevent any dialog that might\n        // be open from closing, etc. However, when dragging a scrollbar no `click` event is emitted,\n        // only mousedown and mouseup. So we listen for `mousedown` and attach a one-time listener\n        // for `click`, so we can capture and \"kill\" it.\n        document.addEventListener('click', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // We also capture and \"kill\" the next `mouseup` event.\n        document.addEventListener('mouseup', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // If the user dragged the scrollbar, no `click` event happens. So when we get the\n        // `mouseup` event, remove the handler for `click` if it's still there.\n        // Otherwise, we would catch the next click even though the menu is no longer open.\n        document.addEventListener(\n            'mouseup',\n            () => {\n                document.removeEventListener('click', this.stopEvent, {\n                    capture: true,\n                });\n            },\n            {\n                once: true,\n            }\n        );\n    };\n\n    private stopEvent = (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        const isEscape = event.key === ESCAPE;\n        const isTab = event.key === TAB;\n\n        if (this.open && (isEscape || isTab)) {\n            event.stopPropagation();\n            this.dismiss.emit();\n        }\n    };\n}\n"},{"filename":"menu-surface.scss","type":"scss","source":"@use '@material/menu-surface';\n@use '@material/elevation';\n@use '@material/menu';\n\n/**\n* @prop --limel-menu-surface-display: defines whether the surface is treated as a block, flex or grid. It affects layout used to display its children. Defaults to `block`.\n* @prop --limel-menu-surface-flex-direction: defines the direction of menu-surface layout.\n*/\n\n:host(limel-menu-surface) {\n    display: block;\n    max-height: inherit;\n}\n\n@include menu-surface.core-styles;\n@include menu.core-styles;\n\n.mdc-menu-surface {\n    opacity: 1; // overrides MDC's, to enable animating the surface when used in `limel-portal`\n    display: var(--limel-menu-surface-display, block);\n    flex-direction: var(--limel-menu-surface-flex-direction, row);\n    max-height: inherit;\n    position: relative;\n    --mdc-menu-max-width: calc(\n        100vw - 2rem\n    ); // just overriding MDC's pixel-based default (`calc(100vw - 32px)`) with a `rem` value\n    width: var(--menu-surface-width, auto);\n    background-color: var(--lime-elevated-surface-background-color);\n}\n\n:host(limel-menu-surface.has-grid-layout) {\n    .mdc-menu-surface {\n        width: var(--menu-surface-width, min(calc(100vw - 2rem), 40rem));\n        max-width: unset;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/notched-outline","filePath":"./src/components/notched-outline/notched-outline.tsx","fileName":"notched-outline.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/notched-outline/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/notched-outline/usage","tag":"limel-notched-outline","overview":"This is a private component, used to render a notched outline\naround all input elements that can have a floating label.\nInspired by Material Design's styles for input fields.\nWe use it in various components to unify styles and avoid\nrepeating code.\n\n:::note\nThe component has `shadow: false`. This is to improve performance,\nand ensure that its internal elements are considered as internal parts\nof the consumer's DOM. This way, the value `for` in `<label for=\"id-of-input-element\">`\nwould be correctly associated with the input element's `id`, in the consumer component.\n:::","usage":{},"docs":"This is a private component, used to render a notched outline\naround all input elements that can have a floating label.\nInspired by Material Design's styles for input fields.\nWe use it in various components to unify styles and avoid\nrepeating code.\n\n:::note\nThe component has `shadow: false`. This is to improve performance,\nand ensure that its internal elements are considered as internal parts\nof the consumer's DOM. This way, the value `for` in `<label for=\"id-of-input-element\">`\nwould be correctly associated with the input element's `id`, in the consumer component.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-notched-outline-basic"},{"name":"private"}],"encapsulation":"none","dependents":["limel-chip-set","limel-example-notched-outline-basic","limel-input-field","limel-select","limel-text-editor"],"dependencies":[],"dependencyGraph":{"limel-chip-set":["limel-notched-outline"],"limel-example-notched-outline-basic":["limel-notched-outline"],"limel-input-field":["limel-notched-outline"],"limel-select":["limel-notched-outline"],"limel-text-editor":["limel-notched-outline"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to indicate that the input element is\ndisabled. This applies proper visual styles, such as making the outlines\nand the label transparent.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"hasFloatingLabel","type":"boolean","mutable":false,"attr":"has-floating-label","reflectToAttr":true,"docs":"Set to `true` when the consumer element needs to render the\nlabel above the input element, despite existence of a `value`.\nFor example in the `text-editor` or `limel-select`,\nwhere the default layout requires a floating label.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"hasLeadingIcon","type":"boolean","mutable":false,"attr":"has-leading-icon","reflectToAttr":true,"docs":"Set to `true` when the consumer element displays a leading icon.\nThis applies proper visual styles, such as rendering the label\ncorrectly placed beside the leading icon.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"hasValue","type":"boolean","mutable":false,"attr":"has-value","reflectToAttr":true,"docs":"Set to `true` when the user has entered a value for the input element,\nshrinking the label in size, and visually rendering it above the entered value.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the input element is\ninvalid. This applies proper visual styles, such as making the outlines red.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label to display for the input element.\n:::important\nNote that the input element of the consumer component will be\nlabeled by this label, using the `labelId` prop.\n:::","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"labelId","type":"string","mutable":false,"attr":"label-id","reflectToAttr":true,"docs":"The `id` of the input element which should be\nlabeled by the provided label.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` when the input element is readonly.\nThis applies proper visual styles, such as making the outline transparent.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` when the input element is required.\nThis applies proper visual styles, such as inclusion of an asterisk\nbeside the label.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--limel-notched-outline-z-index","annotation":"prop","docs":"Defines the `z-index` of the outlines & the label, since they are absolutely positioned. Useful if there are other elements with z-indexes in the consumer."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"notched-outline.tsx","type":"tsx","source":"import { Component, Prop, h } from '@stencil/core';\n\n/**\n * This is a private component, used to render a notched outline\n * around all input elements that can have a floating label.\n * Inspired by Material Design's styles for input fields.\n * We use it in various components to unify styles and avoid\n * repeating code.\n *\n * :::note\n * The component has `shadow: false`. This is to improve performance,\n * and ensure that its internal elements are considered as internal parts\n * of the consumer's DOM. This way, the value `for` in `<label for=\"id-of-input-element\">`\n * would be correctly associated with the input element's `id`, in the consumer component.\n * :::\n * @exampleComponent limel-example-notched-outline-basic\n * @private\n */\n@Component({\n    tag: 'limel-notched-outline',\n    styleUrl: 'notched-outline.scss',\n    shadow: false,\n})\nexport class NotchedOutline {\n    /**\n     * Set to `true` when the input element is required.\n     * This applies proper visual styles, such as inclusion of an asterisk\n     * beside the label.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * Set to `true` when the input element is readonly.\n     * This applies proper visual styles, such as making the outline transparent.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input element is\n     * invalid. This applies proper visual styles, such as making the outlines red.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Set to `true` to indicate that the input element is\n     * disabled. This applies proper visual styles, such as making the outlines\n     * and the label transparent.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Label to display for the input element.\n     * :::important\n     * Note that the input element of the consumer component will be\n     * labeled by this label, using the `labelId` prop.\n     * :::\n     */\n    @Prop({ reflect: true })\n    public label?: string;\n\n    /**\n     * The `id` of the input element which should be\n     * labeled by the provided label.\n     */\n    @Prop({ reflect: true })\n    public labelId?: string;\n\n    /**\n     * Set to `true` when the user has entered a value for the input element,\n     * shrinking the label in size, and visually rendering it above the entered value.\n     */\n    @Prop({ reflect: true })\n    public hasValue = false;\n\n    /**\n     * Set to `true` when the consumer element displays a leading icon.\n     * This applies proper visual styles, such as rendering the label\n     * correctly placed beside the leading icon.\n     */\n    @Prop({ reflect: true })\n    public hasLeadingIcon = false;\n\n    /**\n     * Set to `true` when the consumer element needs to render the\n     * label above the input element, despite existence of a `value`.\n     * For example in the `text-editor` or `limel-select`,\n     * where the default layout requires a floating label.\n     */\n    @Prop({ reflect: true })\n    public hasFloatingLabel = false;\n\n    public render() {\n        return (\n            <div class=\"limel-notched-outline\">\n                <slot name=\"content\" />\n                <span\n                    class=\"limel-notched-outline--outlines\"\n                    aria-hidden=\"true\"\n                >\n                    <span class=\"limel-notched-outline--leading-outline\" />\n                    {this.renderLabel()}\n                    <span class=\"limel-notched-outline--trailing-outline\" />\n                    {this.renderEmptyReadonlyValue()}\n                </span>\n            </div>\n        );\n    }\n\n    private renderLabel() {\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <span class=\"limel-notched-outline--notch\">\n                <label htmlFor={this.labelId}>{this.label}</label>\n            </span>\n        );\n    }\n\n    private renderEmptyReadonlyValue() {\n        if (!this.readonly || this.hasValue) {\n            return;\n        }\n\n        return (\n            <span\n                class=\"limel-notched-outline--empty-readonly-value\"\n                aria-hidden=\"true\"\n            >\n                –\n            </span>\n        );\n    }\n}\n"},{"filename":"notched-outline.scss","type":"scss","source":"@use '../../style/mixins.scss';\n@use '../../style/internal/shared_input-select-picker';\n/**\n * @prop --limel-notched-outline-z-index: Defines the `z-index` of the outlines & the label, since they are absolutely positioned. Useful if there are other elements with z-indexes in the consumer.\n */\n\n$border-radius: 0.25rem;\n$value-top: 0.62rem;\n\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\nlimel-notched-outline {\n    --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color};\n    --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-normal};\n\n    display: block;\n    width: 100%;\n    height: fit-content;\n}\n\n.limel-notched-outline {\n    position: relative;\n    width: 100%;\n    height: 100%;\n\n    [slot='content'] {\n        background-color: var(--limel-notched-outline-background-color);\n        border-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n    }\n\n    // Why is everything prefixed?\n    // Because the component has `shadow: false;`\n    // and this ensures that we are not inheriting styles.\n    &--outlines {\n        pointer-events: none;\n        position: absolute;\n        inset: 0;\n        z-index: var(--limel-notched-outline-z-index, 0);\n        display: flex;\n    }\n\n    &--leading-outline,\n    &--notch,\n    &--trailing-outline {\n        transition: border-color 0.2s ease;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(--limel-notched-outline-border-color);\n    }\n\n    &--leading-outline {\n        flex-shrink: 0;\n        width: 0.75rem;\n        border-right-width: 0;\n        border-top-left-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n        border-bottom-left-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n    }\n\n    &--notch {\n        flex-shrink: 0;\n\n        position: relative;\n        z-index: 2;\n\n        border-top-color: var(\n            --limel-notched-outline-notch-border-top-color,\n            var(--limel-notched-outline-border-color)\n        );\n        border-right-width: 0;\n        border-left-width: 0;\n\n        max-width: calc(100% - 1.5rem);\n\n        label {\n            all: unset;\n            @include mixins.truncate-text;\n            position: relative;\n            transition:\n                color 0.2s ease,\n                font-size 0.2s ease,\n                transform 0.12s cubic-bezier(0.4, 0, 0.2, 1);\n\n            transform: translate3d(\n                var(--limel-notched-outline-label-transform-x, 0),\n                var(--limel-notched-outline-label-transform-y, $value-top),\n                0\n            );\n            display: block;\n            padding: 0 0.25rem;\n\n            color: var(\n                --limel-notched-outline-label-color,\n                #{shared_input-select-picker.$label-color}\n            );\n            font-size: var(\n                --limel-notched-outline-label-font-size,\n                #{shared_input-select-picker.$cropped-label-hack--font-size}\n            );\n            letter-spacing: var(\n                --mdc-typography-subtitle1-letter-spacing,\n                0.009375em\n            );\n            line-height: normal;\n\n            &:after {\n                position: absolute;\n                right: 0;\n                padding: 0 0.25rem;\n            }\n        }\n    }\n\n    &--trailing-outline {\n        flex-grow: 1;\n        border-left-width: 0;\n        border-top-right-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n        border-bottom-right-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n    }\n\n    &--empty-readonly-value {\n        @include shared_input-select-picker.lime-looks-like-input-value;\n        position: absolute;\n        top: $value-top;\n        left: 1rem;\n    }\n}\n\nlimel-notched-outline {\n    &:not([disabled]:not([disabled='false'])) {\n        &:hover {\n            --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color--hovered};\n            --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-hovered};\n        }\n\n        &:has([slot='content']:focus-visible),\n        &:has([slot='content']:focus-within) {\n            --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color--focused};\n            --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-focused};\n        }\n    }\n\n    &[disabled]:not([disabled='false']) {\n        --limel-notched-outline-label-color: #{shared_input-select-picker.$label-color-disabled};\n    }\n\n    &[required]:not([required='false']) {\n        .limel-notched-outline--notch {\n            label {\n                padding-right: 0.75rem;\n\n                &:after {\n                    content: '*';\n                    scale: 1.3;\n                }\n            }\n        }\n    }\n\n    &[invalid]:not([invalid='false']) {\n        &:not([disabled]:not([disabled='false'])) {\n            --limel-notched-outline-border-color: var(--lime-error-text-color);\n            &:hover {\n                --limel-notched-outline-border-color: var(\n                    --lime-error-text-color\n                );\n            }\n        }\n\n        .limel-notched-outline--notch {\n            label {\n                &:after {\n                    color: var(--lime-error-text-color);\n                }\n            }\n        }\n    }\n\n    &[readonly]:not([readonly='false']) {\n        --limel-notched-outline-border-color: transparent !important;\n        --limel-notched-outline-background-color: transparent !important;\n\n        .limel-notched-outline--notch {\n            label {\n                transition-duration: 0s;\n            }\n        }\n    }\n\n    &[has-leading-icon] {\n        &:not([has-leading-icon='false']):not([has-floating-label]):not(\n                [has-value]\n            ) {\n            --limel-notched-outline-label-transform-x: 1.25rem;\n        }\n\n        .limel-notched-outline--empty-readonly-value {\n            left: 2.25rem;\n        }\n    }\n}\n\n// Transitioning the floating label\n@mixin float-label {\n    --limel-notched-outline-label-font-size: 0.65rem; // `10.4px` similar to MDC's floating label\n    --limel-notched-outline-label-transform-x: 0;\n    --limel-notched-outline-label-transform-y: calc(-50% - 0.09375rem);\n    --limel-notched-outline-notch-border-top-color: transparent;\n}\n\nlimel-notched-outline {\n    &:not([disabled]:not([disabled='false'])) {\n        &:hover,\n        &:focus,\n        &:focus-within {\n            label {\n                will-change: color, transform, font-size;\n            }\n        }\n\n        &:has([slot='content']:focus-visible),\n        &:has([slot='content']:focus-within) {\n            @include float-label;\n        }\n    }\n\n    &[has-floating-label],\n    &[has-value]:not([has-value='false']),\n    &[readonly]:not([has-value]:not([has-value='true'])) {\n        @include float-label;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/picker","filePath":"./src/components/picker/picker.tsx","fileName":"picker.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/picker/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/picker/usage","tag":"limel-picker","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-picker-basic"},{"name":"exampleComponent","text":"limel-example-picker-multiple"},{"name":"exampleComponent","text":"limel-example-picker-icons"},{"name":"exampleComponent","text":"limel-example-picker-pictures"},{"name":"exampleComponent","text":"limel-example-picker-value-as-object"},{"name":"exampleComponent","text":"limel-example-picker-value-as-object-with-actions"},{"name":"exampleComponent","text":"limel-example-picker-empty-suggestions"},{"name":"exampleComponent","text":"limel-example-picker-leading-icon"},{"name":"exampleComponent","text":"limel-example-picker-static-actions"},{"name":"exampleComponent","text":"limel-example-picker-composite"}],"encapsulation":"shadow","dependents":["limel-example-custom-picker","limel-example-picker-basic","limel-example-picker-composite","limel-example-picker-empty-suggestions","limel-example-picker-icons","limel-example-picker-leading-icon","limel-example-picker-multiple","limel-example-picker-pictures","limel-example-picker-static-actions","limel-example-picker-value-as-object","limel-example-picker-value-as-object-with-actions","limel-example-props-factory-picker"],"dependencies":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"dependencyGraph":{"limel-picker":["limel-chip-set","limel-list","limel-spinner","limel-portal","limel-menu-surface"],"limel-chip-set":["limel-helper-line","limel-notched-outline","limel-chip","limel-icon"],"limel-chip":["limel-icon","limel-badge","limel-menu","limel-linear-progress"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-custom-picker":["limel-picker"],"limel-example-picker-basic":["limel-picker"],"limel-example-picker-composite":["limel-picker"],"limel-example-picker-empty-suggestions":["limel-picker"],"limel-example-picker-icons":["limel-picker"],"limel-example-picker-leading-icon":["limel-picker"],"limel-example-picker-multiple":["limel-picker"],"limel-example-picker-pictures":["limel-picker"],"limel-example-picker-static-actions":["limel-picker"],"limel-example-picker-value-as-object":["limel-picker"],"limel-example-picker-value-as-object-with-actions":["limel-picker"],"limel-example-props-factory-picker":["limel-picker"]},"props":[{"name":"actionPosition","type":"\"bottom\" | \"top\"","mutable":false,"attr":"action-position","reflectToAttr":false,"docs":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","docsTags":[],"default":"'bottom'","values":[{"value":"bottom","type":"string"},{"value":"top","type":"string"}],"optional":false,"required":false},{"name":"actionScrollBehavior","type":"\"scroll\" | \"sticky\"","mutable":false,"attr":"action-scroll-behavior","reflectToAttr":false,"docs":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","docsTags":[],"default":"'sticky'","values":[{"value":"scroll","type":"string"},{"value":"sticky","type":"string"}],"optional":false,"required":false},{"name":"actions","type":"ListItem<Action>[]","mutable":false,"reflectToAttr":false,"docs":"Static actions that can be clicked by the user.","docsTags":[],"default":"[]","values":[{"type":"ListItem<Action>[]"}],"optional":false,"required":false},{"name":"allItems","type":"ListItem<PickerValue>[]","mutable":false,"reflectToAttr":false,"docs":"Only used if no `searcher` is provided. The picker will then use a\ndefault search function that filters the `allItems` based on the\n`text` and `secondaryText` properties of the items.\nThis way, custom search functions are typically only needed when the\nsearch is done on the server.\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.","docsTags":[],"default":"[]","values":[{"type":"ListItem<PickerValue>[]"}],"optional":true,"required":false},{"name":"badgeIcons","type":"boolean","mutable":false,"attr":"badge-icons","reflectToAttr":true,"docs":"Whether badge icons should be used in the result list or not","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"delimiter","type":"string","mutable":false,"attr":"delimiter","reflectToAttr":true,"docs":"Sets delimiters between chips. Works only when `multiple` is `true`.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"True if the picker should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"emptyResultMessage","type":"string","mutable":false,"attr":"empty-result-message","reflectToAttr":false,"docs":"A message to display when the search returned an empty result","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the input field is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":false,"docs":"Text to display for the input field of the picker","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"leadingIcon","type":"string","mutable":false,"attr":"leading-icon","reflectToAttr":false,"docs":"Leading icon to show to the far left in the text field","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"multiple","type":"boolean","mutable":false,"attr":"multiple","reflectToAttr":false,"docs":"True if multiple values are allowed","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":false,"docs":"True if the control requires a value","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"searchLabel","type":"string","mutable":false,"attr":"search-label","reflectToAttr":false,"docs":"Search label to display in the input field when searching","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"searcher","type":"(query: string) => Promise<(ListSeparator | ListItem<any>)[]>","mutable":false,"reflectToAttr":false,"docs":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","docsTags":[],"values":[{"type":"(query: string) => Promise<(ListSeparator"},{"type":"ListItem<any>)[]>"}],"optional":true,"required":false},{"name":"value","type":"ListItem<PickerValue> | ListItem<PickerValue>[]","mutable":false,"reflectToAttr":false,"docs":"Currently selected value or values. Where the value can be an object.","docsTags":[],"values":[{"type":"ListItem<PickerValue>"},{"type":"ListItem<PickerValue>[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"action","detail":"Action","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the user selects an action.","docsTags":[]},{"event":"change","detail":"ListItem<PickerValue> | ListItem<PickerValue>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the picker","docsTags":[]},{"event":"interact","detail":"ListItem<PickerValue>","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when clicking on a selected value","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"z-index of the dropdown menu."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"picker.tsx","type":"tsx","source":"import { Action } from '../collapsible-section/action';\nimport { ActionPosition, ActionScrollBehavior } from '../picker/actions.types';\nimport { Chip } from '../chip-set/chip.types';\nimport { ListItem } from '../list/list-item.types';\nimport { Searcher } from '../picker/searcher.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport { ARROW_DOWN, ARROW_UP, ENTER, ESCAPE, TAB } from '../../util/keycodes';\nimport { createRandomString } from '../../util/random-string';\nimport {\n    LimelChipSetCustomEvent,\n    LimelListCustomEvent,\n} from '../../components';\nimport { getIconFillColor, getIconName } from '../icon/get-icon-props';\nimport { PickerValue } from './value.types';\nimport { DebouncedFunc, debounce } from 'lodash-es';\n\nconst SEARCH_DEBOUNCE = 300;\nconst CHIP_SET_TAG_NAME = 'limel-chip-set';\nconst DEFAULT_SEARCHER_MAX_RESULTS = 20;\n\n/**\n * @exampleComponent limel-example-picker-basic\n * @exampleComponent limel-example-picker-multiple\n * @exampleComponent limel-example-picker-icons\n * @exampleComponent limel-example-picker-pictures\n * @exampleComponent limel-example-picker-value-as-object\n * @exampleComponent limel-example-picker-value-as-object-with-actions\n * @exampleComponent limel-example-picker-empty-suggestions\n * @exampleComponent limel-example-picker-leading-icon\n * @exampleComponent limel-example-picker-static-actions\n * @exampleComponent limel-example-picker-composite\n */\n@Component({\n    tag: 'limel-picker',\n    shadow: true,\n    styleUrl: 'picker.scss',\n})\nexport class Picker {\n    /**\n     * True if the picker should be disabled\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing items,\n     * but allow interaction with existing items.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Text to display for the input field of the picker\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Search label to display in the input field when searching\n     */\n    @Prop()\n    public searchLabel: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop()\n    public leadingIcon: string;\n\n    /**\n     * A message to display when the search returned an empty result\n     */\n    @Prop()\n    public emptyResultMessage: string;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop()\n    public required: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Currently selected value or values. Where the value can be an object.\n     */\n    @Prop()\n    public value: ListItem<PickerValue> | Array<ListItem<PickerValue>>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `ListItem`:s.\n     *\n     * See the docs for the type `Searcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher?: Searcher;\n\n    /**\n     * Only used if no `searcher` is provided. The picker will then use a\n     * default search function that filters the `allItems` based on the\n     * `text` and `secondaryText` properties of the items.\n     * This way, custom search functions are typically only needed when the\n     * search is done on the server.\n     * For performance reasons, the default searcher will never return more\n     * than 20 items, but if there are more than 20 items, the rest can be\n     * found by typing more characters in the search field.\n     */\n    @Prop()\n    public allItems?: Array<ListItem<PickerValue>> = [];\n\n    /**\n     * True if multiple values are allowed\n     */\n    @Prop()\n    public multiple: boolean = false;\n\n    /**\n     * Sets delimiters between chips. Works only when `multiple` is `true`.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Static actions that can be clicked by the user.\n     */\n    @Prop()\n    public actions: Array<ListItem<Action>> = [];\n\n    /**\n     * Position of the custom static actions in the picker's results dropdown.\n     * Can be set to `'top'` or `'bottom'`.\n     */\n    @Prop()\n    public actionPosition: ActionPosition = 'bottom';\n\n    /**\n     * Scroll behavior of the custom static actions, when user scrolls\n     * in the picker's results dropdown. Can be set to `'scroll'` which means\n     * the action items will scroll together with the list, or `'sticky'` which\n     * retains their position at the top or bottom of the drop down while\n     * scrolling.\n     */\n    @Prop()\n    public actionScrollBehavior: ActionScrollBehavior = 'sticky';\n\n    /**\n     * Whether badge icons should be used in the result list or not\n     */\n    @Prop({ reflect: true })\n    public badgeIcons: boolean = false;\n\n    /**\n     * Fired when a new value has been selected from the picker\n     */\n    @Event()\n    private change: EventEmitter<\n        ListItem<PickerValue> | Array<ListItem<PickerValue>>\n    >;\n\n    /**\n     * Fired when clicking on a selected value\n     */\n    @Event()\n    private interact: EventEmitter<ListItem<PickerValue>>;\n\n    /**\n     * Emitted when the user selects an action.\n     */\n    @Event()\n    private action: EventEmitter<Action>;\n\n    @State()\n    private items: Array<ListItem<number | string>>;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private loading: boolean = false;\n\n    @State()\n    private chips: Chip[] = [];\n\n    @Element()\n    private host: HTMLLimelPickerElement;\n\n    // Should NOT be decorated with State(), since this\n    // should not trigger a re-render by itself.\n    private chipSetEditMode = false;\n\n    private debouncedSearch: DebouncedFunc<(query: string) => Promise<void>>;\n    private chipSet: HTMLLimelChipSetElement;\n    private portalId: string;\n\n    constructor() {\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n        this.handleDropdownKeyDown = this.handleDropdownKeyDown.bind(this);\n        this.handleInputFieldFocus = this.handleInputFieldFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInteract = this.handleInteract.bind(this);\n        this.handleListChange = this.handleListChange.bind(this);\n        this.handleActionListChange = this.handleActionListChange.bind(this);\n        this.handleStopEditAndBlur = this.handleStopEditAndBlur.bind(this);\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\n        this.onListKeyDown = this.onListKeyDown.bind(this);\n\n        this.portalId = createRandomString();\n        this.debouncedSearch = debounce(this.search, SEARCH_DEBOUNCE);\n    }\n\n    public componentWillLoad() {\n        this.chips = this.createChips(this.value);\n    }\n\n    public componentDidLoad() {\n        this.chipSet = this.host.shadowRoot.querySelector(CHIP_SET_TAG_NAME);\n    }\n\n    public disconnectedCallback() {\n        this.debouncedSearch.cancel();\n    }\n\n    public async componentWillUpdate() {\n        this.chipSetEditMode = false;\n        if (this.chipSet) {\n            this.chipSetEditMode = await this.chipSet.getEditMode();\n        }\n    }\n\n    public render() {\n        const props: {\n            maxItems?: number;\n        } = {};\n\n        if (!this.multiple) {\n            props.maxItems = 1;\n        }\n\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label={this.label}\n                helperText={this.helperText}\n                leadingIcon={this.leadingIcon}\n                value={this.chips}\n                disabled={this.disabled}\n                invalid={this.invalid}\n                delimiter={this.renderDelimiter()}\n                readonly={this.readonly}\n                required={this.required}\n                searchLabel={this.searchLabel}\n                onInput={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n                onChange={this.handleChange}\n                onInteract={this.handleInteract}\n                onStartEdit={this.handleInputFieldFocus}\n                onStopEdit={this.handleStopEditAndBlur}\n                emptyInputOnBlur={false}\n                clearAllButton={this.multiple && !this.chipSetEditMode}\n                {...props}\n            />,\n            this.renderDropdown(),\n        ];\n    }\n\n    @Watch('value')\n    protected onChangeValue() {\n        this.chips = this.createChips(this.value);\n    }\n\n    private renderDelimiter() {\n        if (this.multiple) {\n            return this.delimiter;\n        }\n\n        return null;\n    }\n\n    private getValueId = (item: ListItem) => {\n        const value = item.value;\n        if (!!value && typeof value === 'object') {\n            return value.id;\n        }\n\n        return value;\n    };\n\n    private createChips = (value: ListItem | ListItem[]): Chip[] => {\n        if (!value) {\n            return [];\n        }\n\n        if (this.multiple) {\n            const listItems: ListItem[] = value as ListItem[];\n\n            return listItems.map(this.createChip);\n        }\n\n        const listItem: ListItem = value as ListItem;\n\n        return [this.createChip(listItem)];\n    };\n\n    private createChip = (listItem: ListItem): Chip => {\n        const name = getIconName(listItem.icon);\n\n        const color = getIconFillColor(listItem.icon, listItem.iconColor);\n        const valueId = this.getValueId(listItem);\n\n        return {\n            id: `${valueId}`,\n            text: listItem.text,\n            removable: true,\n            icon: name ? { name: name, color: color } : undefined,\n            image: listItem.image,\n            value: listItem,\n            menuItems: listItem.actions,\n        };\n    };\n\n    /**\n     * Renders the dropdown with the items to pick from, or a spinner if the picker\n     * is waiting for items to be received\n     *\n     * @returns picker dropdown\n     */\n    private renderDropdown() {\n        const dropDownContent = this.getDropdownContent();\n\n        const content = [];\n\n        if (this.shouldShowDropDownContent()) {\n            const actionContent = this.getActionContent();\n            if (this.actionPosition === 'top') {\n                content.push(actionContent);\n            }\n\n            if (dropDownContent) {\n                content.push(dropDownContent);\n            }\n\n            if (this.actionPosition === 'bottom') {\n                content.push(actionContent);\n            }\n        }\n\n        return this.renderPortal(content);\n    }\n\n    private getActionContent() {\n        const actionCount = this.actions?.length ?? 0;\n        if (actionCount === 0) {\n            return null;\n        }\n\n        return [\n            <limel-list\n                class={{\n                    'static-actions-list': true,\n                    'is-on-top': this.actionPosition === 'top',\n                    'is-at-bottom': this.actionPosition === 'bottom',\n                    'has-position-sticky':\n                        this.actionScrollBehavior === 'sticky',\n                }}\n                badgeIcons={true}\n                type={'selectable'}\n                onChange={this.handleActionListChange}\n                items={this.actions.map(this.removeUnusedPropertiesOnAction)}\n            />,\n        ];\n    }\n\n    private removeUnusedPropertiesOnAction(\n        action: ListItem<Action>\n    ): ListItem<Action> {\n        return {\n            ...action,\n            actions: [],\n        };\n    }\n\n    private shouldShowDropDownContent() {\n        if (this.isFull()) {\n            return false;\n        }\n\n        return !!this.chipSetEditMode;\n    }\n\n    private getDropdownContent() {\n        if (!this.shouldShowDropDownContent()) {\n            return;\n        }\n\n        if (this.loading) {\n            return this.renderSpinner();\n        }\n\n        if (!this.items?.length) {\n            return this.renderEmptyMessage();\n        }\n\n        return this.renderListResult();\n    }\n\n    /**\n     * Returns true if the picker is \"full\"\n     * The picker is considered to be full if it has a value and only one is allowed\n     *\n     * @returns true if the picker is full\n     */\n    private isFull(): boolean {\n        return !this.multiple && !!this.value;\n    }\n\n    private renderSpinner() {\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '1rem 0',\n                }}\n            >\n                <limel-spinner limeBranded={false} />\n            </div>\n        );\n    }\n\n    private renderEmptyMessage() {\n        if (!this.emptyResultMessage) {\n            return;\n        }\n\n        const style = {\n            color: 'rgb(var(--contrast-1100))',\n            'text-align': 'center',\n            margin: '0.5rem 1rem',\n        };\n\n        return <p style={style}>{this.emptyResultMessage}</p>;\n    }\n\n    private renderListResult() {\n        return (\n            <limel-list\n                badgeIcons={this.badgeIcons}\n                onChange={this.handleListChange}\n                onKeyDown={this.onListKeyDown}\n                type=\"selectable\"\n                items={this.items}\n            />\n        );\n    }\n\n    private onListKeyDown(event: KeyboardEvent) {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        if (keyFound) {\n            this.chipSet.setFocus();\n        }\n    }\n\n    private renderPortal(content: any[] = []) {\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return (\n            <limel-portal\n                visible={content.length > 0}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={content.length > 0}\n                    allowClicksElement={this.host}\n                    style={{\n                        '--menu-surface-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {content}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    }\n\n    /**\n     * Check if a descendant still has focus. If not, reset text value and search result.\n     */\n    private handleStopEditAndBlur() {\n        // In browsers where shadow DOM is not supported activeElement on shadowRoot will return null\n        // However, document.activeElement will return the actual focused element instead of the outermost shadow host\n        const element =\n            this.host.shadowRoot.activeElement || document.activeElement;\n        const portalElement = document.querySelector(`#${this.portalId}`);\n        if (\n            isDescendant(element as HTMLElement, this.host) ||\n            isDescendant(element as HTMLElement, portalElement as HTMLElement)\n        ) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    /**\n     * Input handler for the input field\n     *\n     * @param event - event\n     */\n    private async handleTextInput(event) {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.textValue = query;\n\n        this.debouncedSearch(query);\n        // If the search-query is an empty string, bypass debouncing.\n        if (query === '') {\n            this.debouncedSearch.flush();\n        }\n    }\n\n    private search = async (query: string) => {\n        const timeoutId = setTimeout(() => {\n            this.loading = true;\n        });\n        const searcher = this.searcher || this.defaultSearcher;\n        const result = (await searcher(this.textValue)) as Array<\n            ListItem<PickerValue>\n        >;\n\n        // If the search function resolves immediately,\n        // the loading spinner will not be shown.\n        clearTimeout(timeoutId);\n\n        this.handleSearchResult(query, result);\n    };\n\n    private defaultSearcher: Searcher = async (\n        query: string\n    ): Promise<ListItem[]> => {\n        if (query === '') {\n            return this.allItems.slice(0, DEFAULT_SEARCHER_MAX_RESULTS);\n        }\n\n        const filteredItems = this.allItems.filter((item) => {\n            let searchText = item.text.toLowerCase();\n            if (item.secondaryText) {\n                searchText =\n                    searchText + ' ' + item.secondaryText.toLowerCase();\n            }\n\n            return searchText.includes(query.toLowerCase());\n        });\n\n        return filteredItems.slice(0, DEFAULT_SEARCHER_MAX_RESULTS);\n    };\n\n    /**\n     * Change handler for the list\n     *\n     * @param event - event\n     */\n    private handleListChange(\n        event: LimelListCustomEvent<ListItem<PickerValue>>\n    ) {\n        event.stopPropagation();\n        if (!this.value || this.value !== event.detail) {\n            let newValue: ListItem<PickerValue> | Array<ListItem<PickerValue>> =\n                event.detail;\n            if (this.multiple) {\n                newValue = [\n                    ...(this.value as Array<ListItem<PickerValue>>),\n                    event.detail,\n                ];\n            }\n\n            this.change.emit(newValue);\n            this.items = [];\n        }\n\n        if (this.multiple) {\n            this.textValue = '';\n            this.chipSet?.setFocus(true);\n        }\n    }\n\n    /**\n     * Change handler for the list\n     *\n     * @param event - event\n     */\n    private handleActionListChange(\n        event: LimelListCustomEvent<ListItem<Action>>\n    ) {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.action.emit(event.detail.value);\n        this.items = [];\n    }\n\n    /**\n     * Focus handler for the chip set\n     * Prevent focus if the picker has a value and does not support multiple values\n     */\n    private handleInputFieldFocus() {\n        const query = this.textValue;\n        this.debouncedSearch(query);\n    }\n\n    private handleChange(event: LimelChipSetCustomEvent<Chip | Chip[]>) {\n        event.stopPropagation();\n\n        let newValue = null;\n        if (this.multiple) {\n            const chips = event.detail as Chip[];\n            newValue = chips.map((chip) => {\n                return (this.value as ListItem[]).find((item) => {\n                    const valueId = this.getValueId(item);\n\n                    return `${valueId}` === chip.id;\n                });\n            });\n        }\n\n        this.change.emit(newValue);\n    }\n\n    private handleInteract(event: LimelChipSetCustomEvent<Chip>) {\n        event.stopPropagation();\n        this.interact.emit(event.detail ? event.detail.value : event.detail);\n    }\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param event - event\n     */\n    private handleInputKeyDown(event: KeyboardEvent) {\n        const isForwardTab =\n            event.key === TAB &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp = event.key === ARROW_UP;\n        const isDown = event.key === ARROW_DOWN;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child'\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child'\n            );\n            listElement.focus();\n        }\n    }\n\n    /**\n     * Key handler for the dropdown\n     *\n     * @param event - event\n     */\n    private handleDropdownKeyDown(event: KeyboardEvent) {\n        const isEscape = event.key === ESCAPE;\n\n        if (isEscape) {\n            event.preventDefault();\n            this.textValue = '';\n            this.chipSet.setFocus(true);\n        }\n    }\n\n    private handleSearchResult(query: string, result: ListItem[]) {\n        if (query === this.textValue) {\n            this.items = result;\n            if (this.multiple) {\n                const values = this.value as ListItem[];\n                this.items = result.filter((item) => {\n                    return !values.includes(item);\n                });\n            }\n\n            this.loading = false;\n        }\n    }\n\n    private handleCloseMenu() {\n        if (this.items.length > 0) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    private clearInputField() {\n        this.chipSet.emptyInput();\n        this.textValue = '';\n        this.handleSearchResult('', []);\n        this.debouncedSearch.cancel();\n    }\n}\n"},{"filename":"picker.scss","type":"scss","source":"// Note! The `--dropdown-z-index` property is used from `picker.tsx`.\n/**\n  * @prop --dropdown-z-index: z-index of the dropdown menu.\n  */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover","filePath":"./src/components/popover/popover.tsx","fileName":"popover.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover/usage","tag":"limel-popover","overview":"A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::","usage":{},"docs":"A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::","docsTags":[{"name":"slot","text":"- Content to put inside the surface"},{"name":"exampleComponent","text":"limel-example-popover-basic"},{"name":"exampleComponent","text":"limel-example-popover-trigger-interaction"},{"name":"exampleComponent","text":"limel-example-popover-styling"}],"encapsulation":"shadow","dependents":["limel-color-picker","limel-dock-button","limel-example-popover-basic","limel-example-popover-styling","limel-example-popover-trigger-interaction","limel-example-portal-basic","limel-example-text-editor-triggers","limel-help"],"dependencies":["limel-portal","limel-popover-surface"],"dependencyGraph":{"limel-popover":["limel-portal","limel-popover-surface"],"limel-color-picker":["limel-popover"],"limel-dock-button":["limel-popover"],"limel-example-popover-basic":["limel-popover"],"limel-example-popover-styling":["limel-popover"],"limel-example-popover-trigger-interaction":["limel-popover"],"limel-example-portal-basic":["limel-popover"],"limel-example-text-editor-triggers":["limel-popover"],"limel-help":["limel-popover"]},"props":[{"name":"open","type":"boolean","mutable":false,"attr":"open","reflectToAttr":false,"docs":"True if the content within the popover should be visible","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Decides the popover's location in relation to its trigger","docsTags":[],"values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"close","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emits an event when the component is closing","docsTags":[]}],"styles":[{"name":"--popover-body-background-color","annotation":"prop","docs":"Background color of popover body. Defaults to `--lime-elevated-surface-background-color`."},{"name":"--popover-border-radius","annotation":"prop","docs":"Border radius of popover. Defaults to `0.75rem`."},{"name":"--popover-box-shadow","annotation":"prop","docs":"Defines the shadow of the popover surface. Defaults to `--shadow-depth-16`."},{"name":"--popover-surface-width","annotation":"prop","docs":"Width of the popover surface. Defaults to `auto`"},{"name":"--popover-z-index","annotation":"prop","docs":"z-index of the popover."}],"slots":[{"name":"","docs":"Content to put inside the surface"}],"parts":[],"listeners":[],"sources":[{"filename":"popover.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { zipObject } from 'lodash-es';\nimport { portalContains } from '../portal/contains';\nimport { ESCAPE } from '../../util/keycodes';\nimport { OpenDirection } from '../menu/menu.types';\n\n/**\n * A popover is an impermanent layer that is displayed on top of other content\n * when user taps an element that triggers the popover. This element can be\n * practically anything, a button, piece of text, and icon, etc.\n *\n * Popovers are nonmodal, thus they don't have a semi-transparent backdrop layer\n * that darkens the content below them. Also for the same reason, they can be\n * dismissed by tapping or clicking another part of the screen, but not by a\n * clicking a button or link on the popover itself.\n *\n * ## Usage\n * Use a popover to show **options** or **information** related to the trigger\n * onscreen. A typical use case for popovers is a tooltip, in which you show\n * help text or contextual information to users.\n *\n * Popovers are most appropriate on larger screens but can be used on smaller\n * screens too, as long as their content is responsive and takes into account\n * the context they are displayed on.\n *\n * When a popover is displayed, interactions with other controls are blocked,\n * until user dismisses the popover.\n *\n *\n * ## Layout\n * Popovers has only one slot in which you can import a custom web-component.\n *\n * :::note\n * You must make sure that web-components that you import into the slot has\n * a `width: 100%;` style so that it can horizontally stretch across the popover.\n *\n * However, `width` of the popover can be controlled by specifying a CSS variable\n * of `--popover-surface-width`. If you don't specify any width, the popover\n * will grow as wide as its content.\n * :::\n *\n * :::important\n * Do not make a popover too big. They should never take over the entire screen.\n * If your content is that big, you should probably be using a Modal instead.\n * :::\n *\n * @slot - Content to put inside the surface\n * @exampleComponent limel-example-popover-basic\n * @exampleComponent limel-example-popover-trigger-interaction\n * @exampleComponent limel-example-popover-styling\n */\n@Component({\n    tag: 'limel-popover',\n    shadow: true,\n    styleUrl: 'popover.scss',\n})\nexport class Popover {\n    /**\n     * True if the content within the popover should be visible\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Decides the popover's location in relation to its trigger\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection;\n\n    /**\n     * Emits an event when the component is closing\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    private portalId: string;\n\n    constructor() {\n        this.portalId = createRandomString();\n        this.globalClickListener = this.globalClickListener.bind(this);\n    }\n\n    @Watch('open')\n    protected watchOpen() {\n        this.setupGlobalHandlers();\n    }\n\n    public componentWillLoad() {\n        this.setupGlobalHandlers();\n    }\n\n    public componentDidRender() {\n        const slotElement = this.host.shadowRoot.querySelector('slot');\n        // eslint-disable-next-line unicorn/no-array-for-each\n        slotElement.assignedElements().forEach(this.setTriggerAttributes);\n    }\n\n    private setupGlobalHandlers() {\n        if (this.open) {\n            document.addEventListener('click', this.globalClickListener, {\n                capture: true,\n            });\n            document.addEventListener('keyup', this.handleGlobalKeyPress);\n        } else {\n            document.removeEventListener('click', this.globalClickListener);\n            document.removeEventListener('keyup', this.handleGlobalKeyPress);\n        }\n    }\n\n    public render() {\n        const cssProperties = this.getCssProperties();\n        const popoverZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--popover-z-index'\n        );\n\n        return (\n            <div class=\"trigger-anchor\">\n                <slot name=\"trigger\" />\n                <limel-portal\n                    visible={this.open}\n                    containerId={this.portalId}\n                    containerStyle={{ 'z-index': popoverZIndex }}\n                    openDirection={this.openDirection}\n                >\n                    <limel-popover-surface\n                        contentCollection={this.host.children}\n                        style={cssProperties}\n                    />\n                </limel-portal>\n            </div>\n        );\n    }\n\n    private globalClickListener(event: MouseEvent) {\n        const element: HTMLElement = event.target as HTMLElement;\n        const clickedInside = portalContains(this.host, element);\n        if (this.open && !clickedInside) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.close.emit();\n        }\n    }\n\n    private getCssProperties() {\n        const propertyNames = [\n            '--popover-surface-width',\n            '--popover-body-background-color',\n            '--popover-border-radius',\n            '--popover-box-shadow',\n        ];\n        const style = getComputedStyle(this.host);\n        const values = propertyNames.map((property) => {\n            return style.getPropertyValue(property);\n        });\n\n        return zipObject(propertyNames, values);\n    }\n\n    private handleGlobalKeyPress = (event: KeyboardEvent) => {\n        if (event.key !== ESCAPE) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n        this.close.emit();\n    };\n\n    private setTriggerAttributes = (element: HTMLElement) => {\n        const attributes = {\n            'aria-haspopup': true,\n            'aria-expanded': this.open,\n            'aria-controls': this.portalId,\n            role: 'button',\n        };\n\n        for (const [key, value] of Object.entries(attributes)) {\n            if (value) {\n                element.setAttribute(key, String(value));\n            } else {\n                element.removeAttribute(key);\n            }\n        }\n    };\n}\n"},{"filename":"popover.scss","type":"scss","source":"/**\n * @prop --popover-surface-width: Width of the popover surface. Defaults to `auto`\n * @prop --popover-body-background-color: Background color of popover body. Defaults to `--lime-elevated-surface-background-color`.\n * @prop --popover-border-radius: Border radius of popover. Defaults to `0.75rem`.\n * @prop --popover-z-index: z-index of the popover.\n * @prop --popover-box-shadow: Defines the shadow of the popover surface. Defaults to `--shadow-depth-16`.\n */\n\n.trigger-anchor {\n    display: inline-block;\n    position: relative;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/popover-surface","filePath":"./src/components/popover-surface/popover-surface.tsx","fileName":"popover-surface.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/popover-surface/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/popover-surface/usage","tag":"limel-popover-surface","overview":"","usage":{},"docs":"","docsTags":[{"name":"slot","text":"- Content to put inside the surface"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-popover"],"dependencies":[],"dependencyGraph":{"limel-popover":["limel-popover-surface"]},"props":[{"name":"contentCollection","type":"HTMLCollection","mutable":false,"reflectToAttr":false,"docs":"Content to render","docsTags":[],"values":[{"type":"HTMLCollection"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[],"slots":[{"name":"","docs":"Content to put inside the surface"}],"parts":[],"listeners":[],"sources":[{"filename":"popover-surface.tsx","type":"tsx","source":"import { Component, h, Prop, Element } from '@stencil/core';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n\n@Component({\n    tag: 'limel-popover-surface',\n    shadow: true,\n    styleUrl: 'popover-surface.scss',\n})\nexport class PopoverSurface {\n    /**\n     * Content to render\n     */\n    @Prop()\n    public contentCollection: HTMLCollection;\n\n    @Element()\n    private host: HTMLLimelPopoverSurfaceElement;\n\n    public componentDidLoad() {\n        this.appendElement();\n    }\n\n    public render() {\n        return <div class=\"limel-popover-surface\" tabindex=\"0\" />;\n    }\n\n    private appendElement() {\n        const portalContainer = this.host.shadowRoot.querySelector(\n            '.limel-popover-surface'\n        );\n\n        for (const child of this.contentCollection) {\n            if (child.slot === 'trigger') {\n                continue;\n            }\n\n            portalContainer.append(child);\n        }\n    }\n}\n"},{"filename":"popover-surface.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/mixins';\n\n:host(limel-popover-surface) {\n    isolation: isolate;\n\n    position: relative;\n    display: flex;\n\n    width: var(--popover-surface-width, auto);\n    max-height: inherit; // inherits it from the dynamically calculated `max-height` of `limel-portal--container`\n    max-width: calc(100vw - 2rem);\n    margin: 0 0.25rem;\n}\n\n.limel-popover-surface {\n    flex: 1;\n    min-width: 0;\n    min-height: 0;\n    border-radius: var(--popover-border-radius, functions.pxToRem(12));\n    box-shadow: var(--popover-box-shadow, var(--shadow-depth-16));\n\n    backdrop-filter: blur(functions.pxToRem(5));\n    -webkit-backdrop-filter: blur(functions.pxToRem(5));\n\n    &:after {\n        // allows using `--popover-body-background-color` while\n        // getting the blurred backdrop effect\n        transition: opacity 0.4s ease;\n        pointer-events: none;\n\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        z-index: -1;\n\n        opacity: 0.95; //temperary change due to not supporting `backdrop-filter` in Chromium browsers\n\n        border-radius: var(--popover-border-radius, functions.pxToRem(12));\n        background-color: var(\n            --popover-body-background-color,\n            var(--lime-elevated-surface-background-color)\n        );\n    }\n\n    @include mixins.visualize-keyboard-focus;\n\n    &:focus,\n    &:focus-within {\n        &:after {\n            opacity: 1;\n        }\n    }\n\n    & > * {\n        // this fixes some unwanted layout issues\n        // which might be very hard for consumers to realize\n        // and fix by themselves. Without this code,\n        // if the consumer sets for example paddings in\n        // what they send to the popover, their element\n        // can grow larger than the popover surface\n        box-sizing: border-box;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/portal","filePath":"./src/components/portal/portal.tsx","fileName":"portal.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/portal/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/portal/usage","tag":"limel-portal","overview":"The portal component provides a way to render children into a DOM node that\nexist outside the DOM hierarchy of the parent component.\n\nWhen the limel-portal component is used, it creates a new DOM node (a div element)\nand appends it to a parent element (by default, the body of the document).\nThe child elements of the limel-portal are then moved from\ntheir original location in the DOM to this new div element.\n\nThis technique is often used to overcome CSS stacking context issues,\nor to render UI elements like modals, dropdowns, tooltips, etc.,\nthat need to visually \"break out\" of their container.\n\nUsing this component, we ensure that the content is always rendered in the\ncorrect position, and never covers its own trigger, or another component\nthat is opened in the stacking layer. This way, we don't need to worry about\nz-indexes, or other stacking context issues.\n\n:::important\nThere are some caveats when using this component\n\n1. Events might not bubble up as expected since the content is moved out to\nanother DOM node.\n2. Any styling that is applied to content from the parent will be lost, if the\ncontent is just another web-component it will work without any issues.\nAlternatively, use the `style=\"\"` html attribute.\n3. Any component that is placed inside the container must have a style of\n`max-height: inherit`. This ensures that its placement is calculated\ncorrectly in relation to the trigger, and that it never covers its own\ntrigger.\n4. When the node is moved in the DOM, `disconnectedCallback` and\n`connectedCallback` will be invoked, so if `disconnectedCallback` is used\nto do any tear-down, the appropriate setup will have to be done again on\n`connectedCallback`.\n:::","usage":{},"docs":"The portal component provides a way to render children into a DOM node that\nexist outside the DOM hierarchy of the parent component.\n\nWhen the limel-portal component is used, it creates a new DOM node (a div element)\nand appends it to a parent element (by default, the body of the document).\nThe child elements of the limel-portal are then moved from\ntheir original location in the DOM to this new div element.\n\nThis technique is often used to overcome CSS stacking context issues,\nor to render UI elements like modals, dropdowns, tooltips, etc.,\nthat need to visually \"break out\" of their container.\n\nUsing this component, we ensure that the content is always rendered in the\ncorrect position, and never covers its own trigger, or another component\nthat is opened in the stacking layer. This way, we don't need to worry about\nz-indexes, or other stacking context issues.\n\n:::important\nThere are some caveats when using this component\n\n1. Events might not bubble up as expected since the content is moved out to\nanother DOM node.\n2. Any styling that is applied to content from the parent will be lost, if the\ncontent is just another web-component it will work without any issues.\nAlternatively, use the `style=\"\"` html attribute.\n3. Any component that is placed inside the container must have a style of\n`max-height: inherit`. This ensures that its placement is calculated\ncorrectly in relation to the trigger, and that it never covers its own\ntrigger.\n4. When the node is moved in the DOM, `disconnectedCallback` and\n`connectedCallback` will be invoked, so if `disconnectedCallback` is used\nto do any tear-down, the appropriate setup will have to be done again on\n`connectedCallback`.\n:::","docsTags":[{"name":"slot","text":"- Content to put inside the portal"},{"name":"private"},{"name":"exampleComponent","text":"limel-example-portal-basic"}],"encapsulation":"shadow","dependents":["limel-date-picker","limel-input-field","limel-menu","limel-picker","limel-popover","limel-prosemirror-adapter","limel-select","limel-tooltip"],"dependencies":[],"dependencyGraph":{"limel-date-picker":["limel-portal"],"limel-input-field":["limel-portal"],"limel-menu":["limel-portal"],"limel-picker":["limel-portal"],"limel-popover":["limel-portal"],"limel-prosemirror-adapter":["limel-portal"],"limel-select":["limel-portal"],"limel-tooltip":["limel-portal"]},"props":[{"name":"anchor","type":"HTMLElement","mutable":false,"reflectToAttr":false,"docs":"The element that the content should be positioned relative to.\nDefaults to the limel-portal element.","docsTags":[],"default":"null","values":[{"type":"HTMLElement"}],"optional":true,"required":false},{"name":"containerId","type":"string","mutable":false,"attr":"container-id","reflectToAttr":true,"docs":"A unique ID.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"containerStyle","type":"object","mutable":false,"reflectToAttr":false,"docs":"Dynamic styling that can be applied to the container holding the content.","docsTags":[],"default":"{}","values":[{"type":"object"}],"optional":false,"required":false},{"name":"inheritParentWidth","type":"boolean","mutable":false,"attr":"inherit-parent-width","reflectToAttr":true,"docs":"Used to make a dropdown have the same width as the trigger, for example\nin `limel-picker`.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Decides which direction the portal content should open.","docsTags":[],"default":"'bottom'","values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false},{"name":"position","type":"\"absolute\" | \"fixed\"","mutable":false,"attr":"position","reflectToAttr":true,"docs":"Position of the content.","docsTags":[],"default":"'absolute'","values":[{"value":"absolute","type":"string"},{"value":"fixed","type":"string"}],"optional":false,"required":false},{"name":"visible","type":"boolean","mutable":false,"attr":"visible","reflectToAttr":true,"docs":"True if the content within the portal should be visible.\n\nIf the content is from within a dialog for instance, this can be set to\ntrue from false when the dialog opens to position the content properly.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--limel-portal-font-family","annotation":"prop","docs":"Font family override for the portal. Because the portal is a direct descendant of the body element, any component placed in the portal inherits its font from the body element. If the body's font is not what should be used for the component in the portal, this property can be used to override the font."}],"slots":[{"name":"","docs":"Content to put inside the portal"}],"parts":[],"listeners":[],"sources":[{"filename":"portal.tsx","type":"tsx","source":"import { Component, Element, h, Prop, Watch } from '@stencil/core';\nimport { OpenDirection } from '../menu/menu.types';\nimport {\n    createPopper,\n    Instance,\n    OptionsGeneric,\n    Placement,\n} from '@popperjs/core';\nimport { FlipModifier } from '@popperjs/core/lib/modifiers/flip';\n\nconst IS_VISIBLE_CLASS = 'is-visible';\nconst IS_HIDING_CLASS = 'is-hiding';\nconst hideAnimationDuration = 300;\n\n/**\n * The portal component provides a way to render children into a DOM node that\n * exist outside the DOM hierarchy of the parent component.\n *\n * When the limel-portal component is used, it creates a new DOM node (a div element)\n * and appends it to a parent element (by default, the body of the document).\n * The child elements of the limel-portal are then moved from\n * their original location in the DOM to this new div element.\n *\n * This technique is often used to overcome CSS stacking context issues,\n * or to render UI elements like modals, dropdowns, tooltips, etc.,\n * that need to visually \"break out\" of their container.\n *\n * Using this component, we ensure that the content is always rendered in the\n * correct position, and never covers its own trigger, or another component\n * that is opened in the stacking layer. This way, we don't need to worry about\n * z-indexes, or other stacking context issues.\n *\n * :::important\n * There are some caveats when using this component\n *\n * 1. Events might not bubble up as expected since the content is moved out to\n * another DOM node.\n * 2. Any styling that is applied to content from the parent will be lost, if the\n * content is just another web-component it will work without any issues.\n * Alternatively, use the `style=\"\"` html attribute.\n * 3. Any component that is placed inside the container must have a style of\n * `max-height: inherit`. This ensures that its placement is calculated\n * correctly in relation to the trigger, and that it never covers its own\n * trigger.\n * 4. When the node is moved in the DOM, `disconnectedCallback` and\n * `connectedCallback` will be invoked, so if `disconnectedCallback` is used\n * to do any tear-down, the appropriate setup will have to be done again on\n * `connectedCallback`.\n * :::\n *\n * @slot - Content to put inside the portal\n * @private\n * @exampleComponent limel-example-portal-basic\n */\n@Component({\n    tag: 'limel-portal',\n    shadow: true,\n    styleUrl: 'portal.scss',\n})\nexport class Portal {\n    /**\n     * Decides which direction the portal content should open.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom';\n\n    /**\n     * Position of the content.\n     */\n    @Prop({ reflect: true })\n    public position: 'fixed' | 'absolute' = 'absolute';\n\n    /**\n     * A unique ID.\n     */\n    @Prop({ reflect: true })\n    public containerId: string;\n\n    /**\n     * Dynamic styling that can be applied to the container holding the content.\n     */\n    @Prop()\n    public containerStyle: object = {};\n\n    /**\n     * Used to make a dropdown have the same width as the trigger, for example\n     * in `limel-picker`.\n     */\n    @Prop({ reflect: true })\n    public inheritParentWidth = false;\n\n    /**\n     * True if the content within the portal should be visible.\n     *\n     * If the content is from within a dialog for instance, this can be set to\n     * true from false when the dialog opens to position the content properly.\n     */\n    @Prop({ reflect: true })\n    public visible = false;\n\n    /**\n     * The element that the content should be positioned relative to.\n     * Defaults to the limel-portal element.\n     */\n    @Prop()\n    public anchor?: HTMLElement = null;\n\n    @Element()\n    private host: HTMLLimelPortalElement;\n\n    private parents: WeakMap<HTMLElement, HTMLElement>;\n    private container: HTMLElement;\n    private popperInstance: Instance;\n    private loaded = false;\n    private observer: ResizeObserver;\n\n    constructor() {\n        this.parents = new WeakMap();\n    }\n\n    public disconnectedCallback() {\n        this.removeContainer();\n        this.destroyPopper();\n        if (this.observer && this.container) {\n            this.observer.unobserve(this.container);\n        }\n\n        this.container = null;\n    }\n\n    public connectedCallback() {\n        if (!this.loaded) {\n            return;\n        }\n\n        if (this.visible) {\n            this.init();\n        }\n    }\n\n    public componentDidLoad() {\n        this.loaded = true;\n        this.connectedCallback();\n    }\n\n    private init() {\n        if (!this.host.isConnected) {\n            return;\n        }\n\n        this.createContainer();\n        this.hideContainer();\n        this.attachContainer();\n        this.styleContainer();\n\n        if (this.visible) {\n            this.createPopper();\n            this.showContainer();\n        }\n\n        if ('ResizeObserver' in window) {\n            this.observer = new ResizeObserver(() => {\n                if (this.popperInstance) {\n                    this.styleContainer();\n                    this.popperInstance.update();\n                }\n            });\n            this.observer.observe(this.container);\n        }\n    }\n\n    public render() {\n        return <slot />;\n    }\n\n    @Watch('visible')\n    protected onVisible() {\n        if (!this.container && this.visible) {\n            this.init();\n\n            return;\n        }\n\n        if (!this.visible) {\n            this.animateHideAndCleanup();\n\n            return;\n        }\n\n        this.styleContainer();\n        this.createPopper();\n        requestAnimationFrame(() => {\n            this.showContainer();\n        });\n    }\n\n    private createContainer() {\n        const slot: HTMLSlotElement =\n            this.host.shadowRoot.querySelector('slot');\n        const content =\n            (slot.assignedElements && slot.assignedElements()) || [];\n\n        this.container = document.createElement('div');\n        this.container.setAttribute('id', this.containerId);\n        this.container.setAttribute('class', 'limel-portal--container');\n        Object.assign(this.container, {\n            portalSource: this.host,\n        });\n\n        // eslint-disable-next-line unicorn/no-array-for-each\n        content.forEach((element: HTMLElement) => {\n            this.parents.set(element, element.parentElement);\n            this.container.append(element);\n        });\n    }\n\n    private attachContainer() {\n        this.getParent().append(this.container);\n    }\n\n    private removeContainer() {\n        if (!this.container) {\n            return;\n        }\n\n        // eslint-disable-next-line unicorn/no-array-for-each\n        [...this.container.children].forEach((element: HTMLElement) => {\n            const parent = this.parents.get(element);\n            if (!parent) {\n                return;\n            }\n\n            parent.append(element);\n        });\n\n        this.container.remove();\n    }\n\n    private hideContainer() {\n        if (!this.container) {\n            return;\n        }\n\n        this.container.classList.remove(IS_VISIBLE_CLASS);\n    }\n\n    private showContainer() {\n        this.container.classList.add(IS_VISIBLE_CLASS);\n    }\n\n    private animateHideAndCleanup() {\n        if (!this.container) {\n            return;\n        }\n\n        this.container.classList.add(IS_HIDING_CLASS);\n        this.styleContainer();\n\n        setTimeout(() => {\n            this.container.classList.remove(IS_HIDING_CLASS);\n            if (!this.visible) {\n                this.container.classList.remove(IS_VISIBLE_CLASS);\n                this.destroyPopper();\n            }\n        }, hideAnimationDuration);\n    }\n\n    private styleContainer() {\n        this.setContainerWidth();\n        this.setContainerHeight();\n        this.setContainerStyles();\n    }\n\n    private setContainerWidth() {\n        const hostWidth = this.host.getBoundingClientRect().width;\n\n        if (this.inheritParentWidth) {\n            const containerWidth = this.getContentWidth(this.container);\n            let width = containerWidth;\n            if (hostWidth > 0) {\n                width = hostWidth;\n            }\n\n            this.container.style.width = `${width}px`;\n        }\n    }\n\n    private getContentWidth(element: HTMLElement | Element) {\n        if (!element) {\n            return null;\n        }\n\n        const width = element.getBoundingClientRect().width;\n        if (width !== 0) {\n            return width;\n        }\n\n        const elementContent = element.querySelector('*');\n\n        return this.getContentWidth(elementContent);\n    }\n\n    private setContainerStyles() {\n        for (const property of Object.keys(this.containerStyle)) {\n            this.container.style[property] = this.containerStyle[property];\n        }\n    }\n\n    private createPopper() {\n        const config = this.createPopperConfig();\n\n        this.popperInstance = createPopper(\n            this.anchor || this.host,\n            this.container,\n            config\n        );\n    }\n\n    private destroyPopper() {\n        this.popperInstance?.destroy();\n        this.popperInstance = null;\n    }\n\n    private createPopperConfig(): Partial<\n        OptionsGeneric<Partial<FlipModifier>>\n    > {\n        const placement = this.getPlacement(this.openDirection);\n        const flipPlacement = this.getFlipPlacement(this.openDirection);\n\n        return {\n            strategy: this.position,\n            placement: placement,\n            modifiers: [\n                {\n                    name: 'flip',\n                    options: {\n                        fallbackPlacements: [flipPlacement],\n                    },\n                },\n            ],\n        };\n    }\n\n    private getPlacement(direction: OpenDirection): Placement {\n        const placements: Record<OpenDirection, Placement> = {\n            'left-start': 'left-start',\n            left: 'left',\n            'left-end': 'left-end',\n            'right-start': 'right-start',\n            right: 'right',\n            'right-end': 'right-end',\n            'top-start': 'top-start',\n            top: 'top',\n            'top-end': 'top-end',\n            'bottom-start': 'bottom-start',\n            bottom: 'bottom',\n            'bottom-end': 'bottom-end',\n        };\n\n        return placements[direction];\n    }\n\n    private getFlipPlacement(direction: OpenDirection): Placement {\n        const flipPlacements: Record<OpenDirection, Placement> = {\n            'left-start': 'right-start',\n            left: 'right',\n            'left-end': 'right-end',\n            'right-start': 'left-start',\n            right: 'left',\n            'right-end': 'left-end',\n            'top-start': 'bottom-start',\n            top: 'bottom',\n            'top-end': 'bottom-end',\n            'bottom-start': 'top-start',\n            bottom: 'top',\n            'bottom-end': 'top-end',\n        };\n\n        return flipPlacements[direction];\n    }\n\n    private setContainerHeight() {\n        const viewHeight = Math.max(\n            document.documentElement.clientHeight || 0,\n            window.innerHeight || 0\n        );\n\n        const { top, bottom } = this.host.getBoundingClientRect();\n        const spaceAboveTopOfSurface = Math.max(top, 0);\n        const spaceBelowTopOfSurface = Math.max(viewHeight - bottom, 0);\n        const extraCosmeticSpace = 16;\n        const maxHeight =\n            Math.max(spaceAboveTopOfSurface, spaceBelowTopOfSurface) -\n            extraCosmeticSpace;\n\n        this.container.style.maxHeight = `${maxHeight}px`;\n    }\n\n    // Returns the parent element where the content of the portal will be moved to.\n    // It needs to have styling of the portal container.\n    private getParent() {\n        let element: Element | undefined = this.anchor || this.host;\n\n        while (element) {\n            const parent = element.closest('.limel-portal--parent');\n            if (parent) {\n                return parent;\n            }\n\n            element = (element.getRootNode() as ShadowRoot).host;\n        }\n\n        return document.body;\n    }\n}\n"},{"filename":"portal.scss","type":"scss","source":"/**\n * @prop --limel-portal-font-family: Font family override for the portal. Because the portal is a direct descendant of the body element, any component placed in the portal inherits its font from the body element. If the body's font is not what should be used for the component in the portal, this property can be used to override the font.\n */\n\n:host(limel-portal) {\n    display: block;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 100%;\n    pointer-events: none;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\nslot {\n    display: none;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow","filePath":"./src/components/progress-flow/progress-flow.tsx","fileName":"progress-flow.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/usage","tag":"limel-progress-flow","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-progress-flow-basic"},{"name":"exampleComponent","text":"limel-example-progress-flow-secondary-text"},{"name":"exampleComponent","text":"limel-example-progress-flow-disabled-step"},{"name":"exampleComponent","text":"limel-example-progress-flow-colors"},{"name":"exampleComponent","text":"limel-example-progress-flow-colors-css"},{"name":"exampleComponent","text":"limel-example-progress-flow-off-progress-steps"},{"name":"exampleComponent","text":"limel-example-progress-flow-narrow"}],"encapsulation":"shadow","dependents":["limel-example-progress-flow-basic","limel-example-progress-flow-colors","limel-example-progress-flow-colors-css","limel-example-progress-flow-disabled-step","limel-example-progress-flow-narrow","limel-example-progress-flow-off-progress-steps","limel-example-progress-flow-secondary-text"],"dependencies":["limel-progress-flow-item"],"dependencyGraph":{"limel-progress-flow":["limel-progress-flow-item"],"limel-progress-flow-item":["limel-icon"],"limel-example-progress-flow-basic":["limel-progress-flow"],"limel-example-progress-flow-colors":["limel-progress-flow"],"limel-example-progress-flow-colors-css":["limel-progress-flow"],"limel-example-progress-flow-disabled-step":["limel-progress-flow"],"limel-example-progress-flow-narrow":["limel-progress-flow"],"limel-example-progress-flow-off-progress-steps":["limel-progress-flow"],"limel-example-progress-flow-secondary-text":["limel-progress-flow"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"flowItems","type":"FlowItem[]","mutable":false,"reflectToAttr":false,"docs":"What flow items to render","docsTags":[],"default":"[]","values":[{"type":"FlowItem[]"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"FlowItem","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when a new value has been selected from the progress flow","docsTags":[]}],"styles":[{"name":"--progress-flow-icon-color--inactive","annotation":"prop","docs":"Color of the optional icons used in each step. Only affects inactive steps, defaults to text colors for inactive, active, or passed step."},{"name":"--progress-flow-step-background-color","annotation":"prop","docs":"Background color of steps, defaults to `--contrast-600`."},{"name":"--progress-flow-step-background-color--passed","annotation":"prop","docs":"Background color of passed steps, defaults to the background color the step has when selected."},{"name":"--progress-flow-step-background-color--selected","annotation":"prop","docs":"Background color of selected step, defaults to `--lime-primary-color`."},{"name":"--progress-flow-step-divider-color","annotation":"prop","docs":"Color of the arrow shaped dividers between steps which must be the same as component's background, defaults to `--contrast-100`."},{"name":"--progress-flow-step-text-color","annotation":"prop","docs":"Text of steps, defaults to `--contrast-1200`."},{"name":"--progress-flow-step-text-color--passed","annotation":"prop","docs":"Text color of passed steps, defaults to the text color the step has when selected."},{"name":"--progress-flow-step-text-color--selected","annotation":"prop","docs":"Text color of selected step, defaults to `--lime-primary-color`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { FlowItem } from './progress-flow.types';\nimport { getIconColor } from '../icon/get-icon-props';\n\n/**\n * @exampleComponent limel-example-progress-flow-basic\n * @exampleComponent limel-example-progress-flow-secondary-text\n * @exampleComponent limel-example-progress-flow-disabled-step\n * @exampleComponent limel-example-progress-flow-colors\n * @exampleComponent limel-example-progress-flow-colors-css\n * @exampleComponent limel-example-progress-flow-off-progress-steps\n * @exampleComponent limel-example-progress-flow-narrow\n */\n@Component({\n    tag: 'limel-progress-flow',\n    shadow: true,\n    styleUrl: 'progress-flow.scss',\n})\nexport class ProgressFlow {\n    @Element()\n    public element: HTMLLimelProgressFlowElement;\n\n    /**\n     * What flow items to render\n     */\n    @Prop()\n    public flowItems: FlowItem[] = [];\n\n    /**\n     * Set to `true` to disable the progress flow.\n     * Use `disabled` to indicate that the component can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop()\n    public disabled = false;\n\n    /**\n     * Disables the progress flow when `true`.\n     * This does not visualize the component that much differently.\n     * But since the component does not provide any feedback that users can\n     * interact with the component, it makes it perfect for illustrative and\n     * informative porpuses.\n     */\n    @Prop()\n    public readonly = false;\n\n    /**\n     * Fired when a new value has been selected from the progress flow\n     */\n    @Event()\n    public change: EventEmitter<FlowItem>;\n\n    private selectedItemIndex: number;\n\n    public componentDidRender() {\n        this.scrollToSelectedItem();\n    }\n\n    public componentDidLoad() {\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        const regularFlowItems = this.flowItems.filter((item) => {\n            return !item.isOffProgress;\n        });\n        const endPhaseItems = this.flowItems.filter((item) => {\n            return item.isOffProgress;\n        });\n        this.selectedItemIndex = regularFlowItems.findIndex((item) => {\n            return item.selected;\n        });\n\n        return [\n            regularFlowItems.map(this.renderRegularFlowItem),\n            endPhaseItems.map(this.renderEndPhaseItem),\n        ];\n    }\n\n    private renderRegularFlowItem = (\n        item: FlowItem,\n        index: number,\n        array: FlowItem[]\n    ) => {\n        return (\n            <limel-progress-flow-item\n                class={{\n                    'flow-item': true,\n                    first: index === 0,\n                    last: index === array.length - 1,\n                    passed: index < this.selectedItemIndex,\n                    selected: item.selected,\n                }}\n                style={this.getItemStyle(item)}\n                disabled={this.disabled || this.readonly}\n                readonly={this.readonly}\n                item={item}\n                onInteract={this.handleFlowItemClick(item)}\n                data-tracking-value={item.value}\n                currentStep={index === this.selectedItemIndex}\n            />\n        );\n    };\n\n    private renderEndPhaseItem = (\n        item: FlowItem,\n        index: number,\n        array: FlowItem[]\n    ) => {\n        return (\n            <limel-progress-flow-item\n                class={{\n                    'flow-item': true,\n                    'off-progress-item': true,\n                    selected: item.selected,\n                    'first-off-progress-item': index === 0,\n                    'last-off-progress-item': index === array.length - 1,\n                }}\n                style={this.getItemStyle(item)}\n                disabled={this.disabled || this.readonly}\n                readonly={this.readonly}\n                item={item}\n                onInteract={this.handleFlowItemClick(item)}\n                data-tracking-value={item.value}\n            />\n        );\n    };\n\n    private handleFlowItemClick = (flowItem: FlowItem) => () => {\n        if (!flowItem.selected && !flowItem.disabled && !this.disabled) {\n            this.change.emit(flowItem);\n        }\n    };\n\n    private getItemStyle(flowItem: FlowItem) {\n        const color = getIconColor(flowItem.icon, flowItem.iconColor);\n        const style: any = {};\n\n        if (flowItem?.selectedColor) {\n            style['--progress-flow-step-background-color--selected'] =\n                flowItem.selectedColor;\n        }\n\n        if (flowItem?.passedColor) {\n            style['--progress-flow-step-background-color--passed'] =\n                flowItem.passedColor;\n        }\n\n        if (color) {\n            style['--progress-flow-icon-color--inactive'] = color;\n        }\n\n        return style;\n    }\n\n    private scrollToSelectedItem() {\n        const selectedElement = this.getElementForSelectedItem();\n        if (selectedElement) {\n            const selectedItemLeftPosition =\n                selectedElement.offsetLeft - this.element.offsetLeft;\n            const selectedElementLeftPositionCentered =\n                selectedItemLeftPosition - this.element.offsetWidth / 2;\n            const selectedElementCentered =\n                selectedElementLeftPositionCentered +\n                selectedElement.offsetWidth / 2;\n            this.element.scrollTo({\n                behavior: 'smooth',\n                left: selectedElementCentered,\n            });\n        }\n    }\n\n    private getElementForSelectedItem(): HTMLLimelProgressFlowItemElement {\n        return this.element.shadowRoot.querySelector('.flow-item.selected');\n    }\n\n    private triggerIconColorWarning() {\n        for (const flowItem of this.flowItems) {\n            if (flowItem.iconColor) {\n                console.warn(\n                    \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\"\n                );\n            }\n        }\n    }\n}\n"},{"filename":"progress-flow.scss","type":"scss","source":"@use '../../style/functions';\n\n/**\n* @prop --progress-flow-step-background-color: Background color of steps, defaults to `--contrast-600`.\n* @prop --progress-flow-step-background-color--selected: Background color of selected step, defaults to `--lime-primary-color`.\n* @prop --progress-flow-step-background-color--passed: Background color of passed steps, defaults to the background color the step has when selected.\n* @prop --progress-flow-step-text-color: Text of steps, defaults to `--contrast-1200`.\n* @prop --progress-flow-step-text-color--selected: Text color of selected step, defaults to `--lime-primary-color`.\n* @prop --progress-flow-step-text-color--passed: Text color of passed steps, defaults to the text color the step has when selected.\n* @prop --progress-flow-step-divider-color: Color of the arrow shaped dividers between steps which must be the same as component's background, defaults to `--contrast-100`.\n* @prop --progress-flow-icon-color--inactive: Color of the optional icons used in each step. Only affects inactive steps, defaults to text colors for inactive, active, or passed step.\n*/\n\n:host {\n    --step-height: 2rem;\n    --selected-indicator-right: -0.5rem;\n    --max-text-width: 10rem;\n\n    isolation: isolate;\n    box-sizing: border-box;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n\n    overflow-x: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    padding: functions.pxToRem(4); // needed for the focus effect\n\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n}\n\n:host(.is-narrow) {\n    --step-height: 1.5rem;\n    --selected-indicator-right: 0;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow-item","filePath":"./src/components/progress-flow/progress-flow-item/progress-flow-item.tsx","fileName":"progress-flow-item.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow-item/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow-item/usage","tag":"limel-progress-flow-item","overview":"","usage":{},"docs":"","docsTags":[{"name":"private"}],"encapsulation":"none","dependents":["limel-progress-flow"],"dependencies":["limel-icon"],"dependencyGraph":{"limel-progress-flow-item":["limel-icon"],"limel-progress-flow":["limel-progress-flow-item"]},"props":[{"name":"currentStep","type":"boolean","mutable":false,"attr":"current-step","reflectToAttr":false,"docs":"True for current step","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":false,"docs":"True if the flow item should be disabled","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"item","type":"FlowItem","mutable":false,"reflectToAttr":false,"docs":"The flow item that should be rendered","docsTags":[],"default":"null","values":[{"type":"FlowItem"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":false,"docs":"True if the flow item should be readonly","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"interact","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Fired when clicking on the flow item","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"progress-flow-item.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { FlowItem } from '../progress-flow.types';\nimport { getIconName } from '../../icon/get-icon-props';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-progress-flow-item',\n    shadow: false,\n    styleUrl: 'progress-flow-item.scss',\n})\nexport class ProgressFlowItem {\n    @Element()\n    public element: HTMLLimelProgressFlowItemElement;\n\n    /**\n     * The flow item that should be rendered\n     */\n    @Prop()\n    public item: FlowItem = null;\n\n    /**\n     * True if the flow item should be disabled\n     */\n    @Prop()\n    public disabled = false;\n\n    /**\n     * True if the flow item should be readonly\n     */\n    @Prop()\n    public readonly = false;\n\n    /**\n     * True for current step\n     */\n    @Prop()\n    public currentStep: boolean = false;\n\n    /**\n     * Fired when clicking on the flow item\n     */\n    @Event()\n    public interact: EventEmitter<void>;\n\n    public render() {\n        if (!this.item) {\n            return;\n        }\n\n        return [\n            <button\n                tabindex=\"0\"\n                title={this.getToolTipText()}\n                type=\"button\"\n                class={{\n                    step: true,\n                    selected: this.item?.selected,\n                    disabled: this.isDisabled(),\n                    readonly: this.readonly,\n                }}\n                onClick={this.handleClick}\n                disabled={this.isDisabled()}\n                aria-current={this.currentStep ? 'step' : null}\n            >\n                {this.renderIcon()}\n                <span class=\"text\">{this.item.text}</span>\n                {this.renderDivider()}\n                {this.renderLockIcon()}\n            </button>,\n            this.renderSecondaryText(),\n        ];\n    }\n\n    private isDisabled() {\n        return this.item?.disabled || this.readonly || this.disabled;\n    }\n\n    private getToolTipText() {\n        if (!this.item.secondaryText) {\n            return this.item.text;\n        }\n\n        return [this.item.text, this.item.secondaryText].join(' · ');\n    }\n\n    private handleClick = () => {\n        this.interact.emit();\n    };\n\n    private renderSecondaryText() {\n        if (!this.item?.secondaryText) {\n            return;\n        }\n\n        return <div class=\"secondary-text\">{this.item.secondaryText}</div>;\n    }\n\n    private renderIcon() {\n        if (!this.item.icon) {\n            return;\n        }\n\n        const name = getIconName(this.item.icon);\n\n        return <limel-icon name={name} size=\"small\" class=\"icon\" />;\n    }\n\n    private renderDivider() {\n        if (this.item.isOffProgress) {\n            return;\n        }\n\n        return <div class=\"divider\" />;\n    }\n\n    private renderLockIcon() {\n        if (!this.isDisabled()) {\n            return;\n        }\n\n        return <limel-icon name=\"lock\" class=\"lock-icon\" />;\n    }\n}\n"},{"filename":"progress-flow-item.scss","type":"scss","source":"@use '../../../style/mixins';\n@use '../../../style/functions';\n\n$limel-progress-flow-step-content: 2;\n$limel-progress-flow-divider: 1;\n\n.flow-item {\n    --step-background: var(\n        --progress-flow-step-background-color,\n        rgb(var(--contrast-600))\n    );\n    --step-background--selected: var(\n        --progress-flow-step-background-color--selected,\n        var(--mdc-theme-primary)\n    );\n    --step-background--passed: var(\n        --progress-flow-step-background-color--passed,\n        var(--step-background--selected)\n    );\n\n    --step-text: var(\n        --progress-flow-step-text-color,\n        rgb(var(--contrast-1200))\n    );\n    --step-text--selected: var(\n        --progress-flow-step-text-color--selected,\n        var(--mdc-theme-on-primary)\n    );\n    --step-text--passed: var(\n        --progress-flow-step-text-color--passed,\n        var(--step-text--selected)\n    );\n\n    --step-divider-color: var(\n        --progress-flow-step-divider-color,\n        rgb(var(--contrast-100))\n    );\n\n    position: relative;\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n\n    &:not(.off-progress-item, .last) {\n        .divider {\n            &:after {\n                content: '';\n            }\n        }\n    }\n\n    &.off-progress-item {\n        padding-left: functions.pxToRem(8);\n    }\n\n    &.first-off-progress-item {\n        padding-left: functions.pxToRem(16);\n    }\n}\n\n.step {\n    transition:\n        background-color 0.2s ease,\n        box-shadow 0.2s ease;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    width: 100%;\n    height: var(--step-height);\n    border: none;\n    font-size: functions.pxToRem(14);\n\n    &.disabled {\n        cursor: not-allowed;\n\n        &.readonly {\n            opacity: 1;\n            cursor: default;\n        }\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:focus-visible {\n        box-shadow: var(--shadow-depth-8-focused);\n    }\n\n    .flow-item:not(.off-progress-item, .first) & {\n        padding-left: calc(var(--step-height) / 2);\n    }\n\n    .flow-item:not(.selected) & {\n        &:not(.disabled) {\n            cursor: pointer;\n            &:hover {\n                box-shadow: var(--button-shadow-normal);\n            }\n            &:active {\n                box-shadow: var(--button-shadow-pressed);\n            }\n        }\n    }\n\n    .off-progress-item & {\n        border-radius: functions.pxToRem(4);\n        padding: 0 functions.pxToRem(12);\n\n        .icon {\n            margin-left: 0;\n        }\n    }\n    .flow-item.first & {\n        border-top-left-radius: var(--step-height);\n        border-bottom-left-radius: var(--step-height);\n        padding-left: functions.pxToRem(20);\n    }\n    .flow-item.last & {\n        border-top-right-radius: var(--step-height);\n        border-bottom-right-radius: var(--step-height);\n        padding-right: functions.pxToRem(20);\n    }\n}\n\n.divider {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: var(--step-height);\n    height: var(--step-height);\n\n    position: absolute;\n    z-index: $limel-progress-flow-divider;\n    right: calc(var(--step-height) / 2 * -1);\n    overflow: hidden;\n\n    &:after {\n        position: absolute;\n        display: block;\n\n        box-sizing: border-box;\n        transition: background-color 0.2s ease;\n\n        width: 100%;\n        height: 100%;\n        right: calc(var(--step-height) / 5);\n        transform: rotate(45deg);\n        border: {\n            style: solid;\n            width: functions.pxToRem(2) functions.pxToRem(2) 0 0;\n            radius: 0 functions.pxToRem(8) 0 0;\n            color: var(--step-divider-color);\n        }\n    }\n    .flow-item.last & {\n        width: 0;\n    }\n}\n\n.text,\n.secondary-text {\n    @include mixins.truncate-text();\n    max-width: var(--max-text-width);\n    z-index: $limel-progress-flow-step-content;\n}\n\n.secondary-text {\n    font-size: functions.pxToRem(12);\n    margin: auto;\n    padding-left: calc(var(--step-height) / 2);\n}\n\n.icon {\n    margin: 0 functions.pxToRem(8) 0 functions.pxToRem(4);\n    z-index: $limel-progress-flow-step-content;\n}\n\n@import './partial-styles/_selected-indicator';\n@import './partial-styles/_colors';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter","filePath":"./src/components/text-editor/prosemirror-adapter/prosemirror-adapter.tsx","fileName":"prosemirror-adapter.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/usage","tag":"limel-prosemirror-adapter","overview":"The ProseMirror adapter offers a rich text editing experience with markdown support.\n[Read more...](https://prosemirror.net/)","usage":{},"docs":"The ProseMirror adapter offers a rich text editing experience with markdown support.\n[Read more...](https://prosemirror.net/)","docsTags":[{"name":"exampleComponent","text":"limel-example-prosemirror-adapter-basic"},{"name":"exampleComponent","text":"limel-example-prosemirror-adapter-with-custom-menu"},{"name":"beta"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-example-prosemirror-adapter-basic","limel-example-prosemirror-adapter-with-custom-menu","limel-text-editor"],"dependencies":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"dependencyGraph":{"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-example-prosemirror-adapter-basic":["limel-prosemirror-adapter"],"limel-example-prosemirror-adapter-with-custom-menu":["limel-prosemirror-adapter"],"limel-text-editor":["limel-prosemirror-adapter"]},"props":[{"name":"contentType","type":"\"html\" | \"markdown\"","mutable":false,"attr":"content-type","reflectToAttr":false,"docs":"The type of content that the editor should handle and emit, defaults to `markdown`\n\nAssumed to be set only once, so not reactive to changes","docsTags":[],"default":"'markdown'","values":[{"value":"html","type":"string"},{"value":"markdown","type":"string"}],"optional":false,"required":false},{"name":"customElements","type":"CustomElementDefinition[]","mutable":false,"reflectToAttr":false,"docs":"set to private to avoid usage while under development","docsTags":[{"name":"private"},{"name":"alpha"}],"default":"[]","values":[{"type":"CustomElementDefinition[]"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.","docsTags":[],"values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"triggerCharacters","type":"TriggerCharacter[]","mutable":false,"reflectToAttr":false,"docs":"set to private to avoid usage while under development","docsTags":[{"name":"private"},{"name":"alpha"}],"default":"[]","values":[{"type":"TriggerCharacter[]"}],"optional":false,"required":false},{"name":"ui","type":"\"minimal\" | \"no-toolbar\" | \"standard\"","mutable":false,"attr":"ui","reflectToAttr":false,"docs":"Specifies the visual appearance of the editor.","docsTags":[],"default":"'standard'","values":[{"value":"minimal","type":"string"},{"value":"no-toolbar","type":"string"},{"value":"standard","type":"string"}],"optional":false,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":false,"docs":"The value of the editor, expected to be markdown","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a change is made to the editor","docsTags":[]},{"event":"imagePasted","detail":"ImageInserter","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a image is pasted into the editor","docsTags":[{"name":"private"},{"name":"alpha"}]},{"event":"imageRemoved","detail":"EditorImage","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a image is removed from the editor","docsTags":[{"name":"private"},{"name":"alpha"}]},{"event":"metadataChange","detail":"EditorMetadata","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when the metadata of the editor changes (images and links)","docsTags":[{"name":"private"},{"name":"alpha"}]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"prosemirror-adapter.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    Host,\n    Prop,\n    State,\n    Watch,\n    h,\n} from '@stencil/core';\nimport { EditorState, Transaction, Selection } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\nimport { Schema, DOMParser } from 'prosemirror-model';\nimport { schema } from 'prosemirror-schema-basic';\nimport { addListNodes } from 'prosemirror-schema-list';\nimport { exampleSetup } from 'prosemirror-example-setup';\nimport { keymap } from 'prosemirror-keymap';\nimport { ActionBarItem } from '../../../components/action-bar/action-bar.types';\nimport { ListSeparator } from '../../../components/list/list-item.types';\nimport { MenuCommandFactory } from './menu/menu-commands';\nimport { menuTranslationIDs, getTextEditorMenuItems } from './menu/menu-items';\nimport { ContentTypeConverter } from '../utils/content-type-converter';\nimport { MarkdownConverter } from '../utils/markdown-converter';\nimport { HTMLConverter } from '../utils/html-converter';\nimport {\n    EditorMenuTypes,\n    EditorTextLink,\n    editorMenuTypesArray,\n} from './menu/types';\nimport translate from '../../../global/translations';\nimport { createRandomString } from '../../../util/random-string';\nimport { isItem } from '../../action-bar/is-item';\nimport { cloneDeep, debounce } from 'lodash-es';\nimport { Languages } from '../../date-picker/date.types';\nimport { strikethrough } from './menu/menu-schema-extender';\nimport { createLinkPlugin } from './plugins/link/link-plugin';\nimport { linkMarkSpec } from './plugins/link/link-mark-spec';\nimport { createImageInserterPlugin } from './plugins/image/inserter';\nimport { createImageViewPlugin } from './plugins/image/view';\nimport { createMenuStateTrackingPlugin } from './plugins/menu-state-tracking-plugin';\nimport { createActionBarInteractionPlugin } from './plugins/menu-action-interaction-plugin';\nimport { CustomElementDefinition } from '../../../global/shared-types/custom-element.types';\nimport { createNodeSpec } from '../utils/plugin-factory';\nimport { createTriggerPlugin } from './plugins/trigger/factory';\nimport {\n    TriggerCharacter,\n    ImageInserter,\n    EditorImage,\n    EditorMetadata,\n    EditorLink,\n} from '../text-editor.types';\nimport { getTableNodes, getTableEditingPlugins } from './plugins/table-plugin';\nimport { getImageNode, imageCache } from './plugins/image/node';\nimport { EditorUiType } from '../types';\nimport {\n    getMetadataFromDoc,\n    hasMetadataChanged,\n} from '../utils/metadata-utils';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\n/**\n * The ProseMirror adapter offers a rich text editing experience with markdown support.\n * [Read more...](https://prosemirror.net/)\n *\n * @exampleComponent limel-example-prosemirror-adapter-basic\n * @exampleComponent limel-example-prosemirror-adapter-with-custom-menu\n * @beta\n * @private\n */\n@Component({\n    tag: 'limel-prosemirror-adapter',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'prosemirror-adapter.scss',\n})\nexport class ProsemirrorAdapter {\n    /**\n     * The type of content that the editor should handle and emit, defaults to `markdown`\n     *\n     * Assumed to be set only once, so not reactive to changes\n     */\n    @Prop()\n    public contentType: 'markdown' | 'html' = 'markdown';\n\n    /**\n     * The value of the editor, expected to be markdown\n     */\n    @Prop()\n    public value: string;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop({ reflect: true })\n    public language: Languages;\n\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled?: boolean = false;\n\n    /**\n     * set to private to avoid usage while under development\n     *\n     * @private\n     * @alpha\n     */\n    @Prop()\n    customElements: CustomElementDefinition[] = [];\n\n    /**\n     * set to private to avoid usage while under development\n     *\n     * @private\n     * @alpha\n     */\n    @Prop()\n    triggerCharacters: TriggerCharacter[] = [];\n\n    /**\n     * Specifies the visual appearance of the editor.\n     */\n    @Prop()\n    public ui: EditorUiType = 'standard';\n\n    @Element()\n    private host: HTMLLimelTextEditorElement;\n\n    private portalId: string;\n\n    @State()\n    private view: EditorView;\n\n    @State()\n    private actionBarItems: Array<\n        ActionBarItem<EditorMenuTypes> | ListSeparator\n    > = [];\n\n    @State()\n    private link: EditorTextLink = { href: 'https://' };\n\n    /**\n     * Open state of the dialog\n     */\n    @State()\n    public isLinkMenuOpen: boolean = false;\n\n    private menuCommandFactory: MenuCommandFactory;\n    private schema: Schema;\n    private contentConverter: ContentTypeConverter;\n    private actionBarElement: HTMLElement;\n    private lastEmittedValue: string;\n    private changeWaiting = false;\n    private transactionFired = false;\n    private lastClickedPos: number | null = null;\n    private metadata: EditorMetadata = { images: [], links: [] };\n\n    /**\n     *  Used to stop change event emitting as result of getting updated value from consumer\n     */\n    private suppressChangeEvent = false;\n\n    /**\n     * Dispatched when a change is made to the editor\n     */\n    @Event()\n    private change: EventEmitter<string>;\n\n    /**\n     * Dispatched when a image is pasted into the editor\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    private imagePasted: EventEmitter<ImageInserter>;\n\n    /**\n     * Dispatched when a image is removed from the editor\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    private imageRemoved: EventEmitter<EditorImage>;\n\n    /**\n     * Dispatched when the metadata of the editor changes (images and links)\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    private metadataChange: EventEmitter<EditorMetadata>;\n\n    constructor() {\n        this.portalId = createRandomString();\n    }\n\n    @Watch('value')\n    protected watchValue(newValue: string) {\n        if (!this.view) {\n            return;\n        }\n\n        if (this.changeWaiting) {\n            // A change is pending; do not update the editor's content\n            return;\n        }\n\n        const currentContent = this.contentConverter.serialize(\n            this.view,\n            this.schema\n        );\n\n        // If the new value is the same as the current content, do nothing\n        if (newValue === currentContent) {\n            return;\n        }\n\n        // Update the editor's content with the new value\n        this.updateView(newValue);\n    }\n\n    public componentWillLoad() {\n        this.getActionBarItems();\n        this.setupContentConverter();\n    }\n\n    public componentDidLoad() {\n        // Stencil complains loudly about triggering rerenders in\n        // componentDidLoad, but we have to, so we're using setTimeout to\n        // suppress the warning. /Ads\n        setTimeout(() => {\n            this.initializeTextEditor();\n        }, 0);\n    }\n\n    public connectedCallback() {\n        if (this.view) {\n            this.initializeTextEditor();\n        }\n\n        this.host.addEventListener(\n            'open-editor-link-menu',\n            this.handleOpenLinkMenu\n        );\n    }\n\n    public disconnectedCallback() {\n        imageCache.clear();\n\n        this.host.removeEventListener(\n            'open-editor-link-menu',\n            this.handleOpenLinkMenu\n        );\n        this.view?.dom?.removeEventListener('blur', this.handleBlur);\n        this.view?.dom?.removeEventListener('mousedown', this.handleMouseDown);\n        this.view?.destroy();\n    }\n\n    public render() {\n        return (\n            <Host onFocus={this.handleFocus}>\n                <div id=\"editor\" />\n                {this.renderToolbar()}\n                {this.renderLinkMenu()}\n            </Host>\n        );\n    }\n\n    renderToolbar() {\n        if (this.actionBarItems.length === 0 || this.ui === 'no-toolbar') {\n            return;\n        }\n\n        return (\n            <div class=\"toolbar\">\n                <limel-action-bar\n                    ref={(el) => (this.actionBarElement = el)}\n                    accessibleLabel=\"Toolbar\"\n                    actions={this.actionBarItems}\n                    onItemSelected={this.handleActionBarItem}\n                />\n            </div>\n        );\n    }\n\n    renderLinkMenu() {\n        if (!this.isLinkMenuOpen) {\n            return;\n        }\n\n        return (\n            <limel-portal\n                containerId={this.portalId}\n                visible={this.isLinkMenuOpen}\n                openDirection=\"top\"\n                inheritParentWidth={true}\n                anchor={this.actionBarElement}\n            >\n                <limel-text-editor-link-menu\n                    link={this.link}\n                    isOpen={this.isLinkMenuOpen}\n                    onLinkChange={this.handleLinkChange}\n                    onCancel={this.handleCancelLinkMenu}\n                    onSave={this.handleSaveLinkMenu}\n                />\n            </limel-portal>\n        );\n    }\n\n    private setupContentConverter() {\n        if (this.contentType === 'markdown') {\n            this.contentConverter = new MarkdownConverter(\n                this.customElements,\n                this.language\n            );\n        } else if (this.contentType === 'html') {\n            this.contentConverter = new HTMLConverter(this.customElements);\n        } else {\n            throw new Error(\n                `Unsupported content type: ${this.contentType}. Only 'markdown' and 'html' are supported.`\n            );\n        }\n    }\n\n    private getActionBarItems = () => {\n        this.actionBarItems = getTextEditorMenuItems().map(\n            this.getTranslatedItem\n        );\n    };\n\n    private getTranslatedItem = (item) => {\n        const newItem = cloneDeep(item);\n\n        if (isItem(item)) {\n            const translationId = menuTranslationIDs[item.value];\n\n            if (translationId) {\n                newItem.text = translate.get(translationId, this.language);\n            }\n        }\n\n        return newItem;\n    };\n\n    private async initializeTextEditor() {\n        this.schema = this.initializeSchema();\n        const initialDoc = await this.parseInitialContent();\n        this.menuCommandFactory = new MenuCommandFactory(this.schema);\n        this.view = new EditorView(\n            this.host.shadowRoot.querySelector('#editor'),\n            {\n                state: this.createEditorState(initialDoc),\n                dispatchTransaction: this.handleTransaction,\n            }\n        );\n\n        this.view.dom.addEventListener('blur', this.handleBlur);\n        this.view.dom.addEventListener('mousedown', this.handleMouseDown);\n\n        if (this.value) {\n            this.updateView(this.value);\n        }\n    }\n\n    private initializeSchema() {\n        let nodes = schema.spec.nodes;\n\n        for (const customElement of this.customElements) {\n            const newNodeSpec = createNodeSpec(customElement);\n            const nodeName = customElement.tagName;\n\n            nodes = nodes.append({ [nodeName]: newNodeSpec });\n        }\n        nodes = addListNodes(nodes, 'paragraph block*', 'block');\n\n        if (this.contentType === 'html') {\n            nodes = nodes.append(getTableNodes());\n        }\n\n        nodes = nodes.append(getImageNode(this.language));\n\n        return new Schema({\n            nodes: nodes,\n            marks: schema.spec.marks.append({\n                strikethrough: strikethrough,\n                link: linkMarkSpec,\n            }),\n        });\n    }\n\n    private async parseInitialContent() {\n        const initialContentElement = document.createElement('div');\n\n        if (this.value) {\n            initialContentElement.innerHTML =\n                await this.contentConverter.parseAsHTML(\n                    this.value,\n                    this.schema\n                );\n        } else {\n            initialContentElement.innerHTML = '<p></p>';\n        }\n\n        return DOMParser.fromSchema(this.schema).parse(initialContentElement);\n    }\n\n    private createEditorState(initialDoc) {\n        return EditorState.create({\n            doc: initialDoc,\n            plugins: [\n                ...exampleSetup({ schema: this.schema, menuBar: false }),\n                keymap(this.menuCommandFactory.buildKeymap()),\n                createTriggerPlugin(\n                    this.triggerCharacters,\n                    this.contentConverter\n                ),\n                createLinkPlugin(this.handleNewLinkSelection),\n                createImageInserterPlugin(this.imagePasted.emit),\n                createImageViewPlugin(this.language),\n                createMenuStateTrackingPlugin(\n                    editorMenuTypesArray,\n                    this.menuCommandFactory,\n                    this.updateActiveActionBarItems\n                ),\n                createActionBarInteractionPlugin(this.menuCommandFactory),\n                ...getTableEditingPlugins(this.contentType === 'html'),\n            ],\n        });\n    }\n\n    private updateActiveActionBarItems = (\n        activeTypes: Record<EditorMenuTypes, boolean>,\n        allowedTypes: Record<EditorMenuTypes, boolean>\n    ) => {\n        const newItems = getTextEditorMenuItems().map((item) => {\n            if (isItem(item)) {\n                return {\n                    ...item,\n                    selected: activeTypes[item.value],\n                    allowed: allowedTypes[item.value],\n                };\n            }\n\n            return item;\n        });\n\n        this.actionBarItems = newItems.filter((item) =>\n            isItem(item) ? item.allowed : true\n        );\n    };\n\n    private async updateView(content: string) {\n        this.suppressChangeEvent = true;\n        const html = await this.contentConverter.parseAsHTML(\n            content,\n            this.schema\n        );\n        const prosemirrorDOMparser = DOMParser.fromSchema(\n            this.view.state.schema\n        );\n        const domParser = new window.DOMParser();\n        const doc = domParser.parseFromString(html, 'text/html');\n        const prosemirrorDoc = prosemirrorDOMparser.parse(doc.body);\n        const tr = this.view.state.tr;\n        tr.replaceWith(0, tr.doc.content.size, prosemirrorDoc.content);\n        this.view.dispatch(tr);\n\n        const metadata = getMetadataFromDoc(this.view.state.doc);\n        this.metadataEmitter(metadata);\n\n        this.suppressChangeEvent = false;\n    }\n\n    private handleTransaction = (transaction: Transaction) => {\n        this.transactionFired = true;\n        const newState = this.view.state.apply(transaction);\n        this.view.updateState(newState);\n\n        if (this.suppressChangeEvent || transaction.getMeta('pointer')) {\n            return;\n        }\n\n        const content = this.contentConverter.serialize(this.view, this.schema);\n\n        if (content === this.lastEmittedValue) {\n            return;\n        }\n\n        const metadata = getMetadataFromDoc(newState.doc);\n        this.metadataEmitter(metadata);\n\n        this.lastEmittedValue = content;\n        this.changeWaiting = true;\n        this.changeEmitter(content);\n    };\n\n    private metadataEmitter(metadata: EditorMetadata) {\n        if (hasMetadataChanged(this.metadata, metadata)) {\n            this.removeImagesFromCache(this.metadata, metadata);\n            this.metadata = metadata;\n            this.metadataChange.emit(metadata);\n        }\n    }\n\n    private removeImagesFromCache(\n        oldMetadata: EditorMetadata,\n        newMetadata: EditorMetadata\n    ) {\n        const removedImages = oldMetadata.images.filter(\n            (oldImage) =>\n                !newMetadata.images.some(\n                    (newImage) => newImage.fileInfoId === oldImage.fileInfoId\n                )\n        );\n\n        for (const image of removedImages) {\n            imageCache.delete(image.fileInfoId);\n            this.imageRemoved.emit(image);\n        }\n    }\n\n    private handleActionBarItem = (\n        event: CustomEvent<ActionBarItem<EditorMenuTypes>>\n    ) => {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        const { value } = event.detail;\n\n        if (value === EditorMenuTypes.Link) {\n            this.isLinkMenuOpen = true;\n\n            return;\n        }\n\n        const actionBarEvent = new CustomEvent('actionBarItemClick', {\n            detail: event.detail,\n        });\n        this.view.dom.dispatchEvent(actionBarEvent);\n    };\n\n    private handleCancelLinkMenu = (event: CustomEvent<void>) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.isLinkMenuOpen = false;\n        this.link = { text: '', href: 'https://' };\n    };\n\n    private handleSaveLinkMenu = () => {\n        this.isLinkMenuOpen = false;\n\n        const saveLinkEvent = new CustomEvent('saveLinkMenu', {\n            detail: {\n                type: EditorMenuTypes.Link,\n                link: this.link,\n            },\n        });\n        this.view.dom.dispatchEvent(saveLinkEvent);\n\n        this.link = { href: 'https://' };\n    };\n\n    private handleLinkChange = (event: CustomEvent<EditorTextLink>) => {\n        this.link = event.detail;\n    };\n\n    private handleFocus = () => {\n        if (!this.disabled) {\n            this.view?.focus();\n\n            // Workaround: On some focus interactions (especially clicking the first line and the last line),\n            // ProseMirror does not dispatch a transaction or update the selection. This can cause\n            // the cursor to fall back to the end of the document instead of placing it where the user clicked.\n            //\n            // To detect this, we wait one tick after focus. If no transaction has fired by then,\n            // we assume the selection is unresolved and manually move the cursor to the last clicked position.\n            this.transactionFired = false;\n            setTimeout(() => {\n                if (!this.transactionFired && this.lastClickedPos) {\n                    const { doc, tr } = this.view.state;\n                    const resolvedPos = doc.resolve(this.lastClickedPos);\n                    const selection = Selection.near(resolvedPos);\n                    this.view.dispatch(tr.setSelection(selection));\n                }\n            }, 0);\n        }\n    };\n\n    private handleNewLinkSelection = (text: string, href: string) => {\n        this.link.text = text;\n        this.link.href = href || 'https://';\n    };\n\n    private handleOpenLinkMenu = (event: CustomEvent<EditorLink>) => {\n        event.stopImmediatePropagation();\n        const { href, text } = event.detail;\n        this.link = { href: href, text: text };\n        this.isLinkMenuOpen = true;\n    };\n\n    private handleMouseDown = (event: MouseEvent) => {\n        const coords = { left: event.clientX, top: event.clientY };\n        const result = this.view.posAtCoords(coords);\n        this.lastClickedPos = result?.pos ?? null;\n    };\n\n    private changeEmitter = debounce((value: string) => {\n        this.change.emit(value);\n        this.changeWaiting = false;\n    }, DEBOUNCE_TIMEOUT);\n\n    private handleBlur = () => {\n        this.changeEmitter.flush();\n    };\n}\n"},{"filename":"prosemirror-adapter.scss","type":"scss","source":"@use '../../../style/internal/shared_input-select-picker.scss';\n@forward '../../markdown/partial-styles/blockquotes';\n@forward '../../markdown/partial-styles/body-text';\n@forward '../../markdown/partial-styles/definition-lists';\n@forward '../../markdown/partial-styles/headings';\n@forward '../../markdown/partial-styles/lists';\n@forward '../../markdown/partial-styles/pre-code';\n@forward '../../markdown/partial-styles/tables';\n@forward '../../markdown/partial-styles/kbd';\n@forward '../../markdown/partial-styles/img';\n@forward 'plugins/image/view.scss';\n\n:host(limel-prosemirror-adapter) {\n    display: flex;\n    flex-direction: column;\n\n    .toolbar {\n        order: 1;\n    }\n\n    div#editor {\n        order: 2;\n        height: 100%;\n        flex-grow: 1;\n    }\n\n    div[contenteditable='true'] {\n        height: 100%;\n    }\n}\n\n* {\n    box-sizing: border-box;\n}\n\n:host(limel-prosemirror-adapter:hover),\n:host(limel-prosemirror-adapter:focus-within) {\n    .toolbar {\n        will-change: grid-template-rows;\n    }\n    limel-action-bar {\n        will-change: opacity, padding;\n    }\n}\n\n.ProseMirror-menubar-wrapper {\n    display: grid;\n    grid-template-rows: auto 1fr;\n}\n\n.ProseMirror-textblock-dropdown {\n    min-width: 3em;\n}\n\n.ProseMirror-tooltip {\n    .ProseMirror-menu {\n        width: -webkit-fit-content;\n        width: fit-content;\n        white-space: pre;\n    }\n}\n\n.toolbar {\n    --action-bar-border-radius: 0.25rem;\n    border-radius: var(--action-bar-border-radius);\n    flex-shrink: 0;\n\n    position: sticky;\n    z-index: 1;\n    top: 0;\n\n    width: 100%;\n\n    display: grid;\n    grid-template-rows: var(\n        --limel-prosemirror-adapter-toolbar-grid-template-rows\n    );\n    transition-property: grid-template-rows;\n    transition-duration: var(\n        --limel-prosemirror-adapter-toolbar-grid-template-rows-transition-duration\n    );\n    transition-timing-function: var(\n        --limel-prosemirror-adapter-toolbar-transition-timing-function\n    );\n    background-color: shared_input-select-picker.$background-color-normal;\n    backdrop-filter: blur(0.5rem);\n    -webkit-backdrop-filter: blur(0.5rem);\n}\n\nlimel-action-bar {\n    min-width: 0;\n    transition-property: padding, opacity;\n    transition-duration: var(\n        --limel-prosemirror-adapter-toolbar-grid-template-rows-transition-duration\n    );\n    transition-timing-function: var(\n        --limel-prosemirror-adapter-toolbar-transition-timing-function\n    );\n    opacity: var(--limel-prosemirror-adapter-toolbar-opacity);\n    padding: var(\n            --limel-prosemirror-adapter-action-bar-padding-top-bottom,\n            0.125rem\n        )\n        0.25rem;\n    background-color: transparent;\n\n    overflow: hidden;\n}\n\n.ProseMirror {\n    position: relative;\n    word-wrap: break-word;\n    white-space: pre-wrap;\n    white-space: break-spaces;\n    -webkit-font-variant-ligatures: none;\n    font-variant-ligatures: none;\n    font-feature-settings: 'liga' 0;\n\n    padding: var(--limel-text-editor-padding);\n\n    [draggable][contenteditable='false'] {\n        user-select: text;\n    }\n\n    &:focus-visible {\n        outline: none;\n    }\n}\n\n.ProseMirror-hideselection {\n    * {\n        &::selection {\n            background: transparent;\n        }\n\n        &::-moz-selection {\n            background: transparent;\n        }\n    }\n\n    caret-color: transparent;\n}\n\n.ProseMirror-selectednode {\n    outline: 0.125rem solid rgb(var(--color-sky-light));\n}\n\nli.ProseMirror-selectednode {\n    outline: none;\n\n    &:after {\n        content: '';\n        position: absolute;\n        left: -2rem;\n        right: -0.125rem;\n        top: -0.125rem;\n        bottom: -0.125rem;\n        border: 0.125rem solid rgb(var(--color-sky-light));\n        pointer-events: none;\n    }\n}\n\nimg.ProseMirror-separator {\n    display: inline !important;\n    border: none !important;\n    margin: 0 !important;\n}\n\nlimel-portal {\n    width: 25rem;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/select","filePath":"./src/components/select/select.tsx","fileName":"select.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/select/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/select/usage","tag":"limel-select","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-select"},{"name":"exampleComponent","text":"limel-example-select-with-icons"},{"name":"exampleComponent","text":"limel-example-select-with-separators"},{"name":"exampleComponent","text":"limel-example-select-with-secondary-text"},{"name":"exampleComponent","text":"limel-example-select-multiple"},{"name":"exampleComponent","text":"limel-example-select-with-empty-option"},{"name":"exampleComponent","text":"limel-example-select-preselected"},{"name":"exampleComponent","text":"limel-example-select-change-options"},{"name":"exampleComponent","text":"limel-example-select-dialog"}],"encapsulation":"shadow","dependents":["limel-example-chart-axis-increment","limel-example-chart-multi-axis","limel-example-chart-multi-axis-area-with-negative-start-values","limel-example-chart-multi-axis-with-negative-start-values","limel-example-chart-type-area","limel-example-chart-type-bar","limel-example-chart-type-dot","limel-example-chart-type-gantt","limel-example-chart-type-line","limel-example-chip-size","limel-example-dialog-heading","limel-example-file-viewer-office","limel-example-header-slot-actions","limel-example-linear-progress-color","limel-example-menu-open-direction","limel-example-menu-surface-width","limel-example-picker-static-actions","limel-example-select","limel-example-select-change-options","limel-example-select-dialog","limel-example-select-multiple","limel-example-select-preselected","limel-example-select-with-empty-option","limel-example-select-with-icons","limel-example-select-with-secondary-text","limel-example-select-with-separators","limel-example-text-editor-composite","limel-example-text-editor-ui"],"dependencies":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"dependencyGraph":{"limel-select":["limel-notched-outline","limel-icon","limel-helper-line","limel-portal","limel-menu-surface","limel-list"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-chart-axis-increment":["limel-select"],"limel-example-chart-multi-axis":["limel-select"],"limel-example-chart-multi-axis-area-with-negative-start-values":["limel-select"],"limel-example-chart-multi-axis-with-negative-start-values":["limel-select"],"limel-example-chart-type-area":["limel-select"],"limel-example-chart-type-bar":["limel-select"],"limel-example-chart-type-dot":["limel-select"],"limel-example-chart-type-gantt":["limel-select"],"limel-example-chart-type-line":["limel-select"],"limel-example-chip-size":["limel-select"],"limel-example-dialog-heading":["limel-select"],"limel-example-file-viewer-office":["limel-select"],"limel-example-header-slot-actions":["limel-select"],"limel-example-linear-progress-color":["limel-select"],"limel-example-menu-open-direction":["limel-select"],"limel-example-menu-surface-width":["limel-select"],"limel-example-picker-static-actions":["limel-select"],"limel-example-select":["limel-select"],"limel-example-select-change-options":["limel-select"],"limel-example-select-dialog":["limel-select"],"limel-example-select-multiple":["limel-select"],"limel-example-select-preselected":["limel-select"],"limel-example-select-with-empty-option":["limel-select"],"limel-example-select-with-icons":["limel-select"],"limel-example-select-with-secondary-text":["limel-select"],"limel-example-select-with-separators":["limel-select"],"limel-example-text-editor-composite":["limel-select"],"limel-example-text-editor-ui":["limel-select"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the select is\ninvalid.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Text to display next to the select.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"multiple","type":"boolean","mutable":false,"attr":"multiple","reflectToAttr":false,"docs":"Set to `true` to allow multiple values to be selected.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"options","type":"(ListSeparator | Option<string>)[]","mutable":false,"reflectToAttr":false,"docs":"List of options.","docsTags":[],"default":"[]","values":[{"type":"(ListSeparator"},{"type":"Option<string>)[]"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"True if the control requires a value.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"value","type":"Option<string> | Option<string>[]","mutable":false,"reflectToAttr":false,"docs":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","docsTags":[],"values":[{"type":"Option<string>"},{"type":"Option<string>[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"Option<string> | Option<string>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value is changed.","docsTags":[]}],"styles":[{"name":"--dropdown-z-index","annotation":"prop","docs":"z-index of the dropdown menu."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"select.tsx","type":"tsx","source":"import { ListItem, ListSeparator } from '../list/list-item.types';\nimport { Option } from '../select/option.types';\nimport { MDCFloatingLabel } from '@material/floating-label';\nimport { MDCSelectHelperText } from '@material/select/helper-text';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { isMobileDevice } from '../../util/device';\nimport { ENTER, SPACE } from '../../util/keycodes';\nimport { isMultiple } from '../../util/multiple';\nimport { createRandomString } from '../../util/random-string';\nimport { SelectTemplate, triggerIconColorWarning } from './select.template';\n\n/**\n * @exampleComponent limel-example-select\n * @exampleComponent limel-example-select-with-icons\n * @exampleComponent limel-example-select-with-separators\n * @exampleComponent limel-example-select-with-secondary-text\n * @exampleComponent limel-example-select-multiple\n * @exampleComponent limel-example-select-with-empty-option\n * @exampleComponent limel-example-select-preselected\n * @exampleComponent limel-example-select-change-options\n * @exampleComponent limel-example-select-dialog\n */\n@Component({\n    tag: 'limel-select',\n    shadow: true,\n    styleUrl: 'select.scss',\n})\nexport class Select {\n    /**\n     * Set to `true` to make the field disabled.\n     * and visually shows that the `select` component is editable but disabled.\n     * This tells the users that if certain requirements are met,\n     * the component may become interactable.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * This visualizes the component slightly differently.\n     * But shows no visual sign indicating that the component is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the select is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid: boolean;\n\n    /**\n     * True if the control requires a value.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * Text to display next to the select.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus.\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Currently selected value or values.\n     * If `multiple` is `true`, this must be an array. Otherwise it must be a\n     * single value.\n     */\n    @Prop()\n    public value: Option | Option[];\n\n    /**\n     * List of options.\n     */\n    @Prop()\n    public options: Array<Option | ListSeparator> = [];\n\n    /**\n     * Set to `true` to allow multiple values to be selected.\n     */\n    @Prop()\n    public multiple: boolean = false;\n\n    /**\n     * Emitted when the value is changed.\n     */\n    @Event()\n    private change: EventEmitter<Option | Option[]>;\n\n    @Element()\n    private host: HTMLLimelSelectElement;\n\n    @State()\n    private menuOpen: boolean = false;\n\n    private hasChanged: boolean = false;\n    private checkValid: boolean = false;\n    private mdcSelectHelperText: MDCSelectHelperText;\n    private mdcFloatingLabel: MDCFloatingLabel;\n    private isMobileDevice: boolean;\n    private portalId: string;\n\n    constructor() {\n        this.handleMenuChange = this.handleMenuChange.bind(this);\n        this.handleNativeChange = this.handleNativeChange.bind(this);\n        this.handleMenuTriggerKeyPress =\n            this.handleMenuTriggerKeyPress.bind(this);\n        this.openMenu = this.openMenu.bind(this);\n        this.closeMenu = this.closeMenu.bind(this);\n\n        this.portalId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        this.isMobileDevice = isMobileDevice();\n\n        // It should not be possible to render the native select for consumers, but we still want to make it testable.\n        // We can set this attribute in tests to force rendering of the native select\n        if (Object.hasOwn(this.host.dataset, 'native')) {\n            this.isMobileDevice = true;\n        }\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n        triggerIconColorWarning(this.getOptionsExcludingSeparators());\n    }\n\n    private initialize() {\n        let element: HTMLElement;\n        element = this.host.shadowRoot.querySelector('.mdc-floating-label');\n        if (!element) {\n            return;\n        }\n\n        this.mdcFloatingLabel = new MDCFloatingLabel(element);\n\n        element = this.host.shadowRoot.querySelector('.mdc-select-helper-text');\n        if (element) {\n            this.mdcSelectHelperText = new MDCSelectHelperText(element);\n        }\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcFloatingLabel) {\n            this.mdcFloatingLabel.destroy();\n        }\n\n        if (this.mdcSelectHelperText) {\n            this.mdcSelectHelperText.destroy();\n        }\n    }\n\n    public componentDidUpdate() {\n        if (this.menuOpen) {\n            this.setMenuFocus();\n        }\n    }\n\n    public render() {\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index'\n        );\n\n        return (\n            <SelectTemplate\n                id={this.portalId}\n                disabled={this.disabled || this.readonly}\n                readonly={this.readonly}\n                required={this.required}\n                invalid={this.invalid}\n                label={this.label}\n                helperText={this.helperText}\n                value={this.value}\n                options={this.options}\n                onMenuChange={this.handleMenuChange}\n                onNativeChange={this.handleNativeChange}\n                onTriggerPress={this.handleMenuTriggerKeyPress}\n                multiple={this.multiple}\n                isOpen={this.menuOpen}\n                open={this.openMenu}\n                close={this.closeMenu}\n                checkValid={this.checkValid}\n                native={this.isMobileDevice}\n                dropdownZIndex={dropdownZIndex}\n            />\n        );\n    }\n\n    @Watch('menuOpen')\n    protected watchOpen(newValue: boolean, oldValue: boolean) {\n        if (this.checkValid) {\n            return;\n        }\n\n        // Menu was closed for the first time\n        if (!newValue && oldValue) {\n            this.checkValid = true;\n        }\n    }\n\n    private setMenuFocus() {\n        if (this.isMobileDevice) {\n            return;\n        }\n\n        setTimeout(() => {\n            const list: HTMLElement = document.querySelector(\n                `#${this.portalId} limel-menu-surface limel-list`\n            );\n            const firstItem: HTMLElement =\n                list?.shadowRoot?.querySelector('[tabindex]');\n\n            if (firstItem) {\n                firstItem.focus();\n            }\n        });\n    }\n\n    private setTriggerFocus() {\n        const trigger: HTMLElement = this.host.shadowRoot.querySelector(\n            '.limel-select-trigger'\n        );\n        trigger.focus();\n    }\n\n    private handleMenuChange(\n        event: CustomEvent<Array<ListItem<Option>> | ListItem<Option>>\n    ) {\n        event.stopPropagation();\n\n        if (isMultiple(event.detail)) {\n            const selector = `#${this.portalId} limel-menu-surface`;\n            const menuSurface = document\n                .querySelector(selector)\n                ?.shadowRoot?.querySelector('.mdc-menu-surface');\n            const scrollPosition = menuSurface?.scrollTop || 0;\n\n            const listItems: ListItem[] = event.detail;\n            const options: Option[] = listItems.map((item) => item.value);\n            this.change.emit(options);\n\n            // Using a single requestAnimationFrame or setTimeout doesn't\n            // work. Using two nested `requestAnimationFrame` worked most of\n            // the time, but not always. Using `setTimeout` inside the\n            // `requestAnimationFrame` seems to work consistently. /Ads\n            requestAnimationFrame(() => {\n                setTimeout(() => {\n                    menuSurface.scrollTop = scrollPosition;\n                });\n            });\n\n            return;\n        }\n\n        if (!event.detail.selected) {\n            return;\n        }\n\n        const listItem: ListItem = event.detail;\n        const option: Option = listItem.value;\n        if (option.disabled) {\n            return;\n        }\n\n        this.change.emit(option);\n        this.menuOpen = false;\n        this.setTriggerFocus();\n    }\n\n    private openMenu() {\n        if (this.emitFirstChangeEvent()) {\n            this.hasChanged = true;\n            this.change.emit(this.getOptionsExcludingSeparators()[0]);\n        }\n\n        this.menuOpen = true;\n    }\n\n    private emitFirstChangeEvent() {\n        return !this.hasChanged && this.isMobileDevice && !this.value;\n    }\n\n    private closeMenu() {\n        this.menuOpen = false;\n        this.setTriggerFocus();\n    }\n\n    private handleMenuTriggerKeyPress(event: KeyboardEvent) {\n        const isEnter = event.key === ENTER;\n        const isSpace = event.key === SPACE;\n\n        if (!this.menuOpen && (isSpace || isEnter)) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.menuOpen = true;\n        }\n    }\n\n    private handleNativeChange(event: Event) {\n        event.stopPropagation();\n\n        const element: HTMLSelectElement = this.host.shadowRoot.querySelector(\n            'select.limel-select__native-control'\n        );\n        const options = Array.apply(null, element.options) // eslint-disable-line prefer-spread\n            .filter((optionElement: HTMLOptionElement) => {\n                return !!optionElement.selected;\n            })\n            .map((optionElement: HTMLOptionElement) => {\n                return this.getOptionsExcludingSeparators().find(\n                    (o) => o.value === optionElement.value\n                );\n            });\n\n        if (this.multiple) {\n            this.change.emit(options);\n\n            return;\n        }\n\n        this.change.emit(options[0]);\n        this.menuOpen = false;\n    }\n\n    private getOptionsExcludingSeparators(): Option[] {\n        return this.options.filter(\n            (option): option is Option => !('separator' in option)\n        );\n    }\n}\n"},{"filename":"select.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '@material/select/styles';\n\n// Note! The `--dropdown-z-index` property is used from `select.tsx`.\n/**\n * @prop --dropdown-z-index: z-index of the dropdown menu.\n */\n\n$border-radius: 0.375rem;\n\n:host(limel-select) {\n    --limel-notched-outline-border-radius: #{$border-radius};\n    display: block;\n    position: relative;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\nlimel-notched-outline:not([invalid]:not([invalid='false'])) {\n    .limel-notched-outline--outlines {\n        --limel-notched-outline-border-color: transparent;\n    }\n}\n\n.mdc-select__anchor,\n.mdc-select__selected-text {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-select__dropdown-icon-graphic {\n    transition: transform 0.2s ease;\n}\n\n.limel-select__selected-option {\n    display: flex;\n    align-items: center;\n\n    box-sizing: border-box;\n    outline: none;\n\n    align-self: center;\n    min-width: 0; // makes it truncate and prevents the select to grow wider than its container\n    padding: 0 0.25rem 0 1rem;\n}\n\n.limel-select__selected-option__icon {\n    margin-right: functions.pxToRem(8);\n    margin-left: functions.pxToRem(-8);\n    flex-shrink: 0;\n}\n\n.limel-select__selected-option__text {\n    .mdc-select:not(.mdc-select--disabled) & {\n        color: shared_input-select-picker.$input-text-color;\n    }\n\n    .mdc-select.mdc-select--disabled & {\n        color: shared_input-select-picker.$input-text-color-disabled;\n    }\n\n    @include mixins.truncate-text;\n}\n\n.limel-select {\n    flex-wrap: wrap;\n    width: 100%;\n\n    .mdc-select__anchor {\n        height: functions.pxToRem(36);\n        padding-left: functions.pxToRem(0);\n    }\n    .limel-select-trigger {\n        border: none;\n        height: shared_input-select-picker.$height-of-mdc-text-field;\n        display: inline-flex;\n        align-items: center;\n\n        border-radius: $border-radius;\n    }\n\n    .limel-select-trigger,\n    .limel-select__selected-option {\n        width: 100%;\n    }\n\n    .mdc-select__dropdown-icon {\n        margin-right: 0.25rem;\n        margin-left: 0.25rem;\n    }\n\n    &.mdc-select--disabled:not(.limel-select--readonly) {\n        .limel-select-trigger {\n            @include shared_input-select-picker.looks-disabled;\n            box-shadow: var(--button-shadow-normal);\n        }\n        .mdc-select__dropdown-icon {\n            svg {\n                fill: rgb(var(--contrast-800));\n            }\n        }\n    }\n\n    &:not(.mdc-select--disabled) {\n        .mdc-select__dropdown-icon {\n            svg {\n                fill: rgb(var(--contrast-1000));\n            }\n        }\n\n        .limel-select-trigger {\n            @include mixins.is-elevated-clickable;\n            @include mixins.visualize-keyboard-focus;\n\n            &.limel-select--focused {\n                background-color: shared_input-select-picker.$background-color-focused;\n\n                .mdc-select__dropdown-icon {\n                    svg {\n                        fill: var(--mdc-theme-primary);\n                    }\n                }\n\n                .mdc-select__dropdown-icon-graphic {\n                    transform: rotate(-180deg);\n                }\n            }\n\n            &[aria-expanded]:not([aria-expanded='false']),\n            &[aria-expanded='true'] {\n                box-shadow: var(--button-shadow-inset-pressed);\n            }\n        }\n    }\n\n    &.limel-select--invalid {\n        .limel-select__selected-option__text,\n        .invalid-icon {\n            color: var(--lime-error-text-color);\n        }\n    }\n}\n\n.invalid-icon {\n    flex-shrink: 0;\n}\n\nselect.limel-select__native-control {\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    border: 0;\n}\n\n@import './partial-styles/_readonly';\n@import './partial-styles/_helper-text';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut","filePath":"./src/components/shortcut/shortcut.tsx","fileName":"shortcut.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/shortcut/usage","tag":"limel-shortcut","overview":"This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","usage":{},"docs":"This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","docsTags":[{"name":"exampleComponent","text":"limel-example-shortcut"},{"name":"exampleComponent","text":"limel-example-shortcut-notification"},{"name":"exampleComponent","text":"limel-example-shortcut-styling"},{"name":"exampleComponent","text":"limel-example-shortcut-with-click-handler"}],"encapsulation":"shadow","dependents":["limel-example-shortcut","limel-example-shortcut-notification","limel-example-shortcut-styling","limel-example-shortcut-with-click-handler"],"dependencies":["limel-badge","limel-icon","limel-3d-hover-effect-glow"],"dependencyGraph":{"limel-shortcut":["limel-badge","limel-icon","limel-3d-hover-effect-glow"],"limel-example-shortcut":["limel-shortcut"],"limel-example-shortcut-notification":["limel-shortcut"],"limel-example-shortcut-styling":["limel-shortcut"],"limel-example-shortcut-with-click-handler":["limel-shortcut"]},"props":[{"name":"badge","type":"number | string","mutable":false,"attr":"badge","reflectToAttr":true,"docs":"If specified, will display a notification badge\non the shortcut.","docsTags":[],"values":[{"type":"number"},{"type":"string"}],"optional":true,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` if shortcut is disabled.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Name of icon for the shortcut.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show below the shortcut. Long label will be truncated.","docsTags":[],"default":"null","values":[{"type":"string"}],"optional":true,"required":false},{"name":"link","type":"Link","mutable":false,"reflectToAttr":false,"docs":"If supplied, the shortcut will be a clickable link.","docsTags":[],"values":[{"type":"Link"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[{"name":"--shortcut-background-color","annotation":"prop","docs":"defines the backgrounds color of the shortcut icon. Defaults to `--lime-elevated-surface-background-color`"},{"name":"--shortcut-badge-background-color","annotation":"prop","docs":"Background color of the notification badge. Defaults to `--color-red-default`"},{"name":"--shortcut-badge-text-color","annotation":"prop","docs":"Text color of the notification badge. Defaults to `--color-white`"},{"name":"--shortcut-border-radius","annotation":"prop","docs":"defines the radius of corners of the shortcut. Defaults to `1rem`"},{"name":"--shortcut-icon-color","annotation":"prop","docs":"defines the fill color of the shortcut icon. Defaults to `--contrast-1000`"},{"name":"--shortcut-label-color","annotation":"prop","docs":"defines the color of the shortcut label. Defaults to `--contrast-1100`"}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"shortcut.tsx","type":"tsx","source":"import { Component, Prop, h, Element, Host } from '@stencil/core';\nimport { Link } from '../../global/shared-types/link.types';\nimport { getRel } from '../../util/link-helper';\nimport { getMouseEventHandlers } from '../../util/3d-tilt-hover-effect';\n\n/**\n * This component can be used on places such as a start page or a dashboard.\n * Clicking on the component should navigate the user to a new screen,\n * to which you need to provide a URL, by specifying an `href` for the `link` property.\n *\n * By default, this navigation will happen within the same browser tab.\n * However, it is possible to override that behavior, by specifying a `target`\n * for the `link` property\n *\n * @exampleComponent limel-example-shortcut\n * @exampleComponent limel-example-shortcut-notification\n * @exampleComponent limel-example-shortcut-styling\n * @exampleComponent limel-example-shortcut-with-click-handler\n */\n\n@Component({\n    tag: 'limel-shortcut',\n    shadow: true,\n    styleUrl: 'shortcut.scss',\n})\nexport class Shortcut {\n    /**\n     * Name of icon for the shortcut.\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    /**\n     * The text to show below the shortcut. Long label will be truncated.\n     */\n    @Prop({ reflect: true })\n    public label?: string = null;\n\n    /**\n     * Set to `true` if shortcut is disabled.\n     */\n    @Prop({ reflect: true })\n    public disabled?: boolean = false;\n\n    /**\n     * If specified, will display a notification badge\n     * on the shortcut.\n     */\n    @Prop({ reflect: true })\n    public badge?: number | string;\n\n    /**\n     * If supplied, the shortcut will be a clickable link.\n     */\n    @Prop()\n    public link?: Link;\n\n    @Element()\n    private host: HTMLElement;\n\n    private handleMouseEnter: () => void;\n    private handleMouseLeave: () => void;\n\n    public componentWillLoad() {\n        const { handleMouseEnter, handleMouseLeave } = getMouseEventHandlers(\n            this.host\n        );\n        this.handleMouseEnter = handleMouseEnter;\n        this.handleMouseLeave = handleMouseLeave;\n    }\n\n    public render() {\n        const rel = getRel(this.link?.target, this.link?.rel);\n\n        return (\n            <Host\n                onMouseEnter={this.handleMouseEnter}\n                onMouseLeave={this.handleMouseLeave}\n            >\n                <a\n                    aria-disabled={this.disabled}\n                    href={this.link?.href}\n                    target={this.link?.target}\n                    rel={rel}\n                    tabindex=\"0\"\n                    aria-label={this.getAriaLabel()}\n                    title={this.link?.title}\n                >\n                    <limel-icon name={this.icon} />\n                    <limel-3d-hover-effect-glow />\n                </a>\n                {this.renderLabel()}\n                {this.renderNotification()}\n            </Host>\n        );\n    }\n\n    private renderLabel = () => {\n        if (this.label) {\n            return <span aria-hidden=\"true\">{this.label}</span>;\n        }\n    };\n\n    private getAriaLabel = () => {\n        if (this.label && this.link?.title) {\n            return this.label + '. ' + this.link.title;\n        }\n\n        if (this.label) {\n            return this.label;\n        }\n\n        if (this.link?.title) {\n            return this.link.title;\n        }\n    };\n\n    private renderNotification = () => {\n        if (this.badge) {\n            return <limel-badge label={this.badge} />;\n        }\n    };\n}\n"},{"filename":"shortcut.scss","type":"scss","source":"/**\n* @prop --shortcut-border-radius: defines the radius of corners of the shortcut. Defaults to `1rem`\n* @prop --shortcut-icon-color: defines the fill color of the shortcut icon. Defaults to `--contrast-1000`\n* @prop --shortcut-label-color: defines the color of the shortcut label. Defaults to `--contrast-1100`\n* @prop --shortcut-background-color: defines the backgrounds color of the shortcut icon. Defaults to `--lime-elevated-surface-background-color`\n* @prop --shortcut-badge-text-color: Text color of the notification badge. Defaults to `--color-white`\n* @prop --shortcut-badge-background-color: Background color of the notification badge. Defaults to `--color-red-default`\n*/\n\n@use '../../style/mixins';\n\n:host(limel-shortcut) {\n    --badge-text-color: var(\n        --shortcut-badge-text-color,\n        rgb(var(--color-white))\n    );\n    --badge-background-color: var(\n        --shortcut-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    row-gap: 0.0625rem; //1px\n\n    * {\n        box-sizing: border-box;\n    }\n}\n\n:host(limel-shortcut[disabled]) {\n    a {\n        opacity: 0.5;\n        box-shadow: unset;\n        cursor: not-allowed;\n    }\n}\n\na {\n    all: unset;\n    text-align: center;\n\n    height: calc(100% - 1rem);\n    width: calc(100% - 1rem);\n    padding: 0.5rem;\n\n    border-radius: var(--shortcut-border-radius, 1rem);\n    background-color: var(\n        --shortcut-background-color,\n        var(--lime-elevated-surface-background-color)\n    );\n}\n\nlimel-icon {\n    display: flex;\n    height: 100%;\n    width: 100%;\n    justify-content: center;\n    color: var(--shortcut-icon-color, rgb(var(--contrast-1000)));\n    border-radius: var(--shortcut-border-radius, 1rem);\n}\n\nspan {\n    @include mixins.truncate-text;\n    width: 100%;\n    color: var(--shortcut-label-color, rgb(var(--contrast-1100)));\n    font-size: 0.75rem;\n    text-align: center;\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.25rem;\n    right: 0.125rem;\n}\n\n// The 3D effect\nlimel-3d-hover-effect-glow {\n    border-radius: var(--shortcut-border-radius, 1rem);\n}\n\n:host(limel-shortcut) {\n    @include mixins.parent-of-the-3d-element;\n}\n\na {\n    @include mixins.the-3d-element;\n\n    @include mixins.the-3d-element--clickable;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/slider","filePath":"./src/components/slider/slider.tsx","fileName":"slider.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/slider/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/slider/usage","tag":"limel-slider","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-slider-basic"},{"name":"exampleComponent","text":"limel-example-slider-multiplier"},{"name":"exampleComponent","text":"limel-example-slider-multiplier-percentage-colors"},{"name":"exampleComponent","text":"limel-example-slider-composite"}],"encapsulation":"shadow","dependents":["limel-example-card-nested-component","limel-example-chip-progress","limel-example-collapsible-section-with-slider","limel-example-slider-basic","limel-example-slider-composite","limel-example-slider-multiplier","limel-example-slider-multiplier-percentage-colors"],"dependencies":["limel-helper-line"],"dependencyGraph":{"limel-slider":["limel-helper-line"],"limel-example-card-nested-component":["limel-slider"],"limel-example-chip-progress":["limel-slider"],"limel-example-collapsible-section-with-slider":["limel-slider"],"limel-example-slider-basic":["limel-slider"],"limel-example-slider-composite":["limel-slider"],"limel-example-slider-multiplier":["limel-slider"],"limel-example-slider-multiplier-percentage-colors":["limel-slider"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"factor","type":"number","mutable":false,"attr":"factor","reflectToAttr":true,"docs":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","docsTags":[],"default":"DEFAULT_FACTOR","values":[{"type":"number"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the slider","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label to display next to the input","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"step","type":"number","mutable":false,"attr":"step","reflectToAttr":true,"docs":"The stepping interval to use when adjusting the value","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"unit","type":"string","mutable":false,"attr":"unit","reflectToAttr":true,"docs":"Unit to display next to the value","docsTags":[],"default":"''","values":[{"type":"string"}],"optional":false,"required":false},{"name":"value","type":"number","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the input","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"valuemax","type":"number","mutable":false,"attr":"valuemax","reflectToAttr":true,"docs":"The maximum value allowed","docsTags":[],"default":"DEFAULT_MAX_VALUE","values":[{"type":"number"}],"optional":false,"required":false},{"name":"valuemin","type":"number","mutable":false,"attr":"valuemin","reflectToAttr":true,"docs":"The minimum value allowed","docsTags":[],"default":"DEFAULT_MIN_VALUE","values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value has been changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"slider.tsx","type":"tsx","source":"import { MDCSlider, MDCSliderChangeEventDetail } from '@material/slider';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { getPercentageClass } from './get-percentage-class';\nimport { createRandomString } from '../../util/random-string';\n\nconst DEFAULT_FACTOR = 1;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_MIN_VALUE = 0;\n\n/**\n * @exampleComponent limel-example-slider-basic\n * @exampleComponent limel-example-slider-multiplier\n * @exampleComponent limel-example-slider-multiplier-percentage-colors\n * @exampleComponent limel-example-slider-composite\n */\n@Component({\n    tag: 'limel-slider',\n    shadow: true,\n    styleUrl: 'slider.scss',\n})\nexport class Slider {\n    /**\n     * Disables the slider when `true`,\n     * and visually shows that the field is editable but disabled.\n     * This tells the users that if certain requirements are met,\n     * the slider may become interactable.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the slider when `true`. This visualizes the slider slightly differently.\n     * But shows no visual sign indicating that the slider field\n     * is disabled or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Default value: 1.\n     * The factor that the properties `value`, `valuemax`, `valuemin`, and\n     * `step` are multiplied by. On `change` divides the value by the factor,\n     * so the original format stays the same.\n     */\n    @Prop({ reflect: true })\n    public factor: number = DEFAULT_FACTOR;\n\n    /**\n     * Label to display next to the input\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the slider\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Unit to display next to the value\n     */\n    @Prop({ reflect: true })\n    public unit: string = '';\n\n    /**\n     * The value of the input\n     */\n    @Prop({ reflect: true })\n    public value: number;\n\n    /**\n     * The maximum value allowed\n     */\n    @Prop({ reflect: true })\n    public valuemax: number = DEFAULT_MAX_VALUE;\n\n    /**\n     * The minimum value allowed\n     */\n    @Prop({ reflect: true })\n    public valuemin: number = DEFAULT_MIN_VALUE;\n\n    /**\n     * The stepping interval to use when adjusting the value\n     */\n    @Prop({ reflect: true })\n    public step: number;\n\n    /**\n     * Emitted when the value has been changed\n     */\n    @Event()\n    private change: EventEmitter<number>;\n\n    @Element()\n    private rootElement: HTMLLimelSliderElement;\n\n    @State()\n    private percentageClass: string;\n\n    private mdcSlider: MDCSlider;\n    private labelId: string;\n    private helperTextId: string;\n    private observer: ResizeObserver;\n\n    public constructor() {\n        this.labelId = createRandomString();\n        this.helperTextId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n        this.observer = new ResizeObserver(this.resizeObserverCallback);\n        this.observer.observe(this.rootElement);\n    }\n\n    public componentWillLoad() {\n        this.setPercentageClass(this.value);\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        this.destroyMDCSlider();\n        this.observer.disconnect();\n    }\n\n    public render() {\n        const inputProps: any = {};\n        if (this.step) {\n            inputProps.step = this.multiplyByFactor(this.step);\n        }\n\n        if (this.disabled || this.readonly) {\n            inputProps.disabled = true;\n        }\n\n        return (\n            <Host class={this.getContainerClassList()}>\n                <label\n                    class=\"slider__label mdc-floating-label mdc-floating-label--float-above\"\n                    id={this.labelId}\n                >\n                    {this.label}\n                </label>\n                <div class=\"slider__content-range-container\">\n                    <span class=\"slider__content-min-label\">\n                        {this.multiplyByFactor(this.valuemin)}\n                        {this.unit}\n                    </span>\n                    <span class=\"slider__content-max-label\">\n                        {this.multiplyByFactor(this.valuemax)}\n                        {this.unit}\n                    </span>\n                </div>\n                <div\n                    class={{\n                        'mdc-slider': true,\n                        'mdc-slider--discrete': true,\n                        'mdc-slider--disabled': this.disabled || this.readonly,\n                    }}\n                >\n                    <input\n                        class=\"mdc-slider__input\"\n                        type=\"range\"\n                        min={this.multiplyByFactor(this.valuemin)}\n                        max={this.multiplyByFactor(this.valuemax)}\n                        value={this.multiplyByFactor(this.value)}\n                        name=\"volume\"\n                        aria-labelledby={this.labelId}\n                        aria-controls={this.helperTextId}\n                        {...inputProps}\n                    />\n                    <div class=\"mdc-slider__track\">\n                        <div class=\"mdc-slider__track--inactive\"></div>\n                        <div class=\"mdc-slider__track--active\">\n                            <div class=\"mdc-slider__track--active_fill\"></div>\n                        </div>\n                    </div>\n                    <div class=\"mdc-slider__thumb\">\n                        <div\n                            class=\"mdc-slider__value-indicator-container\"\n                            aria-hidden=\"true\"\n                        >\n                            <div class=\"mdc-slider__value-indicator\">\n                                <span class=\"mdc-slider__value-indicator-text\">\n                                    {this.multiplyByFactor(this.value)}\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"mdc-slider__thumb-knob\"></div>\n                    </div>\n                </div>\n                {this.renderHelperLine()}\n            </Host>\n        );\n    }\n\n    @Watch('disabled')\n    protected watchDisabled() {\n        this.updateDisabledState();\n    }\n\n    @Watch('readonly')\n    protected watchReadonly() {\n        this.updateDisabledState();\n    }\n\n    @Watch('value')\n    protected watchValue() {\n        if (!this.mdcSlider) {\n            return;\n        }\n\n        const value = this.multiplyByFactor(this.getValue());\n        this.mdcSlider.setValue(value);\n\n        if (this.isStepConfigured()) {\n            return;\n        }\n\n        const step = this.multiplyByFactor(this.step);\n        if (!this.isMultipleOfStep(value, step)) {\n            return;\n        }\n\n        this.reCreateSliderWithStep();\n    }\n\n    private renderHelperLine = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperText={this.helperText}\n                helperTextId={this.helperTextId}\n            />\n        );\n    };\n\n    private initialize = () => {\n        const inputElement = this.getInputElement();\n        if (!inputElement) {\n            return;\n        }\n\n        const value = this.getValue();\n\n        /*\n        For some reason the input element's `value` attribute is removed\n        (probably by Stencil) when the element is first rendered. But if the\n        attribute is missing when MDCSlider is initialized (MDC v11.0.0),\n        MDCSlider crashes.\n        So we add the attribute right before initializing MDCSlider. /Ads\n        */\n        inputElement.setAttribute('value', `${this.multiplyByFactor(value)}`);\n\n        /*\n        When creating the `mdcSlider` component, its important that the value set in\n        the input field obeys the range and the step size.\n\n        The MDCSlider will throw an exception unless the value in the input element\n        is dividible by the step value and is in the provided range.\n        If an exception occurs, this component will crash and it will be impossible to change\n        its value.\n        The logic below ensures that the component will render even though the\n        provided value is wrong.\n        This could be considered wrong, but it at least fixes so that it's possible\n        to change the value from the UI.\n        */\n        const greaterThanOrEqualMin = value >= this.valuemin;\n        const lessThanOrEqualMax = value <= this.valuemax;\n\n        if (!greaterThanOrEqualMin) {\n            const newMin = this.multiplyByFactor(value);\n            inputElement.setAttribute('min', `${newMin}`);\n        }\n\n        if (!lessThanOrEqualMax) {\n            const newMax = this.multiplyByFactor(value);\n            inputElement.setAttribute('max', `${newMax}`);\n        }\n\n        if (!this.isMultipleOfStep(value, this.step)) {\n            inputElement.removeAttribute('step');\n        }\n\n        this.createMDCSlider();\n    };\n\n    private reCreateSliderWithStep = () => {\n        const inputElement = this.getInputElement();\n        const step = `${this.multiplyByFactor(this.step)}`;\n\n        inputElement.setAttribute('step', step);\n\n        this.destroyMDCSlider();\n        this.createMDCSlider();\n    };\n\n    private createMDCSlider = () => {\n        const element = this.getRootElement();\n\n        this.mdcSlider = new MDCSlider(element);\n        this.mdcSlider.listen('MDCSlider:change', this.changeHandler);\n        this.mdcSlider.listen('MDCSlider:input', this.inputHandler);\n    };\n\n    private destroyMDCSlider() {\n        this.mdcSlider.unlisten('MDCSlider:change', this.changeHandler);\n        this.mdcSlider.unlisten('MDCSlider:input', this.inputHandler);\n        this.mdcSlider.destroy();\n        this.mdcSlider = undefined;\n    }\n\n    private changeHandler = (\n        event: CustomEvent<MDCSliderChangeEventDetail>\n    ) => {\n        let value = event.detail.value;\n        const step = this.multiplyByFactor(this.step);\n\n        if (!this.isMultipleOfStep(value, step)) {\n            value = this.roundToStep(value, step);\n        }\n\n        this.change.emit(value / this.factor);\n    };\n\n    private inputHandler = (event: CustomEvent<MDCSliderChangeEventDetail>) => {\n        this.setPercentageClass(event.detail.value / this.factor);\n    };\n\n    private getContainerClassList = () => {\n        return {\n            [this.percentageClass]: true,\n            disabled: this.disabled || this.readonly,\n            readonly: this.readonly,\n        };\n    };\n\n    private resizeObserverCallback = () => {\n        this.mdcSlider?.layout();\n    };\n\n    private updateDisabledState = () => {\n        if (!this.mdcSlider) {\n            return;\n        }\n\n        this.mdcSlider?.setDisabled(this.disabled || this.readonly);\n    };\n\n    private multiplyByFactor = (value: number) => {\n        return Math.round(value * this.factor);\n    };\n\n    private getValue = () => {\n        let value = this.value;\n        if (!Number.isFinite(value)) {\n            value = this.valuemin;\n        }\n\n        return value;\n    };\n\n    private setPercentageClass = (value: number) => {\n        this.percentageClass = getPercentageClass(\n            (value - this.valuemin) / (this.valuemax - this.valuemin)\n        );\n    };\n\n    private isMultipleOfStep = (value: number, step: number): boolean => {\n        if (!step) {\n            return true;\n        }\n\n        return value % step === 0;\n    };\n\n    private roundToStep = (value: number, step: number): number => {\n        return Math.round(value / step) * step;\n    };\n\n    private getRootElement = (): HTMLElement | undefined => {\n        return this.rootElement.shadowRoot.querySelector('.mdc-slider');\n    };\n\n    private getInputElement = (): HTMLInputElement | undefined => {\n        const element = this.getRootElement();\n        if (!element) {\n            return;\n        }\n\n        return element.querySelector('input');\n    };\n\n    private isStepConfigured = (): boolean => {\n        if (!this.step) {\n            return true;\n        }\n\n        const input = this.getInputElement();\n        if (!input) {\n            return true;\n        }\n\n        return input.hasAttribute('step');\n    };\n}\n"},{"filename":"slider.scss","type":"scss","source":"@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n\n@use '@material/slider/styles';\n@use '@material/floating-label/mdc-floating-label';\n\n:host(limel-slider) {\n    isolation: isolate;\n    position: relative;\n\n    display: flex;\n    flex-direction: column;\n}\n\n.mdc-slider {\n    height: shared_input-select-picker.$height-of-mdc-text-field;\n    margin: 0 0.75rem;\n}\n\n.mdc-floating-label,\n.mdc-slider .mdc-slider__value-indicator-text {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.slider__label {\n    padding-left: functions.pxToRem(20);\n    top: 0.75rem; // To place its label on the same height as other `floating-label`s in a form\n\n    color: shared_input-select-picker.$label-color;\n    :host(limel-slider.disabled:not(.readonly)) & {\n        color: shared_input-select-picker.$label-color-disabled;\n    }\n}\n\n.slider__content-range-container {\n    display: flex;\n    order: 2;\n    justify-content: space-between;\n    margin: 0 auto;\n    margin-top: -0.75rem;\n    width: 100%;\n}\n\n.slider__content-min-label,\n.slider__content-max-label {\n    line-height: 1;\n    transition: opacity 0.2s ease;\n    opacity: 0.7;\n    font-size: functions.pxToRem(12);\n    color: shared_input-select-picker.$helper-text-color;\n}\n\n.mdc-slider__track {\n    &:before,\n    &:after {\n        // start & end indicators\n        content: '';\n        display: inline-block;\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        width: functions.pxToRem(6);\n        height: functions.pxToRem(6);\n        border-radius: 50%;\n        background-color: rgba(var(--contrast-700), 0.6);\n    }\n\n    &:before {\n        left: functions.pxToRem(-12);\n    }\n\n    &:after {\n        right: functions.pxToRem(-12);\n    }\n}\n\n@import './partial-styles/percentage-color';\n@import './partial-styles/_readonly';\n@import './partial-styles/_thumb';\n@import './partial-styles/_helper-text';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar","filePath":"./src/components/snackbar/snackbar.tsx","fileName":"snackbar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/snackbar/usage","tag":"limel-snackbar","overview":"A Snackbar –also known as \"Toast\"– is used to inform the end user\nabout an action or a process in the system.\nThe information could vary from announcing that a process has just started,\nis taking place now, has ended, or has been interrupted or canceled.\n\nThe information that you provide using a snackbar should be:\n- temporary\n- contextual\n- short\n- and most importantly, ignorable.\n\nIt means if the user misses the information, it shouldn't be a big deal.\n\n:::note\nIf the information you want to display has a higher importance or priority,\nand you need to make sure that the user takes an action to dismiss it,\nconsider using the [Banner](/#/component/limel-banner/) component instead.\nFor more complex interactions and for delivering more detailed information,\n[Dialog](/#/component/limel-dialog/) is a better choice.\n:::","usage":{},"docs":"A Snackbar –also known as \"Toast\"– is used to inform the end user\nabout an action or a process in the system.\nThe information could vary from announcing that a process has just started,\nis taking place now, has ended, or has been interrupted or canceled.\n\nThe information that you provide using a snackbar should be:\n- temporary\n- contextual\n- short\n- and most importantly, ignorable.\n\nIt means if the user misses the information, it shouldn't be a big deal.\n\n:::note\nIf the information you want to display has a higher importance or priority,\nand you need to make sure that the user takes an action to dismiss it,\nconsider using the [Banner](/#/component/limel-banner/) component instead.\nFor more complex interactions and for delivering more detailed information,\n[Dialog](/#/component/limel-dialog/) is a better choice.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-snackbar"},{"name":"exampleComponent","text":"limel-example-snackbar-with-action"},{"name":"exampleComponent","text":"limel-example-snackbar-with-changing-messages"},{"name":"exampleComponent","text":"limel-example-snackbar-dismissible"},{"name":"exampleComponent","text":"limel-example-snackbar-persistent"},{"name":"exampleComponent","text":"limel-example-snackbar-persistent-non-dismissible"}],"encapsulation":"shadow","dependents":["limel-example-snackbar","limel-example-snackbar-dismissible","limel-example-snackbar-persistent","limel-example-snackbar-persistent-non-dismissible","limel-example-snackbar-with-action","limel-example-snackbar-with-changing-messages"],"dependencies":["limel-button","limel-icon-button"],"dependencyGraph":{"limel-snackbar":["limel-button","limel-icon-button"],"limel-button":["limel-icon","limel-spinner"],"limel-icon-button":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-example-snackbar":["limel-snackbar"],"limel-example-snackbar-dismissible":["limel-snackbar"],"limel-example-snackbar-persistent":["limel-snackbar"],"limel-example-snackbar-persistent-non-dismissible":["limel-snackbar"],"limel-example-snackbar-with-action":["limel-snackbar"],"limel-example-snackbar-with-changing-messages":["limel-snackbar"]},"props":[{"name":"actionText","type":"string","mutable":false,"attr":"action-text","reflectToAttr":false,"docs":"The text to display for the action button.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"dismissible","type":"boolean","mutable":false,"attr":"dismissible","reflectToAttr":false,"docs":"When `true` displays a dismiss button on the snackbar,\nallowing users to close it.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":false,"docs":"Defines the language for translations.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"message","type":"string","mutable":false,"attr":"message","reflectToAttr":false,"docs":"The text message to display.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"multiline","type":"boolean","mutable":false,"attr":"multiline","reflectToAttr":false,"docs":"Whether to show the snackbar with space for multiple lines of text","docsTags":[{"name":"deprecated","text":"Setting this property no longer has any effect. The property will be removed in a future major version."}],"deprecation":"Setting this property no longer has any effect. The property will be removed in a future major version.","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"open","type":"boolean","mutable":false,"attr":"open","reflectToAttr":true,"docs":"`true` if the snackbar is open, `false` otherwise.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"timeout","type":"number","mutable":false,"attr":"timeout","reflectToAttr":true,"docs":"The amount of time in milliseconds to show the snackbar.\nIf set to `-1`, the snackbar will be persistent.\nThis means:\n- either the end user will need to close it manually,\nwhich requires the `dismissible` property to be set to `true`.\n- or the snackbar needs to be closed programmatically.","docsTags":[],"default":"5000","values":[{"type":"number"}],"optional":true,"required":false}],"methods":[{"name":"show","returns":{"type":"Promise<void>","docs":""},"signature":"show() => Promise<void>","parameters":[],"docs":"Show the snackbar","docsTags":[{"name":"deprecated","text":"Use the `open` property instead."}],"deprecation":"Use the `open` property instead."}],"events":[{"event":"action","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the action button is pressed","docsTags":[]},{"event":"hide","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the snackbar hides itself","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[{"event":"changeOffset","capture":false,"passive":false}],"sources":[{"filename":"snackbar.tsx","type":"tsx","source":"import { Languages } from '../date-picker/date.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Listen,\n    Method,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport translate from '../../global/translations';\nimport { SnackbarContainer } from './container';\nimport { createRandomString } from '../../util/random-string';\n\nconst container = new SnackbarContainer();\nconst hideAnimationDuration = 300;\n\n/**\n * A Snackbar –also known as \"Toast\"– is used to inform the end user\n * about an action or a process in the system.\n * The information could vary from announcing that a process has just started,\n * is taking place now, has ended, or has been interrupted or canceled.\n *\n * The information that you provide using a snackbar should be:\n * - temporary\n * - contextual\n * - short\n * - and most importantly, ignorable.\n *\n * It means if the user misses the information, it shouldn't be a big deal.\n *\n * :::note\n * If the information you want to display has a higher importance or priority,\n * and you need to make sure that the user takes an action to dismiss it,\n * consider using the [Banner](/#/component/limel-banner/) component instead.\n * For more complex interactions and for delivering more detailed information,\n * [Dialog](/#/component/limel-dialog/) is a better choice.\n * :::\n *\n * @exampleComponent limel-example-snackbar\n * @exampleComponent limel-example-snackbar-with-action\n * @exampleComponent limel-example-snackbar-with-changing-messages\n * @exampleComponent limel-example-snackbar-dismissible\n * @exampleComponent limel-example-snackbar-persistent\n * @exampleComponent limel-example-snackbar-persistent-non-dismissible\n */\n@Component({\n    tag: 'limel-snackbar',\n    shadow: true,\n    styleUrl: 'snackbar.scss',\n})\nexport class Snackbar {\n    /**\n     * `true` if the snackbar is open, `false` otherwise.\n     */\n    @Prop({ reflect: true })\n    public open: boolean = false;\n\n    /**\n     * The text message to display.\n     */\n    @Prop()\n    public message: string;\n\n    /**\n     * The amount of time in milliseconds to show the snackbar.\n     * If set to `-1`, the snackbar will be persistent.\n     * This means:\n     * - either the end user will need to close it manually,\n     * which requires the `dismissible` property to be set to `true`.\n     * - or the snackbar needs to be closed programmatically.\n     */\n    @Prop({ reflect: true })\n    public timeout?: number = 5000;\n\n    /**\n     * The text to display for the action button.\n     */\n    @Prop()\n    public actionText: string;\n\n    /**\n     * When `true` displays a dismiss button on the snackbar,\n     * allowing users to close it.\n     */\n    @Prop()\n    public dismissible: boolean = true;\n\n    /**\n     * Whether to show the snackbar with space for multiple lines of text\n     * @deprecated Setting this property no longer has any effect. The property will be removed in a future major version.\n     */\n    @Prop()\n    public multiline: boolean;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    @Element()\n    private readonly host: HTMLLimelSnackbarElement;\n\n    /**\n     * Emitted when the action button is pressed\n     */\n    @Event()\n    private readonly action: EventEmitter<void>;\n\n    /**\n     * Emitted when the snackbar hides itself\n     */\n    @Event()\n    private readonly hide: EventEmitter<void>;\n\n    @State()\n    private offset: number = 0;\n\n    @State()\n    private isOpen: boolean = false;\n\n    @State()\n    private closing: boolean = true;\n\n    private readonly snackbarId: string;\n    private timeoutId?: number;\n\n    public constructor() {\n        this.snackbarId = createRandomString();\n    }\n\n    public componentDidLoad() {\n        if (this.open) {\n            requestAnimationFrame(this.handleOpen);\n        }\n    }\n\n    @Listen('changeOffset')\n    protected onChangeIndex(event: CustomEvent<number>) {\n        event.stopPropagation();\n        this.offset = event.detail;\n    }\n\n    @Watch('open')\n    protected watchOpen() {\n        if (this.open) {\n            this.handleOpen();\n        } else {\n            this.handleClose();\n        }\n\n        this.isOpen = this.open;\n    }\n\n    /**\n     * Show the snackbar\n     * @deprecated Use the `open` property instead.\n     */\n    @Method()\n    public async show() {\n        console.warn(\n            'The `show` method in `limel-snackbar` is deprecated. Please use the `open` property instead.'\n        );\n        if (!this.open) {\n            this.handleOpen();\n        }\n    }\n\n    public handleOpen = () => {\n        if (this.isOpen) {\n            return;\n        }\n\n        this.isOpen = true;\n        this.closing = false;\n        container.add(this.host);\n\n        if (this.timeout && this.timeout !== -1) {\n            this.timeoutId = window.setTimeout(\n                this.handleClose,\n                Math.max(\n                    this.timeout - hideAnimationDuration,\n                    hideAnimationDuration\n                )\n            );\n        }\n    };\n\n    private readonly handleClose = () => {\n        if (!this.isOpen) {\n            return;\n        }\n\n        this.closing = true;\n\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n        }\n\n        setTimeout(() => {\n            this.isOpen = false;\n            container.remove(this.host);\n            this.hide.emit();\n            this.offset = 0;\n        }, hideAnimationDuration);\n    };\n\n    public render() {\n        return (\n            <aside\n                popover=\"manual\"\n                style={{\n                    '--snackbar-timeout': `${Math.max(this.timeout || 0, 0)}ms`,\n                    '--snackbar-distance-to-top-edge': `${this.offset}px`,\n                }}\n                class={{\n                    open: this.open,\n                    'is-closing': this.closing,\n                    'limel-portal--parent': true,\n                }}\n                id={this.snackbarId}\n                role={this.setAriaRoles()}\n                aria-relevant={this.open ? 'additions' : undefined}\n            >\n                <div class=\"surface\" aria-atomic=\"false\">\n                    <div class=\"label\">{this.message}</div>\n                    {this.renderActions(this.actionText)}\n                    {this.renderDismissButton(this.dismissible)}\n                </div>\n            </aside>\n        );\n    }\n\n    private setAriaRoles() {\n        if (!this.open) {\n            return;\n        }\n\n        if (!this.timeout || this.timeout === -1) {\n            return 'alertdialog';\n        }\n\n        return 'status';\n    }\n\n    private readonly handleClickAction = () => {\n        this.action.emit();\n    };\n\n    private renderActions(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <div class=\"actions\" aria-atomic=\"true\">\n                {this.renderActionButton(actionText)}\n            </div>\n        );\n    }\n\n    private renderActionButton(actionText: string) {\n        if (!actionText) {\n            return;\n        }\n\n        return (\n            <limel-button label={actionText} onClick={this.handleClickAction} />\n        );\n    }\n\n    private renderDismissButton(dismissible: boolean) {\n        if (!dismissible) {\n            return;\n        }\n\n        const label = translate.get('snackbar.dismiss', this.language);\n\n        return (\n            <div class=\"dismiss\">\n                {this.renderTimeoutVisualization()}\n                <limel-icon-button\n                    class=\"dismiss-button\"\n                    icon=\"multiply\"\n                    label={label}\n                    onClick={this.handleClose}\n                    aria-controls={this.snackbarId}\n                />\n            </div>\n        );\n    }\n\n    private renderTimeoutVisualization() {\n        if (!this.timeout || this.timeout === -1) {\n            return;\n        }\n\n        return (\n            <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\">\n                <circle r=\"18\" cx=\"18\" cy=\"18\" fill=\"var(--track-color)\" />\n                <path\n                    class=\"track\"\n                    d=\"M 18,18 m -16,0 a 16,16 0 1,0 32,0 a 16,16 0 1,0 -32,0\"\n                    stroke=\"var(--fill-color)\"\n                />\n            </svg>\n        );\n    }\n}\n"},{"filename":"snackbar.scss","type":"scss","source":"* {\n    box-sizing: border-box;\n}\n\naside {\n    background: none;\n    border: none;\n    inset: unset;\n    overflow: visible;\n    padding: 0.5rem 0.5rem 0 0.5rem;\n    right: 0;\n\n    width: var(--limel-snackbar-width, 21rem);\n    top: calc(\n        var(--snackbar-distance-to-top-edge) + env(safe-area-inset-top, 0)\n    );\n\n    transition:\n        opacity var(--limel-snackbar-opacity-transition-speed, 0.2s) ease,\n        top var(--limel-snackbar-top-transition-speed, 0.46s)\n            cubic-bezier(1, 0.09, 0, 0.89),\n        transform var(--limel-snackbar-top-transition-speed, 0.46s) ease;\n    transform: translate3d(0, 0, 0);\n    opacity: 1;\n\n    &.is-closing {\n        transform: translate3d(2rem, 0, 0);\n        opacity: 0;\n        --limel-snackbar-top-transition-speed: 0.2s;\n        --limel-snackbar-opacity-transition-speed: 0.2s;\n    }\n}\n\n.surface {\n    overflow: hidden;\n\n    padding: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    gap: 0.25rem;\n\n    min-height: 3.25rem;\n    border-radius: 0.75rem;\n\n    background-color: rgb(var(--contrast-1400));\n    box-shadow: var(--shadow-depth-8), var(--shadow-depth-16);\n}\n\n.label {\n    color: rgb(var(--contrast-100));\n\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.8125rem;\n    font-weight: 400;\n    padding: 0 0.25rem;\n\n    width: 100%;\n    flex-grow: 1;\n}\n\n.actions {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    box-sizing: border-box;\n    gap: 0.5rem;\n}\n\n.dismiss,\n.actions {\n    --lime-elevated-surface-background-color: rgb(\n        var(--contrast-1300)\n    ); // background color of the buttons\n}\n\n.dismiss {\n    --mdc-theme-on-surface: rgb(var(--contrast-100)); // color of the X icon\n    --icon-background-color: var(--lime-elevated-surface-background-color);\n    --fill-color: var(--mdc-theme-primary);\n    --track-color: rgb(var(--contrast-800), 0.2);\n    transition:\n        opacity 0.1s ease,\n        transform 0.1s ease;\n    position: absolute;\n    top: -0.375rem;\n    left: -0.375rem;\n    transform: scale(0.7);\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n        position: absolute;\n        transform: rotate(90deg);\n        fill: transparent;\n        stroke-dasharray: 100;\n        stroke-linecap: round;\n\n        aside.open & {\n            animation: timeout var(--snackbar-timeout) linear forwards;\n        }\n    }\n\n    .is-closing {\n        transform: scale(0.5);\n        opacity: 0;\n    }\n}\n\n.dismiss-button {\n    transform: scale(0.8);\n    margin: 0;\n    padding: 0;\n}\n\n@keyframes timeout {\n    0% {\n        stroke-width: 4;\n        stroke-dashoffset: 0;\n        opacity: 1;\n    }\n    100% {\n        stroke-width: 1;\n        stroke-dashoffset: -100;\n        opacity: 0.7;\n    }\n}\n\n@import '../portal/partial-styles/portal-container.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner","filePath":"./src/components/spinner/spinner.tsx","fileName":"spinner.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/spinner/usage","tag":"limel-spinner","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-spinner"},{"name":"exampleComponent","text":"limel-example-spinner-color"},{"name":"exampleComponent","text":"limel-example-spinner-size"}],"encapsulation":"shadow","dependents":["limel-button","limel-chart","limel-example-spinner","limel-example-spinner-color","limel-example-spinner-size","limel-example-tab-panel-content","limel-file-viewer","limel-menu","limel-picker","limel-table"],"dependencies":[],"dependencyGraph":{"limel-button":["limel-spinner"],"limel-chart":["limel-spinner"],"limel-example-spinner":["limel-spinner"],"limel-example-spinner-color":["limel-spinner"],"limel-example-spinner-size":["limel-spinner"],"limel-example-tab-panel-content":["limel-spinner"],"limel-file-viewer":["limel-spinner"],"limel-menu":["limel-spinner"],"limel-picker":["limel-spinner"],"limel-table":["limel-spinner"]},"props":[{"name":"limeBranded","type":"boolean","mutable":false,"attr":"lime-branded","reflectToAttr":false,"docs":"Gives the spinner the shape of Lime Technologies' logo","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"size","type":"\"large\" | \"medium\" | \"mini\" | \"small\" | \"x-small\"","mutable":false,"attr":"size","reflectToAttr":true,"docs":"Determines the size of the spinner.","docsTags":[],"default":"'mini'","values":[{"value":"large","type":"string"},{"value":"medium","type":"string"},{"value":"mini","type":"string"},{"value":"small","type":"string"},{"value":"x-small","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--spinner-color-1","annotation":"prop","docs":"1st animated stroke color, defaults to `--lime-brand-color-lime-green`."},{"name":"--spinner-color-10","annotation":"prop","docs":"10th animated stroke color, defaults to `--lime-brand-color-sunny-orange`."},{"name":"--spinner-color-2","annotation":"prop","docs":"2nd animated stroke color, defaults to `--lime-brand-color-ocean-teal`."},{"name":"--spinner-color-3","annotation":"prop","docs":"3rd animated stroke color, defaults to `--lime-brand-color-aqua`."},{"name":"--spinner-color-4","annotation":"prop","docs":"4th animated stroke color, defaults to `--lime-brand-color-bubble-gum`."},{"name":"--spinner-color-5","annotation":"prop","docs":"5th animated stroke color, defaults to `--lime-brand-color-sunny-orange`."},{"name":"--spinner-color-6","annotation":"prop","docs":"6th animated stroke color, defaults to `--lime-brand-color-lime-green`."},{"name":"--spinner-color-7","annotation":"prop","docs":"7th animated stroke color, defaults to `--lime-brand-color-ocean-teal`."},{"name":"--spinner-color-8","annotation":"prop","docs":"8th animated stroke color, defaults to `--lime-brand-color-aqua`."},{"name":"--spinner-color-9","annotation":"prop","docs":"9th animated stroke color, defaults to `--lime-brand-color-bubble-gum`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"spinner.tsx","type":"tsx","source":"import { SpinnerSize } from './spinner.types';\nimport { Component, Prop, h } from '@stencil/core';\n\n/**\n * @exampleComponent limel-example-spinner\n * @exampleComponent limel-example-spinner-color\n * @exampleComponent limel-example-spinner-size\n */\n@Component({\n    tag: 'limel-spinner',\n    shadow: true,\n    styleUrl: 'spinner.scss',\n})\nexport class Spinner {\n    /**\n     * Determines the size of the spinner.\n     */\n    @Prop({ reflect: true })\n    public size: SpinnerSize = 'mini';\n\n    /**\n     * Gives the spinner the shape of Lime Technologies' logo\n     */\n    @Prop()\n    public limeBranded: boolean = false;\n\n    public render() {\n        return [\n            <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                {this.renderSpinner()}\n            </svg>,\n        ];\n    }\n\n    private renderSpinner() {\n        if (!this.limeBranded) {\n            return (\n                <g>\n                    <circle class=\"outline\" cx=\"12\" cy=\"12\" r=\"10\" />\n                    <g class=\"spinner\">\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                        <circle class=\"color\" cx=\"12\" cy=\"12\" r=\"10\" />\n                    </g>\n                </g>\n            );\n        }\n\n        return (\n            <g>\n                <g clip-path=\"url(#mask)\">\n                    <circle class=\"outline thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                    <g class=\"spinner\">\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                        <circle class=\"color thick\" cx=\"12\" cy=\"12\" r=\"12\" />\n                    </g>\n                </g>\n                <clipPath id=\"mask\">\n                    <path d=\"M2.166 11.248C2.166 5.04 7.058 0 13.083 0 19.108 0 24 5.04 24 11.248c0 3.229-1.307 6.548-4.533 9.306-3.908 3.343-9.15 3.8-17.254 3.249-2.405-.164-2.753-.588-1.51-1.533C4.61 19.3 2.165 17.025 2.165 11.248zm3.124 9.834c5.563.227 9.416-.246 12.397-2.76 2.432-2.05 3.482-4.56 3.51-7.074.05-4.613-3.636-8.36-8.114-8.36-4.478 0-8.114 3.746-8.114 8.36 0 2.793.607 4.737.726 6.345.092 1.252.03 2.388-.405 3.49z\" />\n                </clipPath>\n            </g>\n        );\n    }\n}\n"},{"filename":"spinner.scss","type":"scss","source":"@use 'sass:math';\n@use '../../style/functions';\n\n/**\n * @prop --spinner-color-1: 1st animated stroke color, defaults to `--lime-brand-color-lime-green`.\n * @prop --spinner-color-2: 2nd animated stroke color, defaults to `--lime-brand-color-ocean-teal`.\n * @prop --spinner-color-3: 3rd animated stroke color, defaults to `--lime-brand-color-aqua`.\n * @prop --spinner-color-4: 4th animated stroke color, defaults to `--lime-brand-color-bubble-gum`.\n * @prop --spinner-color-5: 5th animated stroke color, defaults to `--lime-brand-color-sunny-orange`.\n * @prop --spinner-color-6: 6th animated stroke color, defaults to `--lime-brand-color-lime-green`.\n * @prop --spinner-color-7: 7th animated stroke color, defaults to `--lime-brand-color-ocean-teal`.\n * @prop --spinner-color-8: 8th animated stroke color, defaults to `--lime-brand-color-aqua`.\n * @prop --spinner-color-9: 9th animated stroke color, defaults to `--lime-brand-color-bubble-gum`.\n * @prop --spinner-color-10: 10th animated stroke color, defaults to `--lime-brand-color-sunny-orange`.\n */\n\n$stroke-width-normal: 4;\n$stroke-width-thick: 10;\n$colors:\n    var(--spinner-color-1, rgb(var(--lime-brand-color-lime-green))),\n    var(--spinner-color-2, rgb(var(--lime-brand-color-ocean-teal))),\n    var(--spinner-color-3, rgb(var(--lime-brand-color-aqua))),\n    var(--spinner-color-4, rgb(var(--lime-brand-color-bubble-gum))),\n    var(--spinner-color-5, rgb(var(--lime-brand-color-sunny-orange))),\n    var(--spinner-color-6, rgb(var(--lime-brand-color-lime-green))),\n    var(--spinner-color-7, rgb(var(--lime-brand-color-ocean-teal))),\n    var(--spinner-color-8, rgb(var(--lime-brand-color-aqua))),\n    var(--spinner-color-9, rgb(var(--lime-brand-color-bubble-gum))),\n    var(--spinner-color-10, rgb(var(--contrast-700)));\n$dash: 63;\n$duration: length($colors) * 1s;\n$duration-alt: math.div($duration, length($colors));\n$keyframe: math.div(1, length($colors) * 2) * 100;\n\n:host(limel-spinner) {\n    display: block;\n}\n\n@keyframes spin {\n    50% {\n        transform: rotate(180deg);\n    }\n    100% {\n        transform: rotate(720deg);\n    }\n}\n\n@keyframes fade-in-the-spinner {\n    0% {\n        transform: scale(0.7);\n        opacity: 0;\n    }\n    100% {\n        transform: scale(1);\n        opacity: 1;\n    }\n}\n\n@keyframes animate-colored-circles {\n    #{$keyframe * 1%} {\n        stroke-dashoffset: 0;\n    }\n    #{$keyframe * 2%},\n    100% {\n        stroke-dashoffset: $dash;\n    }\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host {\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    // size=mini is the default\n    height: functions.pxToRem(24);\n    width: functions.pxToRem(24);\n    transform: translate3d(0, 0, 0);\n    animation: fade-in-the-spinner 0.5s ease forwards;\n}\n\n:host([size='x-small']) {\n    height: functions.pxToRem(32);\n    width: functions.pxToRem(32);\n}\n\n:host([size='small']) {\n    height: functions.pxToRem(34);\n    width: functions.pxToRem(34);\n}\n\n:host([size='medium']) {\n    height: functions.pxToRem(44);\n    width: functions.pxToRem(44);\n}\n\n:host([size='large']) {\n    height: functions.pxToRem(64);\n    width: functions.pxToRem(64);\n}\n\n.spinner {\n    animation: spin $duration-alt linear infinite;\n    transform-origin: center;\n}\n\n.color {\n    animation: animate-colored-circles $duration linear infinite;\n    fill: none;\n    stroke-dasharray: $dash;\n    stroke-dashoffset: $dash;\n    stroke-linecap: round;\n    stroke-width: $stroke-width-normal;\n\n    &.thick {\n        stroke-width: $stroke-width-thick;\n    }\n\n    @for $i from 1 through length($colors) {\n        &:nth-child(#{$i}) {\n            stroke: nth($colors, $i);\n\n            @if $i > 1 {\n                animation-delay: ($i - 1) * $duration-alt;\n            }\n        }\n    }\n}\n\n.outline {\n    stroke: rgba(var(--lime-brand-color-light-grey), 0.3);\n    fill: none;\n    stroke-linecap: round;\n    stroke-width: $stroke-width-normal;\n\n    &.thick {\n        stroke-width: $stroke-width-thick;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button","filePath":"./src/components/split-button/split-button.tsx","fileName":"split-button.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/split-button/usage","tag":"limel-split-button","overview":"A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","usage":{},"docs":"A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-split-button-basic"},{"name":"exampleComponent","text":"limel-example-split-button-loading"},{"name":"exampleComponent","text":"limel-example-split-button-repeat-default-command"}],"encapsulation":"shadow","dependents":["limel-example-button-disabled-vs-hidden","limel-example-split-button-basic","limel-example-split-button-loading","limel-example-split-button-repeat-default-command"],"dependencies":["limel-menu","limel-button"],"dependencyGraph":{"limel-split-button":["limel-menu","limel-button"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"],"limel-example-button-disabled-vs-hidden":["limel-split-button"],"limel-example-split-button-basic":["limel-split-button"],"limel-example-split-button-loading":["limel-split-button"],"limel-example-split-button-repeat-default-command":["limel-split-button"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"icon","type":"string","mutable":false,"attr":"icon","reflectToAttr":true,"docs":"Set icon for the button","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"items","type":"(ListSeparator | MenuItem<any>)[]","mutable":false,"reflectToAttr":false,"docs":"A list of items and separators to show in the menu.","docsTags":[],"default":"[]","values":[{"type":"(ListSeparator"},{"type":"MenuItem<any>)[]"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The text to show on the default action part of the button.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":true,"docs":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"loadingFailed","type":"boolean","mutable":false,"attr":"loading-failed","reflectToAttr":true,"docs":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"primary","type":"boolean","mutable":false,"attr":"primary","reflectToAttr":true,"docs":"Set to `true` to make the button primary.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"select","detail":"MenuItem<any>","bubbles":true,"cancelable":true,"composed":true,"docs":"Is emitted when a menu item is selected.","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"split-button.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, Host, h, Prop } from '@stencil/core';\nimport { ListSeparator } from '../list/list-item.types';\nimport { MenuItem } from '../menu/menu.types';\n\n/**\n * A split button is a button with two components:\n * a button and a side-menu attached to it.\n *\n * Clicking on the button runs a default action,\n * and clicking on the arrow opens up a list of other possible actions.\n *\n * :::warning\n * - Never use a split button for navigation purposes, such as going to next page.\n * The button should only be used for performing commands!\n * - Never use this component instead of a Select or Menu component!\n * :::\n *\n * @exampleComponent limel-example-split-button-basic\n * @exampleComponent limel-example-split-button-loading\n * @exampleComponent limel-example-split-button-repeat-default-command\n */\n@Component({\n    tag: 'limel-split-button',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'split-button.scss',\n})\nexport class SplitButton {\n    /**\n     * The text to show on the default action part of the button.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Set to `true` to make the button primary.\n     */\n    @Prop({ reflect: true })\n    public primary = false;\n\n    /**\n     * Set icon for the button\n     */\n    @Prop({ reflect: true })\n    public icon: string;\n\n    /**\n     * Set to `true` to disable the button.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to put the button in the `loading` state.\n     * This also disables the button.\n     */\n    @Prop({ reflect: true })\n    public loading = false;\n\n    /**\n     * Set to `true` to indicate failure instead of success when the button is\n     * no longer in the `loading` state.\n     */\n    @Prop({ reflect: true })\n    public loadingFailed = false;\n\n    /**\n     * A list of items and separators to show in the menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Is emitted when a menu item is selected.\n     */\n    @Event()\n    public select: EventEmitter<MenuItem>;\n\n    render() {\n        return (\n            <Host\n                class={{\n                    'has-menu': this.items.length > 0,\n                }}\n                onClick={this.filterClickWhenDisabled}\n            >\n                <limel-button\n                    label={this.label}\n                    primary={this.primary}\n                    icon={this.icon}\n                    disabled={this.disabled}\n                    loading={this.loading}\n                    loadingFailed={this.loadingFailed}\n                />\n                {this.renderMenu()}\n            </Host>\n        );\n    }\n\n    private renderMenu = () => {\n        if (this.items.length === 0) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class={{\n                    primary: this.primary,\n                }}\n                disabled={this.disabled || this.loading}\n                items={this.items}\n                openDirection=\"bottom\"\n            >\n                <button\n                    class=\"menu-trigger\"\n                    slot=\"trigger\"\n                    disabled={this.disabled}\n                >\n                    ⋮\n                </button>\n            </limel-menu>\n        );\n    };\n\n    private filterClickWhenDisabled = (e) => {\n        if (this.disabled) {\n            e.preventDefault();\n        }\n    };\n}\n"},{"filename":"split-button.scss","type":"scss","source":"@use '../../style/mixins';\n\n:host(limel-split-button.has-menu) {\n    --button-padding-right: 2rem;\n}\n\n:host(limel-split-button) {\n    display: inline-flex;\n    isolation: isolate;\n\n    * {\n        box-sizing: border-box;\n    }\n}\n\nlimel-button {\n    width: 100%;\n}\n\n$distance-around-trigger: 0.125rem;\n\nlimel-menu {\n    display: flex;\n    justify-content: flex-end;\n    position: relative;\n    z-index: 1;\n\n    padding: $distance-around-trigger;\n    margin-left: calc(var(--button-padding-right) * -1);\n    width: var(--button-padding-right);\n\n    &:before {\n        transition: background-color 0.5s ease;\n        content: '';\n        position: absolute;\n        inset: 0.375rem auto 0.375rem 0.6875rem;\n        width: 1px;\n        background-color: currentColor;\n\n        opacity: 0.2;\n    }\n\n    &:not([disabled]) {\n        color: var(\n            --mdc-theme-primary,\n            rgb(var(--color-teal-default))\n        ); // similar to limel-button text\n\n        &.primary {\n            color: var(\n                --mdc-theme-on-primary,\n                rgb(var(--color-white))\n            ); // similar to limel-button text\n        }\n    }\n\n    &[disabled] {\n        color: rgba(var(--contrast-1600), 0.37); // similar to limel-button text\n    }\n\n    &:hover,\n    &:focus-within {\n        &:before {\n            background-color: transparent;\n        }\n    }\n}\n\n.menu-trigger {\n    all: unset;\n\n    text-align: center;\n    font-weight: bold;\n\n    border-radius: 0.125rem;\n    height: 100%;\n    width: 1rem;\n\n    &:not(:disabled) {\n        @include mixins.is-flat-clickable(\n            $color: 'inherit',\n            $color--hovered: 'inherit'\n        );\n        @include mixins.visualize-keyboard-focus();\n        cursor: pointer;\n\n        &:focus-visible,\n        &:hover {\n            background-color: rgb(var(--color-white), 0.1);\n        }\n    }\n\n    &[aria-expanded]:not([aria-expanded='false']) {\n        box-shadow: var(--button-shadow-inset-pressed);\n    }\n\n    &:before {\n        // prevents unintentionally activating the default action,\n        // by clicking on the edge of menu trigger,\n        // which would be activating the default onClick action\n        // on `limel-button`.\n        content: '';\n        position: absolute;\n        inset: -$distance-around-trigger * 2;\n        z-index: -1;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/switch","filePath":"./src/components/switch/switch.tsx","fileName":"switch.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/switch/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/switch/usage","tag":"limel-switch","overview":"The Switch component is a fundamental element in UI design that serves as a toggle switch\nto control the state of a specific setting or option in an application or website.\nThe two distinct positions of the Switch are visually indicative of the two states:\nON and OFF; making it easy for users to understand the current state of the controlled feature.\n\nThe Switch component is widely used in user interfaces to enable users to\nquickly and intuitively change binary settings.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","usage":{},"docs":"The Switch component is a fundamental element in UI design that serves as a toggle switch\nto control the state of a specific setting or option in an application or website.\nThe two distinct positions of the Switch are visually indicative of the two states:\nON and OFF; making it easy for users to understand the current state of the controlled feature.\n\nThe Switch component is widely used in user interfaces to enable users to\nquickly and intuitively change binary settings.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","docsTags":[{"name":"exampleComponent","text":"limel-example-switch"},{"name":"exampleComponent","text":"limel-example-switch-helper-text"},{"name":"exampleComponent","text":"limel-example-switch-readonly"}],"encapsulation":"shadow","dependents":["limel-example-dialog-nested-close-events","limel-example-dynamic-label-readonly-boolean","limel-example-form-span-fields","limel-example-icon-button-composite","limel-example-readonly-props","limel-example-snackbar-persistent-non-dismissible","limel-example-switch","limel-example-switch-helper-text","limel-example-switch-readonly","limel-example-switch-vs-checkbox"],"dependencies":["limel-helper-line","limel-dynamic-label"],"dependencyGraph":{"limel-switch":["limel-helper-line","limel-dynamic-label"],"limel-dynamic-label":["limel-icon"],"limel-example-dialog-nested-close-events":["limel-switch"],"limel-example-dynamic-label-readonly-boolean":["limel-switch"],"limel-example-form-span-fields":["limel-switch"],"limel-example-icon-button-composite":["limel-switch"],"limel-example-readonly-props":["limel-switch"],"limel-example-snackbar-persistent-non-dismissible":["limel-switch"],"limel-example-switch":["limel-switch"],"limel-example-switch-helper-text":["limel-switch"],"limel-example-switch-readonly":["limel-switch"],"limel-example-switch-vs-checkbox":["limel-switch"]},"props":[{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the switch","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value is invalid.","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Label to display next to the switch","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"readonlyLabels","type":"Label<boolean>[]","mutable":false,"reflectToAttr":false,"docs":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","docsTags":[{"name":"beta"}],"default":"[]","values":[{"type":"Label<boolean>[]"}],"optional":true,"required":false},{"name":"value","type":"boolean","mutable":false,"attr":"value","reflectToAttr":true,"docs":"The value of the switch","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the value has changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"switch.tsx","type":"tsx","source":"import { MDCSwitch } from '@material/switch';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { Label } from '../dynamic-label/label.types';\nimport { Icon } from '../../interface';\n\n/**\n * The Switch component is a fundamental element in UI design that serves as a toggle switch\n * to control the state of a specific setting or option in an application or website.\n * The two distinct positions of the Switch are visually indicative of the two states:\n * ON and OFF; making it easy for users to understand the current state of the controlled feature.\n *\n * The Switch component is widely used in user interfaces to enable users to\n * quickly and intuitively change binary settings.\n *\n * :::important\n * Checkboxes are sometimes used interchangeably with switches in user interfaces.\n * But there is an important difference between the two! Please read our guidelines about\n * [Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).\n *\n * @exampleComponent limel-example-switch\n * @exampleComponent limel-example-switch-helper-text\n * @exampleComponent limel-example-switch-readonly\n */\n@Component({\n    tag: 'limel-switch',\n    shadow: true,\n    styleUrl: 'switch.scss',\n})\nexport class Switch {\n    /**\n     * Label to display next to the switch\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Disables the switch when `true`,\n     * and visually shows that the switch is editable but disabled.\n     * This tells the users that if certain requirements are met,\n     * the switch may become interactable.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Disables the switch when `true`. This visualizes the switch slightly differently.\n     * But shows no visual sign indicating that the switch is disabled\n     * or can ever become interactable.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid: boolean;\n\n    /**\n     * The value of the switch\n     */\n    @Prop({ reflect: true })\n    public value = false;\n\n    /**\n     * Optional helper text to display below the switch\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * The labels to use to clarify what kind of data is being visualized,\n     * when the component is `readonly`.\n     * @beta\n     */\n    @Prop()\n    public readonlyLabels?: Array<Label<boolean>> = [];\n\n    /**\n     * Emitted when the value has changed\n     */\n    @Event()\n    private change: EventEmitter<boolean>;\n\n    @Element()\n    private host: HTMLLimelSwitchElement;\n    private helperTextId: string = createRandomString();\n\n    @State()\n    private fieldId = createRandomString();\n\n    private mdcSwitch: MDCSwitch;\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const element = this.host.shadowRoot.querySelector(\n            '.mdc-switch'\n        ) as HTMLButtonElement;\n        if (!element) {\n            return;\n        }\n\n        this.mdcSwitch = new MDCSwitch(element);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n        this.mdcSwitch?.destroy();\n    }\n\n    public render() {\n        if (this.readonly) {\n            let icon: string | Icon = 'minus';\n            if (this.value) {\n                icon = {\n                    name: 'ok',\n                    color: 'var(--mdc-theme-primary)',\n                };\n            }\n\n            return [\n                <limel-dynamic-label\n                    value={this.value}\n                    aria-controls={this.helperTextId}\n                    defaultLabel={{ text: this.label, icon: icon }}\n                    labels={this.readonlyLabels}\n                />,\n                this.renderHelperLine(),\n            ];\n        }\n\n        return [\n            <button\n                id={this.fieldId}\n                class={{\n                    'mdc-switch': true,\n                    'mdc-switch--unselected': !this.value,\n                    'mdc-switch--selected': this.value,\n                }}\n                type=\"button\"\n                role=\"switch\"\n                aria-checked={this.value}\n                disabled={this.disabled}\n                onClick={this.handleClick}\n                aria-controls={this.helperTextId}\n            >\n                <div class=\"mdc-switch__track\" />\n                <div class=\"mdc-switch__handle-track\">\n                    <div class=\"mdc-switch__handle\">\n                        <div class=\"mdc-switch__shadow\">\n                            <div class=\"mdc-elevation-overlay\"></div>\n                        </div>\n                        <div class=\"mdc-switch__ripple\"></div>\n                        <div class=\"mdc-switch__icons\">\n                            <svg\n                                class=\"mdc-switch__icon mdc-switch__icon--on\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z\" />\n                            </svg>\n                            <svg\n                                class=\"mdc-switch__icon mdc-switch__icon--off\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M20 13H4v-2h16v2z\" />\n                            </svg>\n                        </div>\n                    </div>\n                </div>\n            </button>,\n            <label\n                class={`${this.disabled ? 'disabled' : ''}`}\n                htmlFor={this.fieldId}\n            >\n                {this.label}\n            </label>,\n            this.renderHelperLine(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: boolean) {\n        if (!this.mdcSwitch) {\n            return;\n        }\n\n        this.mdcSwitch.selected = newValue;\n    }\n\n    private renderHelperLine = () => {\n        if (!this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperTextId={this.helperTextId}\n                helperText={this.helperText}\n                invalid={this.invalid}\n            />\n        );\n    };\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.change.emit(!this.value);\n    };\n}\n"},{"filename":"switch.scss","type":"scss","source":"@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n\n@use '@material/switch/styles';\n\n$scale-factor: 0.8;\n\n:host(limel-switch) {\n    isolation: isolate;\n\n    min-height: 1.75rem;\n\n    display: flex;\n    align-items: flex-start;\n    gap: 0.5rem;\n\n    --mdc-switch-selected-icon-color: transparent;\n    --mdc-switch-unselected-icon-color: transparent;\n\n    --mdc-switch-disabled-selected-icon-opacity: 1;\n    --mdc-switch-disabled-unselected-icon-opacity: 1;\n\n    --mdc-switch-selected-icon-size: 0.75rem;\n    --mdc-switch-unselected-icon-size: 0.75rem;\n\n    --mdc-switch-track-height: 1.25rem;\n    --mdc-switch-track-shape: var(--mdc-switch-track-height);\n\n    --mdc-switch-unselected-focus-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-focus-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-pressed-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-pressed-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-unselected-hover-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n    --mdc-switch-selected-hover-handle-color: var(\n        --lime-elevated-surface-background-color\n    );\n\n    --mdc-switch-unselected-track-color: rgb(var(--contrast-700));\n    --mdc-switch-unselected-focus-track-color: rgb(var(--contrast-800));\n    --mdc-switch-unselected-pressed-track-color: rgb(var(--contrast-800));\n    --mdc-switch-unselected-hover-track-color: rgb(var(--contrast-800));\n    --mdc-switch-selected-focus-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-pressed-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-track-color: var(--mdc-theme-primary);\n    --mdc-switch-selected-hover-track-color: var(--mdc-theme-primary);\n\n    --mdc-switch-handle-elevation: var(--button-shadow-normal);\n    --mdc-switch-disabled-track-opacity: 0.4;\n\n    --mdc-switch-disabled-selected-handle-color: rgb(var(--contrast-1000));\n    --mdc-switch-disabled-unselected-handle-color: rgb(var(--contrast-1000));\n}\n\n.mdc-switch {\n    margin-top: 0.25rem;\n    &:hover {\n        --mdc-switch-handle-elevation: var(--button-shadow-hovered);\n    }\n}\n\nlabel {\n    -webkit-font-smoothing: antialiased;\n    font-family: var(\n        --mdc-typography-body2-font-family,\n        var(--mdc-typography-font-family, inherit)\n    );\n    font-size: var(--mdc-typography-body2-font-size, 0.8125rem);\n    font-weight: var(--mdc-typography-body2-font-weight, 400);\n    text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\n    text-transform: var(--mdc-typography-body2-text-transform, inherit);\n\n    color: var(--mdc-theme-on-surface);\n    padding-top: 0.375rem;\n    line-height: normal;\n    letter-spacing: normal;\n\n    &:not(.disabled) {\n        cursor: pointer;\n    }\n}\n\nlabel {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-switch {\n    &.mdc-switch--selected,\n    &.mdc-switch.mdc-switch--unselected {\n        .mdc-switch__handle {\n            &:after,\n            &:before {\n                transform: scale($scale-factor);\n            }\n        }\n    }\n    .mdc-switch__shadow {\n        transform: scale($scale-factor);\n    }\n}\n\n@import './partial-styles/_helper-text.scss';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar","filePath":"./src/components/tab-bar/tab-bar.tsx","fileName":"tab-bar.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/usage","tag":"limel-tab-bar","overview":"Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","usage":{},"docs":"Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","docsTags":[{"name":"exampleComponent","text":"limel-example-tab-bar"},{"name":"exampleComponent","text":"limel-example-tab-bar-with-dynamic-tab-width"},{"name":"exampleComponent","text":"limel-example-tab-bar-with-equal-tab-width"}],"encapsulation":"shadow","dependents":["limel-example-tab-bar","limel-example-tab-bar-with-dynamic-tab-width","limel-example-tab-bar-with-equal-tab-width","limel-tab-panel"],"dependencies":["limel-icon","limel-badge"],"dependencyGraph":{"limel-tab-bar":["limel-icon","limel-badge"],"limel-example-tab-bar":["limel-tab-bar"],"limel-example-tab-bar-with-dynamic-tab-width":["limel-tab-bar"],"limel-example-tab-bar-with-equal-tab-width":["limel-tab-bar"],"limel-tab-panel":["limel-tab-bar"]},"props":[{"name":"tabs","type":"Tab[]","mutable":true,"reflectToAttr":false,"docs":"List of tabs to display","docsTags":[],"default":"[]","values":[{"type":"Tab[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"changeTab","detail":"Tab","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a tab has been changed","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[{"event":"resize","target":"window","capture":false,"passive":true}],"sources":[{"filename":"tab-bar.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Listen,\n    Prop,\n    Element,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { MDCTabBar, MDCTabBarActivatedEvent } from '@material/tab-bar';\nimport { strings } from '@material/tab-bar/constants';\nimport { Tab } from './tab.types';\nimport { isEqual, difference } from 'lodash-es';\nimport { setActiveTab } from './tabs';\nimport { getIconColor, getIconName } from '../icon/get-icon-props';\n\nconst { TAB_ACTIVATED_EVENT } = strings;\nconst SCROLL_DISTANCE_ON_CLICK_PX = 150;\nconst HIDE_SCROLL_BUTTONS_WHEN_SCROLLED_LESS_THAN_PX = 40;\nconst TOTAL_WIDTH_PERCENTAGE = 100;\nconst OVERLAP_PERCENTAGE = 20;\n\n/**\n * Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n * :::warning\n * Tab bars should be strictly used for navigation at the top levels.\n * They should never be used to perform actions, or navigate away from the view which contains them.\n * :::\n * An exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\n * A tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n * :::tip Other things to consider\n * Never divide the content of a tab using a nested tab bar.\n * Never place two tab bars within the same screen.\n * Never use background color for icons in tabs.\n * Avoid having long labels for tabs.\n * A tab will never be removed or get disabled, even if there is no content under it.\n * :::\n *\n * @exampleComponent limel-example-tab-bar\n * @exampleComponent limel-example-tab-bar-with-dynamic-tab-width\n * @exampleComponent limel-example-tab-bar-with-equal-tab-width\n */\n@Component({\n    tag: 'limel-tab-bar',\n    styleUrl: 'tab-bar.scss',\n    shadow: true,\n})\nexport class TabBar {\n    /**\n     * List of tabs to display\n     */\n    @Prop({ mutable: true })\n    public tabs: Tab[] = [];\n\n    /**\n     * Emitted when a tab has been changed\n     */\n    @Event()\n    private changeTab: EventEmitter<Tab>;\n\n    @Element()\n    private host: HTMLLimelTabBarElement;\n\n    @State()\n    private canScrollLeft = false;\n\n    @State()\n    private canScrollRight = false;\n\n    private mdcTabBar: MDCTabBar;\n    private setupMdc = false;\n    private scrollArea: HTMLElement;\n    private scrollContent: HTMLElement;\n\n    constructor() {\n        this.handleTabActivated = this.handleTabActivated.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleLeftScrollClick = this.handleLeftScrollClick.bind(this);\n        this.handleRightScrollClick = this.handleRightScrollClick.bind(this);\n        this.renderTab = this.renderTab.bind(this);\n    }\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public componentDidUpdate() {\n        if (!this.setupMdc) {\n            return;\n        }\n\n        this.setup();\n        this.setupMdc = false;\n    }\n\n    public disconnectedCallback() {\n        this.tearDown();\n    }\n\n    public render() {\n        return (\n            <div class=\"mdc-tab-bar\" role=\"tablist\">\n                <div\n                    class={{\n                        'mdc-tab-scroller': true,\n                        'can-scroll-left': this.canScrollLeft,\n                        'can-scroll-right': this.canScrollRight,\n                    }}\n                >\n                    <div class=\"mdc-tab-scroller__scroll-area lime-hide-scrollbars\">\n                        <div class=\"mdc-tab-scroller__scroll-content\">\n                            {this.tabs.map(this.renderTab)}\n                        </div>\n                    </div>\n                    <div class=\"scroll-fade left\" />\n                    <div class=\"scroll-button left\">\n                        <button\n                            type=\"button\"\n                            tabindex=\"-1\"\n                            aria-hidden=\"true\"\n                            disabled={!this.canScrollLeft}\n                            onClick={this.handleLeftScrollClick}\n                        >\n                            <limel-icon name=\"angle_left\" />\n                        </button>\n                    </div>\n                    <div class=\"scroll-fade right\" />\n                    <div class=\"scroll-button right\">\n                        <button\n                            type=\"button\"\n                            tabindex=\"-1\"\n                            aria-hidden=\"true\"\n                            disabled={!this.canScrollRight}\n                            onClick={this.handleRightScrollClick}\n                        >\n                            <limel-icon name=\"angle_right\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    @Watch('tabs')\n    protected tabsChanged(newTabs: Tab[] = [], oldTabs: Tab[] = []) {\n        const newIds = newTabs.map((tab) => tab.id);\n        const oldIds = oldTabs.map((tab) => tab.id);\n\n        if (isEqual(newIds, oldIds)) {\n            return;\n        }\n\n        this.setupMdc = true;\n        this.tearDown();\n    }\n\n    @Listen('resize', { passive: true, target: 'window' })\n    protected handleWindowResize() {\n        if (!this.scrollArea) {\n            return;\n        }\n\n        this.handleScroll();\n    }\n\n    private setup() {\n        const element = this.host.shadowRoot.querySelector('.mdc-tab-bar');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTabBar = new MDCTabBar(element);\n        this.mdcTabBar.focusOnActivate = true;\n        this.mdcTabBar.useAutomaticActivation = true;\n        this.scrollArea = element.querySelector(\n            '.mdc-tab-scroller__scroll-area'\n        );\n        this.scrollContent = element.querySelector(\n            '.mdc-tab-scroller__scroll-content'\n        );\n\n        this.setupListeners();\n\n        // Use timeout to avoid Stencil warning about re-renders. /Ads\n        setTimeout(this.handleScroll, 0);\n    }\n\n    private tearDown() {\n        if (this.scrollArea) {\n            this.scrollArea.removeEventListener('scroll', this.handleScroll);\n        }\n\n        if (this.mdcTabBar) {\n            this.mdcTabBar.unlisten(\n                TAB_ACTIVATED_EVENT,\n                this.handleTabActivated\n            );\n            this.mdcTabBar.destroy();\n        }\n    }\n\n    private setupListeners() {\n        this.mdcTabBar.listen(TAB_ACTIVATED_EVENT, this.handleTabActivated);\n        this.scrollArea.addEventListener('scroll', this.handleScroll, {\n            passive: true,\n        });\n    }\n\n    private handleTabActivated(event: MDCTabBarActivatedEvent) {\n        const index = event.detail.index;\n        const newTabs = setActiveTab(this.tabs, index);\n\n        difference(newTabs, this.tabs)\n            .sort(this.sortByInactive)\n            // eslint-disable-next-line unicorn/no-array-for-each\n            .forEach((tab: Tab) => {\n                this.changeTab.emit(tab);\n            });\n\n        this.tabs = newTabs;\n    }\n\n    private sortByInactive(a: Tab, b: Tab) {\n        return Number(a.active) - Number(b.active);\n    }\n\n    private handleScroll() {\n        const scrollLeft = this.scrollArea.scrollLeft;\n        const scrollRight = Math.floor(\n            this.scrollContent.getBoundingClientRect().width -\n                this.scrollArea.getBoundingClientRect().width -\n                scrollLeft\n        );\n\n        if (scrollLeft > HIDE_SCROLL_BUTTONS_WHEN_SCROLLED_LESS_THAN_PX) {\n            this.canScrollLeft = true;\n        } else {\n            this.canScrollLeft = false;\n        }\n\n        if (scrollRight > HIDE_SCROLL_BUTTONS_WHEN_SCROLLED_LESS_THAN_PX) {\n            this.canScrollRight = true;\n        } else {\n            this.canScrollRight = false;\n        }\n    }\n\n    private handleLeftScrollClick() {\n        const scrollDistance = this.getScrollDistance();\n        this.scrollArea.scroll({\n            left: this.scrollArea.scrollLeft - scrollDistance,\n            behavior: 'smooth',\n        });\n    }\n\n    private handleRightScrollClick() {\n        const scrollDistance = this.getScrollDistance();\n        this.scrollArea.scroll({\n            left: this.scrollArea.scrollLeft + scrollDistance,\n            behavior: 'smooth',\n        });\n    }\n\n    /**\n     * Calculates how far to scroll when navigation buttons are clicked.\n     * Returns the visible width minus an overlap percentage to maintain context.\n     * Falls back to the constant value if something goes wrong.\n     */\n    private getScrollDistance(): number {\n        if (!this.scrollArea) {\n            return SCROLL_DISTANCE_ON_CLICK_PX;\n        }\n\n        const containerWidth = this.scrollArea.getBoundingClientRect().width;\n        const scrollDistance =\n            containerWidth * (1 - OVERLAP_PERCENTAGE / TOTAL_WIDTH_PERCENTAGE);\n\n        return Math.max(scrollDistance, SCROLL_DISTANCE_ON_CLICK_PX);\n    }\n\n    private renderIcon(tab: Tab) {\n        if (!tab.icon) {\n            return;\n        }\n\n        const name = getIconName(tab.icon);\n\n        const color = getIconColor(tab.icon, tab.iconColor);\n        const style = { color: '' };\n\n        if (color) {\n            style.color = color;\n        }\n\n        return (\n            <limel-icon\n                class=\"mdc-tab__icon\"\n                name={name}\n                style={style}\n                size=\"small\"\n                aria-hidden=\"true\"\n            />\n        );\n    }\n\n    private renderTab(tab: Tab) {\n        return (\n            <button\n                class={{\n                    'mdc-tab': true,\n                    'mdc-tab--active': !!tab.active,\n                }}\n                role=\"tab\"\n                aria-selected={tab.active ? 'true' : 'false'}\n                tabindex={tab.active ? 0 : -1}\n            >\n                <span class=\"mdc-tab__content\">\n                    {this.renderIcon(tab)}\n                    <span class=\"mdc-tab__text-label\">{tab.text}</span>\n                    {tab.badge ? <limel-badge label={tab.badge} /> : ''}\n                </span>\n                <span\n                    class={{\n                        'mdc-tab-indicator': true,\n                        'mdc-tab-indicator--active': !!tab.active,\n                    }}\n                >\n                    <span class=\"mdc-tab-indicator__content mdc-tab-indicator__content--underline\" />\n                </span>\n                <span class=\"mdc-tab__ripple\" />\n            </button>\n        );\n    }\n\n    private triggerIconColorWarning() {\n        if (this.tabs.some((tab) => tab.iconColor)) {\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\"\n            );\n        }\n    }\n}\n"},{"filename":"tab-bar.scss","type":"scss","source":"@use '@material/tab-bar/mdc-tab-bar';\n@use '@material/tab-scroller/mdc-tab-scroller';\n@use '@material/tab-indicator/mdc-tab-indicator';\n@use '@material/tab/mdc-tab';\n\n$tab-background-color: var(--contrast-300);\n$tab-border-radius: 0.625rem;\n$tab-active-outer-edge-curve-size: 0.75rem;\n$tab-separator-width: 0.125rem;\n$tab-separator-background-color: rgb(var(--contrast-600));\n\n@import './partial-styles/tab-bar-scroller.scss';\n\n:host(limel-tab-bar) {\n    --limel-active-tab-background-color: var(\n        --tab-panel-background-color,\n        rgb(var(--contrast-100))\n    );\n    isolation: isolate;\n    display: block;\n    position: relative;\n}\n\n:host(.has-tabs-with-equal-width) {\n    .mdc-tab {\n        flex: 1 0 auto;\n    }\n}\n\n.mdc-tab {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n    font-weight: 400;\n    letter-spacing: normal;\n}\n\n.mdc-tab-indicator {\n    .mdc-tab-indicator__content {\n        border: none;\n    }\n}\n\n.mdc-tab__ripple {\n    box-sizing: border-box;\n    border-radius: $tab-border-radius;\n    border: {\n        style: solid;\n        color: transparent;\n        width: 0.25rem;\n    }\n    opacity: 0.7;\n\n    &:before,\n    &:after {\n        transition: background-color 0.5s ease;\n    }\n}\n\n.mdc-tab {\n    border-radius: 0;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    min-width: 2.5rem;\n    background-color: transparent;\n    flex: 0 0 auto;\n    height: 2.5rem;\n\n    &:not(.mdc-tab--active) {\n        --badge-background-color: rgb(var(--contrast-600));\n\n        &:after {\n            content: '';\n            display: block;\n            background-color: $tab-separator-background-color;\n            width: $tab-separator-width;\n            height: 1rem;\n            margin: auto;\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            border-radius: 1rem;\n            right: -$tab-separator-width;\n        }\n\n        &:last-of-type {\n            &:after {\n                display: none;\n            }\n        }\n    }\n\n    .mdc-tab__icon {\n        margin-left: -0.25rem;\n    }\n\n    limel-badge {\n        margin-right: -0.25rem;\n    }\n}\n\n.mdc-tab--active {\n    border-radius: $tab-border-radius $tab-border-radius 0 0;\n    background-color: var(--limel-active-tab-background-color);\n    z-index: 2;\n\n    &:before,\n    &:after {\n        content: '';\n        display: block;\n        width: $tab-active-outer-edge-curve-size;\n        height: $tab-active-outer-edge-curve-size;\n        position: absolute;\n        bottom: 0;\n        background-color: var(--limel-active-tab-background-color);\n\n        -webkit-mask-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 50 50'><defs/><path d='M0 0c0 27.594 22.406 50 50 50H0V0z'/></svg>\"); //For chrome and Safari the browser prefix is needed. (last checked Apr 2020)\n        mask-image: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 50 50'><defs/><path d='M0 0c0 27.594 22.406 50 50 50H0V0z'/></svg>\");\n    }\n\n    &:before {\n        left: -$tab-active-outer-edge-curve-size;\n        transform: rotateY(180deg);\n    }\n    &:after {\n        right: -$tab-active-outer-edge-curve-size;\n    }\n\n    .mdc-ripple-upgraded--background-focused {\n        &:before {\n            background-color: transparent;\n            transition: background-color 1s ease;\n        }\n    }\n}\n\n.mdc-tab__content {\n    gap: 0.375rem;\n}\n\n.mdc-tab {\n    .mdc-tab__text-label {\n        transition: color 0.2s ease;\n        padding-left: 0 !important;\n        color: var(--mdc-theme-on-surface);\n    }\n    &:hover {\n        .mdc-tab__text-label {\n            color: var(--mdc-theme-text-primary-on-background);\n        }\n    }\n    &.mdc-tab--active {\n        .mdc-tab__text-label {\n            color: var(--mdc-theme-primary);\n        }\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel","filePath":"./src/components/tab-panel/tab-panel.tsx","fileName":"tab-panel.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/usage","tag":"limel-tab-panel","overview":"The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","usage":{},"docs":"The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","docsTags":[{"name":"slot","text":"- Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to."},{"name":"exampleComponent","text":"limel-example-tab-panel"}],"encapsulation":"shadow","dependents":["limel-example-tab-panel"],"dependencies":["limel-tab-bar"],"dependencyGraph":{"limel-tab-panel":["limel-tab-bar"],"limel-tab-bar":["limel-icon","limel-badge"],"limel-example-tab-panel":["limel-tab-panel"]},"props":[{"name":"tabs","type":"Tab[]","mutable":true,"reflectToAttr":false,"docs":"The tabs to display in the panel","docsTags":[],"default":"[]","values":[{"type":"Tab[]"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"changeTab","detail":"Tab","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a tab has been changed","docsTags":[]}],"styles":[{"name":"--tab-panel-background-color","annotation":"prop","docs":"Background color of the contents of the tab and the active tab of the tab bar. Defaults to `--contrast-100`."}],"slots":[{"name":"","docs":"Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to."}],"parts":[],"listeners":[],"sources":[{"filename":"tab-panel.tsx","type":"tsx","source":"import {\n    Component,\n    Element,\n    h,\n    Prop,\n    EventEmitter,\n    Event,\n    Host,\n    Watch,\n} from '@stencil/core';\nimport { Tab } from '../tab-bar/tab.types';\nimport { dispatchResizeEvent } from '../../util/dispatch-resize-event';\n\n/**\n * The `limel-tab-panel` component uses the `limel-tab-bar` component together\n * with custom slotted components and will display the content for the currently\n * active tab. Each slotted component must have an id equal to the id of the\n * corresponding tab it belongs to. These components should implement the\n * [TabPanelComponent](#/type/TabPanelComponent/) interface.\n *\n * The `limel-tab-panel` component will automatically set each tab configuration\n * on the corresponding slotted component as a property named `tab` so that the\n * component can take action upon that. Sometimes it might be desirable to not\n * load data or render anything until the tab is active.\n *\n * The slotted components can also emit the `changeTab` event to update anything\n * inside the actual tab, e.g. to change the icon, color or badge.\n *\n * @slot - Content to put inside the `limel-tab-panel`. Each slotted element\n * must have the `id` attribute equal to the id of the tab it belongs to.\n * @exampleComponent limel-example-tab-panel\n */\n@Component({\n    tag: 'limel-tab-panel',\n    styleUrl: 'tab-panel.scss',\n    shadow: true,\n})\nexport class TabPanel {\n    /**\n     * The tabs to display in the panel\n     */\n    @Prop({ mutable: true })\n    public tabs: Tab[] = [];\n\n    /**\n     * Emitted when a tab has been changed\n     */\n    @Event()\n    protected changeTab: EventEmitter<Tab>;\n\n    @Element()\n    private host: HTMLLimelTabPanelElement;\n\n    private slotElements: HTMLElement[] = [];\n\n    constructor() {\n        this.handleChangeTabs = this.handleChangeTabs.bind(this);\n        this.setSlotElements = this.setSlotElements.bind(this);\n        this.setTabStatus = this.setTabStatus.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    private initialize() {\n        const slot = this.getSlot();\n        if (!slot) {\n            return;\n        }\n\n        slot.addEventListener('slotchange', this.setSlotElements);\n        this.setSlotElements();\n        // eslint-disable-next-line unicorn/no-array-for-each\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    public disconnectedCallback() {\n        const slot = this.getSlot();\n        slot.removeEventListener('slotchange', this.setSlotElements);\n    }\n\n    @Watch('tabs')\n    public tabsChanged() {\n        this.hidePanels();\n        // eslint-disable-next-line unicorn/no-array-for-each\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    public render() {\n        return (\n            <Host onChangeTab={this.handleChangeTabs}>\n                <div class=\"tab-panel\">\n                    <limel-tab-bar tabs={this.tabs} />\n                    <div class=\"tab-content\">\n                        <slot />\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n\n    private setSlotElements() {\n        const slot = this.getSlot();\n        this.hidePanels();\n        this.slotElements = Array.prototype.slice.call(slot.assignedElements());\n        // eslint-disable-next-line unicorn/no-array-for-each\n        this.tabs.forEach(this.setTabStatus);\n    }\n\n    private setTabStatus(tab: Tab) {\n        const element = this.slotElements.find((e) => e.id === tab.id);\n        if (!element) {\n            return;\n        }\n\n        if (tab.active) {\n            element.style.display = '';\n        } else {\n            element.style.display = 'none';\n        }\n\n        element['tab'] = tab;\n    }\n\n    private handleChangeTabs(event: CustomEvent<Tab>) {\n        this.tabs = this.tabs.map((tab) => {\n            if (tab.id === event.detail.id) {\n                return event.detail;\n            }\n\n            return tab;\n        });\n\n        this.setTabStatus(event.detail);\n\n        // Content inside the newly activated tab may need to redraw once\n        // visible, so we use the resize event trick. /Ads\n        setTimeout(dispatchResizeEvent);\n    }\n\n    private getSlot(): HTMLSlotElement {\n        return this.host.shadowRoot.querySelector('slot');\n    }\n\n    private hidePanels() {\n        for (const element of this.slotElements) {\n            element.style.display = 'none';\n        }\n    }\n}\n"},{"filename":"tab-panel.scss","type":"scss","source":"/**\n* @prop --tab-panel-background-color: Background color of the contents of the tab and the active tab of the tab bar. Defaults to `--contrast-100`.\n*/\n\n:host(limel-tab-panel) {\n    --tab-panel-background-color: rgb(var(--contrast-100));\n    display: block;\n    height: 100%;\n}\n\n.tab-panel {\n    // contains both limel-tab-bar and tab-content\n    height: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n.tab-content {\n    height: 100%;\n    flex: 1;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    box-sizing: border-box;\n    background-color: var(--tab-panel-background-color);\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/table","filePath":"./src/components/table/table.tsx","fileName":"table.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/table/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/table/usage","tag":"limel-table","overview":"","usage":{},"docs":"","docsTags":[{"name":"exampleComponent","text":"limel-example-table"},{"name":"exampleComponent","text":"limel-example-table-custom-components"},{"name":"exampleComponent","text":"limel-example-table-header-menu"},{"name":"exampleComponent","text":"limel-example-table-movable-columns"},{"name":"exampleComponent","text":"limel-example-table-sorting-disabled"},{"name":"exampleComponent","text":"limel-example-table-local"},{"name":"exampleComponent","text":"limel-example-table-remote"},{"name":"exampleComponent","text":"limel-example-table-activate-row"},{"name":"exampleComponent","text":"limel-example-table-selectable-rows"},{"name":"exampleComponent","text":"limel-example-table-default-sorted"},{"name":"exampleComponent","text":"limel-example-table-layout-default"},{"name":"exampleComponent","text":"limel-example-table-layout-stretch-last-column"},{"name":"exampleComponent","text":"limel-example-table-layout-stretch-columns"},{"name":"exampleComponent","text":"limel-example-table-layout-low-density"},{"name":"exampleComponent","text":"limel-example-table-interactive-rows"}],"encapsulation":"shadow","dependents":["limel-example-table","limel-example-table-activate-row","limel-example-table-custom-components","limel-example-table-default-sorted","limel-example-table-header-menu","limel-example-table-interactive-rows","limel-example-table-layout-default","limel-example-table-layout-low-density","limel-example-table-layout-stretch-columns","limel-example-table-layout-stretch-last-column","limel-example-table-local","limel-example-table-movable-columns","limel-example-table-remote","limel-example-table-selectable-rows","limel-example-table-sorting-disabled"],"dependencies":["limel-spinner","limel-checkbox"],"dependencyGraph":{"limel-table":["limel-spinner","limel-checkbox"],"limel-checkbox":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-example-table":["limel-table"],"limel-example-table-activate-row":["limel-table"],"limel-example-table-custom-components":["limel-table"],"limel-example-table-default-sorted":["limel-table"],"limel-example-table-header-menu":["limel-table"],"limel-example-table-interactive-rows":["limel-table"],"limel-example-table-layout-default":["limel-table"],"limel-example-table-layout-low-density":["limel-table"],"limel-example-table-layout-stretch-columns":["limel-table"],"limel-example-table-layout-stretch-last-column":["limel-table"],"limel-example-table-local":["limel-table"],"limel-example-table-movable-columns":["limel-table"],"limel-example-table-remote":["limel-table"],"limel-example-table-selectable-rows":["limel-table"],"limel-example-table-sorting-disabled":["limel-table"]},"props":[{"name":"activeRow","type":"{ id?: string | number; }","mutable":true,"reflectToAttr":false,"docs":"Active row in the table","docsTags":[],"values":[{"type":"{ id?: string"},{"type":"number; }"}],"optional":false,"required":false},{"name":"aggregates","type":"ColumnAggregate[]","mutable":false,"reflectToAttr":false,"docs":"Column aggregates to be displayed in the table","docsTags":[],"values":[{"type":"ColumnAggregate[]"}],"optional":false,"required":false},{"name":"columns","type":"Column<any>[]","mutable":false,"reflectToAttr":false,"docs":"Columns used to display the data","docsTags":[],"default":"[]","values":[{"type":"Column<any>[]"}],"optional":false,"required":false},{"name":"data","type":"object[]","mutable":false,"reflectToAttr":false,"docs":"Data to be displayed in the table","docsTags":[],"default":"[]","values":[{"type":"object[]"}],"optional":false,"required":false},{"name":"emptyMessage","type":"string","mutable":false,"attr":"empty-message","reflectToAttr":false,"docs":"A message to display when the table has no data","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false},{"name":"layout","type":"\"default\" | \"lowDensity\" | \"stretchColumns\" | \"stretchLastColumn\"","mutable":false,"attr":"layout","reflectToAttr":false,"docs":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","docsTags":[],"values":[{"value":"default","type":"string"},{"value":"lowDensity","type":"string"},{"value":"stretchColumns","type":"string"},{"value":"stretchLastColumn","type":"string"}],"optional":false,"required":false},{"name":"loading","type":"boolean","mutable":false,"attr":"loading","reflectToAttr":false,"docs":"Set to `true` to trigger loading animation","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"mode","type":"\"local\" | \"remote\"","mutable":false,"attr":"mode","reflectToAttr":false,"docs":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","docsTags":[],"default":"'local'","values":[{"value":"local","type":"string"},{"value":"remote","type":"string"}],"optional":false,"required":false},{"name":"movableColumns","type":"boolean","mutable":false,"attr":"movable-columns","reflectToAttr":false,"docs":"Set to `true` to enable reordering of the columns by dragging them","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"page","type":"number","mutable":false,"attr":"page","reflectToAttr":false,"docs":"The page to show","docsTags":[],"default":"FIRST_PAGE","values":[{"type":"number"}],"optional":false,"required":false},{"name":"pageSize","type":"number","mutable":false,"attr":"page-size","reflectToAttr":false,"docs":"Number of rows per page","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false},{"name":"selectable","type":"boolean","mutable":false,"attr":"selectable","reflectToAttr":false,"docs":"Enables row selection","docsTags":[],"values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"selection","type":"object[]","mutable":false,"reflectToAttr":false,"docs":"Selected data. Requires `selectable` to be true.","docsTags":[],"values":[{"type":"object[]"}],"optional":false,"required":false},{"name":"sorting","type":"ColumnSorter[]","mutable":false,"reflectToAttr":false,"docs":"The initial sorted columns","docsTags":[],"default":"[]","values":[{"type":"ColumnSorter[]"}],"optional":false,"required":false},{"name":"totalRows","type":"number","mutable":false,"attr":"total-rows","reflectToAttr":false,"docs":"The number of total rows available for the data","docsTags":[],"values":[{"type":"number"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"activate","detail":"object","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a row is activated","docsTags":[]},{"event":"changeColumns","detail":"Column<any>[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the columns have been changed","docsTags":[]},{"event":"changePage","detail":"number","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when a new page has been set","docsTags":[]},{"event":"load","detail":"TableParams","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when `mode` is `remote` and the table is loading new data. The\nconsumer is responsible for giving the table new data","docsTags":[]},{"event":"select","detail":"object[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the row selection has been changed","docsTags":[]},{"event":"selectAll","detail":"boolean","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the select all rows state is toggled","docsTags":[]},{"event":"sort","detail":"ColumnSorter[]","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when `mode` is `local` the data is sorted","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"table.tsx","type":"tsx","source":"import {\n    Component,\n    h,\n    Prop,\n    Element,\n    Watch,\n    EventEmitter,\n    Event,\n    Host,\n} from '@stencil/core';\nimport TabulatorTable from 'tabulator-tables';\nimport {\n    Column,\n    TableParams,\n    ColumnSorter,\n    ColumnAggregate,\n    RowData,\n} from './table.types';\nimport { ColumnDefinitionFactory, createColumnSorter } from './columns';\nimport { isEqual, has } from 'lodash-es';\nimport { ElementPool } from './element-pool';\nimport { TableSelection } from './table-selection';\nimport { mapLayout, Layout } from './layout';\n\nconst FIRST_PAGE = 1;\n\n/**\n * @exampleComponent limel-example-table\n * @exampleComponent limel-example-table-custom-components\n * @exampleComponent limel-example-table-header-menu\n * @exampleComponent limel-example-table-movable-columns\n * @exampleComponent limel-example-table-sorting-disabled\n * @exampleComponent limel-example-table-local\n * @exampleComponent limel-example-table-remote\n * @exampleComponent limel-example-table-activate-row\n * @exampleComponent limel-example-table-selectable-rows\n * @exampleComponent limel-example-table-default-sorted\n * @exampleComponent limel-example-table-layout-default\n * @exampleComponent limel-example-table-layout-stretch-last-column\n * @exampleComponent limel-example-table-layout-stretch-columns\n * @exampleComponent limel-example-table-layout-low-density\n * @exampleComponent limel-example-table-interactive-rows\n */\n@Component({\n    tag: 'limel-table',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class Table {\n    /**\n     * Data to be displayed in the table\n     */\n    @Prop()\n    public data: object[] = [];\n\n    /**\n     * Columns used to display the data\n     */\n    @Prop()\n    public columns: Column[] = [];\n\n    /**\n     * Set to either `local` or `remote` to change how the table handles the\n     * loaded data. When in `local` mode, all sorting and pagination will be\n     * done locally with the data given. When in `remote` mode, the consumer\n     * is responsible to give the table new data when a `load` event occurs\n     */\n    @Prop()\n    public mode: 'local' | 'remote' = 'local';\n\n    /**\n     * Defines the layout of the table, based on how width of the columns are calculated.\n     *\n     * - `default`: makes columns as wide as their contents.\n     * - `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n     * - `stretchColumns`: stretches all columns to fill the available width when possible.\n     * - `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.\n     */\n    @Prop()\n    public layout: Layout;\n\n    /**\n     * Number of rows per page\n     */\n    @Prop()\n    public pageSize: number;\n\n    /**\n     * The number of total rows available for the data\n     */\n    @Prop()\n    public totalRows: number;\n\n    /**\n     * The initial sorted columns\n     */\n    @Prop()\n    public sorting: ColumnSorter[] = [];\n\n    /**\n     * Active row in the table\n     */\n    @Prop({ mutable: true })\n    public activeRow: RowData;\n\n    /**\n     * Set to `true` to enable reordering of the columns by dragging them\n     */\n    @Prop()\n    public movableColumns: boolean;\n\n    /**\n     * Set to `true` to trigger loading animation\n     */\n    @Prop()\n    public loading: boolean = false;\n\n    /**\n     * The page to show\n     */\n    @Prop()\n    public page: number = FIRST_PAGE;\n\n    /**\n     * Emitted when `mode` is `local` the data is sorted\n     */\n    @Event()\n    public sort: EventEmitter<ColumnSorter[]>;\n\n    /**\n     * Emitted when a new page has been set\n     */\n    @Event()\n    public changePage: EventEmitter<number>;\n\n    /**\n     * A message to display when the table has no data\n     */\n    @Prop()\n    public emptyMessage: string;\n\n    /**\n     * Column aggregates to be displayed in the table\n     */\n    @Prop()\n    public aggregates: ColumnAggregate[];\n\n    /**\n     * Enables row selection\n     */\n    @Prop()\n    public selectable: boolean;\n\n    /**\n     * Selected data. Requires `selectable` to be true.\n     */\n    @Prop()\n    public selection: object[];\n\n    /**\n     * Emitted when `mode` is `remote` and the table is loading new data. The\n     * consumer is responsible for giving the table new data\n     */\n    @Event()\n    public load: EventEmitter<TableParams>;\n\n    /**\n     * Emitted when a row is activated\n     */\n    @Event()\n    public activate: EventEmitter<object>;\n\n    /**\n     * Emitted when the columns have been changed\n     */\n    @Event()\n    public changeColumns: EventEmitter<Column[]>;\n\n    /**\n     * Emitted when the row selection has been changed\n     */\n    @Event()\n    public select: EventEmitter<object[]>;\n\n    /**\n     * Emitted when the select all rows state is toggled\n     */\n    @Event()\n    public selectAll: EventEmitter<boolean>;\n\n    @Element()\n    private host: HTMLLimelTableElement;\n\n    private currentLoad: { page: number; sorters: ColumnSorter[] };\n\n    private tabulator: Tabulator;\n\n    private pool: ElementPool;\n    private columnFactory: ColumnDefinitionFactory;\n    private firstRequest: boolean;\n    private currentSorting: ColumnSorter[];\n    private tableSelection: TableSelection;\n    private shouldSort = false;\n\n    constructor() {\n        this.handleDataSorting = this.handleDataSorting.bind(this);\n        this.handlePageLoaded = this.handlePageLoaded.bind(this);\n        this.handleRenderComplete = this.handleRenderComplete.bind(this);\n        this.handleAjaxRequesting = this.handleAjaxRequesting.bind(this);\n        this.requestData = this.requestData.bind(this);\n        this.onClickRow = this.onClickRow.bind(this);\n        this.formatRow = this.formatRow.bind(this);\n        this.formatRows = this.formatRows.bind(this);\n        this.updateMaxPage = this.updateMaxPage.bind(this);\n        this.initTabulatorComponent = this.initTabulatorComponent.bind(this);\n        this.setSelection = this.setSelection.bind(this);\n        this.addColumnAggregator = this.addColumnAggregator.bind(this);\n        this.pool = new ElementPool(document);\n        this.columnFactory = new ColumnDefinitionFactory(this.pool);\n    }\n\n    public componentWillLoad() {\n        this.firstRequest = this.mode === 'remote';\n        this.initTableSelection();\n    }\n\n    public componentDidLoad() {\n        this.init();\n    }\n\n    public disconnectedCallback() {\n        this.pool.clear();\n    }\n\n    @Watch('totalRows')\n    protected totalRowsChanged() {\n        this.updateMaxPage();\n    }\n\n    @Watch('pageSize')\n    protected pageSizeChanged() {\n        this.updateMaxPage();\n    }\n\n    @Watch('page')\n    protected pageChanged() {\n        if (!this.tabulator) {\n            return;\n        }\n\n        if (this.tabulator.getPage() === this.page) {\n            return;\n        }\n\n        this.tabulator.setPage(this.page);\n    }\n\n    @Watch('activeRow')\n    protected activeRowChanged() {\n        if (!this.tabulator) {\n            return;\n        }\n\n        this.formatRows();\n    }\n\n    @Watch('data')\n    protected updateData(newData: RowData[] = [], oldData: RowData[] = []) {\n        const shouldReplace = this.shouldReplaceData(newData, oldData);\n\n        setTimeout(() => {\n            if (!this.tabulator) {\n                return;\n            }\n\n            if (shouldReplace) {\n                this.pool.releaseAll();\n                this.tabulator.replaceData(newData);\n                this.setSelection();\n\n                return;\n            }\n\n            this.tabulator.updateOrAddData(newData);\n        });\n    }\n\n    @Watch('columns')\n    protected updateColumns(newColumns: Column[], oldColumns: Column[]) {\n        if (!this.tabulator) {\n            return;\n        }\n\n        if (this.areSameColumns(newColumns, oldColumns)) {\n            return;\n        }\n\n        const columnsInTable = this.tabulator\n            .getColumns()\n            .filter((c) => c.getField());\n\n        const oldColumnsInTable = columnsInTable.map((c) =>\n            oldColumns.find((old) => old.field === c.getField())\n        );\n\n        if (this.areSameColumns(newColumns, oldColumnsInTable)) {\n            return;\n        }\n\n        this.tabulator.setColumns(this.getColumnDefinitions());\n        this.shouldSort = true;\n    }\n\n    @Watch('aggregates')\n    protected updateAggregates(\n        newAggregates: ColumnAggregate[],\n        oldAggregates: ColumnAggregate[]\n    ) {\n        if (!this.tabulator) {\n            return;\n        }\n\n        if (isEqual(newAggregates, oldAggregates)) {\n            return;\n        }\n\n        if (!this.haveSameAggregateFields(newAggregates, oldAggregates)) {\n            this.init();\n\n            return;\n        }\n\n        this.tabulator.recalc();\n        this.tabulator.rowManager.redraw();\n    }\n\n    @Watch('selection')\n    protected updateSelection(newSelection: any[]) {\n        if (!this.tableSelection) {\n            return;\n        }\n\n        this.tableSelection.setSelection(newSelection);\n    }\n\n    @Watch('selectable')\n    protected updateSelectable() {\n        if (this.tableSelection && !this.selectable) {\n            this.tableSelection = null;\n        }\n\n        this.initTableSelection();\n        this.init();\n    }\n\n    @Watch('sorting')\n    protected updateSorting(\n        newValue: ColumnSorter[],\n        oldValue: ColumnSorter[]\n    ) {\n        const newSorting = this.getColumnSorter(newValue);\n        const oldSorting = this.getColumnSorter(oldValue);\n        if (isEqual(newSorting, oldSorting)) {\n            return;\n        }\n\n        this.tabulator.setSort(newSorting);\n    }\n\n    private shouldReplaceData(newData: RowData[], oldData: RowData[]) {\n        const newIds = newData.map((item) => item.id ?? item) as Array<\n            string | number\n        >;\n        const oldIds = oldData.map((item) => item.id ?? item) as Array<\n            string | number\n        >;\n\n        return (\n            !this.areEqualIds(newIds, oldIds) ||\n            !this.isSameOrder(newIds, oldIds)\n        );\n    }\n\n    private areEqualIds(\n        newIds: Array<string | number>,\n        oldIds: Array<string | number>\n    ): boolean {\n        const newIdSet = new Set(newIds);\n        const oldIdSet = new Set(oldIds);\n\n        return (\n            newIdSet.size === oldIdSet.size &&\n            newIds.every((id) => oldIdSet.has(id))\n        );\n    }\n\n    private isSameOrder(\n        newIds: Array<string | number>,\n        oldIds: Array<string | number>\n    ): boolean {\n        return newIds.every((id, index) => id === oldIds[index]);\n    }\n\n    private areSameColumns(newColumns: Column[], oldColumns: Column[]) {\n        return (\n            newColumns.length === oldColumns.length &&\n            newColumns.every((column) => oldColumns.includes(column))\n        );\n    }\n\n    private haveSameAggregateFields(\n        newAggregates: ColumnAggregate[],\n        oldAggregates: ColumnAggregate[]\n    ) {\n        const oldAggregateFields = oldAggregates?.map((a) => a.field) || [];\n\n        return (\n            newAggregates?.length === oldAggregates?.length &&\n            !!newAggregates?.every((a) => oldAggregateFields.includes(a.field))\n        );\n    }\n\n    private init() {\n        if (this.tabulator) {\n            this.pool.releaseAll();\n            this.tabulator.destroy();\n        }\n\n        const table: HTMLElement =\n            this.host.shadowRoot.querySelector('#tabulator-table');\n        this.initTabulatorComponent(table);\n    }\n\n    /*\n     * Tabulator requires that the html element it's rendered inside\n     * has a size before it's created, otherwise it doesn't consider\n     * it self renderedy completely. (the callback \"renderComplete\"\n     * is never run).\n     *\n     * @param table {HTMLElement}\n     *\n     */\n    private initTabulatorComponent(table: HTMLElement) {\n        // Some browsers do not implement the ResizeObserver API...\n        // If that's the case lets just create the table no\n        // matter if its rendered or not.\n        if (!('ResizeObserver' in window)) {\n            this.tabulator = new TabulatorTable(table, this.getOptions());\n            this.setSelection();\n\n            return;\n        }\n\n        const observer = new ResizeObserver(() => {\n            requestAnimationFrame(() => {\n                this.tabulator = new TabulatorTable(table, this.getOptions());\n                this.setSelection();\n                observer.unobserve(table);\n                observer.disconnect();\n            });\n        });\n        observer.observe(table);\n    }\n\n    private initTableSelection() {\n        if (this.selectable) {\n            this.tableSelection = new TableSelection(\n                () => this.tabulator,\n                this.pool,\n                this.select\n            );\n            this.tableSelection.setSelection(this.selection);\n        }\n    }\n\n    private setSelection() {\n        if (!(this.tabulator && this.tableSelection)) {\n            return;\n        }\n\n        this.tableSelection.setSelection(this.selection);\n    }\n\n    private updateMaxPage() {\n        this.tabulator?.setMaxPage(this.calculatePageCount());\n    }\n\n    private getOptions(): Tabulator.Options {\n        const ajaxOptions = this.getAjaxOptions();\n        const paginationOptions = this.getPaginationOptions();\n        const columnOptions = this.getColumnOptions();\n\n        return {\n            data: this.data,\n            layout: mapLayout(this.layout),\n            columns: this.getColumnDefinitions(),\n            dataSorting: this.handleDataSorting,\n            pageLoaded: this.handlePageLoaded,\n            renderComplete: this.handleRenderComplete,\n            ...ajaxOptions,\n            ...paginationOptions,\n            rowClick: this.onClickRow,\n            rowFormatter: this.formatRow,\n            initialSort: this.getInitialSorting(),\n            nestedFieldSeparator: false,\n            ...columnOptions,\n        };\n    }\n\n    private getInitialSorting(): Tabulator.Sorter[] {\n        if (this.currentSorting && this.currentSorting.length > 0) {\n            return this.getColumnSorter(this.currentSorting);\n        }\n\n        return this.getColumnSorter(this.sorting);\n    }\n\n    private getColumnSorter(sorting: ColumnSorter[]): Tabulator.Sorter[] {\n        return sorting.map((sorter: ColumnSorter) => {\n            return {\n                column: String(sorter.column.field),\n                dir: sorter.direction.toLocaleLowerCase() as Tabulator.SortDirection,\n            };\n        });\n    }\n\n    private getColumnDefinitions(): Tabulator.ColumnDefinition[] {\n        const columnDefinitions = this.columns\n            .map(this.addColumnAggregator)\n            .map(this.columnFactory.create);\n\n        if (this.tableSelection) {\n            return this.tableSelection.getColumnDefinitions(columnDefinitions);\n        }\n\n        return columnDefinitions;\n    }\n\n    private addColumnAggregator(column: Column<any>): Column<any> {\n        if (!this.aggregates?.length || column.aggregator) {\n            return column;\n        }\n\n        const aggregate = this.aggregates.find((a) => a.field === column.field);\n        if (aggregate) {\n            column.aggregator = (col?: Column) => {\n                if (!col) {\n                    return;\n                }\n\n                const value = this.aggregates.find(\n                    (a) => a.field === col.field\n                )?.value;\n\n                if (col.formatter) {\n                    return col.formatter(value);\n                }\n\n                return value;\n            };\n        }\n\n        return column;\n    }\n\n    private getAjaxOptions(): Tabulator.OptionsData {\n        if (!this.isRemoteMode()) {\n            return {};\n        }\n\n        // Tabulator needs a URL to be set, even though this one will never be\n        // used since we have our own custom `ajaxRequestFunc`\n        const remoteUrl = 'https://localhost';\n\n        return {\n            ajaxSorting: true,\n            ajaxURL: remoteUrl,\n            ajaxRequestFunc: this.requestData,\n            ajaxRequesting: this.handleAjaxRequesting,\n        };\n    }\n\n    /*\n     * The ajaxRequesting callback is triggered when ever an ajax request is made.\n     *\n     * Tabulator is requesting data with an AJAX request even though it has been\n     * given data when it was created.\n     *\n     * It seems unnecessary for us to emit the `load` event as well when this\n     * happens, since we can just initialize the table with the data that has been\n     * given to us. Therefore, we abort the request if:\n     *\n     *  * its the first time this method is called and,\n     *  * data has been sent in to the component as a prop\n     *\n     */\n    private handleAjaxRequesting() {\n        const abortRequest = this.firstRequest && !!this.data?.length;\n        this.firstRequest = false;\n\n        if (abortRequest) {\n            setTimeout(() => {\n                this.updateMaxPage();\n                this.tabulator.replaceData(this.data);\n            });\n\n            return false;\n        }\n\n        return true;\n    }\n\n    private getPaginationOptions(): Tabulator.OptionsPagination {\n        if (!this.pageSize) {\n            return {};\n        }\n\n        return {\n            pagination: this.isRemoteMode() ? 'remote' : 'local',\n            paginationSize: this.pageSize,\n            paginationInitialPage: this.page,\n        };\n    }\n\n    private requestData(_, __, params: any): Promise<object> {\n        const sorters = params.sorters;\n        const currentPage = params.page;\n\n        if (this.page !== currentPage) {\n            this.changePage.emit(currentPage);\n        }\n\n        const columnSorters = sorters.map(createColumnSorter(this.columns));\n\n        const load = {\n            page: currentPage,\n            sorters: columnSorters,\n        };\n\n        // In order to make limel-table behave more like a controlled component,\n        // we always return the existing data from this function, therefore\n        // relying on the consumer component to handle the loading\n        // state via the loading prop, if it actually decides to load new data.\n        const resolveExistingData = Promise.resolve({\n            last_page: this.calculatePageCount(),\n            data: this.data,\n        });\n\n        if (!isEqual(this.currentLoad, load)) {\n            this.currentSorting = columnSorters;\n            this.currentLoad = load;\n            this.load.emit(load);\n        }\n\n        return resolveExistingData;\n    }\n\n    private isRemoteMode(): boolean {\n        return this.mode === 'remote';\n    }\n\n    private handleDataSorting(sorters: Tabulator.Sorter[]): void {\n        if (this.isRemoteMode()) {\n            return;\n        }\n\n        const columnSorters = sorters.map(createColumnSorter(this.columns));\n        if (columnSorters.length === 0) {\n            return;\n        }\n\n        this.sort.emit(columnSorters);\n    }\n\n    private handlePageLoaded(page: number): void {\n        if (this.isRemoteMode()) {\n            return;\n        }\n\n        this.changePage.emit(page);\n    }\n\n    private handleRenderComplete(): void {\n        if (this.tabulator && this.shouldSort) {\n            this.shouldSort = false;\n            this.tabulator.setSort(this.getColumnSorter(this.sorting));\n        }\n    }\n\n    private onClickRow(_ev, row: Tabulator.RowComponent): void {\n        if (row.getPosition === undefined) {\n            // Not a data row, probably a CalcComponent\n            return;\n        }\n\n        if (this.isActiveRow(row)) {\n            this.activeRow = null;\n        } else {\n            this.activeRow = row.getData();\n        }\n\n        this.activate.emit(this.activeRow);\n    }\n\n    private getActiveRows: () => Tabulator.RowComponent[] = () => {\n        if (!this.tabulator) {\n            return [];\n        }\n\n        return this.tabulator.getRows('active');\n    };\n\n    private getActiveRowsData: () => object[] = () => {\n        // Note: Tabulator.getData() creates copies of each data object\n        // and will break this.selection.has checks, hence why this function\n        // intentionally retrieves the data using the row components\n        return this.getActiveRows().map((row) => row.getData());\n    };\n\n    private selectAllOnChange = (ev: CustomEvent<boolean>) => {\n        const selectAll = ev.detail;\n\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const newSelection = selectAll ? this.getActiveRowsData() : [];\n        this.select.emit(newSelection);\n        this.tableSelection.setSelection(newSelection);\n        this.selectAll.emit(selectAll);\n    };\n\n    private formatRows() {\n        // eslint-disable-next-line unicorn/no-array-for-each\n        this.tabulator.getRows().forEach(this.formatRow);\n    }\n\n    private formatRow(row: Tabulator.RowComponent) {\n        if (this.isActiveRow(row)) {\n            row.getElement().classList.add('active');\n        } else {\n            row.getElement().classList.remove('active');\n        }\n\n        const interactiveFeedbackElement = row\n            .getElement()\n            .querySelectorAll('.interactive-feedback');\n        if (interactiveFeedbackElement.length === 0) {\n            const element = row.getElement().ownerDocument.createElement('div');\n            element.classList.add('interactive-feedback');\n            row.getElement().prepend(element);\n        }\n    }\n\n    private isActiveRow(row: Tabulator.RowComponent) {\n        if (!this.activeRow) {\n            return false;\n        }\n\n        const activeRowId = this.activeRow.id ?? null;\n\n        if (activeRowId !== null) {\n            return activeRowId === row.getData().id;\n        }\n\n        return this.activeRow === row.getData();\n    }\n\n    private calculatePageCount(): number {\n        let total = this.totalRows;\n        if (!total) {\n            total = this.data.length;\n        }\n\n        return Math.ceil(total / this.pageSize);\n    }\n\n    private hasAggregation(columns: Column[]): boolean {\n        return columns.some((column) => has(column, 'aggregator'));\n    }\n\n    private getColumnOptions = (): Tabulator.OptionsColumns => {\n        if (!this.movableColumns) {\n            return {};\n        }\n\n        return {\n            movableColumns: true,\n            columnMoved: this.handleMoveColumn,\n        };\n    };\n\n    private handleMoveColumn = (_, components: Tabulator.ColumnComponent[]) => {\n        const columns = components.map(this.findColumn).filter(Boolean);\n        this.changeColumns.emit(columns);\n    };\n\n    private findColumn = (component: Tabulator.ColumnComponent): Column => {\n        return this.columns.find((column) => {\n            return (\n                column.field === component.getField() &&\n                column.title === component.getDefinition().title\n            );\n        });\n    };\n\n    render() {\n        return (\n            <Host\n                class={{\n                    'has-low-density': this.layout === 'lowDensity',\n                }}\n            >\n                <div\n                    id=\"tabulator-container\"\n                    class={{\n                        'has-pagination': this.totalRows > this.pageSize,\n                        'has-aggregation': this.hasAggregation(this.columns),\n                        'has-movable-columns': this.movableColumns,\n                        'has-rowselector': this.selectable,\n                        'has-selection': this.tableSelection?.hasSelection,\n                    }}\n                >\n                    {/* Toggle style instead of removing the loader\n                    because removing the element will cause a rerender, breaking the\n                    tabulator table */}\n                    <div\n                        id=\"tabulator-loader\"\n                        style={{ display: this.loading ? 'flex' : 'none' }}\n                    >\n                        <limel-spinner size=\"large\" />\n                    </div>\n                    {this.renderEmptyMessage()}\n                    {this.renderSelectAll()}\n                    <div id=\"tabulator-table\" />\n                </div>\n            </Host>\n        );\n    }\n\n    private renderSelectAll() {\n        if (!this.selectable) {\n            return;\n        }\n\n        const showSelectAll = !this.loading && this.tableSelection;\n\n        return (\n            <div\n                class=\"select-all\"\n                style={{ display: showSelectAll ? 'inline-block' : 'none' }}\n            >\n                <limel-checkbox\n                    onChange={this.selectAllOnChange}\n                    disabled={this.data.length === 0}\n                    checked={this.tableSelection?.hasSelection}\n                    indeterminate={\n                        this.tableSelection?.hasSelection &&\n                        this.selection?.length < this.data.length\n                    }\n                />\n            </div>\n        );\n    }\n\n    private renderEmptyMessage() {\n        const showEmptyMessage =\n            !this.loading && this.data.length === 0 && this.emptyMessage;\n\n        return (\n            <div\n                id=\"tabulator-empty-text\"\n                style={{ display: showEmptyMessage ? 'flex' : 'none' }}\n            >\n                <span>{this.emptyMessage}</span>\n            </div>\n        );\n    }\n}\n"},{"filename":"table.scss","type":"scss","source":"@use '../../style/mixins';\n@use '../../style/functions';\n@import '../../../node_modules/tabulator-tables/src/scss/tabulator.scss';\n\n/*\n* @prop --table-max-column-width: defines a maximum width for columns using standard size units, to prevent the table from growing too wide. Set to `auto` if you do not need this limitation. Defaults to `40rem`.\n*/\n\n$width-of-sorter-arrow: 0.5rem;\n$cell-padding: 0.5rem;\n$table--has-interactive-rows--selectable-row--hover: 2;\n$table--limel-table--row-selector: 1;\n$height-of-aggregations-row: 1.5rem;\n\n:host(limel-table) {\n    isolation: isolate;\n    display: block;\n    --table-header-background-color: var(--contrast-500);\n    --table-header-background-color--hover: var(--contrast-400);\n    --table-header-background-color-when-being-dragged: var(--contrast-100);\n\n    --table-row-background-color--odd: var(--contrast-200);\n    --table-row-background-color--even: var(--contrast-100);\n    --table-row-background-color--hover: var(\n        --lime-elevated-surface-background-color\n    );\n    --table-row-background-color--active: var(--contrast-300);\n\n    --table-arrow-color: var(--contrast-800);\n    --table-arrow-color--active: var(--mdc-theme-primary);\n\n    --table-text-color: var(--mdc-theme-text-primary-on-background);\n    --limel-chip-size: 1.25rem;\n}\n\n@import './partial-styles/_table-main-layout';\n\n#tabulator-container {\n    position: relative;\n}\n\n#tabulator-container,\n#tabulator-table {\n    background-color: transparent;\n    border: none;\n}\n\n.tabulator {\n    .tabulator-header {\n        color: var(--table-text-color);\n    }\n    .tabulator-tableHolder {\n        .tabulator-table {\n            color: var(--table-text-color);\n            background-color: transparent;\n        }\n    }\n\n    .tabulator-header {\n        border-bottom: 0;\n        background-color: rgb(var(--table-header-background-color));\n\n        .tabulator-headers {\n            width: fit-content;\n        }\n\n        .tabulator-col {\n            transition: background-color 0.2s ease;\n            background-color: rgb(var(--table-header-background-color));\n            border-right-color: rgb(var(--contrast-200));\n\n            &.tabulator-sortable {\n                &:hover {\n                    background-color: rgb(\n                        var(--table-header-background-color--hover)\n                    );\n                }\n            }\n\n            .tabulator-col-content {\n                padding-right: $width-of-sorter-arrow;\n            }\n        }\n\n        .tabulator-col-title-holder {\n            display: flex;\n            gap: 0.25rem;\n        }\n\n        .tabulator-col-sorter {\n            order: 1;\n        }\n        .tabulator-col-title {\n            order: 2;\n            font-weight: 500;\n            padding-right: 0 !important;\n            line-height: functions.pxToRem(20);\n        }\n    }\n}\n\n.tabulator-row {\n    transition: background-color 0.2s ease;\n    height: 2.25rem;\n\n    &:hover {\n        transition: background-color 0.1s ease;\n    }\n\n    &.tabulator-row-odd,\n    &.tabulator-row-odd:hover {\n        background-color: rgb(var(--table-row-background-color--odd));\n    }\n\n    &.tabulator-row-even,\n    &.tabulator-row-even:hover {\n        background-color: rgb(var(--table-row-background-color--even));\n    }\n\n    .tabulator-cell {\n        border-right: transparent;\n        padding: $cell-padding;\n        padding-left: $cell-padding + $width-of-sorter-arrow;\n\n        height: inherit;\n\n        &[style*='text-align: right;'] {\n            justify-content: flex-end;\n        }\n        &[style*='text-align: center;'] {\n            justify-content: center;\n        }\n    }\n\n    .tabulator-col-resize-handle {\n        display: none;\n    }\n}\n\n.tabulator-col,\n.tabulator-cell {\n    max-width: var(--table-max-column-width, 40rem);\n}\n\n#tabulator-loader,\n#tabulator-empty-text {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#tabulator-loader {\n    background-color: rgba(var(--contrast-100), 0.6);\n    cursor: wait;\n}\n\n#tabulator-empty-text {\n    color: rgb(var(--contrast-800));\n    font-weight: bold;\n    font-size: functions.pxToRem(20);\n    pointer-events: none;\n}\n\nlimel-chip {\n    transform: translateY(-0.15rem);\n}\n\n@import './partial-styles/tabulator-arrow';\n@import './partial-styles/tabulator-paginator';\n@import './partial-styles/tabulator-loader';\n@import './partial-styles/tabulator-custom-styles';\n@import './partial-styles/header-component';\n@import './partial-styles/movable-columns';\n@import './partial-styles/_tabulator-footer';\n@import './partial-styles/_row-selection';\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor","filePath":"./src/components/text-editor/text-editor.tsx","fileName":"text-editor.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/usage","tag":"limel-text-editor","overview":"A rich text editor that offers a rich text editing experience with markdown support,\nin the sense that you can easily type markdown syntax and see the rendered\nresult as rich text in real-time. For instance, you can type `# Hello, world!`\nand see it directly turning to a heading 1 (an `<h1>` HTML element).\n\nNaturally, you can use standard keyboard hotkeys such as <kbd>Ctrl</kbd> + <kbd>B</kbd>\nto toggle bold text, <kbd>Ctrl</kbd> + <kbd>I</kbd> to toggle italic text, and so on.","usage":{},"docs":"A rich text editor that offers a rich text editing experience with markdown support,\nin the sense that you can easily type markdown syntax and see the rendered\nresult as rich text in real-time. For instance, you can type `# Hello, world!`\nand see it directly turning to a heading 1 (an `<h1>` HTML element).\n\nNaturally, you can use standard keyboard hotkeys such as <kbd>Ctrl</kbd> + <kbd>B</kbd>\nto toggle bold text, <kbd>Ctrl</kbd> + <kbd>I</kbd> to toggle italic text, and so on.","docsTags":[{"name":"exampleComponent","text":"limel-example-text-editor-basic"},{"name":"exampleComponent","text":"limel-example-text-editor-as-form-component"},{"name":"exampleComponent","text":"limel-example-text-editor-with-markdown"},{"name":"exampleComponent","text":"limel-example-text-editor-with-html"},{"name":"exampleComponent","text":"limel-example-text-editor-with-tables"},{"name":"exampleComponent","text":"limel-example-text-editor-with-inline-images-file-storage"},{"name":"exampleComponent","text":"limel-example-text-editor-with-inline-images-base64"},{"name":"exampleComponent","text":"limel-example-text-editor-allow-resize"},{"name":"exampleComponent","text":"limel-example-text-editor-size"},{"name":"exampleComponent","text":"limel-example-text-editor-ui"},{"name":"exampleComponent","text":"limel-example-text-editor-custom-element"},{"name":"exampleComponent","text":"limel-example-text-editor-triggers"},{"name":"exampleComponent","text":"limel-example-text-editor-composite"},{"name":"beta"}],"encapsulation":"shadow","dependents":["limel-example-text-editor-allow-resize","limel-example-text-editor-basic","limel-example-text-editor-composite","limel-example-text-editor-custom-element","limel-example-text-editor-size","limel-example-text-editor-triggers","limel-example-text-editor-ui","limel-example-text-editor-with-html","limel-example-text-editor-with-inline-images-base64","limel-example-text-editor-with-inline-images-file-storage","limel-example-text-editor-with-markdown","limel-example-text-editor-with-tables"],"dependencies":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"dependencyGraph":{"limel-text-editor":["limel-helper-line","limel-notched-outline","limel-markdown","limel-prosemirror-adapter"],"limel-prosemirror-adapter":["limel-action-bar","limel-portal","limel-text-editor-link-menu"],"limel-action-bar":["limel-action-bar-item","limel-action-bar-overflow-menu","limel-icon","limel-tooltip"],"limel-action-bar-item":["limel-icon","limel-tooltip"],"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar-overflow-menu":["limel-icon","limel-menu"],"limel-menu":["limel-spinner","limel-breadcrumbs","limel-input-field","limel-menu-list","limel-badge","limel-portal","limel-menu-surface"],"limel-breadcrumbs":["limel-icon","limel-tooltip"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-button":["limel-icon","limel-spinner"],"limel-example-text-editor-allow-resize":["limel-text-editor"],"limel-example-text-editor-basic":["limel-text-editor"],"limel-example-text-editor-composite":["limel-text-editor"],"limel-example-text-editor-custom-element":["limel-text-editor"],"limel-example-text-editor-size":["limel-text-editor"],"limel-example-text-editor-triggers":["limel-text-editor"],"limel-example-text-editor-ui":["limel-text-editor"],"limel-example-text-editor-with-html":["limel-text-editor"],"limel-example-text-editor-with-inline-images-base64":["limel-text-editor"],"limel-example-text-editor-with-inline-images-file-storage":["limel-text-editor"],"limel-example-text-editor-with-markdown":["limel-text-editor"],"limel-example-text-editor-with-tables":["limel-text-editor"]},"props":[{"name":"allowResize","type":"boolean","mutable":false,"attr":"allow-resize","reflectToAttr":true,"docs":"Set to `true` to allow the user to vertically resize the editor.\nSet to `false` to disable the resize functionality.","docsTags":[],"default":"true","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"contentType","type":"\"html\" | \"markdown\"","mutable":false,"attr":"content-type","reflectToAttr":false,"docs":"The type of content that the editor should handle and emit, defaults to `markdown`\n\nAssumed to be set only once, so not reactive to changes","docsTags":[],"default":"'markdown'","values":[{"value":"html","type":"string"},{"value":"markdown","type":"string"}],"optional":false,"required":false},{"name":"customElements","type":"CustomElementDefinition[]","mutable":false,"reflectToAttr":false,"docs":"A list of custom elements\n\nAny `CustomElement` that should be used inside the text editor needs\nto be defined here.","docsTags":[{"name":"private"},{"name":"alpha"}],"default":"[]","values":[{"type":"CustomElementDefinition[]"}],"optional":false,"required":false},{"name":"disabled","type":"boolean","mutable":false,"attr":"disabled","reflectToAttr":true,"docs":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"helperText","type":"string","mutable":false,"attr":"helper-text","reflectToAttr":true,"docs":"Optional helper text to display below the input field when it has focus","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"invalid","type":"boolean","mutable":false,"attr":"invalid","reflectToAttr":true,"docs":"Set to `true` to indicate that the current value of the editor is\ninvalid.","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"The label of the editor","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"placeholder","type":"string","mutable":false,"attr":"placeholder","reflectToAttr":true,"docs":"The placeholder text shown inside the input field,\nwhen the field is empty.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"readonly","type":"boolean","mutable":false,"attr":"readonly","reflectToAttr":true,"docs":"Set to `true` to make the component read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.\n:::note\nConsider that it might be better to use `limel-markdown`\ninstead of `limel-text-editor` when the goal is visualizing data.\n:::","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"required","type":"boolean","mutable":false,"attr":"required","reflectToAttr":true,"docs":"Set to `true` to indicate that the field is required.\n\n:::important\nAn empty but required field is not automatically considered invalid.\nYou must make sure to check the validity of the field on your own,\nand properly handle the `invalid` state.\n:::","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":true,"required":false},{"name":"triggers","type":"TriggerCharacter[]","mutable":false,"reflectToAttr":false,"docs":"A set of trigger characters\n\nDefining a character here will enable trigger events to be sent if the\ncharacter is detected in the editor.","docsTags":[{"name":"private"},{"name":"alpha"}],"default":"[]","values":[{"type":"TriggerCharacter[]"}],"optional":false,"required":false},{"name":"ui","type":"\"minimal\" | \"no-toolbar\" | \"standard\"","mutable":false,"attr":"ui","reflectToAttr":true,"docs":"Specifies the visual appearance of the editor.\n\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.","docsTags":[],"default":"'standard'","values":[{"value":"minimal","type":"string"},{"value":"no-toolbar","type":"string"},{"value":"standard","type":"string"}],"optional":true,"required":false},{"name":"value","type":"string","mutable":false,"attr":"value","reflectToAttr":true,"docs":"Description of the text inside the editor as markdown","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"change","detail":"string","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a change is made to the editor","docsTags":[]},{"event":"imagePasted","detail":"ImageInserter","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a image is pasted into the editor","docsTags":[{"name":"private"},{"name":"alpha"}]},{"event":"imageRemoved","detail":"EditorImage","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when a image is removed from the editor","docsTags":[{"name":"private"},{"name":"alpha"},{"name":"deprecated","text":"- This event is deprecated and will be removed in a future version.\nUse the `metadataChange` event instead to track image removals."}],"deprecation":"- This event is deprecated and will be removed in a future version.\nUse the `metadataChange` event instead to track image removals."},{"event":"metadataChange","detail":"EditorMetadata","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched when the metadata of the editor changes","docsTags":[{"name":"private"},{"name":"alpha"}]},{"event":"triggerChange","detail":"TriggerEventDetail","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched if a input is changed during an active trigger.","docsTags":[{"name":"private"},{"name":"alpha"}]},{"event":"triggerStart","detail":"TriggerEventDetail","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched if a trigger character is detected.","docsTags":[{"name":"private"},{"name":"alpha"}]},{"event":"triggerStop","detail":"TriggerEventDetail","bubbles":true,"cancelable":true,"composed":true,"docs":"Dispatched if a trigger session is ended. That is if the selection\ngoes outside the trigger input or if something is inserted using the\nsupplied `TextEditor` insert function.","docsTags":[{"name":"private"},{"name":"alpha"}]}],"styles":[{"name":"--text-editor-fade-out-background-color","annotation":"prop","docs":"the color of the fade-out effect at the top and bottom of the text editor, when the text-editor is in readonly state. Defaults to rgb(var(--contrast-100))."},{"name":"--text-editor-max-height","annotation":"prop","docs":"the tallest height the text editor can become when auto-resizing itself. Defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"text-editor.tsx","type":"tsx","source":"import { Component, Event, EventEmitter, Host, Prop, h } from '@stencil/core';\nimport { FormComponent } from '../form/form.types';\nimport { Languages } from '../date-picker/date.types';\nimport { createRandomString } from '../../util/random-string';\nimport { CustomElementDefinition } from '../../global/shared-types/custom-element.types';\nimport {\n    TriggerCharacter,\n    TriggerEventDetail,\n    ImageInserter,\n    EditorImage,\n    EditorMetadata,\n} from './text-editor.types';\nimport { EditorUiType } from './types';\n\n/**\n * A rich text editor that offers a rich text editing experience with markdown support,\n * in the sense that you can easily type markdown syntax and see the rendered\n * result as rich text in real-time. For instance, you can type `# Hello, world!`\n * and see it directly turning to a heading 1 (an `<h1>` HTML element).\n *\n * Naturally, you can use standard keyboard hotkeys such as <kbd>Ctrl</kbd> + <kbd>B</kbd>\n * to toggle bold text, <kbd>Ctrl</kbd> + <kbd>I</kbd> to toggle italic text, and so on.\n *\n * @exampleComponent limel-example-text-editor-basic\n * @exampleComponent limel-example-text-editor-as-form-component\n * @exampleComponent limel-example-text-editor-with-markdown\n * @exampleComponent limel-example-text-editor-with-html\n * @exampleComponent limel-example-text-editor-with-tables\n * @exampleComponent limel-example-text-editor-with-inline-images-file-storage\n * @exampleComponent limel-example-text-editor-with-inline-images-base64\n * @exampleComponent limel-example-text-editor-allow-resize\n * @exampleComponent limel-example-text-editor-size\n * @exampleComponent limel-example-text-editor-ui\n * @exampleComponent limel-example-text-editor-custom-element\n * @exampleComponent limel-example-text-editor-triggers\n * @exampleComponent limel-example-text-editor-composite\n * @beta\n */\n@Component({\n    tag: 'limel-text-editor',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'text-editor.scss',\n})\nexport class TextEditor implements FormComponent<string> {\n    /**\n     * The type of content that the editor should handle and emit, defaults to `markdown`\n     *\n     * Assumed to be set only once, so not reactive to changes\n     */\n    @Prop()\n    public contentType: 'markdown' | 'html' = 'markdown';\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled?: boolean = false;\n\n    /**\n     * Set to `true` to make the component read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     * :::note\n     * Consider that it might be better to use `limel-markdown`\n     * instead of `limel-text-editor` when the goal is visualizing data.\n     * :::\n     */\n    @Prop({ reflect: true })\n    public readonly?: boolean = false;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * The placeholder text shown inside the input field,\n     * when the field is empty.\n     */\n    @Prop({ reflect: true })\n    public placeholder?: string;\n\n    /**\n     * The label of the editor\n     */\n    @Prop({ reflect: true })\n    public label?: string;\n\n    /**\n     * Set to `true` to indicate that the current value of the editor is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid?: boolean = false;\n\n    /**\n     * Description of the text inside the editor as markdown\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * A list of custom elements\n     *\n     * Any `CustomElement` that should be used inside the text editor needs\n     * to be defined here.\n     *\n     * @private\n     * @alpha\n     */\n    @Prop()\n    public customElements: CustomElementDefinition[] = [];\n\n    /**\n     * A set of trigger characters\n     *\n     * Defining a character here will enable trigger events to be sent if the\n     * character is detected in the editor.\n     *\n     * @private\n     * @alpha\n     */\n    @Prop()\n    public triggers: TriggerCharacter[] = [];\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     *\n     * :::important\n     * An empty but required field is not automatically considered invalid.\n     * You must make sure to check the validity of the field on your own,\n     * and properly handle the `invalid` state.\n     * :::\n     */\n    @Prop({ reflect: true })\n    public required?: boolean = false;\n\n    /**\n     * Set to `true` to allow the user to vertically resize the editor.\n     * Set to `false` to disable the resize functionality.\n     */\n    @Prop({ reflect: true })\n    public allowResize: boolean = true;\n\n    /**\n     * Specifies the visual appearance of the editor.\n     *\n     * - `standard`: The default editor appearance with a full toolbar and\n     *    standard layout.\n     * - `minimal`: A compact editor appearance, ideal for limited space\n     *    scenarios such as mobile devices. In this mode, the toolbar is hidden\n     *    until the editor is focused.\n     * - `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n     *    This mode is suitable for scenarios where you want to provide a simple\n     *    text input without any visible formatting options; but still provide\n     *    support for markdown syntax and rich text, using hotkeys or when pasting.\n     */\n    @Prop({ reflect: true })\n    public ui?: EditorUiType = 'standard';\n\n    /**\n     * Dispatched when a change is made to the editor\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    /**\n     * Dispatched when a image is pasted into the editor\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    private readonly imagePasted: EventEmitter<ImageInserter>;\n\n    /**\n     * Dispatched when a image is removed from the editor\n     *\n     * @private\n     * @alpha\n     * @deprecated - This event is deprecated and will be removed in a future version.\n     * Use the `metadataChange` event instead to track image removals.\n     */\n    @Event()\n    private readonly imageRemoved: EventEmitter<EditorImage>;\n\n    /**\n     * Dispatched when the metadata of the editor changes\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    private readonly metadataChange: EventEmitter<EditorMetadata>;\n\n    /**\n     * Dispatched if a trigger character is detected.\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    public triggerStart: EventEmitter<TriggerEventDetail>;\n\n    /**\n     * Dispatched if a trigger session is ended. That is if the selection\n     * goes outside the trigger input or if something is inserted using the\n     * supplied `TextEditor` insert function.\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    public triggerStop: EventEmitter<TriggerEventDetail>;\n\n    /**\n     * Dispatched if a input is changed during an active trigger.\n     *\n     * @private\n     * @alpha\n     */\n    @Event()\n    public triggerChange: EventEmitter<TriggerEventDetail>;\n\n    private readonly helperTextId: string;\n    private readonly editorId: string;\n\n    public constructor() {\n        this.helperTextId = createRandomString();\n        this.editorId = createRandomString();\n    }\n\n    public render() {\n        return (\n            <Host>\n                <limel-notched-outline\n                    labelId={this.editorId}\n                    label={this.label}\n                    required={this.required}\n                    invalid={this.invalid}\n                    disabled={this.disabled}\n                    readonly={this.readonly}\n                    hasValue={!!this.value}\n                    hasFloatingLabel={true}\n                >\n                    {this.renderEditor()}\n                    {this.renderPlaceholder()}\n                </limel-notched-outline>\n                {this.renderHelperLine()}\n            </Host>\n        );\n    }\n\n    private renderEditor() {\n        if (this.readonly) {\n            return (\n                <limel-markdown\n                    slot=\"content\"\n                    value={this.value}\n                    aria-controls={this.helperTextId}\n                    id={this.editorId}\n                />\n            );\n        }\n\n        return (\n            <limel-prosemirror-adapter\n                slot=\"content\"\n                aria-placeholder={this.placeholder}\n                contentType={this.contentType}\n                onChange={this.handleChange}\n                onImagePasted={this.handleImagePasted}\n                onImageRemoved={this.handleImageRemoved}\n                onMetadataChange={this.handleMetadataChange}\n                customElements={this.customElements}\n                value={this.value}\n                aria-controls={this.helperTextId}\n                id={this.editorId}\n                aria-disabled={this.disabled}\n                aria-invalid={this.invalid}\n                aria-required={this.required}\n                language={this.language}\n                triggerCharacters={this.triggers}\n                disabled={this.disabled}\n                ui={this.ui}\n            />\n        );\n    }\n\n    private renderPlaceholder() {\n        if (!this.placeholder || this.value) {\n            return;\n        }\n\n        return (\n            <span class=\"placeholder\" aria-hidden=\"true\" slot=\"content\">\n                {this.placeholder}\n            </span>\n        );\n    }\n\n    private renderHelperLine = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperText={this.helperText}\n                helperTextId={this.helperTextId}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private isInvalid = () => {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            return true;\n        }\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.change.emit(event.detail);\n    };\n\n    private handleImagePasted = (event: CustomEvent<ImageInserter>) => {\n        event.stopPropagation();\n        this.imagePasted.emit(event.detail);\n    };\n\n    private handleMetadataChange = (event: CustomEvent<EditorMetadata>) => {\n        event.stopPropagation();\n        this.metadataChange.emit(event.detail);\n    };\n\n    private handleImageRemoved = (event: CustomEvent<EditorImage>) => {\n        event.stopPropagation();\n\n        this.imageRemoved.emit(event.detail);\n    };\n}\n"},{"filename":"text-editor.scss","type":"scss","source":"@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins.scss';\n\n/**\n * @prop --text-editor-max-height: the tallest height the text editor can become when auto-resizing itself. Defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`.\n * @prop --text-editor-fade-out-background-color: the color of the fade-out effect at the top and bottom of the text editor, when the text-editor is in readonly state. Defaults to rgb(var(--contrast-100)).\n */\n\n* {\n    box-sizing: border-box;\n}\n\n$min-height: 5rem;\n$min-height-condensed: calc($min-height / 2);\n\n:host(limel-text-editor) {\n    --limel-notched-outline-z-index: 2; // since `div.toolbar` has `z-index: 1;`\n    --limel-prosemirror-adapter-toolbar-opacity: 0.6;\n    --limel-text-editor-padding: 0.25rem 1rem 0.75rem 1rem;\n    --limel-prosemirror-adapter-toolbar-grid-template-rows: 1fr;\n    --limel-prosemirror-adapter-toolbar-grid-template-rows-transition-duration: 0.3s;\n    --limel-prosemirror-adapter-toolbar-transition-timing-function: cubic-bezier(\n        0.19,\n        0.23,\n        0.26,\n        0.89\n    );\n\n    position: relative;\n    isolation: isolate;\n    display: flex;\n    flex-direction: column;\n\n    width: 100%;\n    min-width: 5rem;\n    min-height: $min-height;\n    height: 100%;\n    max-height: var(\n        --text-editor-max-height,\n        calc(\n            100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) -\n                4rem\n        )\n    );\n    padding: 1px; // prevents visual defects that can appear due to the backdrop-filter and closeness to borders\n\n    limel-notched-outline {\n        height: 100%; // overrides the default `height: fit-content;`\n    }\n}\n\n:host(limel-text-editor:focus-within),\n:host(limel-text-editor:not([ui='minimal']):hover) {\n    --limel-prosemirror-adapter-toolbar-opacity: 1;\n}\n\n:host(limel-text-editor[ui='minimal']:not(:focus-within)) {\n    --limel-prosemirror-adapter-toolbar-grid-template-rows: 0fr;\n    --limel-prosemirror-adapter-toolbar-grid-template-rows-transition-duration: 0.46s;\n    --limel-prosemirror-adapter-action-bar-padding-top-bottom: 0;\n    --limel-prosemirror-adapter-toolbar-opacity: 0;\n}\n\n:host(limel-text-editor[ui='minimal']:not(:focus-within)),\n:host(limel-text-editor[ui='no-toolbar']) {\n    --limel-text-editor-padding: 0.75rem 1rem 0.75rem 1rem;\n    --limel-text-editor-placeholder-top: 0;\n\n    min-height: $min-height-condensed;\n    limel-prosemirror-adapter {\n        min-height: $min-height-condensed;\n    }\n}\n\n:host(limel-text-editor:focus-within),\n:host(limel-text-editor:focus) {\n    .placeholder {\n        opacity: 0;\n    }\n}\n\n:host(limel-text-editor[disabled]:not([disabled='false'])) {\n    limel-prosemirror-adapter {\n        @include shared_input-select-picker.looks-disabled;\n        pointer-events: none;\n    }\n}\n\n:host(limel-text-editor[readonly]:not([readonly='false'])) {\n    --limel-text-editor-padding: 0.75rem 1rem 0.75rem 1rem;\n    --limel-text-editor-placeholder-top: 0;\n\n    limel-markdown {\n        // displayed when `readonly` instead of the adapter\n        display: block;\n        padding: var(--limel-text-editor-padding);\n\n        overflow-y: auto;\n        -webkit-overflow-scrolling: touch;\n        height: 100%;\n\n        &:before,\n        &:after {\n            z-index: 1;\n            pointer-events: none;\n            content: '';\n            display: block;\n            position: absolute;\n            width: 100%;\n        }\n        &:after {\n            height: 1.75rem;\n            top: 0;\n            background: linear-gradient(\n                var(\n                    --text-editor-fade-out-background-color,\n                    rgb(var(--contrast-100))\n                ),\n                transparent\n            );\n        }\n\n        &:before {\n            height: 2rem;\n            bottom: -0.25rem;\n            background: linear-gradient(\n                transparent,\n                var(\n                    --text-editor-fade-out-background-color,\n                    rgb(var(--contrast-100))\n                )\n            );\n        }\n    }\n}\n\n.placeholder {\n    transition-property: top;\n    transition-duration: var(\n        --limel-prosemirror-adapter-toolbar-grid-template-rows-transition-duration\n    );\n    transition-timing-function: var(\n        --limel-prosemirror-adapter-toolbar-transition-timing-function\n    );\n    @include mixins.truncate-text;\n    pointer-events: none;\n    position: absolute;\n    top: var(--limel-text-editor-placeholder-top, 2.25rem);\n    left: 0;\n    right: 0;\n\n    padding: var(--limel-text-editor-padding);\n    font-style: italic;\n    font-size: 0.875rem;\n    color: shared_input-select-picker.$input-placeholder-color;\n}\n\nlimel-prosemirror-adapter {\n    flex-grow: 1;\n\n    min-width: 0;\n    min-height: $min-height;\n    height: 100%; // this can be overwritten by user's manual resizing\n    max-height: 100%;\n    overflow: hidden auto;\n    -webkit-overflow-scrolling: touch;\n}\n\n@include mixins.hide-helper-line-when-not-needed(limel-text-editor);\n\n:host(limel-text-editor[allow-resize]) {\n    limel-prosemirror-adapter {\n        resize: vertical;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/link-menu","filePath":"./src/components/text-editor/link-menu/editor-link-menu.tsx","fileName":"editor-link-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/link-menu/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/text-editor/link-menu/usage","tag":"limel-text-editor-link-menu","overview":"This component is a menu for editing a link in the text editor.\nIt allows the user to input the text and url for the link.","usage":{},"docs":"This component is a menu for editing a link in the text editor.\nIt allows the user to input the text and url for the link.","docsTags":[{"name":"beta"},{"name":"private"}],"encapsulation":"shadow","dependents":["limel-prosemirror-adapter"],"dependencies":["limel-input-field","limel-button"],"dependencyGraph":{"limel-text-editor-link-menu":["limel-input-field","limel-button"],"limel-input-field":["limel-helper-line","limel-icon","limel-portal","limel-menu-surface","limel-list","limel-notched-outline"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"],"limel-button":["limel-icon","limel-spinner"],"limel-prosemirror-adapter":["limel-text-editor-link-menu"]},"props":[{"name":"isOpen","type":"boolean","mutable":false,"attr":"is-open","reflectToAttr":true,"docs":"Open state of the link-menu dialog","docsTags":[],"default":"false","values":[{"type":"boolean"}],"optional":false,"required":false},{"name":"language","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","mutable":false,"attr":"language","reflectToAttr":true,"docs":"Defines the language for translations.","docsTags":[],"default":"'en'","values":[{"value":"da","type":"string"},{"value":"de","type":"string"},{"value":"en","type":"string"},{"value":"fi","type":"string"},{"value":"fr","type":"string"},{"value":"nb","type":"string"},{"value":"nl","type":"string"},{"value":"no","type":"string"},{"value":"sv","type":"string"}],"optional":false,"required":false},{"name":"link","type":"{ text?: string; href: string; }","mutable":false,"reflectToAttr":false,"docs":"The link","docsTags":[],"values":[{"type":"{ text?: string; href: string; }"}],"optional":false,"required":false}],"methods":[],"events":[{"event":"cancel","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the menu is closed from inside the component.\n(*Not* emitted when the consumer sets the `open`-property to `false`.)","docsTags":[]},{"event":"linkChange","detail":"{ text?: string; href: string; }","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the user inputs new values for the link","docsTags":[]},{"event":"save","detail":"void","bubbles":true,"cancelable":true,"composed":true,"docs":"Emitted when the menu is saved from inside the component.","docsTags":[]}],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"editor-link-menu.tsx","type":"tsx","source":"import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\nimport { EditorTextLink } from '../prosemirror-adapter/menu/types';\nimport { Languages } from '../../date-picker/date.types';\nimport translate from '../../../global/translations';\nimport { LimelInputFieldCustomEvent } from '../../../components';\nimport { ENTER, ESCAPE } from '../../../util/keycodes';\n\n/**\n * This component is a menu for editing a link in the text editor.\n * It allows the user to input the text and url for the link.\n * @beta\n * @private\n */\n@Component({\n    tag: 'limel-text-editor-link-menu',\n    shadow: true,\n    styleUrl: 'editor-link-menu.scss',\n})\nexport class TextEditorLinkMenu {\n    /**\n     * The link\n     */\n    @Prop({ reflect: true })\n    public link: EditorTextLink;\n\n    /**\n     * Defines the language for translations.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Open state of the link-menu dialog\n     */\n    @Prop({ reflect: true })\n    public isOpen: boolean = false;\n\n    /**\n     * Emitted when the menu is closed from inside the component.\n     * (*Not* emitted when the consumer sets the `open`-property to `false`.)\n     */\n    @Event()\n    private cancel: EventEmitter<void>;\n\n    /**\n     * Emitted when the menu is saved from inside the component.\n     */\n    @Event()\n    private save: EventEmitter<void>;\n\n    /**\n     * Emitted when the user inputs new values for the link\n     */\n    @Event()\n    private linkChange: EventEmitter<EditorTextLink>;\n\n    private textInput: HTMLLimelInputFieldElement;\n    private saveButton: HTMLLimelButtonElement;\n\n    public connectedCallback() {\n        this.setupGlobalHandlers();\n    }\n\n    public disconnectedCallback() {\n        this.teardownGlobalHandlers();\n    }\n\n    private setupGlobalHandlers() {\n        if (this.isOpen) {\n            document.addEventListener('keyup', this.handleCancel);\n        }\n    }\n\n    private teardownGlobalHandlers() {\n        document.removeEventListener('keyup', this.handleCancel);\n    }\n\n    public componentDidLoad() {\n        this.focusOnTextInput();\n    }\n\n    private focusOnTextInput() {\n        if (this.textInput) {\n            const inputField = this.textInput.shadowRoot.querySelector('input');\n            if (inputField) {\n                requestAnimationFrame(() => {\n                    inputField.focus();\n                });\n            }\n        }\n    }\n\n    public render() {\n        const isValid = this.isValid(this.link.href);\n\n        return [\n            <limel-input-field\n                label={this.getTranslation('editor-link-menu.text')}\n                value={this.link?.text || ''}\n                leadingIcon=\"text_cursor\"\n                onChange={this.handleLinkTitleChange}\n                onKeyDown={this.handleKeyDown}\n                ref={(el) =>\n                    (this.textInput = el as HTMLLimelInputFieldElement)\n                }\n            />,\n            <limel-input-field\n                label={this.getTranslation('editor-link-menu.link')}\n                value={this.link?.href || ''}\n                type=\"text\"\n                leadingIcon=\"-lime-text-link\"\n                trailingIcon=\"external_link\"\n                invalid={!isValid}\n                onChange={this.handleLinkValueChange}\n                onAction={this.handleLinkInputAction}\n                onKeyDown={this.handleKeyDown}\n            />,\n            <div class=\"actions\">\n                <limel-button\n                    label={this.getTranslation('cancel')}\n                    onClick={this.handleCancel}\n                />\n                <limel-button\n                    primary={true}\n                    label={this.getTranslation('save')}\n                    disabled={!isValid}\n                    onClick={this.handleSave}\n                    ref={(el) =>\n                        (this.saveButton = el as HTMLLimelButtonElement)\n                    }\n                    slot=\"button\"\n                />\n            </div>,\n        ];\n    }\n\n    private getTranslation = (key: string) => {\n        return translate.get(key, this.language);\n    };\n\n    private isValid = (href: string): boolean => {\n        try {\n            new URL(href);\n        } catch {\n            return false;\n        }\n\n        return true;\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key !== ENTER) {\n            return;\n        }\n\n        if (this.saveButton) {\n            this.saveButton.focus();\n        }\n\n        event.preventDefault();\n        if (this.isValid(this.link?.href)) {\n            this.handleSave(event);\n        }\n    };\n\n    private handleCancel = (event: MouseEvent | KeyboardEvent) => {\n        if (event instanceof KeyboardEvent && event.key !== ESCAPE) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n        this.cancel.emit();\n    };\n\n    private handleSave = (event: MouseEvent | KeyboardEvent) => {\n        event.stopPropagation();\n\n        this.save.emit();\n    };\n\n    private handleLinkInputAction = (\n        event: LimelInputFieldCustomEvent<void>\n    ) => {\n        window.open(this.link.href, '_blank');\n        event.stopPropagation();\n    };\n\n    private handleLinkTitleChange = (event: CustomEvent<string>) => {\n        this.emitLinkChange(event.detail, this.link?.href);\n    };\n\n    private handleLinkValueChange = (event: CustomEvent<string>) => {\n        const href = event.detail;\n\n        this.emitLinkChange(this.link?.text, href);\n    };\n\n    private emitLinkChange = (text: string, href: string) => {\n        const newLink: EditorTextLink = {\n            text: text,\n            href: href,\n        };\n\n        this.linkChange.emit(newLink);\n    };\n}\n"},{"filename":"editor-link-menu.scss","type":"scss","source":":host(limel-text-editor-link-menu) {\n    animation: fade 0.2s ease forwards;\n    animation-delay: 0.1s; // prevents the visual glitch when the link opens\n    opacity: 0;\n\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    padding: 0.5rem;\n    max-width: calc(100vw - 2rem);\n    border-radius: 0.5rem;\n    background-color: var(--lime-elevated-surface-background-color);\n    box-shadow: var(--shadow-depth-16);\n}\n\n.actions {\n    display: flex;\n    justify-content: end;\n    gap: 0.5rem;\n}\n\n@keyframes fade {\n    0% {\n        scale: 0.86;\n        opacity: 0;\n    }\n    100% {\n        scale: 1;\n        opacity: 1;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip","filePath":"./src/components/tooltip/tooltip.tsx","fileName":"tooltip.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/usage","tag":"limel-tooltip","overview":"A tooltip can be used to display a descriptive text for any element.\nThe displayed content must be a brief and supplemental string of text,\nidentifying the element or describing its function for the user,\nhelping them better understand unfamiliar objects that aren't described\ndirectly in the UI.\n\n## Interaction\nThe tooltip appears after a slight delay, when the element is hovered;\nand disappears as soon as the cursor leaves the element.\nTherefore, users cannot interact with the tip, but if the trigger element\nitself is interactive, it will remain interactible even with a tooltip bound\nto it.\n\n:::note\nIn order to display the tooltip, the tooltip element and its trigger element\nmust be within the same document or document fragment (the same shadowRoot).\nOften, it's easiest to just place them next to each other like in the example\nbelow, but if you need to, you can place them differently.\n\n```html\n<limel-button icon=\"search\" id=\"tooltip-example\" />\n<limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n```\n:::\n\n## Usage\n- Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\nUse them only when they add significant value.\n- A good tip is concise, helpful, and informative.\nDon't explain the obvious or simply repeat what is already on the screen.\nWhen used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n- If the tip is essential to the primary tasks that the user is performing,\nsuch as warnings or important notes, include the information directly in the\ninterface instead.\n- When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\nuse that, not a tooltip.\n- Make sure to use the tooltip on an element that users naturally and\neffortlessly recognize can be hovered.","usage":{},"docs":"A tooltip can be used to display a descriptive text for any element.\nThe displayed content must be a brief and supplemental string of text,\nidentifying the element or describing its function for the user,\nhelping them better understand unfamiliar objects that aren't described\ndirectly in the UI.\n\n## Interaction\nThe tooltip appears after a slight delay, when the element is hovered;\nand disappears as soon as the cursor leaves the element.\nTherefore, users cannot interact with the tip, but if the trigger element\nitself is interactive, it will remain interactible even with a tooltip bound\nto it.\n\n:::note\nIn order to display the tooltip, the tooltip element and its trigger element\nmust be within the same document or document fragment (the same shadowRoot).\nOften, it's easiest to just place them next to each other like in the example\nbelow, but if you need to, you can place them differently.\n\n```html\n<limel-button icon=\"search\" id=\"tooltip-example\" />\n<limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n```\n:::\n\n## Usage\n- Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\nUse them only when they add significant value.\n- A good tip is concise, helpful, and informative.\nDon't explain the obvious or simply repeat what is already on the screen.\nWhen used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n- If the tip is essential to the primary tasks that the user is performing,\nsuch as warnings or important notes, include the information directly in the\ninterface instead.\n- When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\nuse that, not a tooltip.\n- Make sure to use the tooltip on an element that users naturally and\neffortlessly recognize can be hovered.","docsTags":[{"name":"exampleComponent","text":"limel-example-tooltip-basic"},{"name":"exampleComponent","text":"limel-example-tooltip-max-character"},{"name":"exampleComponent","text":"limel-example-tooltip-composite"}],"encapsulation":"shadow","dependents":["limel-action-bar","limel-action-bar-item","limel-breadcrumbs","limel-button-group","limel-chart","limel-color-picker","limel-dock-button","limel-example-button-disabled-vs-hidden","limel-example-button-icon","limel-example-tooltip-basic","limel-example-tooltip-composite","limel-example-tooltip-declutter","limel-example-tooltip-max-character","limel-file-viewer","limel-icon-button"],"dependencies":["limel-portal","limel-tooltip-content"],"dependencyGraph":{"limel-tooltip":["limel-portal","limel-tooltip-content"],"limel-action-bar":["limel-tooltip"],"limel-action-bar-item":["limel-tooltip"],"limel-breadcrumbs":["limel-tooltip"],"limel-button-group":["limel-tooltip"],"limel-chart":["limel-tooltip"],"limel-color-picker":["limel-tooltip"],"limel-dock-button":["limel-tooltip"],"limel-example-button-disabled-vs-hidden":["limel-tooltip"],"limel-example-button-icon":["limel-tooltip"],"limel-example-tooltip-basic":["limel-tooltip"],"limel-example-tooltip-composite":["limel-tooltip"],"limel-example-tooltip-declutter":["limel-tooltip"],"limel-example-tooltip-max-character":["limel-tooltip"],"limel-file-viewer":["limel-tooltip"],"limel-icon-button":["limel-tooltip"]},"props":[{"name":"elementId","type":"string","mutable":false,"attr":"element-id","reflectToAttr":true,"docs":"ID of the owner element that the tooltip should describe.\nMust be a child within the same document fragment as the tooltip element\nitself.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":true},{"name":"helperLabel","type":"string","mutable":false,"attr":"helper-label","reflectToAttr":true,"docs":"Additional helper text for the element.\nExample usage can be a keyboard shortcut to activate the function of the\nowner element.","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Short descriptive text of the owner element.","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":true},{"name":"maxlength","type":"number","mutable":false,"attr":"maxlength","reflectToAttr":true,"docs":"The maximum amount of characters before rendering 'label' and\n'helperLabel' in two rows.","docsTags":[],"default":"DEFAULT_MAX_LENGTH","values":[{"type":"number"}],"optional":true,"required":false},{"name":"openDirection","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","mutable":false,"attr":"open-direction","reflectToAttr":true,"docs":"Decides the tooltip's location in relation to its trigger.","docsTags":[],"default":"'top'","values":[{"value":"bottom","type":"string"},{"value":"bottom-end","type":"string"},{"value":"bottom-start","type":"string"},{"value":"left","type":"string"},{"value":"left-end","type":"string"},{"value":"left-start","type":"string"},{"value":"right","type":"string"},{"value":"right-end","type":"string"},{"value":"right-start","type":"string"},{"value":"top","type":"string"},{"value":"top-end","type":"string"},{"value":"top-start","type":"string"}],"optional":false,"required":false}],"methods":[],"events":[],"styles":[{"name":"--tooltip-z-index","annotation":"prop","docs":"z-index of the tooltip."}],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip.tsx","type":"tsx","source":"import { Component, h, Prop, Element, State } from '@stencil/core';\nimport { JSX } from 'react';\nimport { createRandomString } from '../../util/random-string';\nimport { OpenDirection } from '../menu/menu.types';\nimport { getOwnerElement } from './get-owner-element';\nimport { TooltipTimer } from './tooltip-timer';\n\nconst DEFAULT_MAX_LENGTH = 50;\n\n/**\n * A tooltip can be used to display a descriptive text for any element.\n * The displayed content must be a brief and supplemental string of text,\n * identifying the element or describing its function for the user,\n * helping them better understand unfamiliar objects that aren't described\n * directly in the UI.\n *\n * ## Interaction\n * The tooltip appears after a slight delay, when the element is hovered;\n * and disappears as soon as the cursor leaves the element.\n * Therefore, users cannot interact with the tip, but if the trigger element\n * itself is interactive, it will remain interactible even with a tooltip bound\n * to it.\n *\n * :::note\n * In order to display the tooltip, the tooltip element and its trigger element\n * must be within the same document or document fragment (the same shadowRoot).\n * Often, it's easiest to just place them next to each other like in the example\n * below, but if you need to, you can place them differently.\n *\n * ```html\n * <limel-button icon=\"search\" id=\"tooltip-example\" />\n * <limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n * ```\n * :::\n *\n * ## Usage\n * - Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\n * Use them only when they add significant value.\n * - A good tip is concise, helpful, and informative.\n * Don't explain the obvious or simply repeat what is already on the screen.\n * When used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n * - If the tip is essential to the primary tasks that the user is performing,\n * such as warnings or important notes, include the information directly in the\n * interface instead.\n * - When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\n * use that, not a tooltip.\n * - Make sure to use the tooltip on an element that users naturally and\n * effortlessly recognize can be hovered.\n *\n * @exampleComponent limel-example-tooltip-basic\n * @exampleComponent limel-example-tooltip-max-character\n * @exampleComponent limel-example-tooltip-composite\n */\n@Component({\n    tag: 'limel-tooltip',\n    shadow: true,\n    styleUrl: 'tooltip.scss',\n})\nexport class Tooltip {\n    /**\n     * ID of the owner element that the tooltip should describe.\n     * Must be a child within the same document fragment as the tooltip element\n     * itself.\n     */\n    @Prop({ reflect: true })\n    public elementId!: string;\n\n    /**\n     * Short descriptive text of the owner element.\n     */\n    @Prop({ reflect: true })\n    public label!: string;\n\n    /**\n     * Additional helper text for the element.\n     * Example usage can be a keyboard shortcut to activate the function of the\n     * owner element.\n     */\n    @Prop({ reflect: true })\n    public helperLabel?: string;\n\n    /**\n     * The maximum amount of characters before rendering 'label' and\n     * 'helperLabel' in two rows.\n     */\n    @Prop({ reflect: true })\n    public maxlength?: number = DEFAULT_MAX_LENGTH;\n\n    /**\n     * Decides the tooltip's location in relation to its trigger.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'top';\n\n    @Element()\n    private host: HTMLLimelTooltipElement;\n\n    @State()\n    private open: boolean;\n\n    private portalId: string;\n    private tooltipId: string;\n    private ownerElement: HTMLElement;\n    private tooltipTimer: TooltipTimer;\n\n    public constructor() {\n        this.portalId = createRandomString();\n        this.tooltipId = createRandomString();\n        this.tooltipTimer = new TooltipTimer(\n            () => (this.open = true),\n            () => (this.open = false)\n        );\n    }\n\n    public connectedCallback() {\n        this.ownerElement = getOwnerElement(this.elementId, this.host);\n        this.setOwnerAriaLabel();\n        this.addListeners();\n    }\n\n    public disconnectedCallback() {\n        this.removeListeners();\n    }\n\n    public render(): JSX.Element {\n        const tooltipZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--tooltip-z-index'\n        );\n\n        return (\n            <div class=\"trigger-anchor\">\n                <limel-portal\n                    openDirection={this.openDirection}\n                    visible={this.open}\n                    containerId={this.portalId}\n                    containerStyle={{\n                        'z-index': tooltipZIndex,\n                        'pointer-events': 'none',\n                    }}\n                    anchor={this.ownerElement}\n                >\n                    <limel-tooltip-content\n                        label={this.label}\n                        helperLabel={this.helperLabel}\n                        maxlength={this.maxlength}\n                        role=\"tooltip\"\n                        aria-hidden={!this.open}\n                        id={this.tooltipId}\n                    />\n                </limel-portal>\n            </div>\n        );\n    }\n\n    private setOwnerAriaLabel() {\n        this.ownerElement?.setAttribute('aria-describedby', this.tooltipId);\n    }\n\n    private addListeners() {\n        this.ownerElement?.addEventListener('mouseover', this.showTooltip);\n        this.ownerElement?.addEventListener('mouseout', this.hideTooltip);\n        this.ownerElement?.addEventListener('focus', this.showTooltip);\n        this.ownerElement?.addEventListener('blur', this.hideTooltip);\n    }\n\n    private removeListeners() {\n        this.ownerElement?.removeEventListener('mouseover', this.showTooltip);\n        this.ownerElement?.removeEventListener('mouseout', this.hideTooltip);\n        this.ownerElement?.removeEventListener('focus', this.showTooltip);\n        this.ownerElement?.removeEventListener('blur', this.hideTooltip);\n    }\n\n    private showTooltip = () => {\n        this.tooltipTimer.showAfterDelay();\n    };\n\n    private hideTooltip = () => {\n        this.tooltipTimer.hide();\n    };\n}\n"},{"filename":"tooltip.scss","type":"scss","source":"/**\n * @prop --tooltip-z-index: z-index of the tooltip.\n */\n\n:host(limel-tooltip) {\n    // Absolutely positioning ensures that this invisible element\n    // does not occupy visible space in the UI.\n    // Without this, `limel-tooltip` could in many cases\n    // mess up the layout, where it is used.\n    // For example, inside a `grid` or `flex` section,\n    // every instance of the tooltip would take some space,\n    // creating gaps and empty holes.\n    position: absolute;\n    pointer-events: none;\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip","filePath":"./src/components/tooltip/tooltip-content.tsx","fileName":"tooltip-content.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/tooltip/usage","tag":"limel-tooltip-content","overview":"This component is used internally by `limel-tooltip`.","usage":{},"docs":"This component is used internally by `limel-tooltip`.","docsTags":[{"name":"private"}],"encapsulation":"shadow","dependents":["limel-tooltip"],"dependencies":[],"dependencyGraph":{"limel-tooltip":["limel-tooltip-content"]},"props":[{"name":"helperLabel","type":"string","mutable":false,"attr":"helper-label","reflectToAttr":true,"docs":"Read more in tooltip.tsx","docsTags":[],"values":[{"type":"string"}],"optional":true,"required":false},{"name":"label","type":"string","mutable":false,"attr":"label","reflectToAttr":true,"docs":"Read more in tooltip.tsx","docsTags":[],"values":[{"type":"string"}],"optional":false,"required":true},{"name":"maxlength","type":"number","mutable":false,"attr":"maxlength","reflectToAttr":true,"docs":"Read more in tooltip.tsx","docsTags":[],"values":[{"type":"number"}],"optional":true,"required":false}],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"tooltip-content.tsx","type":"tsx","source":"import { Component, h, Prop } from '@stencil/core';\n\n/**\n * This component is used internally by `limel-tooltip`.\n *\n * @private\n */\n@Component({\n    tag: 'limel-tooltip-content',\n    shadow: true,\n    styleUrl: 'tooltip-content.scss',\n})\nexport class TooltipContent {\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    label!: string;\n\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    helperLabel?: string;\n\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    maxlength?: number;\n\n    public render() {\n        let isLabelsTextLong = false;\n        if (this.helperLabel && this.maxlength) {\n            isLabelsTextLong =\n                this.label.length + this.helperLabel.length > this.maxlength;\n        }\n\n        const props: any = {};\n        if (this.maxlength) {\n            props.style = {\n                '--tooltip-max-width-of-text': `${this.maxlength}` + 'ch',\n            };\n        }\n\n        return [\n            <text class={{ 'has-column-layout': isLabelsTextLong }} {...props}>\n                <div class=\"label\">{this.label}</div>\n                <div class=\"helper-label\">{this.helperLabel}</div>\n            </text>,\n        ];\n    }\n}\n"},{"filename":"tooltip-content.scss","type":"scss","source":":host(limel-tooltip-content) {\n    display: flex;\n\n    border-radius: 0.25rem;\n    padding: 0.25rem 0.5rem;\n    background-color: rgb(var(--contrast-1300));\n    box-shadow: var(--shadow-depth-16);\n}\n\ntext {\n    font-size: 0.875rem; // 14px\n    line-height: 1.25;\n    display: flex;\n    column-gap: 1rem;\n\n    &.has-column-layout {\n        display: table-cell;\n        width: fit-content;\n        max-width: min(var(--tooltip-max-width-of-text), 80vw);\n        .label {\n            padding-bottom: 0.5rem;\n        }\n        .helper-label {\n            padding-bottom: 0.25rem;\n        }\n    }\n}\n\n.label {\n    color: rgb(var(--contrast-200));\n}\n\n.helper-label {\n    color: rgb(var(--contrast-800));\n\n    &:empty {\n        display: none;\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/my-custom-menu.tsx","fileName":"my-custom-menu.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"my-custom-menu","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-list"],"dependencyGraph":{"my-custom-menu":["limel-header","limel-list"],"limel-header":["limel-icon"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"my-custom-menu.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'my-custom-menu',\n    shadow: { delegatesFocus: true },\n})\nexport class MyCustomMenu {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Companies',\n            icon: {\n                name: 'organization',\n                color: 'rgb(var(--color-blue-default)',\n            },\n        },\n        {\n            text: 'Deals',\n            icon: {\n                name: 'money',\n                color: 'rgb(var(--color-green-default))',\n            },\n        },\n        {\n            text: 'Agreements',\n            icon: {\n                name: 'handshake',\n                color: 'rgb(var(--color-pink-default))',\n            },\n        },\n        {\n            text: 'Todos',\n            icon: {\n                name: 'today',\n                color: 'rgb(var(--color-teal-default))',\n            },\n        },\n        {\n            text: 'History',\n            icon: {\n                name: 'comments',\n                color: 'rgb(var(--color-grey-light))',\n            },\n        },\n        {\n            text: 'Coworkers',\n            icon: {\n                name: 'gender_neutral_user',\n                color: 'rgb(var(--color-orange-light))',\n            },\n        },\n        {\n            text: 'Persons',\n            icon: {\n                name: 'user_group_man_man',\n                color: 'rgb(var(--color-yellow-dark)',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-header\n                heading=\"Navigate to a table\"\n                subheading=\"Showing 7 of 12\"\n                supportingText=\"Show all…\"\n            />,\n            <limel-list\n                items={this.items}\n                class=\"has-grid-layout has-interactive-items\"\n            />,\n        ];\n    }\n}\n"}]},{"dirPath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples","filePath":"./src/components/dock/examples/my-custom-menu-with-notifications.tsx","fileName":"my-custom-menu-with-notifications.tsx","readmePath":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/readme.md","usagesDir":"/home/runner/work/lime-elements/lime-elements/src/components/dock/examples/usage","tag":"my-custom-menu-with-notifications","overview":"","usage":{},"docs":"","docsTags":[],"encapsulation":"shadow","dependents":[],"dependencies":["limel-header","limel-list"],"dependencyGraph":{"my-custom-menu-with-notifications":["limel-header","limel-list"],"limel-header":["limel-icon"],"limel-list":["limel-dynamic-label","limel-helper-line"],"limel-dynamic-label":["limel-icon"]},"props":[],"methods":[],"events":[],"styles":[],"slots":[],"parts":[],"listeners":[],"sources":[{"filename":"my-custom-menu-with-notifications.tsx","type":"tsx","source":"import { ListItem } from '@limetech/lime-elements';\nimport { Component, h } from '@stencil/core';\n\n@Component({\n    tag: 'my-custom-menu-with-notifications',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'my-custom-menu-with-notifications.scss',\n})\nexport class MyCustomMenuWithNotifications {\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'Preferences',\n            icon: {\n                name: 'horizontal_settings_mixer',\n                color: 'rgb(var(--color-blue-default)',\n            },\n            primaryComponent: {\n                name: 'limel-badge',\n                props: {\n                    label: 2,\n                    style: {\n                        order: '2',\n                    },\n                },\n            },\n        },\n        {\n            text: \"What's new\",\n            icon: {\n                name: 'new',\n                color: 'rgb(var(--color-orange-default)',\n            },\n            primaryComponent: {\n                name: 'limel-badge',\n                props: {\n                    label: 3,\n                    style: {\n                        order: '2',\n                    },\n                },\n            },\n        },\n        {\n            text: 'Sign out',\n            icon: {\n                name: 'shutdown',\n                color: 'rgb(var(--color-red-default))',\n            },\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-header heading=\"Hi user!\" icon=\"user_male_circle\" />,\n            <limel-list\n                items={this.items}\n                class=\"has-grid-layout has-interactive-items\"\n            />,\n        ];\n    }\n}\n"},{"filename":"my-custom-menu-with-notifications.scss","type":"scss","source":":host(my-custom-menu-with-notifications) {\n    --badge-background-color: rgb(var(--color-red-default));\n    --badge-text-color: rgb(var(--color-white));\n}\n\nlimel-list {\n    --gap: 0.25rem;\n}\n"}]}]},"title":"lime elements","menu":[{"path":"/Home/","title":"Home","children":[{"path":"/Home/index.md/","title":"Lime Elements","children":[]},{"path":"/Home/contributing.md/","title":"Contributing","children":[]},{"path":"/Home/events.md/","title":"Events and input handling","children":[]}]},{"path":"/DesignGuidelines/","title":"Design Guidelines","children":[{"path":"/DesignGuidelines/color-system.md/","title":"Color system","children":[]},{"path":"/DesignGuidelines/shadows-and-depth.md/","title":"Shadows and depth","children":[]},{"path":"/DesignGuidelines/size-rhythms.md/","title":"Size rhythms","children":[]},{"path":"/DesignGuidelines/action-buttons.md/","title":"Action buttons","children":[]},{"path":"/DesignGuidelines/declutter.md/","title":"Reducing UI clutter and cognitive load","children":[]},{"path":"/DesignGuidelines/disabled-hidden.md/","title":"Hiding or Disabling an interactive element in User Interfaces","children":[]},{"path":"/DesignGuidelines/disabled-vs-readonly.md/","title":"Disabled vs. Readonly","children":[]},{"path":"/DesignGuidelines/switch-vs-checkbox.md/","title":"Switch vs. Checkbox","children":[]},{"path":"/DesignGuidelines/labeling-boolean-fields.md/","title":"Labeling boolean fields","children":[]}]},{"path":"/component/","title":"Components","children":[{"path":"/component/limel-action-bar/","title":"Action bar","children":[{"title":"Properties","path":"/component/limel-action-bar/properties/"},{"title":"Events","path":"/component/limel-action-bar/events/"},{"title":"Styles","path":"/component/limel-action-bar/styles/"}]},{"path":"/component/limel-badge/","title":"Badge","children":[{"title":"Properties","path":"/component/limel-badge/properties/"},{"title":"Styles","path":"/component/limel-badge/styles/"}]},{"path":"/component/limel-banner/","title":"Banner","children":[{"title":"Properties","path":"/component/limel-banner/properties/"},{"title":"Methods","path":"/component/limel-banner/methods/"},{"title":"Slots","path":"/component/limel-banner/slots/"},{"title":"Styles","path":"/component/limel-banner/styles/"}]},{"path":"/component/limel-breadcrumbs/","title":"Breadcrumbs","children":[{"title":"Properties","path":"/component/limel-breadcrumbs/properties/"},{"title":"Events","path":"/component/limel-breadcrumbs/events/"},{"title":"Styles","path":"/component/limel-breadcrumbs/styles/"}]},{"path":"/component/limel-button/","title":"Button","children":[{"title":"Properties","path":"/component/limel-button/properties/"}]},{"path":"/component/limel-button-group/","title":"Button group","children":[{"title":"Properties","path":"/component/limel-button-group/properties/"},{"title":"Events","path":"/component/limel-button-group/events/"},{"title":"Styles","path":"/component/limel-button-group/styles/"}]},{"path":"/component/limel-callout/","title":"Callout","children":[{"title":"Properties","path":"/component/limel-callout/properties/"},{"title":"Styles","path":"/component/limel-callout/styles/"}]},{"path":"/component/limel-card/","title":"Card","children":[{"title":"Properties","path":"/component/limel-card/properties/"},{"title":"Events","path":"/component/limel-card/events/"},{"title":"Styles","path":"/component/limel-card/styles/"}]},{"path":"/component/limel-chart/","title":"Chart","children":[{"title":"Properties","path":"/component/limel-chart/properties/"},{"title":"Events","path":"/component/limel-chart/events/"},{"title":"Styles","path":"/component/limel-chart/styles/"}]},{"path":"/component/limel-checkbox/","title":"Checkbox","children":[{"title":"Properties","path":"/component/limel-checkbox/properties/"},{"title":"Events","path":"/component/limel-checkbox/events/"},{"title":"Styles","path":"/component/limel-checkbox/styles/"}]},{"path":"/component/limel-chip/","title":"Chip","children":[{"title":"Properties","path":"/component/limel-chip/properties/"},{"title":"Events","path":"/component/limel-chip/events/"},{"title":"Styles","path":"/component/limel-chip/styles/"}]},{"path":"/component/limel-chip-set/","title":"Chip set","children":[{"title":"Properties","path":"/component/limel-chip-set/properties/"},{"title":"Events","path":"/component/limel-chip-set/events/"},{"title":"Methods","path":"/component/limel-chip-set/methods/"},{"title":"Styles","path":"/component/limel-chip-set/styles/"}]},{"path":"/component/limel-circular-progress/","title":"Circular progress","children":[{"title":"Properties","path":"/component/limel-circular-progress/properties/"},{"title":"Styles","path":"/component/limel-circular-progress/styles/"}]},{"path":"/component/limel-code-editor/","title":"Code editor","children":[{"title":"Properties","path":"/component/limel-code-editor/properties/"},{"title":"Events","path":"/component/limel-code-editor/events/"},{"title":"Styles","path":"/component/limel-code-editor/styles/"}]},{"path":"/component/limel-collapsible-section/","title":"Collapsible section","children":[{"title":"Properties","path":"/component/limel-collapsible-section/properties/"},{"title":"Events","path":"/component/limel-collapsible-section/events/"},{"title":"Slots","path":"/component/limel-collapsible-section/slots/"},{"title":"Styles","path":"/component/limel-collapsible-section/styles/"}]},{"path":"/component/limel-color-picker/","title":"Color picker","children":[{"title":"Properties","path":"/component/limel-color-picker/properties/"},{"title":"Events","path":"/component/limel-color-picker/events/"}]},{"path":"/component/limel-date-picker/","title":"Date picker","children":[{"title":"Properties","path":"/component/limel-date-picker/properties/"},{"title":"Events","path":"/component/limel-date-picker/events/"},{"title":"Styles","path":"/component/limel-date-picker/styles/"}]},{"path":"/component/limel-dialog/","title":"Dialog","children":[{"title":"Properties","path":"/component/limel-dialog/properties/"},{"title":"Events","path":"/component/limel-dialog/events/"},{"title":"Slots","path":"/component/limel-dialog/slots/"},{"title":"Styles","path":"/component/limel-dialog/styles/"}]},{"path":"/component/limel-dock/","title":"Dock","children":[{"title":"Properties","path":"/component/limel-dock/properties/"},{"title":"Events","path":"/component/limel-dock/events/"},{"title":"Styles","path":"/component/limel-dock/styles/"}]},{"path":"/component/limel-dynamic-label/","title":"Dynamic label","children":[{"title":"Properties","path":"/component/limel-dynamic-label/properties/"}]},{"path":"/component/limel-file/","title":"File","children":[{"title":"Properties","path":"/component/limel-file/properties/"},{"title":"Events","path":"/component/limel-file/events/"},{"title":"Styles","path":"/component/limel-file/styles/"}]},{"path":"/component/limel-file-viewer/","title":"File viewer","children":[{"title":"Properties","path":"/component/limel-file-viewer/properties/"},{"title":"Events","path":"/component/limel-file-viewer/events/"}]},{"path":"/component/limel-form/","title":"Form","children":[{"title":"Properties","path":"/component/limel-form/properties/"},{"title":"Events","path":"/component/limel-form/events/"},{"title":"Styles","path":"/component/limel-form/styles/"}]},{"path":"/component/limel-grid/","title":"Grid","children":[{"title":"Slots","path":"/component/limel-grid/slots/"},{"title":"Styles","path":"/component/limel-grid/styles/"}]},{"path":"/component/limel-header/","title":"Header","children":[{"title":"Properties","path":"/component/limel-header/properties/"},{"title":"Slots","path":"/component/limel-header/slots/"},{"title":"Styles","path":"/component/limel-header/styles/"}]},{"path":"/component/limel-help/","title":"Help","children":[{"title":"Properties","path":"/component/limel-help/properties/"}]},{"path":"/component/limel-icon/","title":"Icon","children":[{"title":"Properties","path":"/component/limel-icon/properties/"},{"title":"Styles","path":"/component/limel-icon/styles/"}]},{"path":"/component/limel-icon-button/","title":"Icon button","children":[{"title":"Properties","path":"/component/limel-icon-button/properties/"},{"title":"Styles","path":"/component/limel-icon-button/styles/"}]},{"path":"/component/limel-info-tile/","title":"Info tile","children":[{"title":"Properties","path":"/component/limel-info-tile/properties/"},{"title":"Styles","path":"/component/limel-info-tile/styles/"}]},{"path":"/component/limel-input-field/","title":"Input field","children":[{"title":"Properties","path":"/component/limel-input-field/properties/"},{"title":"Events","path":"/component/limel-input-field/events/"},{"title":"Styles","path":"/component/limel-input-field/styles/"}]},{"path":"/component/limel-linear-progress/","title":"Linear progress","children":[{"title":"Properties","path":"/component/limel-linear-progress/properties/"},{"title":"Styles","path":"/component/limel-linear-progress/styles/"}]},{"path":"/component/limel-list/","title":"List","children":[{"title":"Properties","path":"/component/limel-list/properties/"},{"title":"Events","path":"/component/limel-list/events/"},{"title":"Styles","path":"/component/limel-list/styles/"}]},{"path":"/component/limel-markdown/","title":"Markdown","children":[{"title":"Properties","path":"/component/limel-markdown/properties/"},{"title":"Styles","path":"/component/limel-markdown/styles/"}]},{"path":"/component/limel-menu/","title":"Menu","children":[{"title":"Properties","path":"/component/limel-menu/properties/"},{"title":"Events","path":"/component/limel-menu/events/"},{"title":"Slots","path":"/component/limel-menu/slots/"},{"title":"Styles","path":"/component/limel-menu/styles/"}]},{"path":"/component/limel-picker/","title":"Picker","children":[{"title":"Properties","path":"/component/limel-picker/properties/"},{"title":"Events","path":"/component/limel-picker/events/"},{"title":"Styles","path":"/component/limel-picker/styles/"}]},{"path":"/component/limel-popover/","title":"Popover","children":[{"title":"Properties","path":"/component/limel-popover/properties/"},{"title":"Events","path":"/component/limel-popover/events/"},{"title":"Slots","path":"/component/limel-popover/slots/"},{"title":"Styles","path":"/component/limel-popover/styles/"}]},{"path":"/component/limel-progress-flow/","title":"Progress flow","children":[{"title":"Properties","path":"/component/limel-progress-flow/properties/"},{"title":"Events","path":"/component/limel-progress-flow/events/"},{"title":"Styles","path":"/component/limel-progress-flow/styles/"}]},{"path":"/component/limel-select/","title":"Select","children":[{"title":"Properties","path":"/component/limel-select/properties/"},{"title":"Events","path":"/component/limel-select/events/"},{"title":"Styles","path":"/component/limel-select/styles/"}]},{"path":"/component/limel-shortcut/","title":"Shortcut","children":[{"title":"Properties","path":"/component/limel-shortcut/properties/"},{"title":"Styles","path":"/component/limel-shortcut/styles/"}]},{"path":"/component/limel-slider/","title":"Slider","children":[{"title":"Properties","path":"/component/limel-slider/properties/"},{"title":"Events","path":"/component/limel-slider/events/"}]},{"path":"/component/limel-snackbar/","title":"Snackbar","children":[{"title":"Properties","path":"/component/limel-snackbar/properties/"},{"title":"Events","path":"/component/limel-snackbar/events/"},{"title":"Methods","path":"/component/limel-snackbar/methods/"}]},{"path":"/component/limel-spinner/","title":"Spinner","children":[{"title":"Properties","path":"/component/limel-spinner/properties/"},{"title":"Styles","path":"/component/limel-spinner/styles/"}]},{"path":"/component/limel-split-button/","title":"Split button","children":[{"title":"Properties","path":"/component/limel-split-button/properties/"},{"title":"Events","path":"/component/limel-split-button/events/"}]},{"path":"/component/limel-switch/","title":"Switch","children":[{"title":"Properties","path":"/component/limel-switch/properties/"},{"title":"Events","path":"/component/limel-switch/events/"}]},{"path":"/component/limel-tab-bar/","title":"Tab bar","children":[{"title":"Properties","path":"/component/limel-tab-bar/properties/"},{"title":"Events","path":"/component/limel-tab-bar/events/"}]},{"path":"/component/limel-tab-panel/","title":"Tab panel","children":[{"title":"Properties","path":"/component/limel-tab-panel/properties/"},{"title":"Events","path":"/component/limel-tab-panel/events/"},{"title":"Slots","path":"/component/limel-tab-panel/slots/"},{"title":"Styles","path":"/component/limel-tab-panel/styles/"}]},{"path":"/component/limel-table/","title":"Table","children":[{"title":"Properties","path":"/component/limel-table/properties/"},{"title":"Events","path":"/component/limel-table/events/"}]},{"path":"/component/limel-text-editor/","title":"Text editor","children":[{"title":"Properties","path":"/component/limel-text-editor/properties/"},{"title":"Events","path":"/component/limel-text-editor/events/"},{"title":"Styles","path":"/component/limel-text-editor/styles/"}]},{"path":"/component/limel-tooltip/","title":"Tooltip","children":[{"title":"Properties","path":"/component/limel-tooltip/properties/"},{"title":"Styles","path":"/component/limel-tooltip/styles/"}]}]},{"path":"/type/","title":"Types","children":[{"path":"/type/ActionBarItemOnlyIcon/","title":"ActionBarItemOnlyIcon","children":[]},{"path":"/type/ActionBarItemWithLabel/","title":"ActionBarItemWithLabel","children":[]},{"path":"/type/ActionBarItem/","title":"ActionBarItem","children":[]},{"path":"/type/BreadcrumbsItem/","title":"BreadcrumbsItem","children":[]},{"path":"/type/Button/","title":"Button","children":[]},{"path":"/type/CalloutType/","title":"CalloutType","children":[]},{"path":"/type/ChartItem/","title":"ChartItem","children":[]},{"path":"/type/Chip/","title":"Chip","children":[]},{"path":"/type/ChipType/","title":"ChipType","children":[]},{"path":"/type/CircularProgressSize/","title":"CircularProgressSize","children":[]},{"path":"/type/ColorScheme/","title":"ColorScheme","children":[]},{"path":"/type/Language/","title":"Language","children":[]},{"path":"/type/Action/","title":"Action","children":[]},{"path":"/type/DateType/","title":"DateType","children":[]},{"path":"/type/Languages/","title":"Languages","children":[]},{"path":"/type/ClosingActions/","title":"ClosingActions","children":[]},{"path":"/type/DialogHeading/","title":"DialogHeading","children":[]},{"path":"/type/DockItem/","title":"DockItem","children":[]},{"path":"/type/DockMenu/","title":"DockMenu","children":[]},{"path":"/type/Label/","title":"Label","children":[]},{"path":"/type/LabelValue/","title":"LabelValue","children":[]},{"path":"/type/FileType/","title":"FileType","children":[]},{"path":"/type/OfficeViewer/","title":"OfficeViewer","children":[]},{"path":"/type/FlexContainerAlign/","title":"FlexContainerAlign","children":[]},{"path":"/type/FlexContainerDirection/","title":"FlexContainerDirection","children":[]},{"path":"/type/FlexContainerJustify/","title":"FlexContainerJustify","children":[]},{"path":"/type/JSONSchema7/","title":"JSONSchema7","children":[]},{"path":"/type/FormLayoutType/","title":"FormLayoutType","children":[]},{"path":"/type/FormComponent/","title":"FormComponent","children":[]},{"path":"/type/FormComponentOptions/","title":"FormComponentOptions","children":[]},{"path":"/type/FormError/","title":"FormError","children":[]},{"path":"/type/FormInfo/","title":"FormInfo","children":[]},{"path":"/type/FormLayoutOptions/","title":"FormLayoutOptions","children":[]},{"path":"/type/FormSchema/","title":"FormSchema","children":[]},{"path":"/type/GridLayoutOptions/","title":"GridLayoutOptions","children":[]},{"path":"/type/LimeSchemaOptions/","title":"LimeSchemaOptions","children":[]},{"path":"/type/RowLayoutOptions/","title":"RowLayoutOptions","children":[]},{"path":"/type/ValidationStatus/","title":"ValidationStatus","children":[]},{"path":"/type/FormSchemaArrayItem/","title":"FormSchemaArrayItem","children":[]},{"path":"/type/FormSubKeySchema/","title":"FormSubKeySchema","children":[]},{"path":"/type/LimeLayoutOptions/","title":"LimeLayoutOptions","children":[]},{"path":"/type/ReplaceObjectType/","title":"ReplaceObjectType","children":[]},{"path":"/type/ValidationError/","title":"ValidationError","children":[]},{"path":"/type/Help/","title":"Help","children":[]},{"path":"/type/IconSize/","title":"IconSize","children":[]},{"path":"/type/InfoTileProgress/","title":"InfoTileProgress","children":[]},{"path":"/type/InputType/","title":"InputType","children":[]},{"path":"/type/ListComponent/","title":"ListComponent","children":[]},{"path":"/type/ListItem/","title":"ListItem","children":[]},{"path":"/type/ListType/","title":"ListType","children":[]},{"path":"/type/MenuItem/","title":"MenuItem","children":[]},{"path":"/type/MenuLoader/","title":"MenuLoader","children":[]},{"path":"/type/MenuSearcher/","title":"MenuSearcher","children":[]},{"path":"/type/OpenDirection/","title":"OpenDirection","children":[]},{"path":"/type/SurfaceWidth/","title":"SurfaceWidth","children":[]},{"path":"/type/ActionPosition/","title":"ActionPosition","children":[]},{"path":"/type/ActionScrollBehavior/","title":"ActionScrollBehavior","children":[]},{"path":"/type/Searcher/","title":"Searcher","children":[]},{"path":"/type/PickerValue/","title":"PickerValue","children":[]},{"path":"/type/FlowItem/","title":"FlowItem","children":[]},{"path":"/type/Option/","title":"Option","children":[]},{"path":"/type/SpinnerSize/","title":"SpinnerSize","children":[]},{"path":"/type/Tab/","title":"Tab","children":[]},{"path":"/type/TabPanelComponent/","title":"TabPanelComponent","children":[]},{"path":"/type/Bird/","title":"Bird","children":[]},{"path":"/type/Food/","title":"Food","children":[]},{"path":"/type/Habitat/","title":"Habitat","children":[]},{"path":"/type/Nest/","title":"Nest","children":[]},{"path":"/type/Layout/","title":"Layout","children":[]},{"path":"/type/ColumnAggregatorType/","title":"ColumnAggregatorType","children":[]},{"path":"/type/Column/","title":"Column","children":[]},{"path":"/type/ColumnAggregate/","title":"ColumnAggregate","children":[]},{"path":"/type/ColumnSorter/","title":"ColumnSorter","children":[]},{"path":"/type/TableComponent/","title":"TableComponent","children":[]},{"path":"/type/TableComponentDefinition/","title":"TableComponentDefinition","children":[]},{"path":"/type/TableParams/","title":"TableParams","children":[]},{"path":"/type/ColumnAggregatorFunction/","title":"ColumnAggregatorFunction","children":[]},{"path":"/type/RowData/","title":"RowData","children":[]},{"path":"/type/TableFormatter/","title":"TableFormatter","children":[]},{"path":"/type/EditorMenuTypes/","title":"EditorMenuTypes","children":[]},{"path":"/type/EditorTextLink/","title":"EditorTextLink","children":[]},{"path":"/type/LevelMapping/","title":"LevelMapping","children":[]},{"path":"/type/MouseButtons/","title":"MouseButtons","children":[]},{"path":"/type/ProseMirrorAdapterElementWithFocus/","title":"ProseMirrorAdapterElementWithFocus","children":[]},{"path":"/type/EditorImage/","title":"EditorImage","children":[]},{"path":"/type/EditorLink/","title":"EditorLink","children":[]},{"path":"/type/EditorMetadata/","title":"EditorMetadata","children":[]},{"path":"/type/ImageInserter/","title":"ImageInserter","children":[]},{"path":"/type/TextEditor/","title":"TextEditor","children":[]},{"path":"/type/TriggerEventDetail/","title":"TriggerEventDetail","children":[]},{"path":"/type/EditorImageState/","title":"EditorImageState","children":[]},{"path":"/type/TextEditorNode/","title":"TextEditorNode","children":[]},{"path":"/type/Trigger/","title":"Trigger","children":[]},{"path":"/type/TriggerCharacter/","title":"TriggerCharacter","children":[]},{"path":"/type/EditorUiType/","title":"EditorUiType","children":[]},{"path":"/type/TextEditorPlugin/","title":"TextEditorPlugin","children":[]},{"path":"/type/Config/","title":"Config","children":[]},{"path":"/type/BlackColor/","title":"BlackColor","children":[]},{"path":"/type/BrandColor/","title":"BrandColor","children":[]},{"path":"/type/BrandHue/","title":"BrandHue","children":[]},{"path":"/type/Brightness/","title":"Brightness","children":[]},{"path":"/type/ContrastColor/","title":"ContrastColor","children":[]},{"path":"/type/ContrastValue/","title":"ContrastValue","children":[]},{"path":"/type/Hue/","title":"Hue","children":[]},{"path":"/type/HueColor/","title":"HueColor","children":[]},{"path":"/type/WhiteColor/","title":"WhiteColor","children":[]},{"path":"/type/Color/","title":"Color","children":[]},{"path":"/type/CustomElementDefinition/","title":"CustomElementDefinition","children":[]},{"path":"/type/CustomElement/","title":"CustomElement","children":[]},{"path":"/type/FileInfo/","title":"FileInfo","children":[]},{"path":"/type/Icon/","title":"Icon","children":[]},{"path":"/type/Image/","title":"Image","children":[]},{"path":"/type/Link/","title":"Link","children":[]},{"path":"/type/ListSeparator/","title":"ListSeparator","children":[]}]}],"readme":"# Lime Elements\n\nIn the ever-evolving landscape of web-applications, streamlining the creation of user interfaces (UIs) has become paramount. This is where web-component libraries and design systems come into play, offering a powerful combination to accelerate development, enhance consistency, and foster collaboration among developers.\n\nWeb-component libraries and design systems are crucial in the rapidly evolving web-applications landscape, accelerating development, enhancing consistency, and promoting collaboration.\n\nSponsored by [Lime Technologies](https://www.lime-technologies.com/), Lime Elements is an open-source component library and a design system. It provides a high-quality set of well-designed, well-documented UI components, crafted in Stencil for enterprise-level products.\n\nOur top developers and designers continuously improve Lime Elements, fixing bugs and adding new features. It serves as Lime Technologies' central repository for UI guidelines, standards, and components, ensuring a consistent brand experience across all our applications. Lime Elements standardizes colors, typography, layouts, and interactions for a cohesive, accessible user experience.\n\nWe invite you to leverage our web-component library and design system. It can streamline development, enhance consistency, ease collaboration, and deliver exceptional user experiences. Lime Elements can be instrumental in creating modern, scalable, and accessible web applications that resonate with users worldwide.\n\nFor a full list of components, along with live examples, please visit the [documentation](https://lundalogik.github.io/lime-elements/).\n\n[![Version](https://img.shields.io/npm/v/@limetech/lime-elements.svg)](https://www.npmjs.com/package/@limetech/lime-elements) [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n---\n\n## Getting Started\n\n-   To install, run `npm install @limetech/lime-elements`.\n\n### Requirements\n\n#### 1. Font\n\nTo achieve a blazing fast rendering, our components' user interface utilizes a default cross-browser sans-serif font stack. As web components typically inherit font-related styles such as `font-family`, `font-size`, and `color`, we recommend defining these styles at a higher level, such as the `<body>` element. This is because we do not specify these defaults on each individual component.\n\nTo maintain consistency with the look & feel demonstrated in this documentation, we suggest incorporating the following styles into your project:\n\n```css\nfont-family: ui-sans-serif, system-ui, sans-serif;\nfont-size: 0.875rem;\nfont-style: normal;\nfont-weight: 400;\ncolor: rgb(var(--contrast-1500));\n```\n\n💡 About the `color` specified above, read more on [our color system](/#/DesignGuidelines/color-system.md/).\n\nFeel free to customize the font-family and related styles to suit your project's needs. For example, you might prefer a different typeface like below:\n\n```css\nfont-family: 'Roboto', Arial, Verdana, sans-serif;\n```\n\n#### 2. Icons\n\nAt Lime, we utilize the [_Windows 10_ icon set from **Icons8**](https://icons8.com/icons/windows). You may notice these icons in our components, such as the magnifying glass icon displayed as a leading icon on an input field.\n\nIf you're using Lime Elements in a non-Lime product, you'll need to provide your own icons. We're unable to redistribute Icons8's assets with our package due to licensing restrictions.\n\nProviding your own icons is crucial as many of our components use an `Icon` interface. This interface allows you to specify an icon name, which corresponds to the filename of an SVG icon. For example, you can use this to display an icon on a button.\n\n##### How to Set Up Your Icons Folder\n\n-   **For _Lime_ products:**\n\n    To use `@lundalogik/lime-icons8`, the `/assets` folder from `@lundalogik/lime-icons8` must be made available on the web-server.\n\n-   **For _non-Lime_ products:**\n\n    To use a different icon set, the icons must be placed in a folder structure that looks like this: `assets/icons/<name-of-icon>.svg`\n\n    If `assets` is placed in the root, no other setup is needed. The icons will be fetched with a relative URL from `/assets/icons/<name-of-icon>.svg`.\n\n    If `assets` is placed in a sub-folder somewhere, the easiest way to make the icons available is to use the HTML `base` element:\n\n    ```html\n    <base href=\"/my/parent/path/\" />\n    ```\n\n    If this is not enough, or if the `base` element is already in use for something else, a global icon path can be configured with the `limel-config` element:\n\n    ```ts\n    <limel-config config={{iconPath: '/my/parent/path/'}} />\n    ```\n\n---\n\n## Using @beta components\n\nComponents marked as `@beta` are not yet stable. Here's what you need to know:\n\n1. **Breaking changes:** We may change `@beta` components in ways that break your code. We won't increase the major version number when we do this.\n1. **Unstable:** `@beta` components may have more bugs than other components. Use them at your own risk.\n1. **Feedback wanted:** We offer `@beta` components to get your input. Your feedback helps us improve them.\n\nRemember: All components can change, but `@beta` components change more often and without warning.\n\n---\n\n## Getting help\n\n-   If you have a general question, or are in need of support, please open a [Question issue](https://github.com/Lundalogik/lime-elements/issues/new?template=03_question.md) on GitHub.\n\n---\n\n## Contributing\n\n-   To build and run the documentation locally on your machine, run `npm start`.\n-   To see what other scripts are available, run `npm run`.\n-   Please read our [guidelines for contributers](https://github.com/Lundalogik/lime-elements/CONTRIBUTING.md)\n","guides":[{"dirPath":"src","fileName":"index.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/index.md","data":{"path":"/Home/index.md"},"content":"# Lime Elements\n\nVersion [PR-3581](https://github.com/Lundalogik/lime-elements/blob/vPR-3581/CHANGELOG.md). Please see the [changelog](https://github.com/Lundalogik/lime-elements/blob/main/CHANGELOG.md) for information about all versions.\n\nThis is the documentation for Lime Elements. Under *Components*, you will find documentation for each available component, along with examples of use.\n"},{"dirPath":"src","fileName":"contributing.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/contributing.md","data":{"path":"/Home/contributing.md"},"content":"# Contributing\n\nThis is the documentation for Lime Elements. Documentation is generated by \n[Kompendium](https://kompendium.dev) and is written in Markdown\n\n## Adding a new page in the docs\n\nA new page can be added just by creating a new `.md` file anywhere in the project\nand adding it to the `guides.ts` file.\n\n```\n# Hello world\n\nI'm a markdown document that can have components!\n```\n\n## Include an example\n\nThere are two ways to include an example\n\n* By adding a `@exampleComponent` tag to the doc block of the owning component\n* Adding the HTML-tag for the component anywhere in a markdown document\n\n### Using the @exampleComponent tag\n\nBy using the `@exampleComponent` tag the component gets inserted automatically for the owning component together with all code for the example, e.g\n\n```tsx\n/**\n * @exampleComponent my-component-example\n */\n@Component({\n    tag: 'my-component',\n    shadow: true,\n})\nexport class MyComponent {\n\n}\n```\n\n### Adding a component to a markdown document\n\nAny component can be included in the markdown document\n\nThe following file\n\n```\n# Hello world\n\nThis is my example file\n\n<limel-example-button-group/>\n```\n\nwill generate the following\n\n<limel-example-button-group />\n"},{"dirPath":"src","fileName":"events.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/events.md","data":{"path":"/Home/events.md"},"content":"# Events and input handling\n\nAll components in Lime Elements that has a value, and can take some kind of user input to change that value, has a `value` property, by which the consumer can set or update that value.\n\nWhen the value of the component is changed from within the component, e.g. from the user typing in a field or clicking a checkbox, a `change` event is dispatched from the component with the new value. This means that the `value` property is *not* updated automatically and it is the responsibility of the consumer to set the new value, like in the example below.\n\n## Custom events\n\nAll events that are declared in this documentation are of the type [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent), which has a `detail` property that may contain more information regarding the event. The type of the `detail` property is defined in this documentation and can be used in the event handler to make the code more readable.\n\n## DOM events\n\nBesides the custom events that are defined in this documentation, it is also possible to listen for any standard DOM event, e.g. `click`. These events do not have the `detail` property and how to use them is not described within this documentation.\n\n## Example\n\n```tsx\nclass MyComponent {    \n    @State()\n    private value: string;\n\n    public render() {\n        return [\n            <limel-input-field\n                value={this.value}\n                onChange={this.handleChange} />,\n            <limel-button\n                label=\"Submit\"\n                onClick={this.handleClick} />\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    }\n\n    private handleClick = (event: MouseEvent) => {\n        console.log(this.value);\n    }\n}\n```\n"},{"dirPath":"src/design-guidelines/color-system","fileName":"color-system.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/color-system/color-system.md","data":{"path":"/DesignGuidelines/color-system.md"},"content":"# Color system\n\nBy taking advantage of CSS variables, we have created a harmonic and pleasing color system that aims to ease the job of picking the right colors for components. These colors are inspired by [Material Design's 2014 color palettes](https://material.io/design/color/the-color-system.html#tools-for-picking-colors). However, we have modified them, renamed them, added new swatches, and also divided them into different subsets of colors which automatically adjust to Dark and Light themes.\n\n## Color palettes\n\nThe color system offers a few sets of colors which we call \"palettes\". Each palette includes a number of swatches, each of which automatically adjusts itself to the light and dark themes. In other words, each swatch has only one name, but two versions; a brighter one which is displayed when light mode is activated, and a slightly dimmer tone of the same color which is displayed when dark mode is activated. You don't really have to care about this, and all you need to do is pick a color and use its CSS variable name in your code.\n\n### Color swatch names\n\n<limel-example-extended-color-palette></limel-example-extended-color-palette>\n\nThe color system consists of 20 base colors or \"hues\". Each hue has five variations: one default, two tints (light and lighter), and two shades (dark and darker); and this is simply how we have named their CSS variables. The `red` color for instance has the following variable names:\n\n`--color-red-lighter` → `--color-red-light` → `--color-red-default`→ `--color-red-dark` → `--color-red-darker`\n\n### Contrast swatch names\n\n<limel-example-contrast-color-palette></limel-example-contrast-color-palette>\n\nThe contrast swatches are used to clarify the generic and neutral UI elements such as backgrounds, containers, sections, and their textual content. Using them wisely will help create a sense of hierarchy as well as improved readability. CSS variable names for contrast swatches start with a prefix of `--contrast-` followed by a number. These numbers start at `100` and incrementally increase by 100 and stop at `1700`, such as:\n\n`--contrast-100` → `--contrast-200` → ··· → `--contrast-1600` → `--contrast-1700`\n\n:::note\nNote that you should never use these swatches when you are coloring something (like a colorful icon or illustration). Because these swatches will dramatically change their colors and get inverted in dark and light modes. So if you want something to have a shade of grey, or appear black or white all the time, then you should use the swatches from the color palette instead, not from this contrast palette, as they invert with modes.\n:::\n\n:::important\nKeep in mind that `--color-white` and `--color-black`, which are displayed beside the contrast swatches do not change in dark and light modes. These variables can be used, for example, in shadows (which remain black even in dark mode) or text colors on colored buttons.\n:::\n\n### Dark mode, light mode, accessibility\n\n:::note\nDon't confuse titles like \"dark mode\" and \"light mode\" or \"dark/light themes\" with these swatches' naming convention. As mentioned above, each swatch -despite its name- already comes with two tones inbuilt into the color system. For example the `--color-red-dark` variable will automatically be displayed as `#d32f2f` in light mode, and as `#c62828` in dark mode.\n:::\n\n<limel-example-dark-light-mode></limel-example-dark-light-mode>\n\nThe reduced brightness in dark mode is set with accessibility in mind, and will help reduce users' eye strain in low-light environments. In a proper design for dark mode, it is not enough to invert the background and text colors. Colors which are bright in light mode, will appear even brighter in dark mode and therefore pop out more from the UI, which can make the UI unpleasant or harder to look at.\n\n#### Elevated objects and contrast\n\nIn the above example, the card is using a contrast variable which is lighter than its background layer; which means it will become darker than its background in dark mode as colors invert. However, we believe that this would create a strange experience for the users. Thus we manually specify a \"lighter\" background color for dark mode.\n\nThe reason for this is that the card has an elevated effect with a drop shadow. Such visual effects (depth, movement, light direction and its effects, etc...) rely on our experiences from the physical world and try to mimic what happens in reality. Because human brain normally expect deeper objects to appear darker and vice versa, we have added a lighter color to the card for it to still be \"elevated\". This not only helps users' perception of the interface on an unconscious level, but also keeps the shadow effect more visible.\n\n:::tip\nIf you want our color system to take care of these styles,\nsimply use the `--lime-elevated-surface-background-color` variable\nas the background color of your custom elevated surfaces,\ninstead of specifying a contrast variable manually. For example:\n\n```scss\n.my-elevated-surface {\n    background-color: var(--lime-elevated-surface-background-color);\n}\n```\n\nThis variable automatically picks the brightest contrast swatch\nfor `light` color-scheme, but not the absolute dimmest\ncontrast swatch for the `dark` color-scheme. We also use this\nvariable internally for many of components in Lime Elements,\nto properly support the dark mode.\n:::\n\n## Usage\n\nAll components in Lime Elements already use our color palette and therefore support the dark color scheme out of the box. But your application in which you use Lime Elements should also have support for the dark mode. To get dark mode support, simply load `@limetech/lime-elements/dist/lime-elements/style/color-palette-extended.css` in your app. This will make all of our colors and shadows variables accessible for your application to use internally as well.\n\n:::warning\nIf your application does not support the`dark` color-scheme properly yet, you should instead load `@limetech/lime-elements/dist/lime-elements/style/color-palette-extended-light-mode-only.css`, where dark mode support is completely disabled.\n:::\n\n### Enabling end users to force light or dark mode\n\nBy default, our color system reacts to users' preferred color scheme, set by the operating system or the browser. However, some users may prefer to see a certain application in light or dark mode, despite their globally set preferred color scheme.\n\nYou can enable them to do so, for example by providing a toggle switch in your application's internal preferences page; or add a toggle switch like the one we have on the sidebar of this documentation page.\n\nAs long as the toggle switch that you implement applies a `data-theme='force-dark'` or `data-theme='force-light'` to the `root` of your HTML page for these \"forced\" color schemes, our color system will support these as well. For example:\n\n```html\n<html data-theme=\"force-dark\"></html>\n```\n\n### Using CSS variables\n\nWe have not used HEX values to create the CSS variables for each color. They are instead written in RGB digits, without parentheses. For example `--color-blue-default: 33, 150, 243;` (which would be `#2196f3` in HEX). The reason for such a choice is empowering you to write the colors with alpha channel if needed.\n\nThus, to get a solid blue color, you would write `color: rgb(var(--color-blue-default));`.\nTo get a blue color with 10% opacity, write `color: rgba(var(--color-blue-default), 0.1);` instead.\n\n### Customizing our components and your apps with colors\n\nWhen using web-components from Lime Elements, you will notice that there are many components which allow you to add colors. However, since Lime Elements is a design system intended to unify the look and feel of our products, we naturally try to reduce your styling choices. So this color customization will enable you to either add an accent color (e.g. your product color) to the component, or add colors that contribute the the functionality of the component (e.g. indicating a status such as error, danger, etc).\n\nBut when you do your own add-ons, integrations, and apps, keep in mind that the UI should be neutrally colored (using the contrast scales). Applying intensive colors to big areas of the UI (such as headers and background colors) is not recommended.\n\n:::note\nColors should be used to communicate meaning, and attract attention to things that are functionally important, not to scream your brand throughout the entire product. Different sections of the app should be distinct, but also blend together well. Extensive color usage will be placing the emphasis on an app’s UI structure, instead of its content.\n:::\n\nUse only one accent color (product color) and use it for all Lime Elements components in your product. Define this accent color by setting the CSS variable `--lime-primary-color`.\n\nWe don't recommend using the Lime brand color CSS variables for accent colors!\n\nThings that can be affected by the accent color:\n\n-   In buttons: background color of primary buttons\n-   In check boxes: background color of “checked” boxed\n-   In radio buttons: background color of “checked” buttons\n-   In inputs: the underline visual effect\n-   In linear progress: color of the progressed section and what’s left (its background)\n-   In many components: the visual styles that indicate the `focused` state (using keyboard)\n-   In many components: the visual styles that indicate the `active` or `selected` state\n-   etc…\n\nWhat colors you can optionally change to communicate meaning:\n\n-   In buttons: text color, and also background color of buttons with certain functionalities (delete, restore, etc)\n-   In badges: color of the page and its text color\n-   In linear progress: color of the progressed section and what’s left (its background)\n-   etc…\n\n<limel-example-colors-in-components></limel-example-colors-in-components>\n\n### Available palettes\n\nAll CSS variables for the colors are available, so you _could_ pick any name and use it in your work. But please do not abuse this flexibility!\n\nExtensive usage of colors will create a messy and inconsistent UI. Most of your UI design needs should be resolved using the swatches in the \"UI palette\" (illustrated below), in addition to the contrast palette. If you need more colors, try to stick to the swatches available in the \"Primary palette\". The \"Extended palette\" should be used only for very rare cases.\n\n#### **UI palette** (default)\n\n<limel-example-ui-color-palette></limel-example-ui-color-palette>\n\nThis includes 10 color swatches which give you colors that you normally need in a user interface. These few, hand picked swatches add an extra layer of meaning to elements of the interface and make it possible to quickly communicate what the element does or indicates.\n\nIn this palette, there is a `-default` and a `-light` swatch available for each hue. The `-light` tints are usually good to use when creating interactive visual feedback. For example a button that has `--color-green-default` as background color, can get `--color-green-light` when it is hovered by the cursor.\n\n---\n\n#### **Primary palette**\n\n<limel-example-primary-color-palette></limel-example-primary-color-palette>\n\nSometimes, just a handful of colors is not enough and you need a bit more. For example when you need colors for your icons, or diagrams. This palette with 40 swatches is designed to provide a decent number of harmonic colors while easing the choice of colors for you. Used for primary purposes and meaningful communications with colors.\n\n---\n\n#### **Extended palette**\n\n<limel-example-extended-color-palette></limel-example-extended-color-palette>\n\nWith 100 swatches, this palette offers a much richer set of colors that can be used for visual communication, iconography, illustrations, and charts.\n\n---\n\n## Lime Technologies Brand Colors\n\n<limel-example-brand-color-palette></limel-example-brand-color-palette>\n\nThis set of colors is included in all available palettes, and can be used for branding and marketing purposes. Swatches and their respective CSS variables have specific names starting with the prefix `--lime-brand-color-`.\n\n:::note\nThe brand colors do **not** have a dark and light version. Thus when their respective CSS variable names are used, they will be displayed with the same brightness in both light and dark UIs.\n:::\n\n### Usage of brand colors\n\nFor correct use of Lime Technologies brand assets, including colors, please refer to [Lime Technologies brand guidelines](https://www.lime-technologies.se/brand-guidelines/).\n\nWe recommend relying on the \"UI palette\" and avoid using brand colors extensively in UI design. Brand colors -as their name states- should be used where appropriate, to reflect the company's brand and identity; and add brand-recognizability to the product. These should be used the way you use spices in cooking. Too much and too many of them together will destroy the food. Therefore, in UI design, usage of brand colors should be very limited.\n\n:::tip\nGood places to use brand colors are:\n\n-   in loading screens or splash screens\n-   in logos or home links\n:::\n"},{"dirPath":"src/design-guidelines/shadows","fileName":"shadows-and-depth.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/shadows/shadows-and-depth.md","data":{"path":"/DesignGuidelines/shadows-and-depth.md"},"content":"# Shadows and depth\n\n## Physical world metaphors in UI design\n\nWhen learning any new interface, physical or digital, the process is made easier if elements of the interface are already familiar to us. For example, we all learn how a physical button works long before we're old enough to remember it. When learning a new interface, we might have to learn what happens when a certain button is pressed, but we shouldn't have to learn what a button _is_ and that _something_ happens when you press it. Our familiarity with elements of the physical world has long been used in the design of digital interfaces. Digital buttons are a fairly obvious example of this.\n\nThe question is, how do we recognize that something is a button? While it may be difficult to list exactly what properties make us recognize a physical button as a button, most physical buttons share some set of properties that make us recognize it as a button when we see it.\n\nOne way to help sighted users of a digital interface understand that an element is a button and they can press it and interact with it, is to make it look like a physical button. Emulating the visual qualities of physical objects in interface design is sometimes called _Skeuomorphism_.\n\nA good example of an extreme skeuomorphic design is the first calendar app, released on the first iPhone. Its UI design featured visual details such as leather cover and paper details, to mimic a physical pocket calendar.\n\nDespite skeuomorphism having already been replaced with more minimalistic UI design trends, we still use details from the physical world in our UI designs, to help users make sense of the elements of digital user interfaces. From a shutter-click sound of a camera app on the phone, to elements such as toggle buttons, to notions such as light, shadows, and motion.\n\nWe may look at a subtle visual clue such as an elevated button with a slight shadow underneath it, and semi-consciously perceive it as an interactable element of the user interface. This is because the elevation reminds us of a real physical button. Just by looking at it, we realize that this thing can be pressed, moved, or otherwise interacted with. We may see a toolbar or a modal placed on top of the rest of the elements on the screen, casting a slight shadow on whatever is below it. This helps us understand that the element is higher in the hierarchy, is more important, or demands more attention right now.\n\n## Shadows\n\nWhen correctly used, shadows can improve usability of UI elements. We can use shadows to:\n\n-   create a sense of depth,\n-   improve users' perception of clickable elements,\n-   emphasize the hierarchy of sections of the user interface,\n-   signal that a component is temporary, by placing it \"on top of\" a context,\n-   clarify the direction of movement of an element, whether it is animated as a result of a user interaction, such as pressing a button, or to indicate transition from one state to another,\n-   and even visualize distinct surfaces by clarifying their edges.\n\nA surface’s shadow is determined by its elevation and relationship to other surfaces.\nBecause shadows express the degree of elevation between surfaces, they must be used consistently throughout the product.\n\n## CSS variables that we offer for shadows\n\nBecause shadows express the degree of elevation between surfaces, they must be used consistently throughout a design. Therefore, Lime Elements offers a handful of CSS variables that can be used as `box-shadow` properties on desired elements.\n\n:::tip\nUsing these variables also ensures that in dark mode, shadows are automatically adjusted to better fit darker backgrounds.\n:::\n\n### 1. Shadow variables for buttons\n\nButtons and similar clickable elements such as dropdown triggers or slider handles particularly benefit from the visual effect caused by shadows. Since a shadow makes the element look elevated, it naturally signals that the element can be \"pressed down\" again, or, in other words, clicked.\n\nIf you have custom elements (e.g. a link) that must be visualized like a button, feel free to use these variables on them.\n\n<limel-example-button-shadows></limel-example-button-shadows>\n\n:::tip **Tip** Change interactive shadows smoothly\nIt's crucial that an interaction (like hovering or pressing) that changes a visual property of an element such as its depth, is done smoothly. In other words, a change of shadows should not happen instantly. It should rather be animated with a transition. So make sure you have specified a `transition` for the `box-shadow` property, as shown below:\n\n```scss\n.my-custom-button {\n    transition: box-shadow 0.2s ease, transform 0.1s ease-out;\n    box-shadow: var(--button-shadow-normal);\n    &:hover {\n        box-shadow: var(--button-shadow-hovered);\n    }\n    &:active {\n        box-shadow: var(--button-shadow-pressed);\n        transform: translate3d(0, 0.08rem, 0);\n    }\n}\n```\n\nAlso note how we use `transform` to make our buttons feel like they are being pushed down, when pressed by the user.\n:::\n\n### 2. Shadow variables for surfaces\n\nIn a digital user interface, there are many floating UI elements like cards, modals, menus, or popovers that can benefit from a shadow effect. Here is a list of the various CSS variables for shadows that Lime Elements offers:\n\n<limel-example-surface-shadows></limel-example-surface-shadows>\n\n### 3. Shadow variables for highlighting different states\n\n<limel-example-surface-shadows-states></limel-example-surface-shadows-states>\n\n:::tip\nTo give a color around the focused element, the `-focused` variables will use `--lime-primary-color` if it is defined. When it is not defined, they will default to `--color-teal-default`.\n:::\n\n---\n\n## When not to use shadows in UI design\n\nSometimes we may only be trying to use shadows to create a visually distinct section, to separate a part of the interface from other parts.\n\nIn theory, having visually distinct areas in the UI increases the ease and speed of finding components or information when users are quickly scanning pages. But instead of using shadows, this visual distinction is better to be done through other ways, such as simply using outlines, dividers, larger headings, or different background colors.\n\n:::warning\nWe want to reserve the visual power of shadows to indicate possibility of interaction, to signify a difference in hierarchy, or to indicate that an element in the UI is temporary.\n\nTherefore, we strongly discourage the use of shadows when the only purpose is to create a visually distinct section in the UI.\n\nIf this is your only intention, we recommend using a different background color, different font characteristics, or relying on a good layout design that uses headings, paddings and margins well.\n:::\n<limel-example-shadows-bad-usage></limel-example-shadows-bad-usage>\n\nSometimes, using the recommended techniques above does not suffice, when you want to visually emphasize a section of the UI and make it pop out. For such cases, we offer other variables which can be used as `box-shadow` on the element.\n\n<limel-example-surface-shadows-inflated></limel-example-surface-shadows-inflated>\n\n:::tip\nThe best visual expression with these variables is achieved when:\n\n-   the element has a sizable `border-radius`\n-   there is enough empty space around the element\n-   the element has a light grey as `background-color`, (preferably `var(--contrast-200)`, `var(--contrast-300)` or `var(--contrast-400)`)\n-   `background-color` of the surface behind the element is not too dark or too light (preferably `var(--contrast-400)`, `var(--contrast-500)` or `var(--contrast-600)`)\n-   the element's `background-color` is lighter than the surface behind it\n    :::\n\n:::warning\n\n-   Do not overuse this visual effect on the same screen.\n-   The element using this effect should not be too small, or the effect might make it look like a button.\n    :::\n"},{"dirPath":"src/design-guidelines/size","fileName":"size-rhythms.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/size/size-rhythms.md","data":{"path":"/DesignGuidelines/size-rhythms.md"},"content":"# Size rhythms\n\nWhen designing components and layouts, you will have to specify the size of many properties such as `padding`, `margin`, `gap`, `width`, `height`, and so forth.\n\nTo generate a consistent layout and visual expression, we only use sizes that are multiples of four (4 \\* x). For example 4, 8, 12, 16, 20, and so on.\n\nIt is very important to follow this convention, both when creating new components for Lime Elements, and when creating bigger components and layouts which use these components. When the entire interface is calculated based on the single core value of 4, elements of the UI will align auto-magically.\n\nFor instance, if you want to create a custom row of buttons (not directly using Lime Elements) with this sizing convention, its `height` and `line-height` can be 40 units (to vertically align the text inside the button), the `padding-left` and `padding-right` can be 12 units, and its `margin-left` and `margin-right` which set the distance to the next or previous buttons can be for example 4 or 2, or in this example 6.\n\nEven though 6 is not a multiple of 4, it sums up to a 12 units distance between two buttons in a row; and since 12 is a multiple of 4, the overall result will be in line with the 4x rhythm 👍\n\n<limel-example-size></limel-example-size>\n\n## REM or PX?\n\nWe only use `rem` units in our design system. `1rem` equals the font size set in the browser, and defaults to `16px` in most browsers. In such a system, multiples of 4px (our core size unit) can easily be calculated, as they increase sequentially by `0.25`.\n\n-   4 px = 0.25 rem\n-   8 px = 0.5 rem\n-   12 px = 0.75 rem\n-   16 px = 1 rem\n-   20 px = 1.25 rem\n-   24 px = 1.5 rem\n\nHowever, while designing a UI, it may be easier to think in pixels, as rem is more abstract. By using a custom SASS function like below, you can effortlessly leave the job of unit conversion to the computer.\n\n```css\n// first define this converter function in your SCSS …\n@function pxToRem($px) {\n    @return #{$px/16}rem;\n}\n\n// … and then use it to ease calculations\n.example {\n    width: pxToRem(4); // will be compiled to 0.25rem\n}\n```\n\n:::important\n**Always** write `1px`, not `0,0625rem`!\n\nAnything that should get rendered in `1px` on a screen (such as a border) should be written in pixels. It's very important not to write it in its rem equivalent (`0,0625rem`). This is because depending on the physical pixel density of the screen, a `0,0625rem` thick line might be rendered as a semi-transparent line, or, even worse, not be rendered at all.\n:::\n\n---\n\n## Exceptions in sizing rhythms\n\nThere are exceptions where we do not have to follow the above-mentioned sizing convention (multiples of 4). These exceptions are:\n\n-   Numbers `1` and `2` are allowed to use when defining some visual details such as borders.\n-   `font-size`: how fonts are rendered depend on the typography and design of the font itself. Fonts do not follow the same logic of simple geometric shapes of the UI. Therefore, using incremental rhythm based on 4 for font sizes (e.g. for H1, H2, H3, etc...) may generate huge font sizes which won't be usable. Also other numbers such as 14 or 13 may appear more appealing for a balanced and easily readable text, compared to 16, or 12.\n-   `border-radius`: when it comes to border radius, multiples of 4 may render too large or too small. Pick the value that best helps the visual expression you want to achieve, even if it's not a multiple of 4.\n-   `box-shadow`, `drop-shadow`, `blur`: How far a shadow reaches until it's faded out, or how blurry something looks should also be flexible depending on the visual expression that you want to achieve.\n\n---\n\n## Be a believer, but not a fanatic!\n\nThis is about having a consistent rhythm in the UI, not about religiously following hard guidelines. In some cases, you will find yourself in situations in which some small detail in the UI is not following the 4-units rhythm, while everything else does.\n\nLet's look at the example below:\n\n<limel-example-size-edge-case></limel-example-size-edge-case>\n\nHere you see that the distance between the picture and top, bottom, and left of the rows is 6 units. However, the `line-height` or `height` of the picture itself (and other details) are multiples of 4. Now this is a made up example for illustrative purposes, but cases like this may happen in real life when designing components and layouts. For example you may choose to use 6 units for distance on a certain type of screen to achieve a higher visual density.\n\nSo, if you can justify that 6 works fine for your design, and the rest of your structure is following the 4x rhythm; then go for it! In this example, the accumulated height of the row (which is more decisive for the general rhythm) will be 24 (4 \\* 6). So you don't \"have to\" change 6 to 4 or 8 so that all numbers become multiplies of 4.\n\nThe only thing you should be mindful of is whether you are getting too many of these exceptions within the same component. In that case, something is wrong in your design.\n"},{"dirPath":"src/design-guidelines/action-buttons","fileName":"action-buttons.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/action-buttons/action-buttons.md","data":{"path":"/DesignGuidelines/action-buttons.md"},"content":"# Action buttons\n\nAction buttons are typically used in dialog footers, or in headers. These buttons indicate to users that they must deliberately choose one action from the set of actions presented, for the system to continue or finish a task.\n\nAction buttons must be presented together in one place, in a way that feels natural within the UI. When several action buttons are presented, their actions are often contradictory; for example **Discard** versus **Save**.\n\nWhen it comes to details such as placement of action buttons, choice of labels, and adding meaningful graphical details, it's important to follow a few design conventions, explained in this guide.\n\n<br/>\n<br/>\n\n---\n\n## Placement\n\nOn a user interface which is designed for a left-to-right script like English, action buttons of a footer (for example in a dialog) are typically located at the bottom-right corner.\n\nWhen there are two buttons placed together, the button that represents a positive action is always on the right side, and the one which presents a negative one is on the left.\n\nA positive action could be an action that:\n\n- takes the user forwards or to next step; e.g. _Next_, _Skip_, or _Continue_\n- is primary, and most probably the one that users is going to select, e.g. _Save_, _Update_, _Send_ (or even _Delete_ which is a negative notion, but can be an expected or \"primary\" action, depending on the context, like in a confirm deletion dialog)\n\nA negative action could be an action that:\n\n- takes the user back, dismisses a dialog, or cancels an ongoing process; e.g. _Back_, _Cancel_, _Discard_\n- is secondary, which means it is not likely that users clicks it in that context\n\n<limel-example-action-buttons-placement></limel-example-action-buttons-placement>\n\n:::tip\nIn [`limel-dialog`](#/components/limel-dialog), there is a `slot` called `button`, which is a \"flexbox\". It automatically aligns its child elements to the right side. All you need to do is add `slot=\"button\"` to the elements you wish to appear in the slot.\n\n```tsx\n<limel-button label=\"OK\" slot=\"button\" />\n```\n\n:::\n\n<br/>\n\n---\n\n## Primary versus secondary actions\n\nAs you know, `limel-button` can have a `primary={true}` property, which makes it stand out by getting the primary color of your theme.\n\nOne of the action buttons is normally the primary action. That is the action that you expect the users to take, or you that want them to take.\n\n<limel-example-action-buttons-primary-secondary></limel-example-action-buttons-primary-secondary>\n\nA primary button has a stronger visual weight, and appearing more distinct makes it easier for users to chose the correct, safe, or promoted action.\n\nYou can use this visual distinction to promote the action that is safer, even if that action may not be the primary action. You can do so because sometimes:\n\n- it can be hard to identify the intention of the user\n- the action may be irreversible or risky\n\n<limel-example-action-buttons-primary-secondary-reversed></limel-example-action-buttons-primary-secondary-reversed>\n\n<br/>\n\n---\n\n## Choosing good labels\n\nLabels you use should make sense together. You are usually dealing with contradictory actions. Therefore, what you put on each button should also reflect the contradiction.\n\n<limel-example-action-buttons-choosing-labels></limel-example-action-buttons-choosing-labels>\n\nLabels must make each option as clear as possible. An explicit label give users more confidence in selecting the correct action.\n\n:::note\n\n- Use a label that explains what the button does, rather than a generic label (such as “OK”, or \"Yes\").\n- Using verbs as labels instead of nouns is better, because a verb describes the action better.\n  :::\n\n<limel-example-action-buttons-choosing-explicit-labels></limel-example-action-buttons-choosing-explicit-labels>\n\n<br/>\n\n---\n\n## Providing a third alternative action\n\nSometimes having two actions is not enough for the user to make a decision with peace of mind. A common scenario is when a user has unsaved changes and tries to navigate away from the view. In such cases, typically a prompt maybe be shown to alert the user and give them a few logical choices.\n\nThis prompt can offer two main actions of \"Save\" and \"Discard\" (which means \"save & continue navigating away from this page\" and \"discard & continue navigating away from this page\"), along with a third choice that allows users to cancel (and go back / not continue navigating away!).\n\n<limel-example-action-buttons-third-alternative></limel-example-action-buttons-third-alternative>\n\nThe action that takes users one step back in the process is intentionally placed on the left side. This makes it easier for users to mentally separate the other two. Additionally, the placement makes it easier to connect the action to the notion of going back. (For left-to-right scripts. Left and right will of course have reversed meaning in right-to-left script, which is precisely why the CSS properties for these things use values like `flex-start` and `flex-end`, rather than `left` and `right`. See below.)\n\nIf buttons are placed in a full width flex container that has `justify-content: flex-end;`, these styles will align the targeted button to left side of the flex box. See \"Example with three action buttons\" in the [documentation for `limel-dialog`](#/component/limel-dialog/).\n\n```scss\n.back-button {\n    justify-self: flex-start;\n    margin-right: auto;\n}\n```\n\n---\n\n## Adding more meaning with colors and icons\n\nTo make it easer for users to understand the message and make a decision faster, you can use icons and colors on the buttons.\n\nLearn more about [usage of colors and color conventions in the UI](#/DesignGuidelines/color-system.md/), and [how to color limel-buttons](#/component/limel-button/).\n\n<limel-example-action-buttons-icon-color></limel-example-action-buttons-icon-color>\n\n:::note\nIt might be tempting to use colors on action buttons to make the user interface more cheerful. But using colors in a user interface must follow certain UI design conventions, as colors convey meaning. Learn more about [usage of colors and color conventions in the UI](#/DesignGuidelines/color-system.md/).\n:::\n\n<limel-example-action-buttons-primary-secondary-reversed-colors></limel-example-action-buttons-primary-secondary-reversed-colors>\n\n:::note\nIf an action is not irreversible or too risky, the design does not have to put a lot of visual emphasis on the secondary action, by means of icons and colors. In such cases, highlighting the primary action and making it more recognizable is more relevant, and more motivated.\n:::\n\n<limel-example-action-buttons-colors-do-dont></limel-example-action-buttons-colors-do-dont>\n"},{"dirPath":"src/design-guidelines/declutter","fileName":"declutter.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/declutter/declutter.md","data":{"path":"/DesignGuidelines/declutter.md"},"content":"# Reducing UI clutter and cognitive load\n\n## The philosophy\n**Minimalism -** From our point of view, a great product or tool is essentially one that has a minimalistic user interface. This is not limited to digital products, but it becomes extra important for digital products, as they are often packed with tools, features, and functionalities.\n\nWith regard to both aesthetics and functionality, a minimalist product should be reduced to its necessary elements. This can be achieved by using fewer design elements, less ornamental elements in its visual design, fewer options and features, and less occupied screen space; as well as carefully breaking the interaction flows or functionalities into distinct and meaningful parts.\n\nThus, when designing a product, we have to keep removing elements and questioning their existence in the UI. We should always keep asking questions such as: Is this really needed? Does this really have to be there? Why? What's the trade-off if it's removed? Do we lose functionality? Do we lose usability? And so forth.\n> Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\n>\n> – Antoine de Saint-Exupéry\n\n## The science\n**Cognitive load –** A user interface with too many elements requires more processing from users' brains. When fewer things on the screen try to attract the user's attention, it becomes easier for the user to \"consume\" the UI.\n\nThis is what we mean when we use the term \"cognitive load\" and talk about \"reducing cognitive load\". In the end, our goal is for the user to spend their mental energy on the problem at hand, not at the tool they are using to solve it (our UI).\n*****\n## Examples\n\n### Input fields\nWhenever possible, we take care of these details in our components. For instance, in the `limel-input` components, the \"Helper text\" and \"Character counters\" get displayed only when the field is `focused`, meaning when the user is typing in the input box. Before the user interacts with the component, displaying such details is not helpful and only adds to the clutter on the screen.\n\n<!-- <limel-example-input-field-text></limel-example-input-field-text> -->\n<!--\nNOTE: this example below is almost a duplicate of the example above.\nBecause here we need the example to have a white background due to our\nlack of support for dark mode. When we have proper support\nfor dark mode in lime elements, this example and its CSS can be deleted.\nInstead of this 👇, we can use that 👆 again. / Kia\n-->\n<limel-example-input-field-text-decluttering-guidelines></limel-example-input-field-text-decluttering-guidelines>\n\nHowever, sometimes such design decisions depend on the context and it is only you who are designing the UI that can judge. Examples of these follow below.\n\n### Tooltips\nTooltips are also helpful components in creating a clean UI, by hiding away supplemental\nbut disposable pieces of information.\n\nUsers may need such information only once (usually for the first time they\nuse a UI) or occasionally. Therefore instead of constantly showing them\nin the user interface, a tooltip can be used to hide them away and display them once needed.\n<limel-example-tooltip-declutter></limel-example-tooltip-declutter>\n\n### Buttons\nButtons are particularly strong elements in the UI, since they are meant to perform important actions. Thus, an effective way of reducing clutter is to hide buttons that aren't useful at the moment. This most commonly applies to disabled buttons.\n\nDisabled buttons can convey important information, but when they don't, they should be hidden. Here are some examples:\n\n1. **When there are invalid fields, or empty required fields**\n   We can anticipate that the user might try to save their changes, and showing a disabled Save button is part of telling the user that there is something they need to do before saving is possible. This should be combined with other clear visual hints on what to do, like highlighting the invalid field and displaying a validation error message.\n2. **When the user has made no changes**\n   This example can be divided into two groups:\n   - *The user is in a distinct \"flow\" with discrete steps, and is prevented from continuing to the next step.* Common examples are so called \"wizards\". In this case, a disabled Save or Continue button should be kept visible, for the same reason as in example 1.\n   - *Making and saving changes is just one of the possible \"things to do\" on the current page.* Examples include forms that are used both for displaying and changing information (common for configuration or settings pages), or a feed, with an input for adding new posts. In this case, a disabled Save button isn't useful. We don't even know that the user has any intention of using it. Once the user updates the information, or starts writing in the input field, it's time to display the Save button, along with any other controls that might have also been hidden.\n\n:::note\nKeep in mind that a SAVE button can be disabled but visible, to tell the\nusers that requirements are not met, or there are errors.\n\nSuch cases should be accompanied with other clear visual hints where the\nerrors or progress-blockers are located in the UI.\n:::\n\nSee how Lime Elements can automatically hide buttons when they are not needed, in the \"Reduce Presence\" example for [limel-button](#/component/limel-button/).\n"},{"dirPath":"src/design-guidelines/disabled-hidden","fileName":"disabled-hidden.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/disabled-hidden/disabled-hidden.md","data":{"path":"/DesignGuidelines/disabled-hidden.md"},"content":"# Hiding or Disabling an interactive element in User Interfaces\n\n<limel-example-button-disabled-vs-hidden></limel-example-button-disabled-vs-hidden>\n"},{"dirPath":"src/design-guidelines/disabled-vs-readonly","fileName":"disabled-vs-readonly.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/disabled-vs-readonly/disabled-vs-readonly.md","data":{"path":"/DesignGuidelines/disabled-vs-readonly.md"},"content":"# Disabled vs. Readonly\n\nYou may have noticed the our input type components such as Checkbox, Input field, Select, and Slider, offer a boolean property called `readonly`.\n\nReadonly may sound like Disabled at first. But why do we offer these two different states for such component?\n\nIn the context of a component library like Lime Elements, `readonly` may not be regarded as a standard attribute on input elements such as checkboxes,\ntoggle switches or input fields.\n\nThis special state is something that we introduced in our components, because of the internal complexities of Lime CRM and the way some data is presented to different end-users in different ways, for example based on their access rights, user roles, and permissions. In the CRM app, a group of end users may not have permission to check a box or toggle a switch, but they should still be able to see what value it holds.\n\nHowever, the `readonly` state may be unique to us, and many other products which are built using Lime Elements can benefit from it too. So, let's explore the difference between `disabled` and `readonly` states.\n\n-   A form field is normally there to receive inputs from users. However, when a form field is set to `readonly`, it does not function as the original field was intended anymore.\n\n    The `readonly` state is set solely for the purpose of \"data visualization\" for the end-users. This is why we do not render the input elements in `readonly` mode, as if they could be interacted with.\n\n-   On the other hand, the `disabled` is a standard state for input elements. When an input component such as a checkbox or input field is `disabled` we maintain its original look and feel, but add some visual cues to indicate that the component is _currently_ or _temporarily_ disabled for some reason, and cannot be interacted with right now.\n\n    While interacting with the user interface, The end-users can then make a hypothesis that if they actively change something, or if they try to meet the requirements (for instance by answering a required question in a form), the disabled field may become enabled.\n\nIn short…\n\n:::important\n\n-   **`disabled` implies:** the field is currently non-interactive\n    but can become \"enabled\" under certain conditions.\n    For instance, a disabled checkbox might become enabled if the user\n    selects a specific option from a dropdown menu in the UI.\n-   **`readonly` implies:** the field is non-editable and will remain\n    so irrespective of user actions. A readonly field serves as a\n    non-interactive element, solely for illustrating the data.\n\n:::\n"},{"dirPath":"src/design-guidelines/boolean","fileName":"switch-vs-checkbox.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/switch-vs-checkbox.md","data":{"path":"/DesignGuidelines/switch-vs-checkbox.md"},"content":"# Switch vs. Checkbox\n\nA checkbox and a switch both control binary options like On/Off\nor Enable/Disable. They are very similar in that sense, and many\ndevelopers use them interchangeably.\n\nHowever, there is a difference between these two components when\nit comes to usability and interaction design!\n\nThe rule of thumb is to use a <b>Switch</b>, whenever toggling\nthe setting is instantly applied and does not required further\nexplicit actions from the user. And use a <b>Checkbox</b> when\nthe user has to confirm their choices for them to take effect.\n\n<limel-example-switch-vs-checkbox />\n"},{"dirPath":"src/design-guidelines/boolean","fileName":"labeling-boolean-fields.md","filePath":"/home/runner/work/lime-elements/lime-elements/src/design-guidelines/boolean/labeling-boolean-fields.md","data":{"path":"/DesignGuidelines/labeling-boolean-fields.md"},"content":"# Labeling boolean fields\n\nBoolean fields like [Checkbox](#/components/limel-checkbox/) and [Switch](#/components/limel-switch/) are used in different contexts. For example, they could be used in\n\n1. _lists_ or _groups_, such as in a \"Settings page\",\n2. a form, such as a \"Registration form\" or a survey,\n3. a \"Task list\" or \"Checklist\",\n4. or in `readonly` mode in a UI, to dynamically visualize some data which is being retrieved from a database.\n\nThe context in which these two boolean fields are used has a decisive impact on how you should formulate the their labels.\n\n## 1. In Settings Pages\n\nWhen a boolean input field is used in the context of a \"Settings page\" or \"Preferences page\", the label would simply reflect the setting or the feature which is enabled or disabled by the boolean field, and it is normally a noun.\n\nCheck out [Switch vs. Checkbox](#/DesignGuidelines/switch-vs-checkbox.md/) for examples and best practices.\n\n## 2. In Forms\n\nBoolean questions, also known as Yes/No questions, are frequently used in forms or questionnaires. These questions are typically formatted in a descriptive manner, followed by a pair of opposing answers, usually represented as radio buttons. For example:\n\n<limel-example-boolean-radio-buttons><limel-example-boolean-radio-buttons />\n\nAlternatively, a single checkbox can also be used to represent a boolean question. Unlike a group of radio buttons, a checkbox provides the respondent with the flexibility to deselect their answer or leave it unanswered if the question is not mandatory. For example:\n\n<limel-example-boolean-checkboxes><limel-example-boolean-checkboxes />\n\nIn such scenarios, it's crucial to ensure that the label accurately describes the context in the form of a phrase or sentence. Additionally, using a helper text can provide further clarification about the function of the checkbox.\n\n## 3. In Task lists or Checklists\n\nBoolean fields are frequently utilized in user interface design, particularly for creating checklists or task lists. These interfaces often take the form of wizards or multi-step processes, requiring users to check off tasks or items as they progress.\n\nConsider the scenario of field workers, auditors, or inspectors who are on assignment. They need to complete a form to confirm that all checks were performed in accordance with a specific protocol. For example:\n\n<limel-example-audition-form><limel-example-audition-form />\n\nHowever, there is another side of designing such user interfaces. These forms could have two groups of users. One group is the users who actively fill-in the information, and the second group is the one who sees the results or reports from the checklist.\n\nThe data could be presented in a `readonly` format to the second group, and here is when the choice of proper labels really matter. Read more about this in the next section…\n\n## 4. In Readonly Mode\n\nIn `readonly` mode, the data is presented to users. So the boolean field is only visualizing the data (read more on [disabled vs. Readonly](#/DesignGuidelines/disabled-vs-readonly.md/)). however, the default visual design of the `readonly` mode does not always clearly communicate the meaning of the presented data to the end users and can therefore result in confusion.\n\nIn short, the reason end-users become confused is that it is often not enough to keep the same label for both `true` and `false` states,\nand only rely on toggling the color or the shapes and visual motifs, to communicate what the field means.\n\nInstead, we need to use different labels to describe the state, and also get some additional help from icons and colors to clarify further if needed.\n\nThe subtle details of icons and colors significantly impact user perception. However, among these details, the field label stands out as a crucial element that defines the data's meaning for end users.\n\nIn the example below, some fields are `true` and some are `false`. Notice how much better the elaborated labels are in this example, and how everything makes more sense for a reader when the fields are `readonly`. They are still not perfect, but certainly clearer than the previous example.\n<limel-example-audition-form-readonly><limel-example-audition-form-readonly />\n\nNext example shows how the additional readonly-related props of [Checkbox](#/components/limel-checkbox/) and [Switch](#/components/limel-switch/) (`value`, `text` and `icon` from the `Label` interface) can be used to enhance the perception and experience of the users.\n\n<limel-example-readonly-props><limel-example-readonly-props/>\n\n---\n\n### Best practices for labeling boolean fields for checklists and readonly mode\n\nThe name or label of a boolean field should be as descriptive as possible. But as described above, what \"descriptive\" means depends on the context. Here are some best practices, for usage in the context of checklists and task lists:\n\n1. **Avoid using nouns:** Using single nouns would work fine for a settings page, when the boolean turns a feature On or Off. But in a checklist or when the boolean fields are used for visualizing data (in readonly mode), it is better to avoid nouns as labels. Phrases or sentences would be more descriptive.\n1. **Use Positive Phrasing:** Just like the convention of naming boolean variables in coding, the name of the boolean fields should be positively phrased. For example in code, you would name a boolean prop like this: `isActive` or `isEnabled` (which are easier for a human brain to understand than `isNotActive` or `isDisabled`). In a UI design, it is even more important to follow this practice.\n1. **Avoid Negatives:** Avoid negative words in your boolean variables. For example, \"Is not active\" or \"Is inactive\" is confusing. It's better to use \"Is active\".\n1. **Be Specific:** The name should clearly indicate what the variable represents. For example, \"Subscribed for newsletters\" is way better than \"Newsletter\".\n1. **Use Prefixes:** It's common to prefix boolean variables with **is**, **has**, **can**, or **should**. This makes it clear that the variable is a boolean and what it represents. For example, \"Has dept\", \"Has permission\".\n1. **Consider the Context:** The name should make sense in the context where it's used. For example, if you have collapsible section called _Coworker_, a boolean name of \"Is active\" does not makes sense in that section. It is better to name the field as \"Is still working\". While if the collapsible section is called _Subscription_, then \"Is active\" makes sense.\n1. **For `readonly` mode, consider providing two labels:** Consider using `readonlyLabels` to make it crystal clear to the reader what the data is about.\n"}],"types":[{"type":"interface","name":"ActionBarItemOnlyIcon","typeParams":[{"name":"T"}],"docs":"Action bar item that only displays an icon.","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"If specified, will display a notification badge on the buttons in the dock.","docsTags":[],"optional":true},{"name":"commandText","type":"string","docs":"The additional supporting text is used for shortcut commands and displayed in the menu item.","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the menu item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"","docsTags":[],"optional":false},{"name":"iconColor","type":"Color","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"iconOnly","type":"true","docs":"","docsTags":[],"optional":false},{"name":"items","type":"Array<MenuItem<T> | ListSeparator> | MenuLoader","docs":"A way of defining a sub-menu for an item.\nEither set it to an array of `MenuItem`:s or use lazy loading by setting\nit to a function of type `MenuLoader`.\nIf `myMenuItem.items` is undefined or null, `myMenuItem` will be\nconsidered an item without a sub-menu.","docsTags":[],"optional":true},{"name":"parentItem","type":"MenuItem","docs":":::warning Internal Use Only\nThis property is for internal use only. We need it for now, but want to\nfind a better implementation of the functionality it currently enables.\nIf and when we do so, this property will be removed without prior\nnotice. If you use it, your code _will_ break in the future.\n:::","docsTags":[{"name":"internal","text":""}],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the menu item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the menu item should be selected.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the menu item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the menu item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar.types.ts"]},{"type":"interface","name":"ActionBarItemWithLabel","typeParams":[{"name":"T"}],"docs":"Action bar item that displays an icon and a label.","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"If specified, will display a notification badge on the buttons in the dock.","docsTags":[],"optional":true},{"name":"commandText","type":"string","docs":"The additional supporting text is used for shortcut commands and displayed in the menu item.","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the menu item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"Color","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"iconOnly","type":"false","docs":"","docsTags":[],"optional":true},{"name":"items","type":"Array<MenuItem<T> | ListSeparator> | MenuLoader","docs":"A way of defining a sub-menu for an item.\nEither set it to an array of `MenuItem`:s or use lazy loading by setting\nit to a function of type `MenuLoader`.\nIf `myMenuItem.items` is undefined or null, `myMenuItem` will be\nconsidered an item without a sub-menu.","docsTags":[],"optional":true},{"name":"parentItem","type":"MenuItem","docs":":::warning Internal Use Only\nThis property is for internal use only. We need it for now, but want to\nfind a better implementation of the functionality it currently enables.\nIf and when we do so, this property will be removed without prior\nnotice. If you use it, your code _will_ break in the future.\n:::","docsTags":[{"name":"internal","text":""}],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the menu item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the menu item should be selected.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the menu item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the menu item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar.types.ts"]},{"type":"alias","name":"ActionBarItem","docs":"Renders the button in the action bar without their labels.\nDoes not affect the items that are overflown into the overflow menu.","docsTags":[],"alias":"ActionBarItemOnlyIcon<T> | ActionBarItemWithLabel<T>","sources":["/home/runner/work/lime-elements/lime-elements/src/components/action-bar/action-bar.types.ts"]},{"type":"interface","name":"BreadcrumbsItem","typeParams":[],"docs":"Breadcrumbs component props.","docsTags":[],"props":[{"name":"icon","type":"string | Omit<Icon, \"backgroundColor\">","docs":"Icon of the step.","docsTags":[],"optional":true},{"name":"link","type":"Omit<Link, \"target\" | \"text\">","docs":"If supplied, the breadcrumbs steps will be a clickable links.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"label displayed on the step.","docsTags":[],"optional":false},{"name":"type","type":"\"icon-only\"","docs":"If set to `icon-only`, the `text` will be rendered as a tooltip\nand the item will only display the defined `icon`.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/breadcrumbs/breadcrumbs.types.ts"]},{"type":"interface","name":"Button","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"The label displayed in the badge","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use","docsTags":[],"optional":true},{"name":"id","type":"string","docs":"ID of the button. Must be unique.","docsTags":[],"optional":false},{"name":"selected","type":"boolean","docs":"True if the button should be selected. only first button will be selected.","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"Text or label title in the button.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/button/button.types.ts"]},{"type":"alias","name":"CalloutType","docs":"Each of the supported callout types has a distinct color and icon.\nThe colors can be changed using the provided CSS variables.\n- `note`: You might read this, you might not.\n- `important`: You should read this.\n- `tip`: You want to read this.\n- `caution`: I hope you read this.\n- `warning`: You need to read this.","docsTags":[],"alias":"\"note\" | \"important\" | \"tip\" | \"caution\" | \"warning\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/callout/callout.types.ts"]},{"type":"interface","name":"ChartItem","typeParams":[{"name":"T"}],"docs":"Chart component props.","docsTags":[{"name":"beta","text":""}],"props":[{"name":"clickable","type":"boolean","docs":"When set to `true`, the item will become clickable,\nwhich provides visual and accessible feedback when hovered, or focused,\nand also results in emitting an event when clicked.","docsTags":[],"optional":true},{"name":"color","type":"Color","docs":"Color of the item in the chart. Defaults to a shade of grey.\nIt is recommended to use distinct colors for each item,\nand make sure there is enough contrast between colors of adjacent items.","docsTags":[],"optional":true},{"name":"formattedValue","type":"string","docs":"Formatted value of the item","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Label displayed for the item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the item.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/chart/chart.types.ts"]},{"type":"interface","name":"Chip","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"badge","type":"number","docs":"The value of the badge.","docsTags":[],"optional":true},{"name":"href","type":"string","docs":"If supplied, the chip will render a link, using the supplied href.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Name of the icon to use. Not valid for `filter`.","docsTags":[],"optional":true},{"name":"iconBackgroundColor","type":"Color","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   backgroundColor: string,\n},\n```"}],"optional":true},{"name":"iconFillColor","type":"Color","docs":"Color of the icon. Overrides `--icon-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"iconTitle","type":"string","docs":"`title` attribute of the icon","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   title: string,\n},\n```"}],"optional":true},{"name":"id","type":"number | string","docs":"ID of the chip. Must be unique.","docsTags":[],"optional":false},{"name":"image","type":"Image","docs":"A picture to be displayed instead of the icon on the chip.","docsTags":[],"optional":true},{"name":"loading","type":"boolean","docs":"Set to `true` to put the chip in the `loading` state, and render an\nindeterminate progress indicator inside the chip.","docsTags":[],"optional":true},{"name":"menuItems","type":"Array<MenuItem | ListSeparator>","docs":"List of the items to display as in a menu, on the chip.","docsTags":[],"optional":true},{"name":"removable","type":"boolean","docs":"Whether the chip should be removable. Not valid for `choice`.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"Whether the chip is selected. Only valid for `choice` and `filter`.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display inside the chip.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the chip.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/chip-set/chip.types.ts"]},{"type":"alias","name":"ChipType","docs":"This type is used to determine the visual style and behavior of a Chip component.","docsTags":[{"name":"beta","text":""}],"alias":"\"default\" | \"filter\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/chip-set/chip.types.ts"]},{"type":"alias","name":"CircularProgressSize","docs":"","docsTags":[],"alias":"\"x-small\" | \"small\" | \"medium\" | \"large\" | \"x-large\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/circular-progress/circular-progress.types.ts"]},{"type":"alias","name":"ColorScheme","docs":"","docsTags":[],"alias":"\"dark\" | \"light\" | \"auto\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/code-editor/code-editor.types.ts"]},{"type":"alias","name":"Language","docs":"","docsTags":[],"alias":"\"javascript\" | \"jinja2\" | \"json\" | \"typescript\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/code-editor/code-editor.types.ts"]},{"type":"interface","name":"Action","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"disabled","type":"boolean","docs":"","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"","docsTags":[],"optional":true},{"name":"id","type":"string","docs":"","docsTags":[],"optional":false},{"name":"label","type":"string","docs":"","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/collapsible-section/action.ts"]},{"type":"alias","name":"DateType","docs":"","docsTags":[],"alias":"\"datetime\" | \"date\" | \"time\" | \"week\" | \"month\" | \"quarter\" | \"year\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/date-picker/date.types.ts"]},{"type":"alias","name":"Languages","docs":"","docsTags":[],"alias":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"no\" | \"nl\" | \"sv\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/date-picker/date.types.ts"]},{"type":"interface","name":"ClosingActions","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"escapeKey","type":"boolean","docs":"","docsTags":[],"optional":false},{"name":"scrimClick","type":"boolean","docs":"","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dialog/dialog.types.ts"]},{"type":"interface","name":"DialogHeading","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"icon","type":"string | Icon","docs":"","docsTags":[],"optional":false},{"name":"subtitle","type":"string","docs":"","docsTags":[],"optional":true},{"name":"supportingText","type":"string","docs":"","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dialog/dialog.types.ts"]},{"type":"interface","name":"DockItem","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"If specified, will display a notification badge on the buttons in the dock.","docsTags":[],"optional":true},{"name":"dockMenu","type":"DockMenu","docs":"Used to specify a custom component to render as a menu for the dock item.","docsTags":[],"optional":true},{"name":"helperLabel","type":"string","docs":"Additional helper text for the dock item.\nExample usage can be a keyboard shortcut to activate the dock item.","docsTags":[],"optional":true},{"name":"icon","type":"string","docs":"Name of the icon to use.","docsTags":[],"optional":false},{"name":"id","type":"string","docs":"A non-changing value to uniquely identify each item.","docsTags":[],"optional":false},{"name":"label","type":"string","docs":"Text to display for the item.","docsTags":[],"optional":false},{"name":"selected","type":"boolean","docs":"Whether the dock item should indicate it is selected.\nThese dock items normally take the user to a top-level location within\nthe navigation tree; for example \"Home\", \"Search\" or \"My Account\".\nSet `selected` to `true`, when:\n- the user interface is showing the same top-level location as the dock\nitem is pointing at, or\n- the user interface is showing a page which is a sub-location of the\ntop-level location. For example, when user is at\n_My Account ➡ Notification Settings_, the dock item of _My Account_\nshould have the `selected` state.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dock/dock.types.ts"]},{"type":"interface","name":"DockMenu","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"componentName","type":"string","docs":"The tag name of a custom component to be displayed in a popover when\nclicking on the dock item this menu belongs to.","docsTags":[],"optional":false},{"name":"menuOpen","type":"boolean","docs":"Whether the menu is open.","docsTags":[],"optional":true},{"name":"props","type":"object","docs":"Any properties that should be set on the custom component.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dock/dock.types.ts"]},{"type":"interface","name":"Label","typeParams":[{"name":"T"}],"docs":"","docsTags":[{"name":"beta","text":""}],"props":[{"name":"icon","type":"string | Icon","docs":"Icon to display when the label is active","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display when the label is active","docsTags":[],"optional":true},{"name":"value","type":"T","docs":"The value of the label","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/label.types.ts"]},{"type":"alias","name":"LabelValue","docs":"","docsTags":[],"alias":"string | number | boolean | null | undefined","sources":["/home/runner/work/lime-elements/lime-elements/src/components/dynamic-label/label.types.ts"]},{"type":"alias","name":"FileType","docs":"","docsTags":[],"alias":"\"pdf\" | \"image\" | \"video\" | \"audio\" | \"text\" | \"office\" | \"unknown\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/file-viewer.types.ts"]},{"type":"alias","name":"OfficeViewer","docs":"","docsTags":[],"alias":"\"microsoft-office\" | \"google-drive\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/file-viewer/file-viewer.types.ts"]},{"type":"alias","name":"FlexContainerAlign","docs":"","docsTags":[],"alias":"\"start\" | \"end\" | \"center\" | \"stretch\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/flex-container/flex-container.types.ts"]},{"type":"alias","name":"FlexContainerDirection","docs":"","docsTags":[],"alias":"\"horizontal\" | \"vertical\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/flex-container/flex-container.types.ts"]},{"type":"alias","name":"FlexContainerJustify","docs":"","docsTags":[],"alias":"\"start\" | \"end\" | \"center\" | \"space-between\" | \"space-around\" | \"space-evenly\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/flex-container/flex-container.types.ts"]},{"type":"interface","name":"JSONSchema7","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"id","type":"string","docs":"Unique identifier for the schema","docsTags":[{"name":"internal","text":""}],"optional":true},{"name":"lime","type":"Omit<LimeSchemaOptions, \"layout\"> & object","docs":"Lime elements specific options that can be specified in a schema","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"enum","name":"FormLayoutType","docs":"Represents the layout types for a form.","docsTags":[],"members":[{"name":"Default","docs":"The default layout","docsTags":[],"value":"\"default\""},{"name":"Grid","docs":"Render the form fields using a responsive grid layout","docsTags":[],"value":"\"grid\""},{"name":"Row","docs":"Render the form fields in full-width rows.\nEach row can have a leading `icon`, and a field.\n`title` and `description` provided by the schema will be placed\non the row itself, and not on the field.\nThis layout is good for creating UIs for user settings pages.","docsTags":[],"value":"\"row\""}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormComponent","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"change","type":"EventEmitter<T>","docs":"The event to emit when the value of the current property has changed","docsTags":[],"optional":false},{"name":"disabled","type":"boolean","docs":"Whether or not the current property is disabled","docsTags":[],"optional":true},{"name":"formInfo","type":"FormInfo","docs":"Additional contextual information about the form","docsTags":[],"optional":true},{"name":"helperText","type":"string","docs":"The helper text for the current property","docsTags":[],"optional":true},{"name":"label","type":"string","docs":"The label of the current property","docsTags":[],"optional":true},{"name":"readonly","type":"boolean","docs":"Whether or not the current property is readonly","docsTags":[],"optional":true},{"name":"required","type":"boolean","docs":"Whether or not the current property is required","docsTags":[],"optional":true},{"name":"value","type":"T","docs":"The value of the current property","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormComponentOptions","typeParams":[],"docs":"Options for a component to be rendered inside a form","docsTags":[],"props":[{"name":"name","type":"string","docs":"Name of the component","docsTags":[],"optional":true},{"name":"props","type":"Record<string, any>","docs":"Extra properties to give the component in addition to the properties\nspecified on the `FormComponent` interface","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormError","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"message","type":"string","docs":"String describing the error","docsTags":[],"optional":false},{"name":"name","type":"string","docs":"Name of the error","docsTags":[],"optional":false},{"name":"params","type":"unknown","docs":"Params of the error","docsTags":[],"optional":true},{"name":"property","type":"string","docs":"Name of the invalid property","docsTags":[],"optional":false},{"name":"schemaPath","type":"string","docs":"Path to the property within the schema","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormInfo","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"errorSchema","type":"object","docs":"A tree of errors for this property and its children","docsTags":[],"optional":true},{"name":"name","type":"string","docs":"The name of the current property","docsTags":[],"optional":true},{"name":"rootSchema","type":"FormSchema","docs":"The schema of the whole form","docsTags":[],"optional":true},{"name":"rootValue","type":"any","docs":"The value of the whole form","docsTags":[],"optional":true},{"name":"schema","type":"FormSchema","docs":"The schema of the current property","docsTags":[],"optional":true},{"name":"schemaPath","type":"string[]","docs":"Path to the property within the schema","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormLayoutOptions","typeParams":[{"name":"T"}],"docs":"","docsTags":[],"props":[{"name":"type","type":"T","docs":"The type of layout to use","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"FormSchema","typeParams":[{"name":"T"}],"docs":"Represents the JSON schema with Lime specific options","docsTags":[],"props":[{"name":"$comment","type":"string | undefined","docs":"","docsTags":[],"optional":true},{"name":"$defs","type":"Record<string, FormSchema>","docs":"The \"$defs\" keywords provides a standardized location for\nschema authors to inline re-usable JSON Schemas into a more general\nschema.  The keyword does not directly affect the validation result.\nThis keyword's value MUST be an object.  Each member value of this\nobject MUST be a valid JSON Schema.\n\nAs an example, here is a schema describing an array of positive\nintegers, where the positive integer constraint is a subschema in\n\"definitions\":\n```\n{\n    \"type\": \"array\",\n    \"items\": { \"$ref\": \"#/definitions/positiveInteger\" },\n    \"definitions\": {\n        \"positiveInteger\": {\n            \"type\": \"integer\",\n            \"exclusiveMinimum\": 0\n        }\n    }\n}\n```\n\n$defs is the newer keyword introduced in the JSON Schema Draft 2019-09, while definitions is from the older drafts.\n\nThe main difference is that definitions is no longer an official keyword in the latest JSON Schema specification (Draft 2019-09 and later),\nbut it is still widely supported for backward compatibility.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-9"}],"optional":true},{"name":"$id","type":"string | undefined","docs":"","docsTags":[],"optional":true},{"name":"$ref","type":"string | undefined","docs":"","docsTags":[],"optional":true},{"name":"$schema","type":"JSONSchema7Version | undefined","docs":"","docsTags":[],"optional":true},{"name":"additionalItems","type":"FormSchemaArrayItem<T>","docs":"The value of \"items\" MUST be either a valid JSON Schema or an array\nof valid JSON Schemas.\nThis keyword determines how child instances validate for arrays, and\ndoes not directly validate the immediate instance itself.\n\nIf \"items\" is a schema, validation succeeds if all elements in the\narray successfully validate against that schema.\n\nIf \"items\" is an array of schemas, validation succeeds if each\nelement of the instance validates against the schema at the same\nposition, if any.\n\nOmitting this keyword has the same behavior as an empty schema.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.2"}],"optional":true},{"name":"additionalProperties","type":"FormSchema | boolean","docs":"The value of \"additionalProperties\" MUST be a valid JSON Schema.\nThis keyword determines how child instances validate for objects, and\ndoes not directly validate the immediate instance itself.\n\nValidation with \"additionalProperties\" applies only to the child\nvalues of instance names that do not match any names in \"properties\",\nand do not match any regular expression in \"patternProperties\".\n\nFor all such properties, validation succeeds if the child instance\nvalidates against the \"additionalProperties\" schema.\n\nOmitting this keyword has the same behavior as an empty schema.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.6"}],"optional":true},{"name":"allOf","type":"Array<FormSchemaArrayItem<T>>","docs":"This keyword's value MUST be a non-empty array.  Each item of the\narray MUST be a valid JSON Schema.\nAn instance validates successfully against this keyword if it\nvalidates successfully against all schemas defined by this keyword's\nvalue.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.1"}],"optional":true},{"name":"anyOf","type":"Array<FormSchemaArrayItem<T>>","docs":"This keyword's value MUST be a non-empty array.  Each item of the\narray MUST be a valid JSON Schema.\nAn instance validates successfully against this keyword if it\nvalidates successfully against at least one schema defined by this\nkeyword's value.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.2"}],"optional":true},{"name":"const","type":"JSONSchema7Type | undefined","docs":"","docsTags":[],"optional":true},{"name":"contains","type":"FormSchemaArrayItem<T>","docs":"The value of this keyword MUST be a valid JSON Schema.\nAn array instance is valid against \"contains\" if at least one of its\nelements is valid against the given schema.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.6"}],"optional":true},{"name":"contentEncoding","type":"string | undefined","docs":"","docsTags":[],"optional":true},{"name":"contentMediaType","type":"string | undefined","docs":"","docsTags":[{"name":"see","text":"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-8"}],"optional":true},{"name":"default","type":"JSONSchema7Type | undefined","docs":"","docsTags":[],"optional":true},{"name":"definitions","type":"Record<string, FormSchema>","docs":"The \"definitions\" keywords provides a standardized location for\nschema authors to inline re-usable JSON Schemas into a more general\nschema.  The keyword does not directly affect the validation result.\nThis keyword's value MUST be an object.  Each member value of this\nobject MUST be a valid JSON Schema.\n\nAs an example, here is a schema describing an array of positive\nintegers, where the positive integer constraint is a subschema in\n\"definitions\":\n```\n{\n    \"type\": \"array\",\n    \"items\": { \"$ref\": \"#/definitions/positiveInteger\" },\n    \"definitions\": {\n        \"positiveInteger\": {\n            \"type\": \"integer\",\n            \"exclusiveMinimum\": 0\n        }\n    }\n}\n```\n\n$defs is the newer keyword introduced in the JSON Schema Draft 2019-09, while definitions is from the older drafts.\n\nThe main difference is that definitions is no longer an official keyword in the latest JSON Schema specification (Draft 2019-09 and later),\nbut it is still widely supported for backward compatibility.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-9"}],"optional":true},{"name":"dependencies","type":"Record<string, FormSchema | string[]>","docs":"This keyword specifies rules that are evaluated if the instance is an\nobject and contains a certain property.\nThis keyword's value MUST be an object.  Each property specifies a\ndependency.  Each dependency value MUST be an array or a valid JSON\nSchema.\n\nIf the dependency value is a subschema, and the dependency key is a\nproperty in the instance, the entire instance must validate against\nthe dependency value.\n\nIf the dependency value is an array, each element in the array, if\nany, MUST be a string, and MUST be unique.  If the dependency key is\na property in the instance, each of the items in the dependency value\nmust be a property that exists in the instance.\n\nOmitting this keyword has the same behavior as an empty object.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.7"}],"optional":true},{"name":"description","type":"string | undefined","docs":"","docsTags":[],"optional":true},{"name":"else","type":"FormSchema","docs":"This keyword's value MUST be a valid JSON Schema.\nWhen \"if\" is present, and the instance fails to validate against its\nsubschema, then valiation succeeds against this keyword if the\ninstance successfully validates against this keyword's subschema.\n\nThis keyword has no effect when \"if\" is absent, or when the instance\nsuccessfully validates against its subschema.  Implementations MUST\nNOT evaluate the instance against this keyword, for either validation\nor annotation collection purposes, in such cases.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.6.3"}],"optional":true},{"name":"enum","type":"JSONSchema7Type[] | undefined","docs":"","docsTags":[],"optional":true},{"name":"examples","type":"JSONSchema7Type | undefined","docs":"","docsTags":[],"optional":true},{"name":"exclusiveMaximum","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"exclusiveMinimum","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"format","type":"string | undefined","docs":"","docsTags":[{"name":"see","text":"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-7"}],"optional":true},{"name":"id","type":"string","docs":"Unique identifier for the schema","docsTags":[{"name":"internal","text":""}],"optional":true},{"name":"if","type":"FormSchema","docs":"This keyword's value MUST be a valid JSON Schema.\nThis validation outcome of this keyword's subschema has no direct\neffect on the overall validation result.  Rather, it controls which\nof the \"then\" or \"else\" keywords are evaluated.\n\nInstances that successfully validate against this keyword's subschema\nMUST also be valid against the subschema value of the \"then\" keyword,\nif present.\n\nInstances that fail to validate against this keyword's subschema MUST\nalso be valid against the subschema value of the \"else\" keyword, if\npresent.\n\nIf annotations (Section 3.3) are being collected, they are collected\nfrom this keyword's subschema in the usual way, including when the\nkeyword is present without either \"then\" or \"else\".","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.6.1"}],"optional":true},{"name":"items","type":"FormSchemaArrayItem<T> | Array<FormSchemaArrayItem<T>>","docs":"The value of \"items\" MUST be either a valid JSON Schema or an array\nof valid JSON Schemas.\nThis keyword determines how child instances validate for arrays, and\ndoes not directly validate the immediate instance itself.\n\nIf \"items\" is a schema, validation succeeds if all elements in the\narray successfully validate against that schema.\n\nIf \"items\" is an array of schemas, validation succeeds if each\nelement of the instance validates against the schema at the same\nposition, if any.\n\nOmitting this keyword has the same behavior as an empty schema.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.1"}],"optional":true},{"name":"lime","type":"Omit<LimeSchemaOptions, \"layout\"> & object","docs":"Lime elements specific options that can be specified in a schema","docsTags":[],"optional":true},{"name":"maxItems","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"maxLength","type":"number | undefined","docs":"","docsTags":[{"name":"see","text":"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.3"}],"optional":true},{"name":"maxProperties","type":"number | undefined","docs":"","docsTags":[{"name":"see","text":"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.5"}],"optional":true},{"name":"maximum","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"minItems","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"minLength","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"minProperties","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"minimum","type":"number | undefined","docs":"","docsTags":[],"optional":true},{"name":"multipleOf","type":"number | undefined","docs":"","docsTags":[{"name":"see","text":"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.2"}],"optional":true},{"name":"not","type":"FormSchema","docs":"This keyword's value MUST be a valid JSON Schema.\nAn instance is valid against this keyword if it fails to validate\nsuccessfully against the schema defined by this keyword.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.4"}],"optional":true},{"name":"oneOf","type":"Array<FormSchemaArrayItem<T>>","docs":"This keyword's value MUST be a non-empty array.  Each item of the\narray MUST be a valid JSON Schema.\nAn instance validates successfully against this keyword if it\nvalidates successfully against exactly one schema defined by this\nkeyword's value.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.3"}],"optional":true},{"name":"pattern","type":"string | undefined","docs":"","docsTags":[],"optional":true},{"name":"patternProperties","type":"Record<string, FormSchema>","docs":"The value of \"patternProperties\" MUST be an object.  Each property\nname of this object SHOULD be a valid regular expression, according\nto the ECMA 262 regular expression dialect.  Each property value of\nthis object MUST be a valid JSON Schema.\nThis keyword determines how child instances validate for objects, and\ndoes not directly validate the immediate instance itself.  Validation\nof the primitive instance type against this keyword always succeeds.\n\nValidation succeeds if, for each instance name that matches any\nregular expressions that appear as a property name in this keyword's\nvalue, the child instance for that name successfully validates\nagainst each schema that corresponds to a matching regular\nexpression.\n\nOmitting this keyword has the same behavior as an empty object.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.5"}],"optional":true},{"name":"properties","type":"ReplaceObjectType<T, FormSubKeySchema<T>, Record<string, FormSchema>>","docs":"The value of \"properties\" MUST be an object.  Each value of this\nobject MUST be a valid JSON Schema.\nThis keyword determines how child instances validate for objects, and\ndoes not directly validate the immediate instance itself.\n\nValidation succeeds if, for each name that appears in both the\ninstance and as a name within this keyword's value, the child\ninstance for that name successfully validates against the\ncorresponding schema.\n\nOmitting this keyword has the same behavior as an empty object.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.4"}],"optional":true},{"name":"propertyNames","type":"FormSchema","docs":"The value of \"propertyNames\" MUST be a valid JSON Schema.\nIf the instance is an object, this keyword validates if every\nproperty name in the instance validates against the provided schema.\nNote the property name that the schema is testing will always be a\nstring.\n\nOmitting this keyword has the same behavior as an empty schema.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.8"}],"optional":true},{"name":"readOnly","type":"boolean | undefined","docs":"","docsTags":[],"optional":true},{"name":"required","type":"Array<ReplaceObjectType<T, Extract<keyof T, string>, string>>","docs":"The value of this keyword MUST be an array.  Elements of this array,\nif any, MUST be strings, and MUST be unique.\nAn object instance is valid against this keyword if every item in the\narray is the name of a property in the instance.\n\nOmitting this keyword has the same behavior as an empty array.","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.3"}],"optional":true},{"name":"then","type":"FormSchema","docs":"This keyword's value MUST be a valid JSON Schema.\nThis validation outcome of this keyword's subschema has no direct\neffect on the overall validation result.  Rather, it controls which\nof the \"then\" or \"else\" keywords are evaluated.\n\nInstances that successfully validate against this keyword's subschema\nMUST also be valid against the subschema value of the \"then\" keyword,\nif present.\n\nInstances that fail to validate against this keyword's subschema MUST\nalso be valid against the subschema value of the \"else\" keyword, if\npresent.\n\nIf annotations (Section 3.3) are being collected, they are collected\nfrom this keyword's subschema in the usual way, including when the\nkeyword is present without either \"then\" or \"else\".","docsTags":[{"name":"see","text":"https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.6.2"}],"optional":true},{"name":"title","type":"string | undefined","docs":"","docsTags":[{"name":"see","text":"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-10"}],"optional":true},{"name":"type","type":"JSONSchema7TypeName | JSONSchema7TypeName[] | undefined","docs":"","docsTags":[{"name":"see","text":"https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.1"}],"optional":true},{"name":"uniqueItems","type":"boolean | undefined","docs":"","docsTags":[],"optional":true},{"name":"writeOnly","type":"boolean | undefined","docs":"","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"GridLayoutOptions","typeParams":[],"docs":"Layout options for a grid layout","docsTags":[],"props":[{"name":"colSpan","type":"1 | 2 | 3 | 4 | 5 | \"all\"","docs":"When specified on a component within the grid, the component will take\nup the the specified number of columns in the form","docsTags":[],"optional":true},{"name":"columns","type":"1 | 2 | 3 | 4 | 5","docs":"Number of columns to use in the layout","docsTags":[],"optional":true},{"name":"dense","type":"boolean","docs":"Attempts to fill in holes earlier in the grid, if smaller items come up\nlater. This may cause items to appear out-of-order, when doing so would\nfill holes left by larger items. Defaults to `true`.","docsTags":[],"optional":true},{"name":"rowSpan","type":"number","docs":"When specified on a component within the grid, the component will take\nup the the specified number of rows in the form","docsTags":[],"optional":true},{"name":"type","type":"FormLayoutType | \"default\" | \"grid\" | \"row\"","docs":"The type of layout to use","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"LimeSchemaOptions","typeParams":[],"docs":"Lime elements specific options that can be specified under the `lime` key in\na schema, e.g.\n```ts\nconst schema = {\n    type: 'object',\n    lime: {\n        collapsible: true,\n    },\n};\n```","docsTags":[],"props":[{"name":"collapsed","type":"boolean","docs":"When `collapsible` is `true`, set this to `false` to make the\ncollapsible section load in the open state.\nDefaults to `true`.","docsTags":[],"optional":true},{"name":"collapsible","type":"boolean","docs":"When specified on an object it will render all sub components inside a\ncollapsible section","docsTags":[],"optional":true},{"name":"component","type":"FormComponentOptions","docs":"Will render the field using the specified component. The component\nshould implement the `FormComponent` interface","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"Mark the field as disabled","docsTags":[],"optional":true},{"name":"help","type":"string | Partial<Help>","docs":"","docsTags":[],"optional":true},{"name":"layout","type":"LimeLayoutOptions","docs":"When specified on an object it will render the sub components with the\nspecified layout","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"RowLayoutOptions","typeParams":[],"docs":"Layout options for a row layout","docsTags":[],"props":[{"name":"icon","type":"string","docs":"When specified on a field, the chosen icon will be displayed\non the left side of the row, beside the title.","docsTags":[],"optional":true},{"name":"type","type":"FormLayoutType | \"default\" | \"grid\" | \"row\"","docs":"The type of layout to use","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"ValidationStatus","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"errors","type":"FormError[]","docs":"List of validation errors","docsTags":[],"optional":true},{"name":"valid","type":"boolean","docs":"True if the form is valid, false otherwise\nIf the form is invalid, any errors can be found on the `errors` property","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"alias","name":"FormSchemaArrayItem","docs":"Utility type for supporting nested sub items in arrays","docsTags":[],"alias":"T extends any[] ? FormSchema<T[Extract<keyof T, number>]> : FormSchema","sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"alias","name":"FormSubKeySchema","docs":"Utility type for recursive properties in a schema","docsTags":[],"alias":"Partial<object>","sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"alias","name":"LimeLayoutOptions","docs":"Options for a layout to be used in a form","docsTags":[],"alias":"GridLayoutOptions & RowLayoutOptions","sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"alias","name":"ReplaceObjectType","docs":"Utility type for replacing object types with a specified type","docsTags":[],"alias":"T extends any[] ? ElseType : T extends Record<string, any> ? AllowedType : ElseType","sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"alias","name":"ValidationError","docs":"","docsTags":[],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/form/form.types.ts"]},{"type":"interface","name":"Help","typeParams":[],"docs":"This interface represents the properties that can be passed to the\n`limel-help` component.","docsTags":[],"props":[{"name":"openDirection","type":"OpenDirection","docs":"Decides the popover's location in relation to the trigger.","docsTags":[],"optional":false},{"name":"readMoreLink","type":"Link","docs":"If supplied, it will render a \"Read more\" link at the bottom of the content.\nEven though you can add a link anywhere in the content, it is recommended to\nuse the read more link. Because it will always be displayed at the bottom\nof the popover after the content, does not scroll away with the content,\nand it will be styled in a consistent way.","docsTags":[],"optional":true},{"name":"trigger","type":"string","docs":"Visualizes the trigger element. Defaults to: **?**\n:::important\nBe consistent across the product if you want to change it to a custom character.\nAll instances of the help component should have the same trigger visualization.\n:::","docsTags":[],"optional":false},{"name":"value","type":"string","docs":"The markdown content that will be displayed in the popover.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/help/help.types.ts"]},{"type":"alias","name":"IconSize","docs":"","docsTags":[],"alias":"\"x-small\" | \"small\" | \"medium\" | \"large\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/icon/icon.types.ts"]},{"type":"interface","name":"InfoTileProgress","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"displayPercentageColors","type":"boolean","docs":"When set to `true`, the progress bar changes color depending on its current value.","docsTags":[],"optional":true},{"name":"maxValue","type":"number","docs":"The maximum value within the scale that the progress bar should visualize.","docsTags":[],"optional":true},{"name":"prefix","type":"string","docs":"The prefix which is displayed before the `progressValue`.\nKeep to a few characters at most.","docsTags":[],"optional":true},{"name":"suffix","type":"string","docs":"The suffix which is displayed after the `value`, must be one or two characters long.","docsTags":[],"optional":true},{"name":"value","type":"number","docs":"The value of the progress bar.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/info-tile/info-tile.types.ts"]},{"type":"alias","name":"InputType","docs":"","docsTags":[],"alias":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/input-field/input-field.types.ts"]},{"type":"interface","name":"ListComponent","typeParams":[],"docs":"Component used to render a list item.","docsTags":[],"props":[{"name":"name","type":"string","docs":"The name of the custom component.","docsTags":[],"optional":false},{"name":"props","type":"Record<string, any>","docs":"Properties to send to the custom component.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/list/list-item.types.ts"]},{"type":"interface","name":"ListItem","typeParams":[{"name":"T"}],"docs":"List item.","docsTags":[],"props":[{"name":"actions","type":"Array<MenuItem | ListSeparator>","docs":"List of actions to display as a menu at the end of the item.","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the list item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"Color","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"image","type":"Image","docs":"A picture to show on the list item.","docsTags":[],"optional":true},{"name":"primaryComponent","type":"ListComponent","docs":"Component used to render the list item.","docsTags":[],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the list item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the list item should be selected.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the list item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the list item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/list/list-item.types.ts"]},{"type":"alias","name":"ListType","docs":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","docsTags":[],"alias":"\"selectable\" | \"radio\" | \"checkbox\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/list/list.types.ts"]},{"type":"interface","name":"MenuItem","typeParams":[{"name":"T"}],"docs":"Menu item.","docsTags":[],"props":[{"name":"badge","type":"number | string","docs":"If specified, will display a notification badge on the buttons in the dock.","docsTags":[],"optional":true},{"name":"commandText","type":"string","docs":"The additional supporting text is used for shortcut commands and displayed in the menu item.","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the menu item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"Color","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"items","type":"Array<MenuItem<T> | ListSeparator> | MenuLoader","docs":"A way of defining a sub-menu for an item.\nEither set it to an array of `MenuItem`:s or use lazy loading by setting\nit to a function of type `MenuLoader`.\nIf `myMenuItem.items` is undefined or null, `myMenuItem` will be\nconsidered an item without a sub-menu.","docsTags":[],"optional":true},{"name":"parentItem","type":"MenuItem","docs":":::warning Internal Use Only\nThis property is for internal use only. We need it for now, but want to\nfind a better implementation of the functionality it currently enables.\nIf and when we do so, this property will be removed without prior\nnotice. If you use it, your code _will_ break in the future.\n:::","docsTags":[{"name":"internal","text":""}],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the menu item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the menu item should be selected.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the menu item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the menu item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu/menu.types.ts"]},{"type":"alias","name":"MenuLoader","docs":"A loader function that takes a `MenuItem` as an argument, and returns\na promise that will eventually be resolved with an array of `MenuItem`:s,\nthat is the sub-menu of the given item.","docsTags":[{"name":"param","text":"The parent item to load the sub-menu for."},{"name":"returns","text":"The sub-menu's items of the given item."}],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu/menu.types.ts"]},{"type":"alias","name":"MenuSearcher","docs":"A search function that takes a search-string as an argument, and returns\na promise that will eventually be resolved with an array of `MenuItem`:s.","docsTags":[{"name":"param","text":"A search query. What the user has written\nin the input field of a limel-menu."},{"name":"returns","text":"The search result."}],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu/menu.types.ts"]},{"type":"alias","name":"OpenDirection","docs":"The direction in which the menu should open.\n- `left-start`: Menu opens to the left, aligned with the start of the trigger.\n- `left`: Menu opens to the left, aligned with the center of the trigger.\n- `left-end`: Menu opens to the left, aligned with the end of the trigger.\n- `right-start`: Menu opens to the right, aligned with the start of the trigger.\n- `right`: Menu opens to the right, aligned with the center of the trigger.\n- `right-end`: Menu opens to the right, aligned with the end of the trigger.\n- `top-start`: Menu opens to the top, aligned with the start of the trigger.\n- `top`: Menu opens to the top, aligned with the center of the trigger.\n- `top-end`: Menu opens to the top, aligned with the end of the trigger.\n- `bottom-start`: Menu opens to the bottom, aligned with the start of the trigger.\n- `bottom`: Menu opens to the bottom, aligned with the center of the trigger.\n- `bottom-end`: Menu opens to the bottom, aligned with the end of the trigger.","docsTags":[],"alias":"\"left-start\" | \"left\" | \"left-end\" | \"right-start\" | \"right\" | \"right-end\" | \"top-start\" | \"top\" | \"top-end\" | \"bottom-start\" | \"bottom\" | \"bottom-end\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu/menu.types.ts"]},{"type":"alias","name":"SurfaceWidth","docs":"Any element in the UI can be configured to open a menu.\nBy default width of menu's dropdown is based on the items in the dropdown.\nHowever, size of the dropdown menu that opens can be controlled\nbased on design requirements.\n- `inherit-from-items`: This is the default layout in which the widest item\nin the menu list sets the width of the dropdown menu.\n- `inherit-from-trigger`: Width of the dropdown menu will as wide as the\nwidth of the element that triggers the menu.\n- `inherit-from-menu`: Width of the dropdown menu will be as wide as the\nwidth of the `limel-menu` element itself. Useful when a menu surface needs\nto be opened programmatically, without a visible UI element.","docsTags":[],"alias":"\"inherit-from-items\" | \"inherit-from-trigger\" | \"inherit-from-menu\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/menu/menu.types.ts"]},{"type":"alias","name":"ActionPosition","docs":"Whether the action should be addded to the top or the bottom of the list.","docsTags":[],"alias":"\"top\" | \"bottom\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/picker/actions.types.ts"]},{"type":"alias","name":"ActionScrollBehavior","docs":"Whether the action should stay visible when scrolling the list,\nor scroll away like any other list item.","docsTags":[],"alias":"\"sticky\" | \"scroll\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/picker/actions.types.ts"]},{"type":"alias","name":"Searcher","docs":"A search function that takes a search-string as an argument, and returns\na promise that will eventually be resolved with an array of `ListItem`:s.","docsTags":[{"name":"param","text":"A search query. Typically what the user has written\nin the input field of a limel-picker."},{"name":"returns","text":"The search result."}],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/picker/searcher.types.ts"]},{"type":"alias","name":"PickerValue","docs":"The type of the value that the picker can handle","docsTags":[],"alias":"number | string | object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/picker/value.types.ts"]},{"type":"interface","name":"FlowItem","typeParams":[{"name":"T"}],"docs":"A step in a progress flow.","docsTags":[],"props":[{"name":"actions","type":"Array<MenuItem | ListSeparator>","docs":"List of actions to display as a menu at the end of the item.","docsTags":[],"optional":true},{"name":"disabled","type":"boolean","docs":"True if the list item should be disabled.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"Color","docs":"Fill color of the icon on the step,\nwhen it is neither selected nor passed.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"image","type":"Image","docs":"A picture to show on the list item.","docsTags":[],"optional":true},{"name":"isOffProgress","type":"boolean","docs":"Determines whether a step should be a part of the flow,\nor should be an independent step visually located on the side.","docsTags":[],"optional":true},{"name":"passedColor","type":"Color","docs":"Background color of the step, when it is passed.","docsTags":[],"optional":true},{"name":"primaryComponent","type":"ListComponent","docs":"Component used to render the list item.","docsTags":[],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in the list item.","docsTags":[],"optional":true},{"name":"selected","type":"boolean","docs":"True if the list item should be selected.","docsTags":[],"optional":true},{"name":"selectedColor","type":"Color","docs":"Background color of selected step.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"Text to display in the list item.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"Value of the list item.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/progress-flow/progress-flow.types.ts"]},{"type":"interface","name":"Option","typeParams":[{"name":"T"}],"docs":"Describes an option for limel-select.","docsTags":[],"props":[{"name":"disabled","type":"boolean","docs":"Set to `true` to make this option disabled and not possible to select.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Displays an icon beside the name of the option.","docsTags":[],"optional":true},{"name":"iconColor","type":"Color","docs":"Adds a color to the icon.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"secondaryText","type":"string","docs":"Additional supporting text to display in under the option text.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"The name of the option as shown to the user.","docsTags":[],"optional":false},{"name":"value","type":"T","docs":"The unique value of the option. Should always be the same for any given\noption, regardless of localization. The type `T` defaults to `string`,\nbut can be set to any type that extends `string` (using `Option<type>`),\nfor example an enum of specific strings.\nNote the value of this property *must* be a string!\nIf the value you wish to use is, for example, numeric, convert it to a\nstring before sending it to limel-select. Using numeric values does work\nin many desktop browsers, but breaks the select completely on some\niOS devices.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/select/option.types.ts"]},{"type":"alias","name":"SpinnerSize","docs":"Possible sizes of limel-spinner.","docsTags":[],"alias":"\"mini\" | \"x-small\" | \"small\" | \"medium\" | \"large\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/spinner/spinner.types.ts"]},{"type":"interface","name":"Tab","typeParams":[],"docs":"Tab interface.","docsTags":[],"props":[{"name":"active","type":"boolean","docs":"True if the tab should be selected.","docsTags":[],"optional":true},{"name":"badge","type":"number | string","docs":"Shows a badge within the tab with a specified label","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconColor","type":"Color","docs":"Color of the icon.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```\nicon {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"id","type":"number | string","docs":"Id of the tab. Must be unique.","docsTags":[],"optional":false},{"name":"text","type":"string","docs":"Text to display inside the tab.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/tab-bar/tab.types.ts"]},{"type":"interface","name":"TabPanelComponent","typeParams":[],"docs":"Interface for components rendered inside a `limel-tab-panel`","docsTags":[],"props":[{"name":"changeTab","type":"EventEmitter<Tab>","docs":"Emit when the tab is updated for some reason, e.g. changing the text,\nicon or badge","docsTags":[],"optional":true},{"name":"tab","type":"Tab","docs":"The tab that the component belongs to","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/tab-panel/tab-panel.types.ts"]},{"type":"interface","name":"Bird","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"binominalName","type":"string","docs":"","docsTags":[],"optional":false},{"name":"eggs","type":"number","docs":"","docsTags":[],"optional":false},{"name":"food","type":"Food | Food[]","docs":"","docsTags":[],"optional":false},{"name":"habitat","type":"Habitat | Habitat[]","docs":"","docsTags":[],"optional":false},{"name":"name","type":"string","docs":"","docsTags":[],"optional":false},{"name":"nest","type":"Nest","docs":"","docsTags":[],"optional":false},{"name":"origin","type":"string | string[]","docs":"","docsTags":[],"optional":false},{"name":"wingspan","type":"number","docs":"","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/examples/birds.ts"]},{"type":"alias","name":"Food","docs":"","docsTags":[],"alias":"\"invertebrate\" | \"seed\" | \"fruit\" | \"fish\" | \"rodent\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/examples/birds.ts"]},{"type":"alias","name":"Habitat","docs":"","docsTags":[],"alias":"\"forest\" | \"grassland\" | \"wetland\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/examples/birds.ts"]},{"type":"alias","name":"Nest","docs":"","docsTags":[],"alias":"\"bowl\" | \"cavity\" | \"ground\" | \"platform\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/examples/birds.ts"]},{"type":"alias","name":"Layout","docs":"Layouts:\n- default: resizes the table's columns, in a way that each column becomes as wide as the data it holds\n- stretchLastColumn: works like default, but the last column is stretched to fill any remaining space\n- stretchColumns: when there is extra space, the columns are stretched to fill it, otherwise, this works just like default\n- lowDensity: converts the table into an airy list of items","docsTags":[],"alias":"\"default\" | \"stretchLastColumn\" | \"stretchColumns\" | \"lowDensity\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/layout.ts"]},{"type":"enum","name":"ColumnAggregatorType","docs":"The built-in aggregators available for columns","docsTags":[],"members":[{"name":"Average","docs":"Calculates the average value of all numerical cells in the column","docsTags":[],"value":"\"avg\""},{"name":"Count","docs":"Counts the number of non empty cells in the column","docsTags":[],"value":"\"count\""},{"name":"Maximum","docs":"Displays the maximum value from all numerical cells in the column","docsTags":[],"value":"\"max\""},{"name":"Minimum","docs":"Displays the minimum value from all numerical cells in the column","docsTags":[],"value":"\"min\""},{"name":"Sum","docs":"Displays the sum of all numerical cells in the column","docsTags":[],"value":"\"sum\""}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"Column","typeParams":[{"name":"T"}],"docs":"Defines the data for a table","docsTags":[],"props":[{"name":"aggregator","type":"ColumnAggregatorType | ColumnAggregatorFunction<T>","docs":"Type of aggregator to use for the column","docsTags":[],"optional":true},{"name":"component","type":"TableComponentDefinition","docs":"Component used to render the field value","docsTags":[],"optional":true},{"name":"field","type":"keyof T","docs":"Name of the field in the data","docsTags":[],"optional":false},{"name":"formatter","type":"TableFormatter","docs":"Function to format the value before rendering","docsTags":[],"optional":true},{"name":"headerComponent","type":"TableComponentDefinition","docs":"A component used to render inside the column header","docsTags":[],"optional":true},{"name":"headerSort","type":"boolean","docs":"Defines whether end-user can sort a column","docsTags":[],"optional":true},{"name":"horizontalAlign","type":"\"left\" | \"center\" | \"right\"","docs":"Sets the horizontal text alignment for the column","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"Column title to be displayed","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"ColumnAggregate","typeParams":[],"docs":"Defines aggregate values for columns","docsTags":[],"props":[{"name":"field","type":"string","docs":"The name of the `Column` field","docsTags":[],"optional":false},{"name":"value","type":"any","docs":"The aggregate value","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"ColumnSorter","typeParams":[],"docs":"Indicates whether the specified column is sorted ascending or descending.","docsTags":[],"props":[{"name":"column","type":"Column","docs":"The column being sorted","docsTags":[],"optional":false},{"name":"direction","type":"\"ASC\" | \"DESC\"","docs":"The direction to sort on","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"TableComponent","typeParams":[{"name":"T"}],"docs":"Interface for custom components rendered inside a `limel-table`.","docsTags":[],"props":[{"name":"data","type":"T","docs":"Data for the current row of the table","docsTags":[],"optional":true},{"name":"field","type":"string","docs":"Name of the field being rendered","docsTags":[],"optional":true},{"name":"value","type":"any","docs":"Value being rendered","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"TableComponentDefinition","typeParams":[],"docs":"The `component` key in the schema uses this interface to define a\ncomponent to be rendered inside a cell in the table.","docsTags":[{"name":"note","text":"The table will display the component as `inline-block` in order\nto give the column the correct size. If the component should have the\nfull width of the column, this might have to be overridden by setting\nthe display mode to `block`, e.g.\n\n```css\n:host(*) {\n    display: block !important;\n}\n```"}],"props":[{"name":"name","type":"string","docs":"Name of the component","docsTags":[],"optional":false},{"name":"props","type":"Record<string, any>","docs":"Properties to send to the component","docsTags":[],"optional":true}],"methods":[{"name":"propsFactory","docs":"Factory for creating properties dynamically for a custom component.\nThe properties returned from this function will be merged with the\n`props` properties when the component is created.\n\nWhen the propsFactory is used for header components there will be no data available.","docsTags":[],"parameters":[{"name":"data","type":"object","docs":"The data for the current row","optional":false}],"returns":{"type":"Record<string, any>","docs":"Properties for the component\n"}}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"interface","name":"TableParams","typeParams":[],"docs":"Specifies the current page, and which columns the table is currently sorted on.","docsTags":[],"props":[{"name":"page","type":"number","docs":"The current page being set","docsTags":[],"optional":false},{"name":"sorters","type":"ColumnSorter[]","docs":"Sorters applied to the current page","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"alias","name":"ColumnAggregatorFunction","docs":"Instead of using one of the built-in aggregators, it is possible to\ndefine a custom aggregator function.","docsTags":[{"name":"param","text":"the configuration for the column"},{"name":"param","text":"list of all values to be aggregated"},{"name":"param","text":"list of all objects to be aggregated"},{"name":"returns","text":"the aggregated data"}],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"alias","name":"RowData","docs":"Data for identifying a row of the table","docsTags":[],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"alias","name":"TableFormatter","docs":"Definition for a formatter function","docsTags":[{"name":"param","text":"The value to be formatted"},{"name":"param","text":"The data for the current row"},{"name":"returns","text":"The formatted value"}],"alias":"function","sources":["/home/runner/work/lime-elements/lime-elements/src/components/table/table.types.ts"]},{"type":"alias","name":"EditorMenuTypes","docs":"","docsTags":[],"alias":"object[keyof typeof EditorMenuTypes]","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/menu/types.ts"]},{"type":"alias","name":"EditorTextLink","docs":"The `EditorTextLink` type is used to represent a link in the editor.","docsTags":[{"name":"beta","text":""}],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/menu/types.ts"]},{"type":"alias","name":"LevelMapping","docs":"","docsTags":[],"alias":"object[keyof typeof LevelMapping]","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/menu/types.ts"]},{"type":"alias","name":"MouseButtons","docs":"","docsTags":[],"alias":"object[keyof typeof MouseButtons]","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/menu/types.ts"]},{"type":"alias","name":"ProseMirrorAdapterElementWithFocus","docs":"","docsTags":[],"alias":"HTMLLimelProsemirrorAdapterElement & object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/prosemirror-adapter/menu/types.ts"]},{"type":"interface","name":"EditorImage","typeParams":[],"docs":"","docsTags":[{"name":"alpha","text":""}],"props":[{"name":"fileInfoId","type":"string","docs":"Unique ID of the image file.","docsTags":[],"optional":false},{"name":"src","type":"string","docs":"The source of the image.\nCan either be a URL pointing to the image or a base64 encoded string.","docsTags":[],"optional":false},{"name":"state","type":"EditorImageState","docs":"The current state of the image.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"interface","name":"EditorLink","typeParams":[],"docs":"","docsTags":[{"name":"alpha","text":""}],"props":[{"name":"href","type":"string","docs":"The URL of the link.","docsTags":[],"optional":false},{"name":"text","type":"string","docs":"The text associated with the link.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"interface","name":"EditorMetadata","typeParams":[],"docs":"","docsTags":[{"name":"alpha","text":"Interface representing metadata extracted from the editor document"}],"props":[{"name":"images","type":"EditorImage[]","docs":"Collection of image elements found in the document","docsTags":[],"optional":false},{"name":"links","type":"EditorLink[]","docs":"Collection of link elements found in the document","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"interface","name":"ImageInserter","typeParams":[],"docs":"","docsTags":[{"name":"alpha","text":""}],"props":[{"name":"fileInfo","type":"FileInfo","docs":"","docsTags":[],"optional":false}],"methods":[{"name":"insertFailedThumbnail","docs":"Method to insert a failed thumbnail at the thumbnail position.\nThumbnail must be inserted before calling this method.","parameters":[],"returns":{"type":"void","docs":""}},{"name":"insertImage","docs":"Method to insert the image at the thumbnail position.\nThumbnail must be inserted before calling this method.","docsTags":[],"parameters":[{"name":"src","type":"string","docs":"The src url of the uploaded image.\nIf not provided, the image will be inserted with base64 data.","optional":true}],"returns":{"type":"void","docs":""}},{"name":"insertThumbnail","docs":"Method to insert a thumbnail at the cursor position.","parameters":[],"returns":{"type":"void","docs":""}}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"interface","name":"TextEditor","typeParams":[],"docs":"","docsTags":[{"name":"alpha","text":""}],"props":[],"methods":[{"name":"insert","docs":"Method to insert either text or a node at the cursor position","parameters":[{"name":"input","type":"TextEditorNode | string","docs":"","optional":false}],"returns":{"type":"void","docs":""}},{"name":"insertHtml","docs":"Method to insert an HTML string at the cursor position","parameters":[{"name":"input","type":"string","docs":"","optional":false}],"returns":{"type":"Promise<void>","docs":""}},{"name":"stopTrigger","docs":"","parameters":[],"returns":{"type":"void","docs":""}}],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"interface","name":"TriggerEventDetail","typeParams":[],"docs":"","docsTags":[{"name":"alpha","text":""}],"props":[{"name":"textEditor","type":"TextEditor","docs":"The text editor","docsTags":[],"optional":false},{"name":"trigger","type":"TriggerCharacter","docs":"The trigger that triggered this event","docsTags":[],"optional":false},{"name":"value","type":"string","docs":"Current value of the trigger","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"alias","name":"EditorImageState","docs":"","docsTags":[{"name":"alpha","text":""}],"alias":"\"loading\" | \"failed\" | \"success\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"alias","name":"TextEditorNode","docs":"","docsTags":[{"name":"alpha","text":""}],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"alias","name":"Trigger","docs":"Represents a trigger character and its position in the text.","docsTags":[{"name":"alpha","text":""}],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"alias","name":"TriggerCharacter","docs":"A character that triggers a specific action in the text editor.","docsTags":[{"name":"alpha","text":""}],"alias":"\"@\" | \"#\" | \"$\" | \"!\" | \"?\" | \"&\" | \"*\" | \"%\" | \"+\" | \"-\" | \"=\" | \"/\" | \"\\\" | \"^\" | \"~\" | \"`\" | \":\" | \";\" | \"|\" | \".\" | \",\" | \"<\" | \">\" | \"[\" | \"]\" | \"{\" | \"}\" | \"(\" | \")\" | \"'\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/text-editor.types.ts"]},{"type":"alias","name":"EditorUiType","docs":"","docsTags":[{"name":"beta","text":""}],"alias":"\"standard\" | \"minimal\" | \"no-toolbar\"","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/types.ts"]},{"type":"alias","name":"TextEditorPlugin","docs":"set to private to avoid usage while under development","docsTags":[],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/components/text-editor/types.ts"]},{"type":"alias","name":"Config","docs":"Configuration options for limel-config.","docsTags":[],"alias":"object","sources":["/home/runner/work/lime-elements/lime-elements/src/global/config.ts"]},{"type":"alias","name":"BlackColor","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"--color-black\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"BrandColor","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"--lime-brand-color-lime-green\" | \"--lime-brand-color-ocean-teal\" | \"--lime-brand-color-aqua\" | \"--lime-brand-color-bubblegum\" | \"--lime-brand-color-sunny-orange\" | \"--lime-brand-color-cool-grey\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"BrandHue","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"lime-green\" | \"ocean-teal\" | \"aqua\" | \"bubblegum\" | \"sunny-orange\" | \"cool-grey\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"Brightness","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"lighter\" | \"light\" | \"default\" | \"dark\" | \"darker\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"ContrastColor","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"--contrast-100\" | \"--contrast-200\" | \"--contrast-300\" | \"--contrast-400\" | \"--contrast-500\" | \"--contrast-600\" | \"--contrast-700\" | \"--contrast-800\" | \"--contrast-900\" | \"--contrast-1000\" | \"--contrast-1100\" | \"--contrast-1200\" | \"--contrast-1300\" | \"--contrast-1400\" | \"--contrast-1500\" | \"--contrast-1600\" | \"--contrast-1700\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"ContrastValue","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 1000 | 1100 | 1200 | 1300 | 1400 | 1500 | 1600 | 1700","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"Hue","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"red\" | \"pink\" | \"magenta\" | \"purple\" | \"violet\" | \"indigo\" | \"blue\" | \"cyan\" | \"teal\" | \"green\" | \"lime\" | \"yellow\" | \"amber\" | \"orange\" | \"coral\" | \"brown\" | \"grey\" | \"glaucous\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"HueColor","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"--color-red-lighter\" | \"--color-red-light\" | \"--color-red-default\" | \"--color-red-dark\" | \"--color-red-darker\" | \"--color-pink-lighter\" | \"--color-pink-light\" | \"--color-pink-default\" | \"--color-pink-dark\" | \"--color-pink-darker\" | \"--color-magenta-lighter\" | \"--color-magenta-light\" | \"--color-magenta-default\" | \"--color-magenta-dark\" | \"--color-magenta-darker\" | \"--color-purple-lighter\" | \"--color-purple-light\" | \"--color-purple-default\" | \"--color-purple-dark\" | \"--color-purple-darker\" | \"--color-violet-lighter\" | \"--color-violet-light\" | \"--color-violet-default\" | \"--color-violet-dark\" | \"--color-violet-darker\" | \"--color-indigo-lighter\" | \"--color-indigo-light\" | \"--color-indigo-default\" | \"--color-indigo-dark\" | \"--color-indigo-darker\" | \"--color-blue-lighter\" | \"--color-blue-light\" | \"--color-blue-default\" | \"--color-blue-dark\" | \"--color-blue-darker\" | \"--color-cyan-lighter\" | \"--color-cyan-light\" | \"--color-cyan-default\" | \"--color-cyan-dark\" | \"--color-cyan-darker\" | \"--color-teal-lighter\" | \"--color-teal-light\" | \"--color-teal-default\" | \"--color-teal-dark\" | \"--color-teal-darker\" | \"--color-green-lighter\" | \"--color-green-light\" | \"--color-green-default\" | \"--color-green-dark\" | \"--color-green-darker\" | \"--color-lime-lighter\" | \"--color-lime-light\" | \"--color-lime-default\" | \"--color-lime-dark\" | \"--color-lime-darker\" | \"--color-yellow-lighter\" | \"--color-yellow-light\" | \"--color-yellow-default\" | \"--color-yellow-dark\" | \"--color-yellow-darker\" | \"--color-amber-lighter\" | \"--color-amber-light\" | \"--color-amber-default\" | \"--color-amber-dark\" | \"--color-amber-darker\" | \"--color-orange-lighter\" | \"--color-orange-light\" | \"--color-orange-default\" | \"--color-orange-dark\" | \"--color-orange-darker\" | \"--color-coral-lighter\" | \"--color-coral-light\" | \"--color-coral-default\" | \"--color-coral-dark\" | \"--color-coral-darker\" | \"--color-brown-lighter\" | \"--color-brown-light\" | \"--color-brown-default\" | \"--color-brown-dark\" | \"--color-brown-darker\" | \"--color-grey-lighter\" | \"--color-grey-light\" | \"--color-grey-default\" | \"--color-grey-dark\" | \"--color-grey-darker\" | \"--color-glaucous-lighter\" | \"--color-glaucous-light\" | \"--color-glaucous-default\" | \"--color-glaucous-dark\" | \"--color-glaucous-darker\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"WhiteColor","docs":"","docsTags":[{"name":"internal","text":""}],"alias":"\"--color-white\"","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"alias","name":"Color","docs":"Defined colors and any color that can be used.\nWill auto-complete to any defined color from Lime Elements, while still\nallowing any valid CSS color value to be used.","docsTags":[],"alias":"\"rgb(var(--color-red-lighter))\" | \"rgb(var(--color-red-light))\" | \"rgb(var(--color-red-default))\" | \"rgb(var(--color-red-dark))\" | \"rgb(var(--color-red-darker))\" | \"rgb(var(--color-pink-lighter))\" | \"rgb(var(--color-pink-light))\" | \"rgb(var(--color-pink-default))\" | \"rgb(var(--color-pink-dark))\" | \"rgb(var(--color-pink-darker))\" | \"rgb(var(--color-magenta-lighter))\" | \"rgb(var(--color-magenta-light))\" | \"rgb(var(--color-magenta-default))\" | \"rgb(var(--color-magenta-dark))\" | \"rgb(var(--color-magenta-darker))\" | \"rgb(var(--color-purple-lighter))\" | \"rgb(var(--color-purple-light))\" | \"rgb(var(--color-purple-default))\" | \"rgb(var(--color-purple-dark))\" | \"rgb(var(--color-purple-darker))\" | \"rgb(var(--color-violet-lighter))\" | \"rgb(var(--color-violet-light))\" | \"rgb(var(--color-violet-default))\" | \"rgb(var(--color-violet-dark))\" | \"rgb(var(--color-violet-darker))\" | \"rgb(var(--color-indigo-lighter))\" | \"rgb(var(--color-indigo-light))\" | \"rgb(var(--color-indigo-default))\" | \"rgb(var(--color-indigo-dark))\" | \"rgb(var(--color-indigo-darker))\" | \"rgb(var(--color-blue-lighter))\" | \"rgb(var(--color-blue-light))\" | \"rgb(var(--color-blue-default))\" | \"rgb(var(--color-blue-dark))\" | \"rgb(var(--color-blue-darker))\" | \"rgb(var(--color-cyan-lighter))\" | \"rgb(var(--color-cyan-light))\" | \"rgb(var(--color-cyan-default))\" | \"rgb(var(--color-cyan-dark))\" | \"rgb(var(--color-cyan-darker))\" | \"rgb(var(--color-teal-lighter))\" | \"rgb(var(--color-teal-light))\" | \"rgb(var(--color-teal-default))\" | \"rgb(var(--color-teal-dark))\" | \"rgb(var(--color-teal-darker))\" | \"rgb(var(--color-green-lighter))\" | \"rgb(var(--color-green-light))\" | \"rgb(var(--color-green-default))\" | \"rgb(var(--color-green-dark))\" | \"rgb(var(--color-green-darker))\" | \"rgb(var(--color-lime-lighter))\" | \"rgb(var(--color-lime-light))\" | \"rgb(var(--color-lime-default))\" | \"rgb(var(--color-lime-dark))\" | \"rgb(var(--color-lime-darker))\" | \"rgb(var(--color-yellow-lighter))\" | \"rgb(var(--color-yellow-light))\" | \"rgb(var(--color-yellow-default))\" | \"rgb(var(--color-yellow-dark))\" | \"rgb(var(--color-yellow-darker))\" | \"rgb(var(--color-amber-lighter))\" | \"rgb(var(--color-amber-light))\" | \"rgb(var(--color-amber-default))\" | \"rgb(var(--color-amber-dark))\" | \"rgb(var(--color-amber-darker))\" | \"rgb(var(--color-orange-lighter))\" | \"rgb(var(--color-orange-light))\" | \"rgb(var(--color-orange-default))\" | \"rgb(var(--color-orange-dark))\" | \"rgb(var(--color-orange-darker))\" | \"rgb(var(--color-coral-lighter))\" | \"rgb(var(--color-coral-light))\" | \"rgb(var(--color-coral-default))\" | \"rgb(var(--color-coral-dark))\" | \"rgb(var(--color-coral-darker))\" | \"rgb(var(--color-brown-lighter))\" | \"rgb(var(--color-brown-light))\" | \"rgb(var(--color-brown-default))\" | \"rgb(var(--color-brown-dark))\" | \"rgb(var(--color-brown-darker))\" | \"rgb(var(--color-grey-lighter))\" | \"rgb(var(--color-grey-light))\" | \"rgb(var(--color-grey-default))\" | \"rgb(var(--color-grey-dark))\" | \"rgb(var(--color-grey-darker))\" | \"rgb(var(--color-glaucous-lighter))\" | \"rgb(var(--color-glaucous-light))\" | \"rgb(var(--color-glaucous-default))\" | \"rgb(var(--color-glaucous-dark))\" | \"rgb(var(--color-glaucous-darker))\" | \"rgb(var(--color-black))\" | \"rgb(var(--color-white))\" | \"rgb(var(--contrast-100))\" | \"rgb(var(--contrast-200))\" | \"rgb(var(--contrast-300))\" | \"rgb(var(--contrast-400))\" | \"rgb(var(--contrast-500))\" | \"rgb(var(--contrast-600))\" | \"rgb(var(--contrast-700))\" | \"rgb(var(--contrast-800))\" | \"rgb(var(--contrast-900))\" | \"rgb(var(--contrast-1000))\" | \"rgb(var(--contrast-1100))\" | \"rgb(var(--contrast-1200))\" | \"rgb(var(--contrast-1300))\" | \"rgb(var(--contrast-1400))\" | \"rgb(var(--contrast-1500))\" | \"rgb(var(--contrast-1600))\" | \"rgb(var(--contrast-1700))\" | \"rgb(var(--lime-brand-color-lime-green))\" | \"rgb(var(--lime-brand-color-ocean-teal))\" | \"rgb(var(--lime-brand-color-aqua))\" | \"rgb(var(--lime-brand-color-bubblegum))\" | \"rgb(var(--lime-brand-color-sunny-orange))\" | \"rgb(var(--lime-brand-color-cool-grey))\" | string & object","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/color.types.ts"]},{"type":"interface","name":"CustomElementDefinition","typeParams":[],"docs":"Custom Element definition\nUsed to define a Custom Element","docsTags":[{"name":"alpha","text":""}],"props":[{"name":"attributes","type":"string[]","docs":"","docsTags":[],"optional":false},{"name":"tagName","type":"string","docs":"","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/custom-element.types.ts"]},{"type":"alias","name":"CustomElement","docs":"Custom Element","docsTags":[{"name":"alpha","text":""}],"alias":"Omit<CustomElementDefinition, \"attributes\"> & object","sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/custom-element.types.ts"]},{"type":"interface","name":"FileInfo","typeParams":[],"docs":"","docsTags":[],"props":[{"name":"contentType","type":"string","docs":"Content type of file.","docsTags":[],"optional":true},{"name":"extension","type":"string","docs":"Extension of file.","docsTags":[],"optional":true},{"name":"fileContent","type":"File","docs":"the file content","docsTags":[],"optional":true},{"name":"filename","type":"string","docs":"Name of file.","docsTags":[],"optional":false},{"name":"href","type":"string","docs":"URL where the file can be downloaded. Note that this is optional. If the\nfile cannot be directly accessed via a unique url, this property should\nbe left undefined or set to `null`.","docsTags":[],"optional":true},{"name":"icon","type":"string | Icon","docs":"Name of the icon to use.","docsTags":[],"optional":true},{"name":"iconBackgroundColor","type":"Color","docs":"Background color of the icon. Overrides `--icon-background-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```ts\nicon: {\n   name: string,\n   backgroundColor: string,\n},\n```"}],"optional":true},{"name":"iconColor","type":"Color","docs":"Icon color. Overrides `--icon-color`.","docsTags":[{"name":"deprecated","text":"This property is deprecated and will be removed soon!\n\nUse the new `Icon` interface instead and write:\n```ts\nicon: {\n   name: string,\n   color: string,\n},\n```"}],"optional":true},{"name":"id","type":"number | string","docs":"ID of the file. Must be unique.","docsTags":[],"optional":false},{"name":"lastModified","type":"Date","docs":"Date of last modification.","docsTags":[],"optional":true},{"name":"menuItems","type":"Array<MenuItem | ListSeparator>","docs":"Custom menu items for the file.","docsTags":[],"optional":true},{"name":"size","type":"number","docs":"Size of file.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/file.types.ts"]},{"type":"interface","name":"Icon","typeParams":[],"docs":"This interface is used to specify which icon to use in many components,\nalong with related properties, like color.","docsTags":[],"props":[{"name":"backgroundColor","type":"Color","docs":"Background color of the icon.","docsTags":[],"optional":true},{"name":"color","type":"Color","docs":"Color of the icon.","docsTags":[],"optional":true},{"name":"name","type":"string","docs":"Name of the icon, refers to the icon's filename in lime-icons8 repository.","docsTags":[],"optional":false},{"name":"title","type":"string","docs":"Used primarily to improve accessibility for users who\ntake advantage of assistive technologies; but also\nto clarify further what an icon tries to resemble\nfor sighted users.\nDepending on the component which is using the `Icon` interface,\nthe `title` might be used as a `title` attribute on the\nrendered icon element, as an `aria-label` attribute, or as a\n`label` in a tooltip associated with the icon. Documentations\nabout the accessibility of the component should provide more\ninformation about how the `title` is used.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/icon.types.ts"]},{"type":"interface","name":"Image","typeParams":[],"docs":"This interface is used to specify a path to an image,\nalong with related properties, like alt text.","docsTags":[],"props":[{"name":"alt","type":"string","docs":"The alternative text of the image, used to improve accessibility.","docsTags":[],"optional":false},{"name":"loading","type":"\"lazy\" | \"eager\"","docs":"The `loading` attribute of the image.\n- `lazy` means that the image will be loaded only when it is in the viewport.\n- `eager` means that the image will be loaded as soon as possible.","docsTags":[],"optional":true},{"name":"src","type":"string","docs":"The path to the image file.","docsTags":[],"optional":false}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/image.types.ts"]},{"type":"interface","name":"Link","typeParams":[],"docs":"Interface for a link.","docsTags":[],"props":[{"name":"href","type":"string","docs":"The url the link should point to.","docsTags":[],"optional":false},{"name":"rel","type":"string","docs":"The `rel` attribute for the link.\nUnless explicitly provided, in our components, this is\nautomatically set to `\"noopener noreferrer\"`\nwhen `target=\"_blank\"` is used, for improved security.\nProviding an empty string will override the default.","docsTags":[],"optional":true},{"name":"target","type":"string","docs":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info.","docsTags":[],"optional":true},{"name":"text","type":"string","docs":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface.","docsTags":[],"optional":true},{"name":"title","type":"string","docs":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/link.types.ts"]},{"type":"interface","name":"ListSeparator","typeParams":[],"docs":"Indicates that a separator should be rendered.\nUsed in lists and menus to separate items into sections.","docsTags":[],"props":[{"name":"separator","type":"true","docs":"Indicates that a separator should be rendered.","docsTags":[],"optional":false},{"name":"text","type":"string","docs":"Text to display in the separator.\nThis can be used as a label for the section following the separator.\nIf not specified, the separator will be rendered without a label.","docsTags":[],"optional":true}],"methods":[],"sources":["/home/runner/work/lime-elements/lime-elements/src/global/shared-types/separator.types.ts"]}],"schemas":[{"type":"object","$id":"limel-3d-hover-effect-glow","properties":{}},{"type":"object","$id":"limel-action-bar","properties":{"accessibleLabel":{"type":"string","title":"Accessible Label","description":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nExample value: \"toolbar\""},"actions":{"type":"object","title":"Actions","description":"Items that are placed in the action bar.\nThese represent primary actions.","additionalProperties":true},"collapsible":{"type":"boolean","title":"Collapsible","description":"When set to `true`, the action bar will be collapsible.","default":false},"language":{"type":"string","title":"Language","description":"Defines the language for translations.","default":"document.documentElement.lang as Languages","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"layout":{"type":"string","title":"Layout","description":"- When set to `fullWidth`, the component will take the\nentire width of its container.\n- When set to `floating`, the component will get basic stylings\nto visualize the floating state.\n:::note\nYou should still properly position the component\naccording to the structure of your user interface.\nFor example, use an `absolute` or `fixed` position.\n:::","oneOf":[{"type":"string","const":"floating","title":"floating"},{"type":"string","const":"fullWidth","title":"fullWidth"}]},"openDirection":{"type":"string","title":"Open Direction","description":"Defines the location that the content of the overflow menu\nappears, in relation to its trigger.","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]}}},{"type":"object","$id":"limel-action-bar-item","properties":{"isVisible":{"type":"boolean","title":"Is Visible","description":"When the item is displayed in the available width,\nthis will be `false`.","default":true},"item":{"type":"object","title":"Item","description":"Item that is placed in the action bar.","additionalProperties":true},"selected":{"type":"boolean","title":"Selected","description":"When the item is selected, this will be `true`.","default":false}}},{"type":"object","$id":"limel-action-bar-overflow-menu","properties":{"items":{"type":"object","title":"Items","description":"List of the items that should be rendered in the overflow menu.","additionalProperties":true},"openDirection":{"type":"string","title":"Open Direction","description":"Defines the location that the content of the overflow menu\nappears, in relation to its trigger.\nIt defaults to `bottom-end`, since in normal scenarios\n(for example when the action bar is not floating at the bottom of the screen)\nthis menu is the right-most item in the user interface of the component.","default":"'bottom-end'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]},"overFlowIcon":{"type":"object","title":"Over Flow Icon","description":"Icon to display in the overflow menu trigger.\nIf not provided, the number of items in the overflow menu will be displayed.","$ref":"#/definitions/Icon"}},"definitions":{"Icon":{"type":"object","properties":{"backgroundColor":{"type":"object","title":"Background Color","description":"Background color of the icon.","additionalProperties":true},"color":{"type":"object","title":"Color","description":"Color of the icon.","additionalProperties":true},"name":{"type":"string","title":"Name","description":"Name of the icon, refers to the icon's filename in lime-icons8 repository."},"title":{"type":"string","title":"Title","description":"Used primarily to improve accessibility for users who\ntake advantage of assistive technologies; but also\nto clarify further what an icon tries to resemble\nfor sighted users.\nDepending on the component which is using the `Icon` interface,\nthe `title` might be used as a `title` attribute on the\nrendered icon element, as an `aria-label` attribute, or as a\n`label` in a tooltip associated with the icon. Documentations\nabout the accessibility of the component should provide more\ninformation about how the `title` is used."}}}}},{"type":"object","$id":"limel-ai-avatar","properties":{"isThinking":{"type":"boolean","title":"Is Thinking","description":"Set to `true` to trigger animations that indicate that the AI is\n\"thinking\" or processing something.","default":false},"language":{"type":"string","title":"Language","description":"Defines the language for translations.","default":"document.documentElement.lang as Languages","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]}}},{"type":"object","$id":"limel-badge","properties":{"label":{"type":"string","title":"Label","description":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters."}}},{"type":"object","$id":"limel-banner","properties":{"icon":{"type":"string","title":"Icon","description":"Set icon for the banner"},"message":{"type":"string","title":"Message","description":"The text to show on the banner."}}},{"type":"object","$id":"limel-breadcrumbs","properties":{"divider":{"type":"string","title":"Divider","description":"The visual divider that separates items.\nIt must be a single character such as `-` or `,`.","default":"'›'"},"items":{"type":"array","title":"Items","description":"List of items in the breadcrumbs,\neach representing a step or a page.","items":{"type":"object","$ref":"#/definitions/BreadcrumbsItem"}}},"definitions":{"BreadcrumbsItem":{"type":"object","properties":{"icon":{"type":"string","title":"Icon","description":"Icon of the step.","oneOf":[{"type":"string","const":"string","title":"string"},{"type":"string","const":"Omit<Icon, backgroundColor>","title":"Omit<Icon, backgroundColor>"}]},"link":{"type":"string","title":"Link","description":"If supplied, the breadcrumbs steps will be a clickable links.","oneOf":[{"type":"string","const":"Omit<Link, target","title":"Omit<Link, target"},{"type":"string","const":"text>","title":"text>"}]},"text":{"type":"string","title":"Text","description":"label displayed on the step."},"type":{"type":"object","title":"Type","description":"If set to `icon-only`, the `text` will be rendered as a tooltip\nand the item will only display the defined `icon`.","additionalProperties":true}}}}},{"type":"object","$id":"limel-button","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the button.","default":false},"icon":{"type":"object","title":"Icon","description":"Set icon for the button","additionalProperties":true},"label":{"type":"string","title":"Label","description":"The text to show on the button."},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","default":false},"loadingFailed":{"type":"boolean","title":"Loading Failed","description":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","default":false},"outlined":{"type":"boolean","title":"Outlined","description":"Set to `true` to make the button outlined.","default":false},"primary":{"type":"boolean","title":"Primary","description":"Set to `true` to make the button primary.","default":false}}},{"type":"object","$id":"limel-button-group","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"True if the button-group should be disabled","default":false},"value":{"type":"array","title":"Value","description":"List of buttons for the group","items":{"type":"object","$ref":"#/definitions/Button"}}},"definitions":{"Button":{"type":"object","properties":{"badge":{"type":"string","title":"Badge","description":"The label displayed in the badge"},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use"},"id":{"type":"string","title":"Id","description":"ID of the button. Must be unique."},"selected":{"type":"boolean","title":"Selected","description":"True if the button should be selected. only first button will be selected."},"title":{"type":"string","title":"Title","description":"Text or label title in the button."}}}}},{"type":"object","$id":"limel-callout","properties":{"heading":{"type":"string","title":"Heading","description":"Heading of the callout, which can be used to override the\ndefault heading which is displayed based on the chosen `type`."},"icon":{"type":"string","title":"Icon","description":"Icon of the callout, which can be used to override the\ndefault icon which is displayed based on the chosen `type`."},"language":{"type":"string","title":"Language","description":"Defines the language for translations.\nWill translate the default headings for supported languages.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"type":{"type":"string","title":"Type","description":"Defines how the component is visualized, for example\nwhich heading, color or icon is used in its user interface.","default":"'note'","oneOf":[{"type":"string","const":"caution","title":"caution"},{"type":"string","const":"important","title":"important"},{"type":"string","const":"note","title":"note"},{"type":"string","const":"tip","title":"tip"},{"type":"string","const":"warning","title":"warning"}]}}},{"type":"object","$id":"limel-card","properties":{"actions":{"type":"object","title":"Actions","description":"Actions to display in the card,\nto provide the user with options to interact with the content.","additionalProperties":true},"clickable":{"type":"boolean","title":"Clickable","description":"When true, improve the accessibility of the component and hints the user\nthat the card can be interacted width.","default":false},"heading":{"type":"string","title":"Heading","description":"Heading of the card,\nto provide a short title about the context."},"icon":{"type":"object","title":"Icon","description":"An icon, to display along with the heading and subheading.","additionalProperties":true},"image":{"type":"object","title":"Image","description":"A hero image to display in the card,\nto enrich the content with visual information.","$ref":"#/definitions/Image"},"orientation":{"type":"string","title":"Orientation","description":"The orientation of the card,\nspecially useful when the card has an image.","default":"'portrait'","oneOf":[{"type":"string","const":"landscape","title":"landscape"},{"type":"string","const":"portrait","title":"portrait"}]},"subheading":{"type":"string","title":"Subheading","description":"Subheading of the card\nto provide a short description of the context."},"value":{"type":"string","title":"Value","description":"The content of the card.\nSupports markdown, to provide a rich text experience."}},"definitions":{"Image":{"type":"object","properties":{"alt":{"type":"string","title":"Alt","description":"The alternative text of the image, used to improve accessibility."},"loading":{"type":"string","title":"Loading","description":"The `loading` attribute of the image.\n- `lazy` means that the image will be loaded only when it is in the viewport.\n- `eager` means that the image will be loaded as soon as possible.","oneOf":[{"type":"string","const":"lazy","title":"lazy"},{"type":"string","const":"eager","title":"eager"}]},"src":{"type":"string","title":"Src","description":"The path to the image file."}}}}},{"type":"object","$id":"limel-chart","properties":{"accessibleItemsLabel":{"type":"string","title":"Accessible Items Label","description":"Helps users of assistive technologies to understand\nwhat the items in the chart represent."},"accessibleLabel":{"type":"string","title":"Accessible Label","description":"Helps users of assistive technologies to understand\nthe context of the chart, and what is being displayed."},"axisIncrement":{"type":"number","title":"Axis Increment","description":"Specifies the increment for the axis lines."},"items":{"type":"object","title":"Items","description":"List of items in the chart,\neach representing a data point.","additionalProperties":true},"language":{"type":"string","title":"Language","description":"Defines the language for translations.\nWill translate the translatable strings on the components.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"loading":{"type":"boolean","title":"Loading","description":"Indicates whether the chart is in a loading state.","default":false},"maxValue":{"type":"number","title":"Max Value","description":"Specifies the range that items' values could be in.\nThis is used in calculation of the size of the items in the chart.\nWhen not provided, the sum of all values in the items will be considered as the range."},"orientation":{"type":"string","title":"Orientation","description":"Defines whether the chart is intended to be displayed wide or tall.\nDoes not have any effect on chart types which generate circular forms.","default":"'landscape'","oneOf":[{"type":"string","const":"landscape","title":"landscape"},{"type":"string","const":"portrait","title":"portrait"}]},"type":{"type":"string","title":"Type","description":"Defines how items are visualized in the chart.","default":"'stacked-bar'","oneOf":[{"type":"string","const":"area","title":"area"},{"type":"string","const":"bar","title":"bar"},{"type":"string","const":"dot","title":"dot"},{"type":"string","const":"doughnut","title":"doughnut"},{"type":"string","const":"line","title":"line"},{"type":"string","const":"nps","title":"nps"},{"type":"string","const":"pie","title":"pie"},{"type":"string","const":"ring","title":"ring"},{"type":"string","const":"stacked-bar","title":"stacked-bar"}]}}},{"type":"object","$id":"limel-checkbox","properties":{"checked":{"type":"boolean","title":"Checked","description":"The value of the checkbox. Set to `true` to make the checkbox checked.","default":false},"disabled":{"type":"boolean","title":"Disabled","description":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","default":false},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the checkbox"},"indeterminate":{"type":"boolean","title":"Indeterminate","description":"Enables indeterminate state. Set to `true` to signal indeterminate check.","default":false},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value is invalid."},"label":{"type":"string","title":"Label","description":"The checkbox label."},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","default":false},"readonlyLabels":{"type":"array","title":"Readonly Labels","description":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","items":{"type":"object","$ref":"#/definitions/Label"}},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the checkbox must be checked.","default":false}},"definitions":{"Label":{"type":"object","properties":{"icon":{"type":"object","title":"Icon","description":"Icon to display when the label is active","additionalProperties":true},"text":{"type":"string","title":"Text","description":"Text to display when the label is active"},"value":{"type":"object","title":"Value","description":"The value of the label","additionalProperties":true}}}}},{"type":"object","$id":"limel-chip","properties":{"badge":{"type":"string","title":"Badge","description":"The value of the badge, displayed on the chip."},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the chip.","default":false},"icon":{"type":"object","title":"Icon","description":"Icon of the chip.","additionalProperties":true},"identifier":{"type":"string","title":"Identifier","description":"Identifier for the chip. Must be unique.","default":"crypto.randomUUID()"},"image":{"type":"object","title":"Image","description":"A picture to be displayed instead of the icon on the chip.","$ref":"#/definitions/Image"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to visualize the chip in an \"invalid\" or \"error\" state.","default":false},"language":{"type":"string","title":"Language","description":"Defines the language for translations.\nWill translate the translatable strings on the components.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"link":{"type":"object","title":"Link","description":"If supplied, the chip will become a clickable link.","additionalProperties":true},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to put the component in the `loading` state,\nand render an indeterminate progress indicator inside the chip.\nThis does _not_ disable the interactivity of the chip!","default":false},"menuItems":{"type":"array","title":"Menu Items","description":"When provided, the chip will render an ellipsis menu with the supplied items.\nAlso, this will hide the \"remove button\" when `removable={true}`, as\nthe remove button will automatically become the last item in the menu.","items":{"type":"object","additionalProperties":true}},"progress":{"type":"number","title":"Progress","description":"Reflects the current value of a progress bar on the chip,\nvisualizing the percentage of an ongoing process.\nMust be a number between `0` and `100`."},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to render the chip as a static UI element.\nUseful when the parent component has a `readonly` state.","default":false},"removable":{"type":"boolean","title":"Removable","description":"Set to `true` to render a remove button on the chip.","default":false},"selected":{"type":"boolean","title":"Selected","description":"Set to `true` to visualize the chip in a \"selected\" state.\nThis is typically used when the chip is used in a chip-set\nalong with other chips.","default":false},"size":{"type":"string","title":"Size","description":"Defines the size of the chip.","default":"'default'","oneOf":[{"type":"string","const":"default","title":"default"},{"type":"string","const":"small","title":"small"}]},"text":{"type":"string","title":"Text","description":"Label displayed on the chip"},"type":{"type":"string","title":"Type","description":"Set to `filter` to render the chip with a distinct style\nsuitable for visualizing filters.","default":"'default'","oneOf":[{"type":"string","const":"default","title":"default"},{"type":"string","const":"filter","title":"filter"}]}},"definitions":{"Image":{"type":"object","properties":{"alt":{"type":"string","title":"Alt","description":"The alternative text of the image, used to improve accessibility."},"loading":{"type":"string","title":"Loading","description":"The `loading` attribute of the image.\n- `lazy` means that the image will be loaded only when it is in the viewport.\n- `eager` means that the image will be loaded as soon as possible.","oneOf":[{"type":"string","const":"lazy","title":"lazy"},{"type":"string","const":"eager","title":"eager"}]},"src":{"type":"string","title":"Src","description":"The path to the image file."}}}}},{"type":"object","$id":"limel-chip-set","properties":{"autocomplete":{"type":"string","title":"Autocomplete","description":"For chip-set of type `input`, defines whether the input field should have autocomplete enabled.\nRead more about the `autocomplete` attribute\n[here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).","default":"'off'"},"clearAllButton":{"type":"boolean","title":"Clear All Button","description":"Whether the \"Clear all\" buttons should be shown","default":true},"delimiter":{"type":"string","title":"Delimiter","description":"For chip-set of type `input`. Sets delimiters between chips."},"disabled":{"type":"boolean","title":"Disabled","description":"True if the chip set should be disabled","default":false},"emptyInputOnBlur":{"type":"boolean","title":"Empty Input On Blur","description":"Whether the input field should be emptied when the chip-set loses focus.","default":true},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation."},"inputType":{"type":"string","title":"Input Type","description":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","default":"'text'","oneOf":[{"type":"string","const":"search","title":"search"},{"type":"string","const":"text","title":"text"}]},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the input field is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"Label for the chip-set"},"language":{"type":"string","title":"Language","description":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"leadingIcon":{"type":"string","title":"Leading Icon","description":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field"},"maxItems":{"type":"number","title":"Max Items","description":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied."},"readonly":{"type":"boolean","title":"Readonly","description":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","default":false},"required":{"type":"boolean","title":"Required","description":"True if the control requires a value","default":false},"searchLabel":{"type":"string","title":"Search Label","description":"Search label to display when type is `input` and component is in search mode"},"type":{"type":"string","title":"Type","description":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable.\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","oneOf":[{"type":"string","const":"choice","title":"choice"},{"type":"string","const":"filter","title":"filter"},{"type":"string","const":"input","title":"input"}]},"value":{"type":"array","title":"Value","description":"List of chips for the set","items":{"type":"object","$ref":"#/definitions/Chip"}}},"definitions":{"Chip":{"type":"object","properties":{"badge":{"type":"number","title":"Badge","description":"The value of the badge."},"href":{"type":"string","title":"Href","description":"If supplied, the chip will render a link, using the supplied href."},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use. Not valid for `filter`.","additionalProperties":true},"iconBackgroundColor":{"type":"object","title":"Icon Background Color","description":"Background color of the icon. Overrides `--icon-background-color`.","additionalProperties":true},"iconFillColor":{"type":"object","title":"Icon Fill Color","description":"Color of the icon. Overrides `--icon-color`.","additionalProperties":true},"iconTitle":{"type":"string","title":"Icon Title","description":"`title` attribute of the icon"},"id":{"type":"string","title":"Id","description":"ID of the chip. Must be unique."},"image":{"type":"object","title":"Image","description":"A picture to be displayed instead of the icon on the chip.","additionalProperties":true},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to put the chip in the `loading` state, and render an\nindeterminate progress indicator inside the chip."},"menuItems":{"type":"array","title":"Menu Items","description":"List of the items to display as in a menu, on the chip.","items":{"type":"object","additionalProperties":true}},"removable":{"type":"boolean","title":"Removable","description":"Whether the chip should be removable. Not valid for `choice`."},"selected":{"type":"boolean","title":"Selected","description":"Whether the chip is selected. Only valid for `choice` and `filter`."},"text":{"type":"string","title":"Text","description":"Text to display inside the chip."},"value":{"type":"object","title":"Value","description":"Value of the chip.","additionalProperties":true}}}}},{"type":"object","$id":"limel-circular-progress","properties":{"displayPercentageColors":{"type":"boolean","title":"Display Percentage Colors","description":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","default":false},"maxValue":{"type":"number","title":"Max Value","description":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","default":null},"prefix":{"type":"string","title":"Prefix","description":"The prefix which is displayed before the `value`, must be a few characters characters long."},"size":{"type":"string","title":"Size","description":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-large","title":"x-large"},{"type":"string","const":"x-small","title":"x-small"}]},"suffix":{"type":"string","title":"Suffix","description":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","default":"'%'"},"value":{"type":"number","title":"Value","description":"The value of the progress bar.","default":0}}},{"type":"object","$id":"limel-code-editor","properties":{"colorScheme":{"type":"string","title":"Color Scheme","description":"Select color scheme for the editor","default":"'auto'","oneOf":[{"type":"string","const":"auto","title":"auto"},{"type":"string","const":"dark","title":"dark"},{"type":"string","const":"light","title":"light"}]},"fold":{"type":"boolean","title":"Fold","description":"Allows the user to fold code","default":false},"language":{"type":"string","title":"Language","description":"The language of the code","oneOf":[{"type":"string","const":"javascript","title":"javascript"},{"type":"string","const":"jinja2","title":"jinja2"},{"type":"string","const":"json","title":"json"},{"type":"string","const":"typescript","title":"typescript"}]},"lineNumbers":{"type":"boolean","title":"Line Numbers","description":"Displays line numbers in the editor","default":false},"lint":{"type":"boolean","title":"Lint","description":"Enables linting of JSON content","default":false},"readonly":{"type":"boolean","title":"Readonly","description":"Disables editing of the editor content","default":false},"value":{"type":"string","title":"Value","description":"The code to be rendered","default":"''"}}},{"type":"object","$id":"limel-collapsible-section","properties":{"actions":{"type":"array","title":"Actions","description":"Actions to place to the far right inside the header","items":{"type":"object","$ref":"#/definitions/Action"}},"header":{"type":"string","title":"Header","description":"Text to display in the header of the section"},"icon":{"type":"object","title":"Icon","description":"Icon to display in the header of the section","additionalProperties":true},"invalid":{"type":"boolean","title":"Invalid","description":"`true` if the section is invalid, `false` if valid.\nThis can be used to indicate that the content inside the section is invalid.","default":false},"isOpen":{"type":"boolean","title":"Is Open","description":"`true` if the section is expanded, `false` if collapsed.","default":false},"language":{"type":"string","title":"Language","description":"Defines the language for translations.\nWill translate the translatable strings on the components.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]}},"definitions":{"Action":{"type":"object","properties":{"disabled":{"type":"boolean","title":"Disabled","description":""},"icon":{"type":"string","title":"Icon","description":""},"id":{"type":"string","title":"Id","description":""},"label":{"type":"string","title":"Label","description":""}}}}},{"type":"object","$id":"limel-color-picker","properties":{"helperText":{"type":"string","title":"Helper Text","description":"Helper text of the input field"},"label":{"type":"string","title":"Label","description":"The label of the input field"},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` if a value is readonly. This makes the component un-interactive."},"required":{"type":"boolean","title":"Required","description":"Set to `true` if a value is required"},"tooltipLabel":{"type":"string","title":"Tooltip Label","description":"Displayed as tooltips when picker is hovered."},"value":{"type":"string","title":"Value","description":"Name or code of the chosen color"}}},{"type":"object","$id":"limel-color-picker-palette","properties":{"helperText":{"type":"string","title":"Helper Text","description":"Helper text of the input field"},"label":{"type":"string","title":"Label","description":"Label of the input field"},"required":{"type":"boolean","title":"Required","description":"Set to `true` if a value is required"},"value":{"type":"string","title":"Value","description":"Color value that is manually typed by the user"}}},{"type":"object","$id":"limel-config","properties":{"config":{"type":"object","title":"Config","description":"Global configuration for Lime Elements.","additionalProperties":true}}},{"type":"object","$id":"limel-date-picker","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"format":{"type":"string","title":"Format","description":"Format to display the selected date in."},"formatter":{"type":"object","title":"Formatter","description":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","additionalProperties":true},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"Text to display next to the date picker"},"language":{"type":"string","title":"Language","description":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"placeholder":{"type":"string","title":"Placeholder","description":"The placeholder text shown inside the input field, when the field is focused and empty"},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the field is required.","default":false},"type":{"type":"string","title":"Type","description":"Type of date picker.","default":"'datetime'","oneOf":[{"type":"string","const":"date","title":"date"},{"type":"string","const":"datetime","title":"datetime"},{"type":"string","const":"month","title":"month"},{"type":"string","const":"quarter","title":"quarter"},{"type":"string","const":"time","title":"time"},{"type":"string","const":"week","title":"week"},{"type":"string","const":"year","title":"year"}]},"value":{"type":"object","title":"Value","description":"The value of the field.","additionalProperties":true}}},{"type":"object","$id":"limel-dialog","properties":{"closingActions":{"type":"object","title":"Closing Actions","description":"Defines which action triggers a close-event.","$ref":"#/definitions/ClosingActions"},"fullscreen":{"type":"boolean","title":"Fullscreen","description":"Set to `true` to make the dialog \"fullscreen\".","default":false},"heading":{"type":"object","title":"Heading","description":"The heading for the dialog, if any.","additionalProperties":true},"open":{"type":"boolean","title":"Open","description":"`true` if the dialog is open, `false` otherwise.","default":false}},"definitions":{"ClosingActions":{"type":"object","properties":{"escapeKey":{"type":"boolean","title":"Escape Key","description":""},"scrimClick":{"type":"boolean","title":"Scrim Click","description":""}}}}},{"type":"object","$id":"limel-dock","properties":{"accessibleLabel":{"type":"string","title":"Accessible Label","description":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\""},"allowResize":{"type":"boolean","title":"Allow Resize","description":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","default":true},"dockFooterItems":{"type":"array","title":"Dock Footer Items","description":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","items":{"type":"object","$ref":"#/definitions/DockItem"}},"dockItems":{"type":"array","title":"Dock Items","description":"Items that are placed in the dock.","items":{"type":"object","$ref":"#/definitions/DockItem"}},"expanded":{"type":"boolean","title":"Expanded","description":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","default":false},"mobileBreakPoint":{"type":"number","title":"Mobile Break Point","description":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","default":null}},"definitions":{"DockItem":{"type":"object","properties":{"badge":{"type":"string","title":"Badge","description":"If specified, will display a notification badge on the buttons in the dock."},"dockMenu":{"type":"object","title":"Dock Menu","description":"Used to specify a custom component to render as a menu for the dock item.","additionalProperties":true},"helperLabel":{"type":"string","title":"Helper Label","description":"Additional helper text for the dock item.\nExample usage can be a keyboard shortcut to activate the dock item."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"id":{"type":"string","title":"Id","description":"A non-changing value to uniquely identify each item."},"label":{"type":"string","title":"Label","description":"Text to display for the item."},"selected":{"type":"boolean","title":"Selected","description":"Whether the dock item should indicate it is selected.\nThese dock items normally take the user to a top-level location within\nthe navigation tree; for example \"Home\", \"Search\" or \"My Account\".\nSet `selected` to `true`, when:\n- the user interface is showing the same top-level location as the dock\nitem is pointing at, or\n- the user interface is showing a page which is a sub-location of the\ntop-level location. For example, when user is at\n_My Account ➡ Notification Settings_, the dock item of _My Account_\nshould have the `selected` state."}}}}},{"type":"object","$id":"limel-dock-button","properties":{"expanded":{"type":"boolean","title":"Expanded","description":"When the dock is expanded or collapsed, dock items\nshow labels and tooltips as suitable for the layout.","default":false},"item":{"type":"object","title":"Item","description":"Item that is placed in the dock.","$ref":"#/definitions/DockItem"},"useMobileLayout":{"type":"boolean","title":"Use Mobile Layout","description":"When dock is using mobile layout, dock items\nshow labels and tooltips as suitable for the layout.","default":false}},"definitions":{"DockItem":{"type":"object","properties":{"badge":{"type":"string","title":"Badge","description":"If specified, will display a notification badge on the buttons in the dock."},"dockMenu":{"type":"object","title":"Dock Menu","description":"Used to specify a custom component to render as a menu for the dock item.","additionalProperties":true},"helperLabel":{"type":"string","title":"Helper Label","description":"Additional helper text for the dock item.\nExample usage can be a keyboard shortcut to activate the dock item."},"icon":{"type":"string","title":"Icon","description":"Name of the icon to use."},"id":{"type":"string","title":"Id","description":"A non-changing value to uniquely identify each item."},"label":{"type":"string","title":"Label","description":"Text to display for the item."},"selected":{"type":"boolean","title":"Selected","description":"Whether the dock item should indicate it is selected.\nThese dock items normally take the user to a top-level location within\nthe navigation tree; for example \"Home\", \"Search\" or \"My Account\".\nSet `selected` to `true`, when:\n- the user interface is showing the same top-level location as the dock\nitem is pointing at, or\n- the user interface is showing a page which is a sub-location of the\ntop-level location. For example, when user is at\n_My Account ➡ Notification Settings_, the dock item of _My Account_\nshould have the `selected` state."}}}}},{"type":"object","$id":"limel-dynamic-label","properties":{"defaultLabel":{"type":"object","title":"Default Label","description":"The label to display when no matching value is found in the `labels`\narray. This is a fallback label that ensures there's always a label\ndisplayed for the component.","additionalProperties":true},"labels":{"type":"array","title":"Labels","description":"A list of available labels. Each label has a corresponding value that\nwill be matched with the current `value` of the component to determine\nwhat label to display.","items":{"type":"object","$ref":"#/definitions/Label"}},"value":{"type":"object","title":"Value","description":"The current value of the component which is used to match with the given\n`labels` to determine what label to display.\n\nIf not matching label is found, the `defaultLabel` is displayed.","additionalProperties":true}},"definitions":{"Label":{"type":"object","properties":{"icon":{"type":"object","title":"Icon","description":"Icon to display when the label is active","additionalProperties":true},"text":{"type":"string","title":"Text","description":"Text to display when the label is active"},"value":{"type":"object","title":"Value","description":"The value of the label","additionalProperties":true}}}}},{"type":"object","$id":"limel-file","properties":{"accept":{"type":"string","title":"Accept","description":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","default":"'*'"},"disabled":{"type":"boolean","title":"Disabled","description":"True if the input should be disabled","default":false},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the chosen file is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"The input label."},"language":{"type":"string","title":"Language","description":"Defines the localisation for translations.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the field is required.","default":false},"value":{"type":"object","title":"Value","description":"The selected file.","$ref":"#/definitions/FileInfo"}},"definitions":{"FileInfo":{"type":"object","properties":{"contentType":{"type":"string","title":"Content Type","description":"Content type of file."},"extension":{"type":"string","title":"Extension","description":"Extension of file."},"fileContent":{"type":"object","title":"File Content","description":"the file content","additionalProperties":true},"filename":{"type":"string","title":"Filename","description":"Name of file."},"href":{"type":"string","title":"Href","description":"URL where the file can be downloaded. Note that this is optional. If the\nfile cannot be directly accessed via a unique url, this property should\nbe left undefined or set to `null`."},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use.","additionalProperties":true},"iconBackgroundColor":{"type":"object","title":"Icon Background Color","description":"Background color of the icon. Overrides `--icon-background-color`.","additionalProperties":true},"iconColor":{"type":"object","title":"Icon Color","description":"Icon color. Overrides `--icon-color`.","additionalProperties":true},"id":{"type":"string","title":"Id","description":"ID of the file. Must be unique."},"lastModified":{"type":"object","title":"Last Modified","description":"Date of last modification.","additionalProperties":true},"menuItems":{"type":"array","title":"Menu Items","description":"Custom menu items for the file.","items":{"type":"object","additionalProperties":true}},"size":{"type":"number","title":"Size","description":"Size of file."}}}}},{"type":"object","$id":"limel-file-dropzone","properties":{"accept":{"type":"string","title":"Accept","description":"Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n\nFor media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\nUnique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\nA comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n`.png, .jpg, .jpeg`.","default":"'*'"},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the file dropzone.","default":false},"helperText":{"type":"string","title":"Helper Text","description":"Is displayed to provide supplementary information to the end users,\nfor instance, which filetypes or file sizes are accepted.","default":"''"},"text":{"type":"string","title":"Text","description":"Is displayed when the user is dragging a file over the dropzone.\nA suitable text could for instance be \"Drop your files here\"."}}},{"type":"object","$id":"limel-file-input","properties":{"accept":{"type":"string","title":"Accept","description":"Specifies the types of files that the dropzone will accept. By default, all file types are accepted.\n\nFor media files, formats can be specified using: `audio/*`, `video/*`, `image/*`.\nUnique file type specifiers can also be used, for example: `.jpg`, `.pdf`.\nA comma-separated list of file extensions or MIME types is also acceptable, e.g., `image/png, image/jpeg` or\n`.png, .jpg, .jpeg`.","default":"'*'"},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable file input selection.","default":false},"multiple":{"type":"boolean","title":"Multiple","description":"Set to `true` to enable selection of multiple files","default":false}}},{"type":"object","$id":"limel-file-viewer","properties":{"actions":{"type":"array","title":"Actions","description":"An array of custom actions that can be displayed\nas an action menu on the file which is being displayed.","items":{"type":"object","$ref":"#/definitions/ListItem"}},"allowDownload":{"type":"boolean","title":"Allow Download","description":"Displays a button that allows the user to download the file.\nNote that due to the browser's security policies,\nthe file should be hosted on the same domain\nfor the download button to work properly.\nNot displayed for office files!","default":false},"allowFullscreen":{"type":"boolean","title":"Allow Fullscreen","description":"Displays a button that allows the user to view the file\nin fullscreen mode.\nNot displayed for office files!","default":false},"allowOpenInNewTab":{"type":"boolean","title":"Allow Open In New Tab","description":"Displays a button that allows the user to open the file\nin a new browser tab.\nNot displayed for office files!","default":false},"alt":{"type":"string","title":"Alt","description":"An optional alternative text, mainly for assistive technologies and screen readers.\nIt is used for only image files, as an `alt` attribute.\nShould optimally hold a description of the image,\nwhich is also displayed on the page if the image can't be loaded for some reason."},"filename":{"type":"string","title":"Filename","description":"The name of the file that must also contains its extension.\nThis overrides the filename that the `url` ends with.\nUseful when the `url` does not contain the filename.\nWhen specified, the `filename` will be used as filename of\nthe downloaded file."},"language":{"type":"string","title":"Language","description":"Defines the localization for translations.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"officeViewer":{"type":"object","title":"Office Viewer","description":"Defines the third-party viewer that should be used to render\nthe content of office files, such as word processing documents,\npresentations, or spreadsheets.","additionalProperties":true},"url":{"type":"string","title":"Url","description":"Link to the file"}},"definitions":{"ListItem":{"type":"object","properties":{"actions":{"type":"array","title":"Actions","description":"List of actions to display as a menu at the end of the item.","items":{"type":"object","additionalProperties":true}},"disabled":{"type":"boolean","title":"Disabled","description":"True if the list item should be disabled."},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use.","additionalProperties":true},"iconColor":{"type":"object","title":"Icon Color","description":"Background color of the icon. Overrides `--icon-background-color`.","additionalProperties":true},"image":{"type":"object","title":"Image","description":"A picture to show on the list item.","additionalProperties":true},"primaryComponent":{"type":"object","title":"Primary Component","description":"Component used to render the list item.","additionalProperties":true},"secondaryText":{"type":"string","title":"Secondary Text","description":"Additional supporting text to display in the list item."},"selected":{"type":"boolean","title":"Selected","description":"True if the list item should be selected."},"text":{"type":"string","title":"Text","description":"Text to display in the list item."},"value":{"type":"object","title":"Value","description":"Value of the list item.","additionalProperties":true}}}}},{"type":"object","$id":"limel-flatpickr-adapter","properties":{"format":{"type":"string","title":"Format","description":"Format to display the selected date in."},"formatter":{"type":"object","title":"Formatter","description":"","additionalProperties":true},"inputElement":{"type":"object","title":"Input Element","description":"The native input element to use with flatpickr.","additionalProperties":true},"isOpen":{"type":"boolean","title":"Is Open","description":"Set to `true` if the calendar should be open."},"language":{"type":"string","title":"Language","description":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"type":{"type":"string","title":"Type","description":"Type of date picker.","default":"'datetime'","oneOf":[{"type":"string","const":"date","title":"date"},{"type":"string","const":"datetime","title":"datetime"},{"type":"string","const":"month","title":"month"},{"type":"string","const":"quarter","title":"quarter"},{"type":"string","const":"time","title":"time"},{"type":"string","const":"week","title":"week"},{"type":"string","const":"year","title":"year"}]},"value":{"type":"object","title":"Value","description":"The value of the field.","additionalProperties":true}}},{"type":"object","$id":"limel-flex-container","properties":{"align":{"type":"string","title":"Align","description":"Specify how items are aligned along the cross axis","default":"'center'","oneOf":[{"type":"string","const":"center","title":"center"},{"type":"string","const":"end","title":"end"},{"type":"string","const":"start","title":"start"},{"type":"string","const":"stretch","title":"stretch"}]},"direction":{"type":"string","title":"Direction","description":"Direction of the main axis","default":"'horizontal'","oneOf":[{"type":"string","const":"horizontal","title":"horizontal"},{"type":"string","const":"vertical","title":"vertical"}]},"justify":{"type":"string","title":"Justify","description":"Specify how items are aligned along the main axis","default":"'space-between'","oneOf":[{"type":"string","const":"center","title":"center"},{"type":"string","const":"end","title":"end"},{"type":"string","const":"space-around","title":"space-around"},{"type":"string","const":"space-between","title":"space-between"},{"type":"string","const":"space-evenly","title":"space-evenly"},{"type":"string","const":"start","title":"start"}]},"reverse":{"type":"boolean","title":"Reverse","description":"Reverse the order of the items","default":false}}},{"type":"object","$id":"limel-form","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the whole form.","default":false},"errors":{"type":"object","title":"Errors","description":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","additionalProperties":true},"propsFactory":{"type":"object","title":"Props Factory","description":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","additionalProperties":true},"schema":{"type":"object","title":"Schema","description":"The schema used to render the form","additionalProperties":true},"transformErrors":{"type":"object","title":"Transform Errors","description":"Custom function to customize the default error messages","additionalProperties":true},"value":{"type":"object","title":"Value","description":"Value of the form","additionalProperties":true}}},{"type":"object","$id":"limel-grid","properties":{}},{"type":"object","$id":"limel-header","properties":{"heading":{"type":"string","title":"Heading","description":"Title to display"},"icon":{"type":"object","title":"Icon","description":"Icon to display","additionalProperties":true},"subheading":{"type":"string","title":"Subheading","description":"Subheading to display"},"subheadingDivider":{"type":"string","title":"Subheading Divider","description":"The visual divider that separates the `subheading` and the `supportingText`.\nIt must be a single character such as `-` or `,`.","default":"'·'"},"supportingText":{"type":"string","title":"Supporting Text","description":"An extra string of text to display along with with the Subheading"}}},{"type":"object","$id":"limel-help","properties":{"openDirection":{"type":"string","title":"Open Direction","description":"{@inheritdoc Help.openDirection}","default":"'top-start'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]},"readMoreLink":{"type":"object","title":"Read More Link","description":"{@inheritdoc Help.readMoreLink}","$ref":"#/definitions/Link"},"trigger":{"type":"string","title":"Trigger","description":"{@inheritdoc Help.trigger}","default":"'?'"},"value":{"type":"string","title":"Value","description":"{@inheritdoc Help.value}"}},"definitions":{"Link":{"type":"object","properties":{"href":{"type":"string","title":"Href","description":"The url the link should point to."},"rel":{"type":"string","title":"Rel","description":"The `rel` attribute for the link.\nUnless explicitly provided, in our components, this is\nautomatically set to `\"noopener noreferrer\"`\nwhen `target=\"_blank\"` is used, for improved security.\nProviding an empty string will override the default."},"target":{"type":"string","title":"Target","description":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info."},"text":{"type":"string","title":"Text","description":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface."},"title":{"type":"string","title":"Title","description":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies."}}}}},{"type":"object","$id":"limel-help-content","properties":{"readMoreLink":{"type":"object","title":"Read More Link","description":"","$ref":"#/definitions/Link"},"value":{"type":"string","title":"Value","description":""}},"definitions":{"Link":{"type":"object","properties":{"href":{"type":"string","title":"Href","description":"The url the link should point to."},"rel":{"type":"string","title":"Rel","description":"The `rel` attribute for the link.\nUnless explicitly provided, in our components, this is\nautomatically set to `\"noopener noreferrer\"`\nwhen `target=\"_blank\"` is used, for improved security.\nProviding an empty string will override the default."},"target":{"type":"string","title":"Target","description":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info."},"text":{"type":"string","title":"Text","description":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface."},"title":{"type":"string","title":"Title","description":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies."}}}}},{"type":"object","$id":"limel-helper-line","properties":{"helperText":{"type":"string","title":"Helper Text","description":"The helper text that is displayed on the left side."},"helperTextId":{"type":"string","title":"Helper Text Id","description":"Used by `aria-controls` and `aria-describedby` in the parent component."},"invalid":{"type":"boolean","title":"Invalid","description":"Turns `true`, when the parent component is invalid.\nFor example, when the parent component is `required` but is left empty.\nOr when the input format is invalid.","default":false},"length":{"type":"number","title":"Length","description":"Length of the current input value, coming from the parent component.\nUsed in the character counter section on the right side."},"maxLength":{"type":"number","title":"Max Length","description":"Maximum length of the characters, defined on the parent component.\nUsed in the character counter section on the right side."}}},{"type":"object","$id":"limel-icon","properties":{"badge":{"type":"boolean","title":"Badge","description":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set."},"name":{"type":"string","title":"Name","description":"Name of the icon"},"size":{"type":"string","title":"Size","description":"Size of the icon","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]}}},{"type":"object","$id":"limel-icon-button","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the button.","default":false},"elevated":{"type":"boolean","title":"Elevated","description":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","default":false},"icon":{"type":"string","title":"Icon","description":"The icon to display."},"label":{"type":"string","title":"Label","description":"The text to show to screenreaders and other assistive tech."}}},{"type":"object","$id":"limel-info-tile","properties":{"badge":{"type":"string","title":"Badge","description":"If supplied, the info tile will display a notification badge."},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` if info tile is disabled.","default":false},"icon":{"type":"string","title":"Icon","description":"Name of icon for the info tile."},"label":{"type":"string","title":"Label","description":"The text to show below the info tile. Long labels will be truncated."},"link":{"type":"object","title":"Link","description":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","$ref":"#/definitions/Link"},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","default":false},"prefix":{"type":"string","title":"Prefix","description":"A string of text that is visually placed before the value."},"progress":{"type":"object","title":"Progress","description":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `displayPercentageColors`: false\n\nColors change with intervals of 10 %.","$ref":"#/definitions/InfoTileProgress"},"suffix":{"type":"string","title":"Suffix","description":"A string of text that is visually placed after the value."},"value":{"type":"string","title":"Value","description":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize."}},"definitions":{"InfoTileProgress":{"type":"object","properties":{"displayPercentageColors":{"type":"boolean","title":"Display Percentage Colors","description":"When set to `true`, the progress bar changes color depending on its current value."},"maxValue":{"type":"number","title":"Max Value","description":"The maximum value within the scale that the progress bar should visualize."},"prefix":{"type":"string","title":"Prefix","description":"The prefix which is displayed before the `progressValue`.\nKeep to a few characters at most."},"suffix":{"type":"string","title":"Suffix","description":"The suffix which is displayed after the `value`, must be one or two characters long."},"value":{"type":"number","title":"Value","description":"The value of the progress bar."}}},"Link":{"type":"object","properties":{"href":{"type":"string","title":"Href","description":"The url the link should point to."},"rel":{"type":"string","title":"Rel","description":"The `rel` attribute for the link.\nUnless explicitly provided, in our components, this is\nautomatically set to `\"noopener noreferrer\"`\nwhen `target=\"_blank\"` is used, for improved security.\nProviding an empty string will override the default."},"target":{"type":"string","title":"Target","description":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info."},"text":{"type":"string","title":"Text","description":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface."},"title":{"type":"string","title":"Title","description":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies."}}}}},{"type":"object","$id":"limel-input-field","properties":{"completions":{"type":"array","title":"Completions","description":"list of suggestions `value` can autocomplete to.","items":{"type":"string"}},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"formatNumber":{"type":"boolean","title":"Format Number","description":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","default":true},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the input field is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"The input label."},"leadingIcon":{"type":"string","title":"Leading Icon","description":"Leading icon to show to the far left in the field."},"locale":{"type":"string","title":"Locale","description":"The locale to use for formatting numbers.","default":"globalConfig.defaultLocale"},"max":{"type":"number","title":"Max","description":"Maximum allowed value if input type is `number`."},"maxlength":{"type":"number","title":"Maxlength","description":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`."},"min":{"type":"number","title":"Min","description":"Minimum allowed value if input type is `number`."},"minlength":{"type":"number","title":"Minlength","description":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`."},"pattern":{"type":"string","title":"Pattern","description":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`."},"placeholder":{"type":"string","title":"Placeholder","description":"The placeholder text shown inside the input field, when the field is focused and empty."},"prefix":{"type":"string","title":"Prefix","description":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`."},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the field is required.","default":false},"showLink":{"type":"boolean","title":"Show Link","description":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","default":false},"step":{"type":"string","title":"Step","description":"Incremental values that are valid if the field type is `number`.","default":"'any'","oneOf":[{"type":"string","const":"any","title":"any"},{"type":"string","const":"number","title":"number"}]},"suffix":{"type":"string","title":"Suffix","description":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`."},"trailingIcon":{"type":"string","title":"Trailing Icon","description":"Trailing icon to show to the far right in the field."},"type":{"type":"string","title":"Type","description":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","default":"'text'","oneOf":[{"type":"string","const":"date","title":"date"},{"type":"string","const":"datetime-local","title":"datetime-local"},{"type":"string","const":"email","title":"email"},{"type":"string","const":"month","title":"month"},{"type":"string","const":"number","title":"number"},{"type":"string","const":"password","title":"password"},{"type":"string","const":"search","title":"search"},{"type":"string","const":"tel","title":"tel"},{"type":"string","const":"text","title":"text"},{"type":"string","const":"textarea","title":"textarea"},{"type":"string","const":"time","title":"time"},{"type":"string","const":"url","title":"url"},{"type":"string","const":"urlAsText","title":"urlAsText"},{"type":"string","const":"week","title":"week"}]},"value":{"type":"string","title":"Value","description":"The value of the field."}}},{"type":"object","$id":"limel-linear-progress","properties":{"accessibleLabel":{"type":"string","title":"Accessible Label","description":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nIf not provided, the generic word of \"Progress bar\" will be used."},"indeterminate":{"type":"boolean","title":"Indeterminate","description":"Puts the progress bar in an indeterminate state","default":false},"language":{"type":"string","title":"Language","description":"Defines the language for translations.\nWill translate the translatable strings on the components.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"value":{"type":"number","title":"Value","description":"The value of the progress bar. Should be between `0` and `1`.","default":0}}},{"type":"object","$id":"limel-list","properties":{"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Set to `true` if the list should display larger icons with a background"},"iconSize":{"type":"string","title":"Icon Size","description":"Size of the icons in the list","default":"'small'","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]},"items":{"type":"object","title":"Items","description":"List of items to display","additionalProperties":true},"maxLinesSecondaryText":{"type":"number","title":"Max Lines Secondary Text","description":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","default":3},"type":{"type":"string","title":"Type","description":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","oneOf":[{"type":"string","const":"checkbox","title":"checkbox"},{"type":"string","const":"radio","title":"radio"},{"type":"string","const":"selectable","title":"selectable"}]}}},{"type":"object","$id":"limel-markdown","properties":{"lazyLoadImages":{"type":"boolean","title":"Lazy Load Images","description":"Enable lazy loading for images","default":false},"value":{"type":"string","title":"Value","description":"The input text. Treated as GitHub Flavored Markdown, with the addition\nthat any included HTML will be parsed and rendered as HTML, rather than\nas text.","default":"''"},"whitelist":{"type":"array","title":"Whitelist","description":"Whitelisted html elements.\n\nAny custom element added here will not be sanitized and thus rendered.\nCan also be set via `limel-config`. Setting this property will override\nthe global config.","items":{"type":"object","$ref":"#/definitions/CustomElementDefinition"}}},"definitions":{"CustomElementDefinition":{"type":"object","properties":{"attributes":{"type":"array","title":"Attributes","description":"","items":{"type":"string"}},"tagName":{"type":"string","title":"Tag Name","description":""}}}}},{"type":"object","$id":"limel-menu","properties":{"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Defines whether the menu should show badges.","default":false},"disabled":{"type":"boolean","title":"Disabled","description":"Sets the disabled state of the menu.","default":false},"emptyResultMessage":{"type":"string","title":"Empty Result Message","description":"Message to display when search returns 0 results."},"gridLayout":{"type":"boolean","title":"Grid Layout","description":"Renders list items in a grid layout, rather than a vertical list","default":false},"items":{"type":"object","title":"Items","description":"A list of items and separators to show in the menu.","additionalProperties":true},"open":{"type":"boolean","title":"Open","description":"Sets the open state of the menu.","default":false},"openDirection":{"type":"string","title":"Open Direction","description":"Decides the menu's location in relation to its trigger","default":"'bottom-start'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]},"rootItem":{"type":"object","title":"Root Item","description":"A root breadcrumb item to show above the menu items.\nClicking it navigates back from a sub-menu to the root menu.","$ref":"#/definitions/BreadcrumbsItem"},"searcher":{"type":"object","title":"Searcher","description":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `MenuItem`:s.\n\nSee the docs for the type `MenuSearcher` for type information on\nthe searcher function itself.","additionalProperties":true},"surfaceWidth":{"type":"object","title":"Surface Width","description":"Decides the width of menu's dropdown","additionalProperties":true}},"definitions":{"BreadcrumbsItem":{"type":"object","properties":{"icon":{"type":"string","title":"Icon","description":"Icon of the step.","oneOf":[{"type":"string","const":"string","title":"string"},{"type":"string","const":"Omit<Icon, backgroundColor>","title":"Omit<Icon, backgroundColor>"}]},"link":{"type":"string","title":"Link","description":"If supplied, the breadcrumbs steps will be a clickable links.","oneOf":[{"type":"string","const":"Omit<Link, target","title":"Omit<Link, target"},{"type":"string","const":"text>","title":"text>"}]},"text":{"type":"string","title":"Text","description":"label displayed on the step."},"type":{"type":"object","title":"Type","description":"If set to `icon-only`, the `text` will be rendered as a tooltip\nand the item will only display the defined `icon`.","additionalProperties":true}}}}},{"type":"object","$id":"limel-menu-list","properties":{"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Set to `true` if the list should display larger icons with a background"},"iconSize":{"type":"string","title":"Icon Size","description":"Size of the icons in the list","default":"'small'","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]},"items":{"type":"object","title":"Items","description":"List of items to display","additionalProperties":true},"maxLinesSecondaryText":{"type":"number","title":"Max Lines Secondary Text","description":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","default":3}}},{"type":"object","$id":"limel-menu-surface","properties":{"allowClicksElement":{"type":"object","title":"Allow Clicks Element","description":"Clicks in this element should not be prevented when the menu surface is open","additionalProperties":true},"open":{"type":"boolean","title":"Open","description":"True if the menu surface is open, false otherwise","default":false}}},{"type":"object","$id":"limel-notched-outline","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to indicate that the input element is\ndisabled. This applies proper visual styles, such as making the outlines\nand the label transparent.","default":false},"hasFloatingLabel":{"type":"boolean","title":"Has Floating Label","description":"Set to `true` when the consumer element needs to render the\nlabel above the input element, despite existence of a `value`.\nFor example in the `text-editor` or `limel-select`,\nwhere the default layout requires a floating label.","default":false},"hasLeadingIcon":{"type":"boolean","title":"Has Leading Icon","description":"Set to `true` when the consumer element displays a leading icon.\nThis applies proper visual styles, such as rendering the label\ncorrectly placed beside the leading icon.","default":false},"hasValue":{"type":"boolean","title":"Has Value","description":"Set to `true` when the user has entered a value for the input element,\nshrinking the label in size, and visually rendering it above the entered value.","default":false},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the input element is\ninvalid. This applies proper visual styles, such as making the outlines red.","default":false},"label":{"type":"string","title":"Label","description":"Label to display for the input element.\n:::important\nNote that the input element of the consumer component will be\nlabeled by this label, using the `labelId` prop.\n:::"},"labelId":{"type":"string","title":"Label Id","description":"The `id` of the input element which should be\nlabeled by the provided label."},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` when the input element is readonly.\nThis applies proper visual styles, such as making the outline transparent.","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` when the input element is required.\nThis applies proper visual styles, such as inclusion of an asterisk\nbeside the label.","default":false}}},{"type":"object","$id":"limel-picker","properties":{"actionPosition":{"type":"string","title":"Action Position","description":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","default":"'bottom'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"top","title":"top"}]},"actionScrollBehavior":{"type":"string","title":"Action Scroll Behavior","description":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","default":"'sticky'","oneOf":[{"type":"string","const":"scroll","title":"scroll"},{"type":"string","const":"sticky","title":"sticky"}]},"actions":{"type":"array","title":"Actions","description":"Static actions that can be clicked by the user.","items":{"type":"object","$ref":"#/definitions/ListItem"}},"allItems":{"type":"array","title":"All Items","description":"Only used if no `searcher` is provided. The picker will then use a\ndefault search function that filters the `allItems` based on the\n`text` and `secondaryText` properties of the items.\nThis way, custom search functions are typically only needed when the\nsearch is done on the server.\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.","items":{"type":"object","$ref":"#/definitions/ListItem"}},"badgeIcons":{"type":"boolean","title":"Badge Icons","description":"Whether badge icons should be used in the result list or not","default":false},"delimiter":{"type":"string","title":"Delimiter","description":"Sets delimiters between chips. Works only when `multiple` is `true`."},"disabled":{"type":"boolean","title":"Disabled","description":"True if the picker should be disabled","default":false},"emptyResultMessage":{"type":"string","title":"Empty Result Message","description":"A message to display when the search returned an empty result"},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the input field is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"Text to display for the input field of the picker"},"leadingIcon":{"type":"string","title":"Leading Icon","description":"Leading icon to show to the far left in the text field"},"multiple":{"type":"boolean","title":"Multiple","description":"True if multiple values are allowed","default":false},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","default":false},"required":{"type":"boolean","title":"Required","description":"True if the control requires a value","default":false},"searchLabel":{"type":"string","title":"Search Label","description":"Search label to display in the input field when searching"},"searcher":{"type":"object","title":"Searcher","description":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","additionalProperties":true},"value":{"type":"object","title":"Value","description":"Currently selected value or values. Where the value can be an object.","additionalProperties":true}},"definitions":{"ListItem":{"type":"object","properties":{"actions":{"type":"array","title":"Actions","description":"List of actions to display as a menu at the end of the item.","items":{"type":"object","additionalProperties":true}},"disabled":{"type":"boolean","title":"Disabled","description":"True if the list item should be disabled."},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use.","additionalProperties":true},"iconColor":{"type":"object","title":"Icon Color","description":"Background color of the icon. Overrides `--icon-background-color`.","additionalProperties":true},"image":{"type":"object","title":"Image","description":"A picture to show on the list item.","additionalProperties":true},"primaryComponent":{"type":"object","title":"Primary Component","description":"Component used to render the list item.","additionalProperties":true},"secondaryText":{"type":"string","title":"Secondary Text","description":"Additional supporting text to display in the list item."},"selected":{"type":"boolean","title":"Selected","description":"True if the list item should be selected."},"text":{"type":"string","title":"Text","description":"Text to display in the list item."},"value":{"type":"object","title":"Value","description":"Value of the list item.","additionalProperties":true}}}}},{"type":"object","$id":"limel-popover","properties":{"open":{"type":"boolean","title":"Open","description":"True if the content within the popover should be visible","default":false},"openDirection":{"type":"string","title":"Open Direction","description":"Decides the popover's location in relation to its trigger","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]}}},{"type":"object","$id":"limel-popover-surface","properties":{"contentCollection":{"type":"object","title":"Content Collection","description":"Content to render","additionalProperties":true}}},{"type":"object","$id":"limel-portal","properties":{"anchor":{"type":"object","title":"Anchor","description":"The element that the content should be positioned relative to.\nDefaults to the limel-portal element.","additionalProperties":true},"containerId":{"type":"string","title":"Container Id","description":"A unique ID."},"containerStyle":{"type":"object","title":"Container Style","description":"Dynamic styling that can be applied to the container holding the content.","additionalProperties":true},"inheritParentWidth":{"type":"boolean","title":"Inherit Parent Width","description":"Used to make a dropdown have the same width as the trigger, for example\nin `limel-picker`.","default":false},"openDirection":{"type":"string","title":"Open Direction","description":"Decides which direction the portal content should open.","default":"'bottom'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]},"position":{"type":"string","title":"Position","description":"Position of the content.","default":"'absolute'","oneOf":[{"type":"string","const":"absolute","title":"absolute"},{"type":"string","const":"fixed","title":"fixed"}]},"visible":{"type":"boolean","title":"Visible","description":"True if the content within the portal should be visible.\n\nIf the content is from within a dialog for instance, this can be set to\ntrue from false when the dialog opens to position the content properly.","default":false}}},{"type":"object","$id":"limel-progress-flow","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"flowItems":{"type":"array","title":"Flow Items","description":"What flow items to render","items":{"type":"object","$ref":"#/definitions/FlowItem"}},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","default":false}},"definitions":{"FlowItem":{"type":"object","properties":{"actions":{"type":"array","title":"Actions","description":"List of actions to display as a menu at the end of the item.","items":{"type":"object","additionalProperties":true}},"disabled":{"type":"boolean","title":"Disabled","description":"True if the list item should be disabled."},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use.","additionalProperties":true},"iconColor":{"type":"object","title":"Icon Color","description":"Fill color of the icon on the step,\nwhen it is neither selected nor passed.","additionalProperties":true},"image":{"type":"object","title":"Image","description":"A picture to show on the list item.","additionalProperties":true},"isOffProgress":{"type":"boolean","title":"Is Off Progress","description":"Determines whether a step should be a part of the flow,\nor should be an independent step visually located on the side."},"passedColor":{"type":"object","title":"Passed Color","description":"Background color of the step, when it is passed.","additionalProperties":true},"primaryComponent":{"type":"object","title":"Primary Component","description":"Component used to render the list item.","additionalProperties":true},"secondaryText":{"type":"string","title":"Secondary Text","description":"Additional supporting text to display in the list item."},"selected":{"type":"boolean","title":"Selected","description":"True if the list item should be selected."},"selectedColor":{"type":"object","title":"Selected Color","description":"Background color of selected step.","additionalProperties":true},"text":{"type":"string","title":"Text","description":"Text to display in the list item."},"value":{"type":"object","title":"Value","description":"Value of the list item.","additionalProperties":true}}}}},{"type":"object","$id":"limel-progress-flow-item","properties":{"currentStep":{"type":"boolean","title":"Current Step","description":"True for current step","default":false},"disabled":{"type":"boolean","title":"Disabled","description":"True if the flow item should be disabled","default":false},"item":{"type":"object","title":"Item","description":"The flow item that should be rendered","$ref":"#/definitions/FlowItem"},"readonly":{"type":"boolean","title":"Readonly","description":"True if the flow item should be readonly","default":false}},"definitions":{"FlowItem":{"type":"object","properties":{"actions":{"type":"array","title":"Actions","description":"List of actions to display as a menu at the end of the item.","items":{"type":"object","additionalProperties":true}},"disabled":{"type":"boolean","title":"Disabled","description":"True if the list item should be disabled."},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use.","additionalProperties":true},"iconColor":{"type":"object","title":"Icon Color","description":"Fill color of the icon on the step,\nwhen it is neither selected nor passed.","additionalProperties":true},"image":{"type":"object","title":"Image","description":"A picture to show on the list item.","additionalProperties":true},"isOffProgress":{"type":"boolean","title":"Is Off Progress","description":"Determines whether a step should be a part of the flow,\nor should be an independent step visually located on the side."},"passedColor":{"type":"object","title":"Passed Color","description":"Background color of the step, when it is passed.","additionalProperties":true},"primaryComponent":{"type":"object","title":"Primary Component","description":"Component used to render the list item.","additionalProperties":true},"secondaryText":{"type":"string","title":"Secondary Text","description":"Additional supporting text to display in the list item."},"selected":{"type":"boolean","title":"Selected","description":"True if the list item should be selected."},"selectedColor":{"type":"object","title":"Selected Color","description":"Background color of selected step.","additionalProperties":true},"text":{"type":"string","title":"Text","description":"Text to display in the list item."},"value":{"type":"object","title":"Value","description":"Value of the list item.","additionalProperties":true}}}}},{"type":"object","$id":"limel-prosemirror-adapter","properties":{"contentType":{"type":"string","title":"Content Type","description":"The type of content that the editor should handle and emit, defaults to `markdown`\n\nAssumed to be set only once, so not reactive to changes","default":"'markdown'","oneOf":[{"type":"string","const":"html","title":"html"},{"type":"string","const":"markdown","title":"markdown"}]},"customElements":{"type":"array","title":"Custom Elements","description":"set to private to avoid usage while under development","items":{"type":"object","$ref":"#/definitions/CustomElementDefinition"}},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"language":{"type":"string","title":"Language","description":"Defines the language for translations.","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"triggerCharacters":{"type":"array","title":"Trigger Characters","description":"set to private to avoid usage while under development","items":{"type":"object","additionalProperties":true}},"ui":{"type":"string","title":"Ui","description":"Specifies the visual appearance of the editor.","default":"'standard'","oneOf":[{"type":"string","const":"minimal","title":"minimal"},{"type":"string","const":"no-toolbar","title":"no-toolbar"},{"type":"string","const":"standard","title":"standard"}]},"value":{"type":"string","title":"Value","description":"The value of the editor, expected to be markdown"}},"definitions":{"CustomElementDefinition":{"type":"object","properties":{"attributes":{"type":"array","title":"Attributes","description":"","items":{"type":"string"}},"tagName":{"type":"string","title":"Tag Name","description":""}}}}},{"type":"object","$id":"limel-select","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","default":false},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus."},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the select is\ninvalid."},"label":{"type":"string","title":"Label","description":"Text to display next to the select."},"multiple":{"type":"boolean","title":"Multiple","description":"Set to `true` to allow multiple values to be selected.","default":false},"options":{"type":"object","title":"Options","description":"List of options.","additionalProperties":true},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","default":false},"required":{"type":"boolean","title":"Required","description":"True if the control requires a value.","default":false},"value":{"type":"object","title":"Value","description":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","additionalProperties":true}}},{"type":"object","$id":"limel-shortcut","properties":{"badge":{"type":"string","title":"Badge","description":"If specified, will display a notification badge\non the shortcut."},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` if shortcut is disabled.","default":false},"icon":{"type":"string","title":"Icon","description":"Name of icon for the shortcut."},"label":{"type":"string","title":"Label","description":"The text to show below the shortcut. Long label will be truncated."},"link":{"type":"object","title":"Link","description":"If supplied, the shortcut will be a clickable link.","$ref":"#/definitions/Link"}},"definitions":{"Link":{"type":"object","properties":{"href":{"type":"string","title":"Href","description":"The url the link should point to."},"rel":{"type":"string","title":"Rel","description":"The `rel` attribute for the link.\nUnless explicitly provided, in our components, this is\nautomatically set to `\"noopener noreferrer\"`\nwhen `target=\"_blank\"` is used, for improved security.\nProviding an empty string will override the default."},"target":{"type":"string","title":"Target","description":"Target for the link. See\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target\nfor more info."},"text":{"type":"string","title":"Text","description":"The text value to use for the link.\nNote that this might not be used by all components that use the\nLink interface."},"title":{"type":"string","title":"Title","description":"Title for the link. Read by assistive tech and shown when the\nlink is hovered. Can be used to provide additional information\nabout the link. It improves accessibility both for sighted users\nand users of assistive technologies."}}}}},{"type":"object","$id":"limel-slider","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","default":false},"factor":{"type":"number","title":"Factor","description":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","default":null},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the slider"},"label":{"type":"string","title":"Label","description":"Label to display next to the input"},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","default":false},"step":{"type":"number","title":"Step","description":"The stepping interval to use when adjusting the value"},"unit":{"type":"string","title":"Unit","description":"Unit to display next to the value","default":"''"},"value":{"type":"number","title":"Value","description":"The value of the input"},"valuemax":{"type":"number","title":"Valuemax","description":"The maximum value allowed","default":null},"valuemin":{"type":"number","title":"Valuemin","description":"The minimum value allowed","default":null}}},{"type":"object","$id":"limel-snackbar","properties":{"actionText":{"type":"string","title":"Action Text","description":"The text to display for the action button."},"dismissible":{"type":"boolean","title":"Dismissible","description":"When `true` displays a dismiss button on the snackbar,\nallowing users to close it.","default":true},"language":{"type":"string","title":"Language","description":"Defines the language for translations.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"message":{"type":"string","title":"Message","description":"The text message to display."},"multiline":{"type":"boolean","title":"Multiline","description":"Whether to show the snackbar with space for multiple lines of text"},"open":{"type":"boolean","title":"Open","description":"`true` if the snackbar is open, `false` otherwise.","default":false},"timeout":{"type":"number","title":"Timeout","description":"The amount of time in milliseconds to show the snackbar.\nIf set to `-1`, the snackbar will be persistent.\nThis means:\n- either the end user will need to close it manually,\nwhich requires the `dismissible` property to be set to `true`.\n- or the snackbar needs to be closed programmatically.","default":5000}}},{"type":"object","$id":"limel-spinner","properties":{"limeBranded":{"type":"boolean","title":"Lime Branded","description":"Gives the spinner the shape of Lime Technologies' logo","default":false},"size":{"type":"string","title":"Size","description":"Determines the size of the spinner.","default":"'mini'","oneOf":[{"type":"string","const":"large","title":"large"},{"type":"string","const":"medium","title":"medium"},{"type":"string","const":"mini","title":"mini"},{"type":"string","const":"small","title":"small"},{"type":"string","const":"x-small","title":"x-small"}]}}},{"type":"object","$id":"limel-split-button","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the button.","default":false},"icon":{"type":"string","title":"Icon","description":"Set icon for the button"},"items":{"type":"object","title":"Items","description":"A list of items and separators to show in the menu.","additionalProperties":true},"label":{"type":"string","title":"Label","description":"The text to show on the default action part of the button."},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","default":false},"loadingFailed":{"type":"boolean","title":"Loading Failed","description":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","default":false},"primary":{"type":"boolean","title":"Primary","description":"Set to `true` to make the button primary.","default":false}}},{"type":"object","$id":"limel-switch","properties":{"disabled":{"type":"boolean","title":"Disabled","description":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","default":false},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the switch"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value is invalid."},"label":{"type":"string","title":"Label","description":"Label to display next to the switch"},"readonly":{"type":"boolean","title":"Readonly","description":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","default":false},"readonlyLabels":{"type":"array","title":"Readonly Labels","description":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","items":{"type":"object","$ref":"#/definitions/Label"}},"value":{"type":"boolean","title":"Value","description":"The value of the switch","default":false}},"definitions":{"Label":{"type":"object","properties":{"icon":{"type":"object","title":"Icon","description":"Icon to display when the label is active","additionalProperties":true},"text":{"type":"string","title":"Text","description":"Text to display when the label is active"},"value":{"type":"object","title":"Value","description":"The value of the label","additionalProperties":true}}}}},{"type":"object","$id":"limel-tab-bar","properties":{"tabs":{"type":"array","title":"Tabs","description":"List of tabs to display","items":{"type":"object","$ref":"#/definitions/Tab"}}},"definitions":{"Tab":{"type":"object","properties":{"active":{"type":"boolean","title":"Active","description":"True if the tab should be selected."},"badge":{"type":"string","title":"Badge","description":"Shows a badge within the tab with a specified label"},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use.","additionalProperties":true},"iconColor":{"type":"object","title":"Icon Color","description":"Color of the icon.","additionalProperties":true},"id":{"type":"string","title":"Id","description":"Id of the tab. Must be unique."},"text":{"type":"string","title":"Text","description":"Text to display inside the tab."}}}}},{"type":"object","$id":"limel-tab-panel","properties":{"tabs":{"type":"array","title":"Tabs","description":"The tabs to display in the panel","items":{"type":"object","$ref":"#/definitions/Tab"}}},"definitions":{"Tab":{"type":"object","properties":{"active":{"type":"boolean","title":"Active","description":"True if the tab should be selected."},"badge":{"type":"string","title":"Badge","description":"Shows a badge within the tab with a specified label"},"icon":{"type":"object","title":"Icon","description":"Name of the icon to use.","additionalProperties":true},"iconColor":{"type":"object","title":"Icon Color","description":"Color of the icon.","additionalProperties":true},"id":{"type":"string","title":"Id","description":"Id of the tab. Must be unique."},"text":{"type":"string","title":"Text","description":"Text to display inside the tab."}}}}},{"type":"object","$id":"limel-table","properties":{"activeRow":{"type":"object","title":"Active Row","description":"Active row in the table","additionalProperties":true},"aggregates":{"type":"array","title":"Aggregates","description":"Column aggregates to be displayed in the table","items":{"type":"object","$ref":"#/definitions/ColumnAggregate"}},"columns":{"type":"array","title":"Columns","description":"Columns used to display the data","items":{"type":"object","$ref":"#/definitions/Column"}},"data":{"type":"array","title":"Data","description":"Data to be displayed in the table","items":{"type":"object","additionalProperties":true}},"emptyMessage":{"type":"string","title":"Empty Message","description":"A message to display when the table has no data"},"layout":{"type":"string","title":"Layout","description":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","oneOf":[{"type":"string","const":"default","title":"default"},{"type":"string","const":"lowDensity","title":"lowDensity"},{"type":"string","const":"stretchColumns","title":"stretchColumns"},{"type":"string","const":"stretchLastColumn","title":"stretchLastColumn"}]},"loading":{"type":"boolean","title":"Loading","description":"Set to `true` to trigger loading animation","default":false},"mode":{"type":"string","title":"Mode","description":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","default":"'local'","oneOf":[{"type":"string","const":"local","title":"local"},{"type":"string","const":"remote","title":"remote"}]},"movableColumns":{"type":"boolean","title":"Movable Columns","description":"Set to `true` to enable reordering of the columns by dragging them"},"page":{"type":"number","title":"Page","description":"The page to show","default":null},"pageSize":{"type":"number","title":"Page Size","description":"Number of rows per page"},"selectable":{"type":"boolean","title":"Selectable","description":"Enables row selection"},"selection":{"type":"array","title":"Selection","description":"Selected data. Requires `selectable` to be true.","items":{"type":"object","additionalProperties":true}},"sorting":{"type":"array","title":"Sorting","description":"The initial sorted columns","items":{"type":"object","$ref":"#/definitions/ColumnSorter"}},"totalRows":{"type":"number","title":"Total Rows","description":"The number of total rows available for the data"}},"definitions":{"Column":{"type":"object","properties":{"aggregator":{"type":"object","title":"Aggregator","description":"Type of aggregator to use for the column","additionalProperties":true},"component":{"type":"object","title":"Component","description":"Component used to render the field value","additionalProperties":true},"field":{"type":"object","title":"Field","description":"Name of the field in the data","additionalProperties":true},"formatter":{"type":"object","title":"Formatter","description":"Function to format the value before rendering","additionalProperties":true},"headerComponent":{"type":"object","title":"Header Component","description":"A component used to render inside the column header","additionalProperties":true},"headerSort":{"type":"boolean","title":"Header Sort","description":"Defines whether end-user can sort a column"},"horizontalAlign":{"type":"string","title":"Horizontal Align","description":"Sets the horizontal text alignment for the column","oneOf":[{"type":"string","const":"left","title":"left"},{"type":"string","const":"center","title":"center"},{"type":"string","const":"right","title":"right"}]},"title":{"type":"string","title":"Title","description":"Column title to be displayed"}}},"ColumnAggregate":{"type":"object","properties":{"field":{"type":"string","title":"Field","description":"The name of the `Column` field"},"value":{"type":"object","title":"Value","description":"The aggregate value","additionalProperties":true}}},"ColumnSorter":{"type":"object","properties":{"column":{"type":"object","title":"Column","description":"The column being sorted","additionalProperties":true},"direction":{"type":"string","title":"Direction","description":"The direction to sort on","oneOf":[{"type":"string","const":"ASC","title":"ASC"},{"type":"string","const":"DESC","title":"DESC"}]}}}}},{"type":"object","$id":"limel-text-editor","properties":{"allowResize":{"type":"boolean","title":"Allow Resize","description":"Set to `true` to allow the user to vertically resize the editor.\nSet to `false` to disable the resize functionality.","default":true},"contentType":{"type":"string","title":"Content Type","description":"The type of content that the editor should handle and emit, defaults to `markdown`\n\nAssumed to be set only once, so not reactive to changes","default":"'markdown'","oneOf":[{"type":"string","const":"html","title":"html"},{"type":"string","const":"markdown","title":"markdown"}]},"customElements":{"type":"array","title":"Custom Elements","description":"A list of custom elements\n\nAny `CustomElement` that should be used inside the text editor needs\nto be defined here.","items":{"type":"object","$ref":"#/definitions/CustomElementDefinition"}},"disabled":{"type":"boolean","title":"Disabled","description":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","default":false},"helperText":{"type":"string","title":"Helper Text","description":"Optional helper text to display below the input field when it has focus"},"invalid":{"type":"boolean","title":"Invalid","description":"Set to `true` to indicate that the current value of the editor is\ninvalid.","default":false},"label":{"type":"string","title":"Label","description":"The label of the editor"},"language":{"type":"string","title":"Language","description":"Defines the language for translations.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"placeholder":{"type":"string","title":"Placeholder","description":"The placeholder text shown inside the input field,\nwhen the field is empty."},"readonly":{"type":"boolean","title":"Readonly","description":"Set to `true` to make the component read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.\n:::note\nConsider that it might be better to use `limel-markdown`\ninstead of `limel-text-editor` when the goal is visualizing data.\n:::","default":false},"required":{"type":"boolean","title":"Required","description":"Set to `true` to indicate that the field is required.\n\n:::important\nAn empty but required field is not automatically considered invalid.\nYou must make sure to check the validity of the field on your own,\nand properly handle the `invalid` state.\n:::","default":false},"triggers":{"type":"array","title":"Triggers","description":"A set of trigger characters\n\nDefining a character here will enable trigger events to be sent if the\ncharacter is detected in the editor.","items":{"type":"object","additionalProperties":true}},"ui":{"type":"string","title":"Ui","description":"Specifies the visual appearance of the editor.\n\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.","default":"'standard'","oneOf":[{"type":"string","const":"minimal","title":"minimal"},{"type":"string","const":"no-toolbar","title":"no-toolbar"},{"type":"string","const":"standard","title":"standard"}]},"value":{"type":"string","title":"Value","description":"Description of the text inside the editor as markdown"}},"definitions":{"CustomElementDefinition":{"type":"object","properties":{"attributes":{"type":"array","title":"Attributes","description":"","items":{"type":"string"}},"tagName":{"type":"string","title":"Tag Name","description":""}}}}},{"type":"object","$id":"limel-text-editor-link-menu","properties":{"isOpen":{"type":"boolean","title":"Is Open","description":"Open state of the link-menu dialog","default":false},"language":{"type":"string","title":"Language","description":"Defines the language for translations.","default":"'en'","oneOf":[{"type":"string","const":"da","title":"da"},{"type":"string","const":"de","title":"de"},{"type":"string","const":"en","title":"en"},{"type":"string","const":"fi","title":"fi"},{"type":"string","const":"fr","title":"fr"},{"type":"string","const":"nb","title":"nb"},{"type":"string","const":"nl","title":"nl"},{"type":"string","const":"no","title":"no"},{"type":"string","const":"sv","title":"sv"}]},"link":{"type":"object","title":"Link","description":"The link","additionalProperties":true}}},{"type":"object","$id":"limel-tooltip","properties":{"elementId":{"type":"string","title":"Element Id","description":"ID of the owner element that the tooltip should describe.\nMust be a child within the same document fragment as the tooltip element\nitself."},"helperLabel":{"type":"string","title":"Helper Label","description":"Additional helper text for the element.\nExample usage can be a keyboard shortcut to activate the function of the\nowner element."},"label":{"type":"string","title":"Label","description":"Short descriptive text of the owner element."},"maxlength":{"type":"number","title":"Maxlength","description":"The maximum amount of characters before rendering 'label' and\n'helperLabel' in two rows.","default":null},"openDirection":{"type":"string","title":"Open Direction","description":"Decides the tooltip's location in relation to its trigger.","default":"'top'","oneOf":[{"type":"string","const":"bottom","title":"bottom"},{"type":"string","const":"bottom-end","title":"bottom-end"},{"type":"string","const":"bottom-start","title":"bottom-start"},{"type":"string","const":"left","title":"left"},{"type":"string","const":"left-end","title":"left-end"},{"type":"string","const":"left-start","title":"left-start"},{"type":"string","const":"right","title":"right"},{"type":"string","const":"right-end","title":"right-end"},{"type":"string","const":"right-start","title":"right-start"},{"type":"string","const":"top","title":"top"},{"type":"string","const":"top-end","title":"top-end"},{"type":"string","const":"top-start","title":"top-start"}]}}},{"type":"object","$id":"limel-tooltip-content","properties":{"helperLabel":{"type":"string","title":"Helper Label","description":"Read more in tooltip.tsx"},"label":{"type":"string","title":"Label","description":"Read more in tooltip.tsx"},"maxlength":{"type":"number","title":"Maxlength","description":"Read more in tooltip.tsx"}}}],"index":{"documents":[{"path":"/Home/","title":"Home"},{"path":"/DesignGuidelines/","title":"Design Guidelines"},{"path":"/component/limel-action-bar/","title":"Action bar","text":["An action bar is a user interface element commonly found in software applications and websites.\nIt typically appears at the top of the screen or within a specific section\nand serves as a centralized hub for accessing various actions and commands\nrelevant to the current context or page.\n\nThe action bar often contains a set of clickable icons or buttons (icons + labels)\nthat represent specific actions, such as saving, deleting, editing, sharing,\nor bulk operations for selected items.\n\nThe purpose of an action bar is to provide quick and convenient access to\nfrequently used functionalities, enabling users to perform common tasks efficiently.\nIt enhances usability by organizing important actions in a visually prominent and easily accessible location.\n\nThe action bar's design and layout can vary based on the platform or application,\nbut its primary goal remains consistent—to\nempower users to interact with the software and perform desired actions effortlessly.","Basic Example\n\nAn action bar is typically placed on top of a page or section,\ndisplaying multiple buttons in a row.\nSeparators can be added to visually group related actions.\n\n:::tip\nBy default, when `layout=\"fullWidth\"`, all actions will be placed on\nthe left side of the action bar,\nbut you can override this default behavior by\nadding `justify-content: flex-end;`.\n:::","Overflow menu\nWhen the action bar items don't fit in the available space,\nan overflow button is automatically added as the last item on the action bar.\n\nThe menu indicates the quantity of the actions which are currently invisible for the users.\nClicking on the overflow button opens a menu with the remaining actions that didn't fit\nin the available space.","Selected item\nFor some use cases, one or more items in the action bar could\nget a `selected` state. This is useful for example when you want to\nhighlight a currently active item in a list of items.","Using colors\n\nYou can specify colors for single actions, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that most of the actions in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n:::","Floating Example\n\nFor some designs, it may make sense to display the action bar as\na floating element on top of the page's content.\nSet the `layout` prop to `floating` to get the basics styles of\na floating bar.\n\n:::note\n1. In this case, the action bar gets some elevation effect\nusing a `box-shadow`. This is to properly separate the action bar\nform its surrounding context. You can override this by setting another\n`box-shadow`.\n2. Make sure to use a proper `openDirection` for the\noverflow menu.\n3. Make sure there is space on the sides of the action bar,\nso that it doesn't stretch out completely from left edge to the right\nedge. The component is already doing so using a `max-width`,\nbut you can override it by providing another `max-width`.\n:::","Floating action bar with expand button\n\nSome designs may require a floating action bar with an expand button.\nIt can be useful if action bar is covering important content.\nTo make the action bar expandable, set the `collapsible` prop to `true`.","Styling\n\nUsing provided custom CSS properties,\nit is possible to style the action bar.\n\n:::note\nThe `--action-bar-item-icon-color` affects all icons.\nHowever, the `color` specified for `icon` for individual items\nwill override that.\n:::","Creative usage\nSince the action bar can automatically overflow actions which do not\nfit into the available width, it makes the component a good candidate\nfor providing contextual actions within small sections of a user interface.\n\n:::important\nFor this specific usage (`limel-action-bar` as a primary component in `limel-list`)\nthe certain styles are required for the overflow menu to properly work.\nSee the linked CSS file!\n\nThere should be a `min-width` and `max-width` on the component in order to prevent\nthe overflow menu to cause infinite rendering loops.\n:::","Proper usage of the `title` property in the `Icon` interface\n\nIn some scenarios, the `title` property of the item's icon must be used to\nimprove accessibility for unsighted users.\n\nIn most cases, the item's `text` is descriptive enough for the users to understand\nthe meaning of the action. In such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`."],"props":[{"name":"accessibleLabel","tags":[],"text":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nExample value: \"toolbar\"","type":"string"},{"name":"actions","tags":[],"text":"Items that are placed in the action bar.\nThese represent primary actions.","type":"(ListSeparator | ActionBarItem)[]"},{"name":"collapsible","tags":[],"text":"When set to `true`, the action bar will be collapsible.","type":"boolean"},{"name":"language","tags":[],"text":"Defines the language for translations.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"layout","tags":[],"text":"- When set to `fullWidth`, the component will take the\nentire width of its container.\n- When set to `floating`, the component will get basic stylings\nto visualize the floating state.\n:::note\nYou should still properly position the component\naccording to the structure of your user interface.\nFor example, use an `absolute` or `fixed` position.\n:::","type":"\"floating\" | \"fullWidth\""},{"name":"openDirection","tags":[],"text":"Defines the location that the content of the overflow menu\nappears, in relation to its trigger.","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\""}],"events":[{"name":"itemSelected","tags":["public "],"text":"Fired when a action bar item has been clicked.","type":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any>"}],"tags":["exampleComponent limel-example-action-bar-basic","exampleComponent limel-example-action-bar-overflow-menu","exampleComponent limel-example-action-bar-selected-item","exampleComponent limel-example-action-bar-colors","exampleComponent limel-example-action-bar-floating","exampleComponent limel-example-action-bar-floating-expand","exampleComponent limel-example-action-bar-styling","exampleComponent limel-example-action-bar-as-primary-component","exampleComponent limel-example-action-bar-icon-title"]},{"path":"/component/limel-badge/","title":"Badge","text":["The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip."],"props":[{"name":"label","tags":[],"text":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters.","type":"number | string"}],"events":[],"tags":["exampleComponent limel-example-badge","exampleComponent limel-example-badge-number","exampleComponent limel-example-badge-string"]},{"path":"/component/limel-banner/","title":"Banner","text":["",""],"props":[{"name":"icon","tags":[],"text":"Set icon for the banner","type":"string"},{"name":"message","tags":[],"text":"The text to show on the banner.","type":"string"}],"events":[],"tags":["exampleComponent limel-example-banner","slot buttons - Buttons to show in the banner"]},{"path":"/component/limel-breadcrumbs/","title":"Breadcrumbs","text":["A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\nbefore ending up where they are right now, in a website or an application.\n\nThese \"places\" can be for example _pages_ of a website, which are hierarchically\nlaid out before the current page that the user is looking at.\nThey could also be _steps_ which the user has gone through, which perhaps have no\nhierarchical relation with each other, but has eventually led the user \"here\".\n\n:::note\n- Where the user currently is, is always the last step of the breadcrumb.\n- A breadcrumbs never shows where users can go after this place.\nIt only illustrates where user has been before ending up here.\nIf the path that a user can take is not changing and if next steps are clear,\nyou can use the [Progress flow component](#/component/limel-progress-flow) instead.\n:::\n\nBreadcrumbs are often placed horizontally before the main content of the current screen.","Items as hyperlinks\nWhen the Breadcrumbs are used to navigate between different webpages,\nfor example navigating a website, you will need to provide a `link`\nfor each webpage.\n\nThis way, the component will automatically generate a list of\nhyperlinks. This gives the users the possibility of interacting with links\nin a natural way, for instance they can open any of the previous\npages in a new browser tab. This also has other accessibility benefits.\n\n:::note\nClicking links will open in current window by default,\nand this reloads the entire webpage.\nTo avoid reloading the whole application (in the context of a single-page apps),\nyou might want to handle the navigation with your application's router,\n:::\n\nKeep in mind that the last item will not be rendered as an HTML link and\nis not clickable.","Items as buttons\nThe Breadcrumbs can also be used to navigate between different\nsteps of a process, such as steps of a form or survey, or\nmoving through steps of a wizard.\n\nIn this case, you will not provide any `link`s and instead will\nhandle the clicks. When no links are provided, the component\nwill automatically generate a list of `button`s.\n\nKeep in mind that the last item will not be rendered as an\nHTML button and and therefore won't be clickable.","Using icons\nFor an improved accessibility, you are required to\nprovide a `text` for each item in the breadcrumbs.\nBut each item can have an optional icon too.\n\nHowever, in some UIs, the design might require\nhiding the text and relying on an icon to visualize\nan item in the path.\n\nIn this case you can set the `type` to\n`icon-only` on the desired items.\n\n:::note\nThe last item (current step) will always\ndisplay both an icon and the text, even if you\nset the `type` to `icon-only`\n:::","Changing the divider\nBy default a **›** character is used to visually divide the\nitems from each other. This visual divider indicates the\norder and depths of steps which are taken to reach the current\nstep.\n\nHowever, in certain contexts, other characters could be\nmore suitable to visualize this hierarchy,\nsuch as a **·**, **-** or similar.\n\n:::warning\nAvoid using ellipsis motifs like **···**, **…** or **⋮**,\nsince they look like universally prevalent icons which\ncommunicate other meanings.","Using colors\n\nYou can specify colors for single item, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that items in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n\nAn icon can either adopt the color of the default text or receive a color\nif the `--breadcrumbs-item-text-color` has been set.\n\nNevertheless, if the `color` is explicitly defined,\nit will take precedence over the default icon's color.\n:::","Styling\n\nUsing provided custom CSS properties,\nit is possible to style the breadcrumbs."],"props":[{"name":"divider","tags":[],"text":"The visual divider that separates items.\nIt must be a single character such as `-` or `,`.","type":"string"},{"name":"items","tags":[],"text":"List of items in the breadcrumbs,\neach representing a step or a page.","type":"BreadcrumbsItem[]"}],"events":[{"name":"select","tags":[],"text":"Fired when clicking on buttons (not links!)\ninside the breadcrumbs.","type":"BreadcrumbsItem"}],"tags":["exampleComponent limel-example-breadcrumbs-links","exampleComponent limel-example-breadcrumbs-buttons","exampleComponent limel-example-breadcrumbs-icons","exampleComponent limel-example-breadcrumbs-divider","exampleComponent limel-example-breadcrumbs-icon-color","exampleComponent limel-example-breadcrumbs-styling"]},{"path":"/component/limel-button/","title":"Button","text":["","Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","Disabled\n:::note\nDiscover when to utilize the disabled state and when it is preferable to hide a button by reading our guidelines [Disabled vs. Hidden](#/DesignGuidelines/disabled-hidden.md/).\n:::","Proper usage of icons\n\nSometimes, your design requires displaying a single icon inside a button,\nwithout any visible label.\n\nIn such scenarios, the `title` property of the icon must be used to\nimprove accessibility for unsighted users.\n\nWhen a proper `label` is chosen for a button, it is descriptive enough for\nthe users to understand the meaning of the action.\nIn such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`.","Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the button.","type":"boolean"},{"name":"icon","tags":[],"text":"Set icon for the button","type":"Icon | string"},{"name":"label","tags":[],"text":"The text to show on the button.","type":"string"},{"name":"loading","tags":[],"text":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","type":"boolean"},{"name":"loadingFailed","tags":[],"text":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","type":"boolean"},{"name":"outlined","tags":[],"text":"Set to `true` to make the button outlined.","type":"boolean"},{"name":"primary","tags":[],"text":"Set to `true` to make the button primary.","type":"boolean"}],"events":[],"tags":["exampleComponent limel-example-button-basic","exampleComponent limel-example-button-primary","exampleComponent limel-example-button-outlined","exampleComponent limel-example-button-disabled","exampleComponent limel-example-button-icon","exampleComponent limel-example-button-loading","exampleComponent limel-example-button-click-success","exampleComponent limel-example-button-click-fail","exampleComponent limel-example-button-reduce-presence","exampleComponent limel-example-button-colors","exampleComponent limel-example-button-composite"]},{"path":"/component/limel-button-group/","title":"Button group","text":["A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"True if the button-group should be disabled","type":"boolean"},{"name":"value","tags":[],"text":"List of buttons for the group","type":"Button[]"}],"events":[{"name":"change","tags":[],"text":"Dispatched when a button is selected/deselected","type":"Button"}],"tags":["exampleComponent limel-example-button-group-icons","exampleComponent limel-example-button-group","exampleComponent limel-example-button-group-mix","exampleComponent limel-example-button-group-badges","exampleComponent limel-example-button-group-composite"]},{"path":"/component/limel-callout/","title":"Callout","text":["Callouts—also known as Admonitions—are useful for including supportive or\nspecial content within a large piece of text, or even inside a user\ninterface.\n\nWhen used in a document or text based user interface, the callout attracts\nthe reader's attention to a particular piece of information, without\nsignificantly interrupting their flow of reading the document.\n\nIn a user interface, a callout is more intrusive to the end-user. Still, it\ncould be a good choice when you intend to slightly disturb the user's\nattention, and challenge them to pay extra attention to the information\npresented. In such cases, a callout should not be used as a static and\nconstantly present element of the UI. Rather, it should be displayed when\nsomething unusual or remarkable demands the user's attention.","Type: `note`\n\nThis is the default type.","Type: `important`","Type: `tip`\n\nThis type is useful for displaying tips & tricks, and How-Tos.","Type: `caution`","Type: `warning`","Adding rich content\n\nSometimes, you need to display more than just a string of text.\nYou may want to display richer content with pictures, links, or\nbullet point lists; or use a more advanced component inside\nthe callout.\n\nTo do so, simply wrap the content you want to display in this component.","With custom `heading`\n\nBy default, the title will equal the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(icon and color), but override the default heading, using the `heading` prop.","With custom `icon`\n\nBy default, the icon will be defined by the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(color and heading), but override the default icon, using the `icon` prop.","Styling\n\nIt is possible to change the default colors using the provided CSS\nvariables. Just make sure to have good contrast between the text and\nbackground color, to provide good readability.","Custom type\n\nIt is possible to send in a custom type,\nand provide it with custom, icon, heading and styles","Composite"],"props":[{"name":"heading","tags":[],"text":"Heading of the callout, which can be used to override the\ndefault heading which is displayed based on the chosen `type`.","type":"string"},{"name":"icon","tags":[],"text":"Icon of the callout, which can be used to override the\ndefault icon which is displayed based on the chosen `type`.","type":"string"},{"name":"language","tags":[],"text":"Defines the language for translations.\nWill translate the default headings for supported languages.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"type","tags":[],"text":"Defines how the component is visualized, for example\nwhich heading, color or icon is used in its user interface.","type":"\"caution\" | \"important\" | \"note\" | \"tip\" | \"warning\""}],"events":[],"tags":["exampleComponent limel-example-callout-note","exampleComponent limel-example-callout-important","exampleComponent limel-example-callout-tip","exampleComponent limel-example-callout-caution","exampleComponent limel-example-callout-warning","exampleComponent limel-example-callout-rich-content","exampleComponent limel-example-callout-custom-heading","exampleComponent limel-example-callout-custom-icon","exampleComponent limel-example-callout-styles","exampleComponent limel-example-custom-type","exampleComponent limel-example-callout-composite"]},{"path":"/component/limel-card/","title":"Card","text":["Card is a component that displays content about a single topic,\nin a structured way. It can contain a header, and some supporting media such\nas an image or an icon, a body of text, or optional actions.","Basic example\nCards can be used to show some information in a static manner,\nfor instance when displaying a grid of cards, each of which is\nproviding a brief summary of a topic.\n\nHowever, the most common use cases of these UI components is to\nprovide a media-rich and interactive experience to the user,\nwhich you can see in next examples.","Featuring a hero image\nThe content of the cards should be organized to allow users to\neasily scan and quickly find relevant and actionable information.\nThis is especially important because cards are often used in a grid layout,\nin which many cards are usually present.\n\nElements like text and images should clearly indicate information hierarchy.\n\n:::note\n- The height and aspect ratio of the image affects the layout of the card.\n- Remember to provide a meaningful alt text, to improve accessibility\n:::","Card with actions\nAn array of actions can be provided to the card, to allow the user to interact with the content.\n\n:::note\nEven though cards allow displaying multiple actions,\nuse this possibility sparingly, and remember that these UI elements are\nmeant to be entry points to other contexts,\nin which detailed information is displayed, and more complex actions\nare possible to do.\n:::","Clickable example\nSometimes you want to make the entire surface of the card to be clickable,\nfor example to navigate the user to another page or show more information.\n\nFor such scenarios, make sure to set the `clickable` property to `true`.\nThis will alter the visual style to properly communicate hover effects and cursor styles to the card.\n\n:::important\nIt might not be a good idea to combine clickable cards with actions, as it can confuse the user.\n:::","Using the `orientation` prop\nThe `orientation` prop can be used to change the layout of the card,\nand is specially useful when the card is displaying images.\n\nBy default, the card has a `portrait` orientation, which will render the\nimage on top of the content, filling the entire width of the card.\nHowever, when it is changed to `landscape`, the image will be displayed\nto the left of the content, filling the entire height of the card,\nand maximum width of 40% of the card.","Nesting a component in the card\nYou can nest any component inside the card, to provide a more complex\nand interactive experience to the user.","Styling\nThe component offers a few styling options in form of custom CSS variables,\nto make it fit better in different contexts."],"props":[{"name":"actions","tags":[],"text":"Actions to display in the card,\nto provide the user with options to interact with the content.","type":"(ListSeparator | ActionBarItem)[]"},{"name":"clickable","tags":[],"text":"When true, improve the accessibility of the component and hints the user\nthat the card can be interacted width.","type":"boolean"},{"name":"heading","tags":[],"text":"Heading of the card,\nto provide a short title about the context.","type":"string"},{"name":"icon","tags":[],"text":"An icon, to display along with the heading and subheading.","type":"Icon | string"},{"name":"image","tags":[],"text":"A hero image to display in the card,\nto enrich the content with visual information.","type":"Image"},{"name":"orientation","tags":[],"text":"The orientation of the card,\nspecially useful when the card has an image.","type":"\"landscape\" | \"portrait\""},{"name":"subheading","tags":[],"text":"Subheading of the card\nto provide a short description of the context.","type":"string"},{"name":"value","tags":[],"text":"The content of the card.\nSupports markdown, to provide a rich text experience.","type":"string"}],"events":[{"name":"actionSelected","tags":[],"text":"Fired when a action bar item has been clicked.","type":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any>"}],"tags":["exampleComponent limel-example-card-basic","exampleComponent limel-example-card-image","exampleComponent limel-example-card-actions","exampleComponent limel-example-card-clickable","exampleComponent limel-example-card-orientation","exampleComponent limel-example-card-slot","exampleComponent limel-example-card-styling","beta "]},{"path":"/component/limel-chart/","title":"Chart","text":["A chart is a graphical representation of data, in which\nvisual symbols such as such bars, dots, lines, or slices, represent\neach data point, in comparison to others.","Stacked bar (default)\n\nYou can simply provide a list of items to the chart component,\nand it will visualize them the way you want. For the default\nvisualization, the component uses the `stacked-bar` `type`,\nas this is the most compact form of date visualization.\n\nThe only thing each item needs is a `text`, a `value`, and a your\nchoice of `color`.\n\nA stacked bar chart builds creates a data visualization\nby stacking multiple data series in each bar.\n\nIt's good for:\n- Showing the composition of categories across multiple groups.\n- Highlighting cumulative values while breaking down individual contributions.\n\n:::tip\n**Use:**\n- When you want to show both the total and individual values in each category.\n- For data with sub-categories or components that need visualization.\n\n**Avoid:**\n- If precise individual comparisons between subcategories are necessary.\n- When there are too many categories, making the chart crowded.\n:::","The `orientation` prop\nUsing the `orientation` prop, you can change the direction of\nthe the chart. Note that the `orientation` prop\ndoes not have any effect on those `type`s of visualization that\ndo not have the common `X` and `Y` axises, such as `pie` or `doughnut`.\n\n:::note\nCharts are responsive and stretch inside their containers.\nYou need to set ensure that there space for them to get rendered in.\n:::","Using the `maxValue` prop\n\nThe `maxValue` prop defines the upper limit of the visual range for the chart.\nIt determines the maximum value represented on the axis and is used to\ncalculate the size of each item in the chart relative to this value.\n\nFor example, if `maxValue` is set to `100`, an item with a value of `10`\nwill occupy 10% of the chart, while an item with a value of `50` will occupy 50%.\nIf `maxValue` is set to `200`, an item with a value of `50` will occupy 25% of the chart.\n\nIf `maxValue` is not provided, the chart will calculate the maximum value based on\nthe actual data points, and the size of each item will be calculated relative to\nthe total range of the data.\n\n:::note\nThe `maxValue` only affects the upper limit of the chart's range.\nThe chart will always start from the smallest value present in the dataset,\nwhich could be a negative number.\n:::","Bar chart\nA bar chart displays data with rectangular bars, where the length of each bar represents the value of a data point.\n\nIt's good for:\n- Comparing discrete categories or groups.\n- Visualizing changes in data over time when categories are limited.\n\n:::tip\n**Use:**\n- When you have categorical data that needs clear comparisons.\n- For datasets with fewer than 20 categories, as too many bars can make it hard to read.\n\n**Avoid:**\n- When showing continuous data trends over time (a line chart might be better).\n- When you have many categories, which could make the chart crowded.\n:::","Dot chart\nA dot chart displays values for each category using dots along an axis, similar to a bar chart but with dots\nat the value associated with each category instead of bars. It’s often used as an alternative to bar charts,\nespecially when focusing on individual data points or reducing visual clutter.\n\nIt's good for:\n- Comparing values across categories in a clean and uncluttered way.\n- Visualizing discrete data points without the visual weight of bars.\n- Allowing readers to focus on precise values and distribution.\n\n:::tip\n**Use:**\n- When comparing values across categories in a straightforward way.\n- For datasets where you do not want to emphasize on or compare \"volumes\" or \"sizes\",\nbut rather compare the points that the data represents.\n\n**Avoid:**\n- For datasets with very few or very densely packed points, which could make the chart difficult to read.\n- When representing complex relationships or multiple variables (scatter plots or line charts may be more effective).\n:::","Area chart\nAn area chart is like a line chart but with the area below the line filled in,\nrepresenting cumulative data.\n\nIt's good for:\n- Showing cumulative totals over time.\n- Emphasizing data changes while highlighting volume or totals.\n\n:::tip\n**Use:**\n- For showing cumulative data trends where total volume over time is meaningful.\n- When visualizing stacked data in a cumulative format.\n\n**Avoid:**\n- If individual values need precise comparison (stacked bar charts are more suitable).\n- For datasets with highly fluctuating values, as overlapping areas can obscure details.\n:::","Line chart\nA line chart connects data points with a continuous line,\noften used for displaying trends over intervals.\n\nIt's good for:\n- Showing trends over time in a simple, readable format.\n- Highlighting increases, decreases, or patterns in a dataset.\n\n:::tip\n**Use:**\n- For tracking data changes over time, especially with multiple data points.\n- When visualizing time-series data to show overall trends.\n\n**Avoid:**\n- For large fluctuations, which may make data misinterpretations likely.\n- When individual point comparison is critical (consider a bar or dot chart).\n:::","Pie chart\nA pie chart represents data as slices of a circle, with each slice’s size proportional to its value.\n\nIt's good for:\n- Showing the proportions of a whole.\n- Visualizing data composition for easy understanding.\n\n:::tip\n**Use:**\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","Doughnut chart\nA doughnut chart is a variation of the pie chart, with a center space,\noften used to show multiple concentric data series.\n\nIt's good for:\n- Showing proportions with a visually balanced layout.\n- Allowing room in the center for additional information (e.g., displaying totals).\n\n:::tip\n**Use:**\n- When visual space is limited, and a pie chart may look crowded.\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","Ring chart\nA ring chart is similar to a doughnut chart but used in concentric layers,\nideal for comparison of hierarchical data.\n\nIt's good for:\n- Comparing multiple parts of a whole in a layered visual layout.\n- Displaying hierarchical data or showing nested relationships.\n\n:::tip\n**Use:**\n- When you need to show multiple data series in a single, visually appealing chart.\n- For data with a clear hierarchy or grouping.\n\n**Avoid:**\n- With too many rings, as it can become visually overwhelming.\n- For data that needs precise comparison across series.\n:::","Gantt chart\nGantt charts are used to visualize items that have a defined start and end value, making them ideal\nfor displaying timelines or project phases. Each item typically represents a phase or task, with its length\nindicating duration.\n\nIt's good for:\n- Visualizing project schedules, with tasks and milestones over time.\n- Showing task dependencies, start and end dates, and overlaps between phases.\n- Providing an easy-to-understand timeline for project planning and tracking.\n\n:::tip\n**Use:**\n- When you need to show the progression of tasks or stages over time.\n- When items have start points which are not simply zero.\n\n**Avoid:**\n- For datasets that don't involve time or sequential phases (bar charts or line charts may be better).\n\n**Note:**\nIn Gantt charts, items have a start value to indicate when they begin. Unlike other charts,\nwhere items default to a start value of `0`, each Gantt chart item should specify a start value\nand an end value (e.g., `value: [10, 20]`), which determines the duration and position of the item.\n:::","NPS® chart\nThe NPS chart visually represents customer loyalty by plotting scores that\nrange from -100 to +100. NPS is based on customer responses to a simple question:\n\"_How likely are you to recommend us?_\"\n\nRespondents score from 0 to 10, which is then transformed into the NPS scale which starts from -100 and\ngoes up to +100. The NPS chart groups scores into three categories of:\n<span style=\"background-color: rgb(var(--color-amber-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">detractors</span>,\n<span style=\"background-color: rgb(var(--color-coral-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">passives</span>,\nor <span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">promoters</span>.\n\nAn NPS score above 30 is considered\n<span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">good</span>,\nwhile a score above 70 is considered\n<span style=\"background-color: rgb(var(--color-lime-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">excellent</span>.\n\nThis chart is good for:\n- Summarizing customer satisfaction or loyalty on a single scale.\n- Quickly identifying the distribution of detractors, passives, and promoters.\n\n:::tip\n**Use:**\n- Visualizing a single score that summarizes customer loyalty.\n- When tracking customer loyalty over time.\n- When tracking customer loyalty of different companies.\n- In dashboards or reporting tools to visualize changes in customer sentiment.\n\n**Avoid:**\n- For in-depth customer feedback analysis (consider pairing with more detailed survey insights).\n- Any other data visualization than NPS scores.\n:::\n\n:::important\nFor the `nps` chart type to visualize properly, the `value` property of the `ChartItem`\nshould be a number between `-100` and `100`!\n:::","Multi-axis Charts\nNormally, charts visualize items in a positive range.\nHowever, there are cases where you want to visualize items that have both\npositive and negative `value`s.","Multi-axis with Negative Start Values\nYou can also get a multi-axis chart with items in your dataset\nthat have both start and end values, e.g. `value: [10, 20]`.","Multi-axis Area Chart with Negative Start Values\nYou can also get a multi-axis Area chart, by making sure that\neach item has a start value, and some of them are negative.","Using the `axisIncrement` prop\nThe `axisIncrement` prop specifies the incremental\nvalues of the axis lines. By default the component tries to\nsmartly calculate a proper axis increment, to render meaningful\naxis lines, based on the maximum value provided in the dataset.\n\nHowever, you can set the `axisIncrement` to a\ndifferent custom value if needed.","With clickable items\n\nWhen `clickable` is set to `true`, the item will become interactive.\n\nThis provides visual and accessible feedback when the hovered, or focused,\nand also results in emitting an event when clicked.\n\n:::note\nItems in Doughnut and Pie charts support `clickable` property as well.\n\nHowever—due to technical reasons—, the only way to interact with their items\nis using the keyboard (by tabbing on them and pressing the <kbd>Enter</kbd> or\n<kbd>Space</kbd> keys.\n:::","Accessibility\nUnder the hoods, our charts are simply HTML tables.\nThis helps screen readers to interpret the data and present it to their users.\nHowever, to make this semantic more accessible and more understandable,\nthere are some optional props that we highly recommend you to use.\n\n- `accessibleLabel`: Will be used as a `caption` for the table, and\ndescribes what the chart is about. Depending on the context,\nIt might also be a good idea to include the accessible label for sighted\nusers as well, for instance, as a heading.\n- `accessibleItemsLabel`: Will be used as a `th` for the first column of the table,\ndescribing what all items in this column have in common. In this example,\nall items are cities.\n\nNote that these props won't be visually rendered for sighted users, but\nthey will be presented to assistive technologies, such as screen readers\nas well as search engines.\n\nAnother way to improve the accessibility of the chart is to use\nthe `prefix` and `suffix` props to provide additional context to the `value`\nof each item.\n\n##### Using the `loading` prop\nSometimes the data set needs to be calculated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow a spinner, indicating the data is being updated. This not only improves\nthe user experience, but also the accessibility of the chart both for sighted users,\nand behind the scenes, for users of assistive technologies.","Styling\nThe component provides a few styling options, using CSS custom properties.","Creative styling\n\nBehind the scenes for some chart types,\nthe `color` property of the `item` is used as a `background` style,\nnot a `background-color` style.\nThis, together with some CSS knowledge can empower some creative visualizations;\nspecially when a solid color is not enough to communicate a certain meaning.\nHere are some examples for inspiration."],"props":[{"name":"accessibleItemsLabel","tags":[],"text":"Helps users of assistive technologies to understand\nwhat the items in the chart represent.","type":"string"},{"name":"accessibleLabel","tags":[],"text":"Helps users of assistive technologies to understand\nthe context of the chart, and what is being displayed.","type":"string"},{"name":"axisIncrement","tags":[],"text":"Specifies the increment for the axis lines.","type":"number"},{"name":"items","tags":[],"text":"List of items in the chart,\neach representing a data point.","type":"ChartItem<number | [number, number]>[]"},{"name":"language","tags":[],"text":"Defines the language for translations.\nWill translate the translatable strings on the components.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"loading","tags":[],"text":"Indicates whether the chart is in a loading state.","type":"boolean"},{"name":"maxValue","tags":[],"text":"Specifies the range that items' values could be in.\nThis is used in calculation of the size of the items in the chart.\nWhen not provided, the sum of all values in the items will be considered as the range.","type":"number"},{"name":"orientation","tags":[],"text":"Defines whether the chart is intended to be displayed wide or tall.\nDoes not have any effect on chart types which generate circular forms.","type":"\"landscape\" | \"portrait\""},{"name":"type","tags":[],"text":"Defines how items are visualized in the chart.","type":"\"area\" | \"bar\" | \"dot\" | \"doughnut\" | \"line\" | \"nps\" | \"pie\" | \"ring\" | \"stacked-bar\""}],"events":[{"name":"interact","tags":[],"text":"Fired when a chart item with `clickable` set to `true` is clicked","type":"ChartItem<number | [number, number]>"}],"tags":["exampleComponent limel-example-chart-stacked-bar","exampleComponent limel-example-chart-orientation","exampleComponent limel-example-chart-max-value","exampleComponent limel-example-chart-type-bar","exampleComponent limel-example-chart-type-dot","exampleComponent limel-example-chart-type-area","exampleComponent limel-example-chart-type-line","exampleComponent limel-example-chart-type-pie","exampleComponent limel-example-chart-type-doughnut","exampleComponent limel-example-chart-type-ring","exampleComponent limel-example-chart-type-gantt","exampleComponent limel-example-chart-type-nps","exampleComponent limel-example-chart-multi-axis","exampleComponent limel-example-chart-multi-axis-with-negative-start-values","exampleComponent limel-example-chart-multi-axis-area-with-negative-start-values","exampleComponent limel-example-chart-axis-increment","exampleComponent limel-example-chart-clickable-items","exampleComponent limel-example-chart-accessibility","exampleComponent limel-example-chart-styling","exampleComponent limel-example-chart-creative-styling","beta "]},{"path":"/component/limel-checkbox/","title":"Checkbox","text":["The Checkbox component is a classic and essential element in UI design that allows\nusers to make multiple selections from a predefined list of options. The Checkbox component is commonly used in forms and settings interfaces to enable users to\nselect one or more items from a list of choices.\n\n## States of a Checkbox\nWhen a user clicks or taps on the box, it toggles between two states:\nChecked and Unchecked.\n\nHowever, a Checkbox can visualize a third state called the \"Indeterminate\" state.\nIn this state, the checkbox appears as a filled box with a horizontal line or dash inside it.\n\nThe Indeterminate state is typically used when dealing with checkbox groups\nthat have hierarchical relationships or when the group contains sub-items.\nThis state is used to indicate that that some, but not all, of the items in a group are selected.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","","With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed.","Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors."],"props":[{"name":"checked","tags":[],"text":"The value of the checkbox. Set to `true` to make the checkbox checked.","type":"boolean"},{"name":"disabled","tags":[],"text":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the checkbox","type":"string"},{"name":"indeterminate","tags":[],"text":"Enables indeterminate state. Set to `true` to signal indeterminate check.","type":"boolean"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value is invalid.","type":"boolean"},{"name":"label","tags":[],"text":"The checkbox label.","type":"string"},{"name":"readonly","tags":[],"text":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","type":"boolean"},{"name":"readonlyLabels","tags":["beta "],"text":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","type":"Label<boolean>[]"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the checkbox must be checked.","type":"boolean"}],"events":[{"name":"change","tags":[],"text":"Emitted when the input value is changed.","type":"boolean"}],"tags":["exampleComponent limel-example-checkbox","exampleComponent limel-example-checkbox-helper-text","exampleComponent limel-example-checkbox-readonly"]},{"path":"/component/limel-chip/","title":"Chip","text":["Chips and buttons are both interactive elements in UI design,\nbut they serve different purposes and are used in different contexts.\n\n:::warning\nDo not use the chip component carelessly, as an alternative for\n[`limel-button`](#/component/limel-button/) in the UI design!\n\n**Buttons:**\nButtons are used to trigger actions. They are typically used to\nsubmit forms, open dialogs, initiate a process, or perform any action\nthat changes the state of the application.\nButtons' labels usually contain action words, in other words, the labels is\na _verb in imperative mood_ such as \"Submit\" or \"Delete\".\nButtons are placed in areas where it's clear they will initiate\nan action when clicked.\n\n**Chips:**\nChips however are elements which may look like buttons, but they are\nrepresenting choices, filters, or tags, in a small block\nor clearly bundled into a group. Chips are rarely used alone in the\nuser interface.\nThey are often used in a so called \"chip-set\", or placed together in\na section of the UI, where the user can expect more than one chip to be present.\n\nFor example, a chip may represent a filter in a filter bar, or a tag in a tag list,\nor an item in a shopping list.\nClicking a chip can also trigger an action, for example toggling a filter ON or OFF,\nor opening a page with all posts tagged with the tag represented by the chip,\nor navigating to a page with more information about the item in the shopping list.\n:::","Chip as button\nTypically, a chip is used to trigger an action or act as an input element.\nThis is why the component generates a `<button>` element in the DOM to give\na more semantically correct clues to assistive technologies.\n\nTo trigger these actions, you will only need to handle the `onClick`\nevent on the component.","Chip as hyperlink\nFor accessibility and usability alike, if clicking on a chip should\nresult in any kind of navigation, it is preferable to use a link,\nrather than a button.\n\nThat way, the user can choose to, for example, open the link in a new tab.\nFor this reason, we suggest always providing a Link with\nthe URL representing the target state of the navigation.","Icon color\nUsing the `Icon` interface, you can specify colors for the icon.","Picture instead of icon\nUsing the `Img` interface, you can specify an image to be displayed on the chip.\n\n:::note\nThe specified image will be displayed instead of the icon, if both are provided.\n:::","Chip with a badge\nChips can display a badge with a number or a short text.","Chip as filter\nChips are great candidates to visualize active filters.\nHowever, as chips are used for other purposes as well,\nwe need to make sure that the user understands that the chip is a filter,\njust by the look of it.\n\nBy setting the `type` to `filter`, the chip will be rendered with a distinct style\nsuitable for visualizing filters.\n\n:::note\nIn this mode, clicking on the chip should also toggle its `selected` state.\n:::","Removable chips\nChips can display a remove button,\nwhen their `removable` prop is set to `true`.\n\nThis is typically used when the chip is used in a chip-set,\nwhere each chip visualizes a chosen option.\n\n:::tip\nWhen the chip is focused using the keyboard, the user can press\nthe <kbd>Delete</kbd> or <kbd>Backspace</kbd> keys to\ntrigger the same remove `event`.\n:::","When an array of menu items is provided, the chip will render\nan ellipsis menu with the supplied items. When an item is selected,\nthe `onMenuItemSelected` event will be emitted, reflecting the\n`value` of the selected item.\n\n:::note\nThis will hide the \"remove button\" on the chip, when `removable={true}`,\nas the remove button will automatically become the last item in the menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","Loading state\nSetting the `loading` to `true` puts the component in the `loading` state,\nand renders an indeterminate progress indicator inside the chip.\n\n:::note\nNote that this does _not_ disable the interactivity of the chip,\nand most probably you do not need it to be disabled either.\nIf the chip should be disabled while loading, the\n`disabled` property should separately be set to `true` as well.\n:::\n:::tip\nConsider using [aria-live](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live)\nwhere appropriate, or to inform the user about what is being loaded\nuse a [tooltip](#/component/limel-tooltip) on the component.\nThis is mainly to improve the accessibility for users of assistive technologies.\n:::","Displaying a progress bar\nBy defining a numeric `progress` (from `0` to `100`),\nyou can display a progress bar on the chip\nto inform the user about an ongoing progress and also\nvisualize the amount of progress that has been made so far.\n\n:::important\n1. Do not use `loading={true}` and `progress` at the same time.\n2. When the progress has completed, unset the `progress` property!\n:::","Size\nWhen the `size` property is set to `small`, the chip will render\nwith a smaller height and gap.","Border color\nIn readonly state, the border color of the chip can be customized,\nusing `--chip-readonly-border-color`.","Correct usage of ARIA roles\n\nChips represent choices, filters, or tags, organized in a block or bundled into a group.\nWhile sighted users see the visually bundled group of chips in a well-designed UI,\nscreen reader users only hear the chip text, one at a time.\nThis can make it difficult for users of assistive technologies to understand\nthe context of the chip.\n\nTo provide an accessible experience, it's important to place the chips in\na semantically correct structure, such as a list or a table,\nor properly use ARIA roles on the chip and its container.\n\nIn this example, we demonstrate how to use ARIA roles to improve accessibility for chips.\nHowever, it's recommended to read up on the subject to fully understand the\nimplications of ARIA roles.\n\nFor more information on ARIA roles, refer to the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles)."],"props":[{"name":"badge","tags":[],"text":"The value of the badge, displayed on the chip.","type":"number | string"},{"name":"disabled","tags":[],"text":"Set to `true` to disable the chip.","type":"boolean"},{"name":"icon","tags":[],"text":"Icon of the chip.","type":"Icon | string"},{"name":"identifier","tags":[],"text":"Identifier for the chip. Must be unique.","type":"number | string"},{"name":"image","tags":[],"text":"A picture to be displayed instead of the icon on the chip.","type":"Image"},{"name":"invalid","tags":[],"text":"Set to `true` to visualize the chip in an \"invalid\" or \"error\" state.","type":"boolean"},{"name":"language","tags":[],"text":"Defines the language for translations.\nWill translate the translatable strings on the components.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"link","tags":[],"text":"If supplied, the chip will become a clickable link.","type":"{ title?: string; target?: string; href: string; rel?: string; }"},{"name":"loading","tags":[],"text":"Set to `true` to put the component in the `loading` state,\nand render an indeterminate progress indicator inside the chip.\nThis does _not_ disable the interactivity of the chip!","type":"boolean"},{"name":"menuItems","tags":[],"text":"When provided, the chip will render an ellipsis menu with the supplied items.\nAlso, this will hide the \"remove button\" when `removable={true}`, as\nthe remove button will automatically become the last item in the menu.","type":"any[]"},{"name":"progress","tags":[],"text":"Reflects the current value of a progress bar on the chip,\nvisualizing the percentage of an ongoing process.\nMust be a number between `0` and `100`.","type":"number"},{"name":"readonly","tags":[],"text":"Set to `true` to render the chip as a static UI element.\nUseful when the parent component has a `readonly` state.","type":"boolean"},{"name":"removable","tags":[],"text":"Set to `true` to render a remove button on the chip.","type":"boolean"},{"name":"selected","tags":[],"text":"Set to `true` to visualize the chip in a \"selected\" state.\nThis is typically used when the chip is used in a chip-set\nalong with other chips.","type":"boolean"},{"name":"size","tags":[],"text":"Defines the size of the chip.","type":"\"default\" | \"small\""},{"name":"text","tags":[],"text":"Label displayed on the chip","type":"string"},{"name":"type","tags":["beta "],"text":"Set to `filter` to render the chip with a distinct style\nsuitable for visualizing filters.","type":"\"default\" | \"filter\""}],"events":[{"name":"menuItemSelected","tags":[],"text":"Emitted when a menu item is selected from the actions menu.","type":"MenuItem"},{"name":"remove","tags":[],"text":"Fired when clicking on the remove button of a `removable` chip.\nThe value of `identifier` is emitted as the event detail.","type":"number | string"}],"tags":["exampleComponent limel-example-chip-button","exampleComponent limel-example-chip-link","exampleComponent limel-example-chip-icon-colors","exampleComponent limel-example-chip-image","exampleComponent limel-example-chip-badge","exampleComponent limel-example-chip-filter","exampleComponent limel-example-chip-removable","exampleComponent limel-example-chip-menu","exampleComponent limel-example-chip-loading","exampleComponent limel-example-chip-progress","exampleComponent limel-example-chip-size","exampleComponent limel-example-chip-readonly-border","exampleComponent limel-example-chip-aria-role"]},{"path":"/component/limel-chip-set/","title":"Chip set","text":[":::note\n**Regarding `click` and `interact` events:**\n\nThe `interact` event is emitted when a chip is interacted with, and is\nthe recommended way to listen for chip interactions.\n\nHowever, if you need to handle clicks differently depending on which chip\nwas clicked, or whether the click was on a chip or elsewhere, you need to\nlisten to the native `click` event instead.\n\nNative `click` events are passed through, and if the click came from\na chip, the chip object is available in the event object under\n`<event object>.Lime.chip`.\n\nExample usage:\n```ts\nprivate handleClick(event: Event) {\n    if (event && 'Lime' in event && (event.Lime as any).chip) {\n        if ((event.Lime as { chip: Chip }).chip.href) {\n            // Chip has href, so let the browser open the link.\n            return;\n        }\n        // handle click on chip without href\n    } else {\n        // handle click elsewhere\n    }\n}\n```\n:::","Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.\n\n:::note\nSetting `readonly` to `true` when the `type=\"input\"`, the chips that are displayed\nwill remain interactive. This means that the user can still click on them.\nHowever, the chips cannot be removed or added in `readonly` mode.\n:::","Input chip set, containing items with menus\nWhile chips inside a chip set of `type=\"input\"` can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","Chips with images\n\nYou can use images instead of icons on chips.\n\n:::note\nThe image will be displayed instead of the icon, if both are provided.\n:::","Composite\n\nA place to try different combinations of states."],"props":[{"name":"autocomplete","tags":[],"text":"For chip-set of type `input`, defines whether the input field should have autocomplete enabled.\nRead more about the `autocomplete` attribute\n[here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).","type":"string"},{"name":"clearAllButton","tags":[],"text":"Whether the \"Clear all\" buttons should be shown","type":"boolean"},{"name":"delimiter","tags":[],"text":"For chip-set of type `input`. Sets delimiters between chips.","type":"string"},{"name":"disabled","tags":[],"text":"True if the chip set should be disabled","type":"boolean"},{"name":"emptyInputOnBlur","tags":[],"text":"Whether the input field should be emptied when the chip-set loses focus.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation.","type":"string"},{"name":"inputType","tags":[],"text":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","type":"\"search\" | \"text\""},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the input field is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"Label for the chip-set","type":"string"},{"name":"language","tags":[],"text":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"leadingIcon","tags":[],"text":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field","type":"string"},{"name":"maxItems","tags":[],"text":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied.","type":"number"},{"name":"readonly","tags":[],"text":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","type":"boolean"},{"name":"required","tags":[],"text":"True if the control requires a value","type":"boolean"},{"name":"searchLabel","tags":[],"text":"Search label to display when type is `input` and component is in search mode","type":"string"},{"name":"type","tags":[],"text":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable.\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","type":"\"choice\" | \"filter\" | \"input\""},{"name":"value","tags":[],"text":"List of chips for the set","type":"Chip<any>[]"}],"events":[{"name":"change","tags":[],"text":"Dispatched when a chip is selected/deselected","type":"Chip<any> | Chip<any>[]"},{"name":"input","tags":[],"text":"Dispatched when the input is changed for type `input`","type":"string"},{"name":"interact","tags":[],"text":"Dispatched when a chip is interacted with","type":"Chip<any>"},{"name":"startEdit","tags":[],"text":"Emitted when an input chip set has received focus and editing in the text field has started","type":"void"},{"name":"stopEdit","tags":[],"text":"Emitted when an input chip set has lost focus and editing in the text field has ended","type":"void"}],"tags":["exampleComponent limel-example-chip-set","exampleComponent limel-example-chip-set-choice","exampleComponent limel-example-chip-set-filter","exampleComponent limel-example-chip-set-filter-badge","exampleComponent limel-example-chip-set-input","exampleComponent limel-example-chip-set-input-type-with-menu-items","exampleComponent limel-example-chip-set-input-type-text","exampleComponent limel-example-chip-set-input-type-search","exampleComponent limel-example-chip-icon-color","exampleComponent limel-example-chip-set-image","exampleComponent limel-example-chip-set-composite"]},{"path":"/component/limel-circular-progress/","title":"Circular progress","text":["The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","","Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages."],"props":[{"name":"displayPercentageColors","tags":[],"text":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","type":"boolean"},{"name":"maxValue","tags":[],"text":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","type":"number"},{"name":"prefix","tags":[],"text":"The prefix which is displayed before the `value`, must be a few characters characters long.","type":"string"},{"name":"size","tags":[],"text":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","type":"\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\""},{"name":"suffix","tags":[],"text":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","type":"string"},{"name":"value","tags":[],"text":"The value of the progress bar.","type":"number"}],"events":[],"tags":["exampleComponent limel-example-circular-progress","exampleComponent limel-example-circular-progress-sizes","exampleComponent limel-example-circular-progress-props","exampleComponent limel-example-circular-progress-css-variables","exampleComponent limel-example-circular-progress-percentage-colors"]},{"path":"/component/limel-code-editor/","title":"Code editor","text":["","Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code."],"props":[{"name":"colorScheme","tags":[],"text":"Select color scheme for the editor","type":"\"auto\" | \"dark\" | \"light\""},{"name":"fold","tags":[],"text":"Allows the user to fold code","type":"boolean"},{"name":"language","tags":[],"text":"The language of the code","type":"\"javascript\" | \"jinja2\" | \"json\" | \"typescript\""},{"name":"lineNumbers","tags":[],"text":"Displays line numbers in the editor","type":"boolean"},{"name":"lint","tags":[],"text":"Enables linting of JSON content","type":"boolean"},{"name":"readonly","tags":[],"text":"Disables editing of the editor content","type":"boolean"},{"name":"value","tags":[],"text":"The code to be rendered","type":"string"}],"events":[{"name":"change","tags":[],"text":"Emitted when the code has changed. Will only be emitted when the code\narea has lost focus","type":"string"}],"tags":["exampleComponent limel-example-code-editor","exampleComponent limel-example-code-editor-readonly-with-line-numbers","exampleComponent limel-example-code-editor-fold-lint"]},{"path":"/component/limel-collapsible-section/","title":"Collapsible section","text":["A collapsible section can be used to group related content together\nand hide the group when not needed.\nUsing this component can help to:\n- Save vertical space by hiding non-essential content\n- Improve content organization and scannability of the user interface\n- Reduce cognitive load by displaying only a set of relevant information at a time\n- Or disclose complex information, progressively to the user","Basic example\nAnything that is nested inside the `limel-collapsible-section` component\nwill be shown in the body of the section, only visible when the section is expanded.","Header actions\nAn array of actions can be given to the component.\nThe actions will be rendered as icon buttons inside the Header.\nThey can allow for additional functionality like edit, delete, etc.\n\n:::important\nThe actions should be about the entire section or group of content,\nand affect it as a whole. This is due to how they are displayed along\nwith the header of the group.\n:::","With custom component in the header\nBy using the `slot=\"header\"` attribute on a custom UI elements, you can place it\nin the header area of the collapsible section alongside the default header text\nand header actions.\nThis can enable richer header content, like status indicators, badges, or icons.\n\n:::important\n1. The custom component is responsible for its own size, and should not\nvisually grow out of the header area.\n1. If the is not interactive, we recommend styling it with `pointer-events: none;`,\nto avoid blocking the user from interacting with the header. This is because\nthe entire surface of the header should be clickable to toggle visibility of the section.\n:::","Opening and closing programmatically","With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::","Using the `invalid` prop\nWhen a section's `invalid` prop is set to `true`, it can display a visual feedback,\nas well as an accessible indication to the assistive technologies,\nto indicate that the content inside the section is invalid.","Icon","Using the CSS properties"],"props":[{"name":"actions","tags":[],"text":"Actions to place to the far right inside the header","type":"Action[]"},{"name":"header","tags":[],"text":"Text to display in the header of the section","type":"string"},{"name":"icon","tags":[],"text":"Icon to display in the header of the section","type":"Icon | string"},{"name":"invalid","tags":[],"text":"`true` if the section is invalid, `false` if valid.\nThis can be used to indicate that the content inside the section is invalid.","type":"boolean"},{"name":"isOpen","tags":[],"text":"`true` if the section is expanded, `false` if collapsed.","type":"boolean"},{"name":"language","tags":[],"text":"Defines the language for translations.\nWill translate the translatable strings on the components.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""}],"events":[{"name":"action","tags":[],"text":"Emitted when an action is clicked inside the header","type":"Action"},{"name":"close","tags":[],"text":"Emitted when the section is collapsed","type":"void"},{"name":"open","tags":[],"text":"Emitted when the section is expanded","type":"void"}],"tags":["slot - Content to put inside the collapsible section","slot header - Optional slot for custom header content","exampleComponent limel-example-collapsible-section-basic","exampleComponent limel-example-collapsible-section-actions","exampleComponent limel-example-collapsible-section-with-custom-header-component","exampleComponent limel-example-collapsible-section-external-control","exampleComponent limel-example-collapsible-section-with-slider","exampleComponent limel-example-collapsible-section-invalid","exampleComponent limel-example-collapsible-section-icon","exampleComponent limel-example-collapsible-section-css-props"]},{"path":"/component/limel-color-picker/","title":"Color picker","text":["This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","","Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked."],"props":[{"name":"helperText","tags":[],"text":"Helper text of the input field","type":"string"},{"name":"label","tags":[],"text":"The label of the input field","type":"string"},{"name":"readonly","tags":[],"text":"Set to `true` if a value is readonly. This makes the component un-interactive.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` if a value is required","type":"boolean"},{"name":"tooltipLabel","tags":[],"text":"Displayed as tooltips when picker is hovered.","type":"string"},{"name":"value","tags":[],"text":"Name or code of the chosen color","type":"string"}],"events":[{"name":"change","tags":[],"text":"Emits chosen value to the parent component","type":"string"}],"tags":["exampleComponent limel-example-color-picker","exampleComponent limel-example-color-picker-readonly"]},{"path":"/component/limel-date-picker/","title":"Date picker","text":["","datetime","date","time","week","month","quarter","year","With defined localization","Changing the input programmatically","Composite\n\nA place to try different combinations of states.","Custom date formatter\n\nYou can provide a function to customize the date formatting."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","type":"boolean"},{"name":"format","tags":[],"text":"Format to display the selected date in.","type":"string"},{"name":"formatter","tags":[],"text":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","type":"(date: Date) => string"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"Text to display next to the date picker","type":"string"},{"name":"language","tags":[],"text":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"placeholder","tags":[],"text":"The placeholder text shown inside the input field, when the field is focused and empty","type":"string"},{"name":"readonly","tags":[],"text":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the field is required.","type":"boolean"},{"name":"type","tags":[],"text":"Type of date picker.","type":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\""},{"name":"value","tags":[],"text":"The value of the field.","type":"Date"}],"events":[{"name":"change","tags":[],"text":"Emitted when the date picker value is changed.","type":"Date"}],"tags":["exampleComponent limel-example-date-picker-datetime","exampleComponent limel-example-date-picker-date","exampleComponent limel-example-date-picker-time","exampleComponent limel-example-date-picker-week","exampleComponent limel-example-date-picker-month","exampleComponent limel-example-date-picker-quarter","exampleComponent limel-example-date-picker-year","exampleComponent limel-example-date-picker-formatted","exampleComponent limel-example-date-picker-programmatic-change","exampleComponent limel-example-date-picker-composite","exampleComponent limel-example-date-picker-custom-formatter"]},{"path":"/component/limel-dialog/","title":"Dialog","text":[":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogRenderer](https://lundalogik.github.io/lime-web-components/versions/latest/interfaces/DialogRenderer.html)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","","Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","Dialog with heading\n\nIn this example you can also see how available style properties can be used.","Dialog with action inside the heading\n\nIn this example you can also see how available style properties can be used.","Dialog with form and confirmation dialog\n\nThis example demonstrates how to use a `limel-form` inside a `limel-dialog`.\nIt also shows a confirmation dialog when the user closes the main dialog\nwithout saving.","Custom size","Fullscreen","Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/)."],"props":[{"name":"closingActions","tags":[],"text":"Defines which action triggers a close-event.","type":"ClosingActions"},{"name":"fullscreen","tags":[],"text":"Set to `true` to make the dialog \"fullscreen\".","type":"boolean"},{"name":"heading","tags":[],"text":"The heading for the dialog, if any.","type":"DialogHeading | string"},{"name":"open","tags":[],"text":"`true` if the dialog is open, `false` otherwise.","type":"boolean"}],"events":[{"name":"close","tags":[],"text":"Emitted when the dialog is closed from inside the component.\n(*Not* emitted when the consumer sets the `open`-property to `false`.)","type":"void"},{"name":"closing","tags":[],"text":"Emitted when the dialog is in the process of being closed.","type":"void"}],"tags":["exampleComponent limel-example-dialog","exampleComponent limel-example-dialog-nested-close-events","exampleComponent limel-example-dialog-heading","exampleComponent limel-example-dialog-heading-actions","exampleComponent limel-example-dialog-form","exampleComponent limel-example-dialog-size","exampleComponent limel-example-dialog-fullscreen","exampleComponent limel-example-dialog-closing-actions","exampleComponent limel-example-dialog-action-buttons","slot - Content to put inside the dialog","slot header-actions - The dialog header buttons","slot button - The dialog buttons"]},{"path":"/component/limel-dock/","title":"Dock","text":["","Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","Basic Example expanded","Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::"],"props":[{"name":"accessibleLabel","tags":[],"text":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\"","type":"string"},{"name":"allowResize","tags":[],"text":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","type":"boolean"},{"name":"dockFooterItems","tags":[],"text":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","type":"DockItem[]"},{"name":"dockItems","tags":[],"text":"Items that are placed in the dock.","type":"DockItem[]"},{"name":"expanded","tags":[],"text":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","type":"boolean"},{"name":"mobileBreakPoint","tags":[],"text":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","type":"number"}],"events":[{"name":"close","tags":[],"text":"Fired when the popover is closed.","type":"void"},{"name":"dockExpanded","tags":[],"text":"Fired when a Dock is expanded or collapsed.","type":"boolean"},{"name":"itemSelected","tags":[],"text":"Fired when a dock item has been selected from the dock.","type":"DockItem"},{"name":"menuOpen","tags":[],"text":"Fired when a dock menu is opened.","type":"DockItem"}],"tags":["exampleComponent limel-example-dock-basic","exampleComponent limel-example-dock-custom-component","exampleComponent limel-example-dock-notification","exampleComponent limel-example-dock-mobile","exampleComponent limel-example-dock-expanded","exampleComponent limel-example-dock-colors-css"]},{"path":"/component/limel-dynamic-label/","title":"Dynamic label","text":["This components displays a different label depending on the current given\nvalue. A label can consist of a text and an optional icon. If no matching\nlabel is found among the given `labels`, the `defaultLabel` will be displayed.\n\nOne use case of the component is to enhance the visualization of a `boolean`\nfield like a checkbox or switch in a `readonly` state.\n\nThe reason we offer this component is that the default styling\nof the Checkbox or Toggle switch in the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.","Basic example\n\nSwitching the value to `true` or `false` will dynamically change the label,\nwhile the default label (including its icon) is ignored.","Readonly boolean\nThe `readonly` mode of a boolean fields do not always\nclearly communicate the meaning of the data to the end users. Similar problems\nhave existed in user interfaces forever, and it not solely limited to\nreadonly-ness of a boolean field. If you are interested in reading more\nabout these common design problems, you can check out\n[**State-Switch Controls:** The Infamous Case of the \"Mute\" Button](https://www.nngroup.com/articles/state-switch-buttons/)\n\nIn short, the reason end-users become confused is that it is not enough to\nkeep the same label for both `true` and `false` states,\nand only rely on changing the color or the\nshapes and visual motifs, to communicate what the field means.\n\nInstead, we need to use different labels to describe the state,\nand also get some additional help from icons and colors\nto clarify further if needed.\n\n:::important\nThis example shows how to setup the `limel-dynamic-label` component to\ncreate a more descriptive and dynamic labels for boolean fields.\nBut please make sure to read our guidelines about\n[Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/)\nto understand the importance of this, and get help in choosing the right labels\nfor boolean fields.\n:::"],"props":[{"name":"defaultLabel","tags":[],"text":"The label to display when no matching value is found in the `labels`\narray. This is a fallback label that ensures there's always a label\ndisplayed for the component.","type":"{ text?: string; icon?: string | Icon; }"},{"name":"labels","tags":[],"text":"A list of available labels. Each label has a corresponding value that\nwill be matched with the current `value` of the component to determine\nwhat label to display.","type":"Label<LabelValue>[]"},{"name":"value","tags":[],"text":"The current value of the component which is used to match with the given\n`labels` to determine what label to display.\n\nIf not matching label is found, the `defaultLabel` is displayed.","type":"boolean | number | string"}],"events":[],"tags":["exampleComponent limel-example-dynamic-label","exampleComponent limel-example-dynamic-label-readonly-boolean","beta "]},{"path":"/component/limel-file/","title":"File","text":["This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","Basic example","Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","Custom menu items\n\nBy providing custom menu items, you can add additional actions.","Limit accepted file types","Composite\n\nA place to try different combinations of states."],"props":[{"name":"accept","tags":[],"text":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","type":"string"},{"name":"disabled","tags":[],"text":"True if the input should be disabled","type":"boolean"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the chosen file is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"The input label.","type":"string"},{"name":"language","tags":[],"text":"Defines the localisation for translations.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"readonly","tags":[],"text":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the field is required.","type":"boolean"},{"name":"value","tags":[],"text":"The selected file.","type":"FileInfo"}],"events":[{"name":"change","tags":[],"text":"Dispatched when a file is selected/deselected","type":"FileInfo"},{"name":"interact","tags":[],"text":"Dispatched when clicking on a chip","type":"number | string"}],"tags":["exampleComponent limel-example-file","exampleComponent limel-example-file-custom-icon","exampleComponent limel-example-file-menu-items","exampleComponent limel-example-file-accepted-types","exampleComponent limel-example-file-composite"]},{"path":"/component/limel-file-viewer/","title":"File viewer","text":["This is a smart component that automatically detects\nthe most common file types such as image, audio, video, and text,\nand properly displays them in the browser.\nThe component is also capable to render the most common office files.\n\n:::note\nImage files will always be contained in their containers, which means\nthey automatically increase or decrease in size to fill their containing box\nwhilst preserving their aspect-ratio.\n\nText and PDF files will also always respect the width and height of the\ncontainer in which the `limel-file-viewer` is loaded.\n:::\n\nFor some file types such as text and images, the component will display a\ndownload button and a button to open the file in a new browser tab.\nThis will allow users to preview the file in a fullscreen mode with the\nbrowser and take advantage of for example native zooming and panning\nfunctionalities.","Most common file types\n\nThese are file formats that any web browser can display,\nwithout relying on any third-party plugins or additional\nplugins or extensions.","Office files\n\nThere are many different software programs that can be used to create\noffice files such as word processing documents, spreadsheets, and presentations.\nWeb browsers do not natively support these formats for direct display.\n\nHowever, using the file-viewer component, you can easily display the content\nof office file types. The viewer relies on a few third-party technologies\nto render the file.\n\nBy default, the component uses Microsoft Office Viewer, since it supports\na wider range of file office formats. However, you can\nchoose other viewers which are supported by this component.\n\n:::important\n1. The file should be stored somewhere with a publicly accessible URL,\notherwise the viewer cannot render them.\n1. Once the file is viewed, it might get cached for a short while on the\n3rd party servers –therefor remain publicly visible–,\neven if the original file deleted.\n1. Files that are too large may not be rendered at all.\n:::","Using the `filename` prop\nThe component looks at the URL of the provided file, and based on how the\nURL ends, it can detect the extension and consequently choose the right way\nof rendering it in the browser.\n\nHowever, sometimes the URLs do not have the filename in them. In this case,\nit is vital to specify the filename, for the component to be able to render it.\n\n:::important\nMake sure the provided filename contains the correct extension!\n:::\n\n:::tip\nThe filename that is specified will also be the filename that is used when the\nfile is downloaded by clicking the download button on the File Viewer.\n:::","Using inbuilt actions\n\nThe component offers a few inbuilt actions that enable users\nto download the file, open it in a new tab, or view it in fullscreen mode.\n\n:::note\nThese action buttons do not get rendered for the office files,\nbecause the 3rd-party office viewers already offer the same features\nin their UI.\n:::\n\n:::important\nThe download button will not work here in this example,\ndue to the security policies of the web browsers.\nThis is because the example files are not hosted in the same domain.\n:::","Adding custom actions","See an instant preview\nSelect a file from your local machine using the file picker below,\nand `limel-file-viewer` component will display the file, if the format\nis supported."],"props":[{"name":"actions","tags":[],"text":"An array of custom actions that can be displayed\nas an action menu on the file which is being displayed.","type":"ListItem<any>[]"},{"name":"allowDownload","tags":[],"text":"Displays a button that allows the user to download the file.\nNote that due to the browser's security policies,\nthe file should be hosted on the same domain\nfor the download button to work properly.\nNot displayed for office files!","type":"boolean"},{"name":"allowFullscreen","tags":[],"text":"Displays a button that allows the user to view the file\nin fullscreen mode.\nNot displayed for office files!","type":"boolean"},{"name":"allowOpenInNewTab","tags":[],"text":"Displays a button that allows the user to open the file\nin a new browser tab.\nNot displayed for office files!","type":"boolean"},{"name":"alt","tags":[],"text":"An optional alternative text, mainly for assistive technologies and screen readers.\nIt is used for only image files, as an `alt` attribute.\nShould optimally hold a description of the image,\nwhich is also displayed on the page if the image can't be loaded for some reason.","type":"string"},{"name":"filename","tags":[],"text":"The name of the file that must also contains its extension.\nThis overrides the filename that the `url` ends with.\nUseful when the `url` does not contain the filename.\nWhen specified, the `filename` will be used as filename of\nthe downloaded file.","type":"string"},{"name":"language","tags":[],"text":"Defines the localization for translations.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"officeViewer","tags":[],"text":"Defines the third-party viewer that should be used to render\nthe content of office files, such as word processing documents,\npresentations, or spreadsheets.","type":"\"google-drive\" | \"microsoft-office\""},{"name":"url","tags":[],"text":"Link to the file","type":"string"}],"events":[{"name":"action","tags":[],"text":"Emitted when a custom action is selected from the action menu.","type":"ListItem<any>"}],"tags":["exampleComponent limel-example-file-viewer-basic","exampleComponent limel-example-file-viewer-office","exampleComponent limel-example-file-viewer-filename","exampleComponent limel-example-file-viewer-inbuilt-actions","exampleComponent limel-example-file-viewer-custom-actions","exampleComponent limel-example-file-viewer-with-picker","beta "]},{"path":"/component/limel-form/","title":"Form","text":["","Basic form with validation","Nested data","List data","Dynamic schema","Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","Using `propsFactory`","Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","Form with custom error message","Form with server validation","Form fields with help\nIt's possible to add extensive help to any form element.\nThe string you provide can be in Markdown format,\nempowering you to present a rich-text experience to the user,\nincluding bullet points, hyperlinks, etc…\nRead more on [Help](#/component/limel-help) component.\n\n:::note\nDo not confuse `help` and `helperText`!\nThe helper text is a short description for the input fields\nthat becomes visible when the user click on the fields to provide\nbrief clues about the field or its expected value.\n\nIt can also be used to display validation errors.\nThese errors will be displayed in red below the fields, without\nrequiring the users to click on the field.\n\nCheck out the [Input field Component](#/component/limel-input-field)\nexamples, where we describe how to properly use `helperText`, and `placeholder`.\n:::\n\n:::tip\nWhen rendering a form using a schema, the `helperText`s are automatically\npassed for all the fields based on the schema and validation errors.\nThe `description` specified for a field in the schema is used as\nhelper text while the field is shown as valid.\nWhen there is validation feedback to provide to the user,\nthe field is instead marked as invalid with an error message that is displayed\nin the place of the helper text.\n:::","Row layout"],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the whole form.","type":"boolean"},{"name":"errors","tags":[],"text":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","type":"{ [key: string]: string[] | ValidationError; }"},{"name":"propsFactory","tags":[],"text":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","type":"(schema: FormSchema<any>) => Record<string, any>"},{"name":"schema","tags":[],"text":"The schema used to render the form","type":"FormSchema<any>"},{"name":"transformErrors","tags":[],"text":"Custom function to customize the default error messages","type":"(errors: FormError[]) => FormError[]"},{"name":"value","tags":[],"text":"Value of the form","type":"object"}],"events":[{"name":"change","tags":[],"text":"Emitted when a change is made within the form","type":"object"},{"name":"validate","tags":[],"text":"Emitted when the validity of the form changes, or when\na change is made to an invalid form","type":"ValidationStatus"}],"tags":["exampleComponent limel-example-form","exampleComponent limel-example-nested-form","exampleComponent limel-example-list-form","exampleComponent limel-example-dynamic-form","exampleComponent limel-example-custom-component-form","exampleComponent limel-example-props-factory-form","exampleComponent limel-example-form-layout","exampleComponent limel-example-form-span-fields","exampleComponent limel-example-custom-error-message","exampleComponent limel-example-server-errors","exampleComponent limel-example-form-with-help","exampleComponent limel-example-form-row-layout"]},{"path":"/component/limel-grid/","title":"Grid","text":["The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it."],"props":[],"events":[],"tags":["exampleComponent limel-example-grid","slot - Grid content"]},{"path":"/component/limel-header/","title":"Header","text":["A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","Basic example\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","Using the \"actions\" slot\nThe component offers a place for including custom actions, or\nany other component that you want to include in the header.\nTo include any component in the `actions` area,\nyou can simply use the `slot=\"actions\"` attribute.\n\n:::note\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n:::","Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::"],"props":[{"name":"heading","tags":[],"text":"Title to display","type":"string"},{"name":"icon","tags":[],"text":"Icon to display","type":"Icon | string"},{"name":"subheading","tags":[],"text":"Subheading to display","type":"string"},{"name":"subheadingDivider","tags":[],"text":"The visual divider that separates the `subheading` and the `supportingText`.\nIt must be a single character such as `-` or `,`.","type":"string"},{"name":"supportingText","tags":[],"text":"An extra string of text to display along with with the Subheading","type":"string"}],"events":[],"tags":["exampleComponent limel-example-header","exampleComponent limel-example-header-slot-actions","exampleComponent limel-example-header-colors","exampleComponent limel-example-header-responsive","exampleComponent limel-example-header-narrow","slot actions - Content (actions) to be put inside the far right surface of\nthe header","slot [no name] - DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements."]},{"path":"/component/limel-help/","title":"Help","text":["A good design is self-explanatory! However, sometimes concepts are\ntoo complex to understand, no matter how well-designed a user interface is.\nIn such cases, contextual help can be a great way to provide users with\nhelp precisely where and when users need it.\n\nIn app interface design, providing contextual help emerges as a viable practice\nfor enhancing user experience and usability.\nContextual help serves as a quick-to-access guiding,\nempowering users to more easily understand and navigate through\nthe intricacies of an application.\n\nUsing this component designers empower users to grasp the functionality\nof an app more effortlessly, minimizes the learning curve,\ntransforming complex features into accessible opportunities for exploration.","Basic example\nThis component accepts a string as a value and displays it in a popover.\nThis string can be in markdown format, enabling you to add links, lists, etc;\nproviding a richer experience for the user.","Help with the read more link\nIf a `readMoreLink` supplied, it will render a \"Read more\" link at the bottom of the content.\n\nEven though you can add a link anywhere in the content, it is recommended to\nuse the read more link. Because it will always be displayed at the bottom\nof the popover after the content, does not scroll away with the content,\nand it will be styled in a consistent way.","Help with custom open direction","Placement of the trigger element and the layout\n\nThe trigger element of the help component can be placed\nbefore or after the element it is describing.\n\nHowever, to provide a consistent layout, we recommend placing the\ntrigger element on the left side of all elements.\n\nJust make sure the elements are aligned correctly,\neven when there is no help component beside them.\n\nAlso see how we have implemented this component in the\n[Form](#/component/limel-form) component."],"props":[{"name":"openDirection","tags":[],"text":"{@inheritdoc Help.openDirection}","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\""},{"name":"readMoreLink","tags":[],"text":"{@inheritdoc Help.readMoreLink}","type":"Link"},{"name":"trigger","tags":[],"text":"{@inheritdoc Help.trigger}","type":"string"},{"name":"value","tags":[],"text":"{@inheritdoc Help.value}","type":"string"}],"events":[],"tags":["exampleComponent limel-example-help","exampleComponent limel-example-read-more","exampleComponent limel-example-open-direction","exampleComponent limel-example-placement"]},{"path":"/component/limel-icon/","title":"Icon","text":[":::important\nTo install your icon set correctly, please read the [documentation here](#/).\n:::\n\nThe size and color of the icon is normally set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.","Names\nTo display an icon, all you need to do is specifying its name.","Size\nThere are preset sizes.\n:::note\nSetting the `bade` prop to `true` affects how big the icon is rendered,\nbut only when the `size` attribute is also set.\n:::","Colors\nIcons will inherit their colors form the `color` property of the parent element.\nFor styling the background color, you can use the CSS variable\n`--icon-background-color`.\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\nBut the `bade` has effect, only when the `size` attribute is also set.\n:::"],"props":[{"name":"badge","tags":[],"text":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set.","type":"boolean"},{"name":"name","tags":[],"text":"Name of the icon","type":"string"},{"name":"size","tags":[],"text":"Size of the icon","type":"\"large\" | \"medium\" | \"small\" | \"x-small\""}],"events":[],"tags":["exampleComponent limel-example-icon-name","exampleComponent limel-example-icon-size","exampleComponent limel-example-icon-color"]},{"path":"/component/limel-icon-button/","title":"Icon button","text":["","Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","Disabled","Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the button.","type":"boolean"},{"name":"elevated","tags":[],"text":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","type":"boolean"},{"name":"icon","tags":[],"text":"The icon to display.","type":"string"},{"name":"label","tags":[],"text":"The text to show to screenreaders and other assistive tech.","type":"string"}],"events":[],"tags":["exampleComponent limel-example-icon-button-basic","exampleComponent limel-example-icon-button-disabled","exampleComponent limel-example-icon-button-elevated","exampleComponent limel-example-icon-button-toggle-state","exampleComponent limel-example-icon-button-composite"]},{"path":"/component/limel-info-tile/","title":"Info tile","text":["This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","Using the primary slot\nThe component offers a primary slot that can be used to display\nany custom content.\n\n:::important\n1. If there is a component to be displayed in the primary slot,\nthe info tile won't render the inbuilt progress bar.\n1. The primary slot has an aspect ratio of 1:1, so the content\nwill be displayed in a square area.\n:::","How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text."],"props":[{"name":"badge","tags":[],"text":"If supplied, the info tile will display a notification badge.","type":"number | string"},{"name":"disabled","tags":[],"text":"Set to `true` if info tile is disabled.","type":"boolean"},{"name":"icon","tags":[],"text":"Name of icon for the info tile.","type":"string"},{"name":"label","tags":[],"text":"The text to show below the info tile. Long labels will be truncated.","type":"string"},{"name":"link","tags":[],"text":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","type":"Link"},{"name":"loading","tags":[],"text":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","type":"boolean"},{"name":"prefix","tags":[],"text":"A string of text that is visually placed before the value.","type":"string"},{"name":"progress","tags":[],"text":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `displayPercentageColors`: false\n\nColors change with intervals of 10 %.","type":"InfoTileProgress"},{"name":"suffix","tags":[],"text":"A string of text that is visually placed after the value.","type":"string"},{"name":"value","tags":[],"text":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize.","type":"number | string"}],"events":[],"tags":["exampleComponent limel-example-info-tile","exampleComponent limel-example-info-tile-badge","exampleComponent limel-example-info-tile-progress","exampleComponent limel-example-info-tile-loading","exampleComponent limel-example-info-tile-primary-slot","exampleComponent limel-example-info-tile-styling"]},{"path":"/component/limel-input-field/","title":"Input field","text":["","Input Field of Type Text","Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","Multiple Fields","Input Field of Type Number","Input Field with Completions","Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","Input Field with Leading and Trailing Icons & Action","With `showLink=true`","Input Field with Error Icon","Input Field of Type Textarea","Suffix\nAn Input Field with a unit of measurement displayed as suffix","Prefix\nAn input Field with a currency symbol text displayed as prefix","Input Field of Type Search","Input Field with pattern","Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)."],"props":[{"name":"completions","tags":[],"text":"list of suggestions `value` can autocomplete to.","type":"string[]"},{"name":"disabled","tags":[],"text":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","type":"boolean"},{"name":"formatNumber","tags":[],"text":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the input field is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"The input label.","type":"string"},{"name":"leadingIcon","tags":[],"text":"Leading icon to show to the far left in the field.","type":"string"},{"name":"locale","tags":[],"text":"The locale to use for formatting numbers.","type":"string"},{"name":"max","tags":[],"text":"Maximum allowed value if input type is `number`.","type":"number"},{"name":"maxlength","tags":[],"text":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","type":"number"},{"name":"min","tags":[],"text":"Minimum allowed value if input type is `number`.","type":"number"},{"name":"minlength","tags":[],"text":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","type":"number"},{"name":"pattern","tags":[],"text":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`.","type":"string"},{"name":"placeholder","tags":[],"text":"The placeholder text shown inside the input field, when the field is focused and empty.","type":"string"},{"name":"prefix","tags":[],"text":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`.","type":"string"},{"name":"readonly","tags":[],"text":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the field is required.","type":"boolean"},{"name":"showLink","tags":[],"text":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","type":"boolean"},{"name":"step","tags":[],"text":"Incremental values that are valid if the field type is `number`.","type":"\"any\" | number"},{"name":"suffix","tags":[],"text":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`.","type":"string"},{"name":"trailingIcon","tags":[],"text":"Trailing icon to show to the far right in the field.","type":"string"},{"name":"type","tags":[],"text":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","type":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\""},{"name":"value","tags":[],"text":"The value of the field.","type":"string"}],"events":[{"name":"action","tags":[],"text":"Emitted when `trailingIcon` or `leadingIcon` is set\nand the icon is interacted with.","type":"void"},{"name":"change","tags":[],"text":"Emitted when the input value is changed.","type":"string"}],"tags":["exampleComponent limel-example-input-field-text","exampleComponent limel-example-input-field-placeholder","exampleComponent limel-example-input-field-text-multiple","exampleComponent limel-example-input-field-number","exampleComponent limel-example-input-field-autocomplete","exampleComponent limel-example-input-field-icon-leading","exampleComponent limel-example-input-field-icon-trailing","exampleComponent limel-example-input-field-icon-both","exampleComponent limel-example-input-field-showlink","exampleComponent limel-example-input-field-error-icon","exampleComponent limel-example-input-field-textarea","exampleComponent limel-example-input-field-suffix","exampleComponent limel-example-input-field-prefix","exampleComponent limel-example-input-field-search","exampleComponent limel-example-input-field-pattern","exampleComponent limel-example-input-field-focus"]},{"path":"/component/limel-linear-progress/","title":"Linear progress","text":["The linear progress component can be used to visualize the current state of a progress in a scale;\nfor example percentage of completion of a task.","Basic example\nThe component accepts a value between `0` and `1` and visualizes it on a scale.\nIn this example, value `0` stands for `0%` and `1` is `100%`,\nand the `value` of the linear progress is controlled by an input field.","Indeterminate progress\nThe component can be put in an indeterminate state,\nwhere the progress bar will animate without a specific value.\n\nThis is useful for instance when the progress is not known,\nbut the user should be aware that something is happening.","Using an accessible label\nThe component tells the assistive technologies that it is a \"Progress bar\".\nHowever, instead of relying on such a generic label,\nyou can provide a more specific label that describes what the progress bar is for,\nor what kind of progress it is visualizing.\n\nThis is achieved, using the `accessibleLabel` property.","Setting the color"],"props":[{"name":"accessibleLabel","tags":[],"text":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nIf not provided, the generic word of \"Progress bar\" will be used.","type":"string"},{"name":"indeterminate","tags":[],"text":"Puts the progress bar in an indeterminate state","type":"boolean"},{"name":"language","tags":[],"text":"Defines the language for translations.\nWill translate the translatable strings on the components.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"value","tags":[],"text":"The value of the progress bar. Should be between `0` and `1`.","type":"number"}],"events":[],"tags":["exampleComponent limel-example-linear-progress","exampleComponent limel-example-linear-progress-indeterminate","exampleComponent limel-example-linear-progress-accessible-label","exampleComponent limel-example-linear-progress-color"]},{"path":"/component/limel-list/","title":"List","text":["","Basic list","List with secondary text","List with separators\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists.\n\n- **Grouping and Hierarchy:**\nSeparators can be used to group related items, signaling to users that\nthose items share a common attribute or purpose.\nThis grouping effect aids in creating a hierarchical structure within the list,\nmaking it simpler for users to grasp relationships and make informed decisions.\n- **Visual Scannability:**\nWhen users quickly scan a list, their eyes naturally use the separator lines\nas visual anchors, making it easier to find items and remember their whereabouts\nnext time they revisit the same list.\n- **Reduced Cognitive Effort:**\nSeparators contribute to a user's overall comprehension and experience\nby reducing the cognitive effort required to process the information.\n\nYou can optionally add a short title to the separators,\nto clarify further what each group of items is about,\nand by doing so improve the users perception and experience.","List with selectable items","List with icons","List with badge icons","List with Pictures and Icons\n\n:::note\nWhile it's technically possible to display both images and icons simultaneously\nfor each list item, we recommend against using identical icons across all items.\nRepeating the same icon for every list item adds unnecessary visual clutter\nwithout providing additional value.\n\nIcons, like images, should serve to help users quickly differentiate between\nlist items. They are most effective when each icon uniquely identifies\nthe type or category of its list item.\n:::","List with checkboxes","List with checkboxes and icons","List with radio buttons","List with radio buttons and icons","List with action menu","List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","List with a primary component"],"props":[{"name":"badgeIcons","tags":[],"text":"Set to `true` if the list should display larger icons with a background","type":"boolean"},{"name":"iconSize","tags":[],"text":"Size of the icons in the list","type":"\"large\" | \"medium\" | \"small\" | \"x-small\""},{"name":"items","tags":[],"text":"List of items to display","type":"(ListSeparator | ListItem<any>)[]"},{"name":"maxLinesSecondaryText","tags":[],"text":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","type":"number"},{"name":"type","tags":[],"text":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","type":"\"checkbox\" | \"radio\" | \"selectable\""}],"events":[{"name":"change","tags":[],"text":"Fired when a new value has been selected from the list.\nOnly fired if `type` is set to `selectable`, `radio` or `checkbox`.","type":"ListItem<any> | ListItem<any>[]"},{"name":"interact","tags":[],"text":"Fires when a user interacts with an item in the list (e.g., click,\nkeyboard select).","type":"ListItem<any>"},{"name":"select","tags":[],"text":"Fired when an action has been selected from the action menu of a list item","type":"ListItem<any> | ListItem<any>[]"}],"tags":["exampleComponent limel-example-list","exampleComponent limel-example-list-secondary","exampleComponent limel-example-list-separator","exampleComponent limel-example-list-selectable","exampleComponent limel-example-list-icons","exampleComponent limel-example-list-badge-icons","exampleComponent limel-example-list-pictures","exampleComponent limel-example-list-checkbox","exampleComponent limel-example-list-checkbox-icons","exampleComponent limel-example-list-radio-button","exampleComponent limel-example-list-radio-button-icons","exampleComponent limel-example-list-action","exampleComponent limel-example-list-striped","exampleComponent limel-example-list-badge-icons-with-multiple-lines","exampleComponent limel-example-list-grid","exampleComponent limel-example-list-primary-component"]},{"path":"/component/limel-markdown/","title":"Markdown","text":["The Markdown component receives markdown syntax\nand renders it as HTML.","Headings","Emphasis","Lists","Links\nThere are two ways to create links.","Images","Code","Footnote","Tables","HTML","Keys","Blockquotes","Horizontal Rule","Composite example\nTest your markdown code and see what you get in return in real-time.","Custom Element\n\nYou can allow custom elements by adding them to a whitelist. You need to specify both\nthe `tagName` of the element as well as the allowed `attributes`."],"props":[{"name":"lazyLoadImages","tags":[],"text":"Enable lazy loading for images","type":"boolean"},{"name":"value","tags":[],"text":"The input text. Treated as GitHub Flavored Markdown, with the addition\nthat any included HTML will be parsed and rendered as HTML, rather than\nas text.","type":"string"},{"name":"whitelist","tags":["alpha "],"text":"Whitelisted html elements.\n\nAny custom element added here will not be sanitized and thus rendered.\nCan also be set via `limel-config`. Setting this property will override\nthe global config.","type":"CustomElementDefinition[]"}],"events":[],"tags":["exampleComponent limel-example-markdown-headings","exampleComponent limel-example-markdown-emphasis","exampleComponent limel-example-markdown-lists","exampleComponent limel-example-markdown-links","exampleComponent limel-example-markdown-images","exampleComponent limel-example-markdown-code","exampleComponent limel-example-markdown-footnotes","exampleComponent limel-example-markdown-tables","exampleComponent limel-example-markdown-html","exampleComponent limel-example-markdown-keys","exampleComponent limel-example-markdown-blockquotes","exampleComponent limel-example-markdown-horizontal-rule","exampleComponent limel-example-markdown-composite","exampleComponent limel-example-markdown-custom-component"]},{"path":"/component/limel-menu/","title":"Menu","text":["","Basic example\n\nWith a simple `onSelect` handler.","Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","Size of the menu drop-down surface\n\nAny element in the UI can be configured to open a menu.\nBy default, the dropdown that opens up after the menu trigger is clicked\ninherits its width from the items that are inside the dropdown menu.\n\nHowever, for some designs, you may want the width of the menu dropdown\nto be exactly as wide as the width of its trigger element, or\nas wide as `limel-menu` element itself. This is easily achieved using the\n`surfaceWidth` prop. Read more on `SurfaceWidth`.\n\n:::tip\nIn this example, `limel-menu` is highlighted with a dashed border,\nto make it easier to see its width.\n:::\n:::note\nThe `--menu-surface-width` Overrides the width defined by `surfaceWidth`!\n:::","Using separators with titles\n\nYou divide groups of items using separators.\nIt is also possible add a short title to the separators,\nto clarify further what each group of menu items is about,\nand by doing so improve the users perception and experience.","With icons","With badge icons","With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","Menu with supporting hotkeys","With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","Sub-menus\nTo have an enhanced navigation and provide a better organization of items,\nyou can incorporate sub-menus within the menu structure;\nand create a so called \"Cascading menu\".\nThese sub-menus provide the user with an efficient way to access a\nwide range of choices without overwhelming them with clutter or complexity.\n\nThe main menu, often called the parent menu,\ntypically consists of top-level options that represent primary categories or options.\nSub-menus, on the other hand, are secondary or menus that are nested\nbeneath these primary options.\n\nSome of the benefits of creating tree-structure for the menus are:\n- **Organized Information:** Sub-menus enable a clear and organized presentation of content,\nmaking it easier for the user to find what they're looking for within a specific category.\n- **Space Efficiency:** They save screen space by concealing secondary options until needed,\nreducing visual clutter and making the interface cleaner and more user-friendly.\n- **Scalability:** Sub-menus can accommodate a large number of choices or features\nwithin a single parent menu, making them suitable for complex applications or websites.\n- **Logical Hierarchy:** By structuring information hierarchically,\nsub-menus help the user understand the relationships between various\noptions and navigate through the interface more intuitively.\n\nOur cascading menus are designed to be mobile-friendly.\nThis means that sub-menus are opened within the same menu surface,\ninstead of the classic way of sticking out on the side, as a secondary menu.\nThanks to a breadcrumbs component on the top, the user can easily navigate back\nand forth within the menu structure.\n\n:::tip\nIt is also very easy to navigate the nested menu structure using the keyboard.\n\n- Using the <kbd>↓</kbd> & <kbd>↑</kbd> keys, the user can naturally\nnavigate within the presented menu,\n- pressing the <kbd>→</kbd> key on a menu item that has sub-menu opens a nested menu,\n- and pressing the <kbd>←</kbd> key takes the user back to the previous/parent menu.\n:::","Lazy loading items in sub-menus","Lazy loading infinite amount of sub-menu\n\n:::note\nThis example is here to show what the component looks like when you have a\nlot of nested sub-menus, and what the breadcrumb component looks like when\nyou are deep into the menu.\n\nIf you are looking for code examples, please see the\n_Lazy loading items in sub-menus_ example instead.\n:::","Searchable items","Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value."],"props":[{"name":"badgeIcons","tags":[],"text":"Defines whether the menu should show badges.","type":"boolean"},{"name":"disabled","tags":[],"text":"Sets the disabled state of the menu.","type":"boolean"},{"name":"emptyResultMessage","tags":[],"text":"Message to display when search returns 0 results.","type":"string"},{"name":"gridLayout","tags":[],"text":"Renders list items in a grid layout, rather than a vertical list","type":"boolean"},{"name":"items","tags":[],"text":"A list of items and separators to show in the menu.","type":"(ListSeparator | MenuItem<any>)[]"},{"name":"open","tags":[],"text":"Sets the open state of the menu.","type":"boolean"},{"name":"openDirection","tags":[],"text":"Decides the menu's location in relation to its trigger","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\""},{"name":"rootItem","tags":[],"text":"A root breadcrumb item to show above the menu items.\nClicking it navigates back from a sub-menu to the root menu.","type":"BreadcrumbsItem"},{"name":"searcher","tags":[],"text":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `MenuItem`:s.\n\nSee the docs for the type `MenuSearcher` for type information on\nthe searcher function itself.","type":"(query: string) => Promise<(ListSeparator | MenuItem<any>)[]>"},{"name":"surfaceWidth","tags":[],"text":"Decides the width of menu's dropdown","type":"\"inherit-from-items\" | \"inherit-from-menu\" | \"inherit-from-trigger\""}],"events":[{"name":"cancel","tags":[],"text":"Is emitted when the menu is cancelled.","type":"void"},{"name":"navigateMenu","tags":[],"text":"Is emitted when a menu item with a sub-menu is selected.","type":"MenuItem<any>"},{"name":"select","tags":[],"text":"Is emitted when a menu item is selected.","type":"MenuItem<any>"}],"tags":["slot trigger - Element to use as a trigger for the menu.","exampleComponent limel-example-menu-basic","exampleComponent limel-example-menu-disabled","exampleComponent limel-example-menu-open-direction","exampleComponent limel-example-menu-surface-width","exampleComponent limel-example-menu-separators","exampleComponent limel-example-menu-icons","exampleComponent limel-example-menu-badge-icons","exampleComponent limel-example-menu-grid","exampleComponent limel-example-menu-hotkeys","exampleComponent limel-example-menu-secondary-text","exampleComponent limel-example-menu-notification","exampleComponent limel-example-menu-sub-menus","exampleComponent limel-example-menu-sub-menu-lazy-loading","exampleComponent limel-example-menu-sub-menu-lazy-loading-infinite","exampleComponent limel-example-menu-searchable","exampleComponent limel-example-menu-composite"]},{"path":"/component/limel-picker/","title":"Picker","text":["","Single value can be picked.\n\nSince all items are already loaded from the server, we can use the\n`allItems` property to provide the picker with all the items at once.\nThe picker uses a default search function that filters the items based on\nthe `text` and `secondaryText` properties of the items.\n\n:::note\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.\n:::","Multiple values can be picked.\n\n- Already picked items are removed from the available options.","With icons","With pictures","With a value as an object","Picker with `value` as an object, containing items with menus\nWhile chips inside the picker can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","With a custom search function\n\nThe custom search function returns two suggestions if the query is empty.\nOtherwise, it filters the items based on the query.\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","With a \"search\" leading icon","With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","Composite\n\nA place to try different combinations of states."],"props":[{"name":"actionPosition","tags":[],"text":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","type":"\"bottom\" | \"top\""},{"name":"actionScrollBehavior","tags":[],"text":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","type":"\"scroll\" | \"sticky\""},{"name":"actions","tags":[],"text":"Static actions that can be clicked by the user.","type":"ListItem<Action>[]"},{"name":"allItems","tags":[],"text":"Only used if no `searcher` is provided. The picker will then use a\ndefault search function that filters the `allItems` based on the\n`text` and `secondaryText` properties of the items.\nThis way, custom search functions are typically only needed when the\nsearch is done on the server.\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.","type":"ListItem<PickerValue>[]"},{"name":"badgeIcons","tags":[],"text":"Whether badge icons should be used in the result list or not","type":"boolean"},{"name":"delimiter","tags":[],"text":"Sets delimiters between chips. Works only when `multiple` is `true`.","type":"string"},{"name":"disabled","tags":[],"text":"True if the picker should be disabled","type":"boolean"},{"name":"emptyResultMessage","tags":[],"text":"A message to display when the search returned an empty result","type":"string"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the input field is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"Text to display for the input field of the picker","type":"string"},{"name":"leadingIcon","tags":[],"text":"Leading icon to show to the far left in the text field","type":"string"},{"name":"multiple","tags":[],"text":"True if multiple values are allowed","type":"boolean"},{"name":"readonly","tags":[],"text":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","type":"boolean"},{"name":"required","tags":[],"text":"True if the control requires a value","type":"boolean"},{"name":"searchLabel","tags":[],"text":"Search label to display in the input field when searching","type":"string"},{"name":"searcher","tags":[],"text":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","type":"(query: string) => Promise<(ListSeparator | ListItem<any>)[]>"},{"name":"value","tags":[],"text":"Currently selected value or values. Where the value can be an object.","type":"ListItem<PickerValue> | ListItem<PickerValue>[]"}],"events":[{"name":"action","tags":[],"text":"Emitted when the user selects an action.","type":"Action"},{"name":"change","tags":[],"text":"Fired when a new value has been selected from the picker","type":"ListItem<PickerValue> | ListItem<PickerValue>[]"},{"name":"interact","tags":[],"text":"Fired when clicking on a selected value","type":"ListItem<PickerValue>"}],"tags":["exampleComponent limel-example-picker-basic","exampleComponent limel-example-picker-multiple","exampleComponent limel-example-picker-icons","exampleComponent limel-example-picker-pictures","exampleComponent limel-example-picker-value-as-object","exampleComponent limel-example-picker-value-as-object-with-actions","exampleComponent limel-example-picker-empty-suggestions","exampleComponent limel-example-picker-leading-icon","exampleComponent limel-example-picker-static-actions","exampleComponent limel-example-picker-composite"]},{"path":"/component/limel-popover/","title":"Popover","text":["A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::","Basic example\nThis example shows a simple trigger element that opens a popover when clicked.\n\n:::note\nDue accessibility concerns, the trigger element should be something that can be\ninteracted with, using both mouse click and the <kbd>  spacebar  </kbd>\nor the <kbd>↩ return</kbd> key on the keyboard.\n\nThis is why we are using a `limel-button` element as the trigger in this example,\nwhich is both accessible with mouse and keyboard.\n:::\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::","Trigger Interaction for Popovers\n\nPopovers are typically triggered by a click event, but they can also be triggered\nby hover or focus events. This approach is especially useful when the click event\nis reserved for other interactions, such as navigating to another page or activating\na different function.\n\nTriggering a popover with hover or focus is useful when clicking the trigger element\nis required for actions like navigation, while still providing contextual information\nor options through the popover.\n\n:::important\nKey considerations when using hover and focus triggers:\n\n**Delayed Popover Opening**:\nHovering or focusing on the trigger element should not immediately open the popover.\nAlways introduce a reasonable delay before opening the popover to prevent accidental activation.\nThis prevents an annoying user experience where the popover opens as the user moves\ntheir cursor across the UI. It's especially important in UIs with multiple trigger elements.\n\n**Popover Should Remain Open**:\nThe popover should remain open even if the user moves the cursor away from\nthe trigger element or navigates away with the keyboard.\nThis allows the user to interact with the popover content without it closing unexpectedly.\n\n**Touchscreen Accessibility**:\nConsider the experience for users on touchscreen devices. Hover interactions might not be available,\nso ensure the design is accessible to them.\n\n**Provide Proper Cues**:\nProvide clear visual indicators, or use accessible attributes like `title` or `aria-label`,\nto signal that the trigger element is interactive when hovered or focused.\nThis ensures that users understand they can interact with the element even without clicking.\n\n**Low discoverability**:\nRemember that such interaction are not easily discovered by the end-users.\nTherefore, you should avoid having any critical functionality to be hidden\nbehind such interactions, and only use it as supplementary means of enriching\nthe user experience.\n:::","Styling\nThere are a few custom CSS properties that you can use to style the popover."],"props":[{"name":"open","tags":[],"text":"True if the content within the popover should be visible","type":"boolean"},{"name":"openDirection","tags":[],"text":"Decides the popover's location in relation to its trigger","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\""}],"events":[{"name":"close","tags":[],"text":"Emits an event when the component is closing","type":"void"}],"tags":["slot - Content to put inside the surface","exampleComponent limel-example-popover-basic","exampleComponent limel-example-popover-trigger-interaction","exampleComponent limel-example-popover-styling"]},{"path":"/component/limel-progress-flow/","title":"Progress flow","text":["","Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component."],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","type":"boolean"},{"name":"flowItems","tags":[],"text":"What flow items to render","type":"FlowItem[]"},{"name":"readonly","tags":[],"text":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","type":"boolean"}],"events":[{"name":"change","tags":[],"text":"Fired when a new value has been selected from the progress flow","type":"FlowItem"}],"tags":["exampleComponent limel-example-progress-flow-basic","exampleComponent limel-example-progress-flow-secondary-text","exampleComponent limel-example-progress-flow-disabled-step","exampleComponent limel-example-progress-flow-colors","exampleComponent limel-example-progress-flow-colors-css","exampleComponent limel-example-progress-flow-off-progress-steps","exampleComponent limel-example-progress-flow-narrow"]},{"path":"/component/limel-select/","title":"Select","text":["","","Select with icons for options","Select with separators between options\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists. Read more about advantages of using\nseparators in the\n[List component's documentations](/#/component/limel-list/).","Select with secondary text for options\nUsing a `secondaryText` you can provide additional information about\neach option in the list, helping the users to select the right choice.\n\n:::note\n1. The secondary text is only visible in the dropdown list,\nnot on the selected option in the input field.\n1. Additionally, on touch screen devices, the secondary text will not\nbe visible in the dropdown list, since the component uses the \"native\"\nselect, which does not have support for additional features like this,\nor displaying icons beside the options.\n:::","Select multiple values","With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nany chosen value.\n\nThis example demonstrates two different approaches to empty options in select components:\n\n**1. Unlabeled empty option**:\nA select with a completely empty option (both `text` and `value` are empty).\n\nProvides a way to clear a selection without any visible text.\nThis works well when the select's purpose is clear from context\nand \"no selection\" feels intuitive.\n\n**2. Labeled empty option**:\nA select with a labeled empty option (using a label as `text`,\nbut with an empty `value`).\n\nThis approach uses descriptive labels like \"All\", \"None\", while still\nhaving an empty `value`. When good labels are used in the right context,\nthis improves clarity for users by explicitly communicating what an empty\nselection means in this specific context.\n\nTry selecting a value below, and then selecting the empty\noption again. Notice how the select's UI resets to an empty default state,\nif no `text` is provided to label the empty option.\n\n:::important\nIf the component is set as `required`, and the empty option is unlabeled,\nit will be removed from the list.\nThis is to ensure that if users open the required dropdown,\nand close it without selecting anything, the component can make set\nitself to `invalid`, forcing the user to choose a choice,\nbefore being able to continue.\n\nHowever, when the empty option is labeled, it will remain in the list,\neven if the component is set as `required`. This can be confusing for users,\nas they may not understand why the empty option is still available and selectable,\nbut once selected, the component becomes `invalid`.\n:::","Specific Value Preselected","Changing Available Options\n\nThis example shows how the component works when options are changed\nprogrammatically during the lifetime of the component.\n\nWe have 5 different sets of options:\n1. A set of options with an empty and disabled first option. This is used to ensure that the empty option cannot be re-selected.\n2. A set of options with an empty but non-disabled first option. This is used to ensure that the empty option can be re-selected.\n3. An empty array. This is used to ensure that the component can handle an empty set of options. To load the component with an empty set of options, select this group, then click the \"Reinitialize\" button.\n4. A set of 3 options.\n5. A set of 4 options. Set 4 and 5 are used to ensure that the component can handle sets of different sizes.","Select field inside a dialog"],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus.","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the select is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"Text to display next to the select.","type":"string"},{"name":"multiple","tags":[],"text":"Set to `true` to allow multiple values to be selected.","type":"boolean"},{"name":"options","tags":[],"text":"List of options.","type":"(ListSeparator | Option<string>)[]"},{"name":"readonly","tags":[],"text":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","type":"boolean"},{"name":"required","tags":[],"text":"True if the control requires a value.","type":"boolean"},{"name":"value","tags":[],"text":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","type":"Option<string> | Option<string>[]"}],"events":[{"name":"change","tags":[],"text":"Emitted when the value is changed.","type":"Option<string> | Option<string>[]"}],"tags":["exampleComponent limel-example-select","exampleComponent limel-example-select-with-icons","exampleComponent limel-example-select-with-separators","exampleComponent limel-example-select-with-secondary-text","exampleComponent limel-example-select-multiple","exampleComponent limel-example-select-with-empty-option","exampleComponent limel-example-select-preselected","exampleComponent limel-example-select-change-options","exampleComponent limel-example-select-dialog"]},{"path":"/component/limel-shortcut/","title":"Shortcut","text":["This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","Example with click handler"],"props":[{"name":"badge","tags":[],"text":"If specified, will display a notification badge\non the shortcut.","type":"number | string"},{"name":"disabled","tags":[],"text":"Set to `true` if shortcut is disabled.","type":"boolean"},{"name":"icon","tags":[],"text":"Name of icon for the shortcut.","type":"string"},{"name":"label","tags":[],"text":"The text to show below the shortcut. Long label will be truncated.","type":"string"},{"name":"link","tags":[],"text":"If supplied, the shortcut will be a clickable link.","type":"Link"}],"events":[],"tags":["exampleComponent limel-example-shortcut","exampleComponent limel-example-shortcut-notification","exampleComponent limel-example-shortcut-styling","exampleComponent limel-example-shortcut-with-click-handler"]},{"path":"/component/limel-slider/","title":"Slider","text":["","Basic example","With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","Composite\n\nA place to try different combinations of states."],"props":[{"name":"disabled","tags":[],"text":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","type":"boolean"},{"name":"factor","tags":[],"text":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","type":"number"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the slider","type":"string"},{"name":"label","tags":[],"text":"Label to display next to the input","type":"string"},{"name":"readonly","tags":[],"text":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","type":"boolean"},{"name":"step","tags":[],"text":"The stepping interval to use when adjusting the value","type":"number"},{"name":"unit","tags":[],"text":"Unit to display next to the value","type":"string"},{"name":"value","tags":[],"text":"The value of the input","type":"number"},{"name":"valuemax","tags":[],"text":"The maximum value allowed","type":"number"},{"name":"valuemin","tags":[],"text":"The minimum value allowed","type":"number"}],"events":[{"name":"change","tags":[],"text":"Emitted when the value has been changed","type":"number"}],"tags":["exampleComponent limel-example-slider-basic","exampleComponent limel-example-slider-multiplier","exampleComponent limel-example-slider-multiplier-percentage-colors","exampleComponent limel-example-slider-composite"]},{"path":"/component/limel-snackbar/","title":"Snackbar","text":["A Snackbar –also known as \"Toast\"– is used to inform the end user\nabout an action or a process in the system.\nThe information could vary from announcing that a process has just started,\nis taking place now, has ended, or has been interrupted or canceled.\n\nThe information that you provide using a snackbar should be:\n- temporary\n- contextual\n- short\n- and most importantly, ignorable.\n\nIt means if the user misses the information, it shouldn't be a big deal.\n\n:::note\nIf the information you want to display has a higher importance or priority,\nand you need to make sure that the user takes an action to dismiss it,\nconsider using the [Banner](/#/component/limel-banner/) component instead.\nFor more complex interactions and for delivering more detailed information,\n[Dialog](/#/component/limel-dialog/) is a better choice.\n:::","Basic example\n\nSnackbars should not necessarily require a deliberate action from the user to dismiss them.\nThis is why the component has a default `timeout` and will disappear even if the user\ndoes not interact with it.\n\nAs you see in this example, there is no `timeout` specified.\nTherefore the snackbar will automatically disappear after a few seconds.\n\n:::important\nMake sure to set a proper timeout, based on the length of the text.\nAn average user must be able to read the full message within the given\ntime!\n:::","With actions\nYou can include a single action button inside the snackbar.\n\n:::important\nKeep in mind that pressing the action button will close\nthe snackbar immediately. The user must be informed that their\nrequested action actually took place. If there is no instant\nvisual feedback (for sighted users) in the user interface that\ninforms the user about the updated state, displaying another\nsnackbar could be a good idea.\n:::","With changing messages","Dismissible\nBy default, snackbars display a dismiss button.\nThis allows users to close them at any time, before they time out.\n\nThe reason for this default behavior is that snackbars could be\ncovering other important content on the screen,\nor simply have a timeout longer than the time it takes\nfor the user to read the message.\n\nHowever, you can override this default interaction design by setting the\n`dismissible` property to `false`, which removes the close button.","Persistent\nDismissive Snackbars appear temporarily, and disappear automatically\nwithout requiring users to manually dismiss them.\nHowever, sometimes you may need to display a Snackbar\nwhich keeps being displayed persistently until the user deliberately takes\nan action or clicks the dismiss button. This could be to ensure that\n\n- the user actually reads message that is being displayed.\n- has time to take an informed decision to press the action button.\n\nTo make a Snackbar persistent, set the `timeout` property to `-1`.","Persistent and non-dismissible\nIn some scenarios, a Snackbar that is persistent\ncan simultaneously be non-dismissible.\n\nThis is good for handling cases in which the system tries to\ncommunicate an ongoing background process or a status that the user\ncannot take an action on, but should be kept informed about.\n\nIn such cases, you should programmatically close the Snackbar\nwhen the process is completed or the status changes!"],"props":[{"name":"actionText","tags":[],"text":"The text to display for the action button.","type":"string"},{"name":"dismissible","tags":[],"text":"When `true` displays a dismiss button on the snackbar,\nallowing users to close it.","type":"boolean"},{"name":"language","tags":[],"text":"Defines the language for translations.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"message","tags":[],"text":"The text message to display.","type":"string"},{"name":"multiline","tags":["deprecated Setting this property no longer has any effect. The property will be removed in a future major version."],"text":"Whether to show the snackbar with space for multiple lines of text","type":"boolean"},{"name":"open","tags":[],"text":"`true` if the snackbar is open, `false` otherwise.","type":"boolean"},{"name":"timeout","tags":[],"text":"The amount of time in milliseconds to show the snackbar.\nIf set to `-1`, the snackbar will be persistent.\nThis means:\n- either the end user will need to close it manually,\nwhich requires the `dismissible` property to be set to `true`.\n- or the snackbar needs to be closed programmatically.","type":"number"}],"events":[{"name":"action","tags":[],"text":"Emitted when the action button is pressed","type":"void"},{"name":"hide","tags":[],"text":"Emitted when the snackbar hides itself","type":"void"}],"tags":["exampleComponent limel-example-snackbar","exampleComponent limel-example-snackbar-with-action","exampleComponent limel-example-snackbar-with-changing-messages","exampleComponent limel-example-snackbar-dismissible","exampleComponent limel-example-snackbar-persistent","exampleComponent limel-example-snackbar-persistent-non-dismissible"]},{"path":"/component/limel-spinner/","title":"Spinner","text":["","With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default, the spinner is rendered as a circle.\nHowever, it is possible to set `limeBranded={true}`,\nwhich renders the spinner's shape as Lime Technologies' logo.","With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","Spinner sizes"],"props":[{"name":"limeBranded","tags":[],"text":"Gives the spinner the shape of Lime Technologies' logo","type":"boolean"},{"name":"size","tags":[],"text":"Determines the size of the spinner.","type":"\"large\" | \"medium\" | \"mini\" | \"small\" | \"x-small\""}],"events":[],"tags":["exampleComponent limel-example-spinner","exampleComponent limel-example-spinner-color","exampleComponent limel-example-spinner-size"]},{"path":"/component/limel-split-button/","title":"Split button","text":["A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","Split button with loading","Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::"],"props":[{"name":"disabled","tags":[],"text":"Set to `true` to disable the button.","type":"boolean"},{"name":"icon","tags":[],"text":"Set icon for the button","type":"string"},{"name":"items","tags":[],"text":"A list of items and separators to show in the menu.","type":"(ListSeparator | MenuItem<any>)[]"},{"name":"label","tags":[],"text":"The text to show on the default action part of the button.","type":"string"},{"name":"loading","tags":[],"text":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","type":"boolean"},{"name":"loadingFailed","tags":[],"text":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","type":"boolean"},{"name":"primary","tags":[],"text":"Set to `true` to make the button primary.","type":"boolean"}],"events":[{"name":"select","tags":[],"text":"Is emitted when a menu item is selected.","type":"MenuItem<any>"}],"tags":["exampleComponent limel-example-split-button-basic","exampleComponent limel-example-split-button-loading","exampleComponent limel-example-split-button-repeat-default-command"]},{"path":"/component/limel-switch/","title":"Switch","text":["The Switch component is a fundamental element in UI design that serves as a toggle switch\nto control the state of a specific setting or option in an application or website.\nThe two distinct positions of the Switch are visually indicative of the two states:\nON and OFF; making it easy for users to understand the current state of the controlled feature.\n\nThe Switch component is widely used in user interfaces to enable users to\nquickly and intuitively change binary settings.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","","With `helperText`\n\nSwitch can have a helper text, which is useful when providing additional information and\ncan clarify functionality of the switch for the user.\n\nThe helper text is displayed when the user puts focus on the switch, and works with keyboard\nnavigation as well. However, on touchscreen devices, the helper text is always displayed.","Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors."],"props":[{"name":"disabled","tags":[],"text":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the switch","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value is invalid.","type":"boolean"},{"name":"label","tags":[],"text":"Label to display next to the switch","type":"string"},{"name":"readonly","tags":[],"text":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","type":"boolean"},{"name":"readonlyLabels","tags":["beta "],"text":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","type":"Label<boolean>[]"},{"name":"value","tags":[],"text":"The value of the switch","type":"boolean"}],"events":[{"name":"change","tags":[],"text":"Emitted when the value has changed","type":"boolean"}],"tags":["exampleComponent limel-example-switch","exampleComponent limel-example-switch-helper-text","exampleComponent limel-example-switch-readonly"]},{"path":"/component/limel-tab-bar/","title":"Tab bar","text":["Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","","Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar."],"props":[{"name":"tabs","tags":[],"text":"List of tabs to display","type":"Tab[]"}],"events":[{"name":"changeTab","tags":[],"text":"Emitted when a tab has been changed","type":"Tab"}],"tags":["exampleComponent limel-example-tab-bar","exampleComponent limel-example-tab-bar-with-dynamic-tab-width","exampleComponent limel-example-tab-bar-with-equal-tab-width"]},{"path":"/component/limel-tab-panel/","title":"Tab panel","text":["The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab."],"props":[{"name":"tabs","tags":[],"text":"The tabs to display in the panel","type":"Tab[]"}],"events":[{"name":"changeTab","tags":[],"text":"Emitted when a tab has been changed","type":"Tab"}],"tags":["slot - Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to.","exampleComponent limel-example-tab-panel"]},{"path":"/component/limel-table/","title":"Table","text":["","","Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","Movable columns","Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","Local sorting and pagination","Remote sorting and pagination","Activate a row","Selectable rows with updating aggregates","Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n```tsx\nlayout=\"default\"\n```\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","stretchLastColumn\n\n```tsx\nlayout=\"stretchLastColumn\"\n```\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","stretchColumns\n\n```tsx\nlayout=\"stretchColumns\"\n```\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","lowDensity\n\n```tsx\nlayout=\"lowDensity\"\n```\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::"],"props":[{"name":"activeRow","tags":[],"text":"Active row in the table","type":"{ id?: string | number; }"},{"name":"aggregates","tags":[],"text":"Column aggregates to be displayed in the table","type":"ColumnAggregate[]"},{"name":"columns","tags":[],"text":"Columns used to display the data","type":"Column<any>[]"},{"name":"data","tags":[],"text":"Data to be displayed in the table","type":"object[]"},{"name":"emptyMessage","tags":[],"text":"A message to display when the table has no data","type":"string"},{"name":"layout","tags":[],"text":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","type":"\"default\" | \"lowDensity\" | \"stretchColumns\" | \"stretchLastColumn\""},{"name":"loading","tags":[],"text":"Set to `true` to trigger loading animation","type":"boolean"},{"name":"mode","tags":[],"text":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","type":"\"local\" | \"remote\""},{"name":"movableColumns","tags":[],"text":"Set to `true` to enable reordering of the columns by dragging them","type":"boolean"},{"name":"page","tags":[],"text":"The page to show","type":"number"},{"name":"pageSize","tags":[],"text":"Number of rows per page","type":"number"},{"name":"selectable","tags":[],"text":"Enables row selection","type":"boolean"},{"name":"selection","tags":[],"text":"Selected data. Requires `selectable` to be true.","type":"object[]"},{"name":"sorting","tags":[],"text":"The initial sorted columns","type":"ColumnSorter[]"},{"name":"totalRows","tags":[],"text":"The number of total rows available for the data","type":"number"}],"events":[{"name":"activate","tags":[],"text":"Emitted when a row is activated","type":"object"},{"name":"changeColumns","tags":[],"text":"Emitted when the columns have been changed","type":"Column<any>[]"},{"name":"changePage","tags":[],"text":"Emitted when a new page has been set","type":"number"},{"name":"load","tags":[],"text":"Emitted when `mode` is `remote` and the table is loading new data. The\nconsumer is responsible for giving the table new data","type":"TableParams"},{"name":"select","tags":[],"text":"Emitted when the row selection has been changed","type":"object[]"},{"name":"selectAll","tags":[],"text":"Emitted when the select all rows state is toggled","type":"boolean"},{"name":"sort","tags":[],"text":"Emitted when `mode` is `local` the data is sorted","type":"ColumnSorter[]"}],"tags":["exampleComponent limel-example-table","exampleComponent limel-example-table-custom-components","exampleComponent limel-example-table-header-menu","exampleComponent limel-example-table-movable-columns","exampleComponent limel-example-table-sorting-disabled","exampleComponent limel-example-table-local","exampleComponent limel-example-table-remote","exampleComponent limel-example-table-activate-row","exampleComponent limel-example-table-selectable-rows","exampleComponent limel-example-table-default-sorted","exampleComponent limel-example-table-layout-default","exampleComponent limel-example-table-layout-stretch-last-column","exampleComponent limel-example-table-layout-stretch-columns","exampleComponent limel-example-table-layout-low-density","exampleComponent limel-example-table-interactive-rows"]},{"path":"/component/limel-text-editor/","title":"Text editor","text":["A rich text editor that offers a rich text editing experience with markdown support,\nin the sense that you can easily type markdown syntax and see the rendered\nresult as rich text in real-time. For instance, you can type `# Hello, world!`\nand see it directly turning to a heading 1 (an `<h1>` HTML element).\n\nNaturally, you can use standard keyboard hotkeys such as <kbd>Ctrl</kbd> + <kbd>B</kbd>\nto toggle bold text, <kbd>Ctrl</kbd> + <kbd>I</kbd> to toggle italic text, and so on.","Basic example","Using the text editor as a form component\n\nHere we have a simple form that uses the `limel-text-editor` component,\ninstead of a regular text input field.\n\n:::note\nThis allows the user to write rich text, with markdown support, in the form.\nBut keep in mind that the value will be saved as a markdown string,\nand can also contain HTML tags, depending on what the users input\nin the filed.\n:::","Text editor in markdown mode.\n\nWhen using the text editor in markdown mode the `value` property is expected to contain\na markdown formatted string and the output will likewise be markdown. This is the default\nif no value for `contentType` is provided.","Text editor in HTML mode.\n\nWhen using the text editor in HTML mode the `value` property is expected to contain\nan html formatted string and the output will likewise be html.","Text editor with tables (HTML mode only).\n\nBasic table support is available when using the text editor in `HTML` mode.\nThis allows you to paste and display tables in the text editor.\nComplex operations are not supported, adding and removing columns are not supported.\n\nTables will only appear as expected in text-editor fields that are in `HTML` mode.","Handling inline images (with external file storage)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can upload the image to an external\nfile storage and insert the src url of the uploaded image using the\n`insertImage` method.\n\nIf the image upload fails, you can insert a failed thumbnail using the\n`insertFailedThumbnail` method.\n\n:::note\nIn this example, because we don't actually upload the image you paste\nanywhere, once the \"upload\" is done, we will replace the image you\npasted with a url to an image of the Lime CRM logo.\n\nIn reality, you would of course insert the url to the newly uploaded\nimage instead.","Handling inline images (with base64 encoded data)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can immediately insert the image\nas base64 encoded data using the `insertImage` method.\n\n:::note\nThis example demonstrates the simplest approach using base64 encoding.\nHowever, for production use, it is recommended to upload images to\nexternal file storage and insert the src URL of the uploaded image\ninstead, as shown in the file-storage example.","Allow resize\nThe text editor automatically adjusts its own height to fit the content inside.\nSo as the user types, the editor will grow taller, potentially resizing its own\ncontainer element.\n\nBy default, the user can also manually change the height of the text editor\nby dragging its bottom right corner.\n\nAs soon as the user has changed the height, this will override the automatic\nresizing, and the editor will no longer adjust its height to fit the content inside.\n\nBy setting `allowResize` to `false`, you can disable the end user\nto resize the text editor vertically.\n\n:::tip\n1. The text editor makes sure that it never becomes taller than the viewport's height.\nThis way, its toolbar and resize control will remain reasonably visible, when\nthe component is auto resizing itself based on the content it holds.\nThis behavior is controlled by the `--text-editor-max-height` CSS variable,\nwhich defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`,\ntaking also into account the safe zones which are defined by the environment variables.\n\n1. Using `max-height` and `min-height` CSS properties on the component itself,\n(or using `--text-editor-max-height`), you can limit the resizing to a specific range.\n:::","Resize with container\nSometimes, you may want to make the text editor to follow the size of its container,\nboth in width and height; for instance, when the container is resizable by the user.\n\nIn such cases, make sure to set `allowResize={false}` on the component.\n\nHowever, you can still constrain the text editor to never grow beyond a certain height,\nby either\n- setting a fixed `height` or `max-height` the component itself, or using\n`--text-editor-max-height` CSS variable;\n- or alternatively by setting a fixed `height` or `max-height` on the container\nelement of the component.\n\nIn this example, the maximum height is set to `15rem`, which means that:\n1. the editor will adjust itself to the content inside,\npushing out its container and making it taller, until it reaches `15rem` in height.\n1. and also when you manually resize the container,\nthe editor will try to fill the available surface area, until its height reaches `15rem`.","UI\nBy configuring the `ui` prop, you can define how the editor should be\nrendered for the end users. The following options are available:\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.\n\n:::important\nIt's very important to add a `placeholder` or `label` when using\nthe `minimal` or `no-toolbar` UI. The reason is that without a placeholder or a label,\nthere is no visual clue for the user to realize that the grey box is\nactually an input field that they can type in,\nsince the toolbar would not be shown unless the input filed is focused.\n:::","A custom element can be configured\n\nThe default behavior of the text editor is to only allow standard HTML element\nlike `em` and `h`. To add your own custom elements one can add custom elements\npassing them to the `plugins` property.\n\nIn this example we pass `limel-chip` as a custom element along with the allowed\nattributes `text` and `icon`.","Custom triggers\n\nA trigger is a character or sequence of characters that if typed in the text editor\nwill initiate a trigger session. The session is initialized with a `triggerStart`\nevent. Subsequent characters written after the trigger sequence will be sent in a\n`triggerChange` event. When the focus is removed from the trigger a `triggerStop`\nevent will be sent.\n\nThe `triggerStart` event contains a `TextEditorInserter` object containing functions\nto manipulate the state of the text editor around the trigger. Using any of the\nsupplied methods will effectivly replace the trigger content in the text editor with\nthe content of choice.\n\nIn this example we pass either plain text, HTML string, or a `limel-chip`\nrepresenting some chosen user in a mention like situation.\n\n:::note\nChanging the contentType resets the text editor with an empty value.","Composite example"],"props":[{"name":"allowResize","tags":[],"text":"Set to `true` to allow the user to vertically resize the editor.\nSet to `false` to disable the resize functionality.","type":"boolean"},{"name":"contentType","tags":[],"text":"The type of content that the editor should handle and emit, defaults to `markdown`\n\nAssumed to be set only once, so not reactive to changes","type":"\"html\" | \"markdown\""},{"name":"customElements","tags":["private ","alpha "],"text":"A list of custom elements\n\nAny `CustomElement` that should be used inside the text editor needs\nto be defined here.","type":"CustomElementDefinition[]"},{"name":"disabled","tags":[],"text":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","type":"boolean"},{"name":"helperText","tags":[],"text":"Optional helper text to display below the input field when it has focus","type":"string"},{"name":"invalid","tags":[],"text":"Set to `true` to indicate that the current value of the editor is\ninvalid.","type":"boolean"},{"name":"label","tags":[],"text":"The label of the editor","type":"string"},{"name":"language","tags":[],"text":"Defines the language for translations.","type":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\""},{"name":"placeholder","tags":[],"text":"The placeholder text shown inside the input field,\nwhen the field is empty.","type":"string"},{"name":"readonly","tags":[],"text":"Set to `true` to make the component read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.\n:::note\nConsider that it might be better to use `limel-markdown`\ninstead of `limel-text-editor` when the goal is visualizing data.\n:::","type":"boolean"},{"name":"required","tags":[],"text":"Set to `true` to indicate that the field is required.\n\n:::important\nAn empty but required field is not automatically considered invalid.\nYou must make sure to check the validity of the field on your own,\nand properly handle the `invalid` state.\n:::","type":"boolean"},{"name":"triggers","tags":["private ","alpha "],"text":"A set of trigger characters\n\nDefining a character here will enable trigger events to be sent if the\ncharacter is detected in the editor.","type":"TriggerCharacter[]"},{"name":"ui","tags":[],"text":"Specifies the visual appearance of the editor.\n\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.","type":"\"minimal\" | \"no-toolbar\" | \"standard\""},{"name":"value","tags":[],"text":"Description of the text inside the editor as markdown","type":"string"}],"events":[{"name":"change","tags":[],"text":"Dispatched when a change is made to the editor","type":"string"},{"name":"imagePasted","tags":["private ","alpha "],"text":"Dispatched when a image is pasted into the editor","type":"ImageInserter"},{"name":"imageRemoved","tags":["private ","alpha ","deprecated - This event is deprecated and will be removed in a future version.\nUse the `metadataChange` event instead to track image removals."],"text":"Dispatched when a image is removed from the editor","type":"EditorImage"},{"name":"metadataChange","tags":["private ","alpha "],"text":"Dispatched when the metadata of the editor changes","type":"EditorMetadata"},{"name":"triggerChange","tags":["private ","alpha "],"text":"Dispatched if a input is changed during an active trigger.","type":"TriggerEventDetail"},{"name":"triggerStart","tags":["private ","alpha "],"text":"Dispatched if a trigger character is detected.","type":"TriggerEventDetail"},{"name":"triggerStop","tags":["private ","alpha "],"text":"Dispatched if a trigger session is ended. That is if the selection\ngoes outside the trigger input or if something is inserted using the\nsupplied `TextEditor` insert function.","type":"TriggerEventDetail"}],"tags":["exampleComponent limel-example-text-editor-basic","exampleComponent limel-example-text-editor-as-form-component","exampleComponent limel-example-text-editor-with-markdown","exampleComponent limel-example-text-editor-with-html","exampleComponent limel-example-text-editor-with-tables","exampleComponent limel-example-text-editor-with-inline-images-file-storage","exampleComponent limel-example-text-editor-with-inline-images-base64","exampleComponent limel-example-text-editor-allow-resize","exampleComponent limel-example-text-editor-size","exampleComponent limel-example-text-editor-ui","exampleComponent limel-example-text-editor-custom-element","exampleComponent limel-example-text-editor-triggers","exampleComponent limel-example-text-editor-composite","beta "]},{"path":"/component/limel-tooltip/","title":"Tooltip","text":["A tooltip can be used to display a descriptive text for any element.\nThe displayed content must be a brief and supplemental string of text,\nidentifying the element or describing its function for the user,\nhelping them better understand unfamiliar objects that aren't described\ndirectly in the UI.\n\n## Interaction\nThe tooltip appears after a slight delay, when the element is hovered;\nand disappears as soon as the cursor leaves the element.\nTherefore, users cannot interact with the tip, but if the trigger element\nitself is interactive, it will remain interactible even with a tooltip bound\nto it.\n\n:::note\nIn order to display the tooltip, the tooltip element and its trigger element\nmust be within the same document or document fragment (the same shadowRoot).\nOften, it's easiest to just place them next to each other like in the example\nbelow, but if you need to, you can place them differently.\n\n```html\n<limel-button icon=\"search\" id=\"tooltip-example\" />\n<limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n```\n:::\n\n## Usage\n- Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\nUse them only when they add significant value.\n- A good tip is concise, helpful, and informative.\nDon't explain the obvious or simply repeat what is already on the screen.\nWhen used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n- If the tip is essential to the primary tasks that the user is performing,\nsuch as warnings or important notes, include the information directly in the\ninterface instead.\n- When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\nuse that, not a tooltip.\n- Make sure to use the tooltip on an element that users naturally and\neffortlessly recognize can be hovered.","Basic example","Using `maxlength` property\nTo present an easy to read content, the tooltip's maximum text\nlength is set to 50 characters, including spaces.\nWhen this threshold is reached, content will be rendered with line breaks.\nHowever, it is possible to override this value by specifying `maxlength`.\n\n:::note\nTooltips are intended to display very brief information.\nTry not to place large amount of text in them.\n:::","Composite\n\nA place to try different combinations of states."],"props":[{"name":"elementId","tags":[],"text":"ID of the owner element that the tooltip should describe.\nMust be a child within the same document fragment as the tooltip element\nitself.","type":"string"},{"name":"helperLabel","tags":[],"text":"Additional helper text for the element.\nExample usage can be a keyboard shortcut to activate the function of the\nowner element.","type":"string"},{"name":"label","tags":[],"text":"Short descriptive text of the owner element.","type":"string"},{"name":"maxlength","tags":[],"text":"The maximum amount of characters before rendering 'label' and\n'helperLabel' in two rows.","type":"number"},{"name":"openDirection","tags":[],"text":"Decides the tooltip's location in relation to its trigger.","type":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\""}],"events":[],"tags":["exampleComponent limel-example-tooltip-basic","exampleComponent limel-example-tooltip-max-character","exampleComponent limel-example-tooltip-composite"]}],"data":{"keys":[{"path":["tags"],"id":"tags","weight":1,"src":"tags"},{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["path"],"id":"path","weight":1,"src":"path"},{"path":["text"],"id":"text","weight":1,"src":"text"},{"path":["props","name"],"id":"props.name","weight":1,"src":"props.name"},{"path":["props","text"],"id":"props.text","weight":1,"src":"props.text"},{"path":["props","tags"],"id":"props.tags","weight":1,"src":"props.tags"},{"path":["props","type"],"id":"props.type","weight":1,"src":"props.type"},{"path":["events","name"],"id":"events.name","weight":1,"src":"events.name"},{"path":["events","text"],"id":"events.text","weight":1,"src":"events.text"},{"path":["events","tags"],"id":"events.tags","weight":1,"src":"events.tags"},{"path":["events","type"],"id":"events.type","weight":1,"src":"events.type"}],"records":[{"i":0,"$":{"1":{"v":"Home","n":1},"2":{"v":"/Home/","n":1}}},{"i":1,"$":{"1":{"v":"Design Guidelines","n":0.707},"2":{"v":"/DesignGuidelines/","n":1}}},{"i":2,"$":{"0":[{"v":"exampleComponent limel-example-action-bar-icon-title","i":8,"n":0.707},{"v":"exampleComponent limel-example-action-bar-as-primary-component","i":7,"n":0.707},{"v":"exampleComponent limel-example-action-bar-styling","i":6,"n":0.707},{"v":"exampleComponent limel-example-action-bar-floating-expand","i":5,"n":0.707},{"v":"exampleComponent limel-example-action-bar-floating","i":4,"n":0.707},{"v":"exampleComponent limel-example-action-bar-colors","i":3,"n":0.707},{"v":"exampleComponent limel-example-action-bar-selected-item","i":2,"n":0.707},{"v":"exampleComponent limel-example-action-bar-overflow-menu","i":1,"n":0.707},{"v":"exampleComponent limel-example-action-bar-basic","i":0,"n":0.707}],"1":{"v":"Action bar","n":0.707},"2":{"v":"/component/limel-action-bar/","n":1},"3":[{"v":"Proper usage of the `title` property in the `Icon` interface\n\nIn some scenarios, the `title` property of the item's icon must be used to\nimprove accessibility for unsighted users.\n\nIn most cases, the item's `text` is descriptive enough for the users to understand\nthe meaning of the action. In such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`.","i":9,"n":0.065},{"v":"Creative usage\nSince the action bar can automatically overflow actions which do not\nfit into the available width, it makes the component a good candidate\nfor providing contextual actions within small sections of a user interface.\n\n:::important\nFor this specific usage (`limel-action-bar` as a primary component in `limel-list`)\nthe certain styles are required for the overflow menu to properly work.\nSee the linked CSS file!\n\nThere should be a `min-width` and `max-width` on the component in order to prevent\nthe overflow menu to cause infinite rendering loops.\n:::","i":8,"n":0.113},{"v":"Styling\n\nUsing provided custom CSS properties,\nit is possible to style the action bar.\n\n:::note\nThe `--action-bar-item-icon-color` affects all icons.\nHowever, the `color` specified for `icon` for individual items\nwill override that.\n:::","i":7,"n":0.196},{"v":"Floating action bar with expand button\n\nSome designs may require a floating action bar with an expand button.\nIt can be useful if action bar is covering important content.\nTo make the action bar expandable, set the `collapsible` prop to `true`.","i":6,"n":0.162},{"v":"Floating Example\n\nFor some designs, it may make sense to display the action bar as\na floating element on top of the page's content.\nSet the `layout` prop to `floating` to get the basics styles of\na floating bar.\n\n:::note\n1. In this case, the action bar gets some elevation effect\nusing a `box-shadow`. This is to properly separate the action bar\nform its surrounding context. You can override this by setting another\n`box-shadow`.\n2. Make sure to use a proper `openDirection` for the\noverflow menu.\n3. Make sure there is space on the sides of the action bar,\nso that it doesn't stretch out completely from left edge to the right\nedge. The component is already doing so using a `max-width`,\nbut you can override it by providing another `max-width`.\n:::","i":5,"n":0.093},{"v":"Using colors\n\nYou can specify colors for single actions, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that most of the actions in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n:::","i":4,"n":0.146},{"v":"Selected item\nFor some use cases, one or more items in the action bar could\nget a `selected` state. This is useful for example when you want to\nhighlight a currently active item in a list of items.","i":3,"n":0.169},{"v":"Overflow menu\nWhen the action bar items don't fit in the available space,\nan overflow button is automatically added as the last item on the action bar.\n\nThe menu indicates the quantity of the actions which are currently invisible for the users.\nClicking on the overflow button opens a menu with the remaining actions that didn't fit\nin the available space.","i":2,"n":0.134},{"v":"Basic Example\n\nAn action bar is typically placed on top of a page or section,\ndisplaying multiple buttons in a row.\nSeparators can be added to visually group related actions.\n\n:::tip\nBy default, when `layout=\"fullWidth\"`, all actions will be placed on\nthe left side of the action bar,\nbut you can override this default behavior by\nadding `justify-content: flex-end;`.\n:::","i":1,"n":0.14},{"v":"An action bar is a user interface element commonly found in software applications and websites.\nIt typically appears at the top of the screen or within a specific section\nand serves as a centralized hub for accessing various actions and commands\nrelevant to the current context or page.\n\nThe action bar often contains a set of clickable icons or buttons (icons + labels)\nthat represent specific actions, such as saving, deleting, editing, sharing,\nor bulk operations for selected items.\n\nThe purpose of an action bar is to provide quick and convenient access to\nfrequently used functionalities, enabling users to perform common tasks efficiently.\nIt enhances usability by organizing important actions in a visually prominent and easily accessible location.\n\nThe action bar's design and layout can vary based on the platform or application,\nbut its primary goal remains consistent—to\nempower users to interact with the software and perform desired actions effortlessly.","i":0,"n":0.085}],"4":[{"v":"openDirection","i":5,"n":1},{"v":"layout","i":4,"n":1},{"v":"language","i":3,"n":1},{"v":"collapsible","i":2,"n":1},{"v":"actions","i":1,"n":1},{"v":"accessibleLabel","i":0,"n":1}],"5":[{"v":"Defines the location that the content of the overflow menu\nappears, in relation to its trigger.","i":5,"n":0.258},{"v":"- When set to `fullWidth`, the component will take the\nentire width of its container.\n- When set to `floating`, the component will get basic stylings\nto visualize the floating state.\n:::note\nYou should still properly position the component\naccording to the structure of your user interface.\nFor example, use an `absolute` or `fixed` position.\n:::","i":4,"n":0.144},{"v":"Defines the language for translations.","i":3,"n":0.447},{"v":"When set to `true`, the action bar will be collapsible.","i":2,"n":0.316},{"v":"Items that are placed in the action bar.\nThese represent primary actions.","i":1,"n":0.302},{"v":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nExample value: \"toolbar\"","i":0,"n":0.229}],"6":[],"7":[{"v":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","i":5,"n":0.209},{"v":"\"floating\" | \"fullWidth\"","i":4,"n":0.577},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":3,"n":0.243},{"v":"boolean","i":2,"n":1},{"v":"(ListSeparator | ActionBarItem)[]","i":1,"n":0.577},{"v":"string","i":0,"n":1}],"8":[{"v":"itemSelected","i":0,"n":1}],"9":[{"v":"Fired when a action bar item has been clicked.","i":0,"n":0.333}],"10":[{"v":"public ","i":0,"n":1}],"11":[{"v":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any>","i":0,"n":0.577}]}},{"i":3,"$":{"0":[{"v":"exampleComponent limel-example-badge-string","i":2,"n":0.707},{"v":"exampleComponent limel-example-badge-number","i":1,"n":0.707},{"v":"exampleComponent limel-example-badge","i":0,"n":0.707}],"1":{"v":"Badge","n":1},"2":{"v":"/component/limel-badge/","n":1},"3":[{"v":"String badges\n\nString labels get truncated if their visual length is longer than\nsix characters placed side by side (six `0`s to be exact).\n\nWhen users hover the truncated badge, the complete\n`label` will be displayed in a tooltip.","i":3,"n":0.169},{"v":"Number badges\n\nNumeric labels larger than 999 will get both rounded and abbreviated.\nFor example, if the label is `1090` the badge will display `1.1K`.\nAbbreviation units used are `k` (Kilo) that stands for Thousands,\n`M` for Millions, `B` for Billions, and `T` for Trillions.\n\nWhen users hover the abbreviated badge, the complete\n`label` will be displayed in a tooltip.","i":2,"n":0.136},{"v":"Badge without a `label`\nWhen no `label` is provided, the badge will only render as a circle.\nThis is a convention which is used in many applications to attract the\nuser's attention to a certain element on the user interface; typically to\nmenus or buttons that navigate the user to another pane or screen.\n\nIn such cases, the idea is to provide the users with a \"red thread\"\nand help them find something that requires their attention, but is located\non another place in the app, and not directly visible.\n\n:::tip\nMake sure that the dot is noticeable, by providing an\neye-catching background color, as shown in this example.\n:::","i":1,"n":0.101},{"v":"The Badge component can be used to display a notification badge,\noptionally with a number or a text label.","i":0,"n":0.236}],"4":[{"v":"label","i":0,"n":1}],"5":[{"v":"Label to display in the badge.\nNumeric labels larger than 999 will be rounded and abbreviated.\nString labels get truncated if their length is longer than\nsix characters.","i":0,"n":0.2}],"6":[],"7":[{"v":"number | string","i":0,"n":0.577}],"8":[],"9":[],"10":[],"11":[]}},{"i":4,"$":{"0":[{"v":"slot buttons - Buttons to show in the banner","i":1,"n":0.333},{"v":"exampleComponent limel-example-banner","i":0,"n":0.707}],"1":{"v":"Banner","n":1},"2":{"v":"/component/limel-banner/","n":1},"3":[],"4":[{"v":"message","i":1,"n":1},{"v":"icon","i":0,"n":1}],"5":[{"v":"The text to show on the banner.","i":1,"n":0.378},{"v":"Set icon for the banner","i":0,"n":0.447}],"6":[],"7":[{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":5,"$":{"0":[{"v":"exampleComponent limel-example-breadcrumbs-styling","i":5,"n":0.707},{"v":"exampleComponent limel-example-breadcrumbs-icon-color","i":4,"n":0.707},{"v":"exampleComponent limel-example-breadcrumbs-divider","i":3,"n":0.707},{"v":"exampleComponent limel-example-breadcrumbs-icons","i":2,"n":0.707},{"v":"exampleComponent limel-example-breadcrumbs-buttons","i":1,"n":0.707},{"v":"exampleComponent limel-example-breadcrumbs-links","i":0,"n":0.707}],"1":{"v":"Breadcrumbs","n":1},"2":{"v":"/component/limel-breadcrumbs/","n":1},"3":[{"v":"Styling\n\nUsing provided custom CSS properties,\nit is possible to style the breadcrumbs.","i":6,"n":0.302},{"v":"Using colors\n\nYou can specify colors for single item, by setting `color` on the `icon`.\n\n:::note\nMake sure not to overuse colors!\nIt is perfectly fine that items in the bar use the default color.\nColors should be used to add an extra layer of meaning for the actions.\n\nAn icon can either adopt the color of the default text or receive a color\nif the `--breadcrumbs-item-text-color` has been set.\n\nNevertheless, if the `color` is explicitly defined,\nit will take precedence over the default icon's color.\n:::","i":5,"n":0.114},{"v":"Changing the divider\nBy default a **›** character is used to visually divide the\nitems from each other. This visual divider indicates the\norder and depths of steps which are taken to reach the current\nstep.\n\nHowever, in certain contexts, other characters could be\nmore suitable to visualize this hierarchy,\nsuch as a **·**, **-** or similar.\n\n:::warning\nAvoid using ellipsis motifs like **···**, **…** or **⋮**,\nsince they look like universally prevalent icons which\ncommunicate other meanings.","i":4,"n":0.122},{"v":"Using icons\nFor an improved accessibility, you are required to\nprovide a `text` for each item in the breadcrumbs.\nBut each item can have an optional icon too.\n\nHowever, in some UIs, the design might require\nhiding the text and relying on an icon to visualize\nan item in the path.\n\nIn this case you can set the `type` to\n`icon-only` on the desired items.\n\n:::note\nThe last item (current step) will always\ndisplay both an icon and the text, even if you\nset the `type` to `icon-only`\n:::","i":3,"n":0.115},{"v":"Items as buttons\nThe Breadcrumbs can also be used to navigate between different\nsteps of a process, such as steps of a form or survey, or\nmoving through steps of a wizard.\n\nIn this case, you will not provide any `link`s and instead will\nhandle the clicks. When no links are provided, the component\nwill automatically generate a list of `button`s.\n\nKeep in mind that the last item will not be rendered as an\nHTML button and and therefore won't be clickable.","i":2,"n":0.116},{"v":"Items as hyperlinks\nWhen the Breadcrumbs are used to navigate between different webpages,\nfor example navigating a website, you will need to provide a `link`\nfor each webpage.\n\nThis way, the component will automatically generate a list of\nhyperlinks. This gives the users the possibility of interacting with links\nin a natural way, for instance they can open any of the previous\npages in a new browser tab. This also has other accessibility benefits.\n\n:::note\nClicking links will open in current window by default,\nand this reloads the entire webpage.\nTo avoid reloading the whole application (in the context of a single-page apps),\nyou might want to handle the navigation with your application's router,\n:::\n\nKeep in mind that the last item will not be rendered as an HTML link and\nis not clickable.","i":1,"n":0.092},{"v":"A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\nbefore ending up where they are right now, in a website or an application.\n\nThese \"places\" can be for example _pages_ of a website, which are hierarchically\nlaid out before the current page that the user is looking at.\nThey could also be _steps_ which the user has gone through, which perhaps have no\nhierarchical relation with each other, but has eventually led the user \"here\".\n\n:::note\n- Where the user currently is, is always the last step of the breadcrumb.\n- A breadcrumbs never shows where users can go after this place.\nIt only illustrates where user has been before ending up here.\nIf the path that a user can take is not changing and if next steps are clear,\nyou can use the [Progress flow component](#/component/limel-progress-flow) instead.\n:::\n\nBreadcrumbs are often placed horizontally before the main content of the current screen.","i":0,"n":0.083}],"4":[{"v":"items","i":1,"n":1},{"v":"divider","i":0,"n":1}],"5":[{"v":"List of items in the breadcrumbs,\neach representing a step or a page.","i":1,"n":0.289},{"v":"The visual divider that separates items.\nIt must be a single character such as `-` or `,`.","i":0,"n":0.25}],"6":[],"7":[{"v":"BreadcrumbsItem[]","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"select","i":0,"n":1}],"9":[{"v":"Fired when clicking on buttons (not links!)\ninside the breadcrumbs.","i":0,"n":0.333}],"10":[],"11":[{"v":"BreadcrumbsItem","i":0,"n":1}]}},{"i":6,"$":{"0":[{"v":"exampleComponent limel-example-button-composite","i":10,"n":0.707},{"v":"exampleComponent limel-example-button-colors","i":9,"n":0.707},{"v":"exampleComponent limel-example-button-reduce-presence","i":8,"n":0.707},{"v":"exampleComponent limel-example-button-click-fail","i":7,"n":0.707},{"v":"exampleComponent limel-example-button-click-success","i":6,"n":0.707},{"v":"exampleComponent limel-example-button-loading","i":5,"n":0.707},{"v":"exampleComponent limel-example-button-icon","i":4,"n":0.707},{"v":"exampleComponent limel-example-button-disabled","i":3,"n":0.707},{"v":"exampleComponent limel-example-button-outlined","i":2,"n":0.707},{"v":"exampleComponent limel-example-button-primary","i":1,"n":0.707},{"v":"exampleComponent limel-example-button-basic","i":0,"n":0.707}],"1":{"v":"Button","n":1},"2":{"v":"/component/limel-button/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":11,"n":0.354},{"v":"How to color button text and background\nWhen a button is a \"primary\" button (`primary={true}`), the color value you specify\nfor `--lime-primary-color` will apply to its background. By default, text color\nof primary buttons is white. To change their text color you must send a color\nvalue with the `--lime-on-primary-color` variable.\n\nWhen a button is not a \"primary\" button, the value of `--lime-primary-color`\nwill be applied to its text, and `--lime-on-primary-color` will have no effect.\n\nKeep in mind that `disabled` buttons don't care about your specified colors at all.","i":10,"n":0.11},{"v":"Reduce Presence\n\nThis example is identical to the \"With click handler\" example, except that\nhere, the `has-reduced-presence` class has been set to `true`. This will hide\nthe button when it is disabled. However, it will also make sure that the\nbutton remains visible while the loading animation is ongoing. When the\nanimation is done and the checkmark has been shown, the button will hide.\n\nRead more in the [Design Guidelines](#/DesignGuidelines/decluttering.md/)","i":9,"n":0.125},{"v":"With click handler, and failed feedback\n\nThis example works just like the \"With click handler\" example, except that,\nwhen the `loading` attribute changes from `true` to `false`, the button\nautomatically indicates that the previously ongoing process just failed.","i":8,"n":0.169},{"v":"With click handler\n\nThe click handler in this example simulates saving some changed values in a\nform. When the button is clicked, the `loading` attribute is set to `true`.\nAfter a short while, we pretend that the saving was successful, and set\n`loading` to `false`. We also set `disabled` to `true`, because we just\nsuccessfully saved, so until the user updates our imaginary form again, there\nis nothing to save.\n\nWhen the `loading` attribute changes from `true` to `false`, the button\nautomatically displays a checkmark icon for 2 seconds. Note that our click\nhandler isn't actually involved in this.\n\nA short while after the checkmark has disappeared, we enable the button\nagain. This is just so that you can try the functionality again. Normally,\nthe button would stay disabled until the user made some changes, so there's\nsomething new to save!","i":7,"n":0.088},{"v":"Loading\n\nNote that the example is also using `disabled`, because a button that is\nloading should normally also be disabled.","i":6,"n":0.236},{"v":"Proper usage of icons\n\nSometimes, your design requires displaying a single icon inside a button,\nwithout any visible label.\n\nIn such scenarios, the `title` property of the icon must be used to\nimprove accessibility for unsighted users.\n\nWhen a proper `label` is chosen for a button, it is descriptive enough for\nthe users to understand the meaning of the action.\nIn such cases, the icon is primarily used to improve\nthe visual appearance of the item, and make it more quickly and easily recognizable\nfor the users.\n\nHowever, some designs favor a cleaner and more minimal user interface,\nby removing unnecessary words, relying on an already present icon which\ncan be interpreted as a word by the user.\n\nHere you see examples of such icons followed by a short text:\n- **➕ icon followed by \"Todo\"**: For a sighted user,\nthis combination of icon and text would be interpreted as \"Add New Todo\"\n- **🔄 icon followed by \"List\"**: Would be visually read as \"Refresh List\"\n- **🗑️ icon followed by \"Selected\"**: Would be visually read as \"Delete Selected\"\n\nFor sighted users, the text is enough to understand the meaning of the action,\nbut a screen reader cannot interpret the icon as a word, unless you provide a\nproper `title` property for the icon. In fact, the icons that have no `title`\nare completely hidden from the screen readers.\n\nThis example showcases how user experience can be improved not only for both\nusers of assistive technologies, but also for those who see a descriptive tooltip,\nwhile hovering the action, which is constructed from the combination of\nthe `title` and `text`.","i":5,"n":0.064},{"v":"Disabled\n:::note\nDiscover when to utilize the disabled state and when it is preferable to hide a button by reading our guidelines [Disabled vs. Hidden](#/DesignGuidelines/disabled-hidden.md/).\n:::","i":4,"n":0.209},{"v":"Outlined\n\nBy setting `outlined={true}`, you can create a style\nof buttons which could be used to indicate an action\nwith medium emphasis.\n\n:::note\nThis style is useful to indicate the \"secondariness\" of an action.\nTherefore, only use this style, if there is another related\n`primary` button present on the same view or screen,\nalong with another normal button.\n\nAlso, give such a choice a second thought by reading\n[our guidelines for Split button](#/component/limel-split-button/).\n:::","i":3,"n":0.126},{"v":"Primary\n\nEach screen (modal, or section with action buttons)\nshould contain a single prominent button like this one,\nto emphasize the primary action.\n\n:::note\nThink twice before setting `primary={true}` on buttons.\nThe arrangement of buttons and their colors should clearly\ncommunicate their importance and primariness or secondariness.\n\nSee some examples at [our design guidelines for\nAction buttons](#/DesignGuidelines/action-buttons.md/).\n:::","i":2,"n":0.144},{"v":"Basic Example\n\nJust a label and a click-handler.\nOpen the dev-tools console to see logged clicks.","i":1,"n":0.267}],"4":[{"v":"primary","i":6,"n":1},{"v":"outlined","i":5,"n":1},{"v":"loadingFailed","i":4,"n":1},{"v":"loading","i":3,"n":1},{"v":"label","i":2,"n":1},{"v":"icon","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Set to `true` to make the button primary.","i":6,"n":0.354},{"v":"Set to `true` to make the button outlined.","i":5,"n":0.354},{"v":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","i":4,"n":0.236},{"v":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","i":3,"n":0.258},{"v":"The text to show on the button.","i":2,"n":0.378},{"v":"Set icon for the button","i":1,"n":0.447},{"v":"Set to `true` to disable the button.","i":0,"n":0.378}],"6":[],"7":[{"v":"boolean","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"Icon | string","i":1,"n":0.577},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":7,"$":{"0":[{"v":"exampleComponent limel-example-button-group-composite","i":4,"n":0.707},{"v":"exampleComponent limel-example-button-group-badges","i":3,"n":0.707},{"v":"exampleComponent limel-example-button-group-mix","i":2,"n":0.707},{"v":"exampleComponent limel-example-button-group","i":1,"n":0.707},{"v":"exampleComponent limel-example-button-group-icons","i":0,"n":0.707}],"1":{"v":"Button group","n":0.707},"2":{"v":"/component/limel-button-group/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":5,"n":0.354},{"v":"Button group with badges\n\nBadges can be used to add further contextual information.\nFor example, if the component is used to filter a set of data\nthe badges could visualize the number of entries\nfor each filter option.\n\nThe badge can either\nhave a `number` or `string` label.\nRead more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","i":4,"n":0.137},{"v":"Mixed text and icon within the same group\n\nGenerally, you should avoid mixing text and images in button group. Although\nindividual buttons can contain text or images, mixing the two in a single\ngroup can lead to an inconsistent and confusing interface.\n\nHowever, in some case your design may benefit from having only one button in\na different format.","i":3,"n":0.136},{"v":"Text only\n\nThis layout is good when you do not have access to icons which are\ndescriptive enough.","i":2,"n":0.25},{"v":"Icon only\n\nIf you pick well descriptive icons, this layout will usually suffice. When\nyou specify an `icon`, it will automatically be shown instead of the `title`.\n:::important\nAdding titles for buttons is compulsory. The reason is that when\nonly icons are shown, titles will appear as `aria-label` for screen readers,\nas well as `title` attribute when users hover and hold their cursors on the\nbuttons.\n:::\nThis makes it easier for them to know what the button actually does\nor what the icon tries to indicate.\n\nSo, make sure to label your icons properly and descriptively.","i":1,"n":0.108},{"v":"A button group control is a linear set of two or more buttons.\n\n## Usage\n\nButton groups are often used to display different views of the same thing. A\ncommon example of this component is when you switch between [ Map | Transit\n| Satellite ] views to look at an area on the map.\n\nIn some cases, button groups may serve as quick filters as well. For example\na list of contacts, in which the user can switch to [ All | Favorites\n| Frequently contacted ] can incorporate a button group to quickly filter out\nitems and display subsets of them.\n\n## Layout\n\nThe button groups are usually placed in top headers and action bars,\nsometimes with other elements. Since the group items will always be rendered\nin a row, you must make sure not to have too many buttons in the group.\nBecause if the container of your button group does not get enough space to\nfit in all its buttons, they will have to truncate their text and may appear\nvery cramped together. Always think about how your button group will appear\non a small screen such as phones.\n:::note\nButton can contain text or icons, but not both simultaneously!\n:::\n\nWithin the group, icon buttons will all have the same width, while each text button\ninherits its width from its content.","i":0,"n":0.07}],"4":[{"v":"value","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"List of buttons for the group","i":1,"n":0.408},{"v":"True if the button-group should be disabled","i":0,"n":0.378}],"6":[],"7":[{"v":"Button[]","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Dispatched when a button is selected/deselected","i":0,"n":0.408}],"10":[],"11":[{"v":"Button","i":0,"n":1}]}},{"i":8,"$":{"0":[{"v":"exampleComponent limel-example-callout-composite","i":10,"n":0.707},{"v":"exampleComponent limel-example-custom-type","i":9,"n":0.707},{"v":"exampleComponent limel-example-callout-styles","i":8,"n":0.707},{"v":"exampleComponent limel-example-callout-custom-icon","i":7,"n":0.707},{"v":"exampleComponent limel-example-callout-custom-heading","i":6,"n":0.707},{"v":"exampleComponent limel-example-callout-rich-content","i":5,"n":0.707},{"v":"exampleComponent limel-example-callout-warning","i":4,"n":0.707},{"v":"exampleComponent limel-example-callout-caution","i":3,"n":0.707},{"v":"exampleComponent limel-example-callout-tip","i":2,"n":0.707},{"v":"exampleComponent limel-example-callout-important","i":1,"n":0.707},{"v":"exampleComponent limel-example-callout-note","i":0,"n":0.707}],"1":{"v":"Callout","n":1},"2":{"v":"/component/limel-callout/","n":1},"3":[{"v":"Composite","i":11,"n":1},{"v":"Custom type\n\nIt is possible to send in a custom type,\nand provide it with custom, icon, heading and styles","i":10,"n":0.236},{"v":"Styling\n\nIt is possible to change the default colors using the provided CSS\nvariables. Just make sure to have good contrast between the text and\nbackground color, to provide good readability.","i":9,"n":0.189},{"v":"With custom `icon`\n\nBy default, the icon will be defined by the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(color and heading), but override the default icon, using the `icon` prop.","i":8,"n":0.164},{"v":"With custom `heading`\n\nBy default, the title will equal the `type` qualifier.\nHowever, it is possible to use a `type` just to get the desired visualisation\n(icon and color), but override the default heading, using the `heading` prop.","i":7,"n":0.169},{"v":"Adding rich content\n\nSometimes, you need to display more than just a string of text.\nYou may want to display richer content with pictures, links, or\nbullet point lists; or use a more advanced component inside\nthe callout.\n\nTo do so, simply wrap the content you want to display in this component.","i":6,"n":0.146},{"v":"Type: `warning`","i":5,"n":0.707},{"v":"Type: `caution`","i":4,"n":0.707},{"v":"Type: `tip`\n\nThis type is useful for displaying tips & tricks, and How-Tos.","i":3,"n":0.289},{"v":"Type: `important`","i":2,"n":0.707},{"v":"Type: `note`\n\nThis is the default type.","i":1,"n":0.408},{"v":"Callouts—also known as Admonitions—are useful for including supportive or\nspecial content within a large piece of text, or even inside a user\ninterface.\n\nWhen used in a document or text based user interface, the callout attracts\nthe reader's attention to a particular piece of information, without\nsignificantly interrupting their flow of reading the document.\n\nIn a user interface, a callout is more intrusive to the end-user. Still, it\ncould be a good choice when you intend to slightly disturb the user's\nattention, and challenge them to pay extra attention to the information\npresented. In such cases, a callout should not be used as a static and\nconstantly present element of the UI. Rather, it should be displayed when\nsomething unusual or remarkable demands the user's attention.","i":0,"n":0.093}],"4":[{"v":"type","i":3,"n":1},{"v":"language","i":2,"n":1},{"v":"icon","i":1,"n":1},{"v":"heading","i":0,"n":1}],"5":[{"v":"Defines how the component is visualized, for example\nwhich heading, color or icon is used in its user interface.","i":3,"n":0.236},{"v":"Defines the language for translations.\nWill translate the default headings for supported languages.","i":2,"n":0.289},{"v":"Icon of the callout, which can be used to override the\ndefault icon which is displayed based on the chosen `type`.","i":1,"n":0.224},{"v":"Heading of the callout, which can be used to override the\ndefault heading which is displayed based on the chosen `type`.","i":0,"n":0.224}],"6":[],"7":[{"v":"\"caution\" | \"important\" | \"note\" | \"tip\" | \"warning\"","i":3,"n":0.333},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":2,"n":0.243},{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":9,"$":{"0":[{"v":"beta ","i":7,"n":1},{"v":"exampleComponent limel-example-card-styling","i":6,"n":0.707},{"v":"exampleComponent limel-example-card-slot","i":5,"n":0.707},{"v":"exampleComponent limel-example-card-orientation","i":4,"n":0.707},{"v":"exampleComponent limel-example-card-clickable","i":3,"n":0.707},{"v":"exampleComponent limel-example-card-actions","i":2,"n":0.707},{"v":"exampleComponent limel-example-card-image","i":1,"n":0.707},{"v":"exampleComponent limel-example-card-basic","i":0,"n":0.707}],"1":{"v":"Card","n":1},"2":{"v":"/component/limel-card/","n":1},"3":[{"v":"Styling\nThe component offers a few styling options in form of custom CSS variables,\nto make it fit better in different contexts.","i":7,"n":0.224},{"v":"Nesting a component in the card\nYou can nest any component inside the card, to provide a more complex\nand interactive experience to the user.","i":6,"n":0.209},{"v":"Using the `orientation` prop\nThe `orientation` prop can be used to change the layout of the card,\nand is specially useful when the card is displaying images.\n\nBy default, the card has a `portrait` orientation, which will render the\nimage on top of the content, filling the entire width of the card.\nHowever, when it is changed to `landscape`, the image will be displayed\nto the left of the content, filling the entire height of the card,\nand maximum width of 40% of the card.","i":5,"n":0.113},{"v":"Clickable example\nSometimes you want to make the entire surface of the card to be clickable,\nfor example to navigate the user to another page or show more information.\n\nFor such scenarios, make sure to set the `clickable` property to `true`.\nThis will alter the visual style to properly communicate hover effects and cursor styles to the card.\n\n:::important\nIt might not be a good idea to combine clickable cards with actions, as it can confuse the user.\n:::","i":4,"n":0.118},{"v":"Card with actions\nAn array of actions can be provided to the card, to allow the user to interact with the content.\n\n:::note\nEven though cards allow displaying multiple actions,\nuse this possibility sparingly, and remember that these UI elements are\nmeant to be entry points to other contexts,\nin which detailed information is displayed, and more complex actions\nare possible to do.\n:::","i":3,"n":0.134},{"v":"Featuring a hero image\nThe content of the cards should be organized to allow users to\neasily scan and quickly find relevant and actionable information.\nThis is especially important because cards are often used in a grid layout,\nin which many cards are usually present.\n\nElements like text and images should clearly indicate information hierarchy.\n\n:::note\n- The height and aspect ratio of the image affects the layout of the card.\n- Remember to provide a meaningful alt text, to improve accessibility\n:::","i":2,"n":0.116},{"v":"Basic example\nCards can be used to show some information in a static manner,\nfor instance when displaying a grid of cards, each of which is\nproviding a brief summary of a topic.\n\nHowever, the most common use cases of these UI components is to\nprovide a media-rich and interactive experience to the user,\nwhich you can see in next examples.","i":1,"n":0.135},{"v":"Card is a component that displays content about a single topic,\nin a structured way. It can contain a header, and some supporting media such\nas an image or an icon, a body of text, or optional actions.","i":0,"n":0.167}],"4":[{"v":"value","i":7,"n":1},{"v":"subheading","i":6,"n":1},{"v":"orientation","i":5,"n":1},{"v":"image","i":4,"n":1},{"v":"icon","i":3,"n":1},{"v":"heading","i":2,"n":1},{"v":"clickable","i":1,"n":1},{"v":"actions","i":0,"n":1}],"5":[{"v":"The content of the card.\nSupports markdown, to provide a rich text experience.","i":7,"n":0.289},{"v":"Subheading of the card\nto provide a short description of the context.","i":6,"n":0.302},{"v":"The orientation of the card,\nspecially useful when the card has an image.","i":5,"n":0.289},{"v":"A hero image to display in the card,\nto enrich the content with visual information.","i":4,"n":0.267},{"v":"An icon, to display along with the heading and subheading.","i":3,"n":0.316},{"v":"Heading of the card,\nto provide a short title about the context.","i":2,"n":0.302},{"v":"When true, improve the accessibility of the component and hints the user\nthat the card can be interacted width.","i":1,"n":0.236},{"v":"Actions to display in the card,\nto provide the user with options to interact with the content.","i":0,"n":0.25}],"6":[],"7":[{"v":"string","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"\"landscape\" | \"portrait\"","i":5,"n":0.577},{"v":"Image","i":4,"n":1},{"v":"Icon | string","i":3,"n":0.577},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"(ListSeparator | ActionBarItem)[]","i":0,"n":0.577}],"8":[{"v":"actionSelected","i":0,"n":1}],"9":[{"v":"Fired when a action bar item has been clicked.","i":0,"n":0.333}],"10":[],"11":[{"v":"ActionBarItemOnlyIcon<any> | ActionBarItemWithLabel<any>","i":0,"n":0.577}]}},{"i":10,"$":{"0":[{"v":"beta ","i":20,"n":1},{"v":"exampleComponent limel-example-chart-creative-styling","i":19,"n":0.707},{"v":"exampleComponent limel-example-chart-styling","i":18,"n":0.707},{"v":"exampleComponent limel-example-chart-accessibility","i":17,"n":0.707},{"v":"exampleComponent limel-example-chart-clickable-items","i":16,"n":0.707},{"v":"exampleComponent limel-example-chart-axis-increment","i":15,"n":0.707},{"v":"exampleComponent limel-example-chart-multi-axis-area-with-negative-start-values","i":14,"n":0.707},{"v":"exampleComponent limel-example-chart-multi-axis-with-negative-start-values","i":13,"n":0.707},{"v":"exampleComponent limel-example-chart-multi-axis","i":12,"n":0.707},{"v":"exampleComponent limel-example-chart-type-nps","i":11,"n":0.707},{"v":"exampleComponent limel-example-chart-type-gantt","i":10,"n":0.707},{"v":"exampleComponent limel-example-chart-type-ring","i":9,"n":0.707},{"v":"exampleComponent limel-example-chart-type-doughnut","i":8,"n":0.707},{"v":"exampleComponent limel-example-chart-type-pie","i":7,"n":0.707},{"v":"exampleComponent limel-example-chart-type-line","i":6,"n":0.707},{"v":"exampleComponent limel-example-chart-type-area","i":5,"n":0.707},{"v":"exampleComponent limel-example-chart-type-dot","i":4,"n":0.707},{"v":"exampleComponent limel-example-chart-type-bar","i":3,"n":0.707},{"v":"exampleComponent limel-example-chart-max-value","i":2,"n":0.707},{"v":"exampleComponent limel-example-chart-orientation","i":1,"n":0.707},{"v":"exampleComponent limel-example-chart-stacked-bar","i":0,"n":0.707}],"1":{"v":"Chart","n":1},"2":{"v":"/component/limel-chart/","n":1},"3":[{"v":"Creative styling\n\nBehind the scenes for some chart types,\nthe `color` property of the `item` is used as a `background` style,\nnot a `background-color` style.\nThis, together with some CSS knowledge can empower some creative visualizations;\nspecially when a solid color is not enough to communicate a certain meaning.\nHere are some examples for inspiration.","i":20,"n":0.143},{"v":"Styling\nThe component provides a few styling options, using CSS custom properties.","i":19,"n":0.302},{"v":"Accessibility\nUnder the hoods, our charts are simply HTML tables.\nThis helps screen readers to interpret the data and present it to their users.\nHowever, to make this semantic more accessible and more understandable,\nthere are some optional props that we highly recommend you to use.\n\n- `accessibleLabel`: Will be used as a `caption` for the table, and\ndescribes what the chart is about. Depending on the context,\nIt might also be a good idea to include the accessible label for sighted\nusers as well, for instance, as a heading.\n- `accessibleItemsLabel`: Will be used as a `th` for the first column of the table,\ndescribing what all items in this column have in common. In this example,\nall items are cities.\n\nNote that these props won't be visually rendered for sighted users, but\nthey will be presented to assistive technologies, such as screen readers\nas well as search engines.\n\nAnother way to improve the accessibility of the chart is to use\nthe `prefix` and `suffix` props to provide additional context to the `value`\nof each item.\n\n##### Using the `loading` prop\nSometimes the data set needs to be calculated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow a spinner, indicating the data is being updated. This not only improves\nthe user experience, but also the accessibility of the chart both for sighted users,\nand behind the scenes, for users of assistive technologies.","i":18,"n":0.064},{"v":"With clickable items\n\nWhen `clickable` is set to `true`, the item will become interactive.\n\nThis provides visual and accessible feedback when the hovered, or focused,\nand also results in emitting an event when clicked.\n\n:::note\nItems in Doughnut and Pie charts support `clickable` property as well.\n\nHowever—due to technical reasons—, the only way to interact with their items\nis using the keyboard (by tabbing on them and pressing the <kbd>Enter</kbd> or\n<kbd>Space</kbd> keys.\n:::","i":17,"n":0.124},{"v":"Using the `axisIncrement` prop\nThe `axisIncrement` prop specifies the incremental\nvalues of the axis lines. By default the component tries to\nsmartly calculate a proper axis increment, to render meaningful\naxis lines, based on the maximum value provided in the dataset.\n\nHowever, you can set the `axisIncrement` to a\ndifferent custom value if needed.","i":16,"n":0.144},{"v":"Multi-axis Area Chart with Negative Start Values\nYou can also get a multi-axis Area chart, by making sure that\neach item has a start value, and some of them are negative.","i":15,"n":0.186},{"v":"Multi-axis with Negative Start Values\nYou can also get a multi-axis chart with items in your dataset\nthat have both start and end values, e.g. `value: [10, 20]`.","i":14,"n":0.196},{"v":"Multi-axis Charts\nNormally, charts visualize items in a positive range.\nHowever, there are cases where you want to visualize items that have both\npositive and negative `value`s.","i":13,"n":0.204},{"v":"NPS® chart\nThe NPS chart visually represents customer loyalty by plotting scores that\nrange from -100 to +100. NPS is based on customer responses to a simple question:\n\"_How likely are you to recommend us?_\"\n\nRespondents score from 0 to 10, which is then transformed into the NPS scale which starts from -100 and\ngoes up to +100. The NPS chart groups scores into three categories of:\n<span style=\"background-color: rgb(var(--color-amber-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">detractors</span>,\n<span style=\"background-color: rgb(var(--color-coral-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">passives</span>,\nor <span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">promoters</span>.\n\nAn NPS score above 30 is considered\n<span style=\"background-color: rgb(var(--color-lime-light)); padding: 0 0.25rem; border-radius: 0.5rem;\">good</span>,\nwhile a score above 70 is considered\n<span style=\"background-color: rgb(var(--color-lime-default)); padding: 0 0.25rem; border-radius: 0.5rem;\">excellent</span>.\n\nThis chart is good for:\n- Summarizing customer satisfaction or loyalty on a single scale.\n- Quickly identifying the distribution of detractors, passives, and promoters.\n\n:::tip\n**Use:**\n- Visualizing a single score that summarizes customer loyalty.\n- When tracking customer loyalty over time.\n- When tracking customer loyalty of different companies.\n- In dashboards or reporting tools to visualize changes in customer sentiment.\n\n**Avoid:**\n- For in-depth customer feedback analysis (consider pairing with more detailed survey insights).\n- Any other data visualization than NPS scores.\n:::\n\n:::important\nFor the `nps` chart type to visualize properly, the `value` property of the `ChartItem`\nshould be a number between `-100` and `100`!\n:::","i":12,"n":0.07},{"v":"Gantt chart\nGantt charts are used to visualize items that have a defined start and end value, making them ideal\nfor displaying timelines or project phases. Each item typically represents a phase or task, with its length\nindicating duration.\n\nIt's good for:\n- Visualizing project schedules, with tasks and milestones over time.\n- Showing task dependencies, start and end dates, and overlaps between phases.\n- Providing an easy-to-understand timeline for project planning and tracking.\n\n:::tip\n**Use:**\n- When you need to show the progression of tasks or stages over time.\n- When items have start points which are not simply zero.\n\n**Avoid:**\n- For datasets that don't involve time or sequential phases (bar charts or line charts may be better).\n\n**Note:**\nIn Gantt charts, items have a start value to indicate when they begin. Unlike other charts,\nwhere items default to a start value of `0`, each Gantt chart item should specify a start value\nand an end value (e.g., `value: [10, 20]`), which determines the duration and position of the item.\n:::","i":11,"n":0.08},{"v":"Ring chart\nA ring chart is similar to a doughnut chart but used in concentric layers,\nideal for comparison of hierarchical data.\n\nIt's good for:\n- Comparing multiple parts of a whole in a layered visual layout.\n- Displaying hierarchical data or showing nested relationships.\n\n:::tip\n**Use:**\n- When you need to show multiple data series in a single, visually appealing chart.\n- For data with a clear hierarchy or grouping.\n\n**Avoid:**\n- With too many rings, as it can become visually overwhelming.\n- For data that needs precise comparison across series.\n:::","i":10,"n":0.112},{"v":"Doughnut chart\nA doughnut chart is a variation of the pie chart, with a center space,\noften used to show multiple concentric data series.\n\nIt's good for:\n- Showing proportions with a visually balanced layout.\n- Allowing room in the center for additional information (e.g., displaying totals).\n\n:::tip\n**Use:**\n- When visual space is limited, and a pie chart may look crowded.\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","i":9,"n":0.1},{"v":"Pie chart\nA pie chart represents data as slices of a circle, with each slice’s size proportional to its value.\n\nIt's good for:\n- Showing the proportions of a whole.\n- Visualizing data composition for easy understanding.\n\n:::tip\n**Use:**\n- When you have a limited number of categories (at least 3, and maximum ~10).\n- For static data composition, not suitable for showing time trends.\n\n**Avoid:**\n- When precise comparisons are needed, as bars provide clearer detail.\n- With complex or large datasets where slices become too small to read.\n:::","i":8,"n":0.113},{"v":"Line chart\nA line chart connects data points with a continuous line,\noften used for displaying trends over intervals.\n\nIt's good for:\n- Showing trends over time in a simple, readable format.\n- Highlighting increases, decreases, or patterns in a dataset.\n\n:::tip\n**Use:**\n- For tracking data changes over time, especially with multiple data points.\n- When visualizing time-series data to show overall trends.\n\n**Avoid:**\n- For large fluctuations, which may make data misinterpretations likely.\n- When individual point comparison is critical (consider a bar or dot chart).\n:::","i":7,"n":0.115},{"v":"Area chart\nAn area chart is like a line chart but with the area below the line filled in,\nrepresenting cumulative data.\n\nIt's good for:\n- Showing cumulative totals over time.\n- Emphasizing data changes while highlighting volume or totals.\n\n:::tip\n**Use:**\n- For showing cumulative data trends where total volume over time is meaningful.\n- When visualizing stacked data in a cumulative format.\n\n**Avoid:**\n- If individual values need precise comparison (stacked bar charts are more suitable).\n- For datasets with highly fluctuating values, as overlapping areas can obscure details.\n:::","i":6,"n":0.113},{"v":"Dot chart\nA dot chart displays values for each category using dots along an axis, similar to a bar chart but with dots\nat the value associated with each category instead of bars. It’s often used as an alternative to bar charts,\nespecially when focusing on individual data points or reducing visual clutter.\n\nIt's good for:\n- Comparing values across categories in a clean and uncluttered way.\n- Visualizing discrete data points without the visual weight of bars.\n- Allowing readers to focus on precise values and distribution.\n\n:::tip\n**Use:**\n- When comparing values across categories in a straightforward way.\n- For datasets where you do not want to emphasize on or compare \"volumes\" or \"sizes\",\nbut rather compare the points that the data represents.\n\n**Avoid:**\n- For datasets with very few or very densely packed points, which could make the chart difficult to read.\n- When representing complex relationships or multiple variables (scatter plots or line charts may be more effective).\n:::","i":5,"n":0.082},{"v":"Bar chart\nA bar chart displays data with rectangular bars, where the length of each bar represents the value of a data point.\n\nIt's good for:\n- Comparing discrete categories or groups.\n- Visualizing changes in data over time when categories are limited.\n\n:::tip\n**Use:**\n- When you have categorical data that needs clear comparisons.\n- For datasets with fewer than 20 categories, as too many bars can make it hard to read.\n\n**Avoid:**\n- When showing continuous data trends over time (a line chart might be better).\n- When you have many categories, which could make the chart crowded.\n:::","i":4,"n":0.106},{"v":"Using the `maxValue` prop\n\nThe `maxValue` prop defines the upper limit of the visual range for the chart.\nIt determines the maximum value represented on the axis and is used to\ncalculate the size of each item in the chart relative to this value.\n\nFor example, if `maxValue` is set to `100`, an item with a value of `10`\nwill occupy 10% of the chart, while an item with a value of `50` will occupy 50%.\nIf `maxValue` is set to `200`, an item with a value of `50` will occupy 25% of the chart.\n\nIf `maxValue` is not provided, the chart will calculate the maximum value based on\nthe actual data points, and the size of each item will be calculated relative to\nthe total range of the data.\n\n:::note\nThe `maxValue` only affects the upper limit of the chart's range.\nThe chart will always start from the smallest value present in the dataset,\nwhich could be a negative number.\n:::","i":3,"n":0.082},{"v":"The `orientation` prop\nUsing the `orientation` prop, you can change the direction of\nthe the chart. Note that the `orientation` prop\ndoes not have any effect on those `type`s of visualization that\ndo not have the common `X` and `Y` axises, such as `pie` or `doughnut`.\n\n:::note\nCharts are responsive and stretch inside their containers.\nYou need to set ensure that there space for them to get rendered in.\n:::","i":2,"n":0.127},{"v":"Stacked bar (default)\n\nYou can simply provide a list of items to the chart component,\nand it will visualize them the way you want. For the default\nvisualization, the component uses the `stacked-bar` `type`,\nas this is the most compact form of date visualization.\n\nThe only thing each item needs is a `text`, a `value`, and a your\nchoice of `color`.\n\nA stacked bar chart builds creates a data visualization\nby stacking multiple data series in each bar.\n\nIt's good for:\n- Showing the composition of categories across multiple groups.\n- Highlighting cumulative values while breaking down individual contributions.\n\n:::tip\n**Use:**\n- When you want to show both the total and individual values in each category.\n- For data with sub-categories or components that need visualization.\n\n**Avoid:**\n- If precise individual comparisons between subcategories are necessary.\n- When there are too many categories, making the chart crowded.\n:::","i":1,"n":0.088},{"v":"A chart is a graphical representation of data, in which\nvisual symbols such as such bars, dots, lines, or slices, represent\neach data point, in comparison to others.","i":0,"n":0.196}],"4":[{"v":"type","i":8,"n":1},{"v":"orientation","i":7,"n":1},{"v":"maxValue","i":6,"n":1},{"v":"loading","i":5,"n":1},{"v":"language","i":4,"n":1},{"v":"items","i":3,"n":1},{"v":"axisIncrement","i":2,"n":1},{"v":"accessibleLabel","i":1,"n":1},{"v":"accessibleItemsLabel","i":0,"n":1}],"5":[{"v":"Defines how items are visualized in the chart.","i":8,"n":0.354},{"v":"Defines whether the chart is intended to be displayed wide or tall.\nDoes not have any effect on chart types which generate circular forms.","i":7,"n":0.209},{"v":"Specifies the range that items' values could be in.\nThis is used in calculation of the size of the items in the chart.\nWhen not provided, the sum of all values in the items will be considered as the range.","i":6,"n":0.162},{"v":"Indicates whether the chart is in a loading state.","i":5,"n":0.333},{"v":"Defines the language for translations.\nWill translate the translatable strings on the components.","i":4,"n":0.289},{"v":"List of items in the chart,\neach representing a data point.","i":3,"n":0.316},{"v":"Specifies the increment for the axis lines.","i":2,"n":0.378},{"v":"Helps users of assistive technologies to understand\nthe context of the chart, and what is being displayed.","i":1,"n":0.25},{"v":"Helps users of assistive technologies to understand\nwhat the items in the chart represent.","i":0,"n":0.277}],"6":[],"7":[{"v":"\"area\" | \"bar\" | \"dot\" | \"doughnut\" | \"line\" | \"nps\" | \"pie\" | \"ring\" | \"stacked-bar\"","i":8,"n":0.243},{"v":"\"landscape\" | \"portrait\"","i":7,"n":0.577},{"v":"number","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":4,"n":0.243},{"v":"ChartItem<number | [number, number]>[]","i":3,"n":0.5},{"v":"number","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"interact","i":0,"n":1}],"9":[{"v":"Fired when a chart item with `clickable` set to `true` is clicked","i":0,"n":0.289}],"10":[],"11":[{"v":"ChartItem<number | [number, number]>","i":0,"n":0.5}]}},{"i":11,"$":{"0":[{"v":"exampleComponent limel-example-checkbox-readonly","i":2,"n":0.707},{"v":"exampleComponent limel-example-checkbox-helper-text","i":1,"n":0.707},{"v":"exampleComponent limel-example-checkbox","i":0,"n":0.707}],"1":{"v":"Checkbox","n":1},"2":{"v":"/component/limel-checkbox/","n":1},"3":[{"v":"Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors.","i":3,"n":0.099},{"v":"With `helperText`\n\nCheckboxes can have a helper text, which is useful when providing additional information\ncan clarify functionality of the checkbox for the user.\n\nThe helper text is displayed when user hovers the checkbox, or focuses on it using keyboard\nnavigation. However, on touchscreen devices, the helper text is always displayed.","i":2,"n":0.146},{"v":"The Checkbox component is a classic and essential element in UI design that allows\nusers to make multiple selections from a predefined list of options. The Checkbox component is commonly used in forms and settings interfaces to enable users to\nselect one or more items from a list of choices.\n\n## States of a Checkbox\nWhen a user clicks or taps on the box, it toggles between two states:\nChecked and Unchecked.\n\nHowever, a Checkbox can visualize a third state called the \"Indeterminate\" state.\nIn this state, the checkbox appears as a filled box with a horizontal line or dash inside it.\n\nThe Indeterminate state is typically used when dealing with checkbox groups\nthat have hierarchical relationships or when the group contains sub-items.\nThis state is used to indicate that that some, but not all, of the items in a group are selected.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","i":0,"n":0.08}],"4":[{"v":"required","i":8,"n":1},{"v":"readonlyLabels","i":7,"n":1},{"v":"readonly","i":6,"n":1},{"v":"label","i":5,"n":1},{"v":"invalid","i":4,"n":1},{"v":"indeterminate","i":3,"n":1},{"v":"helperText","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"checked","i":0,"n":1}],"5":[{"v":"Set to `true` to indicate that the checkbox must be checked.","i":8,"n":0.302},{"v":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","i":7,"n":0.243},{"v":"Disables the checkbox when `true`. This visualizes the checkbox slightly differently.\nBut shows no visual sign indicating that the checkbox is disabled\nor can ever become interactable.","i":6,"n":0.2},{"v":"The checkbox label.","i":5,"n":0.577},{"v":"Set to `true` to indicate that the current value is invalid.","i":4,"n":0.302},{"v":"Enables indeterminate state. Set to `true` to signal indeterminate check.","i":3,"n":0.316},{"v":"Optional helper text to display below the checkbox","i":2,"n":0.354},{"v":"Disables the checkbox when `true`. Works exactly the same as `readonly`.\nIf either property is `true`, the checkbox will be disabled.","i":1,"n":0.224},{"v":"The value of the checkbox. Set to `true` to make the checkbox checked.","i":0,"n":0.277}],"6":[{"v":"beta ","i":0,"n":1}],"7":[{"v":"boolean","i":8,"n":1},{"v":"Label<boolean>[]","i":7,"n":1},{"v":"boolean","i":6,"n":1},{"v":"string","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the input value is changed.","i":0,"n":0.378}],"10":[],"11":[{"v":"boolean","i":0,"n":1}]}},{"i":12,"$":{"0":[{"v":"exampleComponent limel-example-chip-aria-role","i":12,"n":0.707},{"v":"exampleComponent limel-example-chip-readonly-border","i":11,"n":0.707},{"v":"exampleComponent limel-example-chip-size","i":10,"n":0.707},{"v":"exampleComponent limel-example-chip-progress","i":9,"n":0.707},{"v":"exampleComponent limel-example-chip-loading","i":8,"n":0.707},{"v":"exampleComponent limel-example-chip-menu","i":7,"n":0.707},{"v":"exampleComponent limel-example-chip-removable","i":6,"n":0.707},{"v":"exampleComponent limel-example-chip-filter","i":5,"n":0.707},{"v":"exampleComponent limel-example-chip-badge","i":4,"n":0.707},{"v":"exampleComponent limel-example-chip-image","i":3,"n":0.707},{"v":"exampleComponent limel-example-chip-icon-colors","i":2,"n":0.707},{"v":"exampleComponent limel-example-chip-link","i":1,"n":0.707},{"v":"exampleComponent limel-example-chip-button","i":0,"n":0.707}],"1":{"v":"Chip","n":1},"2":{"v":"/component/limel-chip/","n":1},"3":[{"v":"Correct usage of ARIA roles\n\nChips represent choices, filters, or tags, organized in a block or bundled into a group.\nWhile sighted users see the visually bundled group of chips in a well-designed UI,\nscreen reader users only hear the chip text, one at a time.\nThis can make it difficult for users of assistive technologies to understand\nthe context of the chip.\n\nTo provide an accessible experience, it's important to place the chips in\na semantically correct structure, such as a list or a table,\nor properly use ARIA roles on the chip and its container.\n\nIn this example, we demonstrate how to use ARIA roles to improve accessibility for chips.\nHowever, it's recommended to read up on the subject to fully understand the\nimplications of ARIA roles.\n\nFor more information on ARIA roles, refer to the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles).","i":13,"n":0.088},{"v":"Border color\nIn readonly state, the border color of the chip can be customized,\nusing `--chip-readonly-border-color`.","i":12,"n":0.267},{"v":"Size\nWhen the `size` property is set to `small`, the chip will render\nwith a smaller height and gap.","i":11,"n":0.243},{"v":"Displaying a progress bar\nBy defining a numeric `progress` (from `0` to `100`),\nyou can display a progress bar on the chip\nto inform the user about an ongoing progress and also\nvisualize the amount of progress that has been made so far.\n\n:::important\n1. Do not use `loading={true}` and `progress` at the same time.\n2. When the progress has completed, unset the `progress` property!\n:::","i":10,"n":0.131},{"v":"Loading state\nSetting the `loading` to `true` puts the component in the `loading` state,\nand renders an indeterminate progress indicator inside the chip.\n\n:::note\nNote that this does _not_ disable the interactivity of the chip,\nand most probably you do not need it to be disabled either.\nIf the chip should be disabled while loading, the\n`disabled` property should separately be set to `true` as well.\n:::\n:::tip\nConsider using [aria-live](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live)\nwhere appropriate, or to inform the user about what is being loaded\nuse a [tooltip](#/component/limel-tooltip) on the component.\nThis is mainly to improve the accessibility for users of assistive technologies.\n:::","i":9,"n":0.107},{"v":"When an array of menu items is provided, the chip will render\nan ellipsis menu with the supplied items. When an item is selected,\nthe `onMenuItemSelected` event will be emitted, reflecting the\n`value` of the selected item.\n\n:::note\nThis will hide the \"remove button\" on the chip, when `removable={true}`,\nas the remove button will automatically become the last item in the menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","i":8,"n":0.124},{"v":"Removable chips\nChips can display a remove button,\nwhen their `removable` prop is set to `true`.\n\nThis is typically used when the chip is used in a chip-set,\nwhere each chip visualizes a chosen option.\n\n:::tip\nWhen the chip is focused using the keyboard, the user can press\nthe <kbd>Delete</kbd> or <kbd>Backspace</kbd> keys to\ntrigger the same remove `event`.\n:::","i":7,"n":0.14},{"v":"Chip as filter\nChips are great candidates to visualize active filters.\nHowever, as chips are used for other purposes as well,\nwe need to make sure that the user understands that the chip is a filter,\njust by the look of it.\n\nBy setting the `type` to `filter`, the chip will be rendered with a distinct style\nsuitable for visualizing filters.\n\n:::note\nIn this mode, clicking on the chip should also toggle its `selected` state.\n:::","i":6,"n":0.122},{"v":"Chip with a badge\nChips can display a badge with a number or a short text.","i":5,"n":0.258},{"v":"Picture instead of icon\nUsing the `Img` interface, you can specify an image to be displayed on the chip.\n\n:::note\nThe specified image will be displayed instead of the icon, if both are provided.\n:::","i":4,"n":0.18},{"v":"Icon color\nUsing the `Icon` interface, you can specify colors for the icon.","i":3,"n":0.289},{"v":"Chip as hyperlink\nFor accessibility and usability alike, if clicking on a chip should\nresult in any kind of navigation, it is preferable to use a link,\nrather than a button.\n\nThat way, the user can choose to, for example, open the link in a new tab.\nFor this reason, we suggest always providing a Link with\nthe URL representing the target state of the navigation.","i":2,"n":0.129},{"v":"Chip as button\nTypically, a chip is used to trigger an action or act as an input element.\nThis is why the component generates a `<button>` element in the DOM to give\na more semantically correct clues to assistive technologies.\n\nTo trigger these actions, you will only need to handle the `onClick`\nevent on the component.","i":1,"n":0.14},{"v":"Chips and buttons are both interactive elements in UI design,\nbut they serve different purposes and are used in different contexts.\n\n:::warning\nDo not use the chip component carelessly, as an alternative for\n[`limel-button`](#/component/limel-button/) in the UI design!\n\n**Buttons:**\nButtons are used to trigger actions. They are typically used to\nsubmit forms, open dialogs, initiate a process, or perform any action\nthat changes the state of the application.\nButtons' labels usually contain action words, in other words, the labels is\na _verb in imperative mood_ such as \"Submit\" or \"Delete\".\nButtons are placed in areas where it's clear they will initiate\nan action when clicked.\n\n**Chips:**\nChips however are elements which may look like buttons, but they are\nrepresenting choices, filters, or tags, in a small block\nor clearly bundled into a group. Chips are rarely used alone in the\nuser interface.\nThey are often used in a so called \"chip-set\", or placed together in\na section of the UI, where the user can expect more than one chip to be present.\n\nFor example, a chip may represent a filter in a filter bar, or a tag in a tag list,\nor an item in a shopping list.\nClicking a chip can also trigger an action, for example toggling a filter ON or OFF,\nor opening a page with all posts tagged with the tag represented by the chip,\nor navigating to a page with more information about the item in the shopping list.\n:::","i":0,"n":0.067}],"4":[{"v":"type","i":16,"n":1},{"v":"text","i":15,"n":1},{"v":"size","i":14,"n":1},{"v":"selected","i":13,"n":1},{"v":"removable","i":12,"n":1},{"v":"readonly","i":11,"n":1},{"v":"progress","i":10,"n":1},{"v":"menuItems","i":9,"n":1},{"v":"loading","i":8,"n":1},{"v":"link","i":7,"n":1},{"v":"language","i":6,"n":1},{"v":"invalid","i":5,"n":1},{"v":"image","i":4,"n":1},{"v":"identifier","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"badge","i":0,"n":1}],"5":[{"v":"Set to `filter` to render the chip with a distinct style\nsuitable for visualizing filters.","i":16,"n":0.267},{"v":"Label displayed on the chip","i":15,"n":0.447},{"v":"Defines the size of the chip.","i":14,"n":0.408},{"v":"Set to `true` to visualize the chip in a \"selected\" state.\nThis is typically used when the chip is used in a chip-set\nalong with other chips.","i":13,"n":0.2},{"v":"Set to `true` to render a remove button on the chip.","i":12,"n":0.302},{"v":"Set to `true` to render the chip as a static UI element.\nUseful when the parent component has a `readonly` state.","i":11,"n":0.224},{"v":"Reflects the current value of a progress bar on the chip,\nvisualizing the percentage of an ongoing process.\nMust be a number between `0` and `100`.","i":10,"n":0.204},{"v":"When provided, the chip will render an ellipsis menu with the supplied items.\nAlso, this will hide the \"remove button\" when `removable={true}`, as\nthe remove button will automatically become the last item in the menu.","i":9,"n":0.174},{"v":"Set to `true` to put the component in the `loading` state,\nand render an indeterminate progress indicator inside the chip.\nThis does _not_ disable the interactivity of the chip!","i":8,"n":0.192},{"v":"If supplied, the chip will become a clickable link.","i":7,"n":0.333},{"v":"Defines the language for translations.\nWill translate the translatable strings on the components.","i":6,"n":0.289},{"v":"Set to `true` to visualize the chip in an \"invalid\" or \"error\" state.","i":5,"n":0.277},{"v":"A picture to be displayed instead of the icon on the chip.","i":4,"n":0.289},{"v":"Identifier for the chip. Must be unique.","i":3,"n":0.378},{"v":"Icon of the chip.","i":2,"n":0.5},{"v":"Set to `true` to disable the chip.","i":1,"n":0.378},{"v":"The value of the badge, displayed on the chip.","i":0,"n":0.333}],"6":[{"v":"beta ","i":0,"n":1}],"7":[{"v":"\"default\" | \"filter\"","i":16,"n":0.577},{"v":"string","i":15,"n":1},{"v":"\"default\" | \"small\"","i":14,"n":0.577},{"v":"boolean","i":13,"n":1},{"v":"boolean","i":12,"n":1},{"v":"boolean","i":11,"n":1},{"v":"number","i":10,"n":1},{"v":"any[]","i":9,"n":1},{"v":"boolean","i":8,"n":1},{"v":"{ title?: string; target?: string; href: string; rel?: string; }","i":7,"n":0.316},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":6,"n":0.243},{"v":"boolean","i":5,"n":1},{"v":"Image","i":4,"n":1},{"v":"number | string","i":3,"n":0.577},{"v":"Icon | string","i":2,"n":0.577},{"v":"boolean","i":1,"n":1},{"v":"number | string","i":0,"n":0.577}],"8":[{"v":"remove","i":1,"n":1},{"v":"menuItemSelected","i":0,"n":1}],"9":[{"v":"Fired when clicking on the remove button of a `removable` chip.\nThe value of `identifier` is emitted as the event detail.","i":1,"n":0.224},{"v":"Emitted when a menu item is selected from the actions menu.","i":0,"n":0.302}],"10":[],"11":[{"v":"number | string","i":1,"n":0.577},{"v":"MenuItem","i":0,"n":1}]}},{"i":13,"$":{"0":[{"v":"exampleComponent limel-example-chip-set-composite","i":10,"n":0.707},{"v":"exampleComponent limel-example-chip-set-image","i":9,"n":0.707},{"v":"exampleComponent limel-example-chip-icon-color","i":8,"n":0.707},{"v":"exampleComponent limel-example-chip-set-input-type-search","i":7,"n":0.707},{"v":"exampleComponent limel-example-chip-set-input-type-text","i":6,"n":0.707},{"v":"exampleComponent limel-example-chip-set-input-type-with-menu-items","i":5,"n":0.707},{"v":"exampleComponent limel-example-chip-set-input","i":4,"n":0.707},{"v":"exampleComponent limel-example-chip-set-filter-badge","i":3,"n":0.707},{"v":"exampleComponent limel-example-chip-set-filter","i":2,"n":0.707},{"v":"exampleComponent limel-example-chip-set-choice","i":1,"n":0.707},{"v":"exampleComponent limel-example-chip-set","i":0,"n":0.707}],"1":{"v":"Chip set","n":0.707},"2":{"v":"/component/limel-chip-set/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":11,"n":0.354},{"v":"Chips with images\n\nYou can use images instead of icons on chips.\n\n:::note\nThe image will be displayed instead of the icon, if both are provided.\n:::","i":10,"n":0.209},{"v":"Chip Icon Color\n\nThe color and background color of each chip's icon can be individually\nconfigured.","i":9,"n":0.267},{"v":"Input chip set with `inputType` of `search`\n\nWhen autocorrection is potentially harmful for the user experience and for\nyour intended result, use `search` as `inputType`. For instance, for a\nquestion like \"Please suggest unique names for our newly founded company\",\nyou probably don't want autocorrection, because you would expect many\nvalid suggestions to not exist in the autocorrection dictionary. Therefore,\nyou do not want the respondent's input to be regarded as a typo and to be\nchanged when they press <kbd>Enter</kbd> or <kbd>Space</kbd>.","i":8,"n":0.115},{"v":"Input chip set with `inputType` of `text`\n\nThere is a slight difference in the way browsers treat `input` field\nwith `type=\"text\"` and `type=\"search\"`. You can read more about this\ndifference in [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search#using_search_inputs),\nbut the most important difference in this case is activation of the\nautocorrection feature on most smart devices.\n\nWhen a user makes a spelling mistake while typing in an input field with\n`type=\"text\"`, the mistake will be corrected automatically, right after they\npress <kbd>Enter</kbd> or <kbd>Space</kbd>. Input fields with `type=\"search\"`\ndo not auto correct the user's input.\n\nIf you want to use limel-chip-set in a form context, where autocorrection is\na good thing, use `text` as `inputType`. It is important to know that the\nchip-set component creates a chip from the autocorrected value, after the\nuser has pressed the <kbd>Enter</kbd> key and the auto correction has fixed\nexisting typos! For example, for a question like \"Please type five of your\nfavorite fruits\", you would want to avoid misspellings, to collect higher\nquality data.","i":7,"n":0.082},{"v":"Input chip set, containing items with menus\nWhile chips inside a chip set of `type=\"input\"` can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","i":6,"n":0.104},{"v":"Input chip set\n\nUseful for collections of tags or labels. Can also be used as an advanced\nsearch input, with leading icon and a delimiter between search terms.\n\n:::note\nSetting `readonly` to `true` when the `type=\"input\"`, the chips that are displayed\nwill remain interactive. This means that the user can still click on them.\nHowever, the chips cannot be removed or added in `readonly` mode.\n:::","i":5,"n":0.13},{"v":"Filter chip set with badge.\nThe badge can be used to visulize the number of results using each filter.","i":4,"n":0.236},{"v":"Filter chip set\n\nAny number of options can be selected at once, including none. As the name\nsuggests, this one is good for filtering things.","i":3,"n":0.209},{"v":"Choice chip set\n\nOnly one option can be selected at once. Kind of like radio-buttons, but the\nuser can deselect the chosen option too. Good as an alternative to using a\n`select` when there are only a few options.","i":2,"n":0.167},{"v":"Basic example with no `type` set\n\nMay be useful as a read-only presentation of a collection of tags, or\nsimilar.\n\nDepending on the use case, you may also wish to consider\n[limel-button](#/component/limel-button/) or\n[limel-button-group](#/component/limel-button-group/).","i":1,"n":0.186},{"v":":::note\n**Regarding `click` and `interact` events:**\n\nThe `interact` event is emitted when a chip is interacted with, and is\nthe recommended way to listen for chip interactions.\n\nHowever, if you need to handle clicks differently depending on which chip\nwas clicked, or whether the click was on a chip or elsewhere, you need to\nlisten to the native `click` event instead.\n\nNative `click` events are passed through, and if the click came from\na chip, the chip object is available in the event object under\n`<event object>.Lime.chip`.\n\nExample usage:\n```ts\nprivate handleClick(event: Event) {\n    if (event && 'Lime' in event && (event.Lime as any).chip) {\n        if ((event.Lime as { chip: Chip }).chip.href) {\n            // Chip has href, so let the browser open the link.\n            return;\n        }\n        // handle click on chip without href\n    } else {\n        // handle click elsewhere\n    }\n}\n```\n:::","i":0,"n":0.088}],"4":[{"v":"value","i":16,"n":1},{"v":"type","i":15,"n":1},{"v":"searchLabel","i":14,"n":1},{"v":"required","i":13,"n":1},{"v":"readonly","i":12,"n":1},{"v":"maxItems","i":11,"n":1},{"v":"leadingIcon","i":10,"n":1},{"v":"language","i":9,"n":1},{"v":"label","i":8,"n":1},{"v":"invalid","i":7,"n":1},{"v":"inputType","i":6,"n":1},{"v":"helperText","i":5,"n":1},{"v":"emptyInputOnBlur","i":4,"n":1},{"v":"disabled","i":3,"n":1},{"v":"delimiter","i":2,"n":1},{"v":"clearAllButton","i":1,"n":1},{"v":"autocomplete","i":0,"n":1}],"5":[{"v":"List of chips for the set","i":16,"n":0.408},{"v":"Type of chip set\n\n- `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n- `filter` renders a set of selectable chips where all are selectable.\n- `input` renders a set of chips that can be used in conjunction with an input field\n\nIf no type is set, a basic set of chips without additional functionality will be rendered","i":15,"n":0.126},{"v":"Search label to display when type is `input` and component is in search mode","i":14,"n":0.267},{"v":"True if the control requires a value","i":13,"n":0.378},{"v":"For chip-sets of type `input`, set to `true` to disable adding and\nremoving chips, but allow interaction with existing chips in the set.\nFor any other types, setting either `readonly` or `disabled` disables\nthe chip-set.","i":12,"n":0.177},{"v":"For chip-sets of type `input`. Limits the maximum number of chips.\nWhen the value is `0` or not set, no limit is applied.","i":11,"n":0.213},{"v":"For chip-sets of type `input`. When the value is null, no leading icon is used.\nLeading icon to show to the far left in the text field","i":10,"n":0.196},{"v":"Defines the language for translations.\nWill translate the translatable strings on the components. For example, the clear all chips label.","i":9,"n":0.229},{"v":"Label for the chip-set","i":8,"n":0.5},{"v":"Set to `true` to indicate that the current value of the input field is\ninvalid.","i":7,"n":0.267},{"v":"For chip-sets of type `input`. Value to use for the `type` attribute on the\ninput field inside the chip-set.","i":6,"n":0.236},{"v":"Optional helper text to display below the chipset.\nWhen type is `input`, the helper text is displayed below the\ninput field when it has focus.\nWhen type is not `input`, the helper text is always displayed\nif the device is touch screen; otherwise it is shown when chip-set\nis hovered or focused using keyboard navigation.","i":5,"n":0.141},{"v":"Whether the input field should be emptied when the chip-set loses focus.","i":4,"n":0.289},{"v":"True if the chip set should be disabled","i":3,"n":0.354},{"v":"For chip-set of type `input`. Sets delimiters between chips.","i":2,"n":0.333},{"v":"Whether the \"Clear all\" buttons should be shown","i":1,"n":0.354},{"v":"For chip-set of type `input`, defines whether the input field should have autocomplete enabled.\nRead more about the `autocomplete` attribute\n[here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete).","i":0,"n":0.229}],"6":[],"7":[{"v":"Chip<any>[]","i":16,"n":1},{"v":"\"choice\" | \"filter\" | \"input\"","i":15,"n":0.447},{"v":"string","i":14,"n":1},{"v":"boolean","i":13,"n":1},{"v":"boolean","i":12,"n":1},{"v":"number","i":11,"n":1},{"v":"string","i":10,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":9,"n":0.243},{"v":"string","i":8,"n":1},{"v":"boolean","i":7,"n":1},{"v":"\"search\" | \"text\"","i":6,"n":0.577},{"v":"string","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"stopEdit","i":4,"n":1},{"v":"startEdit","i":3,"n":1},{"v":"interact","i":2,"n":1},{"v":"input","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when an input chip set has lost focus and editing in the text field has ended","i":4,"n":0.243},{"v":"Emitted when an input chip set has received focus and editing in the text field has started","i":3,"n":0.243},{"v":"Dispatched when a chip is interacted with","i":2,"n":0.378},{"v":"Dispatched when the input is changed for type `input`","i":1,"n":0.333},{"v":"Dispatched when a chip is selected/deselected","i":0,"n":0.408}],"10":[],"11":[{"v":"void","i":4,"n":1},{"v":"void","i":3,"n":1},{"v":"Chip<any>","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"Chip<any> | Chip<any>[]","i":0,"n":0.577}]}},{"i":14,"$":{"0":[{"v":"exampleComponent limel-example-circular-progress-percentage-colors","i":4,"n":0.707},{"v":"exampleComponent limel-example-circular-progress-css-variables","i":3,"n":0.707},{"v":"exampleComponent limel-example-circular-progress-props","i":2,"n":0.707},{"v":"exampleComponent limel-example-circular-progress-sizes","i":1,"n":0.707},{"v":"exampleComponent limel-example-circular-progress","i":0,"n":0.707}],"1":{"v":"Circular progress","n":0.707},"2":{"v":"/component/limel-circular-progress/","n":1},"3":[{"v":"Displaying percentage colors\nAt Lime Technologies we have a convention for displaying percentage colors.\nThe colors we use to display a range change with intervals of 10.\nThe color spectrum is not modifiable, and looks like\nred → orange → yellow → green → teal.\nTo enable this feature, simply set `displayPercentageColors` to `true`.\n\nTry changing the value in the example below to see how colors change\nfor different percentages.","i":5,"n":0.126},{"v":"Tweaking the style, using CSS variables\nThe component offers a few possibilities for tweaking its size and colors\nusing a few CSS variables.\n\n:::note\nIf you have tweaked component's size using size presets offered by the\n`size` prop, the css variable of `--circular-progress-size` will not have any\neffect.\n:::\n:::important\nMake sure that the track color is lighter than the fill color. Otherwise the\nUI will be very confusing for the users.\n:::","i":4,"n":0.127},{"v":"Using the props\nThis component is initially designed to visualize a percentage on a scale of\nzero to 100. However, you can easily visualize a progress in other scales,\nsimply by setting `maxValue`, `prefix` and `suffix`.\n\nLook at this example to see how the component displays an angle in a\n360-degrees scale, a 60-seconds scale, and a 5-stars rating.","i":3,"n":0.136},{"v":"Size presets\nYou can chose a preset size for the component to render it desireably,\nusing the `size` prop.\nHowever, if these preset sizes do not suit your UI needs, do not specify them\nand instead specify the size using the `--circular-progress-size` variable,\nwhich must always be according to our\n[size rhythm](#/DesignGuidelines/size-rhythms.md/) guidelines.\n\nNote that the text size is automatically adjusted, based on the visual size\nof the component.","i":2,"n":0.128},{"v":"The circular progress component can be used to visualize the curent state of\na progress in a scale; for example percentage of completion of a task.\n\nIts compact UI makes the component suitable when there is not enough screen\nspace available to visualise such information.\n\nThis component allows you to define your scale, from `0` to a desired\n`maxValue`; and also lets you chose a proper `suffix` for your scale.\n\n:::note\nThe component will round up the value when it is displayed, and only shows\none decimal digit.\nIt also abbreviates large numbers. For example 1234 will be displayed as 1.2k.\nOf course such numbers, if bigger than `maxValue` will be visualized as a\nfull progress.\n:::","i":0,"n":0.098}],"4":[{"v":"value","i":5,"n":1},{"v":"suffix","i":4,"n":1},{"v":"size","i":3,"n":1},{"v":"prefix","i":2,"n":1},{"v":"maxValue","i":1,"n":1},{"v":"displayPercentageColors","i":0,"n":1}],"5":[{"v":"The value of the progress bar.","i":5,"n":0.408},{"v":"The suffix which is displayed after the `value`, must be one or two characters long. Defaults to `%`","i":4,"n":0.236},{"v":"Determines the visual size of the visualization from a preset size. This property can override the `--circular-progress-size` variable if it is specified.","i":3,"n":0.213},{"v":"The prefix which is displayed before the `value`, must be a few characters characters long.","i":2,"n":0.258},{"v":"The maximum value within the scale that the progress bar should visualize. Defaults to `100`.","i":1,"n":0.258},{"v":"When set to `true`, makes the filled section showing the percentage colorful. Colors change with intervals of 10%.","i":0,"n":0.236}],"6":[],"7":[{"v":"number","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\"","i":3,"n":0.333},{"v":"string","i":2,"n":1},{"v":"number","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":15,"$":{"0":[{"v":"exampleComponent limel-example-code-editor-fold-lint","i":2,"n":0.707},{"v":"exampleComponent limel-example-code-editor-readonly-with-line-numbers","i":1,"n":0.707},{"v":"exampleComponent limel-example-code-editor","i":0,"n":0.707}],"1":{"v":"Code editor","n":0.707},"2":{"v":"/component/limel-code-editor/","n":1},"3":[{"v":"Editable with JSON linting and folding\nHere you see an instance of the Code Editor component with linting and\nfolding support, which allows the user to see syntax errors in the JSON\ncode shown in the editor. Folding makes it easier to collapse larger pieces\nof code.","i":3,"n":0.152},{"v":"Readonly, with line numbers and dark theme\nHere you see a `readonly` instance of the Code Editor component. This means\nyou cannot edit the code. We also display line numbers here.\nAdditionally, this instance has a `dark` `colorScheme`, which means it does not\nrespect the operating system's settings for preferred appearance (dark or light).","i":2,"n":0.141},{"v":"Editable with automatic theme\nHere you see an instance of the Code Editor component which allows editing the\npresented code.\nThis instance has an `auto` `colorScheme`, which means it reacts\nto the operating system's settings for preferred appearance (dark or light).","i":1,"n":0.164}],"4":[{"v":"value","i":6,"n":1},{"v":"readonly","i":5,"n":1},{"v":"lint","i":4,"n":1},{"v":"lineNumbers","i":3,"n":1},{"v":"language","i":2,"n":1},{"v":"fold","i":1,"n":1},{"v":"colorScheme","i":0,"n":1}],"5":[{"v":"The code to be rendered","i":6,"n":0.447},{"v":"Disables editing of the editor content","i":5,"n":0.408},{"v":"Enables linting of JSON content","i":4,"n":0.447},{"v":"Displays line numbers in the editor","i":3,"n":0.408},{"v":"The language of the code","i":2,"n":0.447},{"v":"Allows the user to fold code","i":1,"n":0.408},{"v":"Select color scheme for the editor","i":0,"n":0.408}],"6":[],"7":[{"v":"string","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"\"javascript\" | \"jinja2\" | \"json\" | \"typescript\"","i":2,"n":0.378},{"v":"boolean","i":1,"n":1},{"v":"\"auto\" | \"dark\" | \"light\"","i":0,"n":0.447}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the code has changed. Will only be emitted when the code\narea has lost focus","i":0,"n":0.25}],"10":[],"11":[{"v":"string","i":0,"n":1}]}},{"i":16,"$":{"0":[{"v":"exampleComponent limel-example-collapsible-section-css-props","i":9,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-icon","i":8,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-invalid","i":7,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-with-slider","i":6,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-external-control","i":5,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-with-custom-header-component","i":4,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-actions","i":3,"n":0.707},{"v":"exampleComponent limel-example-collapsible-section-basic","i":2,"n":0.707},{"v":"slot header - Optional slot for custom header content","i":1,"n":0.333},{"v":"slot - Content to put inside the collapsible section","i":0,"n":0.333}],"1":{"v":"Collapsible section","n":0.707},"2":{"v":"/component/limel-collapsible-section/","n":1},"3":[{"v":"Using the CSS properties","i":8,"n":0.5},{"v":"Icon","i":7,"n":1},{"v":"Using the `invalid` prop\nWhen a section's `invalid` prop is set to `true`, it can display a visual feedback,\nas well as an accessible indication to the assistive technologies,\nto indicate that the content inside the section is invalid.","i":6,"n":0.167},{"v":"With a limel-slider - for testing\n:::note\nSome elements need to be redrawn if they were created\nwhile their container was hidden. The collapsible\nsection will emit a resize event after opening, to make this happen.\n:::","i":5,"n":0.177},{"v":"Opening and closing programmatically","i":4,"n":0.5},{"v":"With custom component in the header\nBy using the `slot=\"header\"` attribute on a custom UI elements, you can place it\nin the header area of the collapsible section alongside the default header text\nand header actions.\nThis can enable richer header content, like status indicators, badges, or icons.\n\n:::important\n1. The custom component is responsible for its own size, and should not\nvisually grow out of the header area.\n1. If the is not interactive, we recommend styling it with `pointer-events: none;`,\nto avoid blocking the user from interacting with the header. This is because\nthe entire surface of the header should be clickable to toggle visibility of the section.\n:::","i":3,"n":0.1},{"v":"Header actions\nAn array of actions can be given to the component.\nThe actions will be rendered as icon buttons inside the Header.\nThey can allow for additional functionality like edit, delete, etc.\n\n:::important\nThe actions should be about the entire section or group of content,\nand affect it as a whole. This is due to how they are displayed along\nwith the header of the group.\n:::","i":2,"n":0.129},{"v":"Basic example\nAnything that is nested inside the `limel-collapsible-section` component\nwill be shown in the body of the section, only visible when the section is expanded.","i":1,"n":0.204},{"v":"A collapsible section can be used to group related content together\nand hide the group when not needed.\nUsing this component can help to:\n- Save vertical space by hiding non-essential content\n- Improve content organization and scannability of the user interface\n- Reduce cognitive load by displaying only a set of relevant information at a time\n- Or disclose complex information, progressively to the user","i":0,"n":0.129}],"4":[{"v":"language","i":5,"n":1},{"v":"isOpen","i":4,"n":1},{"v":"invalid","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"header","i":1,"n":1},{"v":"actions","i":0,"n":1}],"5":[{"v":"Defines the language for translations.\nWill translate the translatable strings on the components.","i":5,"n":0.289},{"v":"`true` if the section is expanded, `false` if collapsed.","i":4,"n":0.333},{"v":"`true` if the section is invalid, `false` if valid.\nThis can be used to indicate that the content inside the section is invalid.","i":3,"n":0.213},{"v":"Icon to display in the header of the section","i":2,"n":0.333},{"v":"Text to display in the header of the section","i":1,"n":0.333},{"v":"Actions to place to the far right inside the header","i":0,"n":0.316}],"6":[],"7":[{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":5,"n":0.243},{"v":"boolean","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"Icon | string","i":2,"n":0.577},{"v":"string","i":1,"n":1},{"v":"Action[]","i":0,"n":1}],"8":[{"v":"open","i":2,"n":1},{"v":"close","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Emitted when the section is expanded","i":2,"n":0.408},{"v":"Emitted when the section is collapsed","i":1,"n":0.408},{"v":"Emitted when an action is clicked inside the header","i":0,"n":0.333}],"10":[],"11":[{"v":"void","i":2,"n":1},{"v":"void","i":1,"n":1},{"v":"Action","i":0,"n":1}]}},{"i":17,"$":{"0":[{"v":"exampleComponent limel-example-color-picker-readonly","i":1,"n":0.707},{"v":"exampleComponent limel-example-color-picker","i":0,"n":0.707}],"1":{"v":"Color picker","n":0.707},"2":{"v":"/component/limel-color-picker/","n":1},"3":[{"v":"Using the component in `readonly` mode\nIt is possible to use the component to visualize a color of your choice.\nIn this case, users cannot pick any colors, but they can view what you have picked.","i":2,"n":0.171},{"v":"This component enables you to select a swatch from out color palette, simply\nby clicking on it. You can then copy the css variable name of the chosen color\nand use it where desired.\n\nThe color picker can also show you a preview of any valid color name or color value.\n\n:::note\nMake sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n:::","i":0,"n":0.129}],"4":[{"v":"value","i":5,"n":1},{"v":"tooltipLabel","i":4,"n":1},{"v":"required","i":3,"n":1},{"v":"readonly","i":2,"n":1},{"v":"label","i":1,"n":1},{"v":"helperText","i":0,"n":1}],"5":[{"v":"Name or code of the chosen color","i":5,"n":0.378},{"v":"Displayed as tooltips when picker is hovered.","i":4,"n":0.378},{"v":"Set to `true` if a value is required","i":3,"n":0.354},{"v":"Set to `true` if a value is readonly. This makes the component un-interactive.","i":2,"n":0.277},{"v":"The label of the input field","i":1,"n":0.408},{"v":"Helper text of the input field","i":0,"n":0.408}],"6":[],"7":[{"v":"string","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emits chosen value to the parent component","i":0,"n":0.378}],"10":[],"11":[{"v":"string","i":0,"n":1}]}},{"i":18,"$":{"0":[{"v":"exampleComponent limel-example-date-picker-custom-formatter","i":10,"n":0.707},{"v":"exampleComponent limel-example-date-picker-composite","i":9,"n":0.707},{"v":"exampleComponent limel-example-date-picker-programmatic-change","i":8,"n":0.707},{"v":"exampleComponent limel-example-date-picker-formatted","i":7,"n":0.707},{"v":"exampleComponent limel-example-date-picker-year","i":6,"n":0.707},{"v":"exampleComponent limel-example-date-picker-quarter","i":5,"n":0.707},{"v":"exampleComponent limel-example-date-picker-month","i":4,"n":0.707},{"v":"exampleComponent limel-example-date-picker-week","i":3,"n":0.707},{"v":"exampleComponent limel-example-date-picker-time","i":2,"n":0.707},{"v":"exampleComponent limel-example-date-picker-date","i":1,"n":0.707},{"v":"exampleComponent limel-example-date-picker-datetime","i":0,"n":0.707}],"1":{"v":"Date picker","n":0.707},"2":{"v":"/component/limel-date-picker/","n":1},"3":[{"v":"Custom date formatter\n\nYou can provide a function to customize the date formatting.","i":11,"n":0.289},{"v":"Composite\n\nA place to try different combinations of states.","i":10,"n":0.354},{"v":"Changing the input programmatically","i":9,"n":0.5},{"v":"With defined localization","i":8,"n":0.577},{"v":"year","i":7,"n":1},{"v":"quarter","i":6,"n":1},{"v":"month","i":5,"n":1},{"v":"week","i":4,"n":1},{"v":"time","i":3,"n":1},{"v":"date","i":2,"n":1},{"v":"datetime","i":1,"n":1}],"4":[{"v":"value","i":11,"n":1},{"v":"type","i":10,"n":1},{"v":"required","i":9,"n":1},{"v":"readonly","i":8,"n":1},{"v":"placeholder","i":7,"n":1},{"v":"language","i":6,"n":1},{"v":"label","i":5,"n":1},{"v":"invalid","i":4,"n":1},{"v":"helperText","i":3,"n":1},{"v":"formatter","i":2,"n":1},{"v":"format","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The value of the field.","i":11,"n":0.447},{"v":"Type of date picker.","i":10,"n":0.5},{"v":"Set to `true` to indicate that the field is required.","i":9,"n":0.316},{"v":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","i":8,"n":0.18},{"v":"The placeholder text shown inside the input field, when the field is focused and empty","i":7,"n":0.258},{"v":"Defines the localisation for translations and date formatting.\nProperty `format` customizes the localized date format.","i":6,"n":0.267},{"v":"Text to display next to the date picker","i":5,"n":0.354},{"v":"Set to `true` to indicate that the current value of the date picker is\ninvalid.","i":4,"n":0.267},{"v":"Optional helper text to display below the input field when it has focus","i":3,"n":0.277},{"v":"Custom formatting function. Will be used for date formatting.\n\n:::note\noverrides `format` and `language`\n:::","i":2,"n":0.289},{"v":"Format to display the selected date in.","i":1,"n":0.378},{"v":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","i":0,"n":0.167}],"6":[],"7":[{"v":"Date","i":11,"n":1},{"v":"\"date\" | \"datetime\" | \"month\" | \"quarter\" | \"time\" | \"week\" | \"year\"","i":10,"n":0.277},{"v":"boolean","i":9,"n":1},{"v":"boolean","i":8,"n":1},{"v":"string","i":7,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":6,"n":0.243},{"v":"string","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"(date: Date) => string","i":2,"n":0.5},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the date picker value is changed.","i":0,"n":0.354}],"10":[],"11":[{"v":"Date","i":0,"n":1}]}},{"i":19,"$":{"0":[{"v":"slot button - The dialog buttons","i":11,"n":0.408},{"v":"slot header-actions - The dialog header buttons","i":10,"n":0.378},{"v":"slot - Content to put inside the dialog","i":9,"n":0.354},{"v":"exampleComponent limel-example-dialog-action-buttons","i":8,"n":0.707},{"v":"exampleComponent limel-example-dialog-closing-actions","i":7,"n":0.707},{"v":"exampleComponent limel-example-dialog-fullscreen","i":6,"n":0.707},{"v":"exampleComponent limel-example-dialog-size","i":5,"n":0.707},{"v":"exampleComponent limel-example-dialog-form","i":4,"n":0.707},{"v":"exampleComponent limel-example-dialog-heading-actions","i":3,"n":0.707},{"v":"exampleComponent limel-example-dialog-heading","i":2,"n":0.707},{"v":"exampleComponent limel-example-dialog-nested-close-events","i":1,"n":0.707},{"v":"exampleComponent limel-example-dialog","i":0,"n":0.707}],"1":{"v":"Dialog","n":1},"2":{"v":"/component/limel-dialog/","n":1},"3":[{"v":"Example with three action buttons\n\nThis example shows how more than two buttons can be positioned in a dialog's\nfooter. Pay attention to how they are labeled & styled, and how you can\nenable important actions conditionally.\n\n:::note\nWhen it comes to details such as placement of action buttons, choice of\nlabels, and adding meaningful graphical details, it's important to follow\na few design conventions which are explained in\n[this guide](#/DesignGuidelines/action-buttons.md/).","i":9,"n":0.126},{"v":"Custom closing actions\n\nAction buttons in dialogs can be used to add a clear visual indication for\nthe sighted users to realize that the dialog can be closed by pressing\na button as well.\nThis may sometimes be considered an unnecessary usage of action buttons for\nsighted users. Because majority of them users know that clicking or tapping\noutside the dialog closes it.\n\nSuch buttons are usually labeled ***OK***, ***Dismiss*** or ***Close***.\n\n:::tip\nWhen to use action buttons for simple \"close\" actions?\n- In fullscreen dialogs where clicking outside to close is hard.\n- When big dialogs are opened on phones, which make tapping outside hard for users.\n- When designing with accessibility in mind, and for those users who\nuse screen readers to navigate the user interface.\n:::\n\nBut sometimes, depending on the importance of the message which is displayed,\nyou have to choose to display a close button, and disable other means of\ndismissing the dialog.\n\n:::tip\nWhen to use custom closing actions?\n- To make sure that the user really reads and understands the dialog's content.\n- To make sure that the user does not accidentally click outside and close the dialog.\n:::\n\nFor such cases, avoid generic labels like ***OK***, or ***Close*** which unconsciously\nmotivate users to dismiss the message; and instead use more purposeful labels\nsuch as ***I understand***, ***Looks good!***, ***Continue***, and similar;\nlike in the example below.","i":8,"n":0.069},{"v":"Fullscreen","i":7,"n":1},{"v":"Custom size","i":6,"n":0.707},{"v":"Dialog with form and confirmation dialog\n\nThis example demonstrates how to use a `limel-form` inside a `limel-dialog`.\nIt also shows a confirmation dialog when the user closes the main dialog\nwithout saving.","i":5,"n":0.186},{"v":"Dialog with action inside the heading\n\nIn this example you can also see how available style properties can be used.","i":4,"n":0.229},{"v":"Dialog with heading\n\nIn this example you can also see how available style properties can be used.","i":3,"n":0.25},{"v":"Nested `close` events\n\nWhen putting other elements that emit `close` events inside a dialog, those\nevents must be caught and stopped inside the dialog. If not, they will bubble\nto the event handler listening for `close` events on the dialog, which will\nclose the dialog too.\n\nThis example has an event handler for the `close` event on the dialog, and\na second event handler for the `close` event on the collapsible-section.\n\nTry it out with the _Stop the inner close-event_ switch disabled, and then\nwith the switch enabled, to see the difference.","i":2,"n":0.109},{"v":":::note\nRegarding the `close` event: When putting other elements that emit `close`\nevents inside a dialog, those events must be caught and stopped inside the\ndialog. If not, they will bubble to the event handler listening for `close`\nevents on the dialog, which will close the dialog too.\n\nSee the example _Nested `close` events_.\n:::\n\n:::important\nAre you developing for\n[Lime CRM](https://www.lime-technologies.com/en/lime-crm/)? Please note that\nyou should use the [DialogRenderer](https://lundalogik.github.io/lime-web-components/versions/latest/interfaces/DialogRenderer.html)\nfrom Lime Web Components to open dialogs in Lime CRM.\n:::","i":0,"n":0.12}],"4":[{"v":"open","i":3,"n":1},{"v":"heading","i":2,"n":1},{"v":"fullscreen","i":1,"n":1},{"v":"closingActions","i":0,"n":1}],"5":[{"v":"`true` if the dialog is open, `false` otherwise.","i":3,"n":0.354},{"v":"The heading for the dialog, if any.","i":2,"n":0.378},{"v":"Set to `true` to make the dialog \"fullscreen\".","i":1,"n":0.354},{"v":"Defines which action triggers a close-event.","i":0,"n":0.408}],"6":[],"7":[{"v":"boolean","i":3,"n":1},{"v":"DialogHeading | string","i":2,"n":0.577},{"v":"boolean","i":1,"n":1},{"v":"ClosingActions","i":0,"n":1}],"8":[{"v":"closing","i":1,"n":1},{"v":"close","i":0,"n":1}],"9":[{"v":"Emitted when the dialog is in the process of being closed.","i":1,"n":0.302},{"v":"Emitted when the dialog is closed from inside the component.\n(*Not* emitted when the consumer sets the `open`-property to `false`.)","i":0,"n":0.229}],"10":[],"11":[{"v":"void","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":20,"$":{"0":[{"v":"exampleComponent limel-example-dock-colors-css","i":5,"n":0.707},{"v":"exampleComponent limel-example-dock-expanded","i":4,"n":0.707},{"v":"exampleComponent limel-example-dock-mobile","i":3,"n":0.707},{"v":"exampleComponent limel-example-dock-notification","i":2,"n":0.707},{"v":"exampleComponent limel-example-dock-custom-component","i":1,"n":0.707},{"v":"exampleComponent limel-example-dock-basic","i":0,"n":0.707}],"1":{"v":"Dock","n":1},"2":{"v":"/component/limel-dock/","n":1},"3":[{"v":"Using CSS color variables for theming the Dock\n\nA few CSS variables can be used to customize the look and feel of the steps.\n\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual Dock items!\n:::\n:::important\nMake sure that:\n- text has enough contrast with its background and is readable.\n:::","i":6,"n":0.139},{"v":"Basic Example expanded","i":5,"n":0.577},{"v":"Setting a horizontal layout for mobile devices.\n\nBy default, the component has a vertical layout, placing the\nDock items in a column. However, the component will render the\nDock items in a horizontal layout when the screen width is smaller\nthan `700px`.\n\nIf you prefer the component to switch to the horizontal mobile layout\nat another breakpoint, use the `mobileBreakPoint` property and give it\na desired value in pixels (without `px`).\n\nIn this example, we have chosen a very large number (`5000`) to force\nthe component to be rendered in mobile layout here in the documentation,\nno matter how large the reader's screen size is.\n\n:::important\nTriggering the mobile layout does not automatically adjust the position\nof the component at the bottom of the screen. You should do that manually\nyourself in a proper way, depending on where the component is used;\nfor example by using CSS media queries, and setting `position: fixed`.\n:::\n\n:::note\nLabels are not displayed in horizontal layout, but they will be instead\ndisplayed as tooltips.\n:::","i":4,"n":0.081},{"v":"Displaying a notification badge\n\nIt is possible to display a notification badge on each individual\nbutton in the Dock. Badges are supposed to inform the user that\nthere is something in the menu that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\n\n:::important\nThe menus are not a part of the Dock. They are individual components\nthat you develop separately. Make sure that the information\nand interactions regarding the notifications are correctly handled.\n\nFor example, when the items that require user's attention are\nseen or handled by the user after opening the menu, the badge on the\nDock button should disappear.\n:::\n\nWhen this quantity is unclear or undefined, you can simply pass an\nempty string (`badge: ''`), which will only render a circle on the button.\nThis is enough to attract user's attention.\nHowever, it is also possible to use a short string such as \"·\" or \"!\"\nfor such cases, if considered necessary.\n\n:::warning\nDo not negatively exploit this possibility and spam users' awareness.\nThe Dock is the most important and most dominant structural part of\nthe UI of your application. Therefore crowding it with too much noise\n_will_ negatively affect the user experience.\n:::","i":3,"n":0.073},{"v":"Displaying a custom component after Dock item is clicked\n\nIt is possible to display a custom component in a popover,\nwhen the Dock item is clicked. This enables you to design\nthe content of the menu as you wish, independently from the Dock.\n\n:::note\nPay attention to the `--popover-surface-width` variable in the\n`.SCSS` file. That defines the width the popover component, which is `auto`\nby default. But modifying it may be helpful depending on the usage.\n:::","i":2,"n":0.12},{"v":"Basic Example\n\nThe Dock component can be used as a place for displaying the app's\nprimary navigation.\n\n:::important\nAvoid having too many items in the Dock, because it will become\nproblematic on mobile devices, when the component is rendered horizontally.\n:::\n\nIt is possible to split the dock items into two sections and place one or\nmore items at the bottom of the column. To do so, you can use `isFooterStart`\non one of the items, which will act as a separator between the two sections,\npushing itself and preceding to the bottom.\n\n:::important\nYou must provide `label`s for to improve accesibility! Without labels,\nscreen-readers cannot tell visually impared persons about the content\nof the Dock.\n:::\n\nIt is possible to add extra information about the items using `helperLabel`.\n\nWhen the component is expanded, only the `helpeLabel` is used\nin the tooltip, when items are hovered.\nWhen the component is shrunk, both `label` and `helperLabel` are displayed\ninside the tooltip.\n\nKeep in mind that on a mobile phone, the component will be displayed horizontally\nand no labels are displayed! Instead, both `label` and `helperLabel` will be used\nas a tooltip to improve accessibility for screen-reader technologies.\n\nHowever, since hovering is not possible on touch-only mobile devices, users who\nrely on their vision to navigate the app will only see your chosen icons.\nSo pick them carefully.","i":1,"n":0.071}],"4":[{"v":"mobileBreakPoint","i":5,"n":1},{"v":"expanded","i":4,"n":1},{"v":"dockItems","i":3,"n":1},{"v":"dockFooterItems","i":2,"n":1},{"v":"allowResize","i":1,"n":1},{"v":"accessibleLabel","i":0,"n":1}],"5":[{"v":"Defines the breakpoint in pixles, at which the component will be rendered\nin a hoizontal layout. Default breakpoint is `700` pixels, which means\nwhen the screen size is smaller than `700px`, the component will automatically\nswitch to a horizontal layout.","i":5,"n":0.164},{"v":"Defines the width of the component, when it loads.\n- `true`: shows both icons and labels of the Dock items.\n- `false`: only shows icons of the doc items, and displays\ntheir labels as tooltip.\n\nNote: when `useMobileLayout` is `true`, labels will always\nbe shown as tooltips. Read more below…","i":4,"n":0.149},{"v":"Items that are placed in the dock.","i":3,"n":0.378},{"v":"Items that are placed at the bottom of the dock. (Or at the end in mobile\nlayout.)","i":2,"n":0.25},{"v":"Set to `false` if you do not want to allow end-users\nto exapnd or shrink the Dock. This will hide the\nexpand/shrink button, and the only things that defines\nthe layout will be the `expanded` property, and\nthe `mobileBreakPoint`.","i":1,"n":0.169},{"v":"A label used to describe the purpose of the navigation element to users\nof assistive technologies, like screen readers. Especially useful when\nthere are multiple navigation elements in the user interface.\nExample value: \"Primary navigation\"","i":0,"n":0.177}],"6":[],"7":[{"v":"number","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"DockItem[]","i":3,"n":1},{"v":"DockItem[]","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"menuOpen","i":3,"n":1},{"v":"itemSelected","i":2,"n":1},{"v":"dockExpanded","i":1,"n":1},{"v":"close","i":0,"n":1}],"9":[{"v":"Fired when a dock menu is opened.","i":3,"n":0.378},{"v":"Fired when a dock item has been selected from the dock.","i":2,"n":0.302},{"v":"Fired when a Dock is expanded or collapsed.","i":1,"n":0.354},{"v":"Fired when the popover is closed.","i":0,"n":0.408}],"10":[],"11":[{"v":"DockItem","i":3,"n":1},{"v":"DockItem","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":21,"$":{"0":[{"v":"beta ","i":2,"n":1},{"v":"exampleComponent limel-example-dynamic-label-readonly-boolean","i":1,"n":0.707},{"v":"exampleComponent limel-example-dynamic-label","i":0,"n":0.707}],"1":{"v":"Dynamic label","n":0.707},"2":{"v":"/component/limel-dynamic-label/","n":1},"3":[{"v":"Readonly boolean\nThe `readonly` mode of a boolean fields do not always\nclearly communicate the meaning of the data to the end users. Similar problems\nhave existed in user interfaces forever, and it not solely limited to\nreadonly-ness of a boolean field. If you are interested in reading more\nabout these common design problems, you can check out\n[**State-Switch Controls:** The Infamous Case of the \"Mute\" Button](https://www.nngroup.com/articles/state-switch-buttons/)\n\nIn short, the reason end-users become confused is that it is not enough to\nkeep the same label for both `true` and `false` states,\nand only rely on changing the color or the\nshapes and visual motifs, to communicate what the field means.\n\nInstead, we need to use different labels to describe the state,\nand also get some additional help from icons and colors\nto clarify further if needed.\n\n:::important\nThis example shows how to setup the `limel-dynamic-label` component to\ncreate a more descriptive and dynamic labels for boolean fields.\nBut please make sure to read our guidelines about\n[Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/)\nto understand the importance of this, and get help in choosing the right labels\nfor boolean fields.\n:::","i":2,"n":0.078},{"v":"Basic example\n\nSwitching the value to `true` or `false` will dynamically change the label,\nwhile the default label (including its icon) is ignored.","i":1,"n":0.218},{"v":"This components displays a different label depending on the current given\nvalue. A label can consist of a text and an optional icon. If no matching\nlabel is found among the given `labels`, the `defaultLabel` will be displayed.\n\nOne use case of the component is to enhance the visualization of a `boolean`\nfield like a checkbox or switch in a `readonly` state.\n\nThe reason we offer this component is that the default styling\nof the Checkbox or Toggle switch in the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.","i":0,"n":0.103}],"4":[{"v":"value","i":2,"n":1},{"v":"labels","i":1,"n":1},{"v":"defaultLabel","i":0,"n":1}],"5":[{"v":"The current value of the component which is used to match with the given\n`labels` to determine what label to display.\n\nIf not matching label is found, the `defaultLabel` is displayed.","i":2,"n":0.186},{"v":"A list of available labels. Each label has a corresponding value that\nwill be matched with the current `value` of the component to determine\nwhat label to display.","i":1,"n":0.196},{"v":"The label to display when no matching value is found in the `labels`\narray. This is a fallback label that ensures there's always a label\ndisplayed for the component.","i":0,"n":0.192}],"6":[],"7":[{"v":"boolean | number | string","i":2,"n":0.447},{"v":"Label<LabelValue>[]","i":1,"n":1},{"v":"{ text?: string; icon?: string | Icon; }","i":0,"n":0.354}],"8":[],"9":[],"10":[],"11":[]}},{"i":22,"$":{"0":[{"v":"exampleComponent limel-example-file-composite","i":4,"n":0.707},{"v":"exampleComponent limel-example-file-accepted-types","i":3,"n":0.707},{"v":"exampleComponent limel-example-file-menu-items","i":2,"n":0.707},{"v":"exampleComponent limel-example-file-custom-icon","i":1,"n":0.707},{"v":"exampleComponent limel-example-file","i":0,"n":0.707}],"1":{"v":"File","n":1},"2":{"v":"/component/limel-file/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":5,"n":0.354},{"v":"Limit accepted file types","i":4,"n":0.5},{"v":"Custom menu items\n\nBy providing custom menu items, you can add additional actions.","i":3,"n":0.289},{"v":"Custom icon and color\nThis component automatically visualizes the file type, based on the extension\nof the selected file. The visualization is done by displaying a colorful icon\nalong with the filename, for the most common file types.\n\nHowever, you can also customize the icon and its fill color & background color.","i":2,"n":0.144},{"v":"Basic example","i":1,"n":0.707},{"v":"This component lets end-users select a *single* file from their device\nstorage. Regardless of the user's device or operating system, this component\nopens up a file picker dialog that allows the user to choose a file.\n\n## Using correct labels\n\nThis file picker can be used in different contexts. The component's distinct\nvisual design including the upload icon hints end-users that this is not a\nnormal input field like other fields in the form for example.\n\n:::important\nyou need to use a descriptive `label` that clarifies the\nfunctionality of the file picker, and/or provides users with clear\ninstructions.\n\nDepending on the context, you may need to avoid labels such as:\n- File\n- Document\n\nand instead consider using labels like:\n- Attach a file\n- Upload a file\n- Choose a document\n- Choose a file\n\nand similar phrases...\n:::","i":0,"n":0.091}],"4":[{"v":"value","i":7,"n":1},{"v":"required","i":6,"n":1},{"v":"readonly","i":5,"n":1},{"v":"language","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"invalid","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"accept","i":0,"n":1}],"5":[{"v":"The selected file.","i":7,"n":0.577},{"v":"Set to `true` to indicate that the field is required.","i":6,"n":0.316},{"v":"Set to `true` to disable adding and removing files, but allow interaction\nwith any already existing file.","i":5,"n":0.25},{"v":"Defines the localisation for translations.","i":4,"n":0.447},{"v":"The input label.","i":3,"n":0.577},{"v":"Set to `true` to indicate that the current value of the chosen file is\ninvalid.","i":2,"n":0.267},{"v":"True if the input should be disabled","i":1,"n":0.378},{"v":"The [accepted file types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers)","i":0,"n":0.5}],"6":[],"7":[{"v":"FileInfo","i":7,"n":1},{"v":"boolean","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":4,"n":0.243},{"v":"string","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"interact","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Dispatched when clicking on a chip","i":1,"n":0.408},{"v":"Dispatched when a file is selected/deselected","i":0,"n":0.408}],"10":[],"11":[{"v":"number | string","i":1,"n":0.577},{"v":"FileInfo","i":0,"n":1}]}},{"i":23,"$":{"0":[{"v":"beta ","i":6,"n":1},{"v":"exampleComponent limel-example-file-viewer-with-picker","i":5,"n":0.707},{"v":"exampleComponent limel-example-file-viewer-custom-actions","i":4,"n":0.707},{"v":"exampleComponent limel-example-file-viewer-inbuilt-actions","i":3,"n":0.707},{"v":"exampleComponent limel-example-file-viewer-filename","i":2,"n":0.707},{"v":"exampleComponent limel-example-file-viewer-office","i":1,"n":0.707},{"v":"exampleComponent limel-example-file-viewer-basic","i":0,"n":0.707}],"1":{"v":"File viewer","n":0.707},"2":{"v":"/component/limel-file-viewer/","n":1},"3":[{"v":"See an instant preview\nSelect a file from your local machine using the file picker below,\nand `limel-file-viewer` component will display the file, if the format\nis supported.","i":6,"n":0.2},{"v":"Adding custom actions","i":5,"n":0.577},{"v":"Using inbuilt actions\n\nThe component offers a few inbuilt actions that enable users\nto download the file, open it in a new tab, or view it in fullscreen mode.\n\n:::note\nThese action buttons do not get rendered for the office files,\nbecause the 3rd-party office viewers already offer the same features\nin their UI.\n:::\n\n:::important\nThe download button will not work here in this example,\ndue to the security policies of the web browsers.\nThis is because the example files are not hosted in the same domain.\n:::","i":4,"n":0.114},{"v":"Using the `filename` prop\nThe component looks at the URL of the provided file, and based on how the\nURL ends, it can detect the extension and consequently choose the right way\nof rendering it in the browser.\n\nHowever, sometimes the URLs do not have the filename in them. In this case,\nit is vital to specify the filename, for the component to be able to render it.\n\n:::important\nMake sure the provided filename contains the correct extension!\n:::\n\n:::tip\nThe filename that is specified will also be the filename that is used when the\nfile is downloaded by clicking the download button on the File Viewer.\n:::","i":3,"n":0.102},{"v":"Office files\n\nThere are many different software programs that can be used to create\noffice files such as word processing documents, spreadsheets, and presentations.\nWeb browsers do not natively support these formats for direct display.\n\nHowever, using the file-viewer component, you can easily display the content\nof office file types. The viewer relies on a few third-party technologies\nto render the file.\n\nBy default, the component uses Microsoft Office Viewer, since it supports\na wider range of file office formats. However, you can\nchoose other viewers which are supported by this component.\n\n:::important\n1. The file should be stored somewhere with a publicly accessible URL,\notherwise the viewer cannot render them.\n1. Once the file is viewed, it might get cached for a short while on the\n3rd party servers –therefor remain publicly visible–,\neven if the original file deleted.\n1. Files that are too large may not be rendered at all.\n:::","i":2,"n":0.086},{"v":"Most common file types\n\nThese are file formats that any web browser can display,\nwithout relying on any third-party plugins or additional\nplugins or extensions.","i":1,"n":0.213},{"v":"This is a smart component that automatically detects\nthe most common file types such as image, audio, video, and text,\nand properly displays them in the browser.\nThe component is also capable to render the most common office files.\n\n:::note\nImage files will always be contained in their containers, which means\nthey automatically increase or decrease in size to fill their containing box\nwhilst preserving their aspect-ratio.\n\nText and PDF files will also always respect the width and height of the\ncontainer in which the `limel-file-viewer` is loaded.\n:::\n\nFor some file types such as text and images, the component will display a\ndownload button and a button to open the file in a new browser tab.\nThis will allow users to preview the file in a fullscreen mode with the\nbrowser and take advantage of for example native zooming and panning\nfunctionalities.","i":0,"n":0.088}],"4":[{"v":"url","i":8,"n":1},{"v":"officeViewer","i":7,"n":1},{"v":"language","i":6,"n":1},{"v":"filename","i":5,"n":1},{"v":"alt","i":4,"n":1},{"v":"allowOpenInNewTab","i":3,"n":1},{"v":"allowFullscreen","i":2,"n":1},{"v":"allowDownload","i":1,"n":1},{"v":"actions","i":0,"n":1}],"5":[{"v":"Link to the file","i":8,"n":0.5},{"v":"Defines the third-party viewer that should be used to render\nthe content of office files, such as word processing documents,\npresentations, or spreadsheets.","i":7,"n":0.218},{"v":"Defines the localization for translations.","i":6,"n":0.447},{"v":"The name of the file that must also contains its extension.\nThis overrides the filename that the `url` ends with.\nUseful when the `url` does not contain the filename.\nWhen specified, the `filename` will be used as filename of\nthe downloaded file.","i":5,"n":0.162},{"v":"An optional alternative text, mainly for assistive technologies and screen readers.\nIt is used for only image files, as an `alt` attribute.\nShould optimally hold a description of the image,\nwhich is also displayed on the page if the image can't be loaded for some reason.","i":4,"n":0.152},{"v":"Displays a button that allows the user to open the file\nin a new browser tab.\nNot displayed for office files!","i":3,"n":0.229},{"v":"Displays a button that allows the user to view the file\nin fullscreen mode.\nNot displayed for office files!","i":2,"n":0.243},{"v":"Displays a button that allows the user to download the file.\nNote that due to the browser's security policies,\nthe file should be hosted on the same domain\nfor the download button to work properly.\nNot displayed for office files!","i":1,"n":0.167},{"v":"An array of custom actions that can be displayed\nas an action menu on the file which is being displayed.","i":0,"n":0.229}],"6":[],"7":[{"v":"string","i":8,"n":1},{"v":"\"google-drive\" | \"microsoft-office\"","i":7,"n":0.577},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":6,"n":0.243},{"v":"string","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"ListItem<any>[]","i":0,"n":1}],"8":[{"v":"action","i":0,"n":1}],"9":[{"v":"Emitted when a custom action is selected from the action menu.","i":0,"n":0.302}],"10":[],"11":[{"v":"ListItem<any>","i":0,"n":1}]}},{"i":24,"$":{"0":[{"v":"exampleComponent limel-example-form-row-layout","i":11,"n":0.707},{"v":"exampleComponent limel-example-form-with-help","i":10,"n":0.707},{"v":"exampleComponent limel-example-server-errors","i":9,"n":0.707},{"v":"exampleComponent limel-example-custom-error-message","i":8,"n":0.707},{"v":"exampleComponent limel-example-form-span-fields","i":7,"n":0.707},{"v":"exampleComponent limel-example-form-layout","i":6,"n":0.707},{"v":"exampleComponent limel-example-props-factory-form","i":5,"n":0.707},{"v":"exampleComponent limel-example-custom-component-form","i":4,"n":0.707},{"v":"exampleComponent limel-example-dynamic-form","i":3,"n":0.707},{"v":"exampleComponent limel-example-list-form","i":2,"n":0.707},{"v":"exampleComponent limel-example-nested-form","i":1,"n":0.707},{"v":"exampleComponent limel-example-form","i":0,"n":0.707}],"1":{"v":"Form","n":1},"2":{"v":"/component/limel-form/","n":1},"3":[{"v":"Row layout","i":12,"n":0.707},{"v":"Form fields with help\nIt's possible to add extensive help to any form element.\nThe string you provide can be in Markdown format,\nempowering you to present a rich-text experience to the user,\nincluding bullet points, hyperlinks, etc…\nRead more on [Help](#/component/limel-help) component.\n\n:::note\nDo not confuse `help` and `helperText`!\nThe helper text is a short description for the input fields\nthat becomes visible when the user click on the fields to provide\nbrief clues about the field or its expected value.\n\nIt can also be used to display validation errors.\nThese errors will be displayed in red below the fields, without\nrequiring the users to click on the field.\n\nCheck out the [Input field Component](#/component/limel-input-field)\nexamples, where we describe how to properly use `helperText`, and `placeholder`.\n:::\n\n:::tip\nWhen rendering a form using a schema, the `helperText`s are automatically\npassed for all the fields based on the schema and validation errors.\nThe `description` specified for a field in the schema is used as\nhelper text while the field is shown as valid.\nWhen there is validation feedback to provide to the user,\nthe field is instead marked as invalid with an error message that is displayed\nin the place of the helper text.\n:::","i":11,"n":0.075},{"v":"Form with server validation","i":10,"n":0.5},{"v":"Form with custom error message","i":9,"n":0.447},{"v":"Stretching fields in a form\n\nSometimes, you need a field in the form to occupy several columns or the\nentire row, and stretch itself as wide as the form's width,\ndisregarding the form's layout and placement of the item in the list.\n\nThis could be nice for fields that require more space to provide better\nusability.\n\n:::tip\nFor example, a larger `textarea` is easier for the user to type in and\na `slider` that has many steps is easier to interact with when it is rendered wider.\n:::\n\nTo do so, in your schema you need to specify a `layout` for the field itself.\n`span` specifies the number of columns that the field should span.\n\nThus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\nSince we do not offer a *form layout* that has more than five columns,\nvalues higher than 5 (or higher than the maximum number of columns in the form)\nwill only force the field to be full-width, just like `all` does.\n\n```ts\nexport const schema = {\n    …\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                layout: {\n                      colSpan: 'all',\n                  },\n              },\n        },\n        …\n    },\n    …\n};\n```\n\n###### Dense layout (Auto reorder fields to avoid empty cells)\nThe order of fields and the number of columns that a field must span, can\naffect the layout of your responsive form when the container width changes.\n\nLet's say you have a form with a 4 column layout, and you specify that its\nsecond field must span 3 columns.\nIf the container's width decreases, it will force the form to render its\nlayout in 3 columns instead. Therefore, the second field has to jump\nto the next line to still be able to span 3 columns.\nThis will leave 2 empty cells in the first row, right after the first field.\n\nTo avoid these empty cells in the UI, limel-form will place the next available\nfield in this hole, provided it fits. So the hole may be filled by a single 2 column\nwide field, by two 1 column wide fields, or only partially filled by a single 1 column\nwide field. If none of the remaining fields fit, the hole will be left as it is.\n\nHowever, you can disable this functionality by setting `dense` to `false` in the\noptions for the grid layout.\n\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            dense: false,\n        },\n    },\n};\n```\n\n:::note\nSometimes, the order of fields are important for the way users perceive the form.\nIf you choose to use the default auto-reordering behavior, make sure to test your\nform's layout in different screen sizes to see whether you can mitigate unwanted\nlayout changes.\n\nSome unwanted results can be avoided by changing the order of the fields,\nso that they render appropriately on different screens, or by dividing\nthe form into more sections.\n:::\n\n###### Stretching a field vertically\nMost standard elements that can be used in forms, such as `limel-input`,\n`limel-select`, `limel-slider`, etc, have a fixed height, and therefore\nit does not really make sense to stretch them vertically, and we strongly\nrecommend you not to!\n\nBut there are some exceptions. One of them is `limel-input-field` with\n`type='textarea'`.\n\nAlso, if you create a custom component for your form—let's say a map—you\ncan use `rowSpan` to increase the height of your custom component.\n```ts\nexport const schema = {\n    type: 'object',\n    properties: {\n        comment: {\n            type: 'string',\n            title: 'Comment',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                      colSpan: 3,\n                      rowSpan: 2,\n                },\n            },\n        },\n    },\n};\n```\n\n:::note\nIf you do *not* set the `rowSpan` for a component, it can stretch vertically\nwithin its row, and the row will simply expand with the component.\n\nIf you *do* set a `rowSpan`, even if you set it to `1`, the component is\nfixed to that height. What happens to any potential overflow depends on the\ncomponent.\n:::\n\n:::warning\nCustom web-components that you include in the forms should not have hard-coded\n`width` or `height` values! Otherwise they will stretch out of their cell and break\nthe UI. Make sure that such components are internally designed to be responsive,\nand that their `:host` and any potential wrapping container has the following styles:\n```scss\n:host {\n    display: block; // or another suitable property\n    width: 100%;\n    height: 100%;\n}\n:host([hidden]) {\n    display: none;\n}\n.my-component {\n    width: 100%;\n    height: 100%;\n}\n```\n:::","i":8,"n":0.039},{"v":"Layout\nBy default, each item in a limel-form will be rendered in a single row, and\neach row occupies the entire available width of the form's container.\n\nThis default layout may work fine on small screens or narrow containers,\nbut on larger screens it usually won't produce a nice layout. Thus we\nrecommend that you choose an appropriate responsive layout for your form.\n\n###### Enabling responsive layouts\n\nBy specifying `'grid'` as the layout `type` in your schema, as well as your desired\nnumber of `columns`, you can leave the job of responsively handling the form\nlayout to Lime Elements.\n```ts\nexport const schema = {\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 3,\n        },\n    },\n    …\n};\n```\n:::note\nValue for `columns` can only be `5`, `4`, `3`, `2`, or `1`. If you do not\nspecify a value, `limel-form` will choose `5` by default.\n:::\n\nSo if you have chosen `4` for instance, the form will do its best to fit\nfour columns in a row. But for smaller containers in which placement of four\nitems per row is not possible, the form will automatically change the layout\nand fit 3 items per row. As the container's width decreases, the number of\ncolumns will also decrease.\n\n:::tip\nYou can divide a form into sections,\nand specify a different layout for each section.\n:::\n\nIn this example, each collapsible section has its own `colSpan`.\nHowever, since the layout is responsive, make sure to change the browser\nwindow size to see how their responsive layout changes.","i":7,"n":0.066},{"v":"Using `propsFactory`","i":6,"n":0.707},{"v":"Custom form component\n\nYou can specify a custom component to use for any property in your form. This\nis done under the `lime` key in the schema, following the\n[LimeSchemaOptions](#/type/LimeSchemaOptions/) specification, for example:\n\n```ts\nconst schema = {\n    type: 'object',\n    properties: {\n        hero: {\n            type: 'integer',\n            title: 'Hero',\n            lime: {\n                component: {\n                    name: 'my-useful-hero-picker',\n                },\n            },\n        },\n    },\n};\n```\n\nWhile you can, in principle, use any component in a form, your custom form\ncomponents should implement the [FormComponent](#/type/FormComponent/)\ninterface.","i":5,"n":0.12},{"v":"Dynamic schema","i":4,"n":0.707},{"v":"List data","i":3,"n":0.707},{"v":"Nested data","i":2,"n":0.707},{"v":"Basic form with validation","i":1,"n":0.5}],"4":[{"v":"value","i":5,"n":1},{"v":"transformErrors","i":4,"n":1},{"v":"schema","i":3,"n":1},{"v":"propsFactory","i":2,"n":1},{"v":"errors","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Value of the form","i":5,"n":0.5},{"v":"Custom function to customize the default error messages","i":4,"n":0.354},{"v":"The schema used to render the form","i":3,"n":0.378},{"v":"Factory for creating properties for custom form components\n\nWhen using custom components in the form some properties might have to be\nset dynamically. If this factory is set, it will be called with the\ncurrent schema for the field for each custom component in the form. The\nfactory must return an object where each key is the name of the property\nthat should be set, along with its value.","i":2,"n":0.125},{"v":"Extra errors to display in the form. Typical use case is asynchronous\nerrors generated server side.","i":1,"n":0.258},{"v":"Set to `true` to disable the whole form.","i":0,"n":0.354}],"6":[],"7":[{"v":"object","i":5,"n":1},{"v":"(errors: FormError[]) => FormError[]","i":4,"n":0.5},{"v":"FormSchema<any>","i":3,"n":1},{"v":"(schema: FormSchema<any>) => Record<string, any>","i":2,"n":0.447},{"v":"{ [key: string]: string[] | ValidationError; }","i":1,"n":0.378},{"v":"boolean","i":0,"n":1}],"8":[{"v":"validate","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the validity of the form changes, or when\na change is made to an invalid form","i":1,"n":0.243},{"v":"Emitted when a change is made within the form","i":0,"n":0.333}],"10":[],"11":[{"v":"ValidationStatus","i":1,"n":1},{"v":"object","i":0,"n":1}]}},{"i":25,"$":{"0":[{"v":"slot - Grid content","i":1,"n":0.5},{"v":"exampleComponent limel-example-grid","i":0,"n":0.707}],"1":{"v":"Grid","n":1},"2":{"v":"/component/limel-grid/","n":1},"3":[{"v":"We use the `grid-area` property to give each component a unique name, and\nthen use this name to \"draw\" our grid layout.\n\nYou can name each component anything you want, like `salespipe`, or\n`infotile-active-support-tickets`, but keeping the names to a fixed number of\ncharacters makes the \"drawing\" of the grid look more like the actual grid.\nOne to three characters is probably a good number for most cases.\n\nAny \"name\" that doesn't match a named element will create empty cells. In our\ncase, we use a dot (`.`) to mark empty cells. Empty cells can be put anywhere\nin the grid, not just at the end.\n\nNote that we can add some extra spaces after the dot marking an empty cell,\nin order to align the next cell in our config-string. This can also be used\nif your elements have named of differing lengths. The extra whitespace is\nignored when the CSS is parsed.\n\nIf the name of an element does not appear in the grid-configuration, it will\nnot be displayed at all. This might be useful if you wish to show a specific\ncomponent only under certain circumstances, like if the viewport is large\nenough to accomodate it.","i":1,"n":0.074},{"v":"The `limel-grid` component creates a grid which can be used to control the\nlayout of other components. It uses CSS [grid-template-areas](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas)\nto enable easy configuration of its child-elements.","i":0,"n":0.196}],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[]}},{"i":26,"$":{"0":[{"v":"slot [no name] - DEPRECATED. The `actions` slot used to be unnamed. This\nbehavior has been deprecated, and support will be dropped in a future\nversion. Please add `slot=\"actions\"` to your elements to ensure your code\nwill continue to work with future versions of Lime Elements.","i":6,"n":0.152},{"v":"slot actions - Content (actions) to be put inside the far right surface of\nthe header","i":5,"n":0.258},{"v":"exampleComponent limel-example-header-narrow","i":4,"n":0.707},{"v":"exampleComponent limel-example-header-responsive","i":3,"n":0.707},{"v":"exampleComponent limel-example-header-colors","i":2,"n":0.707},{"v":"exampleComponent limel-example-header-slot-actions","i":1,"n":0.707},{"v":"exampleComponent limel-example-header","i":0,"n":0.707}],"1":{"v":"Header","n":1},"2":{"v":"/component/limel-header/","n":1},"3":[{"v":"Narrow headers\nSometimes your UI design may require having a narrower header.\nThis will be easy to achieve by sending in the class of `is-narrow`\nto your component.\n\nThis will render the header icon smaller, and reduces the font size of\nthe `heading`.\n\n:::tip\nKeep in mind that headers are programmed to grow in height, depending\non their content. So if you have large custom components in the `actions`\nslot or use both `heading` and `subheading`, they will still force the header\nto appear tall.\n:::","i":5,"n":0.115},{"v":"How Responsive layout of header works\nHowever, sometimes you may need to make the layout be responsive and split\ninto two rows, at a break point.\n\nTo activate this responsive layout, you can simply add the `has-responsive-layout`\nclass to your `limel-header` component.\n\nThis makes a few changes in the layout. Firstly, both the left side (icon and\nheadings) and right side (actions slot) will occupy 50% of the total header\nwidth each. However, the width of left and right side will never become smaller\nthan `22rem`.\n\n:::tip\nThe value of `22rem` is the default breakpoint. But you can easily change it\nby tweaking the `--header-responsive-breakpoint` variable in your component.\n:::","i":4,"n":0.101},{"v":"Colorful header\nIt's up to you to choose colors for the background, text or icon.\nWhen you change the default colors pay attention to how they look together.\nFor instance the text is readable and has enough contrast with a background color.","i":3,"n":0.16},{"v":"Using the \"actions\" slot\nThe component offers a place for including custom actions, or\nany other component that you want to include in the header.\nTo include any component in the `actions` area,\nyou can simply use the `slot=\"actions\"` attribute.\n\n:::note\nIn small containers when having the default layout, the `actions` area\nwins the battle of limited space! It means, if you have a very wide\ncomponent in the actions area, it will never shrink in size, and instead\nforces the headings to truncate.\n:::","i":2,"n":0.115},{"v":"Basic example\n\n:::tip\nUsers can still hover the cursor on the truncated headings to read the full\ntext.\n:::","i":1,"n":0.258},{"v":"A header is the top most visual element in a component, page, card, or a view.\n\n## Usage\nA header is the first thing that clarifies a context for users.\nDue to their positions in the UI hierarchy, headers are the most\nprominent elements of a user interface; and because of that, they carry both\nvital information and fundamental controls for the area of the interface\nthey represent.\n\nFor example, when a header is placed on top of a card, it should quickly\nexplain the card to the user. When placed on top of a modal, it should easily\nclarify what the modal is about. When displayed on top of a fullscreen view,\nit should indicate where in the system users are, and what part of the app\nthey are looking at.\n\n\n## Layout\nThe vital information in a header is usually manifested in form of an icon,\nand a heading. A subheading also could be added to provide supplementary\ninformation. There is also a third place for displaying supplementary information\nor \"supporting text\", which will be rendered as a part of the subheading.\nAlong with this information, headers can also include actions, controls, or\nmenus.\n\n:::important\nSuch actions or menus must affect the entire section of the interface\nwhich the header is representing. For example, a _Delete_ button on a card\nheader must delete that entire card and its respective contents all together,\nnot for example a selected item which is visible in the content of that card.\n:::\n\n\n:::warning\nDo not user background color on icons in the headers. It is much better and\nmuch easier for the eye if your icon itself has a color.\nBackground colors behind icons make them look like \"call to action\" buttons\nand take a lot of attention from users.\n:::","i":0,"n":0.061}],"4":[{"v":"supportingText","i":4,"n":1},{"v":"subheadingDivider","i":3,"n":1},{"v":"subheading","i":2,"n":1},{"v":"icon","i":1,"n":1},{"v":"heading","i":0,"n":1}],"5":[{"v":"An extra string of text to display along with with the Subheading","i":4,"n":0.289},{"v":"The visual divider that separates the `subheading` and the `supportingText`.\nIt must be a single character such as `-` or `,`.","i":3,"n":0.224},{"v":"Subheading to display","i":2,"n":0.577},{"v":"Icon to display","i":1,"n":0.577},{"v":"Title to display","i":0,"n":0.577}],"6":[],"7":[{"v":"string","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"Icon | string","i":1,"n":0.577},{"v":"string","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":27,"$":{"0":[{"v":"exampleComponent limel-example-placement","i":3,"n":0.707},{"v":"exampleComponent limel-example-open-direction","i":2,"n":0.707},{"v":"exampleComponent limel-example-read-more","i":1,"n":0.707},{"v":"exampleComponent limel-example-help","i":0,"n":0.707}],"1":{"v":"Help","n":1},"2":{"v":"/component/limel-help/","n":1},"3":[{"v":"Placement of the trigger element and the layout\n\nThe trigger element of the help component can be placed\nbefore or after the element it is describing.\n\nHowever, to provide a consistent layout, we recommend placing the\ntrigger element on the left side of all elements.\n\nJust make sure the elements are aligned correctly,\neven when there is no help component beside them.\n\nAlso see how we have implemented this component in the\n[Form](#/component/limel-form) component.","i":4,"n":0.123},{"v":"Help with custom open direction","i":3,"n":0.447},{"v":"Help with the read more link\nIf a `readMoreLink` supplied, it will render a \"Read more\" link at the bottom of the content.\n\nEven though you can add a link anywhere in the content, it is recommended to\nuse the read more link. Because it will always be displayed at the bottom\nof the popover after the content, does not scroll away with the content,\nand it will be styled in a consistent way.","i":2,"n":0.12},{"v":"Basic example\nThis component accepts a string as a value and displays it in a popover.\nThis string can be in markdown format, enabling you to add links, lists, etc;\nproviding a richer experience for the user.","i":1,"n":0.171},{"v":"A good design is self-explanatory! However, sometimes concepts are\ntoo complex to understand, no matter how well-designed a user interface is.\nIn such cases, contextual help can be a great way to provide users with\nhelp precisely where and when users need it.\n\nIn app interface design, providing contextual help emerges as a viable practice\nfor enhancing user experience and usability.\nContextual help serves as a quick-to-access guiding,\nempowering users to more easily understand and navigate through\nthe intricacies of an application.\n\nUsing this component designers empower users to grasp the functionality\nof an app more effortlessly, minimizes the learning curve,\ntransforming complex features into accessible opportunities for exploration.","i":0,"n":0.101}],"4":[{"v":"value","i":3,"n":1},{"v":"trigger","i":2,"n":1},{"v":"readMoreLink","i":1,"n":1},{"v":"openDirection","i":0,"n":1}],"5":[{"v":"{@inheritdoc Help.value}","i":3,"n":0.707},{"v":"{@inheritdoc Help.trigger}","i":2,"n":0.707},{"v":"{@inheritdoc Help.readMoreLink}","i":1,"n":0.707},{"v":"{@inheritdoc Help.openDirection}","i":0,"n":0.707}],"6":[],"7":[{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"Link","i":1,"n":1},{"v":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","i":0,"n":0.209}],"8":[],"9":[],"10":[],"11":[]}},{"i":28,"$":{"0":[{"v":"exampleComponent limel-example-icon-color","i":2,"n":0.707},{"v":"exampleComponent limel-example-icon-size","i":1,"n":0.707},{"v":"exampleComponent limel-example-icon-name","i":0,"n":0.707}],"1":{"v":"Icon","n":1},"2":{"v":"/component/limel-icon/","n":1},"3":[{"v":"Colors\nIcons will inherit their colors form the `color` property of the parent element.\nFor styling the background color, you can use the CSS variable\n`--icon-background-color`.\n:::note\nNote that `badge` is set to `true` to provide more space around the icon,\nand make sure the background color is nicely displayed.\nBut the `bade` has effect, only when the `size` attribute is also set.\n:::","i":3,"n":0.134},{"v":"Size\nThere are preset sizes.\n:::note\nSetting the `bade` prop to `true` affects how big the icon is rendered,\nbut only when the `size` attribute is also set.\n:::","i":2,"n":0.204},{"v":"Names\nTo display an icon, all you need to do is specifying its name.","i":1,"n":0.277},{"v":":::important\nTo install your icon set correctly, please read the [documentation here](#/).\n:::\n\nThe size and color of the icon is normally set in CSS, however there are a few\nstandard sizes defined that can be used with the `size` property.","i":0,"n":0.164}],"4":[{"v":"size","i":2,"n":1},{"v":"name","i":1,"n":1},{"v":"badge","i":0,"n":1}],"5":[{"v":"Size of the icon","i":2,"n":0.5},{"v":"Name of the icon","i":1,"n":0.5},{"v":"Set to `true` to give the icon a round background with some padding.\nOnly works when the `size` attribute is also set.","i":0,"n":0.218}],"6":[],"7":[{"v":"\"large\" | \"medium\" | \"small\" | \"x-small\"","i":2,"n":0.378},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":29,"$":{"0":[{"v":"exampleComponent limel-example-icon-button-composite","i":4,"n":0.707},{"v":"exampleComponent limel-example-icon-button-toggle-state","i":3,"n":0.707},{"v":"exampleComponent limel-example-icon-button-elevated","i":2,"n":0.707},{"v":"exampleComponent limel-example-icon-button-disabled","i":1,"n":0.707},{"v":"exampleComponent limel-example-icon-button-basic","i":0,"n":0.707}],"1":{"v":"Icon button","n":0.707},"2":{"v":"/component/limel-icon-button/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":5,"n":0.354},{"v":"Toggle State\n\nThis isn't really a feature of `limel-icon-button`, but since it is a common\nuse case, here is a simple way to make the icon button toggle between two\ndifferent \"states\", each with its own icon and label.","i":4,"n":0.167},{"v":"Elevated\n\nAn alternative button style, which helps communicate that this is a button\nwhich can be clicked.","i":3,"n":0.258},{"v":"Disabled","i":2,"n":1},{"v":"Basic Example\n\nJust an icon and a click-handler.\nOpen the dev-tools console to see logged clicks.","i":1,"n":0.267}],"4":[{"v":"label","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"elevated","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The text to show to screenreaders and other assistive tech.","i":3,"n":0.316},{"v":"The icon to display.","i":2,"n":0.5},{"v":"Set to `true` to give the button our standard \"elevated\" look, lifting\nit off the flat layout.","i":1,"n":0.25},{"v":"Set to `true` to disable the button.","i":0,"n":0.378}],"6":[],"7":[{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":30,"$":{"0":[{"v":"exampleComponent limel-example-info-tile-styling","i":5,"n":0.707},{"v":"exampleComponent limel-example-info-tile-primary-slot","i":4,"n":0.707},{"v":"exampleComponent limel-example-info-tile-loading","i":3,"n":0.707},{"v":"exampleComponent limel-example-info-tile-progress","i":2,"n":0.707},{"v":"exampleComponent limel-example-info-tile-badge","i":1,"n":0.707},{"v":"exampleComponent limel-example-info-tile","i":0,"n":0.707}],"1":{"v":"Info tile","n":0.707},"2":{"v":"/component/limel-info-tile/","n":1},"3":[{"v":"How to style the Info tile\n\nThe component offers different CSS variables for styling\nthe color of the text, background, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","i":6,"n":0.167},{"v":"Using the primary slot\nThe component offers a primary slot that can be used to display\nany custom content.\n\n:::important\n1. If there is a component to be displayed in the primary slot,\nthe info tile won't render the inbuilt progress bar.\n1. The primary slot has an aspect ratio of 1:1, so the content\nwill be displayed in a square area.\n:::","i":5,"n":0.135},{"v":"Loading state\n\nSometimes the value needs to be calculated, updated, or fetched\nthrough a process that requires some time. In such cases, it is\na great idea to let the users know that the data is being updated.\n\nTo do so, set the `loading` property to `true`. The component will then\nshow an indeterminate progressbar indicating the data is being updated,\nwhile the older value is still being displayed.\n\n:::note\nNote that this does _not_ disable the link, and most probably you\ndo not need it to be disabled either.\nIf the link should be disabled while loading, the\n`disabled` property should be set to `true` as well.\n:::","i":4,"n":0.102},{"v":"Displaying a progress bar\n\nBy defining a numeric `progressValue`, you can display\na circular progress bar to visualize more data on the component.\nThis can for instance help illustrate how much of a\nset goal has been reached, which together with the `value` will help users\nget a better overview of the provided data.\n\nWhen the circular progress is shown, that would become the primary\nillustrative element on the component,\nwhich means the icon will be rendered smaller, only as a supportive\ncontextual visual element.\n\n:::tip\nIt is possible to customize the progress bar's suffix, but it is\nset to display the percentage sign (**%**) by default.\n:::","i":3,"n":0.103},{"v":"Displaying a notification badge\n\nThe component can display a badge, which could either be a `number` or\na `string`. Read more about how the badge truncates or abbreviates the\nprovided label [here](#/component/limel-badge/).","i":2,"n":0.186},{"v":"Basic example\n\nThis component does its best to offer a responsive layout\nthat reacts both to the length of text, and size of the container.\n\n:::note\nTo use this component properly, you need to define both\na declared `height` and a declared `width` for it. Alternatively,\nmake sure that its container enforces a width and height,\nfor instance, use it as a flex or grid child.\n:::\n\nIn this example, you can resize the component to see how it\ntries to adjust its content to the size of its container.\n\n:::tip\nTry to avoid long textual content to get\nthe best possible visualization. They can cause\nundesired overlapping of the content, depending on the size of the\ncomponent.\n:::","i":1,"n":0.099},{"v":"This component can be used on places such as a start page or a dashboard.\nIt offers features for visualizing aggregated data along with supplementary\ninformation.\n\nIf clicking on the component should navigate the user to\na new screen or web page, you need to provide a URL,\nusing the `link` property.","i":0,"n":0.146}],"4":[{"v":"value","i":9,"n":1},{"v":"suffix","i":8,"n":1},{"v":"progress","i":7,"n":1},{"v":"prefix","i":6,"n":1},{"v":"loading","i":5,"n":1},{"v":"link","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"badge","i":0,"n":1}],"5":[{"v":"A piece of text or number that is the main piece of information\nwhich the component is intended to visualize.","i":9,"n":0.229},{"v":"A string of text that is visually placed after the value.","i":8,"n":0.302},{"v":"Properties of the optional circular progress bar.\n\nDefaults:\n- `maxValue`: 100\n- `suffix`: %\n- `displayPercentageColors`: false\n\nColors change with intervals of 10 %.","i":7,"n":0.229},{"v":"A string of text that is visually placed before the value.","i":6,"n":0.302},{"v":"Set to `true` to put the component in the `loading` state.\nThis does _not_ disable the link. To do so, the\n`disabled` property should be set to `true` as well.","i":5,"n":0.189},{"v":"If supplied, the info tile will be a clickable link.\n\nSupplying a value also adds an elevated effect using a shadow,\nas well as `cursor: pointer`, which appears on hover.\nWhile we strongly recommend supplying a link whenever the\ncomponent should act as a link, if this is not possible, and\nyou need to provide interaction through a click handler,\nyou can still get the correct styling by supplying a `Link`\nobject with the `href` property set to `'#'`.","i":4,"n":0.118},{"v":"The text to show below the info tile. Long labels will be truncated.","i":3,"n":0.277},{"v":"Name of icon for the info tile.","i":2,"n":0.378},{"v":"Set to `true` if info tile is disabled.","i":1,"n":0.354},{"v":"If supplied, the info tile will display a notification badge.","i":0,"n":0.316}],"6":[],"7":[{"v":"number | string","i":9,"n":0.577},{"v":"string","i":8,"n":1},{"v":"InfoTileProgress","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"Link","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"number | string","i":0,"n":0.577}],"8":[],"9":[],"10":[],"11":[]}},{"i":31,"$":{"0":[{"v":"exampleComponent limel-example-input-field-focus","i":15,"n":0.707},{"v":"exampleComponent limel-example-input-field-pattern","i":14,"n":0.707},{"v":"exampleComponent limel-example-input-field-search","i":13,"n":0.707},{"v":"exampleComponent limel-example-input-field-prefix","i":12,"n":0.707},{"v":"exampleComponent limel-example-input-field-suffix","i":11,"n":0.707},{"v":"exampleComponent limel-example-input-field-textarea","i":10,"n":0.707},{"v":"exampleComponent limel-example-input-field-error-icon","i":9,"n":0.707},{"v":"exampleComponent limel-example-input-field-showlink","i":8,"n":0.707},{"v":"exampleComponent limel-example-input-field-icon-both","i":7,"n":0.707},{"v":"exampleComponent limel-example-input-field-icon-trailing","i":6,"n":0.707},{"v":"exampleComponent limel-example-input-field-icon-leading","i":5,"n":0.707},{"v":"exampleComponent limel-example-input-field-autocomplete","i":4,"n":0.707},{"v":"exampleComponent limel-example-input-field-number","i":3,"n":0.707},{"v":"exampleComponent limel-example-input-field-text-multiple","i":2,"n":0.707},{"v":"exampleComponent limel-example-input-field-placeholder","i":1,"n":0.707},{"v":"exampleComponent limel-example-input-field-text","i":0,"n":0.707}],"1":{"v":"Input field","n":0.707},"2":{"v":"/component/limel-input-field/","n":1},"3":[{"v":"Setting focus programmatically\n\nTo set focus programmatically, call `.focus()` on the `limel-input-field`\nelement. Note that, for this to work, the `tabindex` property must be set\non the `limel-input-field`.\n\n- `tabindex=\"0\"` means that the element should be focusable in sequential\nkeyboard navigation, after any positive tabindex values and its order is\ndefined by the document's source order.\n- A _positive value_ means the element should be focusable in sequential\nkeyboard navigation, with its order defined by the value of the number.\n\nRead more on [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex).","i":16,"n":0.115},{"v":"Input Field with pattern","i":15,"n":0.5},{"v":"Input Field of Type Search","i":14,"n":0.447},{"v":"Prefix\nAn input Field with a currency symbol text displayed as prefix","i":13,"n":0.302},{"v":"Suffix\nAn Input Field with a unit of measurement displayed as suffix","i":12,"n":0.302},{"v":"Input Field of Type Textarea","i":11,"n":0.447},{"v":"Input Field with Error Icon","i":10,"n":0.447},{"v":"With `showLink=true`","i":9,"n":0.707},{"v":"Input Field with Leading and Trailing Icons & Action","i":8,"n":0.333},{"v":"Input Field with Trailing Icon & Action\n\nA trailing icon can be added to input fields along with an action\nfor that trailing icon.\n:::note\nUse trailing icons only when you intend to have an action associated with them.\nTrailing icons of input fields will get an interactive visual effect when\nhovered to hint users that they are clickable.\n\nTherefore, a purely ornamental trailing icon that has this interactive effect\nwill be confusing for users.\n:::","i":7,"n":0.122},{"v":"Input Field with Leading Icon\n\nA leading icon can be used to visually \"decorate\" the input field. The\npurpose for adding a leading icon should be to help the user understand what\nthe field is for.\n\nIn this example, we use a map icon in addition to the \"Address\" label, to\nindicate that this field is meant for a physical address.\n\nThe example has a minimum length just to show what an invalid field looks\nlike.","i":6,"n":0.12},{"v":"Input Field with Completions","i":5,"n":0.5},{"v":"Input Field of Type Number","i":4,"n":0.447},{"v":"Multiple Fields","i":3,"n":0.707},{"v":"Input Field with a placeholder\n\nThe placeholder text is displayed inside the input field,\nwhen the field is focused and empty.\n\n:::tip\nA `placeholder` text is good for providing hints and examples about the expected input.\nWhile the `helperText` is better for providing instructions.\n:::\n\nUnlike `helperText` which is constantly visible while the user is typing\ninside the field, the `placeholder` text disappears as soon as the user has\ninput anything.\n\n:::note\nMake an informed decision when using `placeholder` instead of `helperText`!\nYou may have good intentions to reduce clutter on the user interface\nand use a placeholder text, because it will disappear after user has started typing.\nHowever, if the additional tips or instructions that you are trying to provide is\ncrucial or hard to remember, it is better to display them as helper text instead.\n\nThis is because disappearing crucial information will strains users’ short-term memory.\nIn a form with many fields, users can easily forget\nwhat each field was for. Especially if a field has validations that fail\nfor example after submitting. Instructions that are not visible anymore will make it\nhard for the user to realize what the problem is or how to solve it.\n:::\n:::warning\nIf no `label` is provided, then the placeholder text will be displayed even if the\ninput field is not focused.\n\nHowever, this does not mean that you should use this\nas a hack, to create a minimalistic and clean user interface. Not providing labels\nwill cause accessibility issues for users of assistive technologies,\nand strains users’ short-term memory as explained above.\nAdditionally, users may confuse the placeholder text, as an automatically\ninputted value, and skip filling in information.\n:::","i":2,"n":0.063},{"v":"Input Field of Type Text","i":1,"n":0.447}],"4":[{"v":"value","i":22,"n":1},{"v":"type","i":21,"n":1},{"v":"trailingIcon","i":20,"n":1},{"v":"suffix","i":19,"n":1},{"v":"step","i":18,"n":1},{"v":"showLink","i":17,"n":1},{"v":"required","i":16,"n":1},{"v":"readonly","i":15,"n":1},{"v":"prefix","i":14,"n":1},{"v":"placeholder","i":13,"n":1},{"v":"pattern","i":12,"n":1},{"v":"minlength","i":11,"n":1},{"v":"min","i":10,"n":1},{"v":"maxlength","i":9,"n":1},{"v":"max","i":8,"n":1},{"v":"locale","i":7,"n":1},{"v":"leadingIcon","i":6,"n":1},{"v":"label","i":5,"n":1},{"v":"invalid","i":4,"n":1},{"v":"helperText","i":3,"n":1},{"v":"formatNumber","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"completions","i":0,"n":1}],"5":[{"v":"The value of the field.","i":22,"n":0.447},{"v":"Type of input.\n\nNote** regarding type `url`: `limel-input` uses the native validation\nbuilt into the browser for many types of input fields. The native\nvalidation for `url` is very strict, and does not allow relative urls,\nnor any other formats that are not a \"fully qualified\" url. To allow\nsuch urls, use the type `urlAsText` instead. `urlAsText` works exactly\nlike `text` in all regards, except that it enables use of the `showLink`\nproperty.","i":21,"n":0.123},{"v":"Trailing icon to show to the far right in the field.","i":20,"n":0.302},{"v":"A short piece of text to display after the value inside the input field.\nDisplayed for all types except `textarea`.","i":19,"n":0.229},{"v":"Incremental values that are valid if the field type is `number`.","i":18,"n":0.302},{"v":"For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n`true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\nrespectively. The default icon can be overridden using the `trailingIcon`\nproperty.","i":17,"n":0.177},{"v":"Set to `true` to indicate that the field is required.","i":16,"n":0.316},{"v":"Set to `true` to make the field read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.","i":15,"n":0.18},{"v":"A short piece of text to display before the value inside the input field.\nDisplayed for all types except `textarea`.","i":14,"n":0.229},{"v":"The placeholder text shown inside the input field, when the field is focused and empty.","i":13,"n":0.258},{"v":"Regular expression that the current value of the input field must match.\nNo forward slashes should be specified around the pattern.\nOnly used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n`password`, or `search`.","i":12,"n":0.18},{"v":"Minimum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","i":11,"n":0.267},{"v":"Minimum allowed value if input type is `number`.","i":10,"n":0.354},{"v":"Maximum length of the value if type is `password`, `search`, `tel`,\n`text`, `url`, or `urlAsText`.","i":9,"n":0.267},{"v":"Maximum allowed value if input type is `number`.","i":8,"n":0.354},{"v":"The locale to use for formatting numbers.","i":7,"n":0.378},{"v":"Leading icon to show to the far left in the field.","i":6,"n":0.302},{"v":"The input label.","i":5,"n":0.577},{"v":"Set to `true` to indicate that the current value of the input field is\ninvalid.","i":4,"n":0.267},{"v":"Optional helper text to display below the input field when it has focus","i":3,"n":0.277},{"v":"Set to `true` to format the current value of the input field only\nif the field is of type number.\nThe number format is determined by the current language of the browser.","i":2,"n":0.183},{"v":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","i":1,"n":0.167},{"v":"list of suggestions `value` can autocomplete to.","i":0,"n":0.378}],"6":[],"7":[{"v":"string","i":22,"n":1},{"v":"\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"urlAsText\" | \"week\"","i":21,"n":0.192},{"v":"string","i":20,"n":1},{"v":"string","i":19,"n":1},{"v":"\"any\" | number","i":18,"n":0.577},{"v":"boolean","i":17,"n":1},{"v":"boolean","i":16,"n":1},{"v":"boolean","i":15,"n":1},{"v":"string","i":14,"n":1},{"v":"string","i":13,"n":1},{"v":"string","i":12,"n":1},{"v":"number","i":11,"n":1},{"v":"number","i":10,"n":1},{"v":"number","i":9,"n":1},{"v":"number","i":8,"n":1},{"v":"string","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"string","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"string[]","i":0,"n":1}],"8":[{"v":"change","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Emitted when the input value is changed.","i":1,"n":0.378},{"v":"Emitted when `trailingIcon` or `leadingIcon` is set\nand the icon is interacted with.","i":0,"n":0.289}],"10":[],"11":[{"v":"string","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":32,"$":{"0":[{"v":"exampleComponent limel-example-linear-progress-color","i":3,"n":0.707},{"v":"exampleComponent limel-example-linear-progress-accessible-label","i":2,"n":0.707},{"v":"exampleComponent limel-example-linear-progress-indeterminate","i":1,"n":0.707},{"v":"exampleComponent limel-example-linear-progress","i":0,"n":0.707}],"1":{"v":"Linear progress","n":0.707},"2":{"v":"/component/limel-linear-progress/","n":1},"3":[{"v":"Setting the color","i":4,"n":0.577},{"v":"Using an accessible label\nThe component tells the assistive technologies that it is a \"Progress bar\".\nHowever, instead of relying on such a generic label,\nyou can provide a more specific label that describes what the progress bar is for,\nor what kind of progress it is visualizing.\n\nThis is achieved, using the `accessibleLabel` property.","i":3,"n":0.141},{"v":"Indeterminate progress\nThe component can be put in an indeterminate state,\nwhere the progress bar will animate without a specific value.\n\nThis is useful for instance when the progress is not known,\nbut the user should be aware that something is happening.","i":2,"n":0.162},{"v":"Basic example\nThe component accepts a value between `0` and `1` and visualizes it on a scale.\nIn this example, value `0` stands for `0%` and `1` is `100%`,\nand the `value` of the linear progress is controlled by an input field.","i":1,"n":0.16},{"v":"The linear progress component can be used to visualize the current state of a progress in a scale;\nfor example percentage of completion of a task.","i":0,"n":0.2}],"4":[{"v":"value","i":3,"n":1},{"v":"language","i":2,"n":1},{"v":"indeterminate","i":1,"n":1},{"v":"accessibleLabel","i":0,"n":1}],"5":[{"v":"The value of the progress bar. Should be between `0` and `1`.","i":3,"n":0.289},{"v":"Defines the language for translations.\nWill translate the translatable strings on the components.","i":2,"n":0.289},{"v":"Puts the progress bar in an indeterminate state","i":1,"n":0.354},{"v":"A label used to describe the purpose of the element to users\nof assistive technologies, like screen readers.\nIf not provided, the generic word of \"Progress bar\" will be used.","i":0,"n":0.189}],"6":[],"7":[{"v":"number","i":3,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":2,"n":0.243},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":33,"$":{"0":[{"v":"exampleComponent limel-example-list-primary-component","i":15,"n":0.707},{"v":"exampleComponent limel-example-list-grid","i":14,"n":0.707},{"v":"exampleComponent limel-example-list-badge-icons-with-multiple-lines","i":13,"n":0.707},{"v":"exampleComponent limel-example-list-striped","i":12,"n":0.707},{"v":"exampleComponent limel-example-list-action","i":11,"n":0.707},{"v":"exampleComponent limel-example-list-radio-button-icons","i":10,"n":0.707},{"v":"exampleComponent limel-example-list-radio-button","i":9,"n":0.707},{"v":"exampleComponent limel-example-list-checkbox-icons","i":8,"n":0.707},{"v":"exampleComponent limel-example-list-checkbox","i":7,"n":0.707},{"v":"exampleComponent limel-example-list-pictures","i":6,"n":0.707},{"v":"exampleComponent limel-example-list-badge-icons","i":5,"n":0.707},{"v":"exampleComponent limel-example-list-icons","i":4,"n":0.707},{"v":"exampleComponent limel-example-list-selectable","i":3,"n":0.707},{"v":"exampleComponent limel-example-list-separator","i":2,"n":0.707},{"v":"exampleComponent limel-example-list-secondary","i":1,"n":0.707},{"v":"exampleComponent limel-example-list","i":0,"n":0.707}],"1":{"v":"List","n":1},"2":{"v":"/component/limel-list/","n":1},"3":[{"v":"List with a primary component","i":16,"n":0.447},{"v":"List with grid layout\nTo display list items in a grid layout instead of a vertical column,\nsimply add `has-grid-layout` class to\nthe component.\n\nThis layout can be customized, using a few CSS variables.\n:::warning\n- This layout should not be used with lists that have checkboxes or radio buttons.\n- Also, it is recommended to avoid using secondary text with this layout.","i":15,"n":0.134},{"v":"Multi-line versus single-line layout\nBy default, list items will always truncate the `text` line, which is displayed\neither alone, or as a primary heading (when there are both `text` and `secondaryText`)\navailable. This means users will only see one line of text which is as wides as\nthe list item, and no more. Thus, it is a good idea not to add long strings of\ntext in the heading, as on mobile phones or small containers, they will be\nchopped off and truncated.\n\nHowever, the `secondaryText` which appears as a sub-heading is not truncated\nthat quickly. By default, lists will display 3 lines of text, and then truncate\nthe rest. Nevertheless, you can increase or decrease this number by specifying\n`maxLinesSecondaryText`.\n:::note\nDo not use `0`, negative numbers, decimal numbers, or very large numbers.\n:::","i":14,"n":0.091},{"v":"List with custom styles\n\nAdding the `has-striped-rows` class to the list will make the items more\ndistinct by adding different background colors to even and odd rows.\n\nAlso, by taking advantage of the `has-interactive-items`, hovering on a list\nitem which is not `disabled` will display an elevated visual effect, giving\nit more affordance and a solid feeling of interactivity.\n\n| Class name              | Description                                                                                     |\n| ----------------------- | ----------------------------------------------------------------------------------------------- |\n| `has-striped-rows`      | Adds distinct styling by which every other row (list item) gets a darker background.            |\n| `has-interactive-items` | Adds more affordance by applying an elevated visual effect on list item, when they are hovered. |\n\n:::note\nto get both effects, you need to apply both of these classes.\n:::","i":13,"n":0.095},{"v":"List with action menu","i":12,"n":0.5},{"v":"List with radio buttons and icons","i":11,"n":0.408},{"v":"List with radio buttons","i":10,"n":0.5},{"v":"List with checkboxes and icons","i":9,"n":0.447},{"v":"List with checkboxes","i":8,"n":0.577},{"v":"List with Pictures and Icons\n\n:::note\nWhile it's technically possible to display both images and icons simultaneously\nfor each list item, we recommend against using identical icons across all items.\nRepeating the same icon for every list item adds unnecessary visual clutter\nwithout providing additional value.\n\nIcons, like images, should serve to help users quickly differentiate between\nlist items. They are most effective when each icon uniquely identifies\nthe type or category of its list item.\n:::","i":7,"n":0.121},{"v":"List with badge icons","i":6,"n":0.5},{"v":"List with icons","i":5,"n":0.577},{"v":"List with selectable items","i":4,"n":0.5},{"v":"List with separators\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists.\n\n- **Grouping and Hierarchy:**\nSeparators can be used to group related items, signaling to users that\nthose items share a common attribute or purpose.\nThis grouping effect aids in creating a hierarchical structure within the list,\nmaking it simpler for users to grasp relationships and make informed decisions.\n- **Visual Scannability:**\nWhen users quickly scan a list, their eyes naturally use the separator lines\nas visual anchors, making it easier to find items and remember their whereabouts\nnext time they revisit the same list.\n- **Reduced Cognitive Effort:**\nSeparators contribute to a user's overall comprehension and experience\nby reducing the cognitive effort required to process the information.\n\nYou can optionally add a short title to the separators,\nto clarify further what each group of items is about,\nand by doing so improve the users perception and experience.","i":3,"n":0.08},{"v":"List with secondary text","i":2,"n":0.5},{"v":"Basic list","i":1,"n":0.707}],"4":[{"v":"type","i":4,"n":1},{"v":"maxLinesSecondaryText","i":3,"n":1},{"v":"items","i":2,"n":1},{"v":"iconSize","i":1,"n":1},{"v":"badgeIcons","i":0,"n":1}],"5":[{"v":"The type of the list, omit to get a regular list. Available types are:\n`selectable`: regular list with single selection.\n`radio`: radio button list with single selection.\n`checkbox`: checkbox list with multiple selection.","i":4,"n":0.183},{"v":"By default, lists will display 3 lines of text, and then truncate the rest.\nConsumers can increase or decrease this number by specifying\n`maxLinesSecondaryText`. If consumer enters zero or negative\nnumbers we default to 1; and if they type decimals we round up.","i":3,"n":0.158},{"v":"List of items to display","i":2,"n":0.447},{"v":"Size of the icons in the list","i":1,"n":0.378},{"v":"Set to `true` if the list should display larger icons with a background","i":0,"n":0.277}],"6":[],"7":[{"v":"\"checkbox\" | \"radio\" | \"selectable\"","i":4,"n":0.447},{"v":"number","i":3,"n":1},{"v":"(ListSeparator | ListItem<any>)[]","i":2,"n":0.577},{"v":"\"large\" | \"medium\" | \"small\" | \"x-small\"","i":1,"n":0.378},{"v":"boolean","i":0,"n":1}],"8":[{"v":"select","i":2,"n":1},{"v":"interact","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Fired when an action has been selected from the action menu of a list item","i":2,"n":0.258},{"v":"Fires when a user interacts with an item in the list (e.g., click,\nkeyboard select).","i":1,"n":0.267},{"v":"Fired when a new value has been selected from the list.\nOnly fired if `type` is set to `selectable`, `radio` or `checkbox`.","i":0,"n":0.218}],"10":[],"11":[{"v":"ListItem<any> | ListItem<any>[]","i":2,"n":0.577},{"v":"ListItem<any>","i":1,"n":1},{"v":"ListItem<any> | ListItem<any>[]","i":0,"n":0.577}]}},{"i":34,"$":{"0":[{"v":"exampleComponent limel-example-markdown-custom-component","i":13,"n":0.707},{"v":"exampleComponent limel-example-markdown-composite","i":12,"n":0.707},{"v":"exampleComponent limel-example-markdown-horizontal-rule","i":11,"n":0.707},{"v":"exampleComponent limel-example-markdown-blockquotes","i":10,"n":0.707},{"v":"exampleComponent limel-example-markdown-keys","i":9,"n":0.707},{"v":"exampleComponent limel-example-markdown-html","i":8,"n":0.707},{"v":"exampleComponent limel-example-markdown-tables","i":7,"n":0.707},{"v":"exampleComponent limel-example-markdown-footnotes","i":6,"n":0.707},{"v":"exampleComponent limel-example-markdown-code","i":5,"n":0.707},{"v":"exampleComponent limel-example-markdown-images","i":4,"n":0.707},{"v":"exampleComponent limel-example-markdown-links","i":3,"n":0.707},{"v":"exampleComponent limel-example-markdown-lists","i":2,"n":0.707},{"v":"exampleComponent limel-example-markdown-emphasis","i":1,"n":0.707},{"v":"exampleComponent limel-example-markdown-headings","i":0,"n":0.707}],"1":{"v":"Markdown","n":1},"2":{"v":"/component/limel-markdown/","n":1},"3":[{"v":"Custom Element\n\nYou can allow custom elements by adding them to a whitelist. You need to specify both\nthe `tagName` of the element as well as the allowed `attributes`.","i":14,"n":0.192},{"v":"Composite example\nTest your markdown code and see what you get in return in real-time.","i":13,"n":0.267},{"v":"Horizontal Rule","i":12,"n":0.707},{"v":"Blockquotes","i":11,"n":1},{"v":"Keys","i":10,"n":1},{"v":"HTML","i":9,"n":1},{"v":"Tables","i":8,"n":1},{"v":"Footnote","i":7,"n":1},{"v":"Code","i":6,"n":1},{"v":"Images","i":5,"n":1},{"v":"Links\nThere are two ways to create links.","i":4,"n":0.378},{"v":"Lists","i":3,"n":1},{"v":"Emphasis","i":2,"n":1},{"v":"Headings","i":1,"n":1},{"v":"The Markdown component receives markdown syntax\nand renders it as HTML.","i":0,"n":0.316}],"4":[{"v":"whitelist","i":2,"n":1},{"v":"value","i":1,"n":1},{"v":"lazyLoadImages","i":0,"n":1}],"5":[{"v":"Whitelisted html elements.\n\nAny custom element added here will not be sanitized and thus rendered.\nCan also be set via `limel-config`. Setting this property will override\nthe global config.","i":2,"n":0.196},{"v":"The input text. Treated as GitHub Flavored Markdown, with the addition\nthat any included HTML will be parsed and rendered as HTML, rather than\nas text.","i":1,"n":0.204},{"v":"Enable lazy loading for images","i":0,"n":0.447}],"6":[{"v":"alpha ","i":0,"n":1}],"7":[{"v":"CustomElementDefinition[]","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":35,"$":{"0":[{"v":"exampleComponent limel-example-menu-composite","i":16,"n":0.707},{"v":"exampleComponent limel-example-menu-searchable","i":15,"n":0.707},{"v":"exampleComponent limel-example-menu-sub-menu-lazy-loading-infinite","i":14,"n":0.707},{"v":"exampleComponent limel-example-menu-sub-menu-lazy-loading","i":13,"n":0.707},{"v":"exampleComponent limel-example-menu-sub-menus","i":12,"n":0.707},{"v":"exampleComponent limel-example-menu-notification","i":11,"n":0.707},{"v":"exampleComponent limel-example-menu-secondary-text","i":10,"n":0.707},{"v":"exampleComponent limel-example-menu-hotkeys","i":9,"n":0.707},{"v":"exampleComponent limel-example-menu-grid","i":8,"n":0.707},{"v":"exampleComponent limel-example-menu-badge-icons","i":7,"n":0.707},{"v":"exampleComponent limel-example-menu-icons","i":6,"n":0.707},{"v":"exampleComponent limel-example-menu-separators","i":5,"n":0.707},{"v":"exampleComponent limel-example-menu-surface-width","i":4,"n":0.707},{"v":"exampleComponent limel-example-menu-open-direction","i":3,"n":0.707},{"v":"exampleComponent limel-example-menu-disabled","i":2,"n":0.707},{"v":"exampleComponent limel-example-menu-basic","i":1,"n":0.707},{"v":"slot trigger - Element to use as a trigger for the menu.","i":0,"n":0.289}],"1":{"v":"Menu","n":1},"2":{"v":"/component/limel-menu/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states. This example has a slightly\nmore advanced `onSelect` handler, which disables the last selected value.","i":16,"n":0.213},{"v":"Searchable items","i":15,"n":0.707},{"v":"Lazy loading infinite amount of sub-menu\n\n:::note\nThis example is here to show what the component looks like when you have a\nlot of nested sub-menus, and what the breadcrumb component looks like when\nyou are deep into the menu.\n\nIf you are looking for code examples, please see the\n_Lazy loading items in sub-menus_ example instead.\n:::","i":14,"n":0.14},{"v":"Lazy loading items in sub-menus","i":13,"n":0.447},{"v":"Sub-menus\nTo have an enhanced navigation and provide a better organization of items,\nyou can incorporate sub-menus within the menu structure;\nand create a so called \"Cascading menu\".\nThese sub-menus provide the user with an efficient way to access a\nwide range of choices without overwhelming them with clutter or complexity.\n\nThe main menu, often called the parent menu,\ntypically consists of top-level options that represent primary categories or options.\nSub-menus, on the other hand, are secondary or menus that are nested\nbeneath these primary options.\n\nSome of the benefits of creating tree-structure for the menus are:\n- **Organized Information:** Sub-menus enable a clear and organized presentation of content,\nmaking it easier for the user to find what they're looking for within a specific category.\n- **Space Efficiency:** They save screen space by concealing secondary options until needed,\nreducing visual clutter and making the interface cleaner and more user-friendly.\n- **Scalability:** Sub-menus can accommodate a large number of choices or features\nwithin a single parent menu, making them suitable for complex applications or websites.\n- **Logical Hierarchy:** By structuring information hierarchically,\nsub-menus help the user understand the relationships between various\noptions and navigate through the interface more intuitively.\n\nOur cascading menus are designed to be mobile-friendly.\nThis means that sub-menus are opened within the same menu surface,\ninstead of the classic way of sticking out on the side, as a secondary menu.\nThanks to a breadcrumbs component on the top, the user can easily navigate back\nand forth within the menu structure.\n\n:::tip\nIt is also very easy to navigate the nested menu structure using the keyboard.\n\n- Using the <kbd>↓</kbd> & <kbd>↑</kbd> keys, the user can naturally\nnavigate within the presented menu,\n- pressing the <kbd>→</kbd> key on a menu item that has sub-menu opens a nested menu,\n- and pressing the <kbd>←</kbd> key takes the user back to the previous/parent menu.\n:::","i":12,"n":0.059},{"v":"With notification\n\nIt is possible to display a notification badge on each individual\nlist item inside the menu's dropdown.\n\nThese notification badges are supposed to inform the user that\nthere is something in the menu item that requires their attention.\n\nThis is typically done by displaying a number, which summarizes\nthe quantity of the items that require user's attention.\nHowever, if a number is not meaningful, it is possible to send an\nempty string (`badge: ''`), which will display a circle on the\nlist item.\n\nSince list items in the menu are hidden away, users would not\nrealize that there is something inside the menu which requires their\nattention. Which is why the trigger automatically displays a\nnotification badge on its top-right corner,\nwhen the menu contains badges.\n\nBy default, the badge is red and its text is white.\nThis is to attract users' attention. However, this is possible to override using\n[provided style variables](/#/component/limel-menu/styles/).\n\n:::warning\n- Do not negatively exploit this possibility and spam users' attention.\nCrowding the UI with too much noise _will_ negatively affect the user experience.\n- Notification badges *must* be cleared as soon as the list item is clicked by the user!\n:::","i":11,"n":0.075},{"v":"With `secondaryText`\n\nMenu items can display secondary text as well. By default, the secondary text\nwill be displayed in two lines, and then get truncated.\n\n:::important\nKeep in mind that a menu's drop-down surface will stretch as much as its default\nmaximum width values allow. However, if this default maximum width does not suit\nyour use case, you can override it using the `--menu-surface-width` variable.\n\nBut do not forget that menus should still behave responsively, thus assigning a fixed value\nshould be avoided. To make the width responsive, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(90vw, 40rem);` will output\n`width: min(90wv, 40rem);` which will tell the browser to render the menu\ncontent in a grid that's allowed to take up 90% of the viewport's width (`90vw`)\nup to a maximum of `40rem`.\n:::","i":10,"n":0.085},{"v":"Menu with supporting hotkeys","i":9,"n":0.5},{"v":"With grid layout\nTo render items of a menu in a grid layout instead of a vertical list,\nsimply setting the `gridLayout` property to `true`.\n\n:::note\nMenus with the grid layout has a responsive width by default,\nwhich will not grow wider than a certain size. However, if the default size is not\nwide enough for your use case, you can try setting another responsive width, using\nthe `--menu-surface-width` variable.\n\nTo achieve a responsive width, try using the `min()` function.\nThis function selects the smallest value from a list of comma-separated expressions\nwhich are placed within the parentheses.\n\nFor example, `--menu-surface-width: min(100vw, 40rem);` will output\n`width: min(100wv, 40rem);` which will tell the browser to render the menu\ncontent in a 40rem-wide grid, as long as 100% of the viewport's width (`100vw`)\nis larger than `40rem`.\n:::\n\n\nTo tweak the grid layout, a few other variables are available:\n- `--list-grid-item-max-width`: Defines maximum width of items in the list, which defaults to `10rem`.\n- `--list-grid-item-min-width`: Defines minimum width of items, which to `7.5rem`.\n- `--list-grid-gap`: Defines the distance between the items, which defaults to `0.75rem`.","i":8,"n":0.078},{"v":"With badge icons","i":7,"n":0.577},{"v":"With icons","i":6,"n":0.707},{"v":"Using separators with titles\n\nYou divide groups of items using separators.\nIt is also possible add a short title to the separators,\nto clarify further what each group of menu items is about,\nand by doing so improve the users perception and experience.","i":5,"n":0.16},{"v":"Size of the menu drop-down surface\n\nAny element in the UI can be configured to open a menu.\nBy default, the dropdown that opens up after the menu trigger is clicked\ninherits its width from the items that are inside the dropdown menu.\n\nHowever, for some designs, you may want the width of the menu dropdown\nto be exactly as wide as the width of its trigger element, or\nas wide as `limel-menu` element itself. This is easily achieved using the\n`surfaceWidth` prop. Read more on `SurfaceWidth`.\n\n:::tip\nIn this example, `limel-menu` is highlighted with a dashed border,\nto make it easier to see its width.\n:::\n:::note\nThe `--menu-surface-width` Overrides the width defined by `surfaceWidth`!\n:::","i":4,"n":0.099},{"v":"openDirection\n\nThe value of the `openDirection` property defines how the menu content\nis aligned with its trigger element, and in which direction it opens.","i":3,"n":0.213},{"v":"Disabled\n\nNote that you don't need to disable the trigger button separately, as the\ncomponent takes care of this for you.","i":2,"n":0.229},{"v":"Basic example\n\nWith a simple `onSelect` handler.","i":1,"n":0.408}],"4":[{"v":"surfaceWidth","i":9,"n":1},{"v":"searcher","i":8,"n":1},{"v":"rootItem","i":7,"n":1},{"v":"openDirection","i":6,"n":1},{"v":"open","i":5,"n":1},{"v":"items","i":4,"n":1},{"v":"gridLayout","i":3,"n":1},{"v":"emptyResultMessage","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"badgeIcons","i":0,"n":1}],"5":[{"v":"Decides the width of menu's dropdown","i":9,"n":0.408},{"v":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `MenuItem`:s.\n\nSee the docs for the type `MenuSearcher` for type information on\nthe searcher function itself.","i":8,"n":0.169},{"v":"A root breadcrumb item to show above the menu items.\nClicking it navigates back from a sub-menu to the root menu.","i":7,"n":0.224},{"v":"Decides the menu's location in relation to its trigger","i":6,"n":0.333},{"v":"Sets the open state of the menu.","i":5,"n":0.378},{"v":"A list of items and separators to show in the menu.","i":4,"n":0.302},{"v":"Renders list items in a grid layout, rather than a vertical list","i":3,"n":0.289},{"v":"Message to display when search returns 0 results.","i":2,"n":0.354},{"v":"Sets the disabled state of the menu.","i":1,"n":0.378},{"v":"Defines whether the menu should show badges.","i":0,"n":0.378}],"6":[],"7":[{"v":"\"inherit-from-items\" | \"inherit-from-menu\" | \"inherit-from-trigger\"","i":9,"n":0.447},{"v":"(query: string) => Promise<(ListSeparator | MenuItem<any>)[]>","i":8,"n":0.408},{"v":"BreadcrumbsItem","i":7,"n":1},{"v":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","i":6,"n":0.209},{"v":"boolean","i":5,"n":1},{"v":"(ListSeparator | MenuItem<any>)[]","i":4,"n":0.577},{"v":"boolean","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"select","i":2,"n":1},{"v":"navigateMenu","i":1,"n":1},{"v":"cancel","i":0,"n":1}],"9":[{"v":"Is emitted when a menu item is selected.","i":2,"n":0.354},{"v":"Is emitted when a menu item with a sub-menu is selected.","i":1,"n":0.302},{"v":"Is emitted when the menu is cancelled.","i":0,"n":0.378}],"10":[],"11":[{"v":"MenuItem<any>","i":2,"n":1},{"v":"MenuItem<any>","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":36,"$":{"0":[{"v":"exampleComponent limel-example-picker-composite","i":9,"n":0.707},{"v":"exampleComponent limel-example-picker-static-actions","i":8,"n":0.707},{"v":"exampleComponent limel-example-picker-leading-icon","i":7,"n":0.707},{"v":"exampleComponent limel-example-picker-empty-suggestions","i":6,"n":0.707},{"v":"exampleComponent limel-example-picker-value-as-object-with-actions","i":5,"n":0.707},{"v":"exampleComponent limel-example-picker-value-as-object","i":4,"n":0.707},{"v":"exampleComponent limel-example-picker-pictures","i":3,"n":0.707},{"v":"exampleComponent limel-example-picker-icons","i":2,"n":0.707},{"v":"exampleComponent limel-example-picker-multiple","i":1,"n":0.707},{"v":"exampleComponent limel-example-picker-basic","i":0,"n":0.707}],"1":{"v":"Picker","n":1},"2":{"v":"/component/limel-picker/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":10,"n":0.354},{"v":"With static actions\n\nStatic items can be added to the picker to enable triggering custom actions\ndirectly from the results dropdown list.\n\n:::tip\nA typical use case of such actions is scenarios in which the picker's search\nresults or suggestions list does not include what the user wants to pick. By\noffering custom actions right in the list, we can enable users to add missing\nitems.\n:::","i":9,"n":0.13},{"v":"With a \"search\" leading icon","i":8,"n":0.447},{"v":"With a custom search function\n\nThe custom search function returns two suggestions if the query is empty.\nOtherwise, it filters the items based on the query.\n\n:::important\nThis example simulates that searching is done on the server. Because these\nexamples do not _actually_ send requests to the server, we simulate a small\ndelay, using `setTimeout`. **Please do NOT copy that to production code!**\nSee the other examples for code that does not include this artificial delay.\n:::","i":7,"n":0.12},{"v":"Picker with `value` as an object, containing items with menus\nWhile chips inside the picker can be clicked on, resulting in\nan action, they can also have an ellipsis menu which will provide the end users with\nadditional actions.\n\nWhen a menu item is selected from the ellipsis menu, the `onMenuItemSelected` event\nwill be emitted, reflecting the `value` of the selected item.\n\n:::note\nWhen a chip has `removable={true}` and when there are menu items, the \"remove button\" on the\nchip will be automatically added as the last item in the ellipsis menu.\n\nClicking the remove button will emit the same `onRemove` event.\n:::","i":6,"n":0.104},{"v":"With a value as an object","i":5,"n":0.408},{"v":"With pictures","i":4,"n":0.707},{"v":"With icons","i":3,"n":0.707},{"v":"Multiple values can be picked.\n\n- Already picked items are removed from the available options.","i":2,"n":0.267},{"v":"Single value can be picked.\n\nSince all items are already loaded from the server, we can use the\n`allItems` property to provide the picker with all the items at once.\nThe picker uses a default search function that filters the items based on\nthe `text` and `secondaryText` properties of the items.\n\n:::note\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.\n:::","i":1,"n":0.113}],"4":[{"v":"value","i":17,"n":1},{"v":"searcher","i":16,"n":1},{"v":"searchLabel","i":15,"n":1},{"v":"required","i":14,"n":1},{"v":"readonly","i":13,"n":1},{"v":"multiple","i":12,"n":1},{"v":"leadingIcon","i":11,"n":1},{"v":"label","i":10,"n":1},{"v":"invalid","i":9,"n":1},{"v":"helperText","i":8,"n":1},{"v":"emptyResultMessage","i":7,"n":1},{"v":"disabled","i":6,"n":1},{"v":"delimiter","i":5,"n":1},{"v":"badgeIcons","i":4,"n":1},{"v":"allItems","i":3,"n":1},{"v":"actions","i":2,"n":1},{"v":"actionScrollBehavior","i":1,"n":1},{"v":"actionPosition","i":0,"n":1}],"5":[{"v":"Currently selected value or values. Where the value can be an object.","i":17,"n":0.289},{"v":"A search function that takes a search-string as an argument,\nand returns a promise that will eventually be resolved with\nan array of `ListItem`:s.\n\nSee the docs for the type `Searcher` for type information on\nthe searcher function itself.","i":16,"n":0.169},{"v":"Search label to display in the input field when searching","i":15,"n":0.316},{"v":"True if the control requires a value","i":14,"n":0.378},{"v":"Set to `true` to disable adding and removing items,\nbut allow interaction with existing items.","i":13,"n":0.267},{"v":"True if multiple values are allowed","i":12,"n":0.408},{"v":"Leading icon to show to the far left in the text field","i":11,"n":0.289},{"v":"Text to display for the input field of the picker","i":10,"n":0.316},{"v":"Set to `true` to indicate that the current value of the input field is\ninvalid.","i":9,"n":0.267},{"v":"Optional helper text to display below the input field when it has focus","i":8,"n":0.277},{"v":"A message to display when the search returned an empty result","i":7,"n":0.302},{"v":"True if the picker should be disabled","i":6,"n":0.378},{"v":"Sets delimiters between chips. Works only when `multiple` is `true`.","i":5,"n":0.316},{"v":"Whether badge icons should be used in the result list or not","i":4,"n":0.289},{"v":"Only used if no `searcher` is provided. The picker will then use a\ndefault search function that filters the `allItems` based on the\n`text` and `secondaryText` properties of the items.\nThis way, custom search functions are typically only needed when the\nsearch is done on the server.\nFor performance reasons, the default searcher will never return more\nthan 20 items, but if there are more than 20 items, the rest can be\nfound by typing more characters in the search field.","i":3,"n":0.116},{"v":"Static actions that can be clicked by the user.","i":2,"n":0.333},{"v":"Scroll behavior of the custom static actions, when user scrolls\nin the picker's results dropdown. Can be set to `'scroll'` which means\nthe action items will scroll together with the list, or `'sticky'` which\nretains their position at the top or bottom of the drop down while\nscrolling.","i":1,"n":0.151},{"v":"Position of the custom static actions in the picker's results dropdown.\nCan be set to `'top'` or `'bottom'`.","i":0,"n":0.243}],"6":[],"7":[{"v":"ListItem<PickerValue> | ListItem<PickerValue>[]","i":17,"n":0.577},{"v":"(query: string) => Promise<(ListSeparator | ListItem<any>)[]>","i":16,"n":0.408},{"v":"string","i":15,"n":1},{"v":"boolean","i":14,"n":1},{"v":"boolean","i":13,"n":1},{"v":"boolean","i":12,"n":1},{"v":"string","i":11,"n":1},{"v":"string","i":10,"n":1},{"v":"boolean","i":9,"n":1},{"v":"string","i":8,"n":1},{"v":"string","i":7,"n":1},{"v":"boolean","i":6,"n":1},{"v":"string","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"ListItem<PickerValue>[]","i":3,"n":1},{"v":"ListItem<Action>[]","i":2,"n":1},{"v":"\"scroll\" | \"sticky\"","i":1,"n":0.577},{"v":"\"bottom\" | \"top\"","i":0,"n":0.577}],"8":[{"v":"interact","i":2,"n":1},{"v":"change","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Fired when clicking on a selected value","i":2,"n":0.378},{"v":"Fired when a new value has been selected from the picker","i":1,"n":0.302},{"v":"Emitted when the user selects an action.","i":0,"n":0.378}],"10":[],"11":[{"v":"ListItem<PickerValue>","i":2,"n":1},{"v":"ListItem<PickerValue> | ListItem<PickerValue>[]","i":1,"n":0.577},{"v":"Action","i":0,"n":1}]}},{"i":37,"$":{"0":[{"v":"exampleComponent limel-example-popover-styling","i":3,"n":0.707},{"v":"exampleComponent limel-example-popover-trigger-interaction","i":2,"n":0.707},{"v":"exampleComponent limel-example-popover-basic","i":1,"n":0.707},{"v":"slot - Content to put inside the surface","i":0,"n":0.354}],"1":{"v":"Popover","n":1},"2":{"v":"/component/limel-popover/","n":1},"3":[{"v":"Styling\nThere are a few custom CSS properties that you can use to style the popover.","i":3,"n":0.258},{"v":"Trigger Interaction for Popovers\n\nPopovers are typically triggered by a click event, but they can also be triggered\nby hover or focus events. This approach is especially useful when the click event\nis reserved for other interactions, such as navigating to another page or activating\na different function.\n\nTriggering a popover with hover or focus is useful when clicking the trigger element\nis required for actions like navigation, while still providing contextual information\nor options through the popover.\n\n:::important\nKey considerations when using hover and focus triggers:\n\n**Delayed Popover Opening**:\nHovering or focusing on the trigger element should not immediately open the popover.\nAlways introduce a reasonable delay before opening the popover to prevent accidental activation.\nThis prevents an annoying user experience where the popover opens as the user moves\ntheir cursor across the UI. It's especially important in UIs with multiple trigger elements.\n\n**Popover Should Remain Open**:\nThe popover should remain open even if the user moves the cursor away from\nthe trigger element or navigates away with the keyboard.\nThis allows the user to interact with the popover content without it closing unexpectedly.\n\n**Touchscreen Accessibility**:\nConsider the experience for users on touchscreen devices. Hover interactions might not be available,\nso ensure the design is accessible to them.\n\n**Provide Proper Cues**:\nProvide clear visual indicators, or use accessible attributes like `title` or `aria-label`,\nto signal that the trigger element is interactive when hovered or focused.\nThis ensures that users understand they can interact with the element even without clicking.\n\n**Low discoverability**:\nRemember that such interaction are not easily discovered by the end-users.\nTherefore, you should avoid having any critical functionality to be hidden\nbehind such interactions, and only use it as supplementary means of enriching\nthe user experience.\n:::","i":2,"n":0.062},{"v":"Basic example\nThis example shows a simple trigger element that opens a popover when clicked.\n\n:::note\nDue accessibility concerns, the trigger element should be something that can be\ninteracted with, using both mouse click and the <kbd>  spacebar  </kbd>\nor the <kbd>↩ return</kbd> key on the keyboard.\n\nThis is why we are using a `limel-button` element as the trigger in this example,\nwhich is both accessible with mouse and keyboard.\n:::\n\n:::warning\nThe component is emitting a close event when you click outside its container\nor press the <kbd>Esc</kbd> key. However, it’s up to you as consumer to react\nproperly on this event and hide the component (preferably by setting the\nproperty `open` to `false`).\n:::","i":1,"n":0.099},{"v":"A popover is an impermanent layer that is displayed on top of other content\nwhen user taps an element that triggers the popover. This element can be\npractically anything, a button, piece of text, and icon, etc.\n\nPopovers are nonmodal, thus they don't have a semi-transparent backdrop layer\nthat darkens the content below them. Also for the same reason, they can be\ndismissed by tapping or clicking another part of the screen, but not by a\nclicking a button or link on the popover itself.\n\n## Usage\nUse a popover to show **options** or **information** related to the trigger\nonscreen. A typical use case for popovers is a tooltip, in which you show\nhelp text or contextual information to users.\n\nPopovers are most appropriate on larger screens but can be used on smaller\nscreens too, as long as their content is responsive and takes into account\nthe context they are displayed on.\n\nWhen a popover is displayed, interactions with other controls are blocked,\nuntil user dismisses the popover.\n\n\n## Layout\nPopovers has only one slot in which you can import a custom web-component.\n\n:::note\nYou must make sure that web-components that you import into the slot has\na `width: 100%;` style so that it can horizontally stretch across the popover.\n\nHowever, `width` of the popover can be controlled by specifying a CSS variable\nof `--popover-surface-width`. If you don't specify any width, the popover\nwill grow as wide as its content.\n:::\n\n:::important\nDo not make a popover too big. They should never take over the entire screen.\nIf your content is that big, you should probably be using a Modal instead.\n:::","i":0,"n":0.064}],"4":[{"v":"openDirection","i":1,"n":1},{"v":"open","i":0,"n":1}],"5":[{"v":"Decides the popover's location in relation to its trigger","i":1,"n":0.333},{"v":"True if the content within the popover should be visible","i":0,"n":0.316}],"6":[],"7":[{"v":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","i":1,"n":0.209},{"v":"boolean","i":0,"n":1}],"8":[{"v":"close","i":0,"n":1}],"9":[{"v":"Emits an event when the component is closing","i":0,"n":0.354}],"10":[],"11":[{"v":"void","i":0,"n":1}]}},{"i":38,"$":{"0":[{"v":"exampleComponent limel-example-progress-flow-narrow","i":6,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-off-progress-steps","i":5,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-colors-css","i":4,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-colors","i":3,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-disabled-step","i":2,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-secondary-text","i":1,"n":0.707},{"v":"exampleComponent limel-example-progress-flow-basic","i":0,"n":0.707}],"1":{"v":"Progress flow","n":0.707},"2":{"v":"/component/limel-progress-flow/","n":1},"3":[{"v":"Compact layout\n\nFor cases where this component needs to take as little space as possible,\nwe offer an alternative layout. All you need to do is addin the `is-narrow`\nclass to the component.","i":7,"n":0.183},{"v":"Example with off-progress steps\n\nNaturally, the Progress Flow component is used to visualize a continuous linear\nprocess. But sometimes such processes can be abrupted, despite the level of progress.\n\nAbruptions can be excluded and displayed separately (not as a part of the flow)\nusing the `isOffProgress` property.","i":6,"n":0.152},{"v":"Customizing colors further, using CSS\n\nA few CSS variables can be used to customize the look and feel of the steps.\nBut keep in mind that it is not possible to target steps individually and\nchange their colors, using these CSS variables.\n:::note\nUsing CSS variables to tweak the colors, applies the colors globally to the\ncomponent, not to individual steps!\n:::\n:::note\nMake sure that:\n- text has enough contrast with its background and is readable.\n- the `--progress-flow-step-divider-color` has the same color as the component's\ncontainer.\n:::","i":5,"n":0.115},{"v":"Using colors\n\nBy default, each step appears with a light grey background, and when\nselected, it gets the defined `--lime-primary-color` as background. Also,\npassed steps will get the same background color as selected steps by default.\n\nHowever, both of these colors can be customized by specifying color values\nfor `selectedColor` and `passedColor`.\n\nAny icons will get the same color as the text for that step, but the color of\nicons for steps which are neither selected nor passed can be specified using\nthe `iconColor` property.","i":4,"n":0.114},{"v":"Disabled steps\n\nWhile the entire component can be `disabled`,\neach step can also be `disabled` individually.\nThis enables you to ask users to provide required data to be able to continue.","i":3,"n":0.189},{"v":"Example with secondary text\n\nA `secondaryText` can be used to add further information to steps.\nThis could be for instance a timestamp of when a step was activated by the user\nor an explainatory text.","i":2,"n":0.177},{"v":"Basic Example\n\nProgress flow can visualize linear process, consisting of distinct steps.\nSometimes, this is a great alternative to use instead of `limel-select`.\nFor instance, when there are too few options available to choose from, and\nthe options have an incremental order.\n\nEach step can optionally get an icon, to help users understand its meaning\nfaster, and recognize it quicker next time.","i":1,"n":0.134}],"4":[{"v":"readonly","i":2,"n":1},{"v":"flowItems","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Disables the progress flow when `true`.\nThis does not visualize the component that much differently.\nBut since the component does not provide any feedback that users can\ninteract with the component, it makes it perfect for illustrative and\ninformative porpuses.","i":2,"n":0.167},{"v":"What flow items to render","i":1,"n":0.447},{"v":"Set to `true` to disable the progress flow.\nUse `disabled` to indicate that the component can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","i":0,"n":0.164}],"6":[],"7":[{"v":"boolean","i":2,"n":1},{"v":"FlowItem[]","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Fired when a new value has been selected from the progress flow","i":0,"n":0.289}],"10":[],"11":[{"v":"FlowItem","i":0,"n":1}]}},{"i":39,"$":{"0":[{"v":"exampleComponent limel-example-select-dialog","i":8,"n":0.707},{"v":"exampleComponent limel-example-select-change-options","i":7,"n":0.707},{"v":"exampleComponent limel-example-select-preselected","i":6,"n":0.707},{"v":"exampleComponent limel-example-select-with-empty-option","i":5,"n":0.707},{"v":"exampleComponent limel-example-select-multiple","i":4,"n":0.707},{"v":"exampleComponent limel-example-select-with-secondary-text","i":3,"n":0.707},{"v":"exampleComponent limel-example-select-with-separators","i":2,"n":0.707},{"v":"exampleComponent limel-example-select-with-icons","i":1,"n":0.707},{"v":"exampleComponent limel-example-select","i":0,"n":0.707}],"1":{"v":"Select","n":1},"2":{"v":"/component/limel-select/","n":1},"3":[{"v":"Select field inside a dialog","i":9,"n":0.447},{"v":"Changing Available Options\n\nThis example shows how the component works when options are changed\nprogrammatically during the lifetime of the component.\n\nWe have 5 different sets of options:\n1. A set of options with an empty and disabled first option. This is used to ensure that the empty option cannot be re-selected.\n2. A set of options with an empty but non-disabled first option. This is used to ensure that the empty option can be re-selected.\n3. An empty array. This is used to ensure that the component can handle an empty set of options. To load the component with an empty set of options, select this group, then click the \"Reinitialize\" button.\n4. A set of 3 options.\n5. A set of 4 options. Set 4 and 5 are used to ensure that the component can handle sets of different sizes.","i":8,"n":0.086},{"v":"Specific Value Preselected","i":7,"n":0.577},{"v":"With Empty Option\n\nAdding an empty option makes it possible for the user to \"unset\"\nany chosen value.\n\nThis example demonstrates two different approaches to empty options in select components:\n\n**1. Unlabeled empty option**:\nA select with a completely empty option (both `text` and `value` are empty).\n\nProvides a way to clear a selection without any visible text.\nThis works well when the select's purpose is clear from context\nand \"no selection\" feels intuitive.\n\n**2. Labeled empty option**:\nA select with a labeled empty option (using a label as `text`,\nbut with an empty `value`).\n\nThis approach uses descriptive labels like \"All\", \"None\", while still\nhaving an empty `value`. When good labels are used in the right context,\nthis improves clarity for users by explicitly communicating what an empty\nselection means in this specific context.\n\nTry selecting a value below, and then selecting the empty\noption again. Notice how the select's UI resets to an empty default state,\nif no `text` is provided to label the empty option.\n\n:::important\nIf the component is set as `required`, and the empty option is unlabeled,\nit will be removed from the list.\nThis is to ensure that if users open the required dropdown,\nand close it without selecting anything, the component can make set\nitself to `invalid`, forcing the user to choose a choice,\nbefore being able to continue.\n\nHowever, when the empty option is labeled, it will remain in the list,\neven if the component is set as `required`. This can be confusing for users,\nas they may not understand why the empty option is still available and selectable,\nbut once selected, the component becomes `invalid`.\n:::","i":6,"n":0.064},{"v":"Select multiple values","i":5,"n":0.577},{"v":"Select with secondary text for options\nUsing a `secondaryText` you can provide additional information about\neach option in the list, helping the users to select the right choice.\n\n:::note\n1. The secondary text is only visible in the dropdown list,\nnot on the selected option in the input field.\n1. Additionally, on touch screen devices, the secondary text will not\nbe visible in the dropdown list, since the component uses the \"native\"\nselect, which does not have support for additional features like this,\nor displaying icons beside the options.\n:::","i":4,"n":0.112},{"v":"Select with separators between options\n\nSeparators are simple yet powerful design elements that can be\nemployed in lists of items. They offer significant usability advantages\nby providing valuable visual cues that aid users in perceiving\nand navigating through lists. Read more about advantages of using\nseparators in the\n[List component's documentations](/#/component/limel-list/).","i":3,"n":0.149},{"v":"Select with icons for options","i":2,"n":0.447}],"4":[{"v":"value","i":8,"n":1},{"v":"required","i":7,"n":1},{"v":"readonly","i":6,"n":1},{"v":"options","i":5,"n":1},{"v":"multiple","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"invalid","i":2,"n":1},{"v":"helperText","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Currently selected value or values.\nIf `multiple` is `true`, this must be an array. Otherwise it must be a\nsingle value.","i":8,"n":0.229},{"v":"True if the control requires a value.","i":7,"n":0.378},{"v":"Set to `true` to make the field read-only.\nThis visualizes the component slightly differently.\nBut shows no visual sign indicating that the component is disabled\nor can ever become interactable.","i":6,"n":0.192},{"v":"List of options.","i":5,"n":0.577},{"v":"Set to `true` to allow multiple values to be selected.","i":4,"n":0.316},{"v":"Text to display next to the select.","i":3,"n":0.378},{"v":"Set to `true` to indicate that the current value of the select is\ninvalid.","i":2,"n":0.277},{"v":"Optional helper text to display below the input field when it has focus.","i":1,"n":0.277},{"v":"Set to `true` to make the field disabled.\nand visually shows that the `select` component is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe component may become interactable.","i":0,"n":0.18}],"6":[],"7":[{"v":"Option<string> | Option<string>[]","i":8,"n":0.577},{"v":"boolean","i":7,"n":1},{"v":"boolean","i":6,"n":1},{"v":"(ListSeparator | Option<string>)[]","i":5,"n":0.577},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the value is changed.","i":0,"n":0.408}],"10":[],"11":[{"v":"Option<string> | Option<string>[]","i":0,"n":0.577}]}},{"i":40,"$":{"0":[{"v":"exampleComponent limel-example-shortcut-with-click-handler","i":3,"n":0.707},{"v":"exampleComponent limel-example-shortcut-styling","i":2,"n":0.707},{"v":"exampleComponent limel-example-shortcut-notification","i":1,"n":0.707},{"v":"exampleComponent limel-example-shortcut","i":0,"n":0.707}],"1":{"v":"Shortcut","n":1},"2":{"v":"/component/limel-shortcut/","n":1},"3":[{"v":"Example with click handler","i":4,"n":0.5},{"v":"How to style the shortcut\n\nThe component offers different CSS variables for styling\nthe color of the shortcut, and it's icon; as well as\nradius of it's rounded corners, and colors of the notification badge\nand its text.","i":3,"n":0.171},{"v":"Displaying a notification badge\n\nThe component can display a notification badge, which could either be\na `number` or a `string`. Read more about how the badge truncates\nor abbreviates the provided label [here](#/component/limel-badge/).","i":2,"n":0.183},{"v":"Basic example\n\nThis component acts as a link, and therefore comes with features\nsuch as `title` and `target`.\n\nThe `title` tag of the hyperlink can be used to\nprovide additional information about the link.\nIt improves accessibility both for users with assistive technologies,\nand sighted users. Hovering and holding the mouse cursor will\ndisplay a tooltip generated with the specified `title`.\n\nWhat the `target` does is described well in\n[mdn web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target).","i":1,"n":0.126},{"v":"This component can be used on places such as a start page or a dashboard.\nClicking on the component should navigate the user to a new screen,\nto which you need to provide a URL, by specifying an `href` for the `link` property.\n\nBy default, this navigation will happen within the same browser tab.\nHowever, it is possible to override that behavior, by specifying a `target`\nfor the `link` property","i":0,"n":0.124}],"4":[{"v":"link","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"icon","i":2,"n":1},{"v":"disabled","i":1,"n":1},{"v":"badge","i":0,"n":1}],"5":[{"v":"If supplied, the shortcut will be a clickable link.","i":4,"n":0.333},{"v":"The text to show below the shortcut. Long label will be truncated.","i":3,"n":0.289},{"v":"Name of icon for the shortcut.","i":2,"n":0.408},{"v":"Set to `true` if shortcut is disabled.","i":1,"n":0.378},{"v":"If specified, will display a notification badge\non the shortcut.","i":0,"n":0.333}],"6":[],"7":[{"v":"Link","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"boolean","i":1,"n":1},{"v":"number | string","i":0,"n":0.577}],"8":[],"9":[],"10":[],"11":[]}},{"i":41,"$":{"0":[{"v":"exampleComponent limel-example-slider-composite","i":3,"n":0.707},{"v":"exampleComponent limel-example-slider-multiplier-percentage-colors","i":2,"n":0.707},{"v":"exampleComponent limel-example-slider-multiplier","i":1,"n":0.707},{"v":"exampleComponent limel-example-slider-basic","i":0,"n":0.707}],"1":{"v":"Slider","n":1},"2":{"v":"/component/limel-slider/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":4,"n":0.354},{"v":"With percentage colors\nYou can add the `displays-percentage-colors` class to your slider component\nand it will automatically visualize current percentage colors in real-time.\n\nThe colors change with intervals of 10 as users drags the slider pin.\nThe color spectrum is not modifiable, and looks like red → orange → yellow\n→ green → teal.","i":3,"n":0.143},{"v":"With multiplier and step\n\nWhen step is configured and the initial value is not a multiple of the step\nvalue, the slider will round the value to the nearest step when it is changed\nfor the first time. After a valid value has been set, only discrete valid\nvalues will be possible to pick.","i":2,"n":0.141},{"v":"Basic example","i":1,"n":0.707}],"4":[{"v":"valuemin","i":9,"n":1},{"v":"valuemax","i":8,"n":1},{"v":"value","i":7,"n":1},{"v":"unit","i":6,"n":1},{"v":"step","i":5,"n":1},{"v":"readonly","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"helperText","i":2,"n":1},{"v":"factor","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The minimum value allowed","i":9,"n":0.5},{"v":"The maximum value allowed","i":8,"n":0.5},{"v":"The value of the input","i":7,"n":0.447},{"v":"Unit to display next to the value","i":6,"n":0.378},{"v":"The stepping interval to use when adjusting the value","i":5,"n":0.333},{"v":"Disables the slider when `true`. This visualizes the slider slightly differently.\nBut shows no visual sign indicating that the slider field\nis disabled or can ever become interactable.","i":4,"n":0.196},{"v":"Label to display next to the input","i":3,"n":0.378},{"v":"Optional helper text to display below the slider","i":2,"n":0.354},{"v":"Default value: 1.\nThe factor that the properties `value`, `valuemax`, `valuemin`, and\n`step` are multiplied by. On `change` divides the value by the factor,\nso the original format stays the same.","i":1,"n":0.189},{"v":"Disables the slider when `true`,\nand visually shows that the field is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe slider may become interactable.","i":0,"n":0.192}],"6":[],"7":[{"v":"number","i":9,"n":1},{"v":"number","i":8,"n":1},{"v":"number","i":7,"n":1},{"v":"string","i":6,"n":1},{"v":"number","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"number","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the value has been changed","i":0,"n":0.378}],"10":[],"11":[{"v":"number","i":0,"n":1}]}},{"i":42,"$":{"0":[{"v":"exampleComponent limel-example-snackbar-persistent-non-dismissible","i":5,"n":0.707},{"v":"exampleComponent limel-example-snackbar-persistent","i":4,"n":0.707},{"v":"exampleComponent limel-example-snackbar-dismissible","i":3,"n":0.707},{"v":"exampleComponent limel-example-snackbar-with-changing-messages","i":2,"n":0.707},{"v":"exampleComponent limel-example-snackbar-with-action","i":1,"n":0.707},{"v":"exampleComponent limel-example-snackbar","i":0,"n":0.707}],"1":{"v":"Snackbar","n":1},"2":{"v":"/component/limel-snackbar/","n":1},"3":[{"v":"Persistent and non-dismissible\nIn some scenarios, a Snackbar that is persistent\ncan simultaneously be non-dismissible.\n\nThis is good for handling cases in which the system tries to\ncommunicate an ongoing background process or a status that the user\ncannot take an action on, but should be kept informed about.\n\nIn such cases, you should programmatically close the Snackbar\nwhen the process is completed or the status changes!","i":6,"n":0.129},{"v":"Persistent\nDismissive Snackbars appear temporarily, and disappear automatically\nwithout requiring users to manually dismiss them.\nHowever, sometimes you may need to display a Snackbar\nwhich keeps being displayed persistently until the user deliberately takes\nan action or clicks the dismiss button. This could be to ensure that\n\n- the user actually reads message that is being displayed.\n- has time to take an informed decision to press the action button.\n\nTo make a Snackbar persistent, set the `timeout` property to `-1`.","i":5,"n":0.117},{"v":"Dismissible\nBy default, snackbars display a dismiss button.\nThis allows users to close them at any time, before they time out.\n\nThe reason for this default behavior is that snackbars could be\ncovering other important content on the screen,\nor simply have a timeout longer than the time it takes\nfor the user to read the message.\n\nHowever, you can override this default interaction design by setting the\n`dismissible` property to `false`, which removes the close button.","i":4,"n":0.12},{"v":"With changing messages","i":3,"n":0.577},{"v":"With actions\nYou can include a single action button inside the snackbar.\n\n:::important\nKeep in mind that pressing the action button will close\nthe snackbar immediately. The user must be informed that their\nrequested action actually took place. If there is no instant\nvisual feedback (for sighted users) in the user interface that\ninforms the user about the updated state, displaying another\nsnackbar could be a good idea.\n:::","i":2,"n":0.129},{"v":"Basic example\n\nSnackbars should not necessarily require a deliberate action from the user to dismiss them.\nThis is why the component has a default `timeout` and will disappear even if the user\ndoes not interact with it.\n\nAs you see in this example, there is no `timeout` specified.\nTherefore the snackbar will automatically disappear after a few seconds.\n\n:::important\nMake sure to set a proper timeout, based on the length of the text.\nAn average user must be able to read the full message within the given\ntime!\n:::","i":1,"n":0.113},{"v":"A Snackbar –also known as \"Toast\"– is used to inform the end user\nabout an action or a process in the system.\nThe information could vary from announcing that a process has just started,\nis taking place now, has ended, or has been interrupted or canceled.\n\nThe information that you provide using a snackbar should be:\n- temporary\n- contextual\n- short\n- and most importantly, ignorable.\n\nIt means if the user misses the information, it shouldn't be a big deal.\n\n:::note\nIf the information you want to display has a higher importance or priority,\nand you need to make sure that the user takes an action to dismiss it,\nconsider using the [Banner](/#/component/limel-banner/) component instead.\nFor more complex interactions and for delivering more detailed information,\n[Dialog](/#/component/limel-dialog/) is a better choice.\n:::","i":0,"n":0.093}],"4":[{"v":"timeout","i":6,"n":1},{"v":"open","i":5,"n":1},{"v":"multiline","i":4,"n":1},{"v":"message","i":3,"n":1},{"v":"language","i":2,"n":1},{"v":"dismissible","i":1,"n":1},{"v":"actionText","i":0,"n":1}],"5":[{"v":"The amount of time in milliseconds to show the snackbar.\nIf set to `-1`, the snackbar will be persistent.\nThis means:\n- either the end user will need to close it manually,\nwhich requires the `dismissible` property to be set to `true`.\n- or the snackbar needs to be closed programmatically.","i":6,"n":0.147},{"v":"`true` if the snackbar is open, `false` otherwise.","i":5,"n":0.354},{"v":"Whether to show the snackbar with space for multiple lines of text","i":4,"n":0.289},{"v":"The text message to display.","i":3,"n":0.447},{"v":"Defines the language for translations.","i":2,"n":0.447},{"v":"When `true` displays a dismiss button on the snackbar,\nallowing users to close it.","i":1,"n":0.277},{"v":"The text to display for the action button.","i":0,"n":0.354}],"6":[{"v":"deprecated Setting this property no longer has any effect. The property will be removed in a future major version.","i":0,"n":0.229}],"7":[{"v":"number","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":2,"n":0.243},{"v":"boolean","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[{"v":"hide","i":1,"n":1},{"v":"action","i":0,"n":1}],"9":[{"v":"Emitted when the snackbar hides itself","i":1,"n":0.408},{"v":"Emitted when the action button is pressed","i":0,"n":0.378}],"10":[],"11":[{"v":"void","i":1,"n":1},{"v":"void","i":0,"n":1}]}},{"i":43,"$":{"0":[{"v":"exampleComponent limel-example-spinner-size","i":2,"n":0.707},{"v":"exampleComponent limel-example-spinner-color","i":1,"n":0.707},{"v":"exampleComponent limel-example-spinner","i":0,"n":0.707}],"1":{"v":"Spinner","n":1},"2":{"v":"/component/limel-spinner/","n":1},"3":[{"v":"Spinner sizes","i":3,"n":0.707},{"v":"With custom colors\nThe `limel-spinner` is designed to cycle through ten colors which are all\nfrom Lime Technologies' brand colors.\n\nIt is of course possible to override these colors.","i":2,"n":0.196},{"v":"With a generic design or branded for Lime Technologies\nThe `limel-spinner` makes the boring waiting times slightly more cheerful by\ncycling through nine delightful colors.\n\nBy default, the spinner is rendered as a circle.\nHowever, it is possible to set `limeBranded={true}`,\nwhich renders the spinner's shape as Lime Technologies' logo.","i":1,"n":0.149}],"4":[{"v":"size","i":1,"n":1},{"v":"limeBranded","i":0,"n":1}],"5":[{"v":"Determines the size of the spinner.","i":1,"n":0.408},{"v":"Gives the spinner the shape of Lime Technologies' logo","i":0,"n":0.333}],"6":[],"7":[{"v":"\"large\" | \"medium\" | \"mini\" | \"small\" | \"x-small\"","i":1,"n":0.333},{"v":"boolean","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}},{"i":44,"$":{"0":[{"v":"exampleComponent limel-example-split-button-repeat-default-command","i":2,"n":0.707},{"v":"exampleComponent limel-example-split-button-loading","i":1,"n":0.707},{"v":"exampleComponent limel-example-split-button-basic","i":0,"n":0.707}],"1":{"v":"Split button","n":0.707},"2":{"v":"/component/limel-split-button/","n":1},"3":[{"v":"Repeating the default command in the menu\n\nThe default command must be the most commonly used action.\nSuch actions typically have a very short label.\n\nHowever, sometimes it could be useful to repeat the default command again\nin the list of commands, using a more descriptive label which\nclarifies the default action.\n\n:::tip\n- **Limit the overall number of choices** within the menu to less than 10\n- **Order the items within the menu by popularity** and put the most popular ones on top.\n:::","i":3,"n":0.115},{"v":"Split button with loading","i":2,"n":0.5},{"v":"Basic Example\n\nWhen used correctly, a split button reduces visual complexity of the user interface\nby grouping similar commands together.\n\n:::important\nCommands which are included in the menu must be variations of the default command,\nor be very relevant to it.\n:::","i":1,"n":0.167},{"v":"A split button is a button with two components:\na button and a side-menu attached to it.\n\nClicking on the button runs a default action,\nand clicking on the arrow opens up a list of other possible actions.\n\n:::warning\n- Never use a split button for navigation purposes, such as going to next page.\nThe button should only be used for performing commands!\n- Never use this component instead of a Select or Menu component!\n:::","i":0,"n":0.121}],"4":[{"v":"primary","i":6,"n":1},{"v":"loadingFailed","i":5,"n":1},{"v":"loading","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"items","i":2,"n":1},{"v":"icon","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"Set to `true` to make the button primary.","i":6,"n":0.354},{"v":"Set to `true` to indicate failure instead of success when the button is\nno longer in the `loading` state.","i":5,"n":0.236},{"v":"Set to `true` to put the button in the `loading` state.\nThis also disables the button.","i":4,"n":0.258},{"v":"The text to show on the default action part of the button.","i":3,"n":0.289},{"v":"A list of items and separators to show in the menu.","i":2,"n":0.302},{"v":"Set icon for the button","i":1,"n":0.447},{"v":"Set to `true` to disable the button.","i":0,"n":0.378}],"6":[],"7":[{"v":"boolean","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"(ListSeparator | MenuItem<any>)[]","i":2,"n":0.577},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"select","i":0,"n":1}],"9":[{"v":"Is emitted when a menu item is selected.","i":0,"n":0.354}],"10":[],"11":[{"v":"MenuItem<any>","i":0,"n":1}]}},{"i":45,"$":{"0":[{"v":"exampleComponent limel-example-switch-readonly","i":2,"n":0.707},{"v":"exampleComponent limel-example-switch-helper-text","i":1,"n":0.707},{"v":"exampleComponent limel-example-switch","i":0,"n":0.707}],"1":{"v":"Switch","n":1},"2":{"v":"/component/limel-switch/","n":1},"3":[{"v":"Customizing the visualization of the `readonly` state\nIt is possible and recommended that you enhance the visualization of a `boolean` field\nin a `readonly` state.\n\nBecause depending on the context, the default UI of the `readonly` state may not always\nprovide the best way of _visualizing information_, potentially leading to\nconfusion and negatively affecting the end-users' experience.\n\n:::important\nBefore reading the documentations below, make sure to read\n1. our guides about the difference between\n[Disabled vs. Readonly](/#/DesignGuidelines/disabled-vs-readonly.md/) in our components.\n2. our guidelines about [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/).\n:::\n\nUsing the `readonlyLabels` optional prop, you can override the `label` and\ncustomize it accordingly. Additionally, by using the `icon` prop, you can\noverride the default icons and their colors.","i":3,"n":0.099},{"v":"With `helperText`\n\nSwitch can have a helper text, which is useful when providing additional information and\ncan clarify functionality of the switch for the user.\n\nThe helper text is displayed when the user puts focus on the switch, and works with keyboard\nnavigation as well. However, on touchscreen devices, the helper text is always displayed.","i":2,"n":0.14},{"v":"The Switch component is a fundamental element in UI design that serves as a toggle switch\nto control the state of a specific setting or option in an application or website.\nThe two distinct positions of the Switch are visually indicative of the two states:\nON and OFF; making it easy for users to understand the current state of the controlled feature.\n\nThe Switch component is widely used in user interfaces to enable users to\nquickly and intuitively change binary settings.\n\n:::important\nCheckboxes are sometimes used interchangeably with switches in user interfaces.\nBut there is an important difference between the two! Please read our guidelines about\n[Switch vs. Checkbox](/#/DesignGuidelines/switch-vs-checkbox.md/).","i":0,"n":0.1}],"4":[{"v":"value","i":6,"n":1},{"v":"readonlyLabels","i":5,"n":1},{"v":"readonly","i":4,"n":1},{"v":"label","i":3,"n":1},{"v":"invalid","i":2,"n":1},{"v":"helperText","i":1,"n":1},{"v":"disabled","i":0,"n":1}],"5":[{"v":"The value of the switch","i":6,"n":0.447},{"v":"The labels to use to clarify what kind of data is being visualized,\nwhen the component is `readonly`.","i":5,"n":0.243},{"v":"Disables the switch when `true`. This visualizes the switch slightly differently.\nBut shows no visual sign indicating that the switch is disabled\nor can ever become interactable.","i":4,"n":0.2},{"v":"Label to display next to the switch","i":3,"n":0.378},{"v":"Set to `true` to indicate that the current value is invalid.","i":2,"n":0.302},{"v":"Optional helper text to display below the switch","i":1,"n":0.354},{"v":"Disables the switch when `true`,\nand visually shows that the switch is editable but disabled.\nThis tells the users that if certain requirements are met,\nthe switch may become interactable.","i":0,"n":0.192}],"6":[{"v":"beta ","i":0,"n":1}],"7":[{"v":"boolean","i":6,"n":1},{"v":"Label<boolean>[]","i":5,"n":1},{"v":"boolean","i":4,"n":1},{"v":"string","i":3,"n":1},{"v":"boolean","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"boolean","i":0,"n":1}],"8":[{"v":"change","i":0,"n":1}],"9":[{"v":"Emitted when the value has changed","i":0,"n":0.408}],"10":[],"11":[{"v":"boolean","i":0,"n":1}]}},{"i":46,"$":{"0":[{"v":"exampleComponent limel-example-tab-bar-with-equal-tab-width","i":2,"n":0.707},{"v":"exampleComponent limel-example-tab-bar-with-dynamic-tab-width","i":1,"n":0.707},{"v":"exampleComponent limel-example-tab-bar","i":0,"n":0.707}],"1":{"v":"Tab bar","n":0.707},"2":{"v":"/component/limel-tab-bar/","n":1},"3":[{"v":"Tab bars with custom styles\nIn some situations and for the sake of UI design, you may want to have tabs\nthat equally share the available screen width and stretch. To get such a\nresult, you can add the `has-tabs-with-equal-width` class to the tab bar.","i":3,"n":0.154},{"v":"Default UI of Tab bars\nBy default, tabs dynamically adjust their width to their own content, which\nmeans a tab with a larger label will be bigger than one with a shorter one.\nThis is the preferred layout for tabs.","i":2,"n":0.164},{"v":"Tabs are great to organize information hierarchically in the interface and divide it into distinct categories. Using tabs, you can create groups of content that are related and at the same level in the hierarchy.\n:::warning\nTab bars should be strictly used for navigation at the top levels.\nThey should never be used to perform actions, or navigate away from the view which contains them.\n:::\nAn exception for using tab bars in a high level of hierarchy is their usage in modals. This is because modals are perceived as a separate place and not a part of the current context. Therefore you can use tab bars in a modal to group and organize its content.\nA tab bar can contain an unlimited number of tabs. However, depending on the device width and width of the tabs, the number of tabs that are visible at the same time will vary. When there is limited horizontal space, the component shows a left-arrow and/or right-arrow button, which scrolls and reveals the additional tabs. The tab bar can also be swiped left and right on a touch-device.\n:::tip Other things to consider\nNever divide the content of a tab using a nested tab bar.\nNever place two tab bars within the same screen.\nNever use background color for icons in tabs.\nAvoid having long labels for tabs.\nA tab will never be removed or get disabled, even if there is no content under it.\n:::","i":0,"n":0.066}],"4":[{"v":"tabs","i":0,"n":1}],"5":[{"v":"List of tabs to display","i":0,"n":0.447}],"6":[],"7":[{"v":"Tab[]","i":0,"n":1}],"8":[{"v":"changeTab","i":0,"n":1}],"9":[{"v":"Emitted when a tab has been changed","i":0,"n":0.378}],"10":[],"11":[{"v":"Tab","i":0,"n":1}]}},{"i":47,"$":{"0":[{"v":"exampleComponent limel-example-tab-panel","i":1,"n":0.707},{"v":"slot - Content to put inside the `limel-tab-panel`. Each slotted element\nmust have the `id` attribute equal to the id of the tab it belongs to.","i":0,"n":0.2}],"1":{"v":"Tab panel","n":0.707},"2":{"v":"/component/limel-tab-panel/","n":1},"3":[{"v":"This example illustrates how to add custom components inside the `limel-tab-panel`.\n\nEach component will simulate loading the data it needs once the tab has been\nactivated and then display the actual content. If the button is pressed, the\ncomponent will emit the `changeTab` event to change the badge inside the\ncorresponding tab.","i":1,"n":0.144},{"v":"The `limel-tab-panel` component uses the `limel-tab-bar` component together\nwith custom slotted components and will display the content for the currently\nactive tab. Each slotted component must have an id equal to the id of the\ncorresponding tab it belongs to. These components should implement the\n[TabPanelComponent](#/type/TabPanelComponent/) interface.\n\nThe `limel-tab-panel` component will automatically set each tab configuration\non the corresponding slotted component as a property named `tab` so that the\ncomponent can take action upon that. Sometimes it might be desirable to not\nload data or render anything until the tab is active.\n\nThe slotted components can also emit the `changeTab` event to update anything\ninside the actual tab, e.g. to change the icon, color or badge.","i":0,"n":0.097}],"4":[{"v":"tabs","i":0,"n":1}],"5":[{"v":"The tabs to display in the panel","i":0,"n":0.378}],"6":[],"7":[{"v":"Tab[]","i":0,"n":1}],"8":[{"v":"changeTab","i":0,"n":1}],"9":[{"v":"Emitted when a tab has been changed","i":0,"n":0.378}],"10":[],"11":[{"v":"Tab","i":0,"n":1}]}},{"i":48,"$":{"0":[{"v":"exampleComponent limel-example-table-interactive-rows","i":14,"n":0.707},{"v":"exampleComponent limel-example-table-layout-low-density","i":13,"n":0.707},{"v":"exampleComponent limel-example-table-layout-stretch-columns","i":12,"n":0.707},{"v":"exampleComponent limel-example-table-layout-stretch-last-column","i":11,"n":0.707},{"v":"exampleComponent limel-example-table-layout-default","i":10,"n":0.707},{"v":"exampleComponent limel-example-table-default-sorted","i":9,"n":0.707},{"v":"exampleComponent limel-example-table-selectable-rows","i":8,"n":0.707},{"v":"exampleComponent limel-example-table-activate-row","i":7,"n":0.707},{"v":"exampleComponent limel-example-table-remote","i":6,"n":0.707},{"v":"exampleComponent limel-example-table-local","i":5,"n":0.707},{"v":"exampleComponent limel-example-table-sorting-disabled","i":4,"n":0.707},{"v":"exampleComponent limel-example-table-movable-columns","i":3,"n":0.707},{"v":"exampleComponent limel-example-table-header-menu","i":2,"n":0.707},{"v":"exampleComponent limel-example-table-custom-components","i":1,"n":0.707},{"v":"exampleComponent limel-example-table","i":0,"n":0.707}],"1":{"v":"Table","n":1},"2":{"v":"/component/limel-table/","n":1},"3":[{"v":"Visualizing clickable rows better\nBy taking advantage of the `has-interactive-rows` class, hovering on a row\nwill display an elevated visual effect, giving it more affordance and a solid\nfeeling of interactivity.\n\n:::note usage notes\n- Only use this class when clicking on an entire row triggers a reaction in\nthe system, for example a card or a modal is opened to show further details.\n:::","i":15,"n":0.131},{"v":"lowDensity\n\n```tsx\nlayout=\"lowDensity\"\n```\nBy using this layout option, you can easily convert the table into an airy list of items.\n\nThis type of UI is suitable for generating minimalist lists of items with\nonly a few properties on each. Especially when the property values are not\nself-explanatory (such as an email address) and require a bit of extra help\nto know what they are.\n\nUsing this UI, you can take advantage of the sticky header of the table which\nexplains what each cell is about, and also enjoy sorting possibilities it\noffers.\n\n:::note usage notes\n- In this low-density UI, all cells will get a fixed height, which may affect\nthe layout of custom components that you place inside them.\n- This UI is not preferred for data intensive views, in which the user's main\ntask is processing the presented data and making sense of it. For such views,\nuse the table component with its normal density.\n:::","i":14,"n":0.084},{"v":"stretchColumns\n\n```tsx\nlayout=\"stretchColumns\"\n```\n\nWith this layout, the table stretches columns so that all\nfit perfectly in the table container, when extra space is available.\nIf all columns cannot fit within the available width,\nthen a horizontal scrollbar will appear.","i":13,"n":0.174},{"v":"stretchLastColumn\n\n```tsx\nlayout=\"stretchLastColumn\"\n```\n\nWorks just like `default`, but unlike the default layout\nwhich resulted in having an empty last column, in this layout\nthe last existing column will stretch out to fill up the remaining table width.","i":12,"n":0.177},{"v":"Layout\nColumns and their content can be decisive factors in how a table is\npreferred to rendered in the user interface. To set your preferred\nrendering, choose one of the available `layout` properties.\n\n\n```tsx\nlayout=\"default\"\n```\nThe default layout resizes the table's columns,\nin a way that each column becomes as wide as the data it holds.\n\n:::important\nNote that be default, table columns have a maximum width of `40rem`.\nThis means, they can never grow wider than that, unless you specify\nanother size using the `--table-max-column-width` CSS variable.\n\nThis applies to all other layouts presented further down as well!\n:::\n\nIf there is additional space available on the right side of the last column,\nrows will stretch to fill the space and look visually as wide as the table.\n\n:::note\nWhile scrolling, new rows get lazy-loaded. Since the new data may have wider\nlength, it might affect rendering of the layout in real-time.\nThis means columns can get resized while user is scrolling down.\n:::\n\n:::tip\nIt is also possible to affect internal layout of each column, by specifying\n`horizontalAlign` on the column headers, to `left` (default), `center`,\nor `right`. This basically defines the text-alignment for all the cells in that column.\n:::","i":11,"n":0.075},{"v":"Default sorted columns\n\nIn this example, the table is sorted on *two* columns. Primary sorting is\ndone on the \"Eggs per clutch\" column, and secondary sorting is done on the\n\"Name\" column. The result is that within each \"group\" of birds that have the\nsame number of eggs per clutch, the birds are sorted by name.","i":10,"n":0.139},{"v":"Selectable rows with updating aggregates","i":9,"n":0.447},{"v":"Activate a row","i":8,"n":0.577},{"v":"Remote sorting and pagination","i":7,"n":0.5},{"v":"Local sorting and pagination","i":6,"n":0.5},{"v":"Disable column sorting\n\nBy default, all columns can be sorted by end-users, if they click on\na column header. An arrow icon on the header visualizes the\ndirection of sorting, when a column is sorted.\n\nHowever, you can disable the sorting possibility in individual columns,\nby setting the `headerSort` to `false`.","i":5,"n":0.147},{"v":"Movable columns","i":4,"n":0.707},{"v":"Column header menu\n\nYou can also add custom components to the header cell of a column. In\ncontrast to custom components used elsewhere in the table, custom components\nused in the header do not replace the entire content of the cell. Instead,\nthey appear in a slot next to the column sorting icon.","i":3,"n":0.143},{"v":"Custom components\n\nYou can specify a custom component to use for any column in your table. This\nis done under the `component` key in the schema, following the\n[TableComponentDefinition](#/type/TableComponentDefinition/) specification,\nfor example:\n\n```ts\nconst columns = [\n    {\n        title: 'Food',\n        field: 'food',\n        component: { name: 'my-fancy-food-displayer' },\n    },\n];\n```\n\nWhile you can, in principle, use any component in a table, your custom table\ncomponents should implement the [TableComponent](#/type/TableComponent/)\ninterface.","i":2,"n":0.13}],"4":[{"v":"totalRows","i":14,"n":1},{"v":"sorting","i":13,"n":1},{"v":"selection","i":12,"n":1},{"v":"selectable","i":11,"n":1},{"v":"pageSize","i":10,"n":1},{"v":"page","i":9,"n":1},{"v":"movableColumns","i":8,"n":1},{"v":"mode","i":7,"n":1},{"v":"loading","i":6,"n":1},{"v":"layout","i":5,"n":1},{"v":"emptyMessage","i":4,"n":1},{"v":"data","i":3,"n":1},{"v":"columns","i":2,"n":1},{"v":"aggregates","i":1,"n":1},{"v":"activeRow","i":0,"n":1}],"5":[{"v":"The number of total rows available for the data","i":14,"n":0.333},{"v":"The initial sorted columns","i":13,"n":0.5},{"v":"Selected data. Requires `selectable` to be true.","i":12,"n":0.378},{"v":"Enables row selection","i":11,"n":0.577},{"v":"Number of rows per page","i":10,"n":0.447},{"v":"The page to show","i":9,"n":0.5},{"v":"Set to `true` to enable reordering of the columns by dragging them","i":8,"n":0.289},{"v":"Set to either `local` or `remote` to change how the table handles the\nloaded data. When in `local` mode, all sorting and pagination will be\ndone locally with the data given. When in `remote` mode, the consumer\nis responsible to give the table new data when a `load` event occurs","i":7,"n":0.146},{"v":"Set to `true` to trigger loading animation","i":6,"n":0.378},{"v":"Defines the layout of the table, based on how width of the columns are calculated.\n\n- `default`: makes columns as wide as their contents.\n- `stretchLastColumn`: makes columns as wide as their contents, stretch the last column to fill up the remaining table width.\n- `stretchColumns`: stretches all columns to fill the available width when possible.\n- `lowDensity`: makes columns as wide as their contents, and creates a low density and airy layout.","i":5,"n":0.12},{"v":"A message to display when the table has no data","i":4,"n":0.316},{"v":"Data to be displayed in the table","i":3,"n":0.378},{"v":"Columns used to display the data","i":2,"n":0.408},{"v":"Column aggregates to be displayed in the table","i":1,"n":0.354},{"v":"Active row in the table","i":0,"n":0.447}],"6":[],"7":[{"v":"number","i":14,"n":1},{"v":"ColumnSorter[]","i":13,"n":1},{"v":"object[]","i":12,"n":1},{"v":"boolean","i":11,"n":1},{"v":"number","i":10,"n":1},{"v":"number","i":9,"n":1},{"v":"boolean","i":8,"n":1},{"v":"\"local\" | \"remote\"","i":7,"n":0.577},{"v":"boolean","i":6,"n":1},{"v":"\"default\" | \"lowDensity\" | \"stretchColumns\" | \"stretchLastColumn\"","i":5,"n":0.378},{"v":"string","i":4,"n":1},{"v":"object[]","i":3,"n":1},{"v":"Column<any>[]","i":2,"n":1},{"v":"ColumnAggregate[]","i":1,"n":1},{"v":"{ id?: string | number; }","i":0,"n":0.408}],"8":[{"v":"sort","i":6,"n":1},{"v":"selectAll","i":5,"n":1},{"v":"select","i":4,"n":1},{"v":"load","i":3,"n":1},{"v":"changePage","i":2,"n":1},{"v":"changeColumns","i":1,"n":1},{"v":"activate","i":0,"n":1}],"9":[{"v":"Emitted when `mode` is `local` the data is sorted","i":6,"n":0.333},{"v":"Emitted when the select all rows state is toggled","i":5,"n":0.333},{"v":"Emitted when the row selection has been changed","i":4,"n":0.354},{"v":"Emitted when `mode` is `remote` and the table is loading new data. The\nconsumer is responsible for giving the table new data","i":3,"n":0.218},{"v":"Emitted when a new page has been set","i":2,"n":0.354},{"v":"Emitted when the columns have been changed","i":1,"n":0.378},{"v":"Emitted when a row is activated","i":0,"n":0.408}],"10":[],"11":[{"v":"ColumnSorter[]","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"object[]","i":4,"n":1},{"v":"TableParams","i":3,"n":1},{"v":"number","i":2,"n":1},{"v":"Column<any>[]","i":1,"n":1},{"v":"object","i":0,"n":1}]}},{"i":49,"$":{"0":[{"v":"beta ","i":13,"n":1},{"v":"exampleComponent limel-example-text-editor-composite","i":12,"n":0.707},{"v":"exampleComponent limel-example-text-editor-triggers","i":11,"n":0.707},{"v":"exampleComponent limel-example-text-editor-custom-element","i":10,"n":0.707},{"v":"exampleComponent limel-example-text-editor-ui","i":9,"n":0.707},{"v":"exampleComponent limel-example-text-editor-size","i":8,"n":0.707},{"v":"exampleComponent limel-example-text-editor-allow-resize","i":7,"n":0.707},{"v":"exampleComponent limel-example-text-editor-with-inline-images-base64","i":6,"n":0.707},{"v":"exampleComponent limel-example-text-editor-with-inline-images-file-storage","i":5,"n":0.707},{"v":"exampleComponent limel-example-text-editor-with-tables","i":4,"n":0.707},{"v":"exampleComponent limel-example-text-editor-with-html","i":3,"n":0.707},{"v":"exampleComponent limel-example-text-editor-with-markdown","i":2,"n":0.707},{"v":"exampleComponent limel-example-text-editor-as-form-component","i":1,"n":0.707},{"v":"exampleComponent limel-example-text-editor-basic","i":0,"n":0.707}],"1":{"v":"Text editor","n":0.707},"2":{"v":"/component/limel-text-editor/","n":1},"3":[{"v":"Composite example","i":13,"n":0.707},{"v":"Custom triggers\n\nA trigger is a character or sequence of characters that if typed in the text editor\nwill initiate a trigger session. The session is initialized with a `triggerStart`\nevent. Subsequent characters written after the trigger sequence will be sent in a\n`triggerChange` event. When the focus is removed from the trigger a `triggerStop`\nevent will be sent.\n\nThe `triggerStart` event contains a `TextEditorInserter` object containing functions\nto manipulate the state of the text editor around the trigger. Using any of the\nsupplied methods will effectivly replace the trigger content in the text editor with\nthe content of choice.\n\nIn this example we pass either plain text, HTML string, or a `limel-chip`\nrepresenting some chosen user in a mention like situation.\n\n:::note\nChanging the contentType resets the text editor with an empty value.","i":12,"n":0.091},{"v":"A custom element can be configured\n\nThe default behavior of the text editor is to only allow standard HTML element\nlike `em` and `h`. To add your own custom elements one can add custom elements\npassing them to the `plugins` property.\n\nIn this example we pass `limel-chip` as a custom element along with the allowed\nattributes `text` and `icon`.","i":11,"n":0.136},{"v":"UI\nBy configuring the `ui` prop, you can define how the editor should be\nrendered for the end users. The following options are available:\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.\n\n:::important\nIt's very important to add a `placeholder` or `label` when using\nthe `minimal` or `no-toolbar` UI. The reason is that without a placeholder or a label,\nthere is no visual clue for the user to realize that the grey box is\nactually an input field that they can type in,\nsince the toolbar would not be shown unless the input filed is focused.\n:::","i":10,"n":0.078},{"v":"Resize with container\nSometimes, you may want to make the text editor to follow the size of its container,\nboth in width and height; for instance, when the container is resizable by the user.\n\nIn such cases, make sure to set `allowResize={false}` on the component.\n\nHowever, you can still constrain the text editor to never grow beyond a certain height,\nby either\n- setting a fixed `height` or `max-height` the component itself, or using\n`--text-editor-max-height` CSS variable;\n- or alternatively by setting a fixed `height` or `max-height` on the container\nelement of the component.\n\nIn this example, the maximum height is set to `15rem`, which means that:\n1. the editor will adjust itself to the content inside,\npushing out its container and making it taller, until it reaches `15rem` in height.\n1. and also when you manually resize the container,\nthe editor will try to fill the available surface area, until its height reaches `15rem`.","i":9,"n":0.084},{"v":"Allow resize\nThe text editor automatically adjusts its own height to fit the content inside.\nSo as the user types, the editor will grow taller, potentially resizing its own\ncontainer element.\n\nBy default, the user can also manually change the height of the text editor\nby dragging its bottom right corner.\n\nAs soon as the user has changed the height, this will override the automatic\nresizing, and the editor will no longer adjust its height to fit the content inside.\n\nBy setting `allowResize` to `false`, you can disable the end user\nto resize the text editor vertically.\n\n:::tip\n1. The text editor makes sure that it never becomes taller than the viewport's height.\nThis way, its toolbar and resize control will remain reasonably visible, when\nthe component is auto resizing itself based on the content it holds.\nThis behavior is controlled by the `--text-editor-max-height` CSS variable,\nwhich defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`,\ntaking also into account the safe zones which are defined by the environment variables.\n\n1. Using `max-height` and `min-height` CSS properties on the component itself,\n(or using `--text-editor-max-height`), you can limit the resizing to a specific range.\n:::","i":8,"n":0.076},{"v":"Handling inline images (with base64 encoded data)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can immediately insert the image\nas base64 encoded data using the `insertImage` method.\n\n:::note\nThis example demonstrates the simplest approach using base64 encoding.\nHowever, for production use, it is recommended to upload images to\nexternal file storage and insert the src URL of the uploaded image\ninstead, as shown in the file-storage example.","i":7,"n":0.097},{"v":"Handling inline images (with external file storage)\n\nTo allow users to paste images directly into the text editor, you can\nlisten to the `imagePasted` event, which is triggered when an image file\nis pasted into the editor.\n\nThe `imagePasted` event contains an `ImageInserter` object, which you can\nuse to insert a thumbnail of the pasted image into the editor.\nAfter the thumbnail is inserted, you can upload the image to an external\nfile storage and insert the src url of the uploaded image using the\n`insertImage` method.\n\nIf the image upload fails, you can insert a failed thumbnail using the\n`insertFailedThumbnail` method.\n\n:::note\nIn this example, because we don't actually upload the image you paste\nanywhere, once the \"upload\" is done, we will replace the image you\npasted with a url to an image of the Lime CRM logo.\n\nIn reality, you would of course insert the url to the newly uploaded\nimage instead.","i":6,"n":0.085},{"v":"Text editor with tables (HTML mode only).\n\nBasic table support is available when using the text editor in `HTML` mode.\nThis allows you to paste and display tables in the text editor.\nComplex operations are not supported, adding and removing columns are not supported.\n\nTables will only appear as expected in text-editor fields that are in `HTML` mode.","i":5,"n":0.136},{"v":"Text editor in HTML mode.\n\nWhen using the text editor in HTML mode the `value` property is expected to contain\nan html formatted string and the output will likewise be html.","i":4,"n":0.186},{"v":"Text editor in markdown mode.\n\nWhen using the text editor in markdown mode the `value` property is expected to contain\na markdown formatted string and the output will likewise be markdown. This is the default\nif no value for `contentType` is provided.","i":3,"n":0.16},{"v":"Using the text editor as a form component\n\nHere we have a simple form that uses the `limel-text-editor` component,\ninstead of a regular text input field.\n\n:::note\nThis allows the user to write rich text, with markdown support, in the form.\nBut keep in mind that the value will be saved as a markdown string,\nand can also contain HTML tags, depending on what the users input\nin the filed.\n:::","i":2,"n":0.126},{"v":"Basic example","i":1,"n":0.707},{"v":"A rich text editor that offers a rich text editing experience with markdown support,\nin the sense that you can easily type markdown syntax and see the rendered\nresult as rich text in real-time. For instance, you can type `# Hello, world!`\nand see it directly turning to a heading 1 (an `<h1>` HTML element).\n\nNaturally, you can use standard keyboard hotkeys such as <kbd>Ctrl</kbd> + <kbd>B</kbd>\nto toggle bold text, <kbd>Ctrl</kbd> + <kbd>I</kbd> to toggle italic text, and so on.","i":0,"n":0.115}],"4":[{"v":"value","i":13,"n":1},{"v":"ui","i":12,"n":1},{"v":"triggers","i":11,"n":1},{"v":"required","i":10,"n":1},{"v":"readonly","i":9,"n":1},{"v":"placeholder","i":8,"n":1},{"v":"language","i":7,"n":1},{"v":"label","i":6,"n":1},{"v":"invalid","i":5,"n":1},{"v":"helperText","i":4,"n":1},{"v":"disabled","i":3,"n":1},{"v":"customElements","i":2,"n":1},{"v":"contentType","i":1,"n":1},{"v":"allowResize","i":0,"n":1}],"5":[{"v":"Description of the text inside the editor as markdown","i":13,"n":0.333},{"v":"Specifies the visual appearance of the editor.\n\n- `standard`: The default editor appearance with a full toolbar and\n   standard layout.\n- `minimal`: A compact editor appearance, ideal for limited space\n   scenarios such as mobile devices. In this mode, the toolbar is hidden\n   until the editor is focused.\n- `no-toolbar`: A basic textarea appearance without any text styling toolbar.\n   This mode is suitable for scenarios where you want to provide a simple\n   text input without any visible formatting options; but still provide\n   support for markdown syntax and rich text, using hotkeys or when pasting.","i":12,"n":0.105},{"v":"A set of trigger characters\n\nDefining a character here will enable trigger events to be sent if the\ncharacter is detected in the editor.","i":11,"n":0.213},{"v":"Set to `true` to indicate that the field is required.\n\n:::important\nAn empty but required field is not automatically considered invalid.\nYou must make sure to check the validity of the field on your own,\nand properly handle the `invalid` state.\n:::","i":10,"n":0.164},{"v":"Set to `true` to make the component read-only.\nUse `readonly` when the field is only there to present the data it holds,\nand will not become possible for the current user to edit.\n:::note\nConsider that it might be better to use `limel-markdown`\ninstead of `limel-text-editor` when the goal is visualizing data.\n:::","i":9,"n":0.146},{"v":"The placeholder text shown inside the input field,\nwhen the field is empty.","i":8,"n":0.289},{"v":"Defines the language for translations.","i":7,"n":0.447},{"v":"The label of the editor","i":6,"n":0.447},{"v":"Set to `true` to indicate that the current value of the editor is\ninvalid.","i":5,"n":0.277},{"v":"Optional helper text to display below the input field when it has focus","i":4,"n":0.277},{"v":"Set to `true` to disable the field.\nUse `disabled` to indicate that the field can normally be interacted\nwith, but is currently disabled. This tells the user that if certain\nrequirements are met, the field may become enabled again.","i":3,"n":0.167},{"v":"A list of custom elements\n\nAny `CustomElement` that should be used inside the text editor needs\nto be defined here.","i":2,"n":0.236},{"v":"The type of content that the editor should handle and emit, defaults to `markdown`\n\nAssumed to be set only once, so not reactive to changes","i":1,"n":0.204},{"v":"Set to `true` to allow the user to vertically resize the editor.\nSet to `false` to disable the resize functionality.","i":0,"n":0.229}],"6":[{"v":"alpha ","i":3,"n":1},{"v":"private ","i":2,"n":1},{"v":"alpha ","i":1,"n":1},{"v":"private ","i":0,"n":1}],"7":[{"v":"string","i":13,"n":1},{"v":"\"minimal\" | \"no-toolbar\" | \"standard\"","i":12,"n":0.447},{"v":"TriggerCharacter[]","i":11,"n":1},{"v":"boolean","i":10,"n":1},{"v":"boolean","i":9,"n":1},{"v":"string","i":8,"n":1},{"v":"\"da\" | \"de\" | \"en\" | \"fi\" | \"fr\" | \"nb\" | \"nl\" | \"no\" | \"sv\"","i":7,"n":0.243},{"v":"string","i":6,"n":1},{"v":"boolean","i":5,"n":1},{"v":"string","i":4,"n":1},{"v":"boolean","i":3,"n":1},{"v":"CustomElementDefinition[]","i":2,"n":1},{"v":"\"html\" | \"markdown\"","i":1,"n":0.577},{"v":"boolean","i":0,"n":1}],"8":[{"v":"triggerStop","i":6,"n":1},{"v":"triggerStart","i":5,"n":1},{"v":"triggerChange","i":4,"n":1},{"v":"metadataChange","i":3,"n":1},{"v":"imageRemoved","i":2,"n":1},{"v":"imagePasted","i":1,"n":1},{"v":"change","i":0,"n":1}],"9":[{"v":"Dispatched if a trigger session is ended. That is if the selection\ngoes outside the trigger input or if something is inserted using the\nsupplied `TextEditor` insert function.","i":6,"n":0.196},{"v":"Dispatched if a trigger character is detected.","i":5,"n":0.378},{"v":"Dispatched if a input is changed during an active trigger.","i":4,"n":0.316},{"v":"Dispatched when the metadata of the editor changes","i":3,"n":0.354},{"v":"Dispatched when a image is removed from the editor","i":2,"n":0.333},{"v":"Dispatched when a image is pasted into the editor","i":1,"n":0.333},{"v":"Dispatched when a change is made to the editor","i":0,"n":0.333}],"10":[{"v":"alpha ","i":12,"n":1},{"v":"private ","i":11,"n":1},{"v":"alpha ","i":10,"n":1},{"v":"private ","i":9,"n":1},{"v":"alpha ","i":8,"n":1},{"v":"private ","i":7,"n":1},{"v":"alpha ","i":6,"n":1},{"v":"private ","i":5,"n":1},{"v":"deprecated - This event is deprecated and will be removed in a future version.\nUse the `metadataChange` event instead to track image removals.","i":4,"n":0.213},{"v":"alpha ","i":3,"n":1},{"v":"private ","i":2,"n":1},{"v":"alpha ","i":1,"n":1},{"v":"private ","i":0,"n":1}],"11":[{"v":"TriggerEventDetail","i":6,"n":1},{"v":"TriggerEventDetail","i":5,"n":1},{"v":"TriggerEventDetail","i":4,"n":1},{"v":"EditorMetadata","i":3,"n":1},{"v":"EditorImage","i":2,"n":1},{"v":"ImageInserter","i":1,"n":1},{"v":"string","i":0,"n":1}]}},{"i":50,"$":{"0":[{"v":"exampleComponent limel-example-tooltip-composite","i":2,"n":0.707},{"v":"exampleComponent limel-example-tooltip-max-character","i":1,"n":0.707},{"v":"exampleComponent limel-example-tooltip-basic","i":0,"n":0.707}],"1":{"v":"Tooltip","n":1},"2":{"v":"/component/limel-tooltip/","n":1},"3":[{"v":"Composite\n\nA place to try different combinations of states.","i":3,"n":0.354},{"v":"Using `maxlength` property\nTo present an easy to read content, the tooltip's maximum text\nlength is set to 50 characters, including spaces.\nWhen this threshold is reached, content will be rendered with line breaks.\nHowever, it is possible to override this value by specifying `maxlength`.\n\n:::note\nTooltips are intended to display very brief information.\nTry not to place large amount of text in them.\n:::","i":2,"n":0.132},{"v":"Basic example","i":1,"n":0.707},{"v":"A tooltip can be used to display a descriptive text for any element.\nThe displayed content must be a brief and supplemental string of text,\nidentifying the element or describing its function for the user,\nhelping them better understand unfamiliar objects that aren't described\ndirectly in the UI.\n\n## Interaction\nThe tooltip appears after a slight delay, when the element is hovered;\nand disappears as soon as the cursor leaves the element.\nTherefore, users cannot interact with the tip, but if the trigger element\nitself is interactive, it will remain interactible even with a tooltip bound\nto it.\n\n:::note\nIn order to display the tooltip, the tooltip element and its trigger element\nmust be within the same document or document fragment (the same shadowRoot).\nOften, it's easiest to just place them next to each other like in the example\nbelow, but if you need to, you can place them differently.\n\n```html\n<limel-button icon=\"search\" id=\"tooltip-example\" />\n<limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n```\n:::\n\n## Usage\n- Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\nUse them only when they add significant value.\n- A good tip is concise, helpful, and informative.\nDon't explain the obvious or simply repeat what is already on the screen.\nWhen used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n- If the tip is essential to the primary tasks that the user is performing,\nsuch as warnings or important notes, include the information directly in the\ninterface instead.\n- When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\nuse that, not a tooltip.\n- Make sure to use the tooltip on an element that users naturally and\neffortlessly recognize can be hovered.","i":0,"n":0.063}],"4":[{"v":"openDirection","i":4,"n":1},{"v":"maxlength","i":3,"n":1},{"v":"label","i":2,"n":1},{"v":"helperLabel","i":1,"n":1},{"v":"elementId","i":0,"n":1}],"5":[{"v":"Decides the tooltip's location in relation to its trigger.","i":4,"n":0.333},{"v":"The maximum amount of characters before rendering 'label' and\n'helperLabel' in two rows.","i":3,"n":0.289},{"v":"Short descriptive text of the owner element.","i":2,"n":0.378},{"v":"Additional helper text for the element.\nExample usage can be a keyboard shortcut to activate the function of the\nowner element.","i":1,"n":0.229},{"v":"ID of the owner element that the tooltip should describe.\nMust be a child within the same document fragment as the tooltip element\nitself.","i":0,"n":0.213}],"6":[],"7":[{"v":"\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"","i":4,"n":0.209},{"v":"number","i":3,"n":1},{"v":"string","i":2,"n":1},{"v":"string","i":1,"n":1},{"v":"string","i":0,"n":1}],"8":[],"9":[],"10":[],"11":[]}}]}}}