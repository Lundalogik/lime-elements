{"version":3,"names":["TextEditorCompositeExample","this","availableUis","text","value","setReadonly","event","stopPropagation","readonly","detail","setRequired","required","setInvalid","invalid","setDisabled","disabled","setAllowResize","allowResize","handleLabelChange","label","handleHelperTextChange","helperText","handlePlaceholderChange","placeholder","handleChange","handleNewSelection","selectedUi","render","h","Host","onChange","ui","checked","options","style","checkValidity"],"sources":["./src/components/text-editor/examples/text-editor-composite.tsx"],"sourcesContent":["import {\n    EditorUiType,\n    LimelSelectCustomEvent,\n    Option,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State, Watch } from '@stencil/core';\n\n/**\n * Composite example\n */\n@Component({\n    tag: 'limel-example-text-editor-composite',\n    shadow: true,\n})\nexport class TextEditorCompositeExample {\n    @State()\n    private value: string = 'Hello, world!';\n\n    @State()\n    private readonly = false;\n\n    @State()\n    private invalid = false;\n\n    @State()\n    private required = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private allowResize = false;\n\n    @State()\n    private label: string;\n\n    @State()\n    private placeholder: string;\n\n    @State()\n    private helperText: string;\n\n    @State()\n    private selectedUi: Option<EditorUiType> = {\n        text: 'standard',\n        value: 'standard',\n    };\n\n    private readonly availableUis: Array<Option<EditorUiType>> = [\n        { text: 'standard', value: 'standard' },\n        { text: 'minimal', value: 'minimal' },\n        { text: 'no-toolbar', value: 'no-toolbar' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-text-editor\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    readonly={this.readonly}\n                    required={this.required}\n                    disabled={this.disabled}\n                    invalid={this.invalid}\n                    placeholder={this.placeholder}\n                    allowResize={this.allowResize}\n                    ui={this.selectedUi.value}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={this.readonly}\n                        label=\"Readonly\"\n                        onChange={this.setReadonly}\n                    />\n                    <limel-checkbox\n                        checked={this.invalid}\n                        label=\"Invalid\"\n                        onChange={this.setInvalid}\n                    />\n                    <limel-checkbox\n                        checked={this.required}\n                        label=\"Required\"\n                        onChange={this.setRequired}\n                    />\n                    <limel-checkbox\n                        checked={this.disabled}\n                        label=\"Disabled\"\n                        onChange={this.setDisabled}\n                    />\n                    <limel-checkbox\n                        checked={this.allowResize}\n                        label=\"Allow resize\"\n                        onChange={this.setAllowResize}\n                    />\n                    <limel-select\n                        label=\"ui\"\n                        options={this.availableUis}\n                        value={this.selectedUi}\n                        onChange={this.handleNewSelection}\n                    />\n                    <hr\n                        style={{\n                            'grid-column': '1/-1',\n                        }}\n                    />\n                    <limel-input-field\n                        label=\"label\"\n                        value={this.label}\n                        onChange={this.handleLabelChange}\n                    />\n                    <limel-input-field\n                        label=\"helperText\"\n                        value={this.helperText}\n                        onChange={this.handleHelperTextChange}\n                    />\n                    <limel-input-field\n                        label=\"placeholder\"\n                        value={this.placeholder}\n                        onChange={this.handlePlaceholderChange}\n                    />\n                </limel-example-controls>\n                <limel-example-value value={this.value} />\n            </Host>\n        );\n    }\n\n    @Watch('required')\n    @Watch('value')\n    protected checkValidity() {\n        this.invalid = this.required && !this.value;\n    }\n\n    private readonly setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private readonly setRequired = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.required = event.detail;\n    };\n\n    private readonly setInvalid = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.invalid = event.detail;\n    };\n\n    private readonly setDisabled = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.disabled = event.detail;\n    };\n\n    private readonly setAllowResize = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.allowResize = event.detail;\n    };\n\n    private readonly handleLabelChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.label = event.detail;\n    };\n\n    private readonly handleHelperTextChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.helperText = event.detail;\n    };\n\n    private readonly handlePlaceholderChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.placeholder = event.detail;\n    };\n\n    private readonly handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private readonly handleNewSelection = (\n        event: LimelSelectCustomEvent<Option<EditorUiType>>\n    ) => {\n        this.selectedUi = event.detail;\n    };\n}\n"],"mappings":"4DAcaA,EAA0B,M,yBAkClBC,KAAAC,aAA4C,CACzD,CAAEC,KAAM,WAAYC,MAAO,YAC3B,CAAED,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,aAAcC,MAAO,eAmFhBH,KAAAI,YAAeC,IAC5BA,EAAMC,kBACNN,KAAKO,SAAWF,EAAMG,MAAM,EAGfR,KAAAS,YAAeJ,IAC5BA,EAAMC,kBACNN,KAAKU,SAAWL,EAAMG,MAAM,EAGfR,KAAAW,WAAcN,IAC3BA,EAAMC,kBACNN,KAAKY,QAAUP,EAAMG,MAAM,EAGdR,KAAAa,YAAeR,IAC5BA,EAAMC,kBACNN,KAAKc,SAAWT,EAAMG,MAAM,EAGfR,KAAAe,eAAkBV,IAC/BA,EAAMC,kBACNN,KAAKgB,YAAcX,EAAMG,MAAM,EAGlBR,KAAAiB,kBAAqBZ,IAClCA,EAAMC,kBACNN,KAAKkB,MAAQb,EAAMG,MAAM,EAGZR,KAAAmB,uBAA0Bd,IACvCA,EAAMC,kBACNN,KAAKoB,WAAaf,EAAMG,MAAM,EAGjBR,KAAAqB,wBAA2BhB,IACxCA,EAAMC,kBACNN,KAAKsB,YAAcjB,EAAMG,MAAM,EAGlBR,KAAAuB,aAAgBlB,IAC7BL,KAAKG,MAAQE,EAAMG,MAAM,EAGZR,KAAAwB,mBACbnB,IAEAL,KAAKyB,WAAapB,EAAMG,MAAM,E,WArKV,gB,cAGL,M,aAGD,M,cAGC,M,cAGA,M,iBAGG,M,0FAYqB,CACvCN,KAAM,WACNC,MAAO,W,CASJuB,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,qBACIT,MAAOlB,KAAKkB,MACZE,WAAYpB,KAAKoB,WACjBjB,MAAOH,KAAKG,MACZ0B,SAAU7B,KAAKuB,aACfhB,SAAUP,KAAKO,SACfG,SAAUV,KAAKU,SACfI,SAAUd,KAAKc,SACfF,QAASZ,KAAKY,QACdU,YAAatB,KAAKsB,YAClBN,YAAahB,KAAKgB,YAClBc,GAAI9B,KAAKyB,WAAWtB,QAExBwB,EAAA,8BACIA,EAAA,kBACII,QAAS/B,KAAKO,SACdW,MAAM,WACNW,SAAU7B,KAAKI,cAEnBuB,EAAA,kBACII,QAAS/B,KAAKY,QACdM,MAAM,UACNW,SAAU7B,KAAKW,aAEnBgB,EAAA,kBACII,QAAS/B,KAAKU,SACdQ,MAAM,WACNW,SAAU7B,KAAKS,cAEnBkB,EAAA,kBACII,QAAS/B,KAAKc,SACdI,MAAM,WACNW,SAAU7B,KAAKa,cAEnBc,EAAA,kBACII,QAAS/B,KAAKgB,YACdE,MAAM,eACNW,SAAU7B,KAAKe,iBAEnBY,EAAA,gBACIT,MAAM,KACNc,QAAShC,KAAKC,aACdE,MAAOH,KAAKyB,WACZI,SAAU7B,KAAKwB,qBAEnBG,EAAA,MACIM,MAAO,CACH,cAAe,UAGvBN,EAAA,qBACIT,MAAM,QACNf,MAAOH,KAAKkB,MACZW,SAAU7B,KAAKiB,oBAEnBU,EAAA,qBACIT,MAAM,aACNf,MAAOH,KAAKoB,WACZS,SAAU7B,KAAKmB,yBAEnBQ,EAAA,qBACIT,MAAM,cACNf,MAAOH,KAAKsB,YACZO,SAAU7B,KAAKqB,2BAGvBM,EAAA,uBAAqBxB,MAAOH,KAAKG,Q,CAOnC+B,gBACNlC,KAAKY,QAAUZ,KAAKU,WAAaV,KAAKG,K"}