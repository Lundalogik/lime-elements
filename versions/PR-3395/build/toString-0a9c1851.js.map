{"version":3,"names":["INFINITY","symbolProto","Symbol","prototype","undefined","symbolToString","toString","baseToString","value","isArray","arrayMap","isSymbol","call","result"],"sources":["./node_modules/lodash-es/_baseToString.js","./node_modules/lodash-es/toString.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n"],"mappings":"0KAMA,IAAIA,EAAW,EAAI,EAGnB,IAAIC,EAAcC,EAASA,EAAOC,UAAYC,UAC1CC,EAAiBJ,EAAcA,EAAYK,SAAWF,UAU1D,SAASG,EAAaC,GAEpB,UAAWA,GAAS,SAAU,CAC5B,OAAOA,CACX,CACE,GAAIC,EAAQD,GAAQ,CAElB,OAAOE,EAASF,EAAOD,GAAgB,EAC3C,CACE,GAAII,EAASH,GAAQ,CACnB,OAAOH,EAAiBA,EAAeO,KAAKJ,GAAS,EACzD,CACE,IAAIK,EAAUL,EAAQ,GACtB,OAAQK,GAAU,KAAQ,EAAIL,IAAWR,EAAY,KAAOa,CAC9D,CCXA,SAASP,EAASE,GAChB,OAAOA,GAAS,KAAO,GAAKD,EAAaC,EAC3C,Q"}