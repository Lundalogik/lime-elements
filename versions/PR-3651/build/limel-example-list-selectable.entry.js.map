{"version":3,"names":["SelectableListExample","this","handleChange","event","isSelected","detail","selected","lastEvent","text","items","map","item","value","separator","disabled","render","h","Host","onChange","type","label"],"sources":["./src/components/list/examples/list-selectable.tsx"],"sourcesContent":["import {\n    LimelListCustomEvent,\n    ListItem,\n    ListSeparator,\n} from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * List with selectable items\n * By default, a items of a list show a simpl visual feedback when hovered.\n * Once they are clicked, they emits an event with details about the item.\n *\n * However, certain list `type`s are \"selectable\";\n * for instance `selectable`, `radio` and `checkbox`.\n * When users click items in a list with these types (or focus and press Enter/Space)\n * the list should toggle the selection state of the items.\n *\n * A `selected` item both visually indicates that it is selected,\n * and also informs assistive technology about its state.\n *\n * Each of these \"selectable\" types visualize the selected state differently.\n *\n * - `selectable`: The selected state is indicated by a tinted background,\n * colored by the consumer's defined accent color.\n * - `radio`: The selected state is indicated by a filled circle.\n * - `checkbox`: The selected state is indicated by a checked checkmark.\n *\n * Needless to say that a `disabled` item cannot be selected or interacted with.\n */\n@Component({\n    tag: 'limel-example-list-selectable',\n    shadow: true,\n})\nexport class SelectableListExample {\n    @State()\n    private items: Array<ListItem<number> | ListSeparator> = [\n        { text: 'King of Tokyo', value: 1 },\n        { text: 'Smash Up!', value: 2 },\n        { text: 'Pandemic', value: 3, selected: true },\n        { separator: true },\n        { text: 'Catan', value: 4, disabled: true },\n        { text: 'Ticket to Ride', value: 5 },\n    ];\n\n    @State()\n    private lastEvent: string = 'No events yet';\n\n    public render() {\n        return (\n            <Host>\n                <limel-list\n                    onChange={this.handleChange}\n                    type=\"selectable\"\n                    items={this.items}\n                />\n                <limel-example-value\n                    label=\"Last event\"\n                    value={this.lastEvent}\n                />\n            </Host>\n        );\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        const isSelected = event.detail.selected === true;\n        this.lastEvent = `${event.detail.text} (selected: ${isSelected ? 'true' : 'false'})`;\n\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n}\n"],"mappings":"4DAiCaA,EAAqB,M,yBA8BtBC,KAAAC,aAAgBC,IACpB,MAAMC,EAAaD,EAAME,OAAOC,WAAa,KAC7CL,KAAKM,UAAY,GAAGJ,EAAME,OAAOG,mBAAmBJ,EAAa,OAAS,WAE1EH,KAAKQ,MAAQR,KAAKQ,MAAMC,KAAKC,IACzB,GAAIA,EAAKC,QAAUT,EAAME,OAAOO,MAAO,CACnC,OAAOT,EAAME,M,CAGjB,OAAOM,CAAI,GACb,E,WAtCmD,CACrD,CAAEH,KAAM,gBAAiBI,MAAO,GAChC,CAAEJ,KAAM,YAAaI,MAAO,GAC5B,CAAEJ,KAAM,WAAYI,MAAO,EAAGN,SAAU,MACxC,CAAEO,UAAW,MACb,CAAEL,KAAM,QAASI,MAAO,EAAGE,SAAU,MACrC,CAAEN,KAAM,iBAAkBI,MAAO,I,eAIT,e,CAErBG,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,cACIE,SAAUjB,KAAKC,aACfiB,KAAK,aACLV,MAAOR,KAAKQ,QAEhBO,EAAA,uBACII,MAAM,aACNR,MAAOX,KAAKM,Y"}