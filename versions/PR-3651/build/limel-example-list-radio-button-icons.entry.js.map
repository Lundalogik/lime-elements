{"version":3,"names":["ListRadioButtonIconsExample","constructor","hostRef","this","originalIcons","handleChange","event","selectedItem","detail","items","map","item","value","setIcon","stopPropagation","showIcons","Object","assign","icon","String","undefined","text","selected","name","color","disabled","find","render","h","onChange","type","checked","label"],"sources":["./src/components/list/examples/list-radio-button-icons.tsx"],"sourcesContent":["import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with radio buttons and icons\n *\n * By setting the `type` prop to `\"radio\"`, each list item will\n * render a radio button next to it, indicating the user can select\n * only one of the items at a time, empowering you to create\n * UIs that clearly indicate single selections.\n */\n@Component({\n    tag: 'limel-example-list-radio-button-icons',\n    shadow: true,\n})\nexport class ListRadioButtonIconsExample {\n    @State()\n    private items: ListItem[] = [\n        {\n            text: 'Pikachu',\n            value: 1,\n            selected: false,\n            icon: {\n                name: 'pokemon',\n                color: 'var(--lime-yellow)',\n            },\n        },\n        {\n            text: 'Charmander',\n            value: 2,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'fire_element',\n                color: 'var(--lime-red)',\n            },\n        },\n        {\n            text: 'Super Mario',\n            value: 3,\n            selected: false,\n            icon: {\n                name: 'super_mario',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Yoshi',\n            value: 4,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'easter_egg',\n                color: 'var(--lime-green)',\n            },\n        },\n        {\n            text: 'Minion',\n            value: 6,\n            selected: true,\n            icon: {\n                name: 'minion_1',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Pok√©ball',\n            value: 5,\n            selected: false,\n            icon: {\n                name: 'pokeball',\n                color: 'var(--lime-magenta)',\n            },\n        },\n    ];\n\n    @State()\n    private selectedItem: ListItem;\n\n    @State()\n    private showIcons: boolean = true;\n\n    private originalIcons: Record<string, ListItem['icon']> = {};\n\n    constructor() {\n        this.selectedItem = this.items.find((item) => {\n            return !!item.selected;\n        });\n\n        this.originalIcons = {};\n        for (const item of this.items) {\n            this.originalIcons[String(item.value)] = item.icon;\n        }\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"radio\"\n            />,\n            <limel-example-value value={this.selectedItem} />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.showIcons}\n                    label=\"icon\"\n                    onChange={this.setIcon}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        this.selectedItem = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            if (item.value === event.detail.value) {\n                return event.detail;\n            }\n\n            return item;\n        });\n    };\n\n    private setIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.showIcons = event.detail;\n        this.items = this.items.map((item) => ({\n            ...item,\n            icon: this.showIcons\n                ? this.originalIcons[String(item.value)]\n                : undefined,\n        }));\n    };\n}\n"],"mappings":"qDAeaA,EAA2B,MAqEpCC,YAAAC,G,UAFQC,KAAAC,cAAkD,GA+BlDD,KAAAE,aAAgBC,IACpBH,KAAKI,aAAeD,EAAME,OAC1BL,KAAKM,MAAQN,KAAKM,MAAMC,KAAKC,IACzB,GAAIA,EAAKC,QAAUN,EAAME,OAAOI,MAAO,CACnC,OAAON,EAAME,M,CAGjB,OAAOG,CAAI,GACb,EAGER,KAAAU,QAAWP,IACfA,EAAMQ,kBACNX,KAAKY,UAAYT,EAAME,OACvBL,KAAKM,MAAQN,KAAKM,MAAMC,KAAKC,GAAIK,OAAAC,OAAAD,OAAAC,OAAA,GAC1BN,GAAI,CACPO,KAAMf,KAAKY,UACLZ,KAAKC,cAAce,OAAOR,EAAKC,QAC/BQ,aACP,E,WAnHqB,CACxB,CACIC,KAAM,UACNT,MAAO,EACPU,SAAU,MACVJ,KAAM,CACFK,KAAM,UACNC,MAAO,uBAGf,CACIH,KAAM,aACNT,MAAO,EACPU,SAAU,MACVG,SAAU,KACVP,KAAM,CACFK,KAAM,eACNC,MAAO,oBAGf,CACIH,KAAM,cACNT,MAAO,EACPU,SAAU,MACVJ,KAAM,CACFK,KAAM,cACNC,MAAO,yBAGf,CACIH,KAAM,QACNT,MAAO,EACPU,SAAU,MACVG,SAAU,KACVP,KAAM,CACFK,KAAM,aACNC,MAAO,sBAGf,CACIH,KAAM,SACNT,MAAO,EACPU,SAAU,KACVJ,KAAM,CACFK,KAAM,WACNC,MAAO,qBAGf,CACIH,KAAM,WACNT,MAAO,EACPU,SAAU,MACVJ,KAAM,CACFK,KAAM,WACNC,MAAO,yB,2CASU,KAKzBrB,KAAKI,aAAeJ,KAAKM,MAAMiB,MAAMf,KACxBA,EAAKW,WAGlBnB,KAAKC,cAAgB,GACrB,IAAK,MAAMO,KAAQR,KAAKM,MAAO,CAC3BN,KAAKC,cAAce,OAAOR,EAAKC,QAAUD,EAAKO,I,EAI/CS,SACH,MAAO,CACHC,EAAA,cACIC,SAAU1B,KAAKE,aACfI,MAAON,KAAKM,MACZqB,KAAK,UAETF,EAAA,uBAAqBhB,MAAOT,KAAKI,eACjCqB,EAAA,8BACIA,EAAA,kBACIG,QAAS5B,KAAKY,UACdiB,MAAM,OACNH,SAAU1B,KAAKU,W"}