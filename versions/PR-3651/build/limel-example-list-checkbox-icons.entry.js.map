{"version":3,"names":["ListCheckboxIconsExample","constructor","hostRef","this","originalIcons","handleChange","event","selectedItems","detail","items","map","item","selected","some","selectedItem","value","Object","assign","setIcon","stopPropagation","showIcons","icon","String","undefined","text","name","color","disabled","filter","render","h","onChange","type","checked","label"],"sources":["./src/components/list/examples/list-checkbox-icons.tsx"],"sourcesContent":["import { LimelListCustomEvent, ListItem } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * List with checkboxes and icons\n *\n * By setting the `type` prop to `\"checkbox\"`, each list item will\n * render a checkbox next to it, indicating the user can select\n * more than one of the items, empowering you to create\n * UIs that clearly indicate multiple selections.\n */\n@Component({\n    tag: 'limel-example-list-checkbox-icons',\n    shadow: true,\n})\nexport class ListCheckboxIconsExample {\n    @State()\n    private items: ListItem[] = [\n        {\n            text: 'Pikachu',\n            value: 1,\n            selected: true,\n            icon: {\n                name: 'pokemon',\n                color: 'var(--lime-yellow)',\n            },\n        },\n        {\n            text: 'Charmander',\n            value: 2,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'fire_element',\n                color: 'var(--lime-red)',\n            },\n        },\n        {\n            text: 'Super Mario',\n            value: 3,\n            selected: false,\n            icon: {\n                name: 'super_mario',\n                color: 'var(--lime-deep-red)',\n            },\n        },\n        {\n            text: 'Yoshi',\n            value: 4,\n            selected: false,\n            disabled: true,\n            icon: {\n                name: 'easter_egg',\n                color: 'var(--lime-green)',\n            },\n        },\n        {\n            text: 'Minion',\n            value: 6,\n            selected: true,\n            icon: {\n                name: 'minion_1',\n                color: 'var(--lime-blue)',\n            },\n        },\n        {\n            text: 'Pok√©ball',\n            value: 5,\n            selected: false,\n            icon: {\n                name: 'pokeball',\n                color: 'var(--lime-magenta)',\n            },\n        },\n    ];\n\n    @State()\n    private selectedItems: ListItem[] = [];\n\n    @State()\n    private showIcons: boolean = true;\n\n    private originalIcons: Record<string, ListItem['icon']> = {};\n\n    constructor() {\n        this.selectedItems = this.items.filter((item) => {\n            return !!item.selected;\n        });\n\n        this.originalIcons = {};\n        for (const item of this.items) {\n            this.originalIcons[String(item.value)] = item.icon;\n        }\n    }\n\n    public render() {\n        return [\n            <limel-list\n                onChange={this.handleChange}\n                items={this.items}\n                type=\"checkbox\"\n            />,\n            <limel-example-value value={this.selectedItems} />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.showIcons}\n                    label=\"icon\"\n                    onChange={this.setIcon}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem[]>) => {\n        this.selectedItems = event.detail;\n        this.items = this.items.map((item: ListItem) => {\n            const selected = event.detail.some((selectedItem: ListItem) => {\n                return selectedItem.value === item.value;\n            });\n\n            return { ...item, selected: selected };\n        });\n    };\n\n    private setIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.showIcons = event.detail;\n        this.items = this.items.map((item) => ({\n            ...item,\n            icon: this.showIcons\n                ? this.originalIcons[String(item.value)]\n                : undefined,\n        }));\n    };\n}\n"],"mappings":"qDAeaA,EAAwB,MAqEjCC,YAAAC,G,UAFQC,KAAAC,cAAkD,GA+BlDD,KAAAE,aAAgBC,IACpBH,KAAKI,cAAgBD,EAAME,OAC3BL,KAAKM,MAAQN,KAAKM,MAAMC,KAAKC,IACzB,MAAMC,EAAWN,EAAME,OAAOK,MAAMC,GACzBA,EAAaC,QAAUJ,EAAKI,QAGvC,OAAAC,OAAAC,OAAAD,OAAAC,OAAA,GAAYN,GAAI,CAAEC,SAAUA,GAAQ,GACtC,EAGET,KAAAe,QAAWZ,IACfA,EAAMa,kBACNhB,KAAKiB,UAAYd,EAAME,OACvBL,KAAKM,MAAQN,KAAKM,MAAMC,KAAKC,GAAIK,OAAAC,OAAAD,OAAAC,OAAA,GAC1BN,GAAI,CACPU,KAAMlB,KAAKiB,UACLjB,KAAKC,cAAckB,OAAOX,EAAKI,QAC/BQ,aACP,E,WAnHqB,CACxB,CACIC,KAAM,UACNT,MAAO,EACPH,SAAU,KACVS,KAAM,CACFI,KAAM,UACNC,MAAO,uBAGf,CACIF,KAAM,aACNT,MAAO,EACPH,SAAU,MACVe,SAAU,KACVN,KAAM,CACFI,KAAM,eACNC,MAAO,oBAGf,CACIF,KAAM,cACNT,MAAO,EACPH,SAAU,MACVS,KAAM,CACFI,KAAM,cACNC,MAAO,yBAGf,CACIF,KAAM,QACNT,MAAO,EACPH,SAAU,MACVe,SAAU,KACVN,KAAM,CACFI,KAAM,aACNC,MAAO,sBAGf,CACIF,KAAM,SACNT,MAAO,EACPH,SAAU,KACVS,KAAM,CACFI,KAAM,WACNC,MAAO,qBAGf,CACIF,KAAM,WACNT,MAAO,EACPH,SAAU,MACVS,KAAM,CACFI,KAAM,WACNC,MAAO,yB,mBAMiB,G,eAGP,KAKzBvB,KAAKI,cAAgBJ,KAAKM,MAAMmB,QAAQjB,KAC3BA,EAAKC,WAGlBT,KAAKC,cAAgB,GACrB,IAAK,MAAMO,KAAQR,KAAKM,MAAO,CAC3BN,KAAKC,cAAckB,OAAOX,EAAKI,QAAUJ,EAAKU,I,EAI/CQ,SACH,MAAO,CACHC,EAAA,cACIC,SAAU5B,KAAKE,aACfI,MAAON,KAAKM,MACZuB,KAAK,aAETF,EAAA,uBAAqBf,MAAOZ,KAAKI,gBACjCuB,EAAA,8BACIA,EAAA,kBACIG,QAAS9B,KAAKiB,UACdc,MAAM,OACNH,SAAU5B,KAAKe,W"}