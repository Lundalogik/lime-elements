{"version":3,"names":["textEditorCustomTriggersCss","TextEditorCustomTriggersExample","this","insertModeButtons","id","title","selected","handleKeyPress","event","capturedKeys","ESCAPE","ARROW_UP","ARROW_DOWN","ENTER","TAB","includes","key","stopPropagation","preventDefault","moveSelection","selectedItem","visibleItems","find","item","insertItem","isPickerOpen","_a","triggerFunction","stopTrigger","direction","increment","numberOfItems","length","currentSelectionIndex","findIndex","selectionIndex","removeAllSelections","setSelection","items","map","currentItem","Object","assign","selectedItemId","undefined","index","isSelected","value","renderPicker","h","open","openDirection","onClose","handleTriggerStop","renderList","style","padding","onInteract","handleListInteraction","handleTriggerStart","triggerState","detail","textEditor","inputText","handleTriggerChange","toLowerCase","handleChange","handleInsertModeChange","insertMode","insert","text","node","tagName","attributes","icon","children","watchOpen","setupEventHandlers","watchInputText","filter","componentWillLoad","host","addEventListener","capture","removeEventListener","render","display","customElements","triggers","onTriggerStart","onTriggerStop","onTriggerChange","onChange","class","label"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.scss?tag=limel-example-text-editor-triggers&encapsulation=shadow","./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["limel-button-group {\n    min-width: 8rem;\n}\n\nlimel-example-controls {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.mode {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.value {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-portal {\n    width: auto;\n}\n","import {\n    Button,\n    LimelMenuListCustomEvent,\n    MenuItem,\n} from '@limetech/lime-elements';\nimport { Component, h, State, Element, Watch } from '@stencil/core';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    TAB,\n} from '../../../util/keycodes';\nimport { TextEditor, TriggerEventDetail } from '../text-editor.types';\n\n/**\n * Custom triggers\n *\n * A trigger is a character or sequence of characters that if typed in the text editor\n * will initiate a trigger session. The session is initialized with a `triggerStart`\n * event. Subsequent characters written after the trigger sequence will be sent in a\n * `triggerChange` event. When the focus is removed from the trigger a `triggerStop`\n * event will be sent.\n *\n * The `triggerStart` event contains a `TextEditorInserter` object containing functions\n * to manipulate the state of the text editor around the trigger. Using any of the\n * supplied methods will effectivly replace the trigger content in the text editor with\n * the content of choice.\n *\n * In this example we pass either a text or a `limel-chip` representing some chosen user\n * in a mention like situation.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n    styleUrl: 'text-editor-custom-triggers.scss',\n})\nexport class TextEditorCustomTriggersExample {\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private inputText: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private insertMode: 'text' | 'chip' = 'text';\n\n    @State()\n    private items: Array<MenuItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf', selected: true },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    @State()\n    private visibleItems: Array<MenuItem<number>>;\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n    ];\n\n    private triggerFunction?: TextEditor;\n\n    @Watch('isPickerOpen')\n    protected watchOpen() {\n        this.setupEventHandlers();\n    }\n\n    @Watch('inputText')\n    protected watchInputText() {\n        if (this.isPickerOpen) {\n            this.visibleItems = this.items.filter((item: MenuItem<number>) =>\n                item.text.toLowerCase().includes(this.inputText),\n            );\n        }\n    }\n    public componentWillLoad() {\n        this.visibleItems = this.items;\n        this.setupEventHandlers();\n    }\n\n    private setupEventHandlers() {\n        if (this.isPickerOpen) {\n            this.host.addEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        } else {\n            this.host.removeEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        }\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        const capturedKeys = [ESCAPE, ARROW_UP, ARROW_DOWN, ENTER, TAB];\n        if (capturedKeys.includes(event.key)) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if (event.key === ARROW_DOWN || event.key === ARROW_UP) {\n            this.moveSelection(event.key);\n        }\n\n        if (event.key === ENTER || event.key === TAB) {\n            const selectedItem: MenuItem | undefined = this.visibleItems.find(\n                (item) => item.selected,\n            );\n\n            if (selectedItem) {\n                this.insertItem(selectedItem);\n            }\n        }\n\n        if (event.key === ESCAPE) {\n            this.isPickerOpen = false;\n            this.triggerFunction?.stopTrigger();\n        }\n    };\n\n    private moveSelection = (\n        direction: typeof ARROW_UP | typeof ARROW_DOWN,\n    ) => {\n        const increment = direction === ARROW_DOWN ? 1 : -1;\n        const numberOfItems = this.visibleItems.length;\n        const currentSelectionIndex = this.visibleItems.findIndex(\n            (item) => item.selected,\n        );\n\n        const selectionIndex =\n            (currentSelectionIndex + increment + numberOfItems) % numberOfItems;\n\n        this.removeAllSelections();\n        this.setSelection(selectionIndex);\n    };\n\n    private removeAllSelections = () => {\n        this.items = this.items.map((currentItem) => {\n            currentItem.selected = false;\n\n            return { ...currentItem };\n        });\n    };\n\n    private setSelection = (selectionIndex: number) => {\n        let selectedItemId = undefined;\n        this.visibleItems = this.visibleItems.map((item, index) => {\n            const isSelected = index === selectionIndex;\n\n            if (isSelected) {\n                selectedItemId = item.value;\n            }\n\n            return { ...item, selected: isSelected };\n        });\n\n        if (selectedItemId) {\n            this.items[selectedItemId - 1].selected = true;\n        }\n    };\n\n    public render() {\n        return [\n            this.renderPicker(),\n            <limel-text-editor\n                style={{ display: 'block' }}\n                value={this.value}\n                customElements={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                Insert mode:\n                <limel-button-group\n                    class=\"mode\"\n                    value={this.insertModeButtons}\n                    onChange={this.handleInsertModeChange}\n                />\n                <div class=\"value\">\n                    <limel-example-value\n                        label=\"Action\"\n                        value={this.triggerState}\n                    />\n                    <limel-example-value\n                        label=\"Tag value\"\n                        value={this.inputText}\n                    />\n                </div>\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private renderPicker = () => {\n        return (\n            <limel-popover\n                open={this.isPickerOpen}\n                openDirection=\"top-start\"\n                onClose={this.handleTriggerStop}\n            >\n                {this.renderList(this.visibleItems)}\n            </limel-popover>\n        );\n    };\n\n    private renderList = (items: Array<MenuItem<number>>) => {\n        if (items.length === 0) {\n            return (\n                <div style={{ padding: '0.5rem' }}>\n                    Couldn't find. Not a hero yet! ðŸ¥²\n                </div>\n            );\n        }\n\n        return (\n            <limel-menu-list\n                items={items}\n                onInteract={this.handleListInteraction}\n            />\n        );\n    };\n\n    private handleTriggerStart = (event: CustomEvent<TriggerEventDetail>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail.textEditor;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.inputText = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<TriggerEventDetail>) => {\n        this.inputText = event.detail.value.toLowerCase();\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleListInteraction = (\n        event: LimelMenuListCustomEvent<MenuItem<number>>,\n    ) => {\n        this.insertItem(event.detail);\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n\n    private insertItem = (item: MenuItem) => {\n        this.removeAllSelections();\n        this.visibleItems = this.items;\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insert('@' + item.text);\n\n            return;\n        }\n\n        this.triggerFunction.insert({\n            node: {\n                tagName: 'limel-chip',\n                attributes: {\n                    icon: item.icon,\n                    text: item.text,\n                },\n            },\n            children: [\"I'm a teapot\"],\n        });\n    };\n}\n"],"mappings":"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"}