{"version":3,"names":["calloutIcons","note","important","tip","caution","warning","getIcon","icon","type","_a","getHeading","heading","language","key","translate","get","error","calloutCss","Callout","render","h","class","role","name","this"],"sources":["./src/components/callout/callout.helpers.ts","./src/components/callout/callout.scss?tag=limel-callout&encapsulation=shadow","./src/components/callout/callout.tsx"],"sourcesContent":["import translate from '../../global/translations';\n\nconst calloutIcons: Record<string, string> = {\n    note: 'info',\n    important: 'exclamation_mark',\n    tip: 'idea',\n    caution: 'high_priority',\n    warning: 'error',\n};\n\nexport function getIcon(icon: string, type: string = 'note'): string {\n    if (icon) {\n        return icon;\n    }\n\n    return calloutIcons[type] ?? calloutIcons.note;\n}\n\nexport function getHeading(\n    heading: string,\n    type: string = 'note',\n    language: string = 'en',\n): string {\n    if (heading) {\n        return heading;\n    }\n\n    const key = `callout.${type}`;\n\n    try {\n        return translate.get(key, language);\n    } catch (error) {\n        return translate.get(key, 'en');\n    }\n}\n","/**\n * @prop --callout-text-color: Text color of the component. Defaults to `--contrast-1100`.\n * @prop --callout-background-color: Background color of the component. Defaults to `--contrast-300`.\n * @prop --callout-color: Color used in the UI to add more contextual meaning about the type of the information. This color is different based on the chosen `type`, but you can override it using this prop.\n*/\n\n:host(limel-callout) {\n    display: flex;\n    border-radius: 0.5rem;\n    overflow: hidden;\n\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-contrast-100))\n    );\n    color: var(--callout-text-color, rgb(var(--contrast-1100)));\n}\n:host([type='note']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-gray-default))\n    );\n}\n:host([type='important']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-sky-default))\n    );\n}\n:host([type='tip']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-green-default))\n    );\n}\n:host([type='caution']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-orange-light))\n    );\n}\n:host([type='warning']) {\n    --limel-callout-tint-color: var(\n        --callout-color,\n        rgb(var(--color-red-dark))\n    );\n}\n\n.side {\n    padding: 0.25rem;\n    position: relative;\n\n    &:before {\n        content: '';\n        position: absolute;\n        inset: 0;\n        opacity: 0.2;\n        background-color: var(--limel-callout-tint-color);\n    }\n\n    limel-icon {\n        width: 1.5rem;\n        color: var(--limel-callout-tint-color);\n        margin-top: 0.0625rem; // ensures vertical alignment with the `heading`\n    }\n}\n\n.main {\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    gap: 0.5rem;\n    padding: 0.25rem 0.5rem 0.5rem 0.5rem;\n    background-color: var(--callout-background-color, rgb(var(--contrast-300)));\n}\n\n.heading {\n    margin: 0;\n    font-size: 1rem;\n    font-weight: 600;\n}\n","import { Component, h, Prop } from '@stencil/core';\nimport { CalloutType } from '../callout/callout.types';\nimport { Languages } from '../date-picker/date.types';\nimport { getHeading, getIcon } from './callout.helpers';\n\n/**\n * Callouts—also known as Admonitions—are useful for including supportive or\n * special content within a large piece of text, or even inside a user\n * interface.\n *\n * When used in a document or text based user interface, the callout attracts\n * the reader's attention to a particular piece of information, without\n * significantly interrupting their flow of reading the document.\n *\n * In a user interface, a callout is more intrusive to the end-user. Still, it\n * could be a good choice when you intend to slightly disturb the user's\n * attention, and challenge them to pay extra attention to the information\n * presented. In such cases, a callout should not be used as a static and\n * constantly present element of the UI. Rather, it should be displayed when\n * something unusual or remarkable demands the user's attention.\n *\n * @exampleComponent limel-example-callout-note\n * @exampleComponent limel-example-callout-important\n * @exampleComponent limel-example-callout-tip\n * @exampleComponent limel-example-callout-caution\n * @exampleComponent limel-example-callout-warning\n * @exampleComponent limel-example-callout-rich-content\n * @exampleComponent limel-example-callout-custom-heading\n * @exampleComponent limel-example-callout-custom-icon\n * @exampleComponent limel-example-callout-styles\n * @exampleComponent limel-example-custom-type\n * @exampleComponent limel-example-callout-composite\n */\n@Component({\n    tag: 'limel-callout',\n    shadow: true,\n    styleUrl: 'callout.scss',\n})\nexport class Callout {\n    /**\n     * Heading of the callout, which can be used to override the\n     * default heading which is displayed based on the chosen `type`.\n     */\n    @Prop({ reflect: true })\n    public heading?: string;\n\n    /**\n     * Icon of the callout, which can be used to override the\n     * default icon which is displayed based on the chosen `type`.\n     */\n    @Prop({ reflect: true })\n    public icon?: string;\n\n    /**\n     * Defines how the component is visualized, for example\n     * which heading, color or icon is used in its user interface.\n     */\n    @Prop({ reflect: true })\n    public type?: CalloutType = 'note';\n\n    /**\n     * Defines the language for translations.\n     * Will translate the default headings for supported languages.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    public render() {\n        return [\n            <div class=\"side\" role=\"presentation\">\n                <limel-icon name={getIcon(this.icon, this.type)} />\n            </div>,\n            <div class=\"main\">\n                <h1 class=\"heading\">\n                    {getHeading(this.heading, this.type, this.language)}\n                </h1>\n                <slot />\n            </div>,\n        ];\n    }\n}\n"],"mappings":"8FAEA,MAAMA,EAAuC,CACzCC,KAAM,OACNC,UAAW,mBACXC,IAAK,OACLC,QAAS,gBACTC,QAAS,S,SAGGC,EAAQC,EAAcC,EAAe,Q,MACjD,GAAID,EAAM,CACN,OAAOA,C,CAGX,OAAOE,EAAAT,EAAaQ,MAAK,MAAAC,SAAA,EAAAA,EAAIT,EAAaC,IAC9C,C,SAEgBS,EACZC,EACAH,EAAe,OACfI,EAAmB,MAEnB,GAAID,EAAS,CACT,OAAOA,C,CAGX,MAAME,EAAM,WAAWL,IAEvB,IACI,OAAOM,EAAUC,IAAIF,EAAKD,E,CAC5B,MAAOI,GACL,OAAOF,EAAUC,IAAIF,EAAK,K,CAElC,CClCA,MAAMI,EAAa,wwC,MCsCNC,EAAO,M,8EAoBY,O,cAOC,I,CAEtBC,SACH,MAAO,CACHC,EAAA,OAAKC,MAAM,OAAOC,KAAK,gBACnBF,EAAA,cAAYG,KAAMjB,EAAQkB,KAAKjB,KAAMiB,KAAKhB,SAE9CY,EAAA,OAAKC,MAAM,QACPD,EAAA,MAAIC,MAAM,WACLX,EAAWc,KAAKb,QAASa,KAAKhB,KAAMgB,KAAKZ,WAE9CQ,EAAA,c"}