{"version":3,"names":["dockCss","DEFAULT_MOBILE_BREAKPOINT","Dock","this","renderSeparator","useMobileLayout","h","class","renderDockItem","item","selected","expanded","handleResize","window","innerWidth","mobileBreakPoint","toggleDockWidth","dockExpanded","emit","componentDidLoad","resizeObserver","ResizeObserver","observe","document","body","disconnectedCallback","disconnect","render","Host","dock","accessibleLabel","dockItems","map","dockFooterItems","renderExpandShrinkToggle","allowResize","onClick","name","dockButtonCss","DockButton","constructor","hostRef","renderNotification","badge","undefined","label","openPopover","event","stopPropagation","isOpen","menuOpen","setCustomComponentElement","element","customComponentElement","onPopoverClose","close","handleClick","itemSelected","focusCustomComponentElement","entries","entry","find","e","target","isIntersecting","_b","_a","shadowRoot","delegatesFocus","_c","focus","getOpenDirection","tooltipId","createRandomString","dockMenu","componentName","renderPopover","renderButton","openWatcher","intersectionObserver","IntersectionObserver","CustomComponent","openDirection","open","onClose","Object","assign","ref","props","slot","tabindex","id","type","button","renderIcon","renderLabel","renderTooltip","icon","elementId","helperLabel"],"sources":["./src/components/dock/dock.scss?tag=limel-dock&encapsulation=shadow","./src/components/dock/dock.tsx","./src/components/dock/dock-button/dock-button.scss?tag=limel-dock-button","./src/components/dock/dock-button/dock-button.tsx"],"sourcesContent":["@use '../../style/mixins';\n@use '../../style/functions';\n@use '../../style/internal/variables';\n\n/**\n* @prop --dock-expanded-max-width: The maximum width of the Dock when it is expanded. Defaults to `max-content` which means the Dock will adjust its width to the widest dock item.\n* @prop --dock-background-color: Background color of the whole component, defaults to `--contrast-100`.\n* @prop --dock-item-background-color--selected: Background color of selected dock item, defaults to `--contrast-200`.\n* @prop --dock-item-text-color: Text of dock items, defaults to `--contrast-1100`.\n* @prop --dock-item-text-color--selected: Text color of selected dock item, defaults to `--contrast-1300`.\n* @prop --dock-item-icon-color: Color of the optional icons used in each dock item. Only affects inactive dock items, defaults to text colors for default or selected states.\n* @prop --dock-padding-top: Space of top side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-top)`.\n* @prop --dock-padding-right: Space of the right side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-right)`.\n* @prop --dock-padding-bottom: Space of the bottom side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-bottom)`.\n* @prop --dock-padding-left: Space of the left side of the Dock. Can be used with environment variables, to take into account safe areas on mobile devices with rounded screen corners or those that have a \"notch\". For instance can be set to `env(safe-area-inset-left)`.\n* @prop --popover-surface-width: Defines the width of the popover that is opened for dock items with custom components. Defaults to `auto`.\n*/\n\n:host(limel-dock) {\n    --badge-background-color: rgb(var(--color-red-default));\n    --badge-text-color: rgb(var(--color-white));\n\n    --dock-item-height: 2.75rem;\n    --dock-padding: 0.25rem;\n    --dock-expand-shrink-button-height: 1rem;\n\n    --limel-dock-item-text-color: var(\n        --dock-item-text-color,\n        rgb(var(--contrast-1100))\n    );\n    --limel-dock-item-text-color--selected: var(\n        --dock-item-text-color--selected,\n        rgb(var(--contrast-1300))\n    );\n\n    isolation: isolate;\n    position: relative;\n\n    display: inline-flex;\n    flex-direction: column;\n\n    background-color: var(--dock-background-color, rgb(var(--contrast-100)));\n    box-shadow: var(--shadow-depth-8);\n\n    padding-top: var(--dock-padding-top);\n    padding-right: var(--dock-padding-right);\n    padding-bottom: var(--dock-padding-bottom);\n    padding-left: var(--dock-padding-left);\n}\n\n:host(limel-dock:not(.has-mobile-layout)) {\n    height: 100%;\n    width: calc((var(--dock-padding) * 2) + var(--dock-item-height));\n}\n\n:host(limel-dock.expanded) {\n    width: var(--dock-expanded-max-width, max-content);\n}\n\n.footer-separator {\n    margin-top: auto;\n    justify-self: flex-end;\n}\n\nnav {\n    box-sizing: border-box;\n    display: inline-flex;\n    flex-direction: column;\n    gap: functions.pxToRem(6);\n    flex-grow: 1;\n\n    padding: var(--dock-padding); // needed for the focus effect\n\n    overflow-y: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    :host(limel-dock.has-mobile-layout) & {\n        justify-content: space-between;\n        flex-direction: row;\n    }\n}\n\n// ðŸ‘‡ Below is a hidden and private prop\n// only for usage in Lime CRM components.\n// It enables our customers to override\n// the default Home icon, using an external URL\n// or an SVG code.\nlimel-dock-button {\n    &:first-of-type {\n        // `--crm-custom-home-icon-enabler`: in the CRM must be set to `''`\n        --limel-custom-home-icon-enabler: var(--crm-custom-home-icon-enabler);\n        // `--crm-custom-home-icon` in the CRM must be set to a url to an image file, or an SVG code\n        --limel-custom-home-icon: var(--crm-custom-home-icon);\n    }\n}\n\n@import './partial-styles/shrink-expand-button';\n","import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n} from '@stencil/core';\nimport { DockItem } from './dock.types';\n\nconst DEFAULT_MOBILE_BREAKPOINT = 700;\n\n/**\n * @exampleComponent limel-example-dock-basic\n * @exampleComponent limel-example-dock-custom-component\n * @exampleComponent limel-example-dock-notification\n * @exampleComponent limel-example-dock-mobile\n * @exampleComponent limel-example-dock-expanded\n * @exampleComponent limel-example-dock-colors-css\n */\n@Component({\n    tag: 'limel-dock',\n    shadow: true,\n    styleUrl: 'dock.scss',\n})\nexport class Dock {\n    /**\n     * Items that are placed in the dock.\n     */\n    @Prop()\n    public dockItems: DockItem[] = [];\n\n    /**\n     * Items that are placed at the bottom of the dock. (Or at the end in mobile\n     * layout.)\n     */\n    @Prop()\n    public dockFooterItems?: DockItem[] = [];\n\n    /**\n     * A label used to describe the purpose of the navigation element to users\n     * of assistive technologies, like screen readers. Especially useful when\n     * there are multiple navigation elements in the user interface.\n     * Example value: \"Primary navigation\"\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    /**\n     * Defines the width of the component, when it loads.\n     * - `true`: shows both icons and labels of the Dock items.\n     * - `false`: only shows icons of the doc items, and displays\n     * their labels as tooltip.\n     *\n     * Note: when `useMobileLayout` is `true`, labels will always\n     * be shown as tooltips. Read more belowâ€¦\n     */\n    @Prop({ reflect: true })\n    public expanded? = false;\n\n    /**\n     * Set to `false` if you do not want to allow end-users\n     * to exapnd or shrink the Dock. This will hide the\n     * expand/shrink button, and the only things that defines\n     * the layout will be the `expanded` property, and\n     * the `mobileBreakPoint`.\n     */\n    @Prop({ reflect: true })\n    public allowResize? = true;\n\n    /**\n     * Defines the breakpoint in pixles, at which the component will be rendered\n     * in a hoizontal layout. Default breakpoint is `700` pixels, which means\n     * when the screen size is smaller than `700px`, the component will automatically\n     * switch to a horizontal layout.\n     */\n    @Prop({ reflect: true })\n    public mobileBreakPoint?: number = DEFAULT_MOBILE_BREAKPOINT;\n\n    /**\n     * Fired when a dock item has been selected from the dock.\n     */\n    @Event()\n    public itemSelected: EventEmitter<DockItem>;\n\n    /**\n     * Fired when a dock menu is opened.\n     */\n    @Event()\n    public menuOpen: EventEmitter<DockItem>;\n\n    /**\n     * Fired when the popover is closed.\n     */\n    @Event()\n    public close: EventEmitter<void>;\n\n    /**\n     * Fired when a Dock is expanded or collapsed.\n     */\n    @Event()\n    private dockExpanded: EventEmitter<boolean>;\n\n    /**\n     * Is used to render the component horizontally, and place\n     * the Dock items in a row.\n     */\n    @State()\n    private useMobileLayout = false;\n\n    private resizeObserver: ResizeObserver;\n\n    public componentDidLoad() {\n        this.resizeObserver = new ResizeObserver(this.handleResize);\n        this.resizeObserver.observe(document.body);\n    }\n\n    disconnectedCallback() {\n        this.resizeObserver.disconnect();\n    }\n\n    public render() {\n        return (\n            <Host\n                class={{\n                    dock: true,\n                    expanded: this.expanded,\n                    'has-mobile-layout': this.useMobileLayout,\n                }}\n            >\n                <nav aria-label={this.accessibleLabel}>\n                    {this.dockItems.map(this.renderDockItem)}\n                    {this.renderSeparator()}\n                    {this.dockFooterItems.map(this.renderDockItem)}\n                </nav>\n                {this.renderExpandShrinkToggle()}\n            </Host>\n        );\n    }\n\n    private renderSeparator = () => {\n        return this.useMobileLayout ? null : <span class=\"footer-separator\" />;\n    };\n\n    private renderDockItem = (item: DockItem) => {\n        return (\n            <limel-dock-button\n                class={{\n                    'dock-item': true,\n                    selected: item.selected,\n                }}\n                item={item}\n                expanded={this.expanded && !this.useMobileLayout}\n                useMobileLayout={this.useMobileLayout}\n            />\n        );\n    };\n\n    private handleResize = () => {\n        if (window.innerWidth <= this.mobileBreakPoint) {\n            this.useMobileLayout = true;\n        } else {\n            this.useMobileLayout = false;\n        }\n    };\n\n    private renderExpandShrinkToggle() {\n        if (this.useMobileLayout || !this.allowResize) {\n            return;\n        }\n\n        return (\n            <button\n                class={{\n                    'expand-shrink': true,\n                    expanded: this.expanded,\n                }}\n                onClick={this.toggleDockWidth}\n            >\n                <limel-icon name=\"angle_right\" />\n            </button>\n        );\n    }\n\n    private toggleDockWidth = () => {\n        this.expanded = !this.expanded;\n        this.dockExpanded.emit(this.expanded);\n    };\n}\n","@use '../../../style/mixins';\n@use '../../../style/functions';\n@use '../../../style/internal/variables';\n\n.button {\n    all: unset;\n    isolation: isolate;\n    position: relative;\n\n    @include mixins.is-flat-inset-clickable(\n        $color: var(--limel-dock-item-text-color),\n        $background-color: var(--dock-background-color)\n    );\n    @include mixins.visualize-keyboard-focus;\n\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n\n    width: 100%;\n    height: var(--dock-item-height);\n\n    border-radius: functions.pxToRem(6);\n    font-size: functions.pxToRem(14);\n    padding: 0 0.5rem;\n    min-width: var(--dock-item-height);\n\n    &:hover {\n        z-index: 1;\n    }\n\n    &.selected {\n        color: var(--limel-dock-item-text-color--selected);\n        background-color: var(\n            --dock-item-background-color--selected,\n            rgb(var(--contrast-200))\n        );\n\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow: var(--button-shadow-inset),\n                var(--shadow-depth-8-focused);\n        }\n\n        .icon {\n            color: var(--limel-dock-item-text--selected);\n        }\n    }\n}\n\nlimel-popover {\n    // makes buttons that are wrapped in a popover become fullwidth\n    display: grid;\n    grid-template-columns: 100%;\n\n    button[slot='trigger'][aria-expanded='true'] {\n        box-shadow: var(--button-shadow-inset);\n    }\n}\n\n.text {\n    @include mixins.truncate-text();\n    padding-left: 0.5rem;\n    padding-right: 0.75rem;\n}\n\n.icon {\n    flex-shrink: 0;\n    width: calc(var(--dock-item-height) - 1rem);\n    height: calc(var(--dock-item-height) - 1rem);\n    color: var(--dock-item-icon-color, var(--limel-dock-item-text-color));\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.125rem;\n    right: -0.125rem;\n}\n\n// ðŸ‘‡ Below is a hidden and private hack\n// only for usage in Lime CRM components.\n// It enables our customers to override\n// the default Home icon, using an external URL\n// or an SVG code.\n.icon {\n    position: relative;\n\n    &:before {\n        text-align: center;\n        pointer-events: none;\n        position: absolute;\n        inset: 0;\n        background: {\n            color: var(--dock-background-color, rgb(var(--contrast-100)));\n            position: center;\n            repeat: no-repeat;\n            size: contain;\n            image: var(--limel-custom-home-icon);\n        }\n        // Since `content` defaults to `undefined`\n        // no pseudo element will be rendered, unless\n        // the consumer defines something.\n        content: var(--limel-custom-home-icon-enabler);\n\n        .button.selected & {\n            background-color: var(\n                --dock-item-background-color--selected,\n                rgb(var(--contrast-200))\n            );\n        }\n    }\n}\n","import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { DockItem } from '../dock.types';\nimport { createRandomString } from '../../../util/random-string';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-dock-button',\n    shadow: false,\n    styleUrl: 'dock-button.scss',\n})\nexport class DockButton {\n    /**\n     * Item that is placed in the dock.\n     */\n    @Prop()\n    public item!: DockItem;\n\n    /**\n     * When the dock is expanded or collapsed, dock items\n     * show labels and tooltips as suitable for the layout.\n     */\n    @Prop({ reflect: true })\n    public expanded? = false;\n\n    /**\n     * When dock is using mobile layout, dock items\n     * show labels and tooltips as suitable for the layout.\n     */\n    @Prop({ reflect: true })\n    public useMobileLayout? = false;\n\n    /**\n     * Fired when a dock item has been selected from the dock.\n     */\n    @Event()\n    public itemSelected: EventEmitter<DockItem>;\n\n    /**\n     * Fired when a dock menu is opened.\n     */\n    @Event()\n    public menuOpen: EventEmitter<DockItem>;\n\n    /**\n     * Indicated whether the popover that renders a component is open.\n     */\n    @State()\n    private isOpen = false;\n\n    /**\n     * Fired when the popover is closed.\n     */\n    @Event()\n    public close: EventEmitter<void>;\n\n    private tooltipId: string;\n    private customComponentElement: HTMLElement;\n    private intersectionObserver?: IntersectionObserver;\n\n    constructor() {\n        this.tooltipId = createRandomString();\n    }\n\n    public render() {\n        if (this.item?.dockMenu?.componentName) {\n            return this.renderPopover();\n        }\n\n        return this.renderButton(this.handleClick);\n    }\n\n    @Watch('isOpen')\n    protected openWatcher() {\n        if (!this.isOpen) {\n            return;\n        }\n\n        if (!this.intersectionObserver) {\n            this.intersectionObserver = new IntersectionObserver(\n                this.focusCustomComponentElement,\n            );\n            this.intersectionObserver.observe(this.customComponentElement);\n        }\n    }\n\n    public disconnectedCallback() {\n        this.intersectionObserver?.disconnect();\n        this.intersectionObserver = undefined;\n    }\n\n    private renderPopover() {\n        const CustomComponent = this.item?.dockMenu.componentName;\n\n        return (\n            <limel-popover\n                openDirection={this.useMobileLayout ? 'top' : 'right-start'}\n                open={this.isOpen || this.item.dockMenu.menuOpen}\n                onClose={this.onPopoverClose}\n            >\n                {this.renderButton(this.openPopover, 'trigger')}\n                <CustomComponent\n                    ref={this.setCustomComponentElement}\n                    {...(this.item.dockMenu.props || {})}\n                    onClose={this.onPopoverClose}\n                />\n            </limel-popover>\n        );\n    }\n\n    private renderButton(\n        handleClick: (event: MouseEvent) => void,\n        slot?: string,\n    ) {\n        return (\n            <button\n                slot={slot}\n                tabindex=\"0\"\n                id={this.tooltipId}\n                type=\"button\"\n                class={{\n                    button: true,\n                    selected: this.item?.selected,\n                }}\n                onClick={handleClick}\n                aria-live=\"polite\"\n            >\n                {this.renderIcon()}\n                {this.renderLabel()}\n                {this.renderTooltip()}\n                {this.renderNotification()}\n            </button>\n        );\n    }\n\n    private renderNotification = () => {\n        if (this.item.badge !== undefined) {\n            return <limel-badge label={this.item.badge} />;\n        }\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n        this.menuOpen.emit(this.item);\n    };\n\n    private setCustomComponentElement = (element: HTMLElement) => {\n        this.customComponentElement = element;\n    };\n\n    private onPopoverClose = () => {\n        this.isOpen = false;\n        this.close.emit();\n    };\n\n    private handleClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.itemSelected.emit(this.item);\n    };\n\n    private renderIcon() {\n        if (!this.item.icon) {\n            return;\n        }\n\n        return <limel-icon name={this.item.icon} class=\"icon\" />;\n    }\n\n    private renderLabel() {\n        if (this.expanded) {\n            return <span class=\"text\">{this.item.label}</span>;\n        }\n    }\n\n    private renderTooltip() {\n        if (!this.expanded && this.item.label) {\n            return (\n                <limel-tooltip\n                    elementId={this.tooltipId}\n                    label={this.item.label}\n                    helperLabel={this.item.helperLabel}\n                    openDirection={this.getOpenDirection()}\n                />\n            );\n        }\n\n        if (this.expanded && this.item.helperLabel) {\n            return (\n                <limel-tooltip\n                    elementId={this.tooltipId}\n                    label={this.item.helperLabel}\n                    openDirection={this.getOpenDirection()}\n                />\n            );\n        }\n    }\n\n    private focusCustomComponentElement = (\n        entries: IntersectionObserverEntry[],\n    ) => {\n        const entry = entries.find(\n            (e) => e.target === this.customComponentElement,\n        );\n        if (!entry) {\n            return;\n        }\n\n        if (!entry.isIntersecting) {\n            return;\n        }\n\n        if (this.customComponentElement?.shadowRoot?.delegatesFocus) {\n            this.customComponentElement?.focus();\n        }\n    };\n\n    private getOpenDirection = () => {\n        if (this.useMobileLayout) {\n            return 'top';\n        }\n\n        return 'right';\n    };\n}\n"],"mappings":"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"}