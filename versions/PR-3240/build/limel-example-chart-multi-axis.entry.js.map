{"version":3,"names":["chartResizableContainerCss","ChartTypeMultiAxisExample","this","orientations","text","value","types","handleOrientationChange","event","orientation","detail","handleTypeChange","type","render","h","Host","class","items","chartItems","label","getSelectedOrientation","options","onChange","getSelectedType","find","option"],"sources":["./src/components/chart/examples/chart-resizable-container.scss?tag=limel-example-chart-multi-axis&encapsulation=shadow","./src/components/chart/examples/chart-multi-axis.tsx"],"sourcesContent":["* {\n    box-sizing: border-box;\n}\n\n:host {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    resize: both;\n    overflow: auto;\n\n    box-sizing: border-box;\n    position: relative;\n\n    min-width: 10rem;\n    width: 100%;\n    max-width: 100%;\n\n    min-height: 5rem;\n    height: 100%;\n    max-height: 50rem;\n\n    padding: 1rem 1rem 3rem 1rem;\n    border: 0.125rem dashed rgb(var(--contrast-500));\n\n    border-radius: 0.5rem;\n\n    &::after {\n        content: 'Resize me â¤µ';\n        font-size: 0.75rem;\n        position: absolute;\n        right: 0.25rem;\n        bottom: 0.25rem;\n    }\n}\n\n:host(.large) {\n    height: 25rem;\n}\n\n:host(.tall) {\n    height: 35rem;\n}\n\n:host(.row-layout) {\n    flex-direction: row;\n}\n\nlimel-example-controls {\n    --example-controls-column-layout: auto-fit;\n    padding: 1rem 0.5rem;\n    height: fit-content;\n    min-width: 40%;\n}\n","import { Component, h, Host, State } from '@stencil/core';\nimport { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { chartItems } from './chart-items-with-negative-values';\n\n/**\n * Multi-axis Charts\n * Normally, charts visualize items in a positive range.\n * However, there are cases where you want to visualize items that have both\n * positive and negative `value`s.\n *\n * @sourceFile chart-items-with-negative-values.ts\n */\n@Component({\n    tag: 'limel-example-chart-multi-axis',\n    shadow: true,\n    styleUrl: 'chart-resizable-container.scss',\n})\nexport class ChartTypeMultiAxisExample {\n    @State()\n    private orientation: 'landscape' | 'portrait' = 'landscape';\n\n    @State()\n    private type: 'bar' | 'scatter' | 'line' = 'scatter';\n\n    private orientations: Option[] = [\n        { text: 'landscape', value: 'landscape' },\n        { text: 'portrait', value: 'portrait' },\n    ];\n\n    private types: Option[] = [\n        { text: 'Bar', value: 'bar' },\n        { text: 'Scatter', value: 'scatter' },\n        { text: 'Line', value: 'line' },\n    ];\n\n    public render() {\n        return (\n            <Host class=\"large\">\n                <h4>Temperature right now</h4>\n                <limel-chart\n                    type={this.type}\n                    items={chartItems}\n                    orientation={this.orientation}\n                />\n                <limel-example-controls>\n                    <limel-select\n                        label=\"orientation\"\n                        value={this.getSelectedOrientation()}\n                        options={this.orientations}\n                        onChange={this.handleOrientationChange}\n                    />\n                    <limel-select\n                        label=\"type\"\n                        value={this.getSelectedType()}\n                        options={this.types}\n                        onChange={this.handleTypeChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private getSelectedOrientation() {\n        return this.orientations.find(\n            (option) => option.value === this.orientation,\n        );\n    }\n\n    private handleOrientationChange = (\n        event: LimelSelectCustomEvent<Option<string>>,\n    ) => {\n        this.orientation = event.detail.value as 'landscape' | 'portrait';\n    };\n\n    private getSelectedType() {\n        return this.types.find((option) => option.value === this.type);\n    }\n\n    private handleTypeChange = (\n        event: LimelSelectCustomEvent<Option<string>>,\n    ) => {\n        this.type = event.detail.value as 'bar' | 'scatter' | 'line';\n    };\n}\n"],"mappings":"yHAAA,MAAMA,EAA6B,+pB,MCiBtBC,EAAyB,M,yBAO1BC,KAAAC,aAAyB,CAC7B,CAAEC,KAAM,YAAaC,MAAO,aAC5B,CAAED,KAAM,WAAYC,MAAO,aAGvBH,KAAAI,MAAkB,CACtB,CAAEF,KAAM,MAAOC,MAAO,OACtB,CAAED,KAAM,UAAWC,MAAO,WAC1B,CAAED,KAAM,OAAQC,MAAO,SAoCnBH,KAAAK,wBACJC,IAEAN,KAAKO,YAAcD,EAAME,OAAOL,KAAiC,EAO7DH,KAAAS,iBACJH,IAEAN,KAAKU,KAAOJ,EAAME,OAAOL,KAAmC,E,iBA9DhB,Y,UAGL,S,CAapCQ,SACH,OACIC,EAACC,EAAI,CAACC,MAAM,SACRF,EAAA,mCACAA,EAAA,eACIF,KAAMV,KAAKU,KACXK,MAAOC,EACPT,YAAaP,KAAKO,cAEtBK,EAAA,8BACIA,EAAA,gBACIK,MAAM,cACNd,MAAOH,KAAKkB,yBACZC,QAASnB,KAAKC,aACdmB,SAAUpB,KAAKK,0BAEnBO,EAAA,gBACIK,MAAM,OACNd,MAAOH,KAAKqB,kBACZF,QAASnB,KAAKI,MACdgB,SAAUpB,KAAKS,oB,CAO3BS,yBACJ,OAAOlB,KAAKC,aAAaqB,MACpBC,GAAWA,EAAOpB,QAAUH,KAAKO,a,CAUlCc,kBACJ,OAAOrB,KAAKI,MAAMkB,MAAMC,GAAWA,EAAOpB,QAAUH,KAAKU,M"}