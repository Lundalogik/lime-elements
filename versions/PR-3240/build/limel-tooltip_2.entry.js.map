{"version":3,"names":["getOwnerElement","id","startingPoint","element","parentNode","nodeType","Node","DOCUMENT_FRAGMENT_NODE","DOCUMENT_NODE","getElementById","DEFAULT_DELAY_FOR_SHOWING","TooltipTimer","constructor","showCallback","hideCallback","delayForShowing","this","timerHandle","showAfterDelay","setTimeout","hide","clearTimeout","tooltipCss","DEFAULT_MAX_LENGTH","Tooltip","hostRef","showTooltip","tooltipTimer","hideTooltip","portalId","createRandomString","tooltipId","open","connectedCallback","ownerElement","elementId","host","setOwnerAriaLabel","addListeners","disconnectedCallback","removeListeners","render","tooltipZIndex","getComputedStyle","getPropertyValue","h","class","openDirection","visible","containerId","containerStyle","anchor","label","helperLabel","maxlength","role","_a","setAttribute","addEventListener","_b","_c","_d","removeEventListener","tooltipContentCss","TooltipContent","isLabelsTextLong","length","props","style","Object","assign"],"sources":["./src/components/tooltip/getOwnerElement.tsx","./src/components/tooltip/tooltipTimer.ts","./src/components/tooltip/tooltip.scss?tag=limel-tooltip&encapsulation=shadow","./src/components/tooltip/tooltip.tsx","./src/components/tooltip/tooltip-content.scss?tag=limel-tooltip-content&encapsulation=shadow","./src/components/tooltip/tooltip-content.tsx"],"sourcesContent":["export function getOwnerElement(\n    id: string,\n    startingPoint: Node,\n): HTMLElement | undefined {\n    let element: Node = startingPoint;\n\n    do {\n        element = element.parentNode;\n    } while (\n        element &&\n        element.nodeType !== Node.DOCUMENT_FRAGMENT_NODE &&\n        element.nodeType !== Node.DOCUMENT_NODE\n    );\n\n    return (element as ShadowRoot)?.getElementById(id);\n}\n","const DEFAULT_DELAY_FOR_SHOWING = 500;\n\nexport class TooltipTimer {\n    private timerHandle: number | null = null;\n    private showCallback: Function;\n    private hideCallback: Function;\n    private delayForShowing: number;\n\n    constructor(\n        showCallback: Function,\n        hideCallback: Function,\n        delayForShowing: number = DEFAULT_DELAY_FOR_SHOWING,\n    ) {\n        this.showCallback = showCallback;\n        this.hideCallback = hideCallback;\n        this.delayForShowing = delayForShowing;\n    }\n\n    showAfterDelay(): void {\n        if (!this.timerHandle) {\n            this.timerHandle = setTimeout(\n                this.showCallback,\n                this.delayForShowing,\n            );\n        }\n    }\n\n    hide(): void {\n        clearTimeout(this.timerHandle);\n        this.timerHandle = null;\n        this.hideCallback();\n    }\n}\n","/**\n * @prop --tooltip-z-index: z-index of the tooltip.\n */\n\n:host(limel-tooltip) {\n    // Absolutely positioning ensures that this invisible element\n    // does not occupy visible space in the UI.\n    // Without this, `limel-tooltip` could in many cases\n    // mess up the layout, where it is used.\n    // For example, inside a `grid` or `flex` section,\n    // every instance of the tooltip would take some space,\n    // creating gaps and empty holes.\n    position: absolute;\n    pointer-events: none;\n}\n","import { Component, h, Prop, Element, State } from '@stencil/core';\nimport { JSX } from 'react';\nimport { createRandomString } from '../../util/random-string';\nimport { OpenDirection } from '../menu/menu.types';\nimport { getOwnerElement } from './getOwnerElement';\nimport { TooltipTimer } from './tooltipTimer';\n\nconst DEFAULT_MAX_LENGTH = 50;\n\n/**\n * A tooltip can be used to display a descriptive text for any element.\n * The displayed content must be a brief and supplemental string of text,\n * identifying the element or describing its function for the user,\n * helping them better understand unfamiliar objects that aren't described\n * directly in the UI.\n *\n * ## Interaction\n * The tooltip appears after a slight delay, when the element is hovered;\n * and disappears as soon as the cursor leaves the element.\n * Therefore, users cannot interact with the tip, but if the trigger element\n * itself is interactive, it will remain interactible even with a tooltip bound\n * to it.\n *\n * :::note\n * In order to display the tooltip, the tooltip element and its trigger element\n * must be within the same document or document fragment (the same shadowRoot).\n * Often, it's easiest to just place them next to each other like in the example\n * below, but if you need to, you can place them differently.\n *\n * ```html\n * <limel-button icon=\"search\" id=\"tooltip-example\" />\n * <limel-tooltip label=\"Search\" elementId=\"tooltip-example\" />\n * ```\n * :::\n *\n * ## Usage\n * - Keep in mind that tooltips can be distracting, and can be perceived as an interruption.\n * Use them only when they add significant value.\n * - A good tip is concise, helpful, and informative.\n * Don't explain the obvious or simply repeat what is already on the screen.\n * When used correctly, supplemental info of a tooltip helps to [declutter the UI](/#/DesignGuidelines/decluttering.md/).\n * - If the tip is essential to the primary tasks that the user is performing,\n * such as warnings or important notes, include the information directly in the\n * interface instead.\n * - When a component offers a helper text (e.g. [Input field](/#/component/limel-input-field/)),\n * use that, not a tooltip.\n * - Make sure to use the tooltip on an element that users naturally and\n * effortlessly recognize can be hovered.\n *\n * @exampleComponent limel-example-tooltip-basic\n * @exampleComponent limel-example-tooltip-max-character\n * @exampleComponent limel-example-tooltip-composite\n */\n@Component({\n    tag: 'limel-tooltip',\n    shadow: true,\n    styleUrl: 'tooltip.scss',\n})\nexport class Tooltip {\n    /**\n     * ID of the owner element that the tooltip should describe.\n     * Must be a child within the same document fragment as the tooltip element\n     * itself.\n     */\n    @Prop({ reflect: true })\n    public elementId!: string;\n\n    /**\n     * Short descriptive text of the owner element.\n     */\n    @Prop({ reflect: true })\n    public label!: string;\n\n    /**\n     * Additional helper text for the element.\n     * Example usage can be a keyboard shortcut to activate the function of the\n     * owner element.\n     */\n    @Prop({ reflect: true })\n    public helperLabel?: string;\n\n    /**\n     * The maximum amount of characters before rendering 'label' and\n     * 'helperLabel' in two rows.\n     */\n    @Prop({ reflect: true })\n    public maxlength?: number = DEFAULT_MAX_LENGTH;\n\n    /**\n     * Decides the tooltip's location in relation to its trigger.\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'top';\n\n    @Element()\n    private host: HTMLLimelTooltipElement;\n\n    @State()\n    private open: boolean;\n\n    private portalId: string;\n    private tooltipId: string;\n    private ownerElement: HTMLElement;\n    private tooltipTimer: TooltipTimer;\n\n    public constructor() {\n        this.portalId = createRandomString();\n        this.tooltipId = createRandomString();\n        this.tooltipTimer = new TooltipTimer(\n            () => (this.open = true),\n            () => (this.open = false),\n        );\n    }\n\n    public connectedCallback() {\n        this.ownerElement = getOwnerElement(this.elementId, this.host);\n        this.setOwnerAriaLabel();\n        this.addListeners();\n    }\n\n    public disconnectedCallback() {\n        this.removeListeners();\n    }\n\n    public render(): JSX.Element {\n        const tooltipZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--tooltip-z-index',\n        );\n\n        return (\n            <div class=\"trigger-anchor\">\n                <limel-portal\n                    openDirection={this.openDirection}\n                    visible={this.open}\n                    containerId={this.portalId}\n                    containerStyle={{\n                        'z-index': tooltipZIndex,\n                        'pointer-events': 'none',\n                    }}\n                    anchor={this.ownerElement}\n                >\n                    <limel-tooltip-content\n                        label={this.label}\n                        helperLabel={this.helperLabel}\n                        maxlength={this.maxlength}\n                        role=\"tooltip\"\n                        aria-hidden={!this.open}\n                        id={this.tooltipId}\n                    />\n                </limel-portal>\n            </div>\n        );\n    }\n\n    private setOwnerAriaLabel() {\n        this.ownerElement?.setAttribute('aria-describedby', this.tooltipId);\n    }\n\n    private addListeners() {\n        this.ownerElement?.addEventListener('mouseover', this.showTooltip);\n        this.ownerElement?.addEventListener('mouseout', this.hideTooltip);\n        this.ownerElement?.addEventListener('focus', this.showTooltip);\n        this.ownerElement?.addEventListener('blur', this.hideTooltip);\n    }\n\n    private removeListeners() {\n        this.ownerElement?.removeEventListener('mouseover', this.showTooltip);\n        this.ownerElement?.removeEventListener('mouseout', this.hideTooltip);\n        this.ownerElement?.removeEventListener('focus', this.showTooltip);\n        this.ownerElement?.removeEventListener('blur', this.hideTooltip);\n    }\n\n    private showTooltip = () => {\n        this.tooltipTimer.showAfterDelay();\n    };\n\n    private hideTooltip = () => {\n        this.tooltipTimer.hide();\n    };\n}\n",":host(limel-tooltip-content) {\n    display: flex;\n\n    border-radius: 0.25rem;\n    padding: 0.25rem 0.5rem;\n    background-color: rgb(var(--contrast-1300));\n    box-shadow: var(--shadow-depth-16);\n}\n\ntext {\n    font-size: 0.875rem; // 14px\n    line-height: 1.25;\n    display: flex;\n    column-gap: 1rem;\n\n    &.has-column-layout {\n        display: table-cell;\n        width: fit-content;\n        max-width: min(var(--tooltip-max-width-of-text), 80vw);\n        .label {\n            padding-bottom: 0.5rem;\n        }\n        .helper-label {\n            padding-bottom: 0.25rem;\n        }\n    }\n}\n\n.label {\n    color: rgb(var(--contrast-200));\n}\n\n.helper-label {\n    color: rgb(var(--contrast-800));\n\n    &:empty {\n        display: none;\n    }\n}\n","import { Component, h, Prop } from '@stencil/core';\n\n/**\n * This component is used internally by `limel-tooltip`.\n *\n * @private\n */\n@Component({\n    tag: 'limel-tooltip-content',\n    shadow: true,\n    styleUrl: 'tooltip-content.scss',\n})\nexport class TooltipContent {\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    label!: string;\n\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    helperLabel?: string;\n\n    /**\n     * Read more in tooltip.tsx\n     */\n    @Prop({ reflect: true })\n    maxlength?: number;\n\n    public render() {\n        let isLabelsTextLong = false;\n        if (this.helperLabel && this.maxlength) {\n            isLabelsTextLong =\n                this.label.length + this.helperLabel.length > this.maxlength;\n        }\n\n        const props: any = {};\n        if (this.maxlength) {\n            props.style = {\n                '--tooltip-max-width-of-text': `${this.maxlength}` + 'ch',\n            };\n        }\n\n        return [\n            <text class={{ 'has-column-layout': isLabelsTextLong }} {...props}>\n                <div class=\"label\">{this.label}</div>\n                <div class=\"helper-label\">{this.helperLabel}</div>\n            </text>,\n        ];\n    }\n}\n"],"mappings":"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"}