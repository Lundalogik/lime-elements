{"version":3,"names":["pickerCss","SEARCH_DEBOUNCE","CHIP_SET_TAG_NAME","DEFAULT_SEARCHER_MAX_RESULTS","Picker","constructor","hostRef","this","chipSetEditMode","getValueId","item","value","id","createChips","multiple","listItems","map","createChip","listItem","name","getIconName","icon","color","getIconFillColor","iconColor","valueId","text","removable","undefined","menuItems","actions","search","async","query","timeoutId","setTimeout","loading","searcher","defaultSearcher","result","textValue","clearTimeout","handleSearchResult","Promise","resolve","allItems","slice","filteredItems","filter","searchText","toLowerCase","secondaryText","includes","handleTextInput","bind","handleInputKeyDown","handleDropdownKeyDown","handleInputFieldFocus","handleChange","handleInteract","handleListChange","handleActionListChange","handleStopEditAndBlur","handleCloseMenu","onListKeyDown","portalId","createRandomString","debouncedSearch","debounce","componentWillLoad","chips","componentDidLoad","chipSet","host","shadowRoot","querySelector","disconnectedCallback","cancel","getEditMode","render","props","maxItems","h","Object","assign","type","inputType","label","helperText","leadingIcon","disabled","invalid","delimiter","renderDelimiter","readonly","required","searchLabel","onInput","onKeyDown","onChange","onInteract","onStartEdit","onStopEdit","emptyInputOnBlur","clearAllButton","renderDropdown","onChangeValue","dropDownContent","getDropdownContent","content","shouldShowDropDownContent","actionContent","getActionContent","actionPosition","push","renderPortal","actionCount","_b","_a","length","class","actionScrollBehavior","badgeIcons","items","removeUnusedPropertiesOnAction","action","isFull","renderSpinner","renderEmptyMessage","renderListResult","style","width","display","padding","limeBranded","emptyResultMessage","margin","event","keyFound","TAB","ESCAPE","ENTER","key","keyCodeFound","TAB_KEY_CODE","ESCAPE_KEY_CODE","ENTER_KEY_CODE","keyCode","setFocus","dropdownZIndex","getComputedStyle","getPropertyValue","visible","containerId","inheritParentWidth","containerStyle","open","allowClicksElement","onDismiss","element","activeElement","document","portalElement","isDescendant","clearInputField","stopPropagation","detail","flush","newValue","change","emit","chip","find","interact","isForwardTab","altKey","metaKey","shiftKey","isUp","ARROW_UP","ARROW_UP_KEY_CODE","isDown","ARROW_DOWN","ARROW_DOWN_KEY_CODE","list","preventDefault","listElement","focus","isEscape","values","emptyInput"],"sources":["./src/components/picker/picker.scss?tag=limel-picker&encapsulation=shadow","./src/components/picker/picker.tsx"],"sourcesContent":["// Note! The `--dropdown-z-index` property is used from `picker.tsx`.\n/**\n  * @prop --dropdown-z-index: z-index of the dropdown menu.\n  */\n\n:host {\n    position: relative;\n    display: block;\n}\n\n:host([hidden]) {\n    display: none;\n}\n","import { Action } from '../collapsible-section/action';\nimport { ActionPosition, ActionScrollBehavior } from '../picker/actions.types';\nimport { Chip } from '../chip-set/chip.types';\nimport { ListItem } from '../list/list-item.types';\nimport { Searcher } from '../picker/searcher.types';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport {\n    ARROW_DOWN,\n    ARROW_DOWN_KEY_CODE,\n    ARROW_UP,\n    ARROW_UP_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n    TAB,\n    TAB_KEY_CODE,\n} from '../../util/keycodes';\nimport { createRandomString } from '../../util/random-string';\nimport {\n    LimelChipSetCustomEvent,\n    LimelListCustomEvent,\n} from '../../components';\nimport { getIconFillColor, getIconName } from '../icon/get-icon-props';\nimport { PickerValue } from './value.types';\nimport { DebouncedFunc, debounce } from 'lodash-es';\n\nconst SEARCH_DEBOUNCE = 300;\nconst CHIP_SET_TAG_NAME = 'limel-chip-set';\nconst DEFAULT_SEARCHER_MAX_RESULTS = 20;\n\n/**\n * @exampleComponent limel-example-picker-basic\n * @exampleComponent limel-example-picker-multiple\n * @exampleComponent limel-example-picker-icons\n * @exampleComponent limel-example-picker-value-as-object\n * @exampleComponent limel-example-picker-value-as-object-with-actions\n * @exampleComponent limel-example-picker-empty-suggestions\n * @exampleComponent limel-example-picker-leading-icon\n * @exampleComponent limel-example-picker-static-actions\n * @exampleComponent limel-example-picker-composite\n */\n@Component({\n    tag: 'limel-picker',\n    shadow: true,\n    styleUrl: 'picker.scss',\n})\nexport class Picker {\n    /**\n     * True if the picker should be disabled\n     */\n    @Prop()\n    public disabled: boolean = false;\n\n    /**\n     * Set to `true` to disable adding and removing items,\n     * but allow interaction with existing items.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Text to display for the input field of the picker\n     */\n    @Prop()\n    public label: string;\n\n    /**\n     * Search label to display in the input field when searching\n     */\n    @Prop()\n    public searchLabel: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop()\n    public leadingIcon: string;\n\n    /**\n     * A message to display when the search returned an empty result\n     */\n    @Prop()\n    public emptyResultMessage: string;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop()\n    public required: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Currently selected value or values. Where the value can be an object.\n     */\n    @Prop()\n    public value: ListItem<PickerValue> | Array<ListItem<PickerValue>>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `ListItem`:s.\n     *\n     * See the docs for the type `Searcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher?: Searcher;\n\n    /**\n     * Only used if no `searcher` is provided. The picker will then use a\n     * default search function that filters the `allItems` based on the\n     * `text` and `secondaryText` properties of the items.\n     * This way, custom search functions are typically only needed when the\n     * search is done on the server.\n     * For performance reasons, the default searcher will never return more\n     * than 20 items, but if there are more than 20 items, the rest can be\n     * found by typing more characters in the search field.\n     */\n    @Prop()\n    public allItems?: Array<ListItem<PickerValue>> = [];\n\n    /**\n     * True if multiple values are allowed\n     */\n    @Prop()\n    public multiple: boolean = false;\n\n    /**\n     * Sets delimiters between chips. Works only when `multiple` is `true`.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Static actions that can be clicked by the user.\n     */\n    @Prop()\n    public actions: Array<ListItem<Action>> = [];\n\n    /**\n     * Position of the custom static actions in the picker's results dropdown.\n     * Can be set to `'top'` or `'bottom'`.\n     */\n    @Prop()\n    public actionPosition: ActionPosition = 'bottom';\n\n    /**\n     * Scroll behavior of the custom static actions, when user scrolls\n     * in the picker's results dropdown. Can be set to `'scroll'` which means\n     * the action items will scroll together with the list, or `'sticky'` which\n     * retains their position at the top or bottom of the drop down while\n     * scrolling.\n     */\n    @Prop()\n    public actionScrollBehavior: ActionScrollBehavior = 'sticky';\n\n    /**\n     * Whether badge icons should be used in the result list or not\n     */\n    @Prop({ reflect: true })\n    public badgeIcons: boolean = false;\n\n    /**\n     * Fired when a new value has been selected from the picker\n     */\n    @Event()\n    private change: EventEmitter<\n        ListItem<PickerValue> | Array<ListItem<PickerValue>>\n    >;\n\n    /**\n     * Fired when clicking on a selected value\n     */\n    @Event()\n    private interact: EventEmitter<ListItem<PickerValue>>;\n\n    /**\n     * Emitted when the user selects an action.\n     */\n    @Event()\n    private action: EventEmitter<Action>;\n\n    @State()\n    private items: Array<ListItem<number | string>>;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private loading: boolean = false;\n\n    @State()\n    private chips: Chip[] = [];\n\n    @Element()\n    private host: HTMLLimelPickerElement;\n\n    // Should NOT be decorated with State(), since this\n    // should not trigger a re-render by itself.\n    private chipSetEditMode = false;\n\n    private debouncedSearch: DebouncedFunc<(query: string) => Promise<void>>;\n    private chipSet: HTMLLimelChipSetElement;\n    private portalId: string;\n\n    constructor() {\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\n        this.handleDropdownKeyDown = this.handleDropdownKeyDown.bind(this);\n        this.handleInputFieldFocus = this.handleInputFieldFocus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInteract = this.handleInteract.bind(this);\n        this.handleListChange = this.handleListChange.bind(this);\n        this.handleActionListChange = this.handleActionListChange.bind(this);\n        this.handleStopEditAndBlur = this.handleStopEditAndBlur.bind(this);\n        this.handleCloseMenu = this.handleCloseMenu.bind(this);\n        this.onListKeyDown = this.onListKeyDown.bind(this);\n\n        this.portalId = createRandomString();\n        this.debouncedSearch = debounce(this.search, SEARCH_DEBOUNCE);\n    }\n\n    public componentWillLoad() {\n        this.chips = this.createChips(this.value);\n    }\n\n    public componentDidLoad() {\n        this.chipSet = this.host.shadowRoot.querySelector(CHIP_SET_TAG_NAME);\n    }\n\n    public disconnectedCallback() {\n        this.debouncedSearch.cancel();\n    }\n\n    public async componentWillUpdate() {\n        this.chipSetEditMode = false;\n        if (this.chipSet) {\n            this.chipSetEditMode = await this.chipSet.getEditMode();\n        }\n    }\n\n    public render() {\n        const props: {\n            maxItems?: number;\n        } = {};\n\n        if (!this.multiple) {\n            props.maxItems = 1;\n        }\n\n        return [\n            <limel-chip-set\n                type=\"input\"\n                inputType=\"search\"\n                label={this.label}\n                helperText={this.helperText}\n                leadingIcon={this.leadingIcon}\n                value={this.chips}\n                disabled={this.disabled}\n                invalid={this.invalid}\n                delimiter={this.renderDelimiter()}\n                readonly={this.readonly}\n                required={this.required}\n                searchLabel={this.searchLabel}\n                onInput={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n                onChange={this.handleChange}\n                onInteract={this.handleInteract}\n                onStartEdit={this.handleInputFieldFocus}\n                onStopEdit={this.handleStopEditAndBlur}\n                emptyInputOnBlur={false}\n                clearAllButton={this.multiple && !this.chipSetEditMode}\n                {...props}\n            />,\n            this.renderDropdown(),\n        ];\n    }\n\n    @Watch('value')\n    protected onChangeValue() {\n        this.chips = this.createChips(this.value);\n    }\n\n    private renderDelimiter() {\n        if (this.multiple) {\n            return this.delimiter;\n        }\n\n        return null;\n    }\n\n    private getValueId = (item: ListItem) => {\n        const value = item.value;\n        if (!!value && typeof value === 'object') {\n            return value.id;\n        }\n\n        return value;\n    };\n\n    private createChips = (value: ListItem | ListItem[]): Chip[] => {\n        if (!value) {\n            return [];\n        }\n\n        if (this.multiple) {\n            const listItems: ListItem[] = value as ListItem[];\n\n            return listItems.map(this.createChip);\n        }\n\n        const listItem: ListItem = value as ListItem;\n\n        return [this.createChip(listItem)];\n    };\n\n    private createChip = (listItem: ListItem): Chip => {\n        const name = getIconName(listItem.icon);\n        const color = getIconFillColor(listItem.icon, listItem.iconColor);\n        const valueId = this.getValueId(listItem);\n\n        return {\n            id: `${valueId}`,\n            text: listItem.text,\n            removable: true,\n            icon: name ? { name: name, color: color } : undefined,\n            value: listItem,\n            menuItems: listItem.actions,\n        };\n    };\n\n    /**\n     * Renders the dropdown with the items to pick from, or a spinner if the picker\n     * is waiting for items to be received\n     *\n     * @returns picker dropdown\n     */\n    private renderDropdown() {\n        const dropDownContent = this.getDropdownContent();\n\n        const content = [];\n\n        if (this.shouldShowDropDownContent()) {\n            const actionContent = this.getActionContent();\n            if (this.actionPosition === 'top') {\n                content.push(actionContent);\n            }\n\n            if (dropDownContent) {\n                content.push(dropDownContent);\n            }\n\n            if (this.actionPosition === 'bottom') {\n                content.push(actionContent);\n            }\n        }\n\n        return this.renderPortal(content);\n    }\n\n    private getActionContent() {\n        const actionCount = this.actions?.length ?? 0;\n        if (actionCount === 0) {\n            return null;\n        }\n\n        return [\n            <limel-list\n                class={{\n                    'static-actions-list': true,\n                    'is-on-top': this.actionPosition === 'top',\n                    'is-at-bottom': this.actionPosition === 'bottom',\n                    'has-position-sticky':\n                        this.actionScrollBehavior === 'sticky',\n                }}\n                badgeIcons={true}\n                type={'selectable'}\n                onChange={this.handleActionListChange}\n                items={this.actions.map(this.removeUnusedPropertiesOnAction)}\n            />,\n        ];\n    }\n\n    private removeUnusedPropertiesOnAction(\n        action: ListItem<Action>,\n    ): ListItem<Action> {\n        return {\n            ...action,\n            actions: [],\n        };\n    }\n\n    private shouldShowDropDownContent() {\n        if (this.isFull()) {\n            return false;\n        }\n\n        return !!this.chipSetEditMode;\n    }\n\n    private getDropdownContent() {\n        if (!this.shouldShowDropDownContent()) {\n            return;\n        }\n\n        if (this.loading) {\n            return this.renderSpinner();\n        }\n\n        if (!this.items?.length) {\n            return this.renderEmptyMessage();\n        }\n\n        return this.renderListResult();\n    }\n\n    /**\n     * Returns true if the picker is \"full\"\n     * The picker is considered to be full if it has a value and only one is allowed\n     *\n     * @returns true if the picker is full\n     */\n    private isFull(): boolean {\n        return !this.multiple && !!this.value;\n    }\n\n    private renderSpinner() {\n        return (\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '1rem 0',\n                }}\n            >\n                <limel-spinner limeBranded={false} />\n            </div>\n        );\n    }\n\n    private renderEmptyMessage() {\n        if (!this.emptyResultMessage) {\n            return;\n        }\n\n        const style = {\n            color: 'rgb(var(--contrast-1100))',\n            'text-align': 'center',\n            margin: '0.5rem 1rem',\n        };\n\n        return <p style={style}>{this.emptyResultMessage}</p>;\n    }\n\n    private renderListResult() {\n        return (\n            <limel-list\n                badgeIcons={this.badgeIcons}\n                onChange={this.handleListChange}\n                onKeyDown={this.onListKeyDown}\n                type=\"selectable\"\n                items={this.items}\n            />\n        );\n    }\n\n    private onListKeyDown(event: KeyboardEvent) {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        const keyCodeFound = [\n            TAB_KEY_CODE,\n            ESCAPE_KEY_CODE,\n            ENTER_KEY_CODE,\n        ].includes(event.keyCode);\n        if (keyFound || keyCodeFound) {\n            this.chipSet.setFocus();\n        }\n    }\n\n    private renderPortal(content: any[] = []) {\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index',\n        );\n\n        return (\n            <limel-portal\n                visible={content.length > 0}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={content.length > 0}\n                    allowClicksElement={this.host}\n                    style={{\n                        '--mdc-menu-min-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {content}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    }\n\n    /**\n     * Check if a descendant still has focus. If not, reset text value and search result.\n     */\n    private handleStopEditAndBlur() {\n        // In browsers where shadow DOM is not supported activeElement on shadowRoot will return null\n        // However, document.activeElement will return the actual focused element instead of the outermost shadow host\n        const element =\n            this.host.shadowRoot.activeElement || document.activeElement;\n        const portalElement = document.querySelector(`#${this.portalId}`);\n        if (\n            isDescendant(element as HTMLElement, this.host) ||\n            isDescendant(element as HTMLElement, portalElement as HTMLElement)\n        ) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    /**\n     * Input handler for the input field\n     *\n     * @param event - event\n     */\n    private async handleTextInput(event) {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.textValue = query;\n\n        this.debouncedSearch(query);\n        // If the search-query is an empty string, bypass debouncing.\n        if (query === '') {\n            this.debouncedSearch.flush();\n        }\n    }\n\n    private search = async (query: string) => {\n        const timeoutId = setTimeout(() => {\n            this.loading = true;\n        });\n        const searcher = this.searcher || this.defaultSearcher;\n        const result = (await searcher(this.textValue)) as Array<\n            ListItem<PickerValue>\n        >;\n\n        // If the search function resolves immediately,\n        // the loading spinner will not be shown.\n        clearTimeout(timeoutId);\n\n        this.handleSearchResult(query, result);\n    };\n\n    private defaultSearcher: Searcher = (\n        query: string,\n    ): Promise<ListItem[]> => {\n        return new Promise((resolve) => {\n            if (query === '') {\n                return resolve(\n                    this.allItems.slice(0, DEFAULT_SEARCHER_MAX_RESULTS),\n                );\n            }\n\n            const filteredItems = this.allItems.filter((item) => {\n                let searchText = item.text.toLowerCase();\n                if (item.secondaryText) {\n                    searchText =\n                        searchText + ' ' + item.secondaryText.toLowerCase();\n                }\n\n                return searchText.includes(query.toLowerCase());\n            });\n\n            return resolve(\n                filteredItems.slice(0, DEFAULT_SEARCHER_MAX_RESULTS),\n            );\n        });\n    };\n\n    /**\n     * Change handler for the list\n     *\n     * @param event - event\n     */\n    private handleListChange(\n        event: LimelListCustomEvent<ListItem<PickerValue>>,\n    ) {\n        event.stopPropagation();\n        if (!this.value || this.value !== event.detail) {\n            let newValue: ListItem<PickerValue> | Array<ListItem<PickerValue>> =\n                event.detail;\n            if (this.multiple) {\n                newValue = [\n                    ...(this.value as Array<ListItem<PickerValue>>),\n                    event.detail,\n                ];\n            }\n\n            this.change.emit(newValue);\n            this.items = [];\n        }\n\n        if (this.multiple) {\n            this.textValue = '';\n            this.chipSet?.setFocus(true);\n        }\n    }\n\n    /**\n     * Change handler for the list\n     *\n     * @param event - event\n     */\n    private handleActionListChange(\n        event: LimelListCustomEvent<ListItem<Action>>,\n    ) {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.action.emit(event.detail.value);\n        this.items = [];\n    }\n\n    /**\n     * Focus handler for the chip set\n     * Prevent focus if the picker has a value and does not support multiple values\n     */\n    private handleInputFieldFocus() {\n        const query = this.textValue;\n        this.debouncedSearch(query);\n    }\n\n    private handleChange(event: LimelChipSetCustomEvent<Chip | Chip[]>) {\n        event.stopPropagation();\n\n        let newValue = null;\n        if (this.multiple) {\n            const chips = event.detail as Chip[];\n            newValue = chips.map((chip) => {\n                return (this.value as ListItem[]).find((item) => {\n                    const valueId = this.getValueId(item);\n\n                    return `${valueId}` === chip.id;\n                });\n            });\n        }\n\n        this.change.emit(newValue);\n    }\n\n    private handleInteract(event: LimelChipSetCustomEvent<Chip>) {\n        event.stopPropagation();\n        this.interact.emit(event.detail ? event.detail.value : event.detail);\n    }\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param event - event\n     */\n    private handleInputKeyDown(event: KeyboardEvent) {\n        const isForwardTab =\n            (event.key === TAB || event.keyCode === TAB_KEY_CODE) &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp =\n            event.key === ARROW_UP || event.keyCode === ARROW_UP_KEY_CODE;\n        const isDown =\n            event.key === ARROW_DOWN || event.keyCode === ARROW_DOWN_KEY_CODE;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child',\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child',\n            );\n            listElement.focus();\n        }\n    }\n\n    /**\n     * Key handler for the dropdown\n     *\n     * @param event - event\n     */\n    private handleDropdownKeyDown(event: KeyboardEvent) {\n        const isEscape =\n            event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n\n        if (isEscape) {\n            event.preventDefault();\n            this.textValue = '';\n            this.chipSet.setFocus(true);\n        }\n    }\n\n    private handleSearchResult(query: string, result: ListItem[]) {\n        if (query === this.textValue) {\n            this.items = result;\n            if (this.multiple) {\n                const values = this.value as ListItem[];\n                this.items = result.filter((item) => {\n                    return !values.includes(item);\n                });\n            }\n\n            this.loading = false;\n        }\n    }\n\n    private handleCloseMenu() {\n        if (this.items.length > 0) {\n            return;\n        }\n\n        this.clearInputField();\n    }\n\n    private clearInputField() {\n        this.chipSet.emptyInput();\n        this.textValue = '';\n        this.handleSearchResult('', []);\n        this.debouncedSearch.cancel();\n    }\n}\n"],"mappings":"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"}