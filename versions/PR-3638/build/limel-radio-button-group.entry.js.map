{"version":3,"names":["RadioButtonGroup","this","handleChange","event","stopPropagation","disabled","selectedOption","detail","change","emit","render","items","options","map","option","Object","assign","selected","value","h","type","badgeIcons","maxLinesSecondaryText","onChange"],"sources":["./src/components/radio-button-group/radio-button-group.tsx"],"sourcesContent":["import { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { ListItem } from '../list/list-item.types';\nimport { LimelListCustomEvent } from '@limetech/lime-elements';\n\n/**\n * The Radio Button component provides a convenient way to create a group of radio buttons\n * from an array of options. Radio buttons allow users to select a single option from\n * multiple choices, making them ideal for exclusive selections.\n *\n * :::note\n * A single radio button is never useful in a UI. Radio buttons should always come in groups\n * of at least 2 options where only one can be selected at a time.\n * :::\n *\n * @exampleComponent limel-example-radio-button-group-basic\n * @exampleComponent limel-example-radio-button-group-deselect-selected\n * @exampleComponent limel-example-radio-button-group-icons\n * @exampleComponent limel-example-radio-button-group-multiple-lines\n * @beta\n */\n@Component({\n    tag: 'limel-radio-button-group',\n    shadow: false,\n})\nexport class RadioButtonGroup {\n    /**\n     * Array of radio button options to display\n     */\n    @Prop()\n    public options: Array<ListItem> = [];\n\n    /**\n     * The currently selected value\n     */\n    @Prop()\n    public value: ListItem['value'];\n\n    /**\n     * Disables all radio buttons when `true`\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` if the radio button group should display larger icons with a background\n     */\n    @Prop({ reflect: true })\n    public badgeIcons: boolean;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    @Prop({ reflect: true })\n    public maxLinesSecondaryText: number = 3;\n\n    /**\n     * Emitted when the selection changes with the full ListItem payload\n     */\n    @Event()\n    private change: EventEmitter<ListItem>;\n\n    public render() {\n        const items: Array<ListItem> = this.options.map((option) => ({\n            ...option,\n            selected: option.value === this.value,\n            disabled: this.disabled || option.disabled,\n        }));\n\n        return (\n            <limel-list\n                items={items}\n                type=\"radio\"\n                badgeIcons={this.badgeIcons}\n                maxLinesSecondaryText={this.maxLinesSecondaryText}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: LimelListCustomEvent<ListItem>) => {\n        event.stopPropagation();\n\n        if (this.disabled) {\n            return;\n        }\n\n        const selectedOption = event.detail;\n        if (!selectedOption) {\n            return;\n        }\n\n        this.change.emit(selectedOption);\n    };\n}\n"],"mappings":"4DAwBaA,EAAgB,M,wDA0DjBC,KAAAC,aAAgBC,IACpBA,EAAMC,kBAEN,GAAIH,KAAKI,SAAU,CACf,M,CAGJ,MAAMC,EAAiBH,EAAMI,OAC7B,IAAKD,EAAgB,CACjB,M,CAGJL,KAAKO,OAAOC,KAAKH,EAAe,E,aAjEF,G,mCAYhB,M,qDAeqB,C,CAQhCI,SACH,MAAMC,EAAyBV,KAAKW,QAAQC,KAAKC,GAAMC,OAAAC,OAAAD,OAAAC,OAAA,GAChDF,GAAM,CACTG,SAAUH,EAAOI,QAAUjB,KAAKiB,MAChCb,SAAUJ,KAAKI,UAAYS,EAAOT,aAGtC,OACIc,EAAA,cACIR,MAAOA,EACPS,KAAK,QACLC,WAAYpB,KAAKoB,WACjBC,sBAAuBrB,KAAKqB,sBAC5BC,SAAUtB,KAAKC,c"}