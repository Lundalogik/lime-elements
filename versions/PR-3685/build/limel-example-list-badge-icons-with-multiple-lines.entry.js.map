{"version":3,"names":["BadgeIconsListExample","this","options","text","value","items","icon","secondaryText","handleChange","event","stopPropagation","detail","maxLines","Array","isArray","render","h","Host","badgeIcons","maxLinesSecondaryText","Number","_a","style","label","onChange"],"sources":["./src/components/list/examples/list-badge-icons-with-multiple-lines.tsx"],"sourcesContent":["import { Option } from '@limetech/lime-elements';\nimport { ListItem } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Multi-line versus single-line layout\n * By default, list items will always truncate the `text` line, which is displayed\n * either alone, or as a primary heading (when there are both `text` and `secondaryText`)\n * available. This means users will only see one line of text which is as wides as\n * the list item, and no more. Thus, it is a good idea not to add long strings of\n * text in the heading, as on mobile phones or small containers, they will be\n * chopped off and truncated.\n *\n * However, the `secondaryText` which appears as a sub-heading is not truncated\n * that quickly. By default, lists will display 3 lines of text, and then truncate\n * the rest. Nevertheless, you can increase or decrease this number by specifying\n * `maxLinesSecondaryText`.\n * :::note\n * Do not use `0`, negative numbers, decimal numbers, or very large numbers.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-badge-icons-with-multiple-lines',\n    shadow: true,\n})\nexport class BadgeIconsListExample {\n    @State()\n    private maxLines: Option = { text: '2', value: '2' };\n\n    private options: Option[] = [\n        { text: '1', value: '1' },\n        { text: '2', value: '2' },\n        { text: '3', value: '3' },\n        { text: '4', value: '4' },\n        { text: '5', value: '5' },\n    ];\n\n    private items: Array<ListItem<number>> = [\n        {\n            text: 'This item only has one line of primary text, and no secondary text',\n            value: 1,\n            icon: 'text_width',\n        },\n        {\n            text: 'Very long primary texts like this one will truncate and you cannot do anything about it. Just avoid having long primary texts.',\n            secondaryText: 'This is a short secondary text.',\n            value: 2,\n            icon: 'text_width',\n        },\n        {\n            text: 'This item only has one line of primary text',\n            value: 3,\n            secondaryText:\n                'The lengt of secondary text does not exceed maximum allowed number of lines (of course depending on the width of your screen), thus the lines will not truncate.',\n            icon: 'text_width',\n        },\n        {\n            text: 'This is a short primary text',\n            secondaryText:\n                'Very long secondary texts like this one will not truncate on the first line. By default, the list will render 3 lines of text and then truncates the rest. If you need more lines of text to be shown, you can simply define it in your code, and add a maximum number there. For more information regarding this, please read the documentation.',\n            value: 4,\n            icon: 'text_width',\n        },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-list\n                    items={this.items}\n                    badgeIcons={true}\n                    maxLinesSecondaryText={Number(this.maxLines?.value)}\n                />\n                <limel-example-controls\n                    style={{\n                        '--example-controls-column-layout': 'auto-fit',\n                    }}\n                >\n                    <limel-select\n                        label=\"maxLinesSecondaryText\"\n                        options={this.options}\n                        value={this.maxLines}\n                        onChange={this.handleChange}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private handleChange = (event) => {\n        event.stopPropagation();\n        const detail = event.detail;\n        this.maxLines = Array.isArray(detail) ? detail[0] : detail;\n    };\n}\n"],"mappings":"4DAyBaA,EAAqB,M,yBAItBC,KAAAC,QAAoB,CACxB,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAGhBH,KAAAI,MAAiC,CACrC,CACIF,KAAM,qEACNC,MAAO,EACPE,KAAM,cAEV,CACIH,KAAM,iIACNI,cAAe,kCACfH,MAAO,EACPE,KAAM,cAEV,CACIH,KAAM,8CACNC,MAAO,EACPG,cACI,mKACJD,KAAM,cAEV,CACIH,KAAM,+BACNI,cACI,oVACJH,MAAO,EACPE,KAAM,eA4BNL,KAAAO,aAAgBC,IACpBA,EAAMC,kBACN,MAAMC,EAASF,EAAME,OACrBV,KAAKW,SAAWC,MAAMC,QAAQH,GAAUA,EAAO,GAAKA,CAAM,E,cAjEnC,CAAER,KAAM,IAAKC,MAAO,I,CAsCxCW,S,MACH,OACIC,EAACC,EAAI,KACDD,EAAA,cACIX,MAAOJ,KAAKI,MACZa,WAAY,KACZC,sBAAuBC,QAAOC,EAAApB,KAAKW,YAAQ,MAAAS,SAAA,SAAAA,EAAEjB,SAEjDY,EAAA,0BACIM,MAAO,CACH,mCAAoC,aAGxCN,EAAA,gBACIO,MAAM,wBACNrB,QAASD,KAAKC,QACdE,MAAOH,KAAKW,SACZY,SAAUvB,KAAKO,gB"}