{"version":3,"names":["SnackbarExample","this","triggerSnackbar","isOpen","snackbarWithoutActionOnHide","console","log","onChange","event","dismissible","detail","render","h","label","onClick","checked","message","open","onHide"],"sources":["./src/components/snackbar/examples/snackbar-dismissible.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n\n/**\n * Dismissible\n * By default, snackbars display a dismiss button.\n * This allows users to close them at any time, before they time out.\n *\n * The reason for this default behavior is that snackbars could be\n * covering other important content on the screen,\n * or simply have a timeout longer than the time it takes\n * for the user to read the message.\n *\n * However, you can override this default interaction design by setting the\n * `dismissible` property to `false`, which removes the close button.\n */\n@Component({\n    tag: 'limel-example-snackbar-dismissible',\n    shadow: true,\n})\nexport class SnackbarExample {\n    @State()\n    private dismissible = true;\n\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show snackbar\"\n                onClick={this.triggerSnackbar}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Dismissible\"\n                    checked={this.dismissible}\n                    onChange={this.onChange}\n                />\n            </limel-example-controls>,\n            <limel-snackbar\n                message=\"Your internet connection is restored!\"\n                dismissible={this.dismissible}\n                open={this.isOpen}\n                onHide={this.snackbarWithoutActionOnHide}\n            />,\n        ];\n    }\n\n    private triggerSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private snackbarWithoutActionOnHide = () => {\n        console.log('We will try to reconnect if the connection drops again.');\n        this.isOpen = false;\n    };\n\n    private onChange = (event: CustomEvent<boolean>) => {\n        this.dismissible = event.detail;\n    };\n}\n"],"mappings":"qDAmBaA,EAAe,M,yBA6BhBC,KAAAC,gBAAkB,KACtBD,KAAKE,OAAS,IAAI,EAGdF,KAAAG,4BAA8B,KAClCC,QAAQC,IAAI,2DACZL,KAAKE,OAAS,KAAK,EAGfF,KAAAM,SAAYC,IAChBP,KAAKQ,YAAcD,EAAME,MAAM,E,iBArCb,K,YAGL,K,CAEVC,SACH,MAAO,CACHC,EAAA,gBACIC,MAAM,gBACNC,QAASb,KAAKC,kBAElBU,EAAA,8BACIA,EAAA,kBACIC,MAAM,cACNE,QAASd,KAAKQ,YACdF,SAAUN,KAAKM,YAGvBK,EAAA,kBACII,QAAQ,wCACRP,YAAaR,KAAKQ,YAClBQ,KAAMhB,KAAKE,OACXe,OAAQjB,KAAKG,8B"}