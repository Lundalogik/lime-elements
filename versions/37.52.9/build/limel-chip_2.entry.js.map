{"version":3,"names":["chipCss","Chip","this","renderAsButton","h","id","identifier","class","role","disabled","readonly","onKeyDown","handleDeleteKeyDown","renderSpinner","renderPicture","renderLabel","renderBadge","renderProgressBar","renderRemoveButton","renderActionsMenu","renderAsLink","href","link","title","target","tabindex","text","filterClickWhenDisabled","e","preventDefault","handleRemoveClick","event","stopPropagation","remove","emit","removable","keys","DELETE","BACKSPACE","keycodes","DELETE_KEY_CODE","BACKSPACE_KEY_CODE","includes","key","keyCode","removeChipLabel","translate","get","language","actionMenuLabel","handleActionMenuSelect","menuItem","detail","value","menuItemSelected","crypto","randomUUID","componentWillLoad","makeEnterClickable","host","disconnectedCallback","removeEnterClickable","render","Host","onClick","icon","getIconName","image","isEmpty","src","alt","loading","badge","name","style","color","_a","_b","backgroundColor","label","menuItems","length","svgData","tabIndex","innerHTML","getMenuItems","items","onSelect","openDirection","slot","separator","indeterminate","progress","currentPercentage","handleKeyboardEvent","textValue","isLeft","ARROW_LEFT","ARROW_LEFT_KEY_CODE","isRight","ARROW_RIGHT","ARROW_RIGHT_KEY_CODE","isEnter","ENTER","ENTER_KEY_CODE","isDelete","isBackspace","isEscape","ESCAPE","ESCAPE_KEY_CODE","handleLeft","handleRight","handleEnter","handleDelete","handleBackspace","handleEscape","inputChipIndexSelected","emitInteraction","removeChip","repeat","chipSetCss","INPUT_FIELD_TABINDEX","ChipSet","constructor","hostRef","handleKeyDown","getValue","map","chip","Object","assign","type","selected","selectedChipIds","renderEmptyValueForReadonly","floatLabelAbove","editMode","dropZoneTip","hasHelperText","helperText","undefined","renderHelperLine","maxItems","maxLength","invalid","isInvalid","catchInputChipClicks","Lime","isSelectableChip","updateSelectedChipIds","change","handleRemoveChip","newValue","filter","clearAllChipsLabel","renderChip","bind","renderInputChip","isFull","handleTextFieldFocus","handleInputBlur","handleTextInput","inputFieldOnChange","inputHidden","handleDeleteAllIconClick","renderDelimiter","connectedCallback","initialize","async","emptyInput","shadowRoot","querySelector","focus","startEdit","syncEmptyInput","componentDidLoad","triggerIconColorWarning","mdcTextField","MDCTextField","componentDidUpdate","input","destroy","renderInputChips","classes","chipSetLabel","renderChipSetLabel","handleChangeChips","oldValue","isEqual","leadingIcon","clearAllButton","inputType","hidden","onBlur","onFocus","onInput","onChange","placeholder","searchLabel","required","renderLeadingIcon","renderClearAllChipsButton","labelClassList","htmlFor","blurred","emptyInputOnBlur","setTimeout","stopEdit","trim","interact","chipType","chipProps","getChipProps","index","chips","isLastChip","onRemove","getHref","getTarget","updateChoiceTypeSelectedIds","updateFilterTypeSelectedIds","isChipSelected","find","chipId","removeChipIdFromSelectedChipIds","addChipIdToSelectedChipIds","delimiter","iconFillColor","iconBackgroundColor","iconTitle","console","warn"],"sources":["./src/components/chip/chip.scss?tag=limel-chip&encapsulation=shadow","./src/components/chip/chip.tsx","./src/components/chip-set/chip-set-input-helpers.ts","./src/components/chip-set/chip-set.scss?tag=limel-chip-set&encapsulation=shadow","./src/components/chip-set/chip-set.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --chip-max-width: Maximum width of the chip. Defaults to `10rem`. Keep in mind that the chips should not appear too big.\n* @prop --chip-progress-color: Color of the progress bar. Defaults to `rgb(var(--contrast-700))`.\n*/\n\n:host(limel-chip) {\n    --limel-chip-height: 1.75rem;\n    --limel-chip-gap: 0.5rem;\n    isolation: isolate;\n    display: inline-flex;\n    align-items: center;\n    min-width: 0;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.chip {\n    all: unset;\n    position: relative;\n\n    min-width: 0;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: min(var(--chip-max-width, 100%), 25rem);\n    height: var(--limel-chip-height);\n\n    border-radius: var(--limel-chip-height);\n    font-size: 0.875rem;\n    padding: 0 0.125rem;\n\n    &:has(limel-icon),\n    &:has(img) {\n        .text {\n            padding-left: 0;\n        }\n    }\n\n    &:not([disabled]) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-elevated-inset-clickable;\n    }\n\n    &:has(limel-badge) {\n        padding-right: 0.375rem;\n\n        .text {\n            padding-right: 0;\n        }\n    }\n\n    &:has(+ .remove-button:hover) {\n        box-shadow: var(--shadow-depth-8-error);\n    }\n\n    &:has(+ limel-menu),\n    &:has(+ .trailing-button) {\n        padding-right: calc(var(--limel-chip-height) + 0.125rem);\n\n        .text {\n            padding-right: 0;\n        }\n    }\n}\n\n:host(limel-chip[disabled]:not([disabled='false'])) {\n    .chip {\n        // Similar to `limel-button[disabled]`\n        color: rgba(var(--contrast-1600), 0.37);\n        background-color: rgba(var(--contrast-1600), 0.1);\n        box-shadow: none;\n    }\n}\n\n:host(limel-chip[readonly]:not([readonly='false'])) {\n    .chip {\n        box-shadow: 0 0 0 1px rgba(var(--contrast-800), 0.5);\n    }\n}\n\n:host(limel-chip[selected]:not([selected='false'])) {\n    .chip {\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow: var(--button-shadow-inset),\n                var(--shadow-depth-8-focused);\n        }\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n    .text {\n        color: var(--mdc-theme-primary);\n    }\n}\n\n:host(limel-chip[type='filter']) {\n    .chip {\n        border-top-left-radius: 0.5rem;\n        border-bottom-left-radius: 0.5rem;\n\n        &:after {\n            content: '';\n            transition:\n                background-color 0.4s ease 0.2s,\n                box-shadow 0.6s ease 0.2s;\n            box-sizing: border-box;\n            position: absolute;\n            bottom: 0.125rem;\n            left: 0.125rem;\n            width: 0.5rem;\n            height: 0.5rem;\n            border-radius: 50%;\n            background-color: rgb(var(--contrast-800), 0.8);\n            box-shadow: 0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[type='filter'][selected]) {\n    .chip {\n        &:after {\n            background-color: rgb(var(--color-green-default));\n            box-shadow:\n                0 0 0.375rem 0 rgb(var(--color-green-light)),\n                0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[invalid]) {\n    .chip {\n        background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n        background-size: 0.5rem;\n        background-color: rgb(var(--color-red-default));\n    }\n\n    .text {\n        color: rgb(var(--color-white));\n    }\n}\n\nimg,\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n}\n\nimg {\n    border-radius: 50%;\n}\n\nlimel-icon {\n    padding: 0.0625rem;\n}\n\nlimel-badge {\n    pointer-events: none;\n}\n\n.text {\n    @include mixins.truncate-text;\n    line-height: 1.2;\n    padding: 0 0.5rem;\n}\n\n.trailing-button {\n    all: unset;\n    @include mixins.is-flat-clickable();\n\n    z-index: 1;\n    flex-shrink: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    margin-left: calc(var(--limel-chip-height) * -1 + 0.125rem);\n    margin-right: 0.125rem;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n\n    border-radius: 50%;\n\n    svg {\n        transition:\n            color 0.2s ease,\n            transform 0.2s ease;\n        width: 1.25rem;\n    }\n\n    &.remove-button:hover {\n        color: rgb(var(--color-red-dark));\n        svg {\n            transform: scale(0.8);\n        }\n    }\n}\n\nlimel-menu {\n    button[slot='trigger'] {\n        @include mixins.visualize-keyboard-focus;\n    }\n\n    &[open] {\n        button[slot='trigger'] {\n            box-shadow: var(--button-shadow-inset);\n        }\n    }\n}\n\n@import './partial-styles/_loading.scss';\n@import './partial-styles/_progress.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n} from '@stencil/core';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { Languages } from '../date-picker/date.types';\nimport { Link } from '../../global/shared-types/link.types';\nimport { getIconName } from '../icon/get-icon-props';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport translate from '../../global/translations';\nimport {\n    BACKSPACE,\n    BACKSPACE_KEY_CODE,\n    DELETE,\n    DELETE_KEY_CODE,\n} from '../../util/keycodes';\nimport { ChipType, Chip as OldChipInterface } from '../chip-set/chip.types';\nimport { Image } from '../../global/shared-types/image.types';\nimport { isEmpty } from 'lodash-es';\n\nimport { ListSeparator } from '../list/list-item.types';\nimport { LimelMenuCustomEvent, MenuItem } from '../../components';\n\ninterface ChipInterface extends Omit<OldChipInterface, 'id' | 'badge'> {\n    /**\n     * Identifier for the chip. Must be unique.\n     */\n    identifier?: number | string;\n\n    /**\n     * The value of the badge.\n     */\n    badge?: string | number;\n}\n\n/**\n * Chips and buttons are both interactive elements in UI design,\n * but they serve different purposes and are used in different contexts.\n *\n * :::warning\n * Do not use the chip component carelessly, as an alternative for\n * [`limel-button`](#/component/limel-button/) in the UI design!\n *\n * **Buttons:**\n * Buttons are used to trigger actions. They are typically used to\n * submit forms, open dialogs, initiate a process, or perform any action\n * that changes the state of the application.\n * Buttons' labels usually contain action words, in other words, the labels is\n * a _verb in imperative mood_ such as \"Submit\" or \"Delete\".\n * Buttons are placed in areas where it's clear they will initiate\n * an action when clicked.\n *\n * **Chips:**\n * Chips however are elements which may look like buttons, but they are\n * representing choices, filters, or tags, in a small block\n * or clearly bundled into a group. Chips are rarely used alone in the\n * user interface.\n * They are often used in a so called \"chip-set\", or placed together in\n * a section of the UI, where the user can expect more than one chip to be present.\n *\n * For example, a chip may represent a filter in a filter bar, or a tag in a tag list,\n * or an item in a shopping list.\n * Clicking a chip can also trigger an action, for example toggling a filter ON or OFF,\n * or opening a page with all posts tagged with the tag represented by the chip,\n * or navigating to a page with more information about the item in the shopping list.\n * :::\n *\n * @beta\n * @exampleComponent limel-example-chip-button\n * @exampleComponent limel-example-chip-link\n * @exampleComponent limel-example-chip-icon-colors\n * @exampleComponent limel-example-chip-image\n * @exampleComponent limel-example-chip-badge\n * @exampleComponent limel-example-chip-filter\n * @exampleComponent limel-example-chip-removable\n * @exampleComponent limel-example-chip-menu\n * @exampleComponent limel-example-chip-loading\n * @exampleComponent limel-example-chip-progress\n * @exampleComponent limel-example-chip-aria-role\n */\n@Component({\n    tag: 'limel-chip',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'chip.scss',\n})\nexport class Chip implements ChipInterface {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Label displayed on the chip\n     */\n    @Prop({ reflect: true })\n    public text: string;\n\n    /**\n     * Icon of the chip.\n     */\n    @Prop()\n    public icon?: string | Icon;\n\n    /**\n     * A picture to be displayed instead of the icon on the chip.\n     */\n    @Prop()\n    public image?: Image;\n\n    /**\n     * If supplied, the chip will become a clickable link.\n     */\n    @Prop()\n    public link?: Omit<Link, 'text'>;\n\n    /**\n     * The value of the badge, displayed on the chip.\n     */\n    @Prop({ reflect: true })\n    public badge?: string | number;\n\n    /**\n     * Set to `true` to disable the chip.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to render the chip as a static UI element.\n     * Useful when the parent component has a `readonly` state.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to visualize the chip in a \"selected\" state.\n     * This is typically used when the chip is used in a chip-set\n     * along with other chips.\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * Set to `true` to visualize the chip in an \"invalid\" or \"error\" state.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Set to `true` to render a remove button on the chip.\n     */\n    @Prop({ reflect: true })\n    public removable = false;\n\n    /**\n     * Set to `filter` to render the chip with a distinct style\n     * suitable for visualizing filters.\n     *\n     * @beta\n     */\n    @Prop({ reflect: true })\n    public type?: ChipType = 'default';\n\n    /**\n     * Set to `true` to put the component in the `loading` state,\n     * and render an indeterminate progress indicator inside the chip.\n     * This does _not_ disable the interactivity of the chip!\n     */\n    @Prop({ reflect: true })\n    public loading? = false;\n\n    /**\n     * Reflects the current value of a progress bar on the chip,\n     * visualizing the percentage of an ongoing process.\n     * Must be a number between `0` and `100`.\n     */\n    @Prop({ reflect: true })\n    public progress?: number;\n\n    /**\n     * Identifier for the chip. Must be unique.\n     */\n    @Prop({ reflect: true })\n    public identifier?: number | string = crypto.randomUUID();\n\n    /**\n     * When provided, the chip will render an ellipsis menu with the supplied items.\n     * Also, this will hide the \"remove button\" when `removable={true}`, as\n     * the remove button will automatically become the last item in the menu.\n     */\n    @Prop()\n    public menuItems?: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Fired when clicking on the remove button of a `removable` chip.\n     * The value of `identifier` is emitted as the event detail.\n     */\n    @Event()\n    public remove: EventEmitter<number | string>;\n\n    /**\n     * Emitted when a menu item is selected from the actions menu.\n     */\n    @Event()\n    public menuItemSelected: EventEmitter<MenuItem>;\n\n    @Element()\n    private host: HTMLLimelChipElement;\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    public render() {\n        return (\n            <Host onClick={this.filterClickWhenDisabled}>\n                {this.link ? this.renderAsLink() : this.renderAsButton()}\n            </Host>\n        );\n    }\n\n    private renderAsButton = () => {\n        return [\n            <button\n                id={'chip-' + this.identifier}\n                class=\"chip\"\n                role=\"button\"\n                disabled={this.disabled || this.readonly}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderSpinner()}\n                {this.renderPicture()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n                {this.renderProgressBar()}\n            </button>,\n            this.renderRemoveButton(),\n            this.renderActionsMenu(),\n        ];\n    };\n\n    private renderAsLink = () => {\n        return [\n            <a\n                id={'chip-' + this.identifier}\n                class=\"chip\"\n                href={this.link.href}\n                title={this.link.title}\n                target={this.link.target}\n                aria-disabled={this.disabled || this.readonly}\n                tabindex={this.disabled || this.readonly ? -1 : 0}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderSpinner()}\n                {this.renderPicture()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n                {this.renderProgressBar()}\n            </a>,\n            this.renderRemoveButton(),\n            this.renderActionsMenu(),\n        ];\n    };\n\n    private renderLabel = () => {\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderPicture() {\n        const icon = getIconName(this.icon);\n\n        if (!icon && !this.image) {\n            return;\n        }\n\n        if (!isEmpty(this.image)) {\n            return (\n                <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />\n            );\n        }\n\n        return (\n            <limel-icon\n                badge={true}\n                name={icon}\n                style={{\n                    color: `${(this.icon as Icon)?.color}`,\n                    'background-color': `${\n                        (this.icon as Icon)?.backgroundColor\n                    }`,\n                }}\n            />\n        );\n    }\n\n    private renderBadge() {\n        if (!this.badge) {\n            return;\n        }\n\n        return <limel-badge label={this.badge} />;\n    }\n\n    private renderRemoveButton() {\n        if (\n            !this.removable ||\n            this.readonly ||\n            this.disabled ||\n            !!this.menuItems?.length\n        ) {\n            return;\n        }\n\n        const svgData =\n            '<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" d=\"m8 8 16 16M24 8 8 24\"/></svg>';\n\n        return (\n            <button\n                class=\"trailing-button remove-button\"\n                tabIndex={-1}\n                aria-label={this.removeChipLabel}\n                aria-controls={'chip-' + this.identifier}\n                innerHTML={svgData}\n                onClick={this.handleRemoveClick}\n            />\n        );\n    }\n\n    private renderActionsMenu() {\n        if (!this.menuItems?.length) {\n            return;\n        }\n\n        const svgData =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" xml:space=\"preserve\"><circle fill=\"currentColor\" cx=\"16\" cy=\"16\" r=\"2\"/><circle fill=\"currentColor\" cx=\"16\" cy=\"24\" r=\"2\"/><circle fill=\"currentColor\" cx=\"16\" cy=\"8\" r=\"2\"/></svg>';\n\n        const menuItems = this.getMenuItems();\n\n        return (\n            <limel-menu\n                items={menuItems}\n                onSelect={this.handleActionMenuSelect}\n                openDirection=\"bottom-end\"\n            >\n                <button\n                    slot=\"trigger\"\n                    disabled={this.disabled}\n                    class=\"trailing-button\"\n                    aria-label={this.actionMenuLabel}\n                    innerHTML={svgData}\n                />\n            </limel-menu>\n        );\n    }\n\n    private getMenuItems() {\n        let menuItems = [...this.menuItems];\n\n        if (this.removable) {\n            menuItems = [\n                ...menuItems,\n                { separator: true },\n                {\n                    text: this.removeChipLabel(),\n                    icon: {\n                        name: 'delete_sign',\n                        color: 'rgb(var(--color-red-default))',\n                    },\n                    value: '_remove',\n                },\n            ];\n        }\n\n        return menuItems;\n    }\n\n    private filterClickWhenDisabled = (e) => {\n        if (this.disabled || this.readonly) {\n            e.preventDefault();\n        }\n    };\n\n    private handleRemoveClick = (event: MouseEvent | KeyboardEvent) => {\n        event.stopPropagation();\n        this.remove.emit(this.identifier);\n    };\n\n    private handleDeleteKeyDown = (event: KeyboardEvent) => {\n        if (!this.removable) {\n            return;\n        }\n\n        const keys = [DELETE, BACKSPACE];\n        const keycodes = [DELETE_KEY_CODE, BACKSPACE_KEY_CODE];\n\n        if (keys.includes(event.key) || keycodes.includes(event.keyCode)) {\n            this.handleRemoveClick(event);\n        }\n    };\n\n    private removeChipLabel = (): string => {\n        return translate.get('remove', this.language) + ' ' + this.text;\n    };\n\n    private actionMenuLabel = (): string => {\n        return translate.get('file-viewer.more-actions', this.language);\n    };\n\n    private renderSpinner() {\n        if (!this.loading) {\n            return;\n        }\n\n        return <limel-linear-progress indeterminate={true} />;\n    }\n\n    private renderProgressBar() {\n        if (!this.progress) {\n            return;\n        }\n\n        const currentPercentage = this.progress + '%';\n\n        return (\n            <div\n                role=\"progressbar\"\n                aria-label=\"%\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={this.progress}\n                style={{\n                    '--limel-chip-progress-percentage': currentPercentage,\n                }}\n            />\n        );\n    }\n\n    private handleActionMenuSelect = (\n        event: LimelMenuCustomEvent<MenuItem>,\n    ) => {\n        const menuItem = event.detail;\n\n        if (!menuItem) {\n            return;\n        }\n\n        if (menuItem.value === '_remove') {\n            this.remove.emit(this.identifier);\n\n            return;\n        }\n\n        this.menuItemSelected.emit(menuItem);\n    };\n}\n","import {\n    ARROW_LEFT,\n    ARROW_LEFT_KEY_CODE,\n    ARROW_RIGHT,\n    ARROW_RIGHT_KEY_CODE,\n    BACKSPACE,\n    BACKSPACE_KEY_CODE,\n    DELETE,\n    DELETE_KEY_CODE,\n    ENTER,\n    ENTER_KEY_CODE,\n    ESCAPE,\n    ESCAPE_KEY_CODE,\n} from '../../util/keycodes';\n\n/**\n * Key handler for the input field.\n * Lets the user select, activate, and remove chips with the keyboard.\n *\n * @param event - event\n\n */\nexport function handleKeyboardEvent(event: KeyboardEvent) {\n    if (this.textValue.length) {\n        // If there is any text in the input field, keyboard input should\n        // navigate the text, not the chips.\n        return;\n    }\n\n    if (!this.value || !this.value.length) {\n        // If there are no chips, there is nothing to select.\n        return;\n    }\n\n    const isLeft =\n        event.key === ARROW_LEFT || event.keyCode === ARROW_LEFT_KEY_CODE;\n    const isRight =\n        event.key === ARROW_RIGHT || event.keyCode === ARROW_RIGHT_KEY_CODE;\n    const isEnter = event.key === ENTER || event.keyCode === ENTER_KEY_CODE;\n    const isDelete = event.key === DELETE || event.keyCode === DELETE_KEY_CODE;\n    const isBackspace =\n        event.key === BACKSPACE || event.keyCode === BACKSPACE_KEY_CODE;\n    const isEscape = event.key === ESCAPE || event.keyCode === ESCAPE_KEY_CODE;\n\n    if (isLeft) {\n        return handleLeft(this, event);\n    }\n\n    if (isRight) {\n        return handleRight(this, event);\n    }\n\n    if (isEnter) {\n        return handleEnter(this, event);\n    }\n\n    if (isDelete) {\n        return handleDelete(this, event);\n    }\n\n    if (isBackspace) {\n        return handleBackspace(this, event);\n    }\n\n    if (isEscape) {\n        return handleEscape(this, event);\n    }\n}\n\nfunction handleLeft(host, event) {\n    event.preventDefault();\n    if (host.inputChipIndexSelected === null) {\n        host.inputChipIndexSelected = host.value.length - 1;\n\n        return;\n    }\n\n    if (host.inputChipIndexSelected <= 0) {\n        return;\n    }\n\n    host.inputChipIndexSelected -= 1;\n}\n\nfunction handleRight(host, event) {\n    event.preventDefault();\n    if (host.inputChipIndexSelected === null) {\n        host.inputChipIndexSelected = 0;\n\n        return;\n    }\n\n    if (host.inputChipIndexSelected >= host.value.length - 1) {\n        return;\n    }\n\n    host.inputChipIndexSelected += 1;\n}\n\nfunction handleEnter(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        host.emitInteraction(host.value[host.inputChipIndexSelected]);\n    }\n}\n\nfunction handleEscape(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        host.inputChipIndexSelected = null;\n    }\n}\n\nfunction handleDelete(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        removeChip(host);\n    }\n}\n\nfunction handleBackspace(host, event) {\n    if (host.inputChipIndexSelected !== null) {\n        event.preventDefault();\n        removeChip(host);\n    } else if (!event.repeat) {\n        host.inputChipIndexSelected = host.value.length - 1;\n    }\n}\n\nfunction removeChip(host) {\n    if (host.inputChipIndexSelected !== null) {\n        host.removeChip(host.value[host.inputChipIndexSelected].id);\n        host.inputChipIndexSelected = null;\n    }\n}\n","@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/notched-outline/mdc-notched-outline';\n@use '@material/floating-label';\n@use '@material/floating-label/mdc-floating-label';\n\n/**\n * @prop --icon-background-color: Background color of the icon. Defaults to transparent.\n * @prop --icon-color: Color of the icon. Defaults to `rgb(var(--contrast-1100))`.\n * @prop --background-color: Background color of the field when type is set to input.\n * @prop --background-color-disabled: Background color of the field when type is set to input and the component is disabled or readonly.\n * @prop --input-chip-set-selected-chip-color: Color of the highlight around selected chips in input chip-sets.\n */\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.outlined-style-overrides;\n@include shared_input-select-picker.floating-label-overrides;\n@include shared_input-select-picker.cropped-label-hack;\n@include shared_input-select-picker.disabled-overrides;\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.lime-empty-value-for-readonly;\n@include shared_input-select-picker.lime-looks-like-input-value;\n\n$height-of-chip-set-input: functions.pxToRem(36);\n$leading-icon-space: 1.5rem;\n\n:host(limel-chip-set) {\n    isolation: isolate;\n}\n\n.mdc-chip-set {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    gap: 0.5rem;\n    min-height: shared_input-select-picker.$height-of-mdc-text-field;\n    position: relative;\n\n    &.chip-set--with-label {\n        .lime-floating-label--float-above {\n            padding-left: functions.pxToRem(4);\n        }\n    }\n\n    &.mdc-chip-set--input {\n        padding: 0.4rem 0.5rem;\n        width: 100%;\n    }\n\n    &.has-clear-all-button {\n        &.mdc-chip-set--input {\n            padding-right: functions.pxToRem(\n                32\n            ); // This leaves space for \"clear all\" button and avoids overlapping with chips\n        }\n    }\n}\n\n.mdc-text-field {\n    height: auto;\n    cursor: text;\n    flex-wrap: wrap;\n    row-gap: 0.5rem;\n\n    .mdc-text-field__input {\n        @include shared_input-select-picker.input-field-placeholder;\n\n        width: auto;\n        padding: 0 functions.pxToRem(12);\n\n        flex-grow: 1;\n        flex-shrink: 0;\n\n        &.hidden {\n            // This class is added, as soon as there is a chip selected and displayed\n            // This input field should not be visually visible as it breaks the UI in some cases\n            // But it should be rendered to be able to tab between fields and do other keyboard commands /Kia\n            transition: all 0s;\n            opacity: 0;\n            position: absolute;\n            z-index: -100; // to let users interact with chips, in case they're covered\n        }\n        &[type='search'] {\n            -webkit-appearance: textfield; // Removes the default magnifying glass icon on iOS which appears automatically on input fields with type of search\n            background-color: transparent; // overides styles caused by previous line\n\n            &::-webkit-search-cancel-button {\n                display: none; // removes the default X button\n            }\n        }\n    }\n}\n\n// used only in chipsets that do not have input\n.chip-set__label {\n    @include mixins.truncate-text;\n    width: 120%; // `120%` instead of `100%`,\n    // because this class is always together with `mdc-floating-label--float-above`,\n    // which scales the label down. So there is more horizontal space to display the label in.\n    top: functions.pxToRem(13);\n    padding-left: functions.pxToRem(20);\n}\n\n// Because MDC removes some classes in chipset, we add custom\n// classes with similar names and expected behavior & styles.\n// These class names start with `lime-`, instead of `mdc-`.\n.lime-notched-outline--notched {\n    .mdc-notched-outline__notch {\n        border-top: 1px solid transparent !important;\n\n        .lime-floating-label--float-above {\n            // This overrides MDC's original top value which is `top: 50%`.\n            // The reason is that a % value aligns the label in a wrong position\n            // vertically, when there are multiple rows of chips.\n            top: functions.pxToRem(27);\n\n            transform: translateY(-34.75px) scale(0.75) !important;\n            font-size: shared_input-select-picker.$cropped-label-hack--font-size;\n        }\n    }\n}\n\n.force-invalid {\n    @extend .mdc-text-field--invalid;\n}\n\n.clear-all-button {\n    @include mixins.clear-all-button;\n    @include mixins.visualize-keyboard-focus;\n\n    position: absolute;\n    right: 0.5rem;\n    top: calc(#{shared_input-select-picker.$height-of-mdc-text-field} / 4);\n\n    opacity: 0; // Is hidden, but can receive focus (such as when navigating through tab indexes).\n\n    &:focus,\n    .has-chips:not(.mdc-text-field--disabled):hover &,\n    .has-chips:not(.mdc-text-field--disabled).mdc-text-field--focused & {\n        opacity: 1;\n        outline: none;\n    }\n\n    .mdc-chip-set:not(.has-chips) &,\n    .has-chips.mdc-text-field--disabled & {\n        display: none; // Won't receive focus when disabled\n    }\n}\n\n.has-leading-icon {\n    &:not(.has-chips) {\n        .mdc-text-field__input {\n            padding-left: $leading-icon-space;\n        }\n\n        .mdc-floating-label {\n            &:not(.lime-floating-label--float-above) {\n                left: $leading-icon-space;\n            }\n            &.mdc-floating-label--float-above {\n                left: functions.pxToRem(4);\n            }\n        }\n    }\n\n    limel-chip {\n        &:first-of-type {\n            margin-left: 1.5rem;\n        }\n    }\n\n    .search-icon {\n        transition: transform 0.2s ease;\n        position: absolute;\n        top: functions.pxToRem(9);\n        left: 0.25rem;\n    }\n\n    limel-icon {\n        background-color: transparent;\n    }\n}\n\n.delimiter {\n    opacity: 0.5;\n    padding: 0 functions.pxToRem(2);\n    color: var(--mdc-theme-on-surface);\n}\n\nlimel-chip {\n    border-radius: 2rem;\n\n    &.can-be-removed {\n        // When chip is selected with keyboard (backspace / arrow-keys) to be deleted\n        box-shadow: var(--shadow-depth-8-error);\n    }\n}\n\n@import './partial-styles/_readonly';\n@import './partial-styles/_file-picker';\n@import './partial-styles/_helper-text';\n\n// To make the input field render smaller than the default MDC UI\n.mdc-text-field {\n    &.mdc-text-field--outlined {\n        min-height: shared_input-select-picker.$height-of-mdc-text-field;\n    }\n}\n","import { Chip, ChipType } from '../chip-set/chip.types';\nimport { Languages } from '../date-picker/date.types';\nimport { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Method,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { handleKeyboardEvent } from './chip-set-input-helpers';\nimport translate from '../../global/translations';\nimport { getHref, getTarget } from '../../util/link-helper';\nimport { isEqual } from 'lodash-es';\nimport { LimelChipCustomEvent } from '../../components';\n\nconst INPUT_FIELD_TABINDEX = 1;\n\n/**\n * :::note\n * **Regarding `click` and `interact` events:**\n *\n * The `interact` event is emitted when a chip is interacted with, and is\n * the recommended way to listen for chip interactions.\n *\n * However, if you need to handle clicks differently depending on which chip\n * was clicked, or whether the click was on a chip or elsewhere, you need to\n * listen to the native `click` event instead.\n *\n * Native `click` events are passed through, and if the click came from\n * a chip, the chip object is available in the event object under\n * `<event object>.Lime.chip`.\n *\n * Example usage:\n * ```ts\n * private handleClick(event: Event) {\n *     if (event && 'Lime' in event && (event.Lime as any).chip) {\n *         if ((event.Lime as { chip: Chip }).chip.href) {\n *             // Chip has href, so let the browser open the link.\n *             return;\n *         }\n *         // handle click on chip without href\n *     } else {\n *         // handle click elsewhere\n *     }\n * }\n * ```\n * :::\n *\n * @exampleComponent limel-example-chip-set\n * @exampleComponent limel-example-chip-set-choice\n * @exampleComponent limel-example-chip-set-filter\n * @exampleComponent limel-example-chip-set-filter-badge\n * @exampleComponent limel-example-chip-set-input\n * @exampleComponent limel-example-chip-set-input-type-with-menu-items\n * @exampleComponent limel-example-chip-set-input-type-text\n * @exampleComponent limel-example-chip-set-input-type-search\n * @exampleComponent limel-example-chip-icon-color\n * @exampleComponent limel-example-chip-set-image\n * @exampleComponent limel-example-chip-set-composite\n */\n@Component({\n    tag: 'limel-chip-set',\n    shadow: true,\n    styleUrl: 'chip-set.scss',\n})\nexport class ChipSet {\n    /**\n     * List of chips for the set\n     */\n    @Prop()\n    public value: Chip[] = [];\n\n    /**\n     * Type of chip set\n     *\n     * - `choice` renders a set of selectable chips where only one is selectable. The `removable` property is ignored\n     * - `filter` renders a set of selectable chips where all are selectable.\n     * - `input` renders a set of chips that can be used in conjunction with an input field\n     *\n     * If no type is set, a basic set of chips without additional functionality will be rendered\n     */\n    @Prop({ reflect: true })\n    public type?: 'choice' | 'filter' | 'input';\n\n    /**\n     * Label for the chip-set\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Optional helper text to display below the chipset.\n     * When type is `input`, the helper text is displayed below the\n     * input field when it has focus.\n     * When type is not `input`, the helper text is always displayed\n     * if the device is touch screen; otherwise it is shown when chip-set\n     * is hovered or focused using keyboard navigation.\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * True if the chip set should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * For chip-sets of type `input`, set to `true` to disable adding and\n     * removing chips, but allow interaction with existing chips in the set.\n     * For any other types, setting either `readonly` or `disabled` disables\n     * the chip-set.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * For chip-sets of type `input`. Value to use for the `type` attribute on the\n     * input field inside the chip-set.\n     */\n    @Prop({ reflect: true })\n    public inputType: 'search' | 'text' = 'text';\n\n    /**\n     * For chip-sets of type `input`. Limits the maximum number of chips.\n     * When the value is `0` or not set, no limit is applied.\n     */\n    @Prop({ reflect: true })\n    public maxItems: number;\n\n    /**\n     * True if the control requires a value\n     */\n    @Prop({ reflect: true })\n    public required: boolean = false;\n\n    /**\n     * Search label to display when type is `input` and component is in search mode\n     */\n    @Prop({ reflect: true })\n    public searchLabel: string;\n\n    /**\n     * Whether the input field should be emptied when the chip-set loses focus.\n     */\n    @Prop({ reflect: true })\n    public emptyInputOnBlur: boolean = true;\n\n    /**\n     * Whether the \"Clear all\" buttons should be shown\n     */\n    @Prop()\n    public clearAllButton: boolean = true;\n\n    /**\n     * For chip-sets of type `input`. When the value is null, no leading icon is used.\n     * Leading icon to show to the far left in the text field\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string = null;\n\n    /**\n     * For chip-set of type `input`. Sets delimiters between chips.\n     */\n    @Prop({ reflect: true })\n    public delimiter: string = null;\n\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components. For example, the clear all chips label.\n     */\n    @Prop()\n    public language: Languages = 'en';\n\n    /**\n     * Dispatched when a chip is interacted with\n     */\n    @Event()\n    private interact: EventEmitter<Chip>;\n\n    /**\n     * Dispatched when a chip is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<Chip | Chip[]>;\n\n    /**\n     * Emitted when an input chip set has received focus and editing in the text field has started\n     */\n    @Event()\n    private startEdit: EventEmitter<void>;\n\n    /**\n     * Emitted when an input chip set has lost focus and editing in the text field has ended\n     */\n    @Event()\n    private stopEdit: EventEmitter<void>;\n\n    /**\n     * Dispatched when the input is changed for type `input`\n     */\n    @Event()\n    private input: EventEmitter<string>;\n\n    @Element()\n    private host: HTMLLimelChipSetElement;\n\n    @State()\n    private editMode: boolean = false;\n\n    @State()\n    private textValue: string = '';\n\n    @State()\n    private blurred: boolean = false;\n\n    @State()\n    private inputChipIndexSelected: number = null;\n\n    @State()\n    private selectedChipIds: Array<string | number>;\n\n    private mdcTextField: MDCTextField;\n    private handleKeyDown = handleKeyboardEvent;\n\n    constructor() {\n        this.renderChip = this.renderChip.bind(this);\n        this.renderInputChip = this.renderInputChip.bind(this);\n        this.isFull = this.isFull.bind(this);\n        this.handleTextFieldFocus = this.handleTextFieldFocus.bind(this);\n        this.handleInputBlur = this.handleInputBlur.bind(this);\n        this.handleTextInput = this.handleTextInput.bind(this);\n        this.inputFieldOnChange = this.inputFieldOnChange.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.inputHidden = this.inputHidden.bind(this);\n        this.handleDeleteAllIconClick =\n            this.handleDeleteAllIconClick.bind(this);\n        this.renderDelimiter = this.renderDelimiter.bind(this);\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    private initialize() {\n        if (this.value.length) {\n            this.selectedChipIds = this.value\n                .filter((chip) => chip.selected)\n                .map((chip) => chip.id);\n        }\n    }\n\n    /**\n     * Used to find out whether the chip-set is in edit mode.\n     *\n     * @returns `true` if the chip-set is in edit mode, `false` otherwise.\n     */\n    @Method()\n    public async getEditMode(): Promise<boolean> {\n        return this.editMode;\n    }\n\n    /**\n     * Used to set focus to the chip-set input field.\n     *\n     * @param emptyInput - if `true`, any text in the input is discarded\n     * @returns does not return anything, but methods have to be async\n     */\n    @Method()\n    public async setFocus(emptyInput: boolean = false) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.editMode = true;\n        if (emptyInput) {\n            this.textValue = '';\n        }\n\n        this.host.shadowRoot.querySelector('input').focus();\n        this.startEdit.emit();\n    }\n\n    /**\n     * Used to empty the input field. Used in conjunction with `emptyInputOnBlur` to let the\n     * consumer control when the input is emptied.\n     *\n     * @returns does not return anything, but methods have to be async\n     */\n    @Method()\n    public async emptyInput() {\n        this.syncEmptyInput();\n    }\n\n    public componentDidLoad() {\n        this.triggerIconColorWarning(this.value);\n\n        if (this.type === 'input') {\n            this.mdcTextField = new MDCTextField(\n                this.host.shadowRoot.querySelector('.mdc-text-field'),\n            );\n        }\n    }\n\n    public componentDidUpdate() {\n        const input = this.host.shadowRoot.querySelector('input');\n        if (input && this.editMode) {\n            input.focus();\n        }\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n    }\n\n    public render() {\n        if (this.type === 'input') {\n            return this.renderInputChips();\n        }\n\n        const classes = {\n            'mdc-chip-set': true,\n            disabled: this.disabled || this.readonly,\n            'mdc-text-field--with-trailing-icon': true,\n        };\n        if (this.type) {\n            classes[`mdc-chip-set--${this.type}`] = true;\n        }\n\n        const chipSetLabel = this.renderChipSetLabel();\n        if (chipSetLabel) {\n            classes['chip-set--with-label'] = true;\n        }\n\n        const value = this.getValue();\n\n        return (\n            <div class={classes} role=\"grid\">\n                {chipSetLabel}\n                {value.map(this.renderChip)}\n                {this.renderHelperLine()}\n            </div>\n        );\n    }\n\n    private getValue = () => {\n        return this.value.map((chip) => ({\n            ...chip,\n            ...(this.type && {\n                selected: this.selectedChipIds.includes(chip.id),\n            }),\n        }));\n    };\n\n    @Watch('value')\n    protected handleChangeChips(newValue: Chip[], oldValue: Chip[]) {\n        if (isEqual(newValue, oldValue)) {\n            return;\n        }\n\n        this.syncEmptyInput();\n        this.initialize();\n    }\n\n    private renderChipSetLabel() {\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <label class=\"chip-set__label mdc-floating-label mdc-floating-label--float-above\">\n                {this.label}\n            </label>\n        );\n    }\n\n    private renderInputChips() {\n        return [\n            <div\n                class={{\n                    'mdc-text-field mdc-text-field--outlined': true,\n                    'mdc-chip-set mdc-chip-set--input': true,\n                    'force-invalid': this.isInvalid(),\n                    'mdc-text-field--disabled': this.readonly || this.disabled,\n                    'lime-text-field--readonly': this.readonly,\n                    'has-chips mdc-text-field--label-floating':\n                        this.value.length !== 0,\n                    'has-leading-icon': this.leadingIcon !== null,\n                    'has-clear-all-button': this.clearAllButton,\n                }}\n                onClick={this.handleTextFieldFocus}\n            >\n                {this.value.map(this.renderInputChip)}\n                <input\n                    tabIndex={INPUT_FIELD_TABINDEX}\n                    type={this.inputType}\n                    id=\"input-element\"\n                    disabled={this.readonly || this.disabled}\n                    class={{\n                        'mdc-text-field__input': true,\n                        hidden: this.inputHidden(),\n                    }}\n                    value={this.textValue}\n                    onBlur={this.handleInputBlur}\n                    onFocus={this.handleTextFieldFocus}\n                    onKeyDown={this.handleKeyDown}\n                    onInput={this.handleTextInput}\n                    // Some browsers emit a change event on input elements, we need to stop\n                    // that event from propagating since we are emitting our own change event\n                    onChange={this.inputFieldOnChange}\n                    placeholder={this.isFull() ? '' : this.searchLabel}\n                    readonly={this.isFull()}\n                />\n                <div\n                    class={{\n                        'mdc-notched-outline': true,\n                        'mdc-notched-outline--upgraded': true,\n                        'mdc-text-field--required': this.required,\n                        'lime-notched-outline--notched': this.floatLabelAbove(),\n                    }}\n                    dropzone-tip={this.dropZoneTip()}\n                >\n                    <div class=\"mdc-notched-outline__leading\" />\n                    {this.renderLabel()}\n                    <div class=\"mdc-notched-outline__trailing\" />\n                </div>\n                {this.renderLeadingIcon()}\n                {this.renderEmptyValueForReadonly()}\n                {this.renderClearAllChipsButton()}\n            </div>,\n            this.renderHelperLine(),\n        ];\n    }\n\n    private renderEmptyValueForReadonly = () => {\n        if (this.readonly && this.value.length === 0) {\n            return (\n                <span class=\"lime-empty-value-for-readonly lime-looks-like-input-value\">\n                    –\n                </span>\n            );\n        }\n    };\n\n    private renderLabel() {\n        const labelClassList = {\n            'mdc-floating-label': true,\n            'mdc-text-field--disabled': this.readonly || this.disabled,\n            'mdc-floating-label--required': this.required,\n            'lime-floating-label--float-above': this.floatLabelAbove(),\n        };\n\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-notched-outline__notch\">\n                <label class={labelClassList} htmlFor=\"input-element\">\n                    {this.label}\n                </label>\n            </div>\n        );\n    }\n\n    private floatLabelAbove = () => {\n        if (!!this.value.length || this.editMode || this.readonly) {\n            return true;\n        }\n    };\n\n    private dropZoneTip = (): string => {\n        return translate.get('file.drag-and-drop-tips', this.language);\n    };\n\n    private isFull(): boolean {\n        return !!this.maxItems && this.value.length >= this.maxItems;\n    }\n\n    private isInvalid() {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            return true;\n        }\n\n        if (!this.required) {\n            return false;\n        }\n\n        if (!this.blurred) {\n            return false;\n        }\n\n        return !this.value || !this.value.length;\n    }\n\n    private inputFieldOnChange(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Enter edit mode when the text field receives focus. When editMode is true, the input element will be visible\n     */\n    private handleTextFieldFocus() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        if (this.editMode) {\n            return;\n        }\n\n        this.editMode = true;\n        this.startEdit.emit();\n    }\n\n    /**\n     * Exit edit mode when the input element loses focus. This makes sure the input element does not take up any\n     * additional space when the user it not typing anything\n     */\n    private handleInputBlur() {\n        if (this.emptyInputOnBlur) {\n            this.syncEmptyInput();\n        }\n\n        this.editMode = false;\n        this.blurred = true;\n        this.inputChipIndexSelected = null;\n\n        // This timeout is needed in order to let a new element receive focus\n        setTimeout(() => {\n            this.stopEdit.emit();\n        }, 0);\n    }\n\n    private syncEmptyInput() {\n        this.textValue = '';\n    }\n\n    private inputHidden() {\n        if (this.editMode) {\n            return this.isFull();\n        }\n\n        // If there are chips in the picker, hide the input to avoid the input\n        // being placed on a new line and adding ugly space beneath the chips.\n        // If there are no chips, show the input, or the picker will look weird.\n        return !!(this.value && this.value.length);\n    }\n\n    private handleTextInput(event) {\n        event.stopPropagation();\n        this.inputChipIndexSelected = null;\n        this.textValue = event.target.value;\n        this.input.emit(event.target.value && event.target.value.trim());\n    }\n\n    private emitInteraction(chip: Chip) {\n        this.interact.emit(chip);\n    }\n\n    private renderChip(chip: Chip) {\n        const chipType: ChipType =\n            this.type === 'filter' ? 'filter' : 'default';\n\n        const chipProps = this.getChipProps(chip, chipType);\n\n        return <limel-chip {...chipProps} />;\n    }\n\n    private hasHelperText = () => {\n        return this.helperText !== null && this.helperText !== undefined;\n    };\n\n    private renderHelperLine = () => {\n        const maxItems = this.maxItems === 1 ? undefined : this.maxItems;\n\n        if (!maxItems && !this.hasHelperText()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                length={this.value.length}\n                maxLength={maxItems}\n                helperText={this.helperText}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderInputChip(chip: Chip, index: number, chips: Chip[]) {\n        const chipProps = this.getChipProps(chip, 'default');\n        const isLastChip = index === chips.length - 1;\n\n        return [\n            <limel-chip\n                key={chip.id}\n                class={{\n                    'can-be-removed': this.inputChipIndexSelected === index,\n                }}\n                {...chipProps}\n            />,\n            !(isLastChip && this.inputHidden()) && this.renderDelimiter(),\n        ];\n    }\n\n    private getChipProps(chip: Chip, chipType: ChipType) {\n        const removable =\n            this.type === 'input' && chip.removable && !this.readonly;\n        const readonly = this.readonly && this.type !== 'input';\n\n        return {\n            role: 'row',\n            identifier: chip.id,\n            text: chip.text,\n            icon: chip.icon,\n            image: chip.image,\n            badge: chip.badge,\n            selected: chip.selected,\n            disabled: this.disabled,\n            readonly: readonly,\n            type: chipType,\n            removable: removable,\n            menuItems: chip.menuItems,\n            onClick: this.catchInputChipClicks(chip),\n            onRemove: this.handleRemoveChip,\n            ...(chip.href && {\n                link: {\n                    href: getHref(chip.href),\n                    target: getTarget(chip.href),\n                },\n            }),\n        };\n    }\n\n    private catchInputChipClicks = (chip: Chip) => (event: Event) => {\n        /*\n         * We need to add the `chip` to the event object so that the consumer\n         * can get the chip object when the chip is clicked.\n         * This is necessary for the consumer to be able to handle the click\n         * event itself, based on which chip was clicked, or whether the click\n         * was on a chip or elsewhere. The reason the consumer can't just look\n         * at the event target is that that information is hidden by the\n         * shadow DOM.\n         *\n         * See documentation for the `interact` event for more information.\n         */\n        (event as any).Lime = { chip: chip };\n\n        if (this.isSelectableChip(chip)) {\n            this.updateSelectedChipIds(chip);\n            this.change.emit(chip);\n        }\n\n        this.emitInteraction(chip);\n    };\n\n    private isSelectableChip(chip: Chip): boolean {\n        return this.type !== 'input' && 'selected' in chip;\n    }\n\n    private updateSelectedChipIds(chip: Chip): void {\n        chip.selected = !chip.selected;\n        const id = chip.id;\n        if (this.type === 'choice') {\n            this.updateChoiceTypeSelectedIds(id);\n        } else {\n            this.updateFilterTypeSelectedIds(id);\n        }\n    }\n\n    private updateChoiceTypeSelectedIds(id: number | string): void {\n        this.selectedChipIds = this.isChipSelected(id) ? [] : [id];\n    }\n\n    private isChipSelected(id: number | string): boolean {\n        return !!this.selectedChipIds.find((chipId) => chipId === id);\n    }\n\n    private updateFilterTypeSelectedIds(id: number | string): void {\n        if (this.isChipSelected(id)) {\n            this.removeChipIdFromSelectedChipIds(id);\n        } else {\n            this.addChipIdToSelectedChipIds(id);\n        }\n    }\n\n    private removeChipIdFromSelectedChipIds(id: number | string): void {\n        this.selectedChipIds = this.selectedChipIds.filter(\n            (chipId) => chipId !== id,\n        );\n    }\n\n    private addChipIdToSelectedChipIds(id: number | string): void {\n        this.selectedChipIds = [...this.selectedChipIds, id];\n    }\n\n    private handleRemoveChip = (\n        event: LimelChipCustomEvent<string | number>,\n    ) => {\n        this.removeChip(event.detail);\n    };\n\n    private removeChip = (identifier: string | number) => {\n        const newValue = this.value.filter((chip) => {\n            return chip.id !== identifier;\n        });\n        this.change.emit(newValue);\n    };\n\n    private renderLeadingIcon() {\n        if (!this.leadingIcon) {\n            return;\n        }\n\n        return (\n            <i class=\"mdc-text-field__icon search-icon\">\n                <limel-icon name={this.leadingIcon} />\n            </i>\n        );\n    }\n\n    private renderClearAllChipsButton() {\n        if (this.disabled || this.readonly || !this.clearAllButton) {\n            return;\n        }\n\n        return (\n            <a\n                href=\"\"\n                onClick={this.handleDeleteAllIconClick}\n                class=\"mdc-text-field__icon clear-all-button\"\n                tabindex=\"0\"\n                role=\"button\"\n                title={this.clearAllChipsLabel()}\n                aria-label={this.clearAllChipsLabel()}\n            />\n        );\n    }\n\n    private clearAllChipsLabel = (): string => {\n        return translate.get('chip-set.clear-all', this.language);\n    };\n\n    private handleDeleteAllIconClick(event: Event) {\n        event.preventDefault();\n        this.change.emit([]);\n    }\n\n    private renderDelimiter() {\n        if (!this.delimiter) {\n            return;\n        }\n\n        return <div class=\"delimiter\">{this.delimiter}</div>;\n    }\n\n    private triggerIconColorWarning(value: Chip[]) {\n        for (const chip of value) {\n            if (\n                chip.icon &&\n                (chip.iconFillColor ||\n                    chip.iconBackgroundColor ||\n                    chip.iconTitle)\n            ) {\n                /* eslint-disable-next-line no-console */\n                console.warn(\n                    \"The `iconFillColor`, `iconBackgroundColor`, and `iconTitle` props are deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name', `iconBackgroundColor: 'color-name', and `iconTitle: 'title'`, write `icon { name: 'icon-name', color: 'color-name', backgroundColor: 'color-name', title: 'title' }`.\",\n                );\n            }\n        }\n    }\n}\n"],"mappings":"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"}