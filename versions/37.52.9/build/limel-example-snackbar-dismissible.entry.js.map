{"version":3,"names":["SnackbarExample","constructor","hostRef","this","onChange","event","dismissible","detail","triggerSnackbarWithoutAction","triggerSnackbar","bind","render","h","label","onClick","checked","message","onHide","snackbarWithoutActionOnHide","selector","snackbar","host","shadowRoot","querySelector","show","console","log"],"sources":["./src/components/snackbar/examples/snackbar-dismissible.tsx"],"sourcesContent":["import { Component, Element, h, State } from '@stencil/core';\n\n/**\n * Dismissible\n * By default, snackbars display a dismiss button.\n * This allows users to close them at any time, before they time out.\n *\n * The reasons for this default behavior is that\n * there could be multiple snackbars on the screen, covering each other.\n * Also, snackbars could be covering other important content on the screen,\n * or have unreasonably long timeout.\n *\n * However, you can override this default interaction design by setting the\n * `dismissible` property to `false`.\n */\n@Component({\n    tag: 'limel-example-snackbar-dismissible',\n    shadow: true,\n})\nexport class SnackbarExample {\n    @Element()\n    private host: HTMLLimelExampleSnackbarElement;\n\n    @State()\n    private dismissible = true;\n\n    private triggerSnackbarWithoutAction: (event: MouseEvent) => void;\n\n    constructor() {\n        this.triggerSnackbarWithoutAction = this.triggerSnackbar.bind(\n            this,\n            'limel-snackbar',\n        );\n    }\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show snackbar\"\n                onClick={this.triggerSnackbarWithoutAction}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Dismissible\"\n                    checked={this.dismissible}\n                    onChange={this.onChange}\n                />\n            </limel-example-controls>,\n            <limel-snackbar\n                message=\"Your internet connection is restored!\"\n                dismissible={this.dismissible}\n                onHide={this.snackbarWithoutActionOnHide}\n            />,\n        ];\n    }\n\n    private triggerSnackbar(selector) {\n        const snackbar: HTMLLimelSnackbarElement =\n            this.host.shadowRoot.querySelector(selector);\n        snackbar.show();\n    }\n\n    private snackbarWithoutActionOnHide() {\n        console.log('We will try to reconnect if the connection drops again.');\n    }\n\n    private onChange = (event: CustomEvent<boolean>) => {\n        this.dismissible = event.detail;\n    };\n}\n"],"mappings":"4DAmBaA,EAAe,MASxBC,YAAAC,G,UAsCQC,KAAAC,SAAYC,IAChBF,KAAKG,YAAcD,EAAME,MAAM,E,iBA3Cb,KAKlBJ,KAAKK,6BAA+BL,KAAKM,gBAAgBC,KACrDP,KACA,iB,CAIDQ,SACH,MAAO,CACHC,EAAA,gBACIC,MAAM,gBACNC,QAASX,KAAKK,+BAElBI,EAAA,8BACIA,EAAA,kBACIC,MAAM,cACNE,QAASZ,KAAKG,YACdF,SAAUD,KAAKC,YAGvBQ,EAAA,kBACII,QAAQ,wCACRV,YAAaH,KAAKG,YAClBW,OAAQd,KAAKe,8B,CAKjBT,gBAAgBU,GACpB,MAAMC,EACFjB,KAAKkB,KAAKC,WAAWC,cAAcJ,GACvCC,EAASI,M,CAGLN,8BACJO,QAAQC,IAAI,0D"}