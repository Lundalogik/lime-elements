{"version":3,"names":["textEditorCustomTriggersCss","TextEditorCustomTriggersExample","constructor","hostRef","this","insertModeButtons","id","title","selected","selectionIndex","handleKeyPress","event","capturedKeys","ESCAPE","ARROW_UP","ARROW_DOWN","ENTER","TAB","includes","key","stopPropagation","preventDefault","moveSelection","selectedItem","items","find","item","insertItem","close","emit","direction","increment","numberOfItems","length","map","currentItem","index","Object","assign","renderPicker","filter","text","toLowerCase","inputText","h","open","isPickerOpen","openDirection","onClose","handleTriggerStop","renderList","style","padding","onChange","handleListChange","type","handleTriggerStart","triggerState","triggerFunction","detail","textEditor","handleTriggerChange","value","handleChange","handleInsertModeChange","insertMode","insert","node","tagName","attributes","icon","children","handleClick","bind","watchOpen","setupEventHandlers","componentWillLoad","host","addEventListener","capture","removeEventListener","render","display","customElements","triggers","onTriggerStart","onTriggerStop","onTriggerChange","class","label","element","target","clickedInside","portalContains"],"sources":["./src/components/text-editor/examples/text-editor-custom-triggers.scss?tag=limel-example-text-editor-triggers&encapsulation=shadow","./src/components/text-editor/examples/text-editor-custom-triggers.tsx"],"sourcesContent":["limel-button-group {\n    min-width: 8rem;\n}\n\nlimel-example-controls {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.mode {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.value {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-portal {\n    width: auto;\n}\n","import {\n    Button,\n    LimelListCustomEvent,\n    ListItem,\n} from '@limetech/lime-elements';\nimport {\n    Component,\n    h,\n    State,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { portalContains } from '../../portal/contains';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    TAB,\n} from '../../../util/keycodes';\nimport { TextEditor, TriggerEventDetail } from '../text-editor.types';\n\n/**\n * Custom triggers\n *\n * A trigger is a character or sequence of characters that if typed in the text editor\n * will initiate a trigger session. The session is initialized with a `triggerStart`\n * event. Subsequent characters written after the trigger sequence will be sent in a\n * `triggerChange` event. When the focus is removed from the trigger a `triggerStop`\n * event will be sent.\n *\n * The `triggerStart` event contains a `TextEditorInserter` object containing functions\n * to manipulate the state of the text editor around the trigger. Using any of the\n * supplied methods will effectivly replace the trigger content in the text editor with\n * the content of choice.\n *\n * In this example we pass either a text or a `limel-chip` representing some chosen user\n * in a mention like situation.\n */\n@Component({\n    tag: 'limel-example-text-editor-triggers',\n    shadow: true,\n    styleUrl: 'text-editor-custom-triggers.scss',\n})\nexport class TextEditorCustomTriggersExample {\n    constructor() {\n        this.handleClick = this.handleClick.bind(this);\n    }\n    @State()\n    private value: string = '';\n\n    @State()\n    private triggerState: string = '';\n\n    @State()\n    private inputText: string = '';\n\n    @State()\n    private isPickerOpen: boolean = false;\n\n    @State()\n    private insertMode: 'text' | 'chip' = 'text';\n\n    @State()\n    private items: Array<ListItem<number>> = [\n        { text: 'Wolverine', value: 1, icon: 'wolf', selected: true },\n        { text: 'Captain America', value: 2, icon: 'captain_america' },\n        { text: 'Superman', value: 3, icon: 'superman' },\n        { text: 'Tony Stark', value: 4, icon: 'iron_man' },\n        { text: 'Batman', value: 5, icon: 'batman_old' },\n    ];\n\n    @Element()\n    private host: HTMLLimelPopoverElement;\n\n    /**\n     * Emits an event when the component is closing\n     */\n    @Event()\n    private close: EventEmitter<void>;\n\n    private insertModeButtons: Button[] = [\n        {\n            id: '1',\n            title: 'text',\n            selected: true,\n        },\n        {\n            id: '2',\n            title: 'chip',\n        },\n    ];\n\n    private selectionIndex: number = 0;\n\n    private triggerFunction?: TextEditor;\n\n    @Watch('isPickerOpen')\n    protected watchOpen() {\n        this.setupEventHandlers();\n    }\n\n    public componentWillLoad() {\n        this.setupEventHandlers();\n    }\n\n    private setupEventHandlers() {\n        if (this.isPickerOpen) {\n            this.host.addEventListener('click', this.handleClick, {\n                capture: true,\n            });\n            this.host.addEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        } else {\n            this.host.removeEventListener('click', this.handleClick, {\n                capture: true,\n            });\n            this.host.removeEventListener('keydown', this.handleKeyPress, {\n                capture: true,\n            });\n        }\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        const capturedKeys = [ESCAPE, ARROW_UP, ARROW_DOWN, ENTER, TAB];\n        if (capturedKeys.includes(event.key)) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if (event.key === ARROW_DOWN || event.key === ARROW_UP) {\n            this.moveSelection(event.key);\n        }\n\n        if (event.key === ENTER || event.key === TAB) {\n            const selectedItem: ListItem | undefined = this.items.find(\n                (item) => item.selected,\n            );\n\n            if (selectedItem) {\n                this.insertItem(selectedItem);\n            }\n        }\n\n        if (event.key === ESCAPE) {\n            this.close.emit();\n        }\n    };\n\n    private moveSelection = (\n        direction: typeof ARROW_UP | typeof ARROW_DOWN,\n    ) => {\n        const increment = direction === ARROW_DOWN ? 1 : -1;\n        const numberOfItems = this.items.length;\n        this.selectionIndex =\n            (this.selectionIndex + increment + numberOfItems) % numberOfItems;\n\n        this.items = this.items.map((currentItem, index) => {\n            currentItem.selected = index === this.selectionIndex;\n\n            return { ...currentItem };\n        });\n    };\n\n    public render() {\n        return [\n            this.renderPicker(),\n            <limel-text-editor\n                style={{ display: 'block' }}\n                value={this.value}\n                customElements={[\n                    { tagName: 'limel-chip', attributes: ['text', 'icon'] },\n                ]}\n                triggers={['@']}\n                onTriggerStart={this.handleTriggerStart}\n                onTriggerStop={this.handleTriggerStop}\n                onTriggerChange={this.handleTriggerChange}\n                onChange={this.handleChange}\n            />,\n            <limel-example-controls>\n                Insert mode:\n                <limel-button-group\n                    class=\"mode\"\n                    value={this.insertModeButtons}\n                    onChange={this.handleInsertModeChange}\n                />\n                <div class=\"value\">\n                    <limel-example-value\n                        label=\"Action\"\n                        value={this.triggerState}\n                    />\n                    <limel-example-value\n                        label=\"Tag value\"\n                        value={this.inputText}\n                    />\n                </div>\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private renderPicker = () => {\n        const items = this.items.filter((item: ListItem<number>) =>\n            item.text.toLowerCase().includes(this.inputText),\n        );\n\n        return (\n            <limel-popover\n                open={this.isPickerOpen}\n                openDirection=\"top-start\"\n                onClose={this.handleTriggerStop}\n            >\n                {this.renderList(items)}\n            </limel-popover>\n        );\n    };\n\n    private renderList = (items: Array<ListItem<number>>) => {\n        if (items.length === 0) {\n            return (\n                <div style={{ padding: '0.5rem' }}>\n                    Couldn't find. Not a hero yet! ðŸ¥²\n                </div>\n            );\n        }\n\n        return (\n            <limel-list\n                items={items}\n                onChange={this.handleListChange}\n                type=\"selectable\"\n            />\n        );\n    };\n\n    private handleTriggerStart = (event: CustomEvent<TriggerEventDetail>) => {\n        this.triggerState = 'start';\n        this.isPickerOpen = true;\n        this.triggerFunction = event.detail.textEditor;\n    };\n\n    private handleTriggerStop = () => {\n        this.triggerState = 'stop';\n        this.inputText = '';\n        this.isPickerOpen = false;\n    };\n\n    private handleTriggerChange = (event: CustomEvent<TriggerEventDetail>) => {\n        this.inputText = event.detail.value.toLowerCase();\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleClick(event: MouseEvent) {\n        const element: HTMLElement = event.target as HTMLElement;\n        const clickedInside = portalContains(this.host, element);\n        if (this.isPickerOpen && !clickedInside) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.isPickerOpen = false;\n            this.close.emit();\n        }\n    }\n\n    private handleListChange = (\n        event: LimelListCustomEvent<ListItem<number>>,\n    ) => {\n        if (event.detail.selected) {\n            this.insertItem(event.detail);\n        }\n    };\n\n    private handleInsertModeChange = (event: CustomEvent<Button>) => {\n        this.insertMode = event.detail.title as any;\n    };\n\n    private insertItem = (item: ListItem) => {\n        if (this.insertMode === 'text') {\n            this.triggerFunction.insert('@' + item.text);\n\n            return;\n        }\n\n        this.triggerFunction.insert({\n            node: {\n                tagName: 'limel-chip',\n                attributes: {\n                    icon: item.icon,\n                    text: item.text,\n                },\n            },\n            children: [\"I'm a teapot\"],\n        });\n    };\n}\n"],"mappings":"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"}