{"version":3,"names":["textEditorAllowResizeCss","TextEditorAllowResizeExample","this","setAllowResize","event","stopPropagation","allowResize","detail","handleChange","value","render","h","onChange","checked","label"],"sources":["./src/components/text-editor/examples/text-editor-allow-resize.scss?tag=limel-example-text-editor-allow-resize&encapsulation=shadow","./src/components/text-editor/examples/text-editor-allow-resize.tsx"],"sourcesContent":["limel-text-editor {\n    min-height: 8rem;\n    max-height: 20rem;\n}\n","import { Component, h, State } from '@stencil/core';\n/**\n * Allow resize\n * The text editor automatically adjusts its own height to fit the content inside.\n * So as the user types, the editor will grow taller, potentially resizing its own\n * container element.\n *\n * By default, the user can also manually change the height of the text editor\n * by dragging its bottom right corner.\n *\n * As soon as the user has changed the height, this will override the automatic\n * resizing, and the editor will no longer adjust its height to fit the content inside.\n *\n * By setting `allowResize` to `false`, you can disable the end user\n * to resize the text editor vertically.\n *\n * :::tip\n * 1. The text editor makes sure that it never becomes taller than the viewport's height.\n * This way, its toolbar and resize control will remain reasonably visible, when\n * the component is auto resizing itself based on the content it holds.\n * This behavior is controlled by the `--text-editor-max-height` CSS variable,\n * which defaults to `calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)) - 4rem)`,\n * taking also into account the safe zones which are defined by the environment variables.\n *\n * 1. Using `max-height` and `min-height` CSS properties on the component itself,\n * (or using `--text-editor-max-height`), you can limit the resizing to a specific range.\n * :::\n */\n@Component({\n    tag: 'limel-example-text-editor-allow-resize',\n    shadow: true,\n    styleUrl: 'text-editor-allow-resize.scss',\n})\nexport class TextEditorAllowResizeExample {\n    @State()\n    private value: string;\n\n    @State()\n    private allowResize = true;\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                allowResize={this.allowResize}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.allowResize}\n                    label=\"Allow resize\"\n                    onChange={this.setAllowResize}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private setAllowResize = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.allowResize = event.detail;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"],"mappings":"+CAAA,MAAMA,EAA2B,sD,MCiCpBC,EAA4B,M,yBAyB7BC,KAAAC,eAAkBC,IACtBA,EAAMC,kBACNH,KAAKI,YAAcF,EAAMG,MAAM,EAG3BL,KAAAM,aAAgBJ,IACpBF,KAAKO,MAAQL,EAAMG,MAAM,E,sCA1BP,I,CAEfG,SACH,MAAO,CACHC,EAAA,qBACIF,MAAOP,KAAKO,MACZG,SAAUV,KAAKM,aACfF,YAAaJ,KAAKI,cAEtBK,EAAA,8BACIA,EAAA,kBACIE,QAASX,KAAKI,YACdQ,MAAM,eACNF,SAAUV,KAAKC,kBAGvBQ,EAAA,uBAAqBF,MAAOP,KAAKO,Q"}