{"version":3,"names":["SnackbarPersistentNonDismissibleExample","this","triggerSnackbar","isOpen","handleChange","event","detail","handleHide","render","h","label","onClick","message","timeout","open","dismissible","onHide","style","onChange"],"sources":["./src/components/snackbar/examples/snackbar-persistent-non-dismissible.tsx"],"sourcesContent":["import { Component, State, h } from '@stencil/core';\n\n/**\n * Persistent and non-dismissible\n * In some scenarios, a Snackbar that is persistent\n * can simultaneously be non-dismissible.\n *\n * This is good for handling cases in which the system tries to\n * communicate an ongoing background process or a status that the user\n * cannot take an action on, but should be kept informed about.\n *\n * In such cases, you should programmatically close the Snackbar\n * when the process is completed or the status changes!\n */\n@Component({\n    tag: 'limel-example-snackbar-persistent-non-dismissible',\n    shadow: true,\n})\nexport class SnackbarPersistentNonDismissibleExample {\n    @State()\n    private isOpen = false;\n\n    public render() {\n        return [\n            <limel-button\n                label=\"Show a persistent & non-dismissible alert\"\n                onClick={this.triggerSnackbar}\n            />,\n            <limel-snackbar\n                message=\"Your internet connection was lost! Hang on while we're trying to reconnectâ€¦\"\n                timeout={0}\n                open={this.isOpen}\n                dismissible={false}\n                onHide={this.handleHide}\n            />,\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-switch\n                    label=\"Toggle online status\"\n                    onChange={this.handleChange}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private triggerSnackbar = () => {\n        this.isOpen = true;\n    };\n\n    private handleChange = (event: CustomEvent<boolean>) => {\n        if (!this.isOpen) {\n            return;\n        }\n\n        if (!event.detail) {\n            return;\n        }\n\n        this.isOpen = false;\n    };\n\n    private handleHide = () => {\n        this.isOpen = false;\n    };\n}\n"],"mappings":"qDAkBaA,EAAuC,M,yBA4BxCC,KAAAC,gBAAkB,KACtBD,KAAKE,OAAS,IAAI,EAGdF,KAAAG,aAAgBC,IACpB,IAAKJ,KAAKE,OAAQ,CACd,M,CAGJ,IAAKE,EAAMC,OAAQ,CACf,M,CAGJL,KAAKE,OAAS,KAAK,EAGfF,KAAAM,WAAa,KACjBN,KAAKE,OAAS,KAAK,E,YA3CN,K,CAEVK,SACH,MAAO,CACHC,EAAA,gBACIC,MAAM,4CACNC,QAASV,KAAKC,kBAElBO,EAAA,kBACIG,QAAQ,8EACRC,QAAS,EACTC,KAAMb,KAAKE,OACXY,YAAa,MACbC,OAAQf,KAAKM,aAEjBE,EAAA,0BACIQ,MAAO,CAAE,mCAAoC,aAE7CR,EAAA,gBACIC,MAAM,uBACNQ,SAAUjB,KAAKG,gB"}