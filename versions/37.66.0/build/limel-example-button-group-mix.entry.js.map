{"version":3,"names":["ButtonGroupMixExample","this","handleChange","event","changedButton","detail","console","log","buttons","map","button","Object","assign","selected","id","toggleEnabled","disabled","title","icon","render","h","onChange","value","label","checked"],"sources":["./src/components/button-group/examples/button-group-mix.tsx"],"sourcesContent":["import { Button, LimelButtonGroupCustomEvent } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\n\n/**\n * Mixed text and icon within the same group\n *\n * Generally, you should avoid mixing text and images in button group. Although\n * individual buttons can contain text or images, mixing the two in a single\n * group can lead to an inconsistent and confusing interface.\n *\n * However, in some case your design may benefit from having only one button in\n * a different format.\n */\n@Component({\n    tag: 'limel-example-button-group-mix',\n    shadow: true,\n})\nexport class ButtonGroupMixExample {\n    @State()\n    private disabled: boolean = false;\n\n    @State()\n    private buttons: Button[] = [\n        {\n            id: '1',\n            title: 'All',\n        },\n        {\n            id: '2',\n            title: 'Banana',\n            icon: 'banana',\n        },\n        {\n            id: '3',\n            title: 'Apple',\n            icon: 'apple',\n        },\n        {\n            id: '4',\n            title: 'Pear',\n            icon: 'pear',\n        },\n    ];\n\n    public render() {\n        return [\n            <limel-button-group\n                disabled={this.disabled}\n                onChange={this.handleChange}\n                value={this.buttons}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    label=\"Disabled\"\n                    onChange={this.toggleEnabled}\n                    checked={this.disabled}\n                />\n            </limel-example-controls>,\n        ];\n    }\n\n    private handleChange = (event: LimelButtonGroupCustomEvent<Button>) => {\n        const changedButton = event.detail;\n        console.log(changedButton);\n\n        this.buttons = this.buttons.map((button) => {\n            return {\n                ...button,\n                selected: button.id === changedButton.id,\n            };\n        });\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n}\n"],"mappings":"qDAiBaA,EAAqB,M,yBA4CtBC,KAAAC,aAAgBC,IACpB,MAAMC,EAAgBD,EAAME,OAC5BC,QAAQC,IAAIH,GAEZH,KAAKO,QAAUP,KAAKO,QAAQC,KAAKC,GAC7BC,OAAAC,OAAAD,OAAAC,OAAA,GACOF,GAAM,CACTG,SAAUH,EAAOI,KAAOV,EAAcU,MAE5C,EAGEb,KAAAc,cAAgB,KACpBd,KAAKe,UAAYf,KAAKe,QAAQ,E,cAvDN,M,aAGA,CACxB,CACIF,GAAI,IACJG,MAAO,OAEX,CACIH,GAAI,IACJG,MAAO,SACPC,KAAM,UAEV,CACIJ,GAAI,IACJG,MAAO,QACPC,KAAM,SAEV,CACIJ,GAAI,IACJG,MAAO,OACPC,KAAM,Q,CAIPC,SACH,MAAO,CACHC,EAAA,sBACIJ,SAAUf,KAAKe,SACfK,SAAUpB,KAAKC,aACfoB,MAAOrB,KAAKO,UAEhBY,EAAA,8BACIA,EAAA,kBACIG,MAAM,WACNF,SAAUpB,KAAKc,cACfS,QAASvB,KAAKe,Y"}