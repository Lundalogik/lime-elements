{"version":3,"names":["listItemBasicCss","ListItemActionsExample","this","actionItems","text","value","icon","separator","disabled","toggleValue","selected","selectedItems","has","Set","filter","id","lastInteraction","onClick","event","host","target","closest","hasAttribute","getAttribute","Number","dataset","onKeyDown","isEnter","key","isSpace","code","repeat","preventDefault","focused","setDisabled","detail","render","h","Host","tabIndex","type","secondaryText","actions","label","onChange"],"sources":["./src/components/list-item/examples/list-item-basic.scss?tag=limel-example-list-item-actions&encapsulation=shadow","./src/components/list-item/examples/list-item-actions.tsx"],"sourcesContent":["@use '../../../style/mixins';\n\n:host {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.25rem;\n}\n\nul {\n    position: relative;\n    list-style: none;\n    padding: 1rem 1rem 2rem 1rem;\n    margin: 0;\n\n    background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n    background-size: 0.5rem;\n\n    &.is-resizable {\n        overflow: hidden;\n        resize: horizontal;\n        max-width: calc(100% - 2rem);\n        min-width: 10rem;\n\n        &::after {\n            content: 'Resize me â¤µ';\n            font-size: 0.75rem;\n            position: absolute;\n            right: 0.25rem;\n            bottom: 0.25rem;\n        }\n    }\n}\n","import { MenuItem, ListSeparator } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * List item with action menu\n *\n * This example shows how a list item can have an action menu\n * with multiple actions that can be triggered by the user.\n *\n * The consumer (e.g. `limel-list`) component should handle the interaction with the action menu.\n * - Action menu items are `MenuItem` objects where `value` contains the actual `Action`\n * - **Event bubbling:** `limel-menu` emits `select` events with the `MenuItem` as `event.detail`\n * - **Natural forwarding:** The select event bubbles up and `limel-list` re-emits it\n * - **Value extraction:** the final consumer of `limel-list`\n * will eventually extract `event.detail.value` to get the actual `Action`\n *\n * :::note\n * The action menu of the disabled items remains enabled!\n * :::\n */\n@Component({\n    tag: 'limel-example-list-item-actions',\n    shadow: true,\n    styleUrl: 'list-item-basic.scss',\n})\nexport class ListItemActionsExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private lastInteraction: string = '';\n\n    @State()\n    private selectedItems: Set<number> = new Set();\n\n    private actionItems: Array<MenuItem | ListSeparator> = [\n        { text: 'Edit', value: 'edit', icon: 'edit' },\n        { text: 'Duplicate', value: 'duplicate', icon: 'copy' },\n        { text: 'Share', value: 'share', icon: 'share' },\n        { separator: true },\n        { text: 'Delete', value: 'delete', icon: 'trash', disabled: true },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <ul onClick={this.onClick} onKeyDown={this.onKeyDown}>\n                    <limel-list-item\n                        tabIndex={0}\n                        data-value={1}\n                        value={1}\n                        type=\"option\"\n                        selected={this.selectedItems.has(1)}\n                        text=\"King of Tokyo\"\n                        secondaryText=\"A fun dice game for 2-6 players\"\n                        icon=\"gorilla\"\n                        actions={this.actionItems}\n                        disabled={this.disabled}\n                    />\n                    <limel-list-item\n                        tabIndex={0}\n                        data-value={2}\n                        value={2}\n                        type=\"option\"\n                        selected={this.selectedItems.has(2)}\n                        text=\"Pandemic\"\n                        secondaryText=\"Cooperative board game where players work together to save the world\"\n                        icon=\"virus\"\n                        actions={this.actionItems}\n                        disabled={this.disabled}\n                    />\n                </ul>\n                <limel-example-controls>\n                    <limel-switch\n                        label=\"Disabled\"\n                        value={this.disabled}\n                        onChange={this.setDisabled}\n                    />\n                </limel-example-controls>\n                <limel-example-value\n                    label=\"Last interaction\"\n                    value={this.lastInteraction}\n                />\n            </Host>\n        );\n    }\n\n    private toggleValue = (value: number, text: string) => {\n        const selected = this.selectedItems.has(value);\n        if (selected) {\n            this.selectedItems = new Set(\n                [...this.selectedItems].filter((id) => id !== value)\n            );\n            this.lastInteraction = `Deselected \"${text}\"`;\n        } else {\n            this.selectedItems = new Set([...this.selectedItems, value]);\n            this.lastInteraction = `Selected \"${text}\"`;\n        }\n    };\n\n    private onClick = (event: MouseEvent) => {\n        // If the entire example is disabled, ignore item clicks\n        if (this.disabled) {\n            return;\n        }\n        const host = (event.target as HTMLElement).closest('limel-list-item');\n        if (!host) {\n            return;\n        }\n        // Skip if clicking the action menu trigger or inside the menu\n        if (\n            (event.target as HTMLElement).closest('.action-menu-trigger') ||\n            (event.target as HTMLElement).closest('limel-menu')\n        ) {\n            return;\n        }\n        // Respect per-item disabled state (attribute reflected by the component)\n        if (\n            host.hasAttribute('disabled') ||\n            host.getAttribute('aria-disabled') === 'true'\n        ) {\n            return;\n        }\n        const value = Number((host as HTMLElement).dataset.value);\n        const text = host.getAttribute('text') || '';\n        this.toggleValue(value, text);\n    };\n\n    private onKeyDown = (event: KeyboardEvent) => {\n        if (this.disabled) {\n            return;\n        }\n        const isEnter = event.key === 'Enter';\n        const isSpace =\n            event.key === ' ' ||\n            event.key === 'Space' ||\n            event.key === 'Spacebar' ||\n            event.code === 'Space';\n        if (!isEnter && !isSpace) {\n            return;\n        }\n        if (event.repeat) {\n            return;\n        }\n        if (isSpace) {\n            event.preventDefault();\n        }\n        const focused = (event.target as HTMLElement).closest(\n            'limel-list-item'\n        );\n        if (!focused) {\n            return;\n        }\n        if (\n            (event.target as HTMLElement).closest('.action-menu-trigger') ||\n            (event.target as HTMLElement).closest('limel-menu') ||\n            focused.hasAttribute('disabled') ||\n            focused.getAttribute('aria-disabled') === 'true'\n        ) {\n            return;\n        }\n        const value = Number((focused as HTMLElement).dataset.value);\n        const text = focused.getAttribute('text') || '';\n        this.toggleValue(value, text);\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAmB,slB,MCyBZC,EAAsB,M,yBAUvBC,KAAAC,YAA+C,CACnD,CAAEC,KAAM,OAAQC,MAAO,OAAQC,KAAM,QACrC,CAAEF,KAAM,YAAaC,MAAO,YAAaC,KAAM,QAC/C,CAAEF,KAAM,QAASC,MAAO,QAASC,KAAM,SACvC,CAAEC,UAAW,MACb,CAAEH,KAAM,SAAUC,MAAO,SAAUC,KAAM,QAASE,SAAU,OA+CxDN,KAAAO,YAAc,CAACJ,EAAeD,KAClC,MAAMM,EAAWR,KAAKS,cAAcC,IAAIP,GACxC,GAAIK,EAAU,CACVR,KAAKS,cAAgB,IAAIE,IACrB,IAAIX,KAAKS,eAAeG,QAAQC,GAAOA,IAAOV,KAElDH,KAAKc,gBAAkB,eAAeZ,I,KACnC,CACHF,KAAKS,cAAgB,IAAIE,IAAI,IAAIX,KAAKS,cAAeN,IACrDH,KAAKc,gBAAkB,aAAaZ,I,GAIpCF,KAAAe,QAAWC,IAEf,GAAIhB,KAAKM,SAAU,CACf,M,CAEJ,MAAMW,EAAQD,EAAME,OAAuBC,QAAQ,mBACnD,IAAKF,EAAM,CACP,M,CAGJ,GACKD,EAAME,OAAuBC,QAAQ,yBACrCH,EAAME,OAAuBC,QAAQ,cACxC,CACE,M,CAGJ,GACIF,EAAKG,aAAa,aAClBH,EAAKI,aAAa,mBAAqB,OACzC,CACE,M,CAEJ,MAAMlB,EAAQmB,OAAQL,EAAqBM,QAAQpB,OACnD,MAAMD,EAAOe,EAAKI,aAAa,SAAW,GAC1CrB,KAAKO,YAAYJ,EAAOD,EAAK,EAGzBF,KAAAwB,UAAaR,IACjB,GAAIhB,KAAKM,SAAU,CACf,M,CAEJ,MAAMmB,EAAUT,EAAMU,MAAQ,QAC9B,MAAMC,EACFX,EAAMU,MAAQ,KACdV,EAAMU,MAAQ,SACdV,EAAMU,MAAQ,YACdV,EAAMY,OAAS,QACnB,IAAKH,IAAYE,EAAS,CACtB,M,CAEJ,GAAIX,EAAMa,OAAQ,CACd,M,CAEJ,GAAIF,EAAS,CACTX,EAAMc,gB,CAEV,MAAMC,EAAWf,EAAME,OAAuBC,QAC1C,mBAEJ,IAAKY,EAAS,CACV,M,CAEJ,GACKf,EAAME,OAAuBC,QAAQ,yBACrCH,EAAME,OAAuBC,QAAQ,eACtCY,EAAQX,aAAa,aACrBW,EAAQV,aAAa,mBAAqB,OAC5C,CACE,M,CAEJ,MAAMlB,EAAQmB,OAAQS,EAAwBR,QAAQpB,OACtD,MAAMD,EAAO6B,EAAQV,aAAa,SAAW,GAC7CrB,KAAKO,YAAYJ,EAAOD,EAAK,EAGzBF,KAAAgC,YAAehB,IACnBhB,KAAKM,SAAWU,EAAMiB,MAAM,E,cA5Ib,M,qBAGe,G,mBAGG,IAAItB,G,CAUlCuB,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,MAAIpB,QAASf,KAAKe,QAASS,UAAWxB,KAAKwB,WACvCW,EAAA,mBACIE,SAAU,EAAC,aACC,EACZlC,MAAO,EACPmC,KAAK,SACL9B,SAAUR,KAAKS,cAAcC,IAAI,GACjCR,KAAK,gBACLqC,cAAc,kCACdnC,KAAK,UACLoC,QAASxC,KAAKC,YACdK,SAAUN,KAAKM,WAEnB6B,EAAA,mBACIE,SAAU,EAAC,aACC,EACZlC,MAAO,EACPmC,KAAK,SACL9B,SAAUR,KAAKS,cAAcC,IAAI,GACjCR,KAAK,WACLqC,cAAc,uEACdnC,KAAK,QACLoC,QAASxC,KAAKC,YACdK,SAAUN,KAAKM,YAGvB6B,EAAA,8BACIA,EAAA,gBACIM,MAAM,WACNtC,MAAOH,KAAKM,SACZoC,SAAU1C,KAAKgC,eAGvBG,EAAA,uBACIM,MAAM,mBACNtC,MAAOH,KAAKc,kB"}