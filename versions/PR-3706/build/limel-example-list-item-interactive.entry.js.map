{"version":3,"names":["listItemBasicCss","ListItemInteractiveExample","this","toggleSelection","disabled","selected","lastEvent","onItemClick","event","target","closest","onHostKeyDown","isEnter","key","isSpace","code","repeat","preventDefault","active","document","activeElement","tagName","toLowerCase","setDisabled","detail","setSelected","render","h","Host","onKeyDown","tabindex","text","secondaryText","icon","type","onClick","label","value","onChange"],"sources":["./src/components/list-item/examples/list-item-basic.scss?tag=limel-example-list-item-interactive&encapsulation=shadow","./src/components/list-item/examples/list-item-interactive.tsx"],"sourcesContent":["@use '../../../style/mixins';\n\n:host {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.25rem;\n}\n\nul {\n    position: relative;\n    list-style: none;\n    padding: 1rem 1rem 2rem 1rem;\n    margin: 0;\n\n    background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n    background-size: 0.5rem;\n\n    &.is-resizable {\n        overflow: hidden;\n        resize: horizontal;\n        max-width: calc(100% - 2rem);\n        min-width: 10rem;\n\n        &::after {\n            content: 'Resize me ⤵';\n            font-size: 0.75rem;\n            position: absolute;\n            right: 0.25rem;\n            bottom: 0.25rem;\n        }\n    }\n}\n","import { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Interactive list item example\n *\n * A list item with the default type (`type=\"listitem\"`) shows a simpler\n * visual feedback when hovered. Once it is clicked, it emits an event\n * with details about the item.\n *\n * However, certain item `type`s are \"selectable\";\n * for instance `option`, `radio` and `checkbox`.\n * When users click them (or focus and press <kbd>Enter</kbd> or <kbd>Space</kbd>)\n * these items toggle their selection.\n *\n * A `selected` item will both visually indicate that it is selected\n * and also informs assistive technology about its state, using proper ARIA attributes.\n *\n * Each of these types visualize the selected state differently.\n *\n * - `option`: The selected state is indicated by a tinted background,\n * colored by the consumer's defined accent color.\n * - `radio`: The selected state is indicated by a filled circle.\n * - `checkbox`: The selected state is indicated by a checked checkmark.\n *\n * :::important\n * Needless to say that a `disabled` item cannot be selected or interacted with.\n * The component owns “disabled” interaction semantics and accessibility.\n * The consumer should not make the list item unclickable / uninteractive,\n * using some TS logics, or by adding a `pointer-events: none;` style.\n * This is because:\n * 1. The list items are interactive, both using mouse and keyboard.\n * 2. The list items can contain a primary component, or an action menu,\n * which need to remain interactive, even when the item is disabled.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-item-interactive',\n    shadow: true,\n    styleUrl: 'list-item-basic.scss',\n})\nexport class ListItemInteractiveExample {\n    @State()\n    private disabled = false;\n\n    @State()\n    private selected = false;\n\n    @State()\n    private lastEvent: string = 'No events yet';\n\n    public render() {\n        return (\n            <Host onKeyDown={this.onHostKeyDown}>\n                <limel-list-item\n                    tabindex={0}\n                    text=\"Interactive List Item, with `type='option'`\"\n                    secondaryText=\"Click me (or press Enter/Space) if I'm not disabled\"\n                    icon=\"star\"\n                    disabled={this.disabled}\n                    selected={this.selected}\n                    type=\"option\"\n                    onClick={this.onItemClick}\n                />\n                <limel-example-controls>\n                    <limel-switch\n                        label=\"Disabled\"\n                        value={this.disabled}\n                        onChange={this.setDisabled}\n                    />\n                    <limel-switch\n                        label=\"Selected\"\n                        value={this.selected}\n                        onChange={this.setSelected}\n                    />\n                </limel-example-controls>\n                <limel-example-value\n                    label=\"Last event\"\n                    value={this.lastEvent}\n                />\n            </Host>\n        );\n    }\n\n    private toggleSelection = () => {\n        if (this.disabled) {\n            return;\n        }\n        this.selected = !this.selected;\n        this.lastEvent = `Item ${this.selected ? 'selected' : 'deselected'}`;\n    };\n\n    private onItemClick = (event: MouseEvent) => {\n        const target = event.target as HTMLElement;\n        if (\n            target.closest('.action-menu-trigger') ||\n            target.closest('limel-menu')\n        ) {\n            return; // ignore action menu clicks\n        }\n        this.toggleSelection();\n    };\n\n    private onHostKeyDown = (event: KeyboardEvent) => {\n        if (this.disabled) {\n            return;\n        }\n        const isEnter = event.key === 'Enter';\n        const isSpace =\n            event.key === ' ' ||\n            event.key === 'Space' ||\n            event.key === 'Spacebar' ||\n            event.code === 'Space';\n        if (!isEnter && !isSpace) {\n            return;\n        }\n        if (event.repeat) {\n            return;\n        }\n        if (isSpace) {\n            event.preventDefault();\n        }\n        // Ensure the focused element is our list item before toggling\n        const active = document.activeElement as HTMLElement | null;\n        if (active && active.tagName.toLowerCase() === 'limel-list-item') {\n            this.toggleSelection();\n        }\n    };\n\n    private setDisabled = (event: CustomEvent<boolean>) => {\n        this.disabled = event.detail;\n    };\n\n    private setSelected = (event: CustomEvent<boolean>) => {\n        this.selected = event.detail;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAmB,slB,MCwCZC,EAA0B,M,yBA2C3BC,KAAAC,gBAAkB,KACtB,GAAID,KAAKE,SAAU,CACf,M,CAEJF,KAAKG,UAAYH,KAAKG,SACtBH,KAAKI,UAAY,QAAQJ,KAAKG,SAAW,WAAa,cAAc,EAGhEH,KAAAK,YAAeC,IACnB,MAAMC,EAASD,EAAMC,OACrB,GACIA,EAAOC,QAAQ,yBACfD,EAAOC,QAAQ,cACjB,CACE,M,CAEJR,KAAKC,iBAAiB,EAGlBD,KAAAS,cAAiBH,IACrB,GAAIN,KAAKE,SAAU,CACf,M,CAEJ,MAAMQ,EAAUJ,EAAMK,MAAQ,QAC9B,MAAMC,EACFN,EAAMK,MAAQ,KACdL,EAAMK,MAAQ,SACdL,EAAMK,MAAQ,YACdL,EAAMO,OAAS,QACnB,IAAKH,IAAYE,EAAS,CACtB,M,CAEJ,GAAIN,EAAMQ,OAAQ,CACd,M,CAEJ,GAAIF,EAAS,CACTN,EAAMS,gB,CAGV,MAAMC,EAASC,SAASC,cACxB,GAAIF,GAAUA,EAAOG,QAAQC,gBAAkB,kBAAmB,CAC9DpB,KAAKC,iB,GAILD,KAAAqB,YAAef,IACnBN,KAAKE,SAAWI,EAAMgB,MAAM,EAGxBtB,KAAAuB,YAAejB,IACnBN,KAAKG,SAAWG,EAAMgB,MAAM,E,cA3Fb,M,cAGA,M,eAGS,e,CAErBE,SACH,OACIC,EAACC,EAAI,CAACC,UAAW3B,KAAKS,eAClBgB,EAAA,mBACIG,SAAU,EACVC,KAAK,8CACLC,cAAc,sDACdC,KAAK,OACL7B,SAAUF,KAAKE,SACfC,SAAUH,KAAKG,SACf6B,KAAK,SACLC,QAASjC,KAAKK,cAElBoB,EAAA,8BACIA,EAAA,gBACIS,MAAM,WACNC,MAAOnC,KAAKE,SACZkC,SAAUpC,KAAKqB,cAEnBI,EAAA,gBACIS,MAAM,WACNC,MAAOnC,KAAKG,SACZiC,SAAUpC,KAAKuB,eAGvBE,EAAA,uBACIS,MAAM,aACNC,MAAOnC,KAAKI,Y"}