{"version":3,"names":["listItemBasicCss","NOTIFICATION_ICON","name","title","color","backgroundColor","ListItemCheckboxExample","this","items","value","text","secondaryText","toggleValue","selected","selectedValues","has","Set","filter","id","lastInteraction","onClick","event","host","target","closest","Number","dataset","getAttribute","onKeyDown","isEnter","key","isSpace","code","repeat","preventDefault","focused","setBadgeIcon","stopPropagation","badgeIcon","detail","setIcon","icon","undefined","render","h","Host","role","map","item","type","label","checked","onChange"],"sources":["./src/components/list-item/examples/list-item-basic.scss?tag=limel-example-list-item-checkbox&encapsulation=shadow","./src/components/list-item/examples/list-item-checkbox.tsx"],"sourcesContent":["@use '../../../style/mixins';\n\n:host {\n    display: flex;\n    flex-direction: column;\n    border-radius: 0.25rem;\n}\n\nul {\n    position: relative;\n    list-style: none;\n    padding: 1rem 1rem 2rem 1rem;\n    margin: 0;\n\n    background: url(\"data:image/svg+xml;charset=utf-8, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' style='fill-rule:evenodd;'><path fill='rgba(186,186,192,0.16)' d='M0 0h4v4H0zM4 4h4v4H4z'/></svg>\");\n    background-size: 0.5rem;\n\n    &.is-resizable {\n        overflow: hidden;\n        resize: horizontal;\n        max-width: calc(100% - 2rem);\n        min-width: 10rem;\n\n        &::after {\n            content: 'Resize me â¤µ';\n            font-size: 0.75rem;\n            position: absolute;\n            right: 0.25rem;\n            bottom: 0.25rem;\n        }\n    }\n}\n","import { Component, h, Host, State } from '@stencil/core';\n\nconst NOTIFICATION_ICON = {\n    name: 'notification_alert',\n    title: 'Notification alert icon',\n    color: 'rgb(var(--color-yellow-default))',\n    backgroundColor: 'rgb(var(--color-pink-default))',\n};\n\n/**\n * Checkbox list items\n *\n * This example shows how list items can be displayed as checkboxes.\n * Checkboxes allow users to select multiple options from a group.\n *\n * :::important\n * - The consumer component should set `role=\"group\"` for the `ul` or\n * the container of the `limel-list-item`s\n * :::\n *\n * :::note\n * - The checkboxes are purely visual - the selection logic\n * is handled by the parent component through the interact events.\n * :::\n */\n@Component({\n    tag: 'limel-example-list-item-checkbox',\n    shadow: true,\n    styleUrl: 'list-item-basic.scss',\n})\nexport class ListItemCheckboxExample {\n    @State()\n    private selectedValues: Set<number> = new Set([2]); // Pre-select second item\n\n    @State()\n    private lastInteraction: string = '';\n\n    @State()\n    private icon?: {\n        name: string;\n        title: string;\n        color: string;\n        backgroundColor: string;\n    } = NOTIFICATION_ICON;\n\n    @State()\n    private badgeIcon = true;\n\n    private items = [\n        {\n            value: 1,\n            text: 'Email notifications',\n            secondaryText: 'Receive updates via email',\n        },\n        {\n            value: 2,\n            text: 'Push notifications',\n            secondaryText: 'Receive updates on your device',\n        },\n        {\n            value: 3,\n            text: 'SMS notifications',\n            secondaryText: 'Receive updates via text message',\n        },\n        {\n            value: 4,\n            text: 'Newsletter',\n            secondaryText: 'Weekly product updates and tips',\n        },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <ul\n                    role=\"group\"\n                    aria-label=\"Notification preferences\"\n                    onClick={this.onClick}\n                    onKeyDown={this.onKeyDown}\n                >\n                    {this.items.map((item) => (\n                        <limel-list-item\n                            key={item.value}\n                            data-value={item.value}\n                            value={item.value}\n                            text={item.text}\n                            secondaryText={item.secondaryText}\n                            type=\"checkbox\"\n                            selected={this.selectedValues.has(item.value)}\n                            icon={this.icon}\n                            badgeIcon={this.badgeIcon}\n                        />\n                    ))}\n                </ul>\n                <limel-example-value\n                    label=\"Last interaction\"\n                    value={this.lastInteraction}\n                />\n                <limel-example-controls>\n                    <limel-checkbox\n                        checked={!!this.icon}\n                        label=\"icon\"\n                        onChange={this.setIcon}\n                    />\n                    <limel-checkbox\n                        checked={this.badgeIcon}\n                        label=\"badgeIcon\"\n                        onChange={this.setBadgeIcon}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private toggleValue = (value: number, text: string) => {\n        const selected = this.selectedValues.has(value);\n        if (selected) {\n            this.selectedValues = new Set(\n                [...this.selectedValues].filter((id) => id !== value)\n            );\n            this.lastInteraction = `Deselected \"${text}\"`;\n        } else {\n            this.selectedValues = new Set([...this.selectedValues, value]);\n            this.lastInteraction = `Selected \"${text}\"`;\n        }\n    };\n\n    private onClick = (event: MouseEvent) => {\n        const host = (event.target as HTMLElement).closest('limel-list-item');\n        if (!host) {\n            return;\n        }\n        const value = Number((host as HTMLElement).dataset.value);\n        const text = host.getAttribute('text') || '';\n        this.toggleValue(value, text);\n    };\n\n    private onKeyDown = (event: KeyboardEvent) => {\n        const isEnter = event.key === 'Enter';\n        const isSpace =\n            event.key === ' ' ||\n            event.key === 'Space' ||\n            event.key === 'Spacebar' ||\n            event.code === 'Space';\n        if (!isEnter && !isSpace) {\n            return;\n        }\n        if (event.repeat) {\n            return;\n        }\n        if (isSpace) {\n            event.preventDefault();\n        }\n        const focused = (event.target as HTMLElement).closest(\n            'limel-list-item'\n        );\n        if (!focused) {\n            return;\n        }\n        const value = Number((focused as HTMLElement).dataset.value);\n        const text = focused.getAttribute('text') || '';\n        this.toggleValue(value, text);\n    };\n\n    private setBadgeIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.badgeIcon = event.detail;\n    };\n\n    private setIcon = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.icon = event.detail ? NOTIFICATION_ICON : undefined;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAmB,slBCEzB,MAAMC,EAAoB,CACtBC,KAAM,qBACNC,MAAO,0BACPC,MAAO,mCACPC,gBAAiB,kC,MAwBRC,EAAuB,M,yBAkBxBC,KAAAC,MAAQ,CACZ,CACIC,MAAO,EACPC,KAAM,sBACNC,cAAe,6BAEnB,CACIF,MAAO,EACPC,KAAM,qBACNC,cAAe,kCAEnB,CACIF,MAAO,EACPC,KAAM,oBACNC,cAAe,oCAEnB,CACIF,MAAO,EACPC,KAAM,aACNC,cAAe,oCA+CfJ,KAAAK,YAAc,CAACH,EAAeC,KAClC,MAAMG,EAAWN,KAAKO,eAAeC,IAAIN,GACzC,GAAII,EAAU,CACVN,KAAKO,eAAiB,IAAIE,IACtB,IAAIT,KAAKO,gBAAgBG,QAAQC,GAAOA,IAAOT,KAEnDF,KAAKY,gBAAkB,eAAeT,I,KACnC,CACHH,KAAKO,eAAiB,IAAIE,IAAI,IAAIT,KAAKO,eAAgBL,IACvDF,KAAKY,gBAAkB,aAAaT,I,GAIpCH,KAAAa,QAAWC,IACf,MAAMC,EAAQD,EAAME,OAAuBC,QAAQ,mBACnD,IAAKF,EAAM,CACP,M,CAEJ,MAAMb,EAAQgB,OAAQH,EAAqBI,QAAQjB,OACnD,MAAMC,EAAOY,EAAKK,aAAa,SAAW,GAC1CpB,KAAKK,YAAYH,EAAOC,EAAK,EAGzBH,KAAAqB,UAAaP,IACjB,MAAMQ,EAAUR,EAAMS,MAAQ,QAC9B,MAAMC,EACFV,EAAMS,MAAQ,KACdT,EAAMS,MAAQ,SACdT,EAAMS,MAAQ,YACdT,EAAMW,OAAS,QACnB,IAAKH,IAAYE,EAAS,CACtB,M,CAEJ,GAAIV,EAAMY,OAAQ,CACd,M,CAEJ,GAAIF,EAAS,CACTV,EAAMa,gB,CAEV,MAAMC,EAAWd,EAAME,OAAuBC,QAC1C,mBAEJ,IAAKW,EAAS,CACV,M,CAEJ,MAAM1B,EAAQgB,OAAQU,EAAwBT,QAAQjB,OACtD,MAAMC,EAAOyB,EAAQR,aAAa,SAAW,GAC7CpB,KAAKK,YAAYH,EAAOC,EAAK,EAGzBH,KAAA6B,aAAgBf,IACpBA,EAAMgB,kBACN9B,KAAK+B,UAAYjB,EAAMkB,MAAM,EAGzBhC,KAAAiC,QAAWnB,IACfA,EAAMgB,kBACN9B,KAAKkC,KAAOpB,EAAMkB,OAAStC,EAAoByC,SAAS,E,oBA3ItB,IAAI1B,IAAI,CAAC,I,qBAGb,G,UAQ9Bf,E,eAGgB,I,CAyBb0C,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,MACIE,KAAK,QAAO,aACD,2BACX1B,QAASb,KAAKa,QACdQ,UAAWrB,KAAKqB,WAEfrB,KAAKC,MAAMuC,KAAKC,GACbJ,EAAA,mBACId,IAAKkB,EAAKvC,MAAK,aACHuC,EAAKvC,MACjBA,MAAOuC,EAAKvC,MACZC,KAAMsC,EAAKtC,KACXC,cAAeqC,EAAKrC,cACpBsC,KAAK,WACLpC,SAAUN,KAAKO,eAAeC,IAAIiC,EAAKvC,OACvCgC,KAAMlC,KAAKkC,KACXH,UAAW/B,KAAK+B,eAI5BM,EAAA,uBACIM,MAAM,mBACNzC,MAAOF,KAAKY,kBAEhByB,EAAA,8BACIA,EAAA,kBACIO,UAAW5C,KAAKkC,KAChBS,MAAM,OACNE,SAAU7C,KAAKiC,UAEnBI,EAAA,kBACIO,QAAS5C,KAAK+B,UACdY,MAAM,YACNE,SAAU7C,KAAK6B,gB"}