{"version":3,"names":["buttonGroupCss","ButtonGroup","constructor","hostRef","this","radioGroupName","createRandomString","setSelectedButton","selectedButtonId","_a","value","find","button","selected","id","renderButton","bind","onChange","renderContent","componentWillLoad","render","classes","disabled","h","class","role","map","buttonId","isButtonChecked","type","name","checked","htmlFor","renderBadge","icon","renderIcon","renderLabel","title","iconId","size","badge","elementId","label","event","stopPropagation","target","substr","item","change","emit","valueChanged"],"sources":["./src/components/button-group/button-group.scss?tag=limel-button-group&encapsulation=shadow","./src/components/button-group/button-group.tsx"],"sourcesContent":["@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '@material/chips/deprecated/mdc-chips';\n/**\n* @prop --button-group-background-color: Background color of the component. Defaults to `--contrast-400`\n*/\n\n.mdc-chip {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-chip {\n    @include mixins.is-flat-inset-clickable($background-color: transparent);\n    max-width: 100%;\n    min-width: functions.pxToRem(32);\n    padding: 0 functions.pxToRem(1);\n    display: inline-grid;\n    grid-auto-flow: column;\n    margin: functions.pxToRem(2) !important;\n    font-size: functions.pxToRem(14);\n\n    &:not(:last-child) {\n        &:after {\n            content: '';\n            display: block;\n\n            height: functions.pxToRem(16);\n            width: functions.pxToRem(2);\n            border-radius: functions.pxToRem(4);\n            background-color: var(\n                --button-group-text-color,\n                rgb(var(--contrast-1200))\n            );\n            opacity: 0.1;\n\n            position: absolute;\n            right: functions.pxToRem(-3);\n            top: 0;\n            bottom: 0;\n            margin: auto;\n        }\n    }\n\n    label {\n        cursor: pointer;\n        transition: color 0.2s ease;\n        display: flex;\n        align-items: center;\n        &:has(> limel-badge) {\n            .mdc-chip__text {\n                padding-right: 0.25rem;\n            }\n        }\n    }\n\n    input[type='radio'] {\n        width: 0;\n        position: absolute;\n        opacity: 0; // This removes some visual defects on iOS and Firefox, created by \"user agent styles\"\n\n        &:focus-visible {\n            + label {\n                &:after {\n                    // visualizes keyboard navigation on Chrome & Firefox\n                    // only when non-pointer input is being used,\n                    // e.g. tabbed into using keyboard\n                    content: '';\n                    display: block;\n                    position: absolute;\n                    top: 0;\n                    right: 0;\n                    bottom: 0;\n                    left: 0;\n                    border-radius: functions.pxToRem(60);\n                    box-shadow: var(--shadow-depth-8-focused);\n                    z-index: z-index.$button-group-radio-button-keyboard-focused;\n                }\n            }\n        }\n    }\n\n    span[role='gridcell'] {\n        min-width: 0; // This is needed to force mdc-chip__text (which is inside this span) to truncate\n\n        &:focus-within {\n            // Cannot use `:focus-visible` here, since it is the radio button\n            // which gets focused, which is inside this elementâ€¦\n            // and we are removing or hiding the visual appearance of the button\n            outline: none;\n            color: var(--mdc-theme-primary);\n        }\n\n        &:only-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n\n        &:first-child {\n            .mdc-chip__text {\n                padding-left: functions.pxToRem(12);\n            }\n        }\n    }\n\n    &.mdc-chip--selected {\n        background-color: var(--mdc-theme-surface);\n        box-shadow: var(--button-shadow-inset);\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n}\n\n.mdc-chip__text {\n    font-size: functions.pxToRem(13);\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: block;\n    padding: 0 functions.pxToRem(12) 0 functions.pxToRem(4);\n}\n\n.mdc-chip-set {\n    align-items: center;\n    border-radius: functions.pxToRem(60);\n    background-color: var(\n        --button-group-background-color,\n        rgb(var(--contrast-400))\n    );\n    padding: 0;\n\n    width: max-content;\n    max-width: 100%;\n\n    flex-wrap: nowrap; // Not sure about this. It'll put items on one row, but also can look bad on action bars. Kia\n\n    &.disabled {\n        @include shared_input-select-picker.looks-disabled;\n        pointer-events: none;\n    }\n}\n\nlimel-badge {\n    margin-right: 0.25rem;\n    pointer-events: none;\n}\n\n.mdc-chip:not(.mdc-chip--selected) {\n    --badge-background-color: rgb(var(--contrast-200));\n}\n","import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { Button } from '../button/button.types';\nimport { createRandomString } from '../../util/random-string';\n\n/**\n * A button group control is a linear set of two or more buttons.\n *\n * ## Usage\n *\n * Button groups are often used to display different views of the same thing. A\n * common example of this component is when you switch between [ Map | Transit\n * | Satellite ] views to look at an area on the map.\n *\n * In some cases, button groups may serve as quick filters as well. For example\n * a list of contacts, in which the user can switch to [ All | Favorites\n * | Frequently contacted ] can incorporate a button group to quickly filter out\n * items and display subsets of them.\n *\n * ## Layout\n *\n * The button groups are usually placed in top headers and action bars,\n * sometimes with other elements. Since the group items will always be rendered\n * in a row, you must make sure not to have too many buttons in the group.\n * Because if the container of your button group does not get enough space to\n * fit in all its buttons, they will have to truncate their text and may appear\n * very cramped together. Always think about how your button group will appear\n * on a small screen such as phones.\n * :::note\n * Button can contain text or icons, but not both simultaneously!\n * :::\n *\n * Within the group, icon buttons will all have the same width, while each text button\n * inherits its width from its content.\n *\n * @exampleComponent limel-example-button-group-icons\n * @exampleComponent limel-example-button-group\n * @exampleComponent limel-example-button-group-mix\n * @exampleComponent limel-example-button-group-badges\n * @exampleComponent limel-example-button-group-composite\n */\n@Component({\n    tag: 'limel-button-group',\n    shadow: true,\n    styleUrl: 'button-group.scss',\n})\nexport class ButtonGroup {\n    /**\n     * List of buttons for the group\n     */\n    @Prop()\n    public value: Button[] = [];\n\n    /**\n     * True if the button-group should be disabled\n     */\n    @Prop({ reflect: true })\n    public disabled: boolean = false;\n\n    /**\n     * Dispatched when a button is selected/deselected\n     */\n    @Event()\n    private change: EventEmitter<Button>;\n\n    @State()\n    private selectedButtonId: string;\n\n    private radioGroupName = createRandomString();\n\n    constructor() {\n        this.renderButton = this.renderButton.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.renderContent = this.renderContent.bind(this);\n    }\n\n    public componentWillLoad() {\n        this.setSelectedButton();\n    }\n\n    public render() {\n        const classes = {\n            'mdc-chip-set': true,\n            disabled: this.disabled,\n            'mdc-chip-set--choice': true,\n        };\n\n        return (\n            <div class={classes} role=\"grid\">\n                {this.value.map(this.renderButton)}\n            </div>\n        );\n    }\n\n    private renderButton(button: Button) {\n        // Prefix with 'b' because html IDs cannot start with a digit,\n        // and we need to differentiate from the ID on the limel-icon. /Ads\n        const buttonId = `b${button.id}`;\n\n        const classes = {\n            'mdc-chip': true,\n            'mdc-chip--selected': this.isButtonChecked(button),\n        };\n\n        return (\n            <div class={classes} role=\"row\">\n                <span role=\"gridcell\">\n                    <input\n                        type=\"radio\"\n                        name={this.radioGroupName}\n                        checked={this.isButtonChecked(button)}\n                        id={buttonId}\n                        onChange={this.onChange}\n                    />\n                    <label htmlFor={buttonId}>\n                        {this.renderContent(button)}\n                        {this.renderBadge(button)}\n                    </label>\n                </span>\n            </div>\n        );\n    }\n\n    private renderContent(button: Button) {\n        if (button.icon) {\n            return this.renderIcon(button);\n        }\n\n        return this.renderLabel(button);\n    }\n\n    private isButtonChecked(button: Button) {\n        return button.id === this.selectedButtonId;\n    }\n\n    private renderLabel(button: Button) {\n        return <span class=\"mdc-chip__text\">{button.title}</span>;\n    }\n\n    private renderIcon(button: Button) {\n        // Prefix with 'i' because html IDs cannot start with a digit,\n        // and we need to differentiate from the \"buttonId\". /Ads\n        const iconId = `i${button.id}`;\n\n        return [\n            <limel-icon\n                id={iconId}\n                class=\"mdc-chip__icon\"\n                aria-label={button.title}\n                name={button.icon}\n                size=\"small\"\n                badge={true}\n            />,\n            <limel-tooltip elementId={iconId} label={button.title} />,\n        ];\n    }\n\n    private renderBadge(button: Button) {\n        if (!button.badge) {\n            return;\n        }\n\n        return <limel-badge label={button.badge} />;\n    }\n\n    private onChange(event: Event) {\n        event.stopPropagation();\n        const target = event.target as HTMLInputElement;\n        // The ID is prefixed with `b` in the HTML, remember? /Ads\n        this.selectedButtonId = target.id.substr(1);\n        const button = this.value.find((item) => {\n            return item.id === this.selectedButtonId;\n        });\n        this.change.emit(button);\n    }\n\n    private setSelectedButton = () => {\n        this.selectedButtonId = this.value.find((button) => {\n            return button.selected;\n        })?.id;\n    };\n\n    @Watch('value')\n    protected valueChanged() {\n        this.setSelectedButton();\n    }\n}\n"],"mappings":"iGAAA,MAAMA,EAAiB,mjlB,MCqDVC,EAAW,MAwBpBC,YAAAC,G,yCAFQC,KAAAC,eAAiBC,IA4GjBF,KAAAG,kBAAoB,K,MACxBH,KAAKI,kBAAmBC,EAAAL,KAAKM,MAAMC,MAAMC,GAC9BA,EAAOC,cAChB,MAAAJ,SAAA,SAAAA,EAAEK,EAAE,E,WAhIe,G,cAME,M,gCAcvBV,KAAKW,aAAeX,KAAKW,aAAaC,KAAKZ,MAC3CA,KAAKa,SAAWb,KAAKa,SAASD,KAAKZ,MACnCA,KAAKc,cAAgBd,KAAKc,cAAcF,KAAKZ,K,CAG1Ce,oBACHf,KAAKG,mB,CAGFa,SACH,MAAMC,EAAU,CACZ,eAAgB,KAChBC,SAAUlB,KAAKkB,SACf,uBAAwB,MAG5B,OACIC,EAAA,OAAKC,MAAOH,EAASI,KAAK,QACrBrB,KAAKM,MAAMgB,IAAItB,KAAKW,c,CAKzBA,aAAaH,GAGjB,MAAMe,EAAW,IAAIf,EAAOE,KAE5B,MAAMO,EAAU,CACZ,WAAY,KACZ,qBAAsBjB,KAAKwB,gBAAgBhB,IAG/C,OACIW,EAAA,OAAKC,MAAOH,EAASI,KAAK,OACtBF,EAAA,QAAME,KAAK,YACPF,EAAA,SACIM,KAAK,QACLC,KAAM1B,KAAKC,eACX0B,QAAS3B,KAAKwB,gBAAgBhB,GAC9BE,GAAIa,EACJV,SAAUb,KAAKa,WAEnBM,EAAA,SAAOS,QAASL,GACXvB,KAAKc,cAAcN,GACnBR,KAAK6B,YAAYrB,K,CAO9BM,cAAcN,GAClB,GAAIA,EAAOsB,KAAM,CACb,OAAO9B,KAAK+B,WAAWvB,E,CAG3B,OAAOR,KAAKgC,YAAYxB,E,CAGpBgB,gBAAgBhB,GACpB,OAAOA,EAAOE,KAAOV,KAAKI,gB,CAGtB4B,YAAYxB,GAChB,OAAOW,EAAA,QAAMC,MAAM,kBAAkBZ,EAAOyB,M,CAGxCF,WAAWvB,GAGf,MAAM0B,EAAS,IAAI1B,EAAOE,KAE1B,MAAO,CACHS,EAAA,cACIT,GAAIwB,EACJd,MAAM,iBAAgB,aACVZ,EAAOyB,MACnBP,KAAMlB,EAAOsB,KACbK,KAAK,QACLC,MAAO,OAEXjB,EAAA,iBAAekB,UAAWH,EAAQI,MAAO9B,EAAOyB,Q,CAIhDJ,YAAYrB,GAChB,IAAKA,EAAO4B,MAAO,CACf,M,CAGJ,OAAOjB,EAAA,eAAamB,MAAO9B,EAAO4B,O,CAG9BvB,SAAS0B,GACbA,EAAMC,kBACN,MAAMC,EAASF,EAAME,OAErBzC,KAAKI,iBAAmBqC,EAAO/B,GAAGgC,OAAO,GACzC,MAAMlC,EAASR,KAAKM,MAAMC,MAAMoC,GACrBA,EAAKjC,KAAOV,KAAKI,mBAE5BJ,KAAK4C,OAAOC,KAAKrC,E,CAUXsC,eACN9C,KAAKG,mB"}