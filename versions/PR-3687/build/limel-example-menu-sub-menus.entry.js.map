{"version":3,"names":["MenuSubMenusExample","this","items","CascadingMenuItems","handleSelect","event","lastSelectedItem","detail","text","render","h","onSelect","label","slot","value"],"sources":["./src/components/menu/examples/menu-sub-menu.tsx"],"sourcesContent":["import {\n    MenuItem,\n    ListSeparator,\n    LimelMenuCustomEvent,\n} from '@limetech/lime-elements';\nimport { Component, State, h } from '@stencil/core';\nimport { CascadingMenuItems } from './item-constants';\n\n/**\n * Sub-menus\n * To have an enhanced navigation and provide a better organization of items,\n * you can incorporate sub-menus within the menu structure;\n * and create a so called \"Cascading menu\".\n * These sub-menus provide the user with an efficient way to access a\n * wide range of choices without overwhelming them with clutter or complexity.\n *\n * The main menu, often called the parent menu,\n * typically consists of top-level options that represent primary categories or options.\n * Sub-menus, on the other hand, are secondary or menus that are nested\n * beneath these primary options.\n *\n * Some of the benefits of creating tree-structure for the menus are:\n * - **Organized Information:** Sub-menus enable a clear and organized presentation of content,\n * making it easier for the user to find what they're looking for within a specific category.\n * - **Space Efficiency:** They save screen space by concealing secondary options until needed,\n * reducing visual clutter and making the interface cleaner and more user-friendly.\n * - **Scalability:** Sub-menus can accommodate a large number of choices or features\n * within a single parent menu, making them suitable for complex applications or websites.\n * - **Logical Hierarchy:** By structuring information hierarchically,\n * sub-menus help the user understand the relationships between various\n * options and navigate through the interface more intuitively.\n *\n * Our cascading menus are designed to be mobile-friendly.\n * This means that sub-menus are opened within the same menu surface,\n * instead of the classic way of sticking out on the side, as a secondary menu.\n * Thanks to a breadcrumbs component on the top, the user can easily navigate back\n * and forth within the menu structure.\n *\n * :::tip\n * It is also very easy to navigate the nested menu structure using the keyboard.\n *\n * - Using the <kbd>↓</kbd> & <kbd>↑</kbd> keys, the user can naturally\n * navigate within the presented menu,\n * - pressing the <kbd>→</kbd> key on a menu item that has sub-menu opens a nested menu,\n * - and pressing the <kbd>←</kbd> key takes the user back to the previous/parent menu.\n * :::\n *\n * @sourceFile item-constants.ts\n */\n@Component({\n    tag: 'limel-example-menu-sub-menus',\n    shadow: true,\n})\nexport class MenuSubMenusExample {\n    private items: Array<MenuItem | ListSeparator> = CascadingMenuItems;\n\n    @State()\n    private lastSelectedItem: string;\n\n    public render() {\n        return [\n            <limel-menu items={this.items} onSelect={this.handleSelect}>\n                <limel-button label=\"Menu\" slot=\"trigger\" />\n            </limel-menu>,\n            <limel-example-value\n                label=\"Last selected item\"\n                value={this.lastSelectedItem}\n            />,\n        ];\n    }\n\n    private handleSelect = (event: LimelMenuCustomEvent<MenuItem>) => {\n        this.lastSelectedItem = event.detail.text;\n    };\n}\n"],"mappings":"sGAqDaA,EAAmB,M,yBACpBC,KAAAC,MAAyCC,EAiBzCF,KAAAG,aAAgBC,IACpBJ,KAAKK,iBAAmBD,EAAME,OAAOC,IAAI,E,gCAbtCC,SACH,MAAO,CACHC,EAAA,cAAYR,MAAOD,KAAKC,MAAOS,SAAUV,KAAKG,cAC1CM,EAAA,gBAAcE,MAAM,OAAOC,KAAK,aAEpCH,EAAA,uBACIE,MAAM,qBACNE,MAAOb,KAAKK,mB"}