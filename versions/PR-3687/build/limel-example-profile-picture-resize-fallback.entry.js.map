{"version":3,"names":["profilePictureBasicCss","ProfilePictureResizeFallbackExample","this","options","width","height","fit","type","handleChange","event","value","detail","lower","_c","_b","_a","filename","toLowerCase","call","jpegExpected","gotJpeg","endsWith","hasError","undefined","render","h","Host","label","resize","onChange","renderCallout","style","margin","heading"],"sources":["./src/components/profile-picture/examples/profile-picture-basic.scss?tag=limel-example-profile-picture-resize-fallback&encapsulation=shadow","./src/components/profile-picture/examples/profile-picture-resize-fallback.tsx"],"sourcesContent":["limel-profile-picture {\n    width: 8rem;\n    height: 8rem;\n}\n","import { FileInfo, type ResizeOptions } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Client‑side resize, with graceful fallback for unsupported formats\n *\n * Resizing and compressing the image happens right in the browser, on the user's device,\n * before upload.\n *\n * Mostly, this works perfectly fine. However, it can lead to some edge-cases,\n * when a browser cannot support certain image formats. The most notable case is\n * `.heic` or `.heif` images, taken on iOS devices.\n *\n * On iPhones and iPads, all browsers use WebKit which can decode HEIC/HEIF.\n * Therefore using  `limel-profile-picture` for selecting a file from the Photos app,\n * or using the camera to take a photo works perfectly fine, and files can be converted\n * (e.g., to JPEG) and resized on the user's device, before uploading.\n *\n * However, selecting HEIC/HEIF files can become a problem off iOS/WebKit.\n * For instance a Mac user might try to upload an AirDropped (from iPhone) `.heic` file,\n * on their Chromium browser. At least at the time of writing this documentation,\n * Chrome, Edge, Firefox, Opera, Brave and Android browsers can’t\n * decode HEIC/HEIF yet. Therefore, the browser-side resizing/converting won't work.\n *\n * Therefore, if a user uploads a HEIC (e.g., AirDropped from an iPhone),\n * client-side preview/resize will fail unless you reject or handle it server‑side.\n *\n * :::note\n * Camera capture on iOS often returns JPEG; picking from the library may\n * return HEIC—plan to convert to JPEG for consistency.\n * :::\n *\n * This example demonstrates a user message strategy when client-side decode fails\n * (e.g., HEIC in non-WebKit browsers). To test this, select an image file with\n * HEIC format, on a desktop computer, using any browser except Safari.\n *\n * The component itself will emit the original file when resize fails;\n * and displays an inbuilt error message.\n *\n * But here we render an additional user message.\n *\n */\n@Component({\n    tag: 'limel-example-profile-picture-resize-fallback',\n    shadow: true,\n    styleUrl: 'profile-picture-basic.scss',\n})\nexport class ProfilePictureResizeFallbackExample {\n    @State()\n    private value?: FileInfo | string = undefined;\n\n    @State()\n    private hasError = false;\n\n    private options: ResizeOptions = {\n        width: 400,\n        height: 400,\n        fit: 'cover',\n        type: 'image/jpeg',\n    };\n\n    public render() {\n        return (\n            <Host>\n                <limel-profile-picture\n                    label=\"Profile picture\"\n                    value={this.value}\n                    resize={this.options}\n                    onChange={this.handleChange}\n                />\n                {this.renderCallout()}\n                <limel-example-value value={this.value} />\n            </Host>\n        );\n    }\n\n    private renderCallout() {\n        if (!this.hasError) {\n            return;\n        }\n\n        return [\n            <hr style={{ margin: '2rem 0' }} />,\n            <limel-callout aria-live=\"polite\" heading=\"Preview unavailable\">\n                Client-side conversion may have been skipped due to unsupported\n                format in this browser. The original file will be uploaded.\n            </limel-callout>,\n        ];\n    }\n\n    private handleChange = (event: CustomEvent<FileInfo | undefined>) => {\n        this.value = event.detail;\n        // Toggle error state if the emitted file was not converted to the expected type\n        if (this.value && typeof this.value !== 'string') {\n            const lower = this.value.filename?.toLowerCase?.() ?? '';\n            const jpegExpected = this.options.type === 'image/jpeg';\n            const gotJpeg = lower.endsWith('.jpg') || lower.endsWith('.jpeg');\n            this.hasError = jpegExpected && !gotJpeg;\n            return;\n        }\n        this.hasError = false;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAyB,gD,MC+ClBC,EAAmC,M,yBAOpCC,KAAAC,QAAyB,CAC7BC,MAAO,IACPC,OAAQ,IACRC,IAAK,QACLC,KAAM,cAgCFL,KAAAM,aAAgBC,I,UACpBP,KAAKQ,MAAQD,EAAME,OAEnB,GAAIT,KAAKQ,cAAgBR,KAAKQ,QAAU,SAAU,CAC9C,MAAME,GAAQC,GAAAC,GAAAC,EAAAb,KAAKQ,MAAMM,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,eAAW,MAAAH,SAAA,SAAAA,EAAAI,KAAAH,MAAI,MAAAF,SAAA,EAAAA,EAAI,GACtD,MAAMM,EAAejB,KAAKC,QAAQI,OAAS,aAC3C,MAAMa,EAAUR,EAAMS,SAAS,SAAWT,EAAMS,SAAS,SACzDnB,KAAKoB,SAAWH,IAAiBC,EACjC,M,CAEJlB,KAAKoB,SAAW,KAAK,E,WAnDWC,U,cAGjB,K,CASZC,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,yBACIE,MAAM,kBACNjB,MAAOR,KAAKQ,MACZkB,OAAQ1B,KAAKC,QACb0B,SAAU3B,KAAKM,eAElBN,KAAK4B,gBACNL,EAAA,uBAAqBf,MAAOR,KAAKQ,Q,CAKrCoB,gBACJ,IAAK5B,KAAKoB,SAAU,CAChB,M,CAGJ,MAAO,CACHG,EAAA,MAAIM,MAAO,CAAEC,OAAQ,YACrBP,EAAA,6BAAyB,SAASQ,QAAQ,uBAAqB,+H"}