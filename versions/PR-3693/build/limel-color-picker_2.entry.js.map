{"version":3,"names":["colorPickerCss","ColorPicker","this","shouldFocus","renderTooltip","readonly","tooltipLabel","h","label","elementId","renderPickerPalette","renderPickerTrigger","open","isOpen","openDirection","onClose","onPopoverClose","ref","setColorPickerPaletteElement","value","helperText","onChange","handleChange","required","palette","columnCount","paletteColumnCount","background","slot","style","role","onClick","openPopover","id","disabled","element","contentElement","event","stopPropagation","change","emit","detail","componentDidRender","_a","focus","render","Host","colors","brightnesses","getColorName","color","brightness","getSwatchValue","getSwatchName","createSwatch","name","colorPickerPaletteCss","Palette","renderSwatches","getPalette","map","renderSwatchButton","swatch","index","isSelected","classList","usesCustomPalette","class","title","key","handleSwatchClick","newValue","getColumnCount","entry","normalized","normalizeEntry","flatMap","b","length"],"sources":["./src/components/color-picker/color-picker.scss?tag=limel-color-picker&encapsulation=shadow","./src/components/color-picker/color-picker.tsx","./src/components/color-picker/swatches.ts","./src/components/color-picker/color-picker-palette.scss?tag=limel-color-picker-palette&encapsulation=shadow","./src/components/color-picker/color-picker-palette.tsx"],"sourcesContent":["@use '../../style/mixins';\n@use '../../style/internal/shared_input-select-picker';\n@import './partial-styles/lime-admin-hack';\n\n:host(limel-color-picker) {\n    display: grid;\n    gap: 0.25rem;\n    grid-template-columns: auto 1fr;\n}\n\nbutton[slot='trigger'] {\n    all: unset;\n    box-sizing: border-box;\n    position: relative;\n    isolation: isolate;\n    width: shared_input-select-picker.$height-of-mdc-text-field;\n    height: shared_input-select-picker.$height-of-mdc-text-field;\n\n    border-radius: 0.5rem;\n\n    &:not([disabled]):not([disabled='true']) {\n        @include mixins.is-elevated-clickable();\n        @include mixins.visualize-keyboard-focus();\n    }\n\n    &:before,\n    &:after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: inherit;\n    }\n\n    &:before {\n        @include mixins.add-chessboard-background();\n        z-index: 0;\n    }\n\n    &:after {\n        z-index: 1;\n        box-shadow: 0 0 0 0.25rem rgb(var(--contrast-100)) inset;\n        background: var(--background);\n    }\n}\n\n:host([readonly]:not([readonly='false'])) {\n    limel-input-field {\n        transform: translateX(\n                calc(\n                    #{shared_input-select-picker.$height-of-mdc-text-field} /\n                        4 * -1\n                )\n            )\n            translateY(\n                calc(\n                    #{shared_input-select-picker.$height-of-mdc-text-field} / 4\n                )\n            );\n    }\n\n    button[slot='trigger'] {\n        border: 1px solid rgba(var(--contrast-700), 0.65);\n    }\n}\n","import {\n    Component,\n    h,\n    Prop,\n    State,\n    Event,\n    EventEmitter,\n    Host,\n} from '@stencil/core';\nimport { FormComponent } from '../form/form.types';\nimport type { CustomColorSwatch } from './color-picker.types';\n\n/**\n * This component enables you to select a swatch from out color palette, simply\n * by clicking on it. You can then copy the css variable name of the chosen color\n * and use it where desired.\n *\n * The color picker can also show you a preview of any valid color name or color value.\n *\n * :::note\n * Make sure to read our [guidelines about usage of colors](/#/DesignGuidelines/color-system.md/) from our palette.\n * :::\n *\n * @exampleComponent limel-example-color-picker\n * @exampleComponent limel-example-color-picker-readonly\n * @exampleComponent limel-example-color-picker-custom-palette\n */\n@Component({\n    tag: 'limel-color-picker',\n    shadow: true,\n    styleUrl: 'color-picker.scss',\n})\nexport class ColorPicker implements FormComponent {\n    /**\n     * Name or code of the chosen color\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * The label of the input field\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Helper text of the input field\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Displayed as tooltips when picker is hovered.\n     */\n    @Prop({ reflect: true })\n    public tooltipLabel: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * Set to `true` if a value is readonly. This makes the component un-interactive.\n     */\n    @Prop({ reflect: true })\n    public readonly: boolean;\n\n    /**\n     * An array of either color value strings, or objects with a `name` and a `value`,\n     * which replaces the default palette. Any valid CSS color format is accepted as value\n     * (HEX, RGB/A, HSL, HWB, color-mix(), named colors, etc.).\n     */\n    @Prop()\n    public palette?: Array<string | CustomColorSwatch>;\n\n    /**\n     * Defines the number of columns in the color swatch grid.\n     * If not provided, it will default to the number of colors in the palette.\n     */\n    @Prop({ reflect: true })\n    public paletteColumnCount?: number;\n\n    /**\n     * Emits chosen value to the parent component\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    @State()\n    private isOpen = false;\n\n    public componentDidRender() {\n        if (this.shouldFocus && this.isOpen) {\n            this.shouldFocus = false;\n            this.contentElement?.focus();\n        }\n    }\n\n    private contentElement?: HTMLLimelColorPickerPaletteElement;\n\n    private shouldFocus = false;\n\n    public render() {\n        return (\n            <Host>\n                {this.renderTooltip()}\n                {this.renderPickerPalette()}\n                <limel-input-field\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    required={this.required}\n                    readonly={this.readonly}\n                />\n            </Host>\n        );\n    }\n    private renderTooltip = () => {\n        if (!this.readonly && this.tooltipLabel) {\n            return (\n                <limel-tooltip\n                    label={this.tooltipLabel}\n                    elementId=\"tooltip-button\"\n                />\n            );\n        }\n    };\n\n    private renderPickerPalette = () => {\n        if (this.readonly) {\n            return this.renderPickerTrigger();\n        }\n\n        return (\n            <limel-popover\n                open={this.isOpen}\n                openDirection=\"bottom-start\"\n                onClose={this.onPopoverClose}\n            >\n                {this.renderPickerTrigger()}\n                <limel-color-picker-palette\n                    ref={this.setColorPickerPaletteElement}\n                    value={this.value}\n                    label={this.label}\n                    helperText={this.helperText}\n                    onChange={this.handleChange}\n                    required={this.required}\n                    palette={this.palette as any}\n                    columnCount={this.paletteColumnCount}\n                />\n            </limel-popover>\n        );\n    };\n\n    private renderPickerTrigger = () => {\n        const background = this.value ? { '--background': this.value } : {};\n\n        return (\n            <button\n                slot=\"trigger\"\n                style={background}\n                role=\"button\"\n                onClick={this.openPopover}\n                id=\"tooltip-button\"\n                disabled={this.readonly}\n            />\n        );\n    };\n\n    private setColorPickerPaletteElement = (\n        element: HTMLLimelColorPickerPaletteElement\n    ) => {\n        this.contentElement = element;\n    };\n\n    private openPopover = (event: MouseEvent) => {\n        event.stopPropagation();\n        this.isOpen = true;\n\n        this.shouldFocus = this.isOpen;\n    };\n\n    private onPopoverClose = (event: CustomEvent) => {\n        event.stopPropagation();\n        this.isOpen = false;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.change.emit(event.detail);\n    };\n}\n","export const colors = [\n    'red',\n    'pink',\n    'magenta',\n    'purple',\n    'violet',\n    'indigo',\n    'blue',\n    'sky',\n    'cyan',\n    'teal',\n    'green',\n    'lime',\n    'grass',\n    'yellow',\n    'amber',\n    'orange',\n    'coral',\n    'brown',\n    'gray',\n    'glaucous',\n];\n\nexport const brightnesses = ['lighter', 'light', 'default', 'dark', 'darker'];\n\nexport interface Swatch {\n    name: string;\n    value: string;\n    disabled?: boolean;\n}\n\n/**\n * Returns the CSS variable name holding the RGB triplet for the color & brightness.\n *\n * @param color the base color identifier (e.g. \"red\", \"blue\")\n * @param brightness the brightness variant (e.g. \"light\", \"default\")\n * @returns CSS variable name in the form --color-{color}-{brightness}\n */\nexport function getColorName(color: string, brightness: string): string {\n    return `--color-${color}-${brightness}`;\n}\n\n/**\n * Swatch value: inline CSS color value in the required format: rgb(var(--color-*-*))\n * @param color\n * @param brightness\n */\nexport function getSwatchValue(color: string, brightness: string): string {\n    return `rgb(var(${getColorName(color, brightness)}))`;\n}\n\n/**\n * Swatch name: human readable label like \"red default\"\n * @param color\n * @param brightness\n */\nexport function getSwatchName(color: string, brightness: string): string {\n    return `${color} ${brightness}`;\n}\n\n/**\n * Convenience factory returning both name & value.\n * @param color\n * @param brightness\n */\nexport function createSwatch(color: string, brightness: string): Swatch {\n    return {\n        name: getSwatchName(color, brightness),\n        value: getSwatchValue(color, brightness),\n    };\n}\nexport function getCssColor(color: string, brightness: string): string {\n    return getSwatchValue(color, brightness);\n}\n","@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n@import './partial-styles/lime-admin-hack';\n\n:host(limel-color-picker-palette) {\n    --limel-color-palette-gap: 0.25rem;\n    --limel-color-palette-min-width: 8rem;\n    box-sizing: border-box;\n\n    border-radius: 0.75rem; // is like popover's default `--popover-border-radius`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    padding: 0.75rem;\n}\n\n*,\n*:before,\n:after {\n    box-sizing: border-box;\n}\n\n.color-picker-palette {\n    display: grid;\n    gap: var(--limel-color-palette-gap);\n    grid-template-columns: repeat(var(--color-picker-column-count), 1fr);\n    width: 100%;\n    max-width: 50rem;\n    min-width: var(--limel-color-palette-min-width);\n}\n\n.chosen-color-name {\n    display: flex;\n    gap: 0.5rem;\n}\n\nlimel-input-field {\n    flex-grow: 1;\n    width: min-content;\n}\n\n.chosen-color-preview {\n    flex-shrink: 0;\n    isolation: isolate;\n\n    position: relative;\n    width: shared_input-select-picker.$height-of-mdc-text-field;\n    height: shared_input-select-picker.$height-of-mdc-text-field;\n\n    border: 1px solid rgba(var(--contrast-700), 0.65);\n    border-radius: 50%;\n\n    &:before,\n    &:after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: inherit;\n    }\n\n    &:before {\n        @include mixins.add-chessboard-background();\n        z-index: 0;\n    }\n\n    &:after {\n        background: var(--background);\n        z-index: 1;\n    }\n}\n\nbutton.swatch {\n    all: unset;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    max-width: 3rem;\n    min-width: max(\n        2rem,\n        100% / var(--color-picker-column-count) -\n            (var(--color-picker-column-count) - 1) *\n            var(--limel-color-palette-gap)\n    );\n    aspect-ratio: 1;\n    border-radius: 0.1875rem;\n\n    @include mixins.visualize-keyboard-focus();\n\n    // Since the background color will be overwritten by the mixin,\n    // we need to set it explicitly here and repeated in the mixin.\n    background-color: var(--limel-color-picker-swatch-color);\n    &:not([disabled]) {\n        @include mixins.is-flat-clickable(\n            $background-color: var(--limel-color-picker-swatch-color),\n            $background-color--hovered: var(--limel-color-picker-swatch-color)\n        );\n    }\n\n    &:focus-visible {\n        box-shadow:\n            var(--shadow-depth-8-focused),\n            0 0 0 0.125rem rgb(var(--contrast-100)) inset;\n    }\n\n    &[disabled] {\n        cursor: not-allowed;\n        box-shadow: 0 0 0 0.125rem rgb(var(--contrast-100), 0.6) inset;\n\n        &:after {\n            content: '';\n            position: absolute;\n            inset: 0;\n            margin: auto;\n            width: 0.125rem;\n            height: 100%;\n\n            opacity: 0.6;\n            rotate: 45deg;\n            border-radius: 1rem;\n            background-color: rgb(var(--contrast-100));\n        }\n    }\n}\n\nbutton.swatch--selected {\n    box-shadow: var(--button-shadow-inset);\n\n    border-radius: 50%;\n}\n","import { Component, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { FormComponent } from '../form/form.types';\nimport { brightnesses, colors, createSwatch, Swatch } from './swatches';\nimport type { CustomPalette, CustomColorSwatch } from './color-picker.types';\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-color-picker-palette',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'color-picker-palette.scss',\n})\nexport class Palette implements FormComponent {\n    /**\n     * Color value that is manually typed by the user\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Label of the input field\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * Helper text of the input field\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * Set to `true` if a value is required\n     */\n    @Prop({ reflect: true })\n    public required: boolean;\n\n    /**\n     * Defines the number of columns in the color swatch grid.\n     * If not provided, it will default to the number of colors in the palette.\n     */\n    @Prop({ reflect: true })\n    public columnCount?: number;\n\n    /**\n     * Custom color palette to use instead of Lime palette. Internal prop passed from parent.\n     */\n    @Prop()\n    public palette?: CustomPalette;\n\n    /**\n     * Emits chosen value to the parent component\n     */\n    @Event()\n    public change: EventEmitter<string>;\n\n    public render() {\n        const background = this.value ? { '--background': this.value } : {};\n\n        return [\n            <div\n                class=\"color-picker-palette\"\n                style={{\n                    '--color-picker-column-count': `${this.getColumnCount()}`,\n                }}\n            >\n                {this.renderSwatches()}\n            </div>,\n            <div class=\"chosen-color-name\">\n                <limel-input-field\n                    label={this.label}\n                    helperText={this.helperText}\n                    value={this.value}\n                    onChange={this.handleChange}\n                    required={this.required}\n                />\n                <div class=\"chosen-color-preview\" style={background} />\n            </div>,\n        ];\n    }\n\n    private renderSwatches = () => {\n        return this.getPalette().map(this.renderSwatchButton);\n    };\n\n    private getPalette(): Swatch[] {\n        if (this.usesCustomPalette()) {\n            return (this.palette || []).map((entry) => {\n                const normalized = this.normalizeEntry(entry);\n                return {\n                    name: normalized.name || normalized.value,\n                    value: normalized.value,\n                    disabled: normalized.disabled,\n                };\n            });\n        }\n\n        // Order by brightness first, then by color.\n        return brightnesses.flatMap((b) =>\n            colors.map((color) => createSwatch(color, b))\n        );\n    }\n\n    private renderSwatchButton = (swatch: Swatch, index: number) => {\n        const isSelected = this.value === swatch.value;\n        const classList = {\n            swatch: true,\n            'swatch--selected': isSelected,\n            'custom-swatch': this.usesCustomPalette(),\n        };\n\n        return (\n            <button\n                class={classList}\n                style={{ '--limel-color-picker-swatch-color': swatch.value }}\n                title={swatch.name}\n                disabled={swatch.disabled}\n                data-index={index}\n                key={index}\n                onClick={this.handleSwatchClick(swatch.value)}\n            />\n        );\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        event.stopPropagation();\n        this.change.emit(event.detail);\n    };\n\n    private handleSwatchClick = (value: string) => (event: MouseEvent) => {\n        event.stopPropagation();\n        const newValue = this.value === value ? '' : value;\n        this.change.emit(newValue);\n    };\n\n    private normalizeEntry(\n        entry: string | CustomColorSwatch\n    ): CustomColorSwatch {\n        if (typeof entry === 'string') {\n            return { value: entry };\n        }\n        return entry;\n    }\n\n    private usesCustomPalette(): boolean {\n        return this.palette?.length > 0;\n    }\n\n    private getColumnCount(): number {\n        if (this.columnCount > 0) {\n            return this.columnCount;\n        }\n\n        // Default palette: fixed 20 columns (one per base color)\n        if (!this.usesCustomPalette()) {\n            return 20;\n        }\n\n        // Custom palette: span all provided swatches unless empty\n        const palette = this.getPalette();\n        return palette.length > 0 ? palette.length : 1;\n    }\n}\n"],"mappings":"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"}