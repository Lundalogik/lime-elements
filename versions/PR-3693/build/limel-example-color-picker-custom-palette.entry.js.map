{"version":3,"names":["ColorPickerCustomPaletteExample","this","customPalette","name","value","disabled","onChange","event","detail","setPaletteColumnCount","stopPropagation","paletteColumnCount","undefined","render","h","Host","palette","tooltipLabel","label","style","checked"],"sources":["./src/components/color-picker/examples/color-picker-custom-palette.tsx"],"sourcesContent":["import { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Custom palette example\n * You can easily provide your own array of colors, to be rendered\n * as a palette of swatches. To improve accessibility, we recommend that you\n * also provide a name for each color, which will be used as tooltip\n * and screen reader text.\n *\n * :::note\n * The number of provided colors will determine the number of columns\n * in the palette.\n *\n * However, this could become problematic and result in a grid layout\n * with many tiny swatches, if the provided array includes many colors.\n * If you want to control the number of columns, you can\n * use the `paletteColumnCount` prop.\n * :::\n */\n@Component({\n    tag: 'limel-example-color-picker-custom-palette',\n    shadow: true,\n})\nexport class ColorPickerCustomPaletteExample {\n    @State()\n    private value: string;\n\n    @State()\n    private paletteColumnCount: number;\n\n    private customPalette = [\n        { name: 'Brand Primary', value: '#0055ff' },\n        { name: 'Brand Secondary', value: '#ff0099' },\n        '#ffbf00',\n        'rebeccapurple',\n        { name: 'Deprecated Green', value: 'hsl(150 60% 45%)', disabled: true },\n        { name: 'Soft Gray', value: 'rgb(120 130 140 / 60%)' },\n    ];\n\n    public render() {\n        return (\n            <Host>\n                <limel-color-picker\n                    value={this.value}\n                    palette={this.customPalette}\n                    tooltipLabel=\"Click to pick a custom palette color\"\n                    label=\"Brand color\"\n                    onChange={this.onChange}\n                    paletteColumnCount={this.paletteColumnCount}\n                />\n                <limel-example-controls\n                    style={{\n                        '--example-controls-column-layout': 'auto-fit',\n                    }}\n                >\n                    <limel-checkbox\n                        checked={this.paletteColumnCount === 3}\n                        label=\"Set `paletteColumnCount` to 3\"\n                        onChange={this.setPaletteColumnCount}\n                    />\n                </limel-example-controls>\n            </Host>\n        );\n    }\n\n    private onChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private setPaletteColumnCount = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.paletteColumnCount = event.detail ? 3 : undefined;\n    };\n}\n"],"mappings":"4DAuBaA,EAA+B,M,yBAOhCC,KAAAC,cAAgB,CACpB,CAAEC,KAAM,gBAAiBC,MAAO,WAChC,CAAED,KAAM,kBAAmBC,MAAO,WAClC,UACA,gBACA,CAAED,KAAM,mBAAoBC,MAAO,mBAAoBC,SAAU,MACjE,CAAEF,KAAM,YAAaC,MAAO,2BA6BxBH,KAAAK,SAAYC,IAChBN,KAAKG,MAAQG,EAAMC,MAAM,EAGrBP,KAAAQ,sBAAyBF,IAC7BA,EAAMG,kBACNT,KAAKU,mBAAqBJ,EAAMC,OAAS,EAAII,SAAS,E,uDAhCnDC,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,sBACIV,MAAOH,KAAKG,MACZY,QAASf,KAAKC,cACde,aAAa,uCACbC,MAAM,cACNZ,SAAUL,KAAKK,SACfK,mBAAoBV,KAAKU,qBAE7BG,EAAA,0BACIK,MAAO,CACH,mCAAoC,aAGxCL,EAAA,kBACIM,QAASnB,KAAKU,qBAAuB,EACrCO,MAAM,gCACNZ,SAAUL,KAAKQ,yB"}