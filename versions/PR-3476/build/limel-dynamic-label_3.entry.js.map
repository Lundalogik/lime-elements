{"version":3,"names":["dynamicLabelCss","DynamicLabel","render","label","this","labels","find","l","value","renderIcon","_a","icon","defaultLabel","renderLabel","_b","text","iconName","getIconName","iconColor","iconBackgroundColor","color","backgroundColor","iconProps","role","name","style","h","Object","assign","helperLineCss","HelperLine","hasContent","maxLength","helperText","length","renderHelperText","class","id","helperTextId","renderCharacterCounter","counter","Host","tabIndex","invalid","display","RadioButtonTemplate","props","disabled","type","checked","onChange","htmlFor","ListRenderer","constructor","defaultConfig","isOpen","badgeIcons","getIndexForWhichToApplyTabIndex","items","result","i","max","item","selected","undefined","renderListItem","index","renderTextForSeparator","includes","config","renderVariantListItem","classNames","hasPrimaryComponent","attributes","applyTabIndexToItemAtIndex","tabindex","renderPicture","getPrimaryComponent","renderText","twoLines","avatarList","renderDivider","renderActionMenu","actions","primaryComponent","isSimpleItem","secondaryText","getIconColor","badge","size","iconSize","classes","openDirection","slot","itemTemplate","CheckboxTemplate","renderVariantListItemContent","hasIcons","some","selectableListTypes","selectable","commandKey","map","PrimaryComponent","image","isEmpty","src","alt","loading","listCss","ACTION_EVENT","listStrings","List","listRenderer","setup","setupList","setupListeners","mdcList","teardown","element","shadowRoot","querySelector","MDCList","hasTypeahead","unlisten","handleAction","multiple","listen","singleSelection","destroy","event","handleSingleSelect","detail","handleMultiSelect","listItems","filter","isListItem","selectedItem","interactedItem","selectedIndex","change","emit","interact","selectedItems","listIndex","connectedCallback","disconnectedCallback","componentDidLoad","triggerIconColorWarning","maxLinesSecondaryText","toFixed","html","handleType","itemsChanged","setTimeout","indexOf","findIndex","initializeListType","console","warn"],"sources":["./src/components/dynamic-label/dynamic-label.scss?tag=limel-dynamic-label&encapsulation=shadow","./src/components/dynamic-label/dynamic-label.tsx","./src/components/helper-line/helper-line.scss?tag=limel-helper-line&encapsulation=shadow","./src/components/helper-line/helper-line.tsx","./src/components/list/radio-button/radio-button.template.tsx","./src/components/list/list-renderer.tsx","./src/components/list/list.scss?tag=limel-list&encapsulation=shadow","./src/components/list/list.tsx"],"sourcesContent":["* {\n    box-sizing: border-box;\n    min-width: 0;\n}\n\n:host(limel-dynamic-label) {\n    --limel-dynamic-label-min-height: 1.75rem;\n    display: flex;\n    gap: 0.5rem;\n    align-items: flex-start;\n    border-radius: 0.5rem;\n    min-width: 0;\n}\n\nlimel-icon {\n    --limel-icon-svg-margin: 0.125rem;\n    border-radius: 0.25rem;\n    flex-shrink: 0;\n    width: var(--limel-dynamic-label-min-height);\n    color: rgb(\n        var(--contrast-900)\n    ); // The default `false` color. Will be overwritten by `Icon`\n}\n\nlabel {\n    flex-grow: 1;\n    font-size: 0.8125rem; // `13px`, Like Checkbox & Switch\n    line-height: normal;\n    color: var(--mdc-theme-on-surface);\n    padding-top: 0.375rem;\n}\n","import { getIconName } from '../icon/get-icon-props';\nimport { Component, Prop, h } from '@stencil/core';\nimport { Label, LabelValue } from './label.types';\nimport { Icon } from '../../interface';\n\n/**\n * This components displays a different label depending on the current given\n * value. A label can consist of a text and an optional icon. If no matching\n * label is found among the given `labels`, the `defaultLabel` will be displayed.\n *\n * One use case of the component is to enhance the visualization of a `boolean`\n * field like a checkbox or switch in a `readonly` state.\n *\n * The reason we offer this component is that the default styling\n * of the Checkbox or Toggle switch in the `readonly` state may not always\n * provide the best way of _visualizing information_, potentially leading to\n * confusion and negatively affecting the end-users' experience.\n *\n * @exampleComponent limel-example-dynamic-label\n * @exampleComponent limel-example-dynamic-label-readonly-boolean\n * @beta\n */\n@Component({\n    tag: 'limel-dynamic-label',\n    shadow: true,\n    styleUrl: 'dynamic-label.scss',\n})\nexport class DynamicLabel {\n    /**\n     * The current value of the component which is used to match with the given\n     * `labels` to determine what label to display.\n     *\n     * If not matching label is found, the `defaultLabel` is displayed.\n     */\n    @Prop()\n    public value: LabelValue;\n\n    /**\n     * The label to display when no matching value is found in the `labels`\n     * array. This is a fallback label that ensures there's always a label\n     * displayed for the component.\n     */\n    @Prop({ reflect: true })\n    public defaultLabel: Omit<Label, 'value'> = {};\n\n    /**\n     * A list of available labels. Each label has a corresponding value that\n     * will be matched with the current `value` of the component to determine\n     * what label to display.\n     */\n    @Prop()\n    public labels: Label[] = [];\n\n    public render() {\n        const label = this.labels.find((l) => l.value === this.value);\n\n        return [\n            this.renderIcon(label?.icon ?? this.defaultLabel.icon),\n            this.renderLabel(label?.text ?? this.defaultLabel.text),\n        ];\n    }\n\n    private renderIcon(icon?: string | Icon) {\n        const iconName = getIconName(icon);\n        if (!iconName) {\n            return;\n        }\n\n        let iconColor: string | undefined;\n        let iconBackgroundColor: string | undefined;\n\n        if (typeof icon === 'object') {\n            iconColor = icon.color;\n            iconBackgroundColor = icon.backgroundColor;\n        }\n\n        const iconProps = {\n            role: 'presentation',\n            name: iconName,\n            style: {\n                color: iconColor,\n                'background-color': iconBackgroundColor,\n            },\n        };\n\n        return <limel-icon {...iconProps} />;\n    }\n\n    private renderLabel(label: string = '') {\n        return <label>{label}</label>;\n    }\n}\n",":host(limel-helper-line) {\n    transition: opacity 0.2s ease;\n\n    box-sizing: border-box;\n    display: grid;\n\n    min-width: 0; // prevents overflowing, if component is placed in flex containers\n\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-size: 0.6875rem;\n    line-height: normal;\n\n    color: rgb(var(--contrast-1200));\n}\n\ndiv {\n    display: flex;\n    justify-content: space-between;\n    gap: 0.75rem;\n    overflow: hidden;\n    padding: 0 1rem;\n}\n\n:host(limel-helper-line.invalid) {\n    --limel-h-l-grid-template-rows-transition-speed: 0.46s;\n    --limel-h-l-grid-template-rows: 1fr;\n\n    .helper-text {\n        color: var(--mdc-theme-error);\n    }\n}\n\n.counter {\n    flex-shrink: 0;\n    margin-left: auto;\n}\n\n.helper-text,\n.counter {\n    padding-top: 0.125rem;\n}\n\n// This animates height of the helper line, from `0` to `auto`.\n// To get this animation effect, the consumer component should\n// add `hide` classed accordingly.\n:host(limel-helper-line) {\n    transition: grid-template-rows\n        var(--limel-h-l-grid-template-rows-transition-speed, 0.46s)\n        cubic-bezier(1, 0.09, 0, 0.89);\n    grid-template-rows: var(--limel-h-l-grid-template-rows, 1fr);\n}\n\n:host(limel-helper-line.hide) {\n    --limel-h-l-grid-template-rows-transition-speed: 0.3s;\n    --limel-h-l-grid-template-rows: 0fr;\n}\n// End: animating height\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n/**\n * This is an internal and private component that many input fields\n * use to display a helper text, along with a character counter below the\n * input field.\n *\n * We created this to keep the visual styles the same everywhere\n * and to avoid importing styles separately.\n *\n * Also this enables us to open the helper line in limel-portal,\n * more easily without having to send the styles to the portal.\n *\n * @exampleComponent limel-example-helper-line\n * @exampleComponent limel-example-helper-line-invalid\n * @exampleComponent limel-example-helper-line-long-text\n * @exampleComponent limel-example-helper-line-long-text-no-counter\n * @exampleComponent limel-example-helper-line-character-counter\n * @exampleComponent limel-example-helper-line-empty\n * @exampleComponent limel-example-helper-line-animation\n * @private\n */\n@Component({\n    tag: 'limel-helper-line',\n    shadow: true,\n    styleUrl: 'helper-line.scss',\n})\nexport class HelperLine {\n    /**\n     * The helper text that is displayed on the left side.\n     */\n    @Prop({ reflect: true })\n    public helperText?: string;\n\n    /**\n     * Length of the current input value, coming from the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public length?: number;\n\n    /**\n     * Maximum length of the characters, defined on the parent component.\n     * Used in the character counter section on the right side.\n     */\n    @Prop({ reflect: true })\n    public maxLength?: number;\n\n    /**\n     * Turns `true`, when the parent component is invalid.\n     * For example, when the parent component is `required` but is left empty.\n     * Or when the input format is invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid?: boolean = false;\n\n    /**\n     * Used by `aria-controls` and `aria-describedby` in the parent component.\n     */\n    @Prop({ reflect: true })\n    public helperTextId?: string;\n\n    public render() {\n        return (\n            <Host\n                tabIndex={-1}\n                class={{\n                    invalid: this.invalid,\n                }}\n                style={!this.hasContent() ? { display: 'none' } : {}}\n                aria-hidden={!this.hasContent()}\n            >\n                <div>\n                    {this.renderHelperText()}\n                    {this.renderCharacterCounter()}\n                </div>\n            </Host>\n        );\n    }\n\n    private hasContent = () => {\n        return !!(\n            this.maxLength > 0 ||\n            (this.helperText && this.helperText.length > 0)\n        );\n    };\n\n    private renderHelperText = () => {\n        if (!this.helperText) {\n            return;\n        }\n\n        return (\n            <span class=\"helper-text\" id={this.helperTextId}>\n                {this.helperText}\n            </span>\n        );\n    };\n\n    private renderCharacterCounter = () => {\n        const counter = `${this.length} / ${this.maxLength}`;\n\n        if (!this.maxLength) {\n            return;\n        }\n\n        return <span class=\"counter\">{counter}</span>;\n    };\n}\n","import { FunctionalComponent, h } from '@stencil/core';\n\ninterface RadioButtonTemplateProps {\n    disabled?: boolean;\n    id: string;\n    checked?: boolean;\n    onChange?: (event: Event) => void;\n    label?: string;\n}\n\nexport const RadioButtonTemplate: FunctionalComponent<\n    RadioButtonTemplateProps\n> = (props) => {\n    return (\n        <div class=\"mdc-form-field\">\n            <div\n                class={`\n                        mdc-radio\n                        ${props.disabled ? 'mdc-radio--disabled' : ''}\n                    `}\n            >\n                <input\n                    class=\"mdc-radio__native-control\"\n                    type=\"radio\"\n                    id={props.id}\n                    checked={props.checked}\n                    disabled={props.disabled}\n                    onChange={props.onChange}\n                />\n                <div class=\"mdc-radio__background\">\n                    <div class=\"mdc-radio__outer-circle\" />\n                    <div class=\"mdc-radio__inner-circle\" />\n                </div>\n            </div>\n            <label\n                class={`${props.disabled ? 'disabled' : ''}`}\n                htmlFor={props.id}\n            >\n                {props.label}\n            </label>\n        </div>\n    );\n};\n","import { ListItem } from './list-item.types';\nimport { ListSeparator } from '../../global/shared-types/separator.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { h } from '@stencil/core';\nimport { CheckboxTemplate } from '../checkbox/checkbox.template';\nimport { ListRendererConfig } from './list-renderer-config';\nimport { RadioButtonTemplate } from './radio-button/radio-button.template';\nimport { getIconColor, getIconName } from '../icon/get-icon-props';\nimport { isEmpty } from 'lodash-es';\n\nexport class ListRenderer {\n    private defaultConfig: ListRendererConfig = {\n        isOpen: true,\n        badgeIcons: false,\n    };\n\n    private config: ListRendererConfig;\n\n    private hasIcons: boolean;\n    private twoLines: boolean;\n    private avatarList: boolean;\n    private commandKey: boolean;\n\n    private applyTabIndexToItemAtIndex: number;\n\n    public render(\n        items: Array<ListItem | ListSeparator>,\n        config: ListRendererConfig = {},\n    ) {\n        items = items || [];\n        this.config = { ...this.defaultConfig, ...config };\n\n        this.twoLines = items.some((item) => {\n            return 'secondaryText' in item && !!item.secondaryText;\n        });\n\n        this.hasIcons = items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        this.avatarList = this.config.badgeIcons && this.hasIcons;\n        const selectableListTypes = ['selectable', 'radio', 'checkbox'];\n\n        let role;\n        switch (this.config.type) {\n            case 'checkbox':\n                role = 'group';\n                break;\n            case 'radio':\n                role = 'radiogroup';\n                break;\n            default:\n                role = 'listbox';\n        }\n\n        this.applyTabIndexToItemAtIndex =\n            this.getIndexForWhichToApplyTabIndex(items);\n\n        const classNames = {\n            'mdc-deprecated-list': true,\n            'mdc-deprecated-list--two-line': this.twoLines,\n            selectable: selectableListTypes.includes(this.config.type),\n            'mdc-deprecated-list--avatar-list': this.avatarList,\n            'list--compact':\n                this.twoLines &&\n                this.commandKey &&\n                ['small', 'x-small'].includes(this.config.iconSize),\n        };\n\n        return (\n            <ul class={classNames} role={role} aria-orientation=\"vertical\">\n                {items.map(this.renderListItem)}\n            </ul>\n        );\n    }\n\n    /**\n     * Determine which ListItem should have the `tab-index` attribute set,\n     * and return the index at which that ListItem is located in `items`.\n     * Returns `undefined` if no item should have the attribute set.\n     * See https://github.com/material-components/material-components-web/tree/e66a43a75fef4f9179e24856649518e15e279a04/packages/mdc-list#accessibility\n     *\n     * @param items - the items of the list, including any `ListSeparator`:s\n     * @returns the index as per the description\n     */\n    private getIndexForWhichToApplyTabIndex = (\n        items: Array<ListItem | ListSeparator>,\n    ) => {\n        let result;\n        for (let i = 0, max = items.length; i < max; i += 1) {\n            if ('separator' in items[i]) {\n                // Ignore ListSeparator\n            } else {\n                const item = items[i] as ListItem<any>;\n                if (item.selected) {\n                    result = i;\n                    break;\n                }\n\n                if (result === undefined && !item.disabled) {\n                    result = i;\n                    // Do NOT break, as any later item with\n                    // `selected=true` should get the tab-index instead!\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Render a single list item\n     *\n     * @param item - the item to render\n     * @param index - the index the item had in the `items` array\n     * @returns the list item\n     */\n    private renderListItem = (\n        item: ListItem | ListSeparator,\n        index: number,\n    ) => {\n        if ('separator' in item) {\n            return (\n                <li class=\"mdc-deprecated-list-divider\" role=\"separator\">\n                    {this.renderTextForSeparator(item)}\n                    <div class=\"limel-list-divider-line\" />\n                </li>\n            );\n        }\n\n        if (['radio', 'checkbox'].includes(this.config.type)) {\n            return this.renderVariantListItem(this.config, item, index);\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item--selected': item.selected,\n            'has-primary-component': this.hasPrimaryComponent(item),\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                aria-selected={item.selected ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {this.renderIcon(this.config, item)}\n                {this.renderPicture(item)}\n                {this.getPrimaryComponent(item)}\n                {this.renderText(item)}\n                {this.twoLines && this.avatarList ? this.renderDivider() : null}\n                {this.renderActionMenu(item.actions)}\n            </li>\n        );\n    };\n\n    private renderTextForSeparator = (item: ListSeparator) => {\n        if ('text' in item) {\n            return <h2 class=\"limel-list-divider-title\">{item.text}</h2>;\n        }\n    };\n\n    private getPrimaryComponent(item: ListItem): Element {\n        if (!this.hasPrimaryComponent(item)) {\n            return;\n        }\n\n        const PrimaryComponent = item.primaryComponent.name;\n        const props = item.primaryComponent.props;\n\n        return <PrimaryComponent {...props} />;\n    }\n\n    private hasPrimaryComponent = (item: ListItem) => {\n        return !!item?.primaryComponent?.name;\n    };\n\n    /**\n     * Render the text of the list item\n     *\n     * @param item - the list item\n     * @returns the text for the list item\n     */\n    private renderText = (item: ListItem) => {\n        if (this.isSimpleItem(item)) {\n            return (\n                <span class=\"mdc-deprecated-list-item__text\">{item.text}</span>\n            );\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__text\">\n                <div class=\"mdc-deprecated-list-item__primary-command-text\">\n                    <div class=\"mdc-deprecated-list-item__primary-text\">\n                        {item.text}\n                    </div>\n                </div>\n                <div class=\"mdc-deprecated-list-item__secondary-text\">\n                    {item.secondaryText}\n                </div>\n            </div>\n        );\n    };\n\n    private isSimpleItem = (item: ListItem): boolean => {\n        return !('secondaryText' in item);\n    };\n\n    /**\n     * Render an icon for a list item\n     *\n     * @param config - the config object, passed on from the `renderListItem` function\n     * @param item - the list item\n     * @returns the icon element\n     */\n    private renderIcon = (config: ListRendererConfig, item: ListItem) => {\n        const style: any = {};\n        const name = getIconName(item.icon);\n        if (!name) {\n            return;\n        }\n\n        // eslint-disable-next-line sonarjs/deprecation\n        const color = getIconColor(item.icon, item.iconColor);\n\n        if (color) {\n            if (config.badgeIcons) {\n                style['--icon-background-color'] = color;\n            } else {\n                style.color = color;\n            }\n        }\n\n        return (\n            <limel-icon\n                badge={config.badgeIcons}\n                class=\"mdc-deprecated-list-item__graphic\"\n                name={name}\n                style={style}\n                size={config.iconSize}\n            />\n        );\n    };\n\n    private renderPicture(item: ListItem) {\n        const image = item.image;\n        if (isEmpty(image)) {\n            return;\n        }\n\n        return <img src={image.src} alt={image.alt} loading=\"lazy\" />;\n    }\n\n    private renderDivider = () => {\n        const classes = {\n            'mdc-deprecated-list-divider': true,\n            'mdc-deprecated-list-divider--inset': true,\n        };\n        if (this.config.iconSize) {\n            classes[this.config.iconSize] = true;\n        }\n\n        return <hr class={classes} />;\n    };\n\n    private renderActionMenu = (actions: Array<MenuItem | ListSeparator>) => {\n        if (!actions || actions.length === 0) {\n            return;\n        }\n\n        return (\n            <limel-menu\n                class=\"mdc-deprecated-list-item__meta\"\n                items={actions}\n                openDirection=\"left-start\"\n            >\n                <limel-icon-button\n                    class=\"action-menu-trigger\"\n                    slot=\"trigger\"\n                    icon=\"menu_2\"\n                />\n            </limel-menu>\n        );\n    };\n\n    private renderVariantListItem = (\n        config: ListRendererConfig,\n        item: ListItem,\n        index: number,\n    ) => {\n        let itemTemplate;\n        if (config.type === 'radio') {\n            itemTemplate = (\n                <RadioButtonTemplate\n                    id={`c_${index}`}\n                    checked={item.selected}\n                    disabled={item.disabled}\n                />\n            );\n        } else if (config.type === 'checkbox') {\n            itemTemplate = (\n                <CheckboxTemplate\n                    id={`c_${index}`}\n                    checked={item.selected}\n                    disabled={item.disabled}\n                />\n            );\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item__text': !item.secondaryText,\n            'has-primary-component': this.hasPrimaryComponent(item),\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                role={config.type}\n                aria-checked={item.selected ? 'true' : 'false'}\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                data-index={index}\n                {...attributes}\n            >\n                {this.renderVariantListItemContent(config, item, itemTemplate)}\n            </li>\n        );\n    };\n\n    private renderVariantListItemContent = (\n        config: ListRendererConfig,\n        item: ListItem,\n        itemTemplate: any,\n    ) => {\n        if (this.hasIcons) {\n            return [\n                item.icon ? this.renderIcon(config, item) : null,\n                this.getPrimaryComponent(item),\n                this.renderText(item),\n                <div class=\"mdc-deprecated-list-item__meta\">\n                    {itemTemplate}\n                </div>,\n            ];\n        }\n\n        return [\n            <div class=\"mdc-deprecated-list-item__graphic\">{itemTemplate}</div>,\n            this.getPrimaryComponent(item),\n            this.renderText(item),\n        ];\n    };\n}\n","@use '../../style/functions';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n@use '../checkbox/checkbox.scss';\n\n@use '@material/list';\n\n$list-border-radius: 0.375rem; // 6px\n$list--has-interactive-items--mdc-list-item--hover: 1;\n$list-static-actions-list: 1;\n$list-mdc-list-item: 0;\n\n/**\n * @prop --icon-background-color: Color to use for icon background when `badgeIcons=true`.\n * @prop --icon-color: Color to use for icon. Defaults to grey when `badgeIcons=false`. Defaults to white when `badgeIcons=true`.\n * @prop --list-grid-max-width: Maximum width of a list that has `has-grid-layout` class. Defaults to `100%`.\n * @prop --list-grid-item-max-width: Maximum width of items in a list that has `has-grid-layout` class. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in a list that has `has-grid-layout` class. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between items in a list that has `has-grid-layout` class. Defaults to `0.75rem`.\n * @prop --list-background-color-of-odd-interactive-items: Background color of odd list items, when `has-striped-rows` class is applied to the component. Defaults to `--contrast-200`.\n * @prop --list-background-color-of-even-interactive-items:  Background color of even list items, when `has-striped-rows` class is applied to the component. Defaults to `transparent`.\n * @prop --list-margin: Space around the list. Defaults to `0.25rem`, which visualizes keyboard-focused items in a better way, as it adds some space for the outline effect;\n */\n\n:host(limel-list) {\n    display: block;\n    isolation: isolate;\n    @include checkbox.custom-checkbox-styles;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n@include list.deprecated-core-styles;\n\n.mdc-deprecated-list,\n.mdc-deprecated-list-item__secondary-text {\n    // As long as this component is depended on MDC,\n    // we need to force it to be font-agnostic.\n    // When MDC-dependency is removed, this block can also be removed.\n    // However, on removal of MDC-dependency, we should also make sure to check\n    // other font-related styles that might be set by MDC,\n    // such as `letter-spacing` or `font-size`.\n    font-family: inherit;\n}\n\n.mdc-deprecated-list {\n    --mdc-theme-text-icon-on-background: var(\n        --icon-color,\n        rgb(var(--contrast-900))\n    );\n    margin: var(\n        --list-margin,\n        0.25rem\n    ); // added space to visualize keyboard-focused items\n    padding: 0;\n    border-radius: $list-border-radius;\n\n    .mdc-deprecated-list-divider {\n        border-bottom-color: transparent;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n        height: auto;\n        padding: 0 0.5rem;\n    }\n\n    .limel-list-divider-line {\n        background-color: rgb(var(--contrast-400));\n        height: 0.125rem;\n        border-radius: 1rem;\n        min-width: 1rem;\n        flex-grow: 1;\n    }\n\n    .limel-list-divider-title {\n        all: unset;\n        @include mixins.truncate-text;\n        color: rgb(var(--contrast-900));\n        font-size: 0.8125rem; // 13px\n    }\n\n    .mdc-deprecated-list-item {\n        gap: 0.5rem;\n        transition: background-color 0.2s ease;\n        box-sizing: border-box;\n        z-index: $list-mdc-list-item; // in Chrome on Windows, menus flicker when they have a scroll bar and user hovers on them. We may be able to remove this in future versions of Chrome. Kia 2021-May-12\n        min-height: 2.5rem;\n\n        &:not(.mdc-deprecated-list-item--disabled) {\n            &:hover {\n                background-color: rgb(var(--contrast-300));\n                z-index: 1;\n            }\n        }\n\n        &.mdc-deprecated-list-item--disabled {\n            cursor: not-allowed;\n\n            limel-icon {\n                opacity: 0.38; // similar to `mdc-deprecated-list-item__text` when disabled\n            }\n        }\n\n        &:first-child {\n            border-top-left-radius: $list-border-radius;\n            border-top-right-radius: $list-border-radius;\n        }\n        &:last-child {\n            border-bottom-right-radius: $list-border-radius;\n            border-bottom-left-radius: $list-border-radius;\n        }\n    }\n\n    &.selectable\n        .mdc-deprecated-list-item:not(.mdc-deprecated-list-item--disabled) {\n        cursor: pointer;\n    }\n\n    .mdc-deprecated-list-item__meta {\n        // the action menu on the right side a list item\n        line-height: 100%;\n        margin-right: -0.5rem;\n        order: var(--limel-list-meta-order, 3);\n    }\n\n    .mdc-deprecated-list-item__graphic {\n        margin-right: 0;\n    }\n\n    &.mdc-deprecated-list--avatar-list {\n        position: relative;\n\n        limel-icon.mdc-deprecated-list-item__graphic {\n            background-color: var(\n                --icon-background-color,\n                rgb(var(--contrast-900))\n            );\n            color: var(--icon-color, rgba(var(--color-white), 0.88));\n            margin-left: functions.pxToRem(-4);\n        }\n\n        hr.mdc-deprecated-list-divider {\n            position: absolute;\n            bottom: 0;\n\n            &.mdc-deprecated-list-divider--inset {\n                --icon-width: #{functions.pxToRem(40)};\n                --icon-right-padding: #{functions.pxToRem(12)};\n                --list-right-padding: #{functions.pxToRem(12)};\n                right: 0;\n                width: calc(\n                    100% - var(--icon-width) - var(--icon-right-padding) - var(\n                            --list-right-padding\n                        )\n                );\n\n                &.x-small {\n                    --icon-width: #{functions.pxToRem(24)};\n                }\n\n                &.small {\n                    --icon-width: #{functions.pxToRem(32)};\n                }\n\n                &.medium {\n                    --icon-width: #{functions.pxToRem(40)};\n                }\n\n                &.large {\n                    --icon-width: #{functions.pxToRem(48)};\n                }\n            }\n        }\n\n        .mdc-deprecated-list-item:last-child hr.mdc-deprecated-list-divider {\n            display: none;\n        }\n    }\n\n    &.mdc-deprecated-list--two-line {\n        .mdc-deprecated-list-item__text {\n            padding-top: functions.pxToRem(8);\n            padding-bottom: functions.pxToRem(8);\n        }\n    }\n\n    .mdc-deprecated-list-item__secondary-text,\n    .mdc-deprecated-list-item__primary-text,\n    .mdc-deprecated-list-item__command-text {\n        margin: 0;\n        &:before,\n        &:after {\n            display: none;\n        }\n    }\n\n    .mdc-deprecated-list-item__command-text {\n        color: rgb(var(--contrast-800));\n        margin-left: 0.7rem;\n    }\n\n    .mdc-deprecated-list-item__text {\n        align-self: center;\n        width: 100%;\n    }\n\n    .mdc-deprecated-list-item__primary-command-text {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: baseline;\n    }\n\n    // Tweaks to display the icon correctly in Edge\n    limel-icon.mdc-deprecated-list-item__graphic {\n        display: block;\n    }\n}\n\n.mdc-deprecated-list:not(.mdc-deprecated-list--avatar-list) {\n    limel-icon.mdc-deprecated-list-item__graphic {\n        // Tweaks to make icon lists align nicely with badge-icon lists.\n        &[size='x-small'] {\n            margin-right: 0;\n        }\n        &[size='small'] {\n            margin-right: 0;\n        }\n        &[size='medium'] {\n            margin-right: 0.25rem;\n        }\n        &[size='large'] {\n            margin-right: 0.5rem;\n        }\n    }\n}\n\n.mdc-deprecated-list-item.mdc-deprecated-list-item--selected {\n    &:before {\n        background-color: var(--mdc-theme-primary);\n        opacity: 0.15;\n    }\n}\n\n:not(.mdc-deprecated-list--non-interactive) {\n    > {\n        :not(.mdc-deprecated-list-item--disabled).mdc-deprecated-list-item {\n            @include mixins.visualize-keyboard-focus;\n\n            &:focus-visible {\n                border-radius: $list-border-radius;\n                z-index: $list--has-interactive-items--mdc-list-item--hover;\n            }\n        }\n    }\n}\n\nimg {\n    flex-shrink: 0;\n    object-fit: cover;\n\n    border-radius: 50%;\n    width: 2rem;\n    height: 2rem;\n    box-shadow: 0 0 0 1px rgb(var(--contrast-800), 0.5);\n}\n\n.mdc-deprecated-list-item {\n    &:has(img) {\n        limel-icon {\n            position: absolute;\n            top: 0.125rem;\n            left: 0.125rem;\n            padding: 0.1875rem; // 3px\n            background-color: rgb(var(--contrast-200), 0.8);\n\n            &[badge] {\n                top: 0;\n                padding: 0;\n                scale: 0.6;\n            }\n        }\n    }\n}\n\n@import '../checkbox/checkbox.scss';\n\n@import './radio-button/radio-button.scss';\n\n@import './partial-styles/custom-styles.scss';\n@import './partial-styles/enable-multiline-text.scss';\n@import './partial-styles/_has-grid-layout.scss';\n@import './partial-styles/_static-actions.scss';\n","import { IconSize } from '../icon/icon.types';\nimport { ListItem, ListSeparator } from './list-item.types';\nimport { ListType } from './list.types';\nimport { MDCList, MDCListActionEvent } from '@material/list';\nimport { strings as listStrings } from '@material/list/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { ListRenderer } from './list-renderer';\nimport { ListRendererConfig } from './list-renderer-config';\n\nconst { ACTION_EVENT } = listStrings;\n\n/**\n * @exampleComponent limel-example-list\n * @exampleComponent limel-example-list-secondary\n * @exampleComponent limel-example-list-separator\n * @exampleComponent limel-example-list-selectable\n * @exampleComponent limel-example-list-icons\n * @exampleComponent limel-example-list-badge-icons\n * @exampleComponent limel-example-list-pictures\n * @exampleComponent limel-example-list-checkbox\n * @exampleComponent limel-example-list-checkbox-icons\n * @exampleComponent limel-example-list-radio-button\n * @exampleComponent limel-example-list-radio-button-icons\n * @exampleComponent limel-example-list-action\n * @exampleComponent limel-example-list-striped\n * @exampleComponent limel-example-list-badge-icons-with-multiple-lines\n * @exampleComponent limel-example-list-grid\n * @exampleComponent limel-example-list-primary-component\n */\n@Component({\n    tag: 'limel-list',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'list.scss',\n})\nexport class List {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<ListItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * The type of the list, omit to get a regular list. Available types are:\n     * `selectable`: regular list with single selection.\n     * `radio`: radio button list with single selection.\n     * `checkbox`: checkbox list with multiple selection.\n     */\n    @Prop()\n    public type: ListType;\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelListElement;\n\n    private config: ListRendererConfig;\n    private listRenderer = new ListRenderer();\n    private mdcList: MDCList;\n    private multiple: boolean;\n    private selectable: boolean;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     * Only fired if `type` is set to `selectable`, `radio` or `checkbox`.\n     */\n    @Event()\n    private change: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fired when an action has been selected from the action menu of a list item\n     */\n    @Event()\n    protected select: EventEmitter<ListItem | ListItem[]>;\n\n    /**\n     * Fires when a user interacts with an item in the list (e.g., click,\n     * keyboard select).\n     */\n    @Event()\n    interact: EventEmitter<ListItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            type: this.type,\n            iconSize: this.iconSize,\n        };\n        let maxLinesSecondaryText = +this.maxLinesSecondaryText?.toFixed();\n        if (this.maxLinesSecondaryText < 1) {\n            maxLinesSecondaryText = 1;\n        }\n\n        const html = this.listRenderer.render(this.items, this.config);\n\n        return (\n            <Host\n                style={{\n                    '--maxLinesSecondaryText': `${maxLinesSecondaryText}`,\n                }}\n            >\n                {html}\n            </Host>\n        );\n    }\n\n    @Watch('type')\n    protected handleType() {\n        this.setupListeners();\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        if (!this.mdcList) {\n            return;\n        }\n\n        setTimeout(() => {\n            this.setup();\n\n            const listItems = this.items.filter(this.isListItem);\n\n            if (this.multiple) {\n                this.mdcList.selectedIndex = listItems\n                    .filter((item: ListItem) => item.selected)\n                    .map((item: ListItem) => listItems.indexOf(item));\n            } else {\n                const selectedIndex = listItems.findIndex(\n                    (item: ListItem) => item.selected,\n                );\n\n                if (selectedIndex === -1) {\n                    this.mdcList.initializeListType();\n                } else {\n                    this.mdcList.selectedIndex = selectedIndex;\n                }\n            }\n        }, 0);\n    }\n\n    private setup = () => {\n        this.setupList();\n\n        this.setupListeners();\n    };\n\n    private setupList = () => {\n        if (this.mdcList) {\n            this.teardown();\n            this.mdcList = null;\n        }\n\n        const element = this.element.shadowRoot.querySelector(\n            '.mdc-deprecated-list',\n        );\n        if (!element) {\n            return;\n        }\n\n        this.mdcList = new MDCList(element);\n        this.mdcList.hasTypeahead = true;\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcList) {\n            return;\n        }\n\n        this.mdcList.unlisten(ACTION_EVENT, this.handleAction);\n\n        this.selectable = ['selectable', 'radio', 'checkbox'].includes(\n            this.type,\n        );\n        this.multiple = this.type === 'checkbox';\n\n        if (!this.selectable) {\n            return;\n        }\n\n        this.mdcList.listen(ACTION_EVENT, this.handleAction);\n        this.mdcList.singleSelection = !this.multiple;\n    };\n\n    private teardown = () => {\n        this.mdcList?.unlisten(ACTION_EVENT, this.handleAction);\n        this.mdcList?.destroy();\n    };\n\n    private handleAction = (event: MDCListActionEvent) => {\n        if (!this.multiple) {\n            this.handleSingleSelect(event.detail.index);\n\n            return;\n        }\n\n        this.handleMultiSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: ListItem = listItems.find((item: ListItem) => {\n            return !!item.selected;\n        });\n\n        let interactedItem: ListItem;\n\n        if (selectedItem) {\n            if (this.type !== 'radio') {\n                this.mdcList.selectedIndex = -1;\n            }\n\n            interactedItem = { ...selectedItem, selected: false };\n            this.change.emit(interactedItem);\n        }\n\n        if (listItems[index] !== selectedItem) {\n            interactedItem = { ...listItems[index], selected: true };\n            this.change.emit(interactedItem);\n        }\n\n        this.interact.emit(interactedItem);\n    };\n\n    private handleMultiSelect = (index: number) => {\n        const listItems = this.items.filter(this.isListItem) as ListItem[];\n        if (listItems[index].disabled) {\n            return;\n        }\n\n        const selectedItems: ListItem[] = listItems\n            .filter((item: ListItem, listIndex: number) => {\n                if (listIndex === index) {\n                    // This is the item that was selected or deselected,\n                    // so we negate its previous selection status.\n                    return !item.selected;\n                }\n\n                // This is an item that didn't change, so we keep its selection status.\n                return item.selected;\n            })\n            .map((item: ListItem) => {\n                return { ...item, selected: true };\n            });\n\n        this.change.emit(selectedItems);\n        this.interact.emit({ ...selectedItems[index] });\n    };\n\n    private isListItem = (item: ListItem): boolean => {\n        return !('separator' in item);\n    };\n\n    private triggerIconColorWarning() {\n        if (this.items?.some((item) => 'iconColor' in item)) {\n            /* eslint-disable-next-line no-console */\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\",\n            );\n        }\n    }\n}\n"],"mappings":"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"}