{"version":3,"names":["ButtonClickFailExample","render","h","label","primary","loading","this","disabled","onClick","loadingFailed","TIME_LOADING","setTimeout"],"sources":["./src/components/button/examples/button-click-fail.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n\n/**\n * With click handler, and failed feedback\n *\n * This example works just like the \"With click handler\" example, except that,\n * when the `loading` attribute changes from `true` to `false`, the button\n * automatically indicates that the previously ongoing process just failed.\n */\n@Component({\n    tag: 'limel-example-button-click-fail',\n    shadow: true,\n})\nexport class ButtonClickFailExample {\n    @State()\n    private loading = false;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private loadingFailed = false;\n\n    public render() {\n        return (\n            <limel-button\n                label=\"Click me!\"\n                primary={true}\n                loading={this.loading}\n                disabled={this.disabled}\n                onClick={this.onClick}\n                loadingFailed={this.loadingFailed}\n            />\n        );\n    }\n\n    private onClick() {\n        this.disabled = true;\n        this.loading = true;\n        this.loadingFailed = false;\n\n        const TIME_LOADING = 2000;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.disabled = false;\n            this.loadingFailed = true;\n        }, TIME_LOADING);\n    }\n}\n"],"mappings":"qDAaaA,EAAsB,M,sCAEb,M,cAGC,M,mBAGK,K,CAEjBC,SACH,OACIC,EAAA,gBACIC,MAAM,YACNC,QAAS,KACTC,QAASC,KAAKD,QACdE,SAAUD,KAAKC,SACfC,QAASF,KAAKE,QACdC,cAAeH,KAAKG,e,CAKxBD,UACJF,KAAKC,SAAW,KAChBD,KAAKD,QAAU,KACfC,KAAKG,cAAgB,MAErB,MAAMC,EAAe,IAErBC,YAAW,KACPL,KAAKD,QAAU,MACfC,KAAKC,SAAW,MAChBD,KAAKG,cAAgB,IAAI,GAC1BC,E"}