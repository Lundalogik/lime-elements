{"version":3,"names":["SelectExample","this","optionGroups","text","value","disabled","optionGroupSelectOptions","handleChange","event","detail","toggleEnabled","handleOptionsGroupChange","stopPropagation","currentOptionGroup","unsetValue","undefined","selectFirstValue","reinitialize","key","crypto","randomUUID","componentWillLoad","render","h","Host","label","options","onChange","style","onClick","length"],"sources":["./src/components/select/examples/select-change-options.tsx"],"sourcesContent":["import { LimelSelectCustomEvent, Option } from '@limetech/lime-elements';\nimport { Component, h, Host, State } from '@stencil/core';\n\n/**\n * Changing Available Options\n *\n * This example shows how the component works when options are changed\n * programmatically during the lifetime of the component.\n *\n * We have 5 different sets of options:\n * 1. A set of options with an empty and disabled first option. This is used to ensure that the empty option cannot be re-selected.\n * 2. A set of options with an empty but non-disabled first option. This is used to ensure that the empty option can be re-selected.\n * 3. An empty array. This is used to ensure that the component can handle an empty set of options. To load the component with an empty set of options, select this group, then click the \"Reinitialize\" button.\n * 4. A set of 3 options.\n * 5. A set of 4 options. Set 4 and 5 are used to ensure that the component can handle sets of different sizes.\n */\n@Component({\n    shadow: true,\n    tag: 'limel-example-select-change-options',\n})\nexport class SelectExample {\n    @State()\n    private value: Option;\n\n    @State()\n    private disabled = false;\n\n    @State()\n    private currentOptionGroup = 0;\n\n    @State()\n    private key = crypto.randomUUID();\n\n    private optionGroups: Option[][] = [\n        [\n            { text: '', value: '', disabled: true },\n            { text: 'Bart Simpson', value: 'bart' },\n            { text: 'Ned Flanders', value: 'ned' },\n        ],\n        [\n            { text: '', value: '' },\n            { text: 'Homer Simpson', value: 'homer' },\n            { text: 'Moe Szyslak', value: 'moe' },\n            { text: 'Ned Flanders', value: 'ned' },\n        ],\n        [],\n        [\n            { text: 'Luke Skywalker', value: 'luke' },\n            { text: 'Han Solo', value: 'han' },\n            { text: 'Leia Organo', value: 'leia' },\n        ],\n        [\n            { text: 'David Tennant', value: '10' },\n            { text: 'Matt Smith', value: '11' },\n            { text: 'Peter Capaldi', value: '12' },\n            { text: 'Jodie Witthaker', value: '13' },\n        ],\n    ];\n\n    private optionGroupSelectOptions: Option[] = [\n        { text: '1 - with empty disabled first option', value: '0' },\n        { text: '2 - with empty non-disabled first option', value: '1' },\n        { text: '3 - empty set', value: '2' },\n        { text: '4 - 3 options', value: '3' },\n        { text: '5 - 4 options', value: '4' },\n    ];\n\n    public componentWillLoad() {\n        this.selectFirstValue();\n    }\n\n    public render() {\n        return (\n            <Host>\n                <limel-select\n                    label=\"Favorite hero\"\n                    value={this.value}\n                    options={this.optionGroups[this.currentOptionGroup]}\n                    disabled={this.disabled}\n                    onChange={this.handleChange}\n                    key={this.key}\n                />\n                <limel-example-controls\n                    style={{ '--example-controls-max-columns-width': '9rem' }}\n                >\n                    <limel-select\n                        label=\"Select Options Group\"\n                        options={this.optionGroupSelectOptions}\n                        value={\n                            this.optionGroupSelectOptions[\n                                this.currentOptionGroup\n                            ]\n                        }\n                        onChange={this.handleOptionsGroupChange}\n                    />\n                    <limel-button\n                        label={this.disabled ? 'Enable' : 'Disable'}\n                        onClick={this.toggleEnabled}\n                    />\n                    <limel-button\n                        label=\"Unset value\"\n                        onClick={this.unsetValue}\n                    />\n                    <limel-button\n                        label=\"Select first value in group\"\n                        onClick={this.selectFirstValue}\n                    />\n                    <limel-button\n                        label=\"Reinitialize\"\n                        onClick={this.reinitialize}\n                    />\n                </limel-example-controls>\n                <limel-example-value value={this.value} />\n                <limel-example-value\n                    label=\"Currently showing option group\"\n                    value={`${this.currentOptionGroup + 1} / ${\n                        this.optionGroups.length\n                    }`}\n                />\n            </Host>\n        );\n    }\n\n    private handleChange = (event) => {\n        this.value = event.detail;\n    };\n\n    private toggleEnabled = () => {\n        this.disabled = !this.disabled;\n    };\n\n    private handleOptionsGroupChange = (\n        event: LimelSelectCustomEvent<Option>,\n    ) => {\n        event.stopPropagation();\n        this.currentOptionGroup = +event.detail.value;\n    };\n\n    private unsetValue = () => {\n        this.value = undefined;\n    };\n\n    private selectFirstValue = () => {\n        this.value = this.optionGroups[this.currentOptionGroup][0];\n    };\n\n    private reinitialize = () => {\n        // We need to change the key to force destruction and recreation of the\n        // component. This is necessary to ensure that the component can handle\n        // being reinitialized with an empty set of options.\n        this.key = crypto.randomUUID();\n    };\n}\n"],"mappings":"4DAoBaA,EAAa,M,yBAadC,KAAAC,aAA2B,CAC/B,CACI,CAAEC,KAAM,GAAIC,MAAO,GAAIC,SAAU,MACjC,CAAEF,KAAM,eAAgBC,MAAO,QAC/B,CAAED,KAAM,eAAgBC,MAAO,QAEnC,CACI,CAAED,KAAM,GAAIC,MAAO,IACnB,CAAED,KAAM,gBAAiBC,MAAO,SAChC,CAAED,KAAM,cAAeC,MAAO,OAC9B,CAAED,KAAM,eAAgBC,MAAO,QAEnC,GACA,CACI,CAAED,KAAM,iBAAkBC,MAAO,QACjC,CAAED,KAAM,WAAYC,MAAO,OAC3B,CAAED,KAAM,cAAeC,MAAO,SAElC,CACI,CAAED,KAAM,gBAAiBC,MAAO,MAChC,CAAED,KAAM,aAAcC,MAAO,MAC7B,CAAED,KAAM,gBAAiBC,MAAO,MAChC,CAAED,KAAM,kBAAmBC,MAAO,QAIlCH,KAAAK,yBAAqC,CACzC,CAAEH,KAAM,uCAAwCC,MAAO,KACvD,CAAED,KAAM,2CAA4CC,MAAO,KAC3D,CAAED,KAAM,gBAAiBC,MAAO,KAChC,CAAED,KAAM,gBAAiBC,MAAO,KAChC,CAAED,KAAM,gBAAiBC,MAAO,MA2D5BH,KAAAM,aAAgBC,IACpBP,KAAKG,MAAQI,EAAMC,MAAM,EAGrBR,KAAAS,cAAgB,KACpBT,KAAKI,UAAYJ,KAAKI,QAAQ,EAG1BJ,KAAAU,yBACJH,IAEAA,EAAMI,kBACNX,KAAKY,oBAAsBL,EAAMC,OAAOL,KAAK,EAGzCH,KAAAa,WAAa,KACjBb,KAAKG,MAAQW,SAAS,EAGlBd,KAAAe,iBAAmB,KACvBf,KAAKG,MAAQH,KAAKC,aAAaD,KAAKY,oBAAoB,EAAE,EAGtDZ,KAAAgB,aAAe,KAInBhB,KAAKiB,IAAMC,OAAOC,YAAY,E,mCA7Hf,M,wBAGU,E,SAGfD,OAAOC,Y,CAoCdC,oBACHpB,KAAKe,kB,CAGFM,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,gBACIE,MAAM,gBACNrB,MAAOH,KAAKG,MACZsB,QAASzB,KAAKC,aAAaD,KAAKY,oBAChCR,SAAUJ,KAAKI,SACfsB,SAAU1B,KAAKM,aACfW,IAAKjB,KAAKiB,MAEdK,EAAA,0BACIK,MAAO,CAAE,uCAAwC,SAEjDL,EAAA,gBACIE,MAAM,uBACNC,QAASzB,KAAKK,yBACdF,MACIH,KAAKK,yBACDL,KAAKY,oBAGbc,SAAU1B,KAAKU,2BAEnBY,EAAA,gBACIE,MAAOxB,KAAKI,SAAW,SAAW,UAClCwB,QAAS5B,KAAKS,gBAElBa,EAAA,gBACIE,MAAM,cACNI,QAAS5B,KAAKa,aAElBS,EAAA,gBACIE,MAAM,8BACNI,QAAS5B,KAAKe,mBAElBO,EAAA,gBACIE,MAAM,eACNI,QAAS5B,KAAKgB,gBAGtBM,EAAA,uBAAqBnB,MAAOH,KAAKG,QACjCmB,EAAA,uBACIE,MAAM,iCACNrB,MAAO,GAAGH,KAAKY,mBAAqB,OAChCZ,KAAKC,aAAa4B,W"}