{"version":3,"names":["ChipSetCompositeExample","this","handleChange","event","eventPrinter","writeEvent","handleFormChange","props","Object","assign","detail","language","value","id","text","icon","type","componentWillLoad","schema","lime","layout","properties","colSpan","definitions","Chip","render","h","onChange","renderForm","ref","el","style"],"sources":["./src/components/chip-set/examples/chip-set-composite.tsx"],"sourcesContent":["import { Component, h, Prop, State } from '@stencil/core';\nimport { Chip, FormSchema, Languages } from '@limetech/lime-elements';\n\n/**\n * Composite\n *\n * A place to try different combinations of states.\n */\n@Component({\n    tag: 'limel-example-chip-set-composite',\n    shadow: true,\n})\nexport class ChipSetCompositeExample {\n    @Prop()\n    public schema: FormSchema;\n\n    @State()\n    private props = {\n        language: 'en' as Languages,\n        value: [\n            {\n                id: 'dog',\n                text: 'Dog',\n                icon: 'dog',\n            },\n            {\n                id: 'cat',\n                text: 'Cat',\n                icon: 'cat',\n            },\n        ] as Chip[],\n        type: 'choice' as any,\n    };\n\n    private eventPrinter: HTMLLimelExampleEventPrinterElement;\n\n    public componentWillLoad() {\n        this.schema.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n        this.schema.properties.value.lime = {\n            layout: {\n                colSpan: 'all',\n            },\n        };\n        this.schema.definitions.Chip.lime = {\n            layout: {\n                type: 'grid',\n            },\n        };\n    }\n\n    public render() {\n        return [\n            <limel-chip-set {...this.props} onChange={this.handleChange} />,\n            this.renderForm(),\n            <limel-example-event-printer\n                ref={(el) => (this.eventPrinter = el)}\n            />,\n        ];\n    }\n\n    private renderForm() {\n        return (\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-form\n                    schema={this.schema}\n                    value={this.props}\n                    onChange={this.handleFormChange}\n                />\n            </limel-example-controls>\n        );\n    }\n\n    private handleChange = (event: CustomEvent<Chip | Chip[]>) => {\n        this.eventPrinter.writeEvent(event);\n    };\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.props = { ...event.detail };\n    };\n}\n"],"mappings":"qDAYaA,EAAuB,M,yBAkExBC,KAAAC,aAAgBC,IACpBF,KAAKG,aAAaC,WAAWF,EAAM,EAG/BF,KAAAK,iBAAoBH,IACxBF,KAAKM,MAAKC,OAAAC,OAAA,GAAQN,EAAMO,OAAQ,E,iCAlEpB,CACZC,SAAU,KACVC,MAAO,CACH,CACIC,GAAI,MACJC,KAAM,MACNC,KAAM,OAEV,CACIF,GAAI,MACJC,KAAM,MACNC,KAAM,QAGdC,KAAM,S,CAKHC,oBACHhB,KAAKiB,OAAOC,KAAO,CACfC,OAAQ,CACJJ,KAAM,SAGdf,KAAKiB,OAAOG,WAAWT,MAAMO,KAAO,CAChCC,OAAQ,CACJE,QAAS,QAGjBrB,KAAKiB,OAAOK,YAAYC,KAAKL,KAAO,CAChCC,OAAQ,CACJJ,KAAM,Q,CAKXS,SACH,MAAO,CACHC,EAAA,iBAAAlB,OAAAC,OAAA,GAAoBR,KAAKM,MAAK,CAAEoB,SAAU1B,KAAKC,gBAC/CD,KAAK2B,aACLF,EAAA,+BACIG,IAAMC,GAAQ7B,KAAKG,aAAe0B,I,CAKtCF,aACJ,OACIF,EAAA,0BACIK,MAAO,CAAE,mCAAoC,aAE7CL,EAAA,cACIR,OAAQjB,KAAKiB,OACbN,MAAOX,KAAKM,MACZoB,SAAU1B,KAAKK,mB"}