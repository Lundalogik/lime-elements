{"version":3,"names":["dynamicLabelReadonlyBooleanCss","DynamicLabelExample","this","setChecked","event","stopPropagation","value","detail","render","h","defaultLabel","text","icon","labels","name","color","backgroundColor","checked","readonly","label","onChange"],"sources":["./src/components/dynamic-label/examples/dynamic-label-readonly-boolean.scss?tag=limel-example-dynamic-label-readonly-boolean&encapsulation=shadow","./src/components/dynamic-label/examples/dynamic-label-readonly-boolean.tsx"],"sourcesContent":[":host(limel-example-dynamic-label-readonly-boolean) {\n    --example-controls-column-layout: auto-fit;\n    display: grid;\n    gap: 1rem;\n}\n\nhr {\n    all: unset;\n    border-top: 1px solid rgb(var(--contrast-400));\n}\n","import { Component, State, h } from '@stencil/core';\n\n/**\n * Readonly boolean\n * The `readonly` mode of a boolean fields do not always\n * clearly communicate the meaning of the data to the end users. Similar problems\n * have existed in user interfaces forever, and it not solely limited to\n * readonly-ness of a boolean field. If you are interested in reading more\n * about these common design problems, you can check out\n * [**State-Switch Controls:** The Infamous Case of the \"Mute\" Button](https://www.nngroup.com/articles/state-switch-buttons/)\n *\n * In short, the reason end-users become confused is that it is not enough to\n * keep the same label for both `true` and `false` states,\n * and only rely on changing the color or the\n * shapes and visual motifs, to communicate what the field means.\n *\n * Instead, we need to use different labels to describe the state,\n * and also get some additional help from icons and colors\n * to clarify further if needed.\n *\n * :::important\n * This example shows how to setup the `limel-dynamic-label` component to\n * create a more descriptive and dynamic labels for boolean fields.\n * But please make sure to read our guidelines about\n * [Labeling boolean fields](/#/DesignGuidelines/labeling-boolean-fields.md/)\n * to understand the importance of this, and get help in choosing the right labels\n * for boolean fields.\n * :::\n */\n@Component({\n    tag: 'limel-example-dynamic-label-readonly-boolean',\n    shadow: true,\n    styleUrl: 'dynamic-label-readonly-boolean.scss',\n})\nexport class DynamicLabelExample {\n    @State()\n    private value: boolean = false;\n\n    public render() {\n        return [\n            <p>Default</p>,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Debt', icon: 'minus' }}\n            />,\n            <hr></hr>,\n            <p>Customized</p>,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Debt' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        text: 'Has debts',\n                        icon: {\n                            name: 'error',\n                            color: 'rgb(var(--color-red-default))',\n                            backgroundColor: 'rgb(var(--color-yellow-default))',\n                        },\n                    },\n                    {\n                        value: false,\n                        text: 'Does not have debts',\n                        icon: {\n                            name: 'ok',\n                            color: 'rgb(var(--color-green-default))',\n                        },\n                    },\n                ]}\n            />,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Newsletter' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        icon: 'news',\n                        text: 'Subscribed to receive newsletters',\n                    },\n                    {\n                        value: false,\n                        icon: {\n                            name: 'cancel_subscription',\n                            color: 'rgb(var(--color-orange-default))',\n                        },\n                        text: 'Unsubscribed from newsletters',\n                    },\n                ]}\n            />,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Quit' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        icon: {\n                            name: 'inactive_state',\n                            color: 'rgb(var(--color-gray-default))',\n                        },\n                        text: 'Has quit their job',\n                    },\n                    {\n                        value: false,\n                        icon: {\n                            name: 'in_progress',\n                            color: 'rgb(var(--color-sky-default))',\n                        },\n                        text: 'Still works here',\n                    },\n                ]}\n            />,\n            <limel-dynamic-label\n                defaultLabel={{ text: 'Mute' }}\n                value={this.value}\n                labels={[\n                    {\n                        value: true,\n                        icon: {\n                            name: 'no_microphone',\n                            color: 'rgb(var(--color-gray-light))',\n                        },\n                        text: \"You're muted\",\n                    },\n                    {\n                        value: false,\n                        icon: 'microphone',\n                        text: 'Microphone is activeâ€¦',\n                    },\n                ]}\n            />,\n            <hr></hr>,\n            <p>Used in Checkbox and Switch</p>,\n            <limel-checkbox\n                checked={this.value}\n                readonly={true}\n                label=\"Checkbox\"\n            />,\n            <limel-switch value={this.value} readonly={true} label=\"Switch\" />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.value}\n                    label=\"Value\"\n                    onChange={this.setChecked}\n                />\n                <limel-example-value label=\"Current value\" value={this.value} />\n            </limel-example-controls>,\n        ];\n    }\n\n    private setChecked = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.value = event.detail;\n    };\n}\n"],"mappings":"+CAAA,MAAMA,EAAiC,kL,MCkC1BC,EAAmB,M,yBAkHpBC,KAAAC,WAAcC,IAClBA,EAAMC,kBACNH,KAAKI,MAAQF,EAAMG,MAAM,E,WAlHJ,K,CAElBC,SACH,MAAO,CACHC,EAAA,oBACAA,EAAA,uBACIC,aAAc,CAAEC,KAAM,OAAQC,KAAM,WAExCH,EAAA,WACAA,EAAA,uBACAA,EAAA,uBACIC,aAAc,CAAEC,KAAM,QACtBL,MAAOJ,KAAKI,MACZO,OAAQ,CACJ,CACIP,MAAO,KACPK,KAAM,YACNC,KAAM,CACFE,KAAM,QACNC,MAAO,gCACPC,gBAAiB,qCAGzB,CACIV,MAAO,MACPK,KAAM,sBACNC,KAAM,CACFE,KAAM,KACNC,MAAO,uCAKvBN,EAAA,uBACIC,aAAc,CAAEC,KAAM,cACtBL,MAAOJ,KAAKI,MACZO,OAAQ,CACJ,CACIP,MAAO,KACPM,KAAM,OACND,KAAM,qCAEV,CACIL,MAAO,MACPM,KAAM,CACFE,KAAM,sBACNC,MAAO,oCAEXJ,KAAM,oCAIlBF,EAAA,uBACIC,aAAc,CAAEC,KAAM,QACtBL,MAAOJ,KAAKI,MACZO,OAAQ,CACJ,CACIP,MAAO,KACPM,KAAM,CACFE,KAAM,iBACNC,MAAO,kCAEXJ,KAAM,sBAEV,CACIL,MAAO,MACPM,KAAM,CACFE,KAAM,cACNC,MAAO,iCAEXJ,KAAM,uBAIlBF,EAAA,uBACIC,aAAc,CAAEC,KAAM,QACtBL,MAAOJ,KAAKI,MACZO,OAAQ,CACJ,CACIP,MAAO,KACPM,KAAM,CACFE,KAAM,gBACNC,MAAO,gCAEXJ,KAAM,gBAEV,CACIL,MAAO,MACPM,KAAM,aACND,KAAM,4BAIlBF,EAAA,WACAA,EAAA,wCACAA,EAAA,kBACIQ,QAASf,KAAKI,MACdY,SAAU,KACVC,MAAM,aAEVV,EAAA,gBAAcH,MAAOJ,KAAKI,MAAOY,SAAU,KAAMC,MAAM,WACvDV,EAAA,8BACIA,EAAA,kBACIQ,QAASf,KAAKI,MACda,MAAM,QACNC,SAAUlB,KAAKC,aAEnBM,EAAA,uBAAqBU,MAAM,gBAAgBb,MAAOJ,KAAKI,S"}