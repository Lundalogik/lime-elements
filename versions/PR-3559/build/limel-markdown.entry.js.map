{"version":3,"names":["ImageLazyLoader","constructor","this","handleIntersection","entries","forEach","entry","isIntersecting","img","target","dataSrc","getAttribute","setAttribute","removeAttribute","observer","unobserve","setupLazyLoading","containerElement","disconnect","images","querySelectorAll","length","IntersectionObserver","observe","markdownCss","Markdown","imageLazyLoader","globalConfig","markdownWhitelist","async","html","markdownToHTML","value","forceHardLineBreaks","whitelist","_a","lazyLoadImages","rootElement","innerHTML","error","console","textChanged","disconnectedCallback","render","h","id","ref","el"],"sources":["./src/components/markdown/image-lazy-loader.ts","./src/components/markdown/markdown.scss?tag=limel-markdown&encapsulation=shadow","./src/components/markdown/markdown.tsx"],"sourcesContent":["export class ImageLazyLoader {\n    private observer: IntersectionObserver;\n\n    /**\n     * Setup lazy loading for all images in a container element\n     * @param containerElement - The element containing images to lazy load\n     */\n    public setupLazyLoading(containerElement: HTMLElement) {\n        this.disconnect();\n\n        const images = containerElement.querySelectorAll('img');\n        if (!images.length) {\n            return;\n        }\n\n        this.observer = new IntersectionObserver(this.handleIntersection);\n\n        images.forEach((img) => {\n            this.observer.observe(img);\n        });\n    }\n\n    public disconnect() {\n        if (this.observer) {\n            this.observer.disconnect();\n        }\n    }\n\n    private readonly handleIntersection = (\n        entries: IntersectionObserverEntry[],\n    ) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                const img = entry.target as HTMLImageElement;\n                const dataSrc = img.getAttribute('data-src');\n\n                if (dataSrc) {\n                    img.setAttribute('src', dataSrc);\n                    img.removeAttribute('data-src');\n                }\n\n                this.observer.unobserve(img);\n            }\n        });\n    };\n}\n","/**\n* @prop --markdown-hyperlink-color: color of text for hyperlinks. Defaults to `--color-blue-dark`;\n* @prop --markdown-hyperlink-color--hovered: color of text for hyperlinks when hovered. Defaults to `--color-blue-default`;\n*/\n\n@forward './partial-styles/pre-code';\n@forward './partial-styles/headings';\n@forward './partial-styles/body-text';\n@forward './partial-styles/lists';\n@forward './partial-styles/tables';\n@forward './partial-styles/blockquotes';\n@forward './partial-styles/definition-lists';\n@forward './partial-styles/img';\n@forward './partial-styles/kbd';\n@forward './partial-styles/_adjust-for-table-cell';\n\n// body-text\nhr {\n    border-top: 1px solid rgb(var(--contrast-700));\n}\n\n.MsoNormal {\n    margin: 0;\n}\n","import { Component, h, Prop, Watch } from '@stencil/core';\nimport { markdownToHTML } from './markdown-parser';\nimport { globalConfig } from '../../global/config';\nimport { CustomElementDefinition } from '../../global/shared-types/custom-element.types';\nimport { ImageLazyLoader } from './image-lazy-loader';\n\n/**\n * The Markdown component receives markdown syntax\n * and renders it as HTML.\n *\n * @exampleComponent limel-example-markdown-headings\n * @exampleComponent limel-example-markdown-emphasis\n * @exampleComponent limel-example-markdown-lists\n * @exampleComponent limel-example-markdown-links\n * @exampleComponent limel-example-markdown-images\n * @exampleComponent limel-example-markdown-code\n * @exampleComponent limel-example-markdown-footnotes\n * @exampleComponent limel-example-markdown-tables\n * @exampleComponent limel-example-markdown-html\n * @exampleComponent limel-example-markdown-keys\n * @exampleComponent limel-example-markdown-blockquotes\n * @exampleComponent limel-example-markdown-horizontal-rule\n * @exampleComponent limel-example-markdown-composite\n * @exampleComponent limel-example-markdown-custom-component\n */\n@Component({\n    tag: 'limel-markdown',\n    styleUrl: 'markdown.scss',\n    shadow: true,\n})\nexport class Markdown {\n    /**\n     * The input text. Treated as GitHub Flavored Markdown, with the addition\n     * that any included HTML will be parsed and rendered as HTML, rather than\n     * as text.\n     */\n    @Prop()\n    public value: string;\n\n    /**\n     * Whitelisted html elements.\n     *\n     * Any custom element added here will not be sanitized and thus rendered.\n     * Can also be set via `limel-config`. Setting this property will override\n     * the global config.\n     * @alpha\n     */\n    @Prop()\n    public whitelist?: CustomElementDefinition[] =\n        globalConfig.markdownWhitelist;\n\n    /**\n     * Enable lazy loading for images\n     */\n    @Prop()\n    public lazyLoadImages: boolean = false;\n\n    @Watch('value')\n    public async textChanged() {\n        try {\n            const html = await markdownToHTML(this.value, {\n                forceHardLineBreaks: true,\n                whitelist: this.whitelist ?? [],\n                lazyLoadImages: this.lazyLoadImages,\n            });\n\n            this.rootElement.innerHTML = html;\n\n            if (this.lazyLoadImages) {\n                this.imageLazyLoader.setupLazyLoading(this.rootElement);\n            }\n        } catch (error) {\n            // eslint-disable-next-line no-console\n            console.error(error);\n        }\n    }\n\n    private rootElement: HTMLDivElement;\n    private imageLazyLoader: ImageLazyLoader = new ImageLazyLoader();\n\n    public async componentDidLoad() {\n        this.textChanged();\n    }\n\n    public disconnectedCallback() {\n        this.imageLazyLoader.disconnect();\n    }\n\n    public render() {\n        return [\n            <div\n                id=\"markdown\"\n                ref={(el) => (this.rootElement = el as HTMLDivElement)}\n            />,\n        ];\n    }\n}\n"],"mappings":"oOAAaA,EAAbC,cA4BqBC,KAAAC,mBACbC,IAEAA,EAAQC,SAASC,IACb,GAAIA,EAAMC,eAAgB,CACtB,MAAMC,EAAMF,EAAMG,OAClB,MAAMC,EAAUF,EAAIG,aAAa,YAEjC,GAAID,EAAS,CACTF,EAAII,aAAa,MAAOF,GACxBF,EAAIK,gBAAgB,W,CAGxBX,KAAKY,SAASC,UAAUP,E,IAE9B,C,CApCCQ,iBAAiBC,GACpBf,KAAKgB,aAEL,MAAMC,EAASF,EAAiBG,iBAAiB,OACjD,IAAKD,EAAOE,OAAQ,CAChB,M,CAGJnB,KAAKY,SAAW,IAAIQ,qBAAqBpB,KAAKC,oBAE9CgB,EAAOd,SAASG,IACZN,KAAKY,SAASS,QAAQf,EAAI,G,CAI3BU,aACH,GAAIhB,KAAKY,SAAU,CACfZ,KAAKY,SAASI,Y,GCxB1B,MAAMM,EAAc,smN,MC8BPC,EAAQ,M,yBAgDTvB,KAAAwB,gBAAmC,IAAI1B,E,oCA7B3C2B,EAAaC,kB,oBAMgB,K,CAG1BC,oB,MACH,IACI,MAAMC,QAAaC,EAAe7B,KAAK8B,MAAO,CAC1CC,oBAAqB,KACrBC,WAAWC,EAAAjC,KAAKgC,aAAS,MAAAC,SAAA,EAAAA,EAAI,GAC7BC,eAAgBlC,KAAKkC,iBAGzBlC,KAAKmC,YAAYC,UAAYR,EAE7B,GAAI5B,KAAKkC,eAAgB,CACrBlC,KAAKwB,gBAAgBV,iBAAiBd,KAAKmC,Y,EAEjD,MAAOE,GAELC,QAAQD,MAAMA,E,EAOfV,yBACH3B,KAAKuC,a,CAGFC,uBACHxC,KAAKwB,gBAAgBR,Y,CAGlByB,SACH,MAAO,CACHC,EAAA,OACIC,GAAG,WACHC,IAAMC,GAAQ7C,KAAKmC,YAAcU,I"}