{"version":3,"names":["tableCss","TableExampleCustomComponents","constructor","hostRef","this","columns","addUnit","unit","value","componentWillLoad","title","field","formatter","component","name","capitalizeStrings","capitalize","horizontalAlign","Array","isArray","map","v","join","render","h","data"],"sources":["./src/components/table/examples/table.scss?tag=limel-example-table-custom-components&encapsulation=shadow","./src/components/table/examples/table-custom-components.tsx"],"sourcesContent":[":host {\n    display: block;\n}\n\nlimel-table {\n    height: 300px;\n}\n","import { Component, h } from '@stencil/core';\nimport { Column } from '@limetech/lime-elements';\nimport { data, Bird } from './birds';\nimport { capitalize } from 'lodash-es';\n\n/**\n * Custom components\n *\n * You can specify a custom component to use for any column in your table. This\n * is done under the `component` key in the schema, following the\n * [TableComponentDefinition](#/type/TableComponentDefinition/) specification,\n * for example:\n *\n * ```ts\n * const columns = [\n *     {\n *         title: 'Food',\n *         field: 'food',\n *         component: { name: 'my-fancy-food-displayer' },\n *     },\n * ];\n * ```\n *\n * While you can, in principle, use any component in a table, your custom table\n * components should implement the [TableComponent](#/type/TableComponent/)\n * interface.\n *\n * @sourceFile birds.ts\n * @sourceFile table-food.tsx\n */\n@Component({\n    tag: 'limel-example-table-custom-components',\n    styleUrl: 'table.scss',\n    shadow: true,\n})\nexport class TableExampleCustomComponents {\n    private columns: Array<Column<Bird>> = [];\n\n    public componentWillLoad() {\n        this.columns = [\n            { title: 'Name', field: 'name' },\n            { title: 'Binominal name', field: 'binominalName' },\n            {\n                title: 'Wingspan',\n                field: 'wingspan',\n                formatter: this.addUnit('cm'),\n            },\n            {\n                title: 'Food',\n                field: 'food',\n                component: { name: 'limel-example-table-food' },\n            },\n            {\n                title: 'Habitat',\n                field: 'habitat',\n                formatter: this.capitalizeStrings,\n            },\n            { title: 'Nest type', field: 'nest', formatter: capitalize },\n            {\n                title: 'Eggs per clutch',\n                field: 'eggs',\n                horizontalAlign: 'right',\n            },\n            { title: 'Origin', field: 'origin' },\n        ];\n    }\n\n    private addUnit = (unit: string) => (value: any) => {\n        return `${value} ${unit}`;\n    };\n\n    private capitalizeStrings(value: string | string[]) {\n        if (typeof value === 'string') {\n            return capitalize(value);\n        }\n\n        if (Array.isArray(value)) {\n            return value.map((v) => capitalize(v)).join(', ');\n        }\n\n        return value;\n    }\n\n    public render() {\n        return <limel-table data={data} columns={this.columns} />;\n    }\n}\n"],"mappings":"qUAAA,MAAMA,EAAW,gD,MCmCJC,EAA4B,MALzCC,YAAAC,G,UAMYC,KAAAC,QAA+B,GA+B/BD,KAAAE,QAAWC,GAAkBC,GAC1B,GAAGA,KAASD,G,CA9BhBE,oBACHL,KAAKC,QAAU,CACX,CAAEK,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,iBAAkBC,MAAO,iBAClC,CACID,MAAO,WACPC,MAAO,WACPC,UAAWR,KAAKE,QAAQ,OAE5B,CACII,MAAO,OACPC,MAAO,OACPE,UAAW,CAAEC,KAAM,6BAEvB,CACIJ,MAAO,UACPC,MAAO,UACPC,UAAWR,KAAKW,mBAEpB,CAAEL,MAAO,YAAaC,MAAO,OAAQC,UAAWI,GAChD,CACIN,MAAO,kBACPC,MAAO,OACPM,gBAAiB,SAErB,CAAEP,MAAO,SAAUC,MAAO,U,CAQ1BI,kBAAkBP,GACtB,UAAWA,IAAU,SAAU,CAC3B,OAAOQ,EAAWR,E,CAGtB,GAAIU,MAAMC,QAAQX,GAAQ,CACtB,OAAOA,EAAMY,KAAKC,GAAML,EAAWK,KAAIC,KAAK,K,CAGhD,OAAOd,C,CAGJe,SACH,OAAOC,EAAA,eAAaC,KAAMA,EAAMpB,QAASD,KAAKC,S"}