{"version":3,"names":["chipCss","Chip","this","renderAsButton","h","id","identifier","class","role","disabled","readonly","loading","onKeyDown","handleDeleteKeyDown","renderSpinner","renderPicture","renderLabel","renderBadge","renderProgressBar","renderRemoveButton","renderActionsMenu","renderAsLink","rel","getRel","_a","link","target","_b","href","title","tabindex","text","filterClickWhenDisabled","e","preventDefault","handleRemoveClick","event","stopPropagation","remove","emit","removable","keys","DELETE","BACKSPACE","includes","key","removeChipLabel","getTranslation","actionMenuLabel","translate","get","language","handleActionMenuSelect","menuItem","detail","value","menuItemSelected","handleActionMenuCancel","crypto","randomUUID","componentWillLoad","makeEnterClickable","host","disconnectedCallback","removeEnterClickable","render","Host","onClick","icon","getIconName","image","isEmpty","src","alt","badge","name","style","color","backgroundColor","label","menuItems","length","svgData","tabIndex","innerHTML","getMenuItems","items","onSelect","openDirection","onCancel","slot","separator","indeterminate","progress","currentPercentage","linearProgressCss","PERCENT","LinearProgress","isFinite","loadingText","ariaLabel","ariaValueNow","undefined","ariaValueText","accessibleLabel","watchValue","newValue","updateProgress","setProperty","Number"],"sources":["./src/components/chip/chip.scss?tag=limel-chip&encapsulation=shadow","./src/components/chip/chip.tsx","./src/components/linear-progress/linear-progress.scss?tag=limel-linear-progress&encapsulation=shadow","./src/components/linear-progress/linear-progress.tsx"],"sourcesContent":["@use '../../style/mixins';\n\n/**\n* @prop --chip-max-width: Maximum width of the chip. Defaults to `10rem`. Keep in mind that the chips should not appear too big.\n* @prop --chip-progress-color: Color of the progress bar. Defaults to `rgb(var(--contrast-700))`.\n* @prop --chip-readonly-border-color: Color of the border in readonly state. Defaults to `rgb(var(--contrast-800), 0.5)`.\n*/\n\n:host(limel-chip) {\n    --limel-chip-height: var(--limel-chip-size, 1.75rem);\n    --limel-chip-gap: 0.5rem;\n    isolation: isolate;\n    display: inline-flex;\n    align-items: center;\n    min-width: 0;\n}\n\n:host(limel-chip[size='small']) {\n    --limel-chip-height: 1.5rem;\n    --limel-chip-gap: 0.25rem;\n}\n\n* {\n    box-sizing: border-box;\n}\n\n.chip {\n    all: unset;\n    position: relative;\n\n    min-width: 0;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: min(var(--chip-max-width, 100%), 25rem);\n    height: var(--limel-chip-height);\n\n    border-radius: var(--limel-chip-height);\n    font-size: clamp(\n        0.8125rem /* 13px */,\n        calc(var(--limel-chip-height) - 0.875rem /* 14px */),\n        1rem\n    );\n    padding: 0 0.125rem;\n\n    &:has(limel-icon),\n    &:has(img) {\n        .text {\n            padding-left: 0;\n        }\n    }\n\n    &:not([disabled]) {\n        @include mixins.visualize-keyboard-focus;\n        @include mixins.is-elevated-inset-clickable;\n    }\n\n    &:has(limel-badge) {\n        padding-right: 0.375rem;\n\n        .text {\n            padding-right: 0;\n        }\n    }\n\n    &:has(+ .remove-button:hover) {\n        box-shadow: var(--shadow-depth-8-error);\n    }\n\n    &:has(+ limel-menu),\n    &:has(+ .trailing-button) {\n        padding-right: calc(var(--limel-chip-height) + 0.125rem);\n\n        .text {\n            padding-right: 0;\n        }\n    }\n}\n\n:host(limel-chip[disabled]:not([disabled='false'])) {\n    .chip {\n        // Similar to `limel-button[disabled]`\n        color: rgba(var(--contrast-1600), 0.37);\n        background-color: rgba(var(--contrast-1600), 0.1);\n        box-shadow: none;\n    }\n}\n\n:host(limel-chip[readonly]:not([readonly='false'])) {\n    .chip {\n        box-shadow: 0 0 0 1px\n            var(--chip-readonly-border-color, rgb(var(--contrast-800), 0.5));\n    }\n}\n\n:host(limel-chip[selected]:not([selected='false'])) {\n    .chip {\n        box-shadow: var(--button-shadow-inset);\n\n        &:focus-visible {\n            box-shadow:\n                var(--button-shadow-inset), var(--shadow-depth-8-focused);\n        }\n\n        &:active {\n            box-shadow: var(--button-shadow-inset-pressed);\n        }\n    }\n    .text {\n        color: var(--lime-primary-color, var(--limel-theme-primary-color));\n    }\n}\n\n:host(limel-chip[type='filter']) {\n    .chip {\n        border-top-left-radius: 0.5rem;\n        border-bottom-left-radius: 0.5rem;\n\n        &:after {\n            content: '';\n            transition:\n                background-color 0.4s ease 0.2s,\n                box-shadow 0.6s ease 0.2s;\n            box-sizing: border-box;\n            position: absolute;\n            bottom: 0.125rem;\n            left: 0.125rem;\n            width: 0.5rem;\n            height: 0.5rem;\n            border-radius: 50%;\n            background-color: rgb(var(--contrast-800), 0.8);\n            box-shadow: 0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[type='filter'][selected]) {\n    .chip {\n        &:after {\n            background-color: rgb(var(--color-green-default));\n            box-shadow:\n                0 0 0.375rem 0 rgb(var(--color-green-light)),\n                0 0 0 1px rgb(var(--color-white)) inset;\n        }\n    }\n}\n\n:host(limel-chip[invalid]) {\n    .chip {\n        @include mixins.add-chessboard-background();\n        background-color: rgb(var(--color-red-default));\n    }\n\n    .text {\n        color: rgb(var(--color-white));\n    }\n}\n\nimg,\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n}\n\nimg {\n    object-fit: cover;\n    border-radius: 50%;\n}\n\nlimel-icon {\n    padding: 0.0625rem;\n}\n\nlimel-badge {\n    pointer-events: none;\n}\n\n.text {\n    @include mixins.truncate-text;\n    line-height: 1.2;\n    padding: 0 0.5rem;\n    font-size: var(--limel-theme-default-font-size);\n}\n\n.trailing-button {\n    all: unset;\n    @include mixins.is-flat-clickable();\n\n    z-index: 1;\n    flex-shrink: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    margin-left: calc(var(--limel-chip-height) * -1 + 0.125rem);\n    margin-right: 0.125rem;\n    width: calc(var(--limel-chip-height) - 0.25rem);\n    height: calc(var(--limel-chip-height) - 0.25rem);\n\n    border-radius: 50%;\n\n    svg {\n        transition:\n            color 0.2s ease,\n            transform 0.2s ease;\n        width: 1.25rem;\n    }\n\n    &.remove-button:hover {\n        color: rgb(var(--color-red-dark));\n        svg {\n            transform: scale(0.8);\n        }\n    }\n}\n\nlimel-menu {\n    button[slot='trigger'] {\n        @include mixins.visualize-keyboard-focus;\n    }\n\n    &[open] {\n        button[slot='trigger'] {\n            box-shadow: var(--button-shadow-inset);\n        }\n    }\n}\n\n@import './partial-styles/_loading.scss';\n@import './partial-styles/_progress.scss';\n","import {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n} from '@stencil/core';\nimport { Icon } from '../../global/shared-types/icon.types';\nimport { Languages } from '../date-picker/date.types';\nimport { Link } from '../../global/shared-types/link.types';\nimport { getRel } from '../../util/link-helper';\nimport { getIconName } from '../icon/get-icon-props';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport translate from '../../global/translations';\nimport { BACKSPACE, DELETE } from '../../util/keycodes';\nimport { ChipType, Chip as OldChipInterface } from '../chip-set/chip.types';\nimport { Image } from '../../global/shared-types/image.types';\nimport { isEmpty } from 'lodash-es';\n\nimport { ListSeparator } from '../list-item/list-item.types';\nimport { LimelMenuCustomEvent, MenuItem } from '../../components';\n\ninterface ChipInterface extends Omit<OldChipInterface, 'id' | 'badge'> {\n    /**\n     * Identifier for the chip. Must be unique.\n     */\n    identifier?: number | string;\n\n    /**\n     * The value of the badge.\n     */\n    badge?: string | number;\n}\n\n/**\n * Chips and buttons are both interactive elements in UI design,\n * but they serve different purposes and are used in different contexts.\n *\n * :::warning\n * Do not use the chip component carelessly, as an alternative for\n * [`limel-button`](#/component/limel-button/) in the UI design!\n *\n * **Buttons:**\n * Buttons are used to trigger actions. They are typically used to\n * submit forms, open dialogs, initiate a process, or perform any action\n * that changes the state of the application.\n * Buttons' labels usually contain action words, in other words, the labels is\n * a _verb in imperative mood_ such as \"Submit\" or \"Delete\".\n * Buttons are placed in areas where it's clear they will initiate\n * an action when clicked.\n *\n * **Chips:**\n * Chips however are elements which may look like buttons, but they are\n * representing choices, filters, or tags, in a small block\n * or clearly bundled into a group. Chips are rarely used alone in the\n * user interface.\n * They are often used in a so called \"chip-set\", or placed together in\n * a section of the UI, where the user can expect more than one chip to be present.\n *\n * For example, a chip may represent a filter in a filter bar, or a tag in a tag list,\n * or an item in a shopping list.\n * Clicking a chip can also trigger an action, for example toggling a filter ON or OFF,\n * or opening a page with all posts tagged with the tag represented by the chip,\n * or navigating to a page with more information about the item in the shopping list.\n * :::\n *\n * @exampleComponent limel-example-chip-button\n * @exampleComponent limel-example-chip-link\n * @exampleComponent limel-example-chip-icon-colors\n * @exampleComponent limel-example-chip-image\n * @exampleComponent limel-example-chip-badge\n * @exampleComponent limel-example-chip-filter\n * @exampleComponent limel-example-chip-removable\n * @exampleComponent limel-example-chip-menu\n * @exampleComponent limel-example-chip-loading\n * @exampleComponent limel-example-chip-progress\n * @exampleComponent limel-example-chip-size\n * @exampleComponent limel-example-chip-readonly-border\n * @exampleComponent limel-example-chip-aria-role\n */\n@Component({\n    tag: 'limel-chip',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'chip.scss',\n})\nexport class Chip implements ChipInterface {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * Label displayed on the chip\n     */\n    @Prop({ reflect: true })\n    public text: string;\n\n    /**\n     * Icon of the chip.\n     */\n    @Prop()\n    public icon?: string | Icon;\n\n    /**\n     * A picture to be displayed instead of the icon on the chip.\n     */\n    @Prop()\n    public image?: Image;\n\n    /**\n     * If supplied, the chip will become a clickable link.\n     */\n    @Prop()\n    public link?: Omit<Link, 'text'>;\n\n    /**\n     * The value of the badge, displayed on the chip.\n     */\n    @Prop({ reflect: true })\n    public badge?: string | number;\n\n    /**\n     * Set to `true` to disable the chip.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to render the chip as a static UI element.\n     * Useful when the parent component has a `readonly` state.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to visualize the chip in a \"selected\" state.\n     * This is typically used when the chip is used in a chip-set\n     * along with other chips.\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * Set to `true` to visualize the chip in an \"invalid\" or \"error\" state.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Set to `true` to render a remove button on the chip.\n     */\n    @Prop({ reflect: true })\n    public removable = false;\n\n    /**\n     * Set to `filter` to render the chip with a distinct style\n     * suitable for visualizing filters.\n     *\n     */\n    @Prop({ reflect: true })\n    public type?: ChipType = 'default';\n\n    /**\n     * Set to `true` to put the component in the `loading` state,\n     * and render an indeterminate progress indicator inside the chip.\n     * This does _not_ disable the interactivity of the chip!\n     */\n    @Prop({ reflect: true })\n    public loading? = false;\n\n    /**\n     * Reflects the current value of a progress bar on the chip,\n     * visualizing the percentage of an ongoing process.\n     * Must be a number between `0` and `100`.\n     */\n    @Prop({ reflect: true })\n    public progress?: number;\n\n    /**\n     * Identifier for the chip. Must be unique.\n     */\n    @Prop({ reflect: true })\n    public identifier?: number | string = crypto.randomUUID();\n\n    /**\n     * Defines the size of the chip.\n     */\n    @Prop({ reflect: true })\n    public size: 'small' | 'default' = 'default';\n\n    /**\n     * When provided, the chip will render an ellipsis menu with the supplied items.\n     * Also, this will hide the \"remove button\" when `removable={true}`, as\n     * the remove button will automatically become the last item in the menu.\n     */\n    @Prop()\n    public menuItems?: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Fired when clicking on the remove button of a `removable` chip.\n     * The value of `identifier` is emitted as the event detail.\n     */\n    @Event()\n    public remove: EventEmitter<number | string>;\n\n    /**\n     * Emitted when a menu item is selected from the actions menu.\n     */\n    @Event()\n    public menuItemSelected: EventEmitter<MenuItem>;\n\n    @Element()\n    private host: HTMLLimelChipElement;\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    public render() {\n        return (\n            <Host onClick={this.filterClickWhenDisabled}>\n                {this.link ? this.renderAsLink() : this.renderAsButton()}\n            </Host>\n        );\n    }\n\n    private renderAsButton = () => {\n        return [\n            <button\n                id={'chip-' + this.identifier}\n                class=\"chip\"\n                role=\"button\"\n                disabled={this.disabled || this.readonly}\n                aria-busy={this.loading ? 'true' : 'false'}\n                aria-live=\"polite\"\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderSpinner()}\n                {this.renderPicture()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n                {this.renderProgressBar()}\n            </button>,\n            this.renderRemoveButton(),\n            this.renderActionsMenu(),\n        ];\n    };\n\n    private renderAsLink = () => {\n        const rel = getRel(this.link?.target, this.link?.rel);\n\n        return [\n            <a\n                id={'chip-' + this.identifier}\n                class=\"chip\"\n                href={this.link.href}\n                title={this.link.title}\n                target={this.link.target}\n                rel={rel}\n                aria-disabled={this.disabled || this.readonly}\n                tabindex={this.disabled || this.readonly ? -1 : 0}\n                onKeyDown={this.handleDeleteKeyDown}\n            >\n                {this.renderSpinner()}\n                {this.renderPicture()}\n                {this.renderLabel()}\n                {this.renderBadge()}\n                {this.renderProgressBar()}\n            </a>,\n            this.renderRemoveButton(),\n            this.renderActionsMenu(),\n        ];\n    };\n\n    private renderLabel = () => {\n        return <span class=\"text\">{this.text}</span>;\n    };\n\n    private renderPicture() {\n        const icon = getIconName(this.icon);\n\n        if (!icon && !this.image) {\n            return;\n        }\n\n        if (!isEmpty(this.image)) {\n            return (\n                <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />\n            );\n        }\n\n        return (\n            <limel-icon\n                badge={true}\n                name={icon}\n                style={{\n                    color: `${(this.icon as Icon)?.color}`,\n                    'background-color': `${\n                        (this.icon as Icon)?.backgroundColor\n                    }`,\n                }}\n            />\n        );\n    }\n\n    private renderBadge() {\n        if (!this.badge) {\n            return;\n        }\n\n        return <limel-badge label={this.badge} />;\n    }\n\n    private renderRemoveButton() {\n        if (\n            !this.removable ||\n            this.readonly ||\n            this.disabled ||\n            !!this.menuItems?.length\n        ) {\n            return;\n        }\n\n        const svgData =\n            '<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" d=\"m8 8 16 16M24 8 8 24\"/></svg>';\n\n        return (\n            <button\n                class=\"trailing-button remove-button\"\n                tabIndex={-1}\n                aria-label={this.removeChipLabel()}\n                aria-controls={'chip-' + this.identifier}\n                innerHTML={svgData}\n                onClick={this.handleRemoveClick}\n            />\n        );\n    }\n\n    private renderActionsMenu() {\n        if (!this.menuItems?.length) {\n            return;\n        }\n\n        const svgData =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" xml:space=\"preserve\"><circle fill=\"currentColor\" cx=\"16\" cy=\"16\" r=\"2\"/><circle fill=\"currentColor\" cx=\"16\" cy=\"24\" r=\"2\"/><circle fill=\"currentColor\" cx=\"16\" cy=\"8\" r=\"2\"/></svg>';\n\n        const menuItems = this.getMenuItems();\n\n        return (\n            <limel-menu\n                items={menuItems}\n                onSelect={this.handleActionMenuSelect}\n                openDirection=\"bottom-end\"\n                onCancel={this.handleActionMenuCancel}\n            >\n                <button\n                    slot=\"trigger\"\n                    disabled={this.disabled}\n                    class=\"trailing-button\"\n                    aria-label={this.actionMenuLabel()}\n                    innerHTML={svgData}\n                />\n            </limel-menu>\n        );\n    }\n\n    private getMenuItems() {\n        let menuItems = [...this.menuItems];\n\n        if (this.removable) {\n            menuItems = [\n                ...menuItems,\n                { separator: true },\n                {\n                    text: this.removeChipLabel(),\n                    icon: {\n                        name: 'delete_sign',\n                        color: 'rgb(var(--color-red-default))',\n                    },\n                    value: '_remove',\n                },\n            ];\n        }\n\n        return menuItems;\n    }\n\n    private filterClickWhenDisabled = (e) => {\n        if (this.disabled || this.readonly) {\n            e.preventDefault();\n        }\n    };\n\n    private handleRemoveClick = (event: MouseEvent | KeyboardEvent) => {\n        event.stopPropagation();\n        this.remove.emit(this.identifier);\n    };\n\n    private handleDeleteKeyDown = (event: KeyboardEvent) => {\n        if (!this.removable) {\n            return;\n        }\n\n        const keys = [DELETE, BACKSPACE];\n\n        if (keys.includes(event.key)) {\n            this.handleRemoveClick(event);\n        }\n    };\n\n    private removeChipLabel = (): string => {\n        return `${this.getTranslation('remove')} ${this.text}`;\n    };\n\n    private actionMenuLabel = (): string => {\n        return this.getTranslation('file-viewer.more-actions');\n    };\n\n    private getTranslation = (key: string) => {\n        return translate.get(key, this.language);\n    };\n\n    private renderSpinner() {\n        if (!this.loading) {\n            return;\n        }\n\n        return <limel-linear-progress indeterminate={true} />;\n    }\n\n    private renderProgressBar() {\n        if (!this.progress) {\n            return;\n        }\n\n        const currentPercentage = this.progress + '%';\n\n        return (\n            <div\n                role=\"progressbar\"\n                aria-label=\"%\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={this.progress}\n                style={{\n                    '--limel-chip-progress-percentage': currentPercentage,\n                }}\n            />\n        );\n    }\n\n    private handleActionMenuSelect = (\n        event: LimelMenuCustomEvent<MenuItem>\n    ) => {\n        const menuItem = event.detail;\n\n        if (!menuItem) {\n            return;\n        }\n\n        if (menuItem.value === '_remove') {\n            this.remove.emit(this.identifier);\n\n            return;\n        }\n\n        this.menuItemSelected.emit(menuItem);\n    };\n\n    private handleActionMenuCancel = (event: LimelMenuCustomEvent<void>) => {\n        event.stopPropagation();\n    };\n}\n","/**\n * @prop --background-color: Color to use for progress-bar track.\n */\n\n:host(limel-linear-progress) {\n    isolation: isolate;\n    position: relative;\n    overflow: hidden;\n\n    display: flex;\n    width: 100%;\n    height: 0.25rem;\n    border-radius: 0.25rem;\n\n    background-color: var(--background-color, rgb(var(--contrast-800), 0.5));\n}\n\n.progress {\n    height: 100%;\n    width: var(--percentage, 0%);\n\n    border-radius: 0.25rem;\n    background-color: var(\n        --lime-primary-color,\n        var(--limel-theme-primary-color)\n    );\n}\n\n:host(limel-linear-progress[indeterminate]) {\n    .progress {\n        background-color: transparent;\n        width: 100%;\n\n        &:before,\n        &:after {\n            will-change: left, right, opacity;\n            content: '';\n            position: absolute;\n            inset: 0;\n            height: 100%;\n            border-radius: 0.25rem;\n            opacity: 0;\n            background-color: var(\n                --lime-primary-color,\n                var(--limel-theme-primary-color)\n            );\n        }\n\n        &:before {\n            animation: indeterminate 2.1s\n                cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n        }\n\n        &:after {\n            animation: indeterminate-short 2.1s\n                cubic-bezier(0.165, 0.84, 0.44, 1) infinite 1.15s;\n        }\n    }\n}\n\n@keyframes indeterminate {\n    0% {\n        left: -35%;\n        right: 100%;\n        opacity: 0;\n    }\n    10%,\n    80% {\n        opacity: 1;\n    }\n    60% {\n        left: 100%;\n        right: -90%;\n    }\n    100% {\n        left: 100%;\n        right: -90%;\n        opacity: 0;\n    }\n}\n\n@keyframes indeterminate-short {\n    0% {\n        left: -200%;\n        right: 100%;\n        opacity: 0;\n    }\n    10%,\n    80% {\n        opacity: 1;\n    }\n    60% {\n        left: 107%;\n        right: -8%;\n    }\n    100% {\n        left: 107%;\n        right: -8%;\n        opacity: 0;\n    }\n}\n","import { Component, Element, h, Host, Prop, Watch } from '@stencil/core';\nimport { Languages } from '../date-picker/date.types';\nimport translate from '../../global/translations';\n\nconst PERCENT = 100;\n\n/**\n * The linear progress component can be used to visualize the current state of a progress in a scale;\n * for example percentage of completion of a task.\n *\n * @exampleComponent limel-example-linear-progress\n * @exampleComponent limel-example-linear-progress-indeterminate\n * @exampleComponent limel-example-linear-progress-accessible-label\n * @exampleComponent limel-example-linear-progress-color\n */\n@Component({\n    tag: 'limel-linear-progress',\n    shadow: true,\n    styleUrl: 'linear-progress.scss',\n})\nexport class LinearProgress {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * The value of the progress bar. Should be between `0` and `1`.\n     */\n    @Prop({ reflect: true })\n    public value: number = 0;\n\n    /**\n     * Puts the progress bar in an indeterminate state\n     */\n    @Prop({ reflect: true })\n    public indeterminate: boolean = false;\n\n    /**\n     * A label used to describe the purpose of the element to users\n     * of assistive technologies, like screen readers.\n     * If not provided, the generic word of \"Progress bar\" will be used.\n     */\n    @Prop({ reflect: true })\n    public accessibleLabel?: string;\n\n    @Element()\n    private host: HTMLLimelLinearProgressElement;\n\n    public render() {\n        if (!this.isFinite(this.value)) {\n            return;\n        }\n\n        const loadingText = translate.get('loading', this.language);\n        const ariaLabel = translate.get('progress-bar', this.language);\n        const ariaValueNow = this.indeterminate ? undefined : this.value;\n        const ariaValueText = this.indeterminate ? loadingText : undefined;\n\n        return (\n            <Host\n                role=\"progressbar\"\n                aria-label={this.accessibleLabel || ariaLabel}\n                aria-live=\"polite\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"1\"\n                aria-valuenow={ariaValueNow}\n                aria-valuetext={ariaValueText}\n                style={{ '--percentage': `${this.value * PERCENT}%` }}\n            >\n                <div class=\"progress\" />\n            </Host>\n        );\n    }\n\n    @Watch('value')\n    protected watchValue(newValue: number) {\n        if (!this.isFinite(newValue)) {\n            return;\n        }\n\n        this.updateProgress(newValue);\n    }\n\n    private updateProgress(value: number): void {\n        if (this.host) {\n            this.host.style.setProperty('--percentage', `${value * PERCENT}%`);\n        }\n    }\n\n    private isFinite(value: unknown) {\n        return Number.isFinite(value);\n    }\n}\n"],"mappings":"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"}