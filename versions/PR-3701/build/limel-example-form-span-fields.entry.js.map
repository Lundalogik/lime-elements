{"version":3,"names":["schema","title","description","type","lime","layout","columns","dense","properties","field1","field2","colSpan","field3","field4","field5","component","name","rowSpan","field6","props","field7","minimum","maximum","multipleOf","FormLayoutExample","this","handleFormChange","event","formData","detail","handleFormValidate","valid","console","log","handleSubmit","json","JSON","stringify","alert","handleCheckboxChange","Object","assign","render","h","style","label","value","onChange","onValidate","primary","disabled","onClick"],"sources":["./src/components/form/examples/span-fields-schema.ts","./src/components/form/examples/span-fields.tsx"],"sourcesContent":["import { FormSchema } from '@limetech/lime-elements';\n\nexport const schema: FormSchema = {\n    title: 'A form with fields that span columns and rows',\n    description:\n        'This main form has a grid layout with 5 columns. Notice how fields reorder to fill holes when the \"Dense layout\" is enabled. You may need to resize your browser window to see this responsive layout in effect.',\n    type: 'object',\n    lime: {\n        layout: {\n            type: 'grid',\n            columns: 5,\n            dense: true,\n        },\n    },\n    properties: {\n        field1: {\n            type: 'string',\n            title: 'Nr. 1: spans 1 column',\n        },\n        field2: {\n            type: 'integer',\n            title: 'Nr. 2: spans 2 columns',\n            lime: {\n                layout: {\n                    colSpan: 2,\n                },\n            },\n        },\n        field3: {\n            type: 'string',\n            title: 'Nr. 3: spans 2 columns',\n            lime: {\n                layout: {\n                    colSpan: 2,\n                },\n            },\n        },\n        field4: {\n            type: 'string',\n            title: 'Nr. 4: spans 1 columns',\n        },\n        field5: {\n            type: 'number',\n            title: 'Nr. 6: spans 2 columns & 3 rows',\n            lime: {\n                component: {\n                    name: 'limel-example-form-map-component',\n                },\n                layout: {\n                    colSpan: 2,\n                    rowSpan: 3,\n                },\n            },\n        },\n        field6: {\n            type: 'string',\n            title: 'Nr. 5: spans 2 columns & 2 rows',\n            lime: {\n                component: {\n                    props: {\n                        type: 'textarea',\n                    },\n                },\n                layout: {\n                    colSpan: 2,\n                    rowSpan: 2,\n                },\n            },\n        },\n        field7: {\n            type: 'number',\n            title: 'Nr. 7: spans all columns',\n            minimum: 0,\n            maximum: 100,\n            multipleOf: 10,\n            lime: {\n                layout: {\n                    colSpan: 'all',\n                },\n            },\n        },\n    },\n};\n","import { ValidationStatus } from '@limetech/lime-elements';\nimport { Component, h, State } from '@stencil/core';\nimport { schema } from './span-fields-schema';\n\n/**\n * Stretching fields in a form\n *\n * Sometimes, you need a field in the form to occupy several columns or the\n * entire row, and stretch itself as wide as the form's width,\n * disregarding the form's layout and placement of the item in the list.\n *\n * This could be nice for fields that require more space to provide better\n * usability.\n *\n * :::tip\n * For example, a larger `textarea` is easier for the user to type in and\n * a `slider` that has many steps is easier to interact with when it is rendered wider.\n * :::\n *\n * To do so, in your schema you need to specify a `layout` for the field itself.\n * `span` specifies the number of columns that the field should span.\n *\n * Thus, `span` can be set to `2`, `3`, `4`, `5`, or `all`.\n * Since we do not offer a *form layout* that has more than five columns,\n * values higher than 5 (or higher than the maximum number of columns in the form)\n * will only force the field to be full-width, just like `all` does.\n *\n * ```ts\n * export const schema = {\n *     …\n *     properties: {\n *         name: {\n *             type: 'string',\n *             title: 'Comment',\n *             lime: {\n *                 layout: {\n *                       colSpan: 'all',\n *                   },\n *               },\n *         },\n *         …\n *     },\n *     …\n * };\n * ```\n *\n * ###### Dense layout (Auto reorder fields to avoid empty cells)\n * The order of fields and the number of columns that a field must span, can\n * affect the layout of your responsive form when the container width changes.\n *\n * Let's say you have a form with a 4 column layout, and you specify that its\n * second field must span 3 columns.\n * If the container's width decreases, it will force the form to render its\n * layout in 3 columns instead. Therefore, the second field has to jump\n * to the next line to still be able to span 3 columns.\n * This will leave 2 empty cells in the first row, right after the first field.\n *\n * To avoid these empty cells in the UI, limel-form will place the next available\n * field in this hole, provided it fits. So the hole may be filled by a single 2 column\n * wide field, by two 1 column wide fields, or only partially filled by a single 1 column\n * wide field. If none of the remaining fields fit, the hole will be left as it is.\n *\n * However, you can disable this functionality by setting `dense` to `false` in the\n * options for the grid layout.\n *\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     lime: {\n *         layout: {\n *             type: 'grid',\n *             dense: false,\n *         },\n *     },\n * };\n * ```\n *\n * :::note\n * Sometimes, the order of fields are important for the way users perceive the form.\n * If you choose to use the default auto-reordering behavior, make sure to test your\n * form's layout in different screen sizes to see whether you can mitigate unwanted\n * layout changes.\n *\n * Some unwanted results can be avoided by changing the order of the fields,\n * so that they render appropriately on different screens, or by dividing\n * the form into more sections.\n * :::\n *\n * ###### Stretching a field vertically\n * Most standard elements that can be used in forms, such as `limel-input`,\n * `limel-select`, `limel-slider`, etc, have a fixed height, and therefore\n * it does not really make sense to stretch them vertically, and we strongly\n * recommend you not to!\n *\n * But there are some exceptions. One of them is `limel-input-field` with\n * `type='textarea'`.\n *\n * Also, if you create a custom component for your form—let's say a map—you\n * can use `rowSpan` to increase the height of your custom component.\n * ```ts\n * export const schema = {\n *     type: 'object',\n *     properties: {\n *         comment: {\n *             type: 'string',\n *             title: 'Comment',\n *             lime: {\n *                 component: {\n *                     props: {\n *                         type: 'textarea',\n *                     },\n *                 },\n *                 layout: {\n *                       colSpan: 3,\n *                       rowSpan: 2,\n *                 },\n *             },\n *         },\n *     },\n * };\n * ```\n *\n * :::note\n * If you do *not* set the `rowSpan` for a component, it can stretch vertically\n * within its row, and the row will simply expand with the component.\n *\n * If you *do* set a `rowSpan`, even if you set it to `1`, the component is\n * fixed to that height. What happens to any potential overflow depends on the\n * component.\n * :::\n *\n * :::warning\n * Custom web-components that you include in the forms should not have hard-coded\n * `width` or `height` values! Otherwise they will stretch out of their cell and break\n * the UI. Make sure that such components are internally designed to be responsive,\n * and that their `:host` and any potential wrapping container has the following styles:\n * ```scss\n * :host {\n *     display: block; // or another suitable property\n *     width: 100%;\n *     height: 100%;\n * }\n * :host([hidden]) {\n *     display: none;\n * }\n * .my-component {\n *     width: 100%;\n *     height: 100%;\n * }\n * ```\n * :::\n *\n * @sourceFile span-fields-schema.ts\n */\n@Component({\n    tag: 'limel-example-form-span-fields',\n    shadow: true,\n})\nexport class FormLayoutExample {\n    @State()\n    private formData: Record<string, string> = {};\n\n    @State()\n    private valid = true;\n\n    @State()\n    private dense = true;\n\n    @State()\n    private schema = schema;\n\n    public render() {\n        return [\n            <limel-example-controls\n                style={{ '--example-controls-column-layout': 'auto-fit' }}\n            >\n                <limel-switch\n                    label=\"Dense layout\"\n                    value={this.dense}\n                    onChange={this.handleCheckboxChange}\n                />\n            </limel-example-controls>,\n            <limel-form\n                onChange={this.handleFormChange}\n                onValidate={this.handleFormValidate}\n                value={this.formData}\n                schema={this.schema}\n            />,\n            <limel-button\n                label=\"Submit\"\n                primary={true}\n                disabled={!this.valid}\n                onClick={this.handleSubmit}\n            />,\n        ];\n    }\n\n    private handleFormChange = (event) => {\n        this.formData = event.detail;\n    };\n\n    private handleFormValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.valid = event.detail.valid;\n        console.log(event.detail);\n    };\n\n    private handleSubmit = () => {\n        const json = JSON.stringify(this.formData, null, '    ');\n        alert(`Sending information to villains...\\n\\n${json}`);\n    };\n\n    private handleCheckboxChange = (event: CustomEvent<boolean>) => {\n        this.dense = event.detail;\n        this.schema = { ...this.schema };\n        this.schema.lime.layout.dense = this.dense;\n    };\n}\n"],"mappings":"+CAEO,MAAMA,EAAqB,CAC9BC,MAAO,gDACPC,YACI,mNACJC,KAAM,SACNC,KAAM,CACFC,OAAQ,CACJF,KAAM,OACNG,QAAS,EACTC,MAAO,OAGfC,WAAY,CACRC,OAAQ,CACJN,KAAM,SACNF,MAAO,yBAEXS,OAAQ,CACJP,KAAM,UACNF,MAAO,yBACPG,KAAM,CACFC,OAAQ,CACJM,QAAS,KAIrBC,OAAQ,CACJT,KAAM,SACNF,MAAO,yBACPG,KAAM,CACFC,OAAQ,CACJM,QAAS,KAIrBE,OAAQ,CACJV,KAAM,SACNF,MAAO,0BAEXa,OAAQ,CACJX,KAAM,SACNF,MAAO,kCACPG,KAAM,CACFW,UAAW,CACPC,KAAM,oCAEVX,OAAQ,CACJM,QAAS,EACTM,QAAS,KAIrBC,OAAQ,CACJf,KAAM,SACNF,MAAO,kCACPG,KAAM,CACFW,UAAW,CACPI,MAAO,CACHhB,KAAM,aAGdE,OAAQ,CACJM,QAAS,EACTM,QAAS,KAIrBG,OAAQ,CACJjB,KAAM,SACNF,MAAO,2BACPoB,QAAS,EACTC,QAAS,IACTC,WAAY,GACZnB,KAAM,CACFC,OAAQ,CACJM,QAAS,W,MCiFhBa,EAAiB,M,yBAuClBC,KAAAC,iBAAoBC,IACxBF,KAAKG,SAAWD,EAAME,MAAM,EAGxBJ,KAAAK,mBAAsBH,IAC1BF,KAAKM,MAAQJ,EAAME,OAAOE,MAC1BC,QAAQC,IAAIN,EAAME,OAAO,EAGrBJ,KAAAS,aAAe,KACnB,MAAMC,EAAOC,KAAKC,UAAUZ,KAAKG,SAAU,KAAM,QACjDU,MAAM,yCAAyCH,IAAO,EAGlDV,KAAAc,qBAAwBZ,IAC5BF,KAAKlB,MAAQoB,EAAME,OACnBJ,KAAKzB,OAAMwC,OAAAC,OAAA,GAAQhB,KAAKzB,QACxByB,KAAKzB,OAAOI,KAAKC,OAAOE,MAAQkB,KAAKlB,KAAK,E,cAtDH,G,WAG3B,K,WAGA,K,YAGCP,C,CAEV0C,SACH,MAAO,CACHC,EAAA,0BACIC,MAAO,CAAE,mCAAoC,aAE7CD,EAAA,gBACIE,MAAM,eACNC,MAAOrB,KAAKlB,MACZwC,SAAUtB,KAAKc,wBAGvBI,EAAA,cACII,SAAUtB,KAAKC,iBACfsB,WAAYvB,KAAKK,mBACjBgB,MAAOrB,KAAKG,SACZ5B,OAAQyB,KAAKzB,SAEjB2C,EAAA,gBACIE,MAAM,SACNI,QAAS,KACTC,UAAWzB,KAAKM,MAChBoB,QAAS1B,KAAKS,e"}