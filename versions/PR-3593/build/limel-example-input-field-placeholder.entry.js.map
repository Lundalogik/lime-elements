{"version":3,"names":["InputFieldPlaceholderExample","this","handleChange","event","value","detail","render","h","label","placeholder","helperText","onChange"],"sources":["./src/components/input-field/examples/input-field-placeholder.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n\n/**\n * Input Field with a placeholder\n *\n * The placeholder text is displayed inside the input field,\n * when the field is focused and empty.\n *\n * :::tip\n * A `placeholder` text is good for providing hints and examples about the expected input.\n * While the `helperText` is better for providing instructions.\n * :::\n *\n * Unlike `helperText` which is constantly visible while the user is typing\n * inside the field, the `placeholder` text disappears as soon as the user has\n * input anything.\n *\n * :::note\n * Make an informed decision when using `placeholder` instead of `helperText`!\n * You may have good intentions to reduce clutter on the user interface\n * and use a placeholder text, because it will disappear after user has started typing.\n * However, if the additional tips or instructions that you are trying to provide is\n * crucial or hard to remember, it is better to display them as helper text instead.\n *\n * This is because disappearing crucial information will strains users’ short-term memory.\n * In a form with many fields, users can easily forget\n * what each field was for. Especially if a field has validations that fail\n * for example after submitting. Instructions that are not visible anymore will make it\n * hard for the user to realize what the problem is or how to solve it.\n * :::\n * :::warning\n * If no `label` is provided, then the placeholder text will be displayed even if the\n * input field is not focused.\n *\n * However, this does not mean that you should use this\n * as a hack, to create a minimalistic and clean user interface. Not providing labels\n * will cause accessibility issues for users of assistive technologies,\n * and strains users’ short-term memory as explained above.\n * Additionally, users may confuse the placeholder text, as an automatically\n * inputted value, and skip filling in information.\n * :::\n */\n@Component({\n    tag: 'limel-example-input-field-placeholder',\n    shadow: true,\n})\nexport class InputFieldPlaceholderExample {\n    @State()\n    private value: string;\n\n    public render() {\n        return (\n            <limel-input-field\n                label=\"Your personal identity number\"\n                placeholder=\"example: 19990101-1234\"\n                helperText=\"Use correct format (12 digits, and a dash after your birth date)\"\n                value={this.value}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n}\n"],"mappings":"qDA8CaA,EAA4B,M,yBAgB7BC,KAAAC,aAAgBC,IACpBF,KAAKG,MAAQD,EAAME,MAAM,E,qBAbtBC,SACH,OACIC,EAAA,qBACIC,MAAM,gCACNC,YAAY,yBACZC,WAAW,mEACXN,MAAOH,KAAKG,MACZO,SAAUV,KAAKC,c"}