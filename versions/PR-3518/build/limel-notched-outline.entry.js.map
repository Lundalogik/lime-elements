{"version":3,"names":["notchedOutlineCss","NotchedOutline","render","h","name","class","this","renderLabel","label","htmlFor","labelId"],"sources":["./src/components/notched-outline/notched-outline.scss?tag=limel-notched-outline","./src/components/notched-outline/notched-outline.tsx"],"sourcesContent":["@use '../../style/mixins.scss';\n@use '../../style/internal/shared_input-select-picker';\n\n$border-radius: 0.25rem;\n\nlimel-notched-outline {\n    --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color};\n    --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-normal};\n\n    display: block;\n\n    *,\n    *:before,\n    *:after {\n        box-sizing: border-box;\n    }\n\n    [slot='content'] {\n        background-color: var(--limel-notched-outline-background-color);\n        border-radius: $border-radius;\n    }\n}\n\n.limel-notched-outline {\n    // Why is everything prefixed?\n    // Because the component has `shadow: false;`\n    // and this ensures that we are not inheriting styles.\n    pointer-events: none;\n    position: absolute;\n    bottom: var(--notched-outline-bottom, 0); //FIXME\n    inset: 0;\n\n    transition: bottom\n        var(--limel-h-l-grid-template-rows-transition-speed, 0.46s)\n        cubic-bezier(1, 0.09, 0, 0.89);\n\n    display: flex;\n    width: 100%;\n    height: 100%;\n\n    &--leading-outline,\n    &--notch,\n    &--trailing-outline {\n        transition: border-color 0.2s ease;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(--limel-notched-outline-border-color);\n    }\n\n    &--leading-outline {\n        flex-shrink: 0;\n        width: 0.75rem;\n        border-right-width: 0;\n        border-top-left-radius: $border-radius;\n        border-bottom-left-radius: $border-radius;\n    }\n\n    &--notch {\n        flex-shrink: 0;\n\n        position: relative;\n        z-index: 2;\n\n        border-top-color: var(\n            --limel-notched-outline-notch-border-top-color,\n            var(--limel-notched-outline-border-color)\n        );\n        border-right-width: 0;\n        border-left-width: 0;\n\n        max-width: calc(100% - 1.5rem);\n\n        label {\n            all: unset; // ensures that `label` is not inheriting styles\n            @include mixins.truncate-text;\n            position: relative;\n            transition:\n                color 0.2s ease,\n                font-size 0.2s ease,\n                transform 0.16s ease;\n\n            transform: var(\n                --limel-notched-outline-label-transform,\n                translate3d(0, 0.66rem, 0)\n            );\n            display: block;\n            padding: 0 0.25rem;\n\n            color: var(\n                --limel-notched-outline-label-color,\n                #{shared_input-select-picker.$label-color}\n            );\n            font-size: var(\n                --limel-notched-outline-label-font-size,\n                0.875rem\n            ); // 14px\n            letter-spacing: var(\n                --mdc-typography-subtitle1-letter-spacing,\n                0.009375em\n            );\n\n            &:after {\n                position: absolute;\n                right: 0;\n                padding: 0 0.25rem;\n            }\n        }\n    }\n\n    &--trailing-outline {\n        flex-grow: 1;\n        border-left-width: 0;\n        border-top-right-radius: $border-radius;\n        border-bottom-right-radius: $border-radius;\n    }\n}\n\nlimel-notched-outline:not([disabled]:not([disabled='false'])) {\n    &:hover {\n        --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color--hovered};\n        --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-hovered};\n    }\n\n    &:has([slot='content']:focus-visible),\n    &:has([slot='content']:focus-within) {\n        --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color--focused};\n        --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-focused};\n    }\n}\n\nlimel-notched-outline[disabled]:not([disabled='false']) {\n    --limel-notched-outline-label-color: #{shared_input-select-picker.$label-color-disabled};\n}\n\nlimel-notched-outline[required]:not([required='false']) {\n    .limel-notched-outline--notch {\n        label {\n            padding-right: 0.75rem;\n\n            &:after {\n                content: '*';\n                scale: 1.5;\n            }\n        }\n    }\n}\n\nlimel-notched-outline[invalid]:not([invalid='false']) {\n    --limel-notched-outline-border-color: var(--lime-error-text-color);\n    &:hover {\n        --limel-notched-outline-border-color: var(--lime-error-text-color);\n    }\n\n    .limel-notched-outline--notch {\n        label {\n            &:after {\n                color: var(--lime-error-text-color);\n            }\n        }\n    }\n}\n\nlimel-notched-outline[readonly]:not([readonly='false']) {\n    --limel-notched-outline-border-color: transparent !important;\n    --limel-notched-outline-background-color: transparent !important;\n}\n\n// Transitioning the floating label\nlimel-notched-outline:not([disabled]:not([disabled='false'])) {\n    &:hover,\n    &:focus,\n    &:focus-within {\n        label {\n            will-change: color, transform, font-size;\n        }\n    }\n\n    &:has([slot='content']:focus-visible),\n    &:has([slot='content']:focus-within) {\n        --limel-notched-outline-label-font-size: 0.65rem; // `10.4px` similar to MDC's floating label\n        --limel-notched-outline-label-transform: translate3d(0, -50%, 0);\n        --limel-notched-outline-notch-border-top-color: transparent;\n    }\n}\n","import { Component, Prop, h } from '@stencil/core';\n\n/**\n * This is a private component, used to render a notched outline\n * around all input elements that can have a floating label.\n * Inspired by Material Design's styles for input fields.\n * We use it in various components to unify styles and avoid\n * repeating code.\n *\n * :::note\n * The component has `shadow: false`. This is to improve performance,\n * and ensure that its internal elements are considered as a internal elements\n * of the consumer's DOM. This way, the value `for` in `<label for=\"id-of-input-element\">`\n * would be correctly associated with the input element's `id`, in the consumer component.\n * :::\n * @exampleComponent limel-example-notched-outline-basic\n * @private\n */\n@Component({\n    tag: 'limel-notched-outline',\n    styleUrl: 'notched-outline.scss',\n    shadow: false,\n})\nexport class NotchedOutline {\n    /**\n     * Set to `true` when the input element is required.\n     * This applies proper visual styles, such as inclusion of an asterisk\n     * beside the label.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * Set to `true` when the input element is readonly.\n     * This applies proper visual styles, such as making the outline transparent.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input element is\n     * invalid. This applies proper visual styles, such as making the outlines red.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Set to `true` to indicate that the input element is\n     * disabled. This applies proper visual styles, such as making the outlines\n     * and the label transparent.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Label to display for the input element.\n     * :::important\n     * Note that the input element of the consumer component will be\n     * labeled by this label, suing the `labelId` prop.\n     * :::\n     */\n    @Prop({ reflect: true })\n    public label?: string;\n\n    /**\n     * The `id` of the input element which should be\n     * labeled by the provided label.\n     */\n    @Prop({ reflect: true })\n    public labelId?: string;\n\n    /**\n     * Set to `true` when the user has entered a value for the input element.\n     * This applies proper visual styles, such as shrinking the label in size,\n     * and visually rendering it above the entered value.\n     */\n    @Prop({ reflect: true })\n    public hasValue = false;\n\n    public render() {\n        return [\n            <slot name=\"content\" />,\n            <span class=\"limel-notched-outline\">\n                <span class=\"limel-notched-outline--leading-outline\" />\n                {this.renderLabel()}\n                <span class=\"limel-notched-outline--trailing-outline\" />\n            </span>,\n        ];\n    }\n\n    private renderLabel() {\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <span class=\"limel-notched-outline--notch\">\n                <label htmlFor={this.labelId}>{this.label}</label>\n            </span>\n        );\n    }\n}\n"],"mappings":"+CAAA,MAAMA,EAAoB,uqK,MCuBbC,EAAc,M,uCAOL,M,cAOA,M,aAOD,M,cAQC,M,0DAyBA,K,CAEXC,SACH,MAAO,CACHC,EAAA,QAAMC,KAAK,YACXD,EAAA,QAAME,MAAM,yBACRF,EAAA,QAAME,MAAM,2CACXC,KAAKC,cACNJ,EAAA,QAAME,MAAM,6C,CAKhBE,cACJ,IAAKD,KAAKE,MAAO,CACb,M,CAGJ,OACIL,EAAA,QAAME,MAAM,gCACRF,EAAA,SAAOM,QAASH,KAAKI,SAAUJ,KAAKE,O"}