{"version":3,"names":["badgeCss","Badge","render","h","Host","title","this","labelIsLarge","label","class","renderLabel","abbreviate","largeNumericLabel","largeStringLabel","length","breadcrumbsCss","Breadcrumbs","renderSteps","allStepsWithoutLast","items","slice","areItemsLinks","map","renderAsLink","renderAsButton","item","tooltipId","createRandomString","role","id","onClick","handleClick","renderIcon","renderTooltip","href","link","renderLastStep","lastItem","tabindex","text","name","getIconName","icon","color","getIconColor","style","type","elementId","some","event","stopPropagation","select","emit","divider","componentWillLoad","makeEnterClickable","host","disconnectedCallback","removeEnterClickable","inputFieldCss","CHANGE_EVENT_DEBOUNCE_TIMEOUT","RESIZE_HANDLER_DEBOUNCE_TIMEOUT","InputField","async","_a","mdcTextField","focus","constructor","hostRef","completionsList","changeWaiting","initialize","element","limelInputField","shadowRoot","querySelector","MDCTextField","value","invalid","valid","mapCompletions","window","addEventListener","layout","passive","setFocus","completions","getContainerClassList","classList","isInvalid","disabled","readonly","required","isEmpty","hasPrefix","hasSuffix","leadingIcon","getTrailingIcon","inputElement","validity","badInput","getCurrentValue","renderInput","properties","Object","assign","pattern","onWheel","handleWheel","onKeyDown","placeholder","renderTextarea","restyleCompletionsDropDown","debounce","stateOfShowCompletions","showCompletions","requestAnimationFrame","getAdditionalProps","props","step","Number","isInteger","min","max","minlength","maxlength","onFocus","isFocused","onBlur","validate","changeEmitter","flush","hasHelperText","helperText","validationMessage","hasHelperLine","renderHelperLine","helperTextId","maxLength","renderSuffix","suffix","undefined","renderPrefix","prefix","wasInvalid","checkValidity","setInputElement","renderLeadingIcon","renderTrailingLinkOrButton","trailingIcon","hasLink","renderLinkIcon","getLink","renderTrailingIcon","showLink","includes","getHref","target","getTarget","rel","getRel","linkProps","key","tabIndex","handleIconKeyPress","handleIconClick","renderFormattedNumber","renderValue","formatNumber","Intl","NumberFormat","locale","format","isForwardTab","TAB","altKey","metaKey","shiftKey","isUp","ARROW_UP","isDown","ARROW_DOWN","list","document","portalId","preventDefault","listElement","handleCompletionChange","detail","renderAutocompleteList","dropdownZIndex","getComputedStyle","getPropertyValue","visible","containerId","inheritParentWidth","containerStyle","open","allowClicksElement","display","onDismiss","handleCloseMenu","renderListResult","filteredCompletions","filterCompletions","onChange","handleKeyDownInDropdown","keyFound","ESCAPE","ENTER","filter","completion","toLowerCase","indexOf","handleInput","data","change","handleChange","action","isEnter","isSpace","SPACE","globalConfig","defaultLocale","labelId","connectedCallback","componentDidLoad","destroy","cancel","removeEventListener","componentDidUpdate","ref","onInput","ariaControls","hasValue","hasLeadingIcon","slot","valueWatcher","newValue","completionsWatcher","menuCss","DEFAULT_ROOT_BREADCRUMBS_ITEM","Menu","renderLoader","loadingSubItems","loading","cssProperties","getCssProperties","width","padding","size","limeBranded","renderBreadcrumb","breadcrumbsItems","getBreadcrumbsItems","onSelect","handleBreadcrumbsSelect","menuItem","currentSubMenu","clearSearch","navigateMenu","handleSelect","renderSearchField","searcher","setSearchElement","searchValue","handleTextInput","handleInputKeyDown","renderEmptyMessage","emptyResultMessage","Array","isArray","searchResults","renderMenuList","visibleItems","gridLayout","badgeIcons","setListElement","handleMenuKeyDown","query","result","listItems","querySelectorAll","isBackwardTab","isLeft","ARROW_LEFT","isRight","ARROW_RIGHT","searchInput","currentItem","getCurrentItem","goForward","goBack","activeItem","_b","attrIndex","_c","attributes","getNamedItem","dataIndex","parseInt","parent","parentItem","setTriggerAttributes","entries","removeAttribute","setAttribute","String","onClose","onTriggerClick","selectOnEmptyChildren","selectedMenuItem","isFunction","menuLoader","subItems","setTimeout","observer","IntersectionObserver","unobserve","activeElement","observe","focusMenuItem","blur","menuItems","isMenuItem","selectedIndex","Math","findIndex","selected","menuElements","from","renderNotificationBadge","hasNotificationBadge","badge","setTriggerRef","elm","triggerElement","componentDidRender","slotElement","assignedElements","forEach","menuSurfaceWidth","getMenuSurfaceWidth","openDirection","position","itemsWatcher","openWatcher","opened","breadCrumbItems","push","rootItem","reverse","propertyNames","values","property","zipObject","customWidth","surfaceWidth","assignedTriggers","clientWidth","_d","cssClasses","ANCHOR","ANIMATING_CLOSED","ANIMATING_OPEN","FIXED","IS_OPEN_BELOW","OPEN","ROOT","strings","CLOSED_EVENT","CLOSING_EVENT","OPENED_EVENT","FOCUSABLE_ELEMENTS","join","numbers","TRANSITION_OPEN_DURATION","TRANSITION_CLOSE_DURATION","MARGIN_TO_EDGE","ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO","TOUCH_EVENT_WAIT_MS","CornerBit","Corner","MDCMenuSurfaceFoundation","_super","__extends","adapter","_this","call","__assign","defaultAdapter","isSurfaceOpen","isQuickOpen","isHoistedElement","isFixedPosition","isHorizontallyCenteredOnViewport","maxHeight","openAnimationEndTimerId","closeAnimationEndTimerId","animationRequestId","anchorCorner","TOP_START","originCorner","anchorMargin","top","right","bottom","left","x","y","defineProperty","get","enumerable","configurable","addClass","removeClass","hasClass","hasAnchor","isElementInContainer","isRtl","getInnerDimensions","height","getAnchorDimensions","getWindowDimensions","getBodyDimensions","getWindowScroll","setPosition","setMaxHeight","setTransformOrigin","saveFocus","restoreFocus","notifyClose","notifyOpen","notifyClosing","prototype","init","Error","clearTimeout","cancelAnimationFrame","setAnchorCorner","corner","flipCornerHorizontally","RIGHT","setAnchorMargin","margin","setIsHoisted","isHoisted","setFixedPosition","isFixed","setAbsolutePosition","isFinite","setIsHorizontallyCenteredOnViewport","isCentered","setQuickOpen","quickOpen","isOpen","dimensions","autoposition","close","skipRestoreFocus","maybeRestoreFocus","handleBodyClick","evt","el","handleKeydown","keyCode","isEscape","measurements","getAutoLayoutmeasurements","getoriginCorner","maxMenuSurfaceHeight","getMenuSurfaceMaxHeight","verticalAlignment","hasBit","BOTTOM","horizontalAlignment","horizontalOffset","getHorizontalOriginOffset","verticalOffset","getVerticalOriginOffset","anchorSize","surfaceSize","adjustPositionForHoistedElement","anchorRect","bodySize","viewportSize","windowScroll","viewportDistance","isAnchoredToBottom","availableTop","availableBottom","isAvailableBottom","setBit","isFlipRtl","FLIP_RTL","hasRightBit","isAnchoredToRight","availableLeft","availableRight","isAvailableLeft","isAvailableRight","isOriginCornerAlignedToEnd","unsetBit","isBottomAligned","isBottomAnchored","isRightAligned","avoidHorizontalOverlap","rightOffset","avoidVerticalOverlap","e_1","keys","props_1","__values","props_1_1","next","done","prop","e_1_1","error","return","isRootFocused","childHasFocus","bit","Boolean","num","MDCFoundation","MDCMenuSurface","apply","arguments","attachTo","root","initialSyncWithDOM","parentEl","parentElement","anchorElement","contains","foundation","registerBodyClickListener","body","capture","deregisterBodyClickListener","listen","unlisten","set","setMenuSurfaceAnchorElement","add","remove","getDefaultFoundation","className","origin","propertyName","getCorrectPropertyName","setProperty","previousFocus","offsetWidth","offsetHeight","getBoundingClientRect","innerWidth","innerHeight","clientHeight","pageXOffset","pageYOffset","rootHTML","MDCComponent","MENU_SELECTED_LIST_ITEM","MENU_SELECTION_GROUP","ARIA_CHECKED_ATTR","ARIA_DISABLED_ATTR","CHECKBOX_SELECTOR","LIST_SELECTOR","SELECTED_EVENT","SKIP_RESTORE_FOCUS","FOCUS_ROOT_INDEX","DefaultFocusState","MDCMenuFoundation","defaultFocusState","LIST_ROOT","addClassToElementAtIndex","removeClassFromElementAtIndex","addAttributeToElementAtIndex","removeAttributeFromElementAtIndex","getAttributeFromElementAtIndex","elementContainsClass","closeSurface","getElementIndex","notifySelected","getMenuItemCount","focusItemAtIndex","focusListRoot","getSelectedSiblingOfItemAtIndex","isSelectableItemAtIndex","isTab","handleItemAction","listItem","index","recomputedIndex","setSelectedIndex","handleMenuSurfaceOpened","FIRST_ITEM","LAST_ITEM","NONE","setDefaultFocusState","focusState","getSelectedIndex","validatedIndex","prevSelectedIndex","setEnabled","isEnabled","listCssClasses","LIST_ITEM_DISABLED_CLASS","menuSize","isIndexInRange","MDCMenu","menuSurfaceFactory","listFactory","MDCList","menuSurface","wrapFocus","MDCListFoundation","ACTION_EVENT","hasTypeahead","typeaheadInProgress","typeaheadMatchItem","nextChar","startingIndex","listElements","singleSelection","listConstants","UNSET_INDEX","getOptionByIndex","getPrimaryTextAtIndex","getPrimaryText","setAnchorElement","attr","getAttribute","evtData","closest","selectionGroupEl","selectedItemEl","MenuListRenderer","defaultConfig","getIndexForWhichToApplyTabIndex","i","renderMenuItem","rendertext","classNames","applyTabIndexToItemAtIndex","config","renderText","renderSubMenuIcon","renderNotification","twoLines","avatarList","renderDivider","isSimpleItem","renderCommandText","secondaryText","hasSubItems","commandText","iconColor","getIconTitle","iconSize","classes","commandKey","hasIcons","selectable","menuListCss","menuStrings","MenuList","setup","setupMenu","setupListeners","mdcMenu","teardown","MDCRipple","handleMenuSelect","handleSingleSelect","MenuItems","selectedItem","find","interactedItem","interact","triggerIconColorWarning","html","itemsChanged","console","warn","menuSurfaceCss","MenuSurface","menuElement","handleDocumentClick","handleKeyDown","elementPath","composedPath","isDescendant","clickedInAllowedElement","dismiss","preventClickEventPropagation","stopEvent","once","notchedOutlineCss","NotchedOutline","renderEmptyReadonlyValue","htmlFor"],"sources":["./src/components/badge/badge.scss?tag=limel-badge&encapsulation=shadow","./src/components/badge/badge.tsx","./src/components/breadcrumbs/breadcrumbs.scss?tag=limel-breadcrumbs&encapsulation=shadow","./src/components/breadcrumbs/breadcrumbs.tsx","./src/components/input-field/input-field.scss?tag=limel-input-field&encapsulation=shadow","./src/components/input-field/input-field.tsx","./src/components/menu/menu.scss?tag=limel-menu&encapsulation=shadow","./src/components/menu/menu.tsx","./node_modules/@material/menu-surface/constants.js","./node_modules/@material/menu-surface/foundation.js","./node_modules/@material/menu-surface/component.js","./node_modules/@material/menu/constants.js","./node_modules/@material/menu/foundation.js","./node_modules/@material/menu/component.js","./src/components/menu-list/menu-list-renderer.tsx","./src/components/menu-list/menu-list.scss?tag=limel-menu-list&encapsulation=shadow","./src/components/menu-list/menu-list.tsx","./src/components/menu-surface/menu-surface.scss?tag=limel-menu-surface&encapsulation=shadow","./src/components/menu-surface/menu-surface.tsx","./src/components/notched-outline/notched-outline.scss?tag=limel-notched-outline","./src/components/notched-outline/notched-outline.tsx"],"sourcesContent":["@use '../../style/functions';\n@use '../../style/internal/lime-theme';\n@use '../../style/mixins';\n\n/**\n * @prop --badge-background-color: badge background color\n * @prop --badge-text-color: badge text color\n * @prop --badge-max-width: maximum width of the badge, before its text gets truncated\n */\n\n:host([hidden]) {\n    display: none;\n}\n\n:host(limel-badge) {\n    --limel-min-badge-size: 1rem;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    min-height: var(--limel-min-badge-size);\n    min-width: var(--limel-min-badge-size);\n}\n\nspan {\n    cursor: default;\n    box-sizing: border-box;\n\n    @include mixins.truncate-text;\n    text-align: center;\n    font-size: functions.pxToRem(11);\n    line-height: var(--limel-min-badge-size);\n\n    color: var(--badge-text-color, rgb(var(--contrast-1200)));\n\n    border-radius: var(--limel-min-badge-size);\n    max-height: var(--limel-min-badge-size);\n    min-width: 0.5rem;\n    min-height: 0.5rem;\n\n    background-color: var(--badge-background-color, rgb(var(--contrast-500)));\n\n    &:not(:empty) {\n        min-width: var(\n            --limel-min-badge-size\n        ); // ensures that a badge with only one character rendered as perfect circle\n        max-width: var(--badge-max-width, 2.75rem);\n        padding: 0 functions.pxToRem(4.5);\n    }\n}\n\n:host(.has-large-label) {\n    span {\n        cursor: help;\n    }\n}\n","import { Component, Prop, h, Host } from '@stencil/core';\nimport { abbreviate } from './format';\n\n/**\n * The Badge component can be used to display a notification badge,\n * optionally with a number or a text label.\n *\n * @exampleComponent limel-example-badge\n * @exampleComponent limel-example-badge-number\n * @exampleComponent limel-example-badge-string\n */\n@Component({\n    tag: 'limel-badge',\n    styleUrl: 'badge.scss',\n    shadow: true,\n})\nexport class Badge {\n    /**\n     * Label to display in the badge.\n     * Numeric labels larger than 999 will be rounded and abbreviated.\n     * String labels get truncated if their length is longer than\n     * six characters.\n     */\n    @Prop({ reflect: true })\n    public label?: number | string;\n\n    public render() {\n        return (\n            <Host\n                title={this.labelIsLarge() ? this.label : ''}\n                class={{\n                    'has-large-label': this.labelIsLarge(),\n                }}\n            >\n                <span>{this.renderLabel()}</span>\n            </Host>\n        );\n    }\n\n    private renderLabel() {\n        if (typeof this.label === 'number') {\n            return abbreviate(this.label);\n        }\n\n        return this.label;\n    }\n\n    private labelIsLarge() {\n        const largeNumericLabel = 999;\n        const largeStringLabel = 6;\n        if (\n            (typeof this.label === 'number' &&\n                this.label > largeNumericLabel) ||\n            (typeof this.label === 'string' &&\n                this.label.length > largeStringLabel)\n        ) {\n            return true;\n        }\n    }\n}\n","@use '../../style/mixins';\n\n/**\n* @prop --breadcrumbs-item-text-color: Text color of breadcrumbs items, defaults to `--contrast-1100`.\n* @prop --breadcrumbs-item-max-width: Maximum width of a button in the breadcrumbs. Defaults to `10rem`. Keep in mind that the buttons should not appear too big.\n*/\n\n$padding: 0.5rem;\n\n:host(limel-breadcrumbs) {\n    --limel-breadcrumbs-item-height: 1.5rem;\n    --limel-breadcrumbs-gap: 0.75rem;\n    --limel-breadcrumbs-gap: 0.75rem;\n    --limel-breadcrumbs-item-text-color: var(\n        --breadcrumbs-item-text-color,\n        rgb(var(--contrast-1500))\n    );\n    @include mixins.fade-out-overflowed-content-on-edges(horizontally);\n    --limel-left-edge-fade-width: #{$padding};\n    --limel-right-edge-fade-width: #{$padding};\n}\n\nol,\nli,\n.step {\n    all: unset;\n}\n\n* {\n    box-sizing: border-box;\n}\n\nol {\n    padding: $padding; // needed for the focus and hover effects, since we are using overflow\n    gap: var(--limel-breadcrumbs-gap);\n}\n\n.step {\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.25rem;\n\n    max-width: var(--breadcrumbs-item-max-width, 10rem);\n    height: var(--limel-breadcrumbs-item-height);\n\n    color: var(--limel-breadcrumbs-item-text-color);\n    border-radius: 100vw;\n    font-size: 0.875rem;\n    padding: 0 0.25rem;\n\n    &:not(:has(.text)) {\n        padding: 0 0.125rem;\n    }\n\n    &:not(.last) {\n        @include mixins.visualize-keyboard-focus;\n\n        &:after {\n            content: var(--limel-breadcrumbs-divider);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            width: var(--limel-breadcrumbs-gap);\n\n            position: absolute;\n            top: 0;\n            right: calc(var(--limel-breadcrumbs-gap) * -1);\n            bottom: 0;\n            left: auto;\n\n            text-align: center;\n        }\n    }\n}\n\na.step {\n    @include mixins.hyperlink($color: var(--limel-breadcrumbs-item-text-color));\n}\n\nbutton.step {\n    &:not(.last) {\n        @include mixins.is-flat-clickable(\n            $color: var(--limel-breadcrumbs-item-text-color)\n        );\n    }\n}\n\nlimel-icon {\n    flex-shrink: 0;\n    width: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n    height: calc(var(--limel-breadcrumbs-item-height) - 0.25rem);\n}\n\n.text {\n    @include mixins.truncate-text;\n    padding: 0 0.25rem;\n}\n\n.last {\n    opacity: 0.7;\n}\n\n// LAYOUT:\n// The code below makes sure that the last item is always visible,\n// and previous items overflow out of the container\n// while keeping the container scrollable.\n// All without any additional scripts in the component code.\n\n:host(limel-breadcrumbs) {\n    box-sizing: border-box;\n\n    display: flex;\n    width: 100%;\n    overflow-x: auto;\n    scrollbar-width: none; // This hides the scrollbars appearing under in Firefox\n    -ms-overflow-style: none; // Same as above for IE 11\n    &::-webkit-scrollbar {\n        display: none; // This hides the scrollbars appearing under in Chrome\n    }\n\n    direction: rtl;\n}\n\nol {\n    display: flex;\n    flex-direction: row-reverse;\n    justify-content: flex-end;\n    margin-right: auto;\n}\n\n.step {\n    direction: ltr;\n}\n","import {\n    Component,\n    Element,\n    h,\n    Event,\n    EventEmitter,\n    Prop,\n} from '@stencil/core';\nimport { BreadcrumbsItem } from './breadcrumbs.types';\nimport {\n    makeEnterClickable,\n    removeEnterClickable,\n} from '../../util/make-enter-clickable';\nimport { createRandomString } from '../../util/random-string';\nimport { getIconColor, getIconName } from '../icon/get-icon-props';\n\n/**\n * A Breadcrumb consists of a list of distinct \"places\" that a user has gone through,\n * before ending up where they are right now, in a website or an application.\n *\n * These \"places\" can be for example _pages_ of a website, which are hierarchically\n * laid out before the current page that the user is looking at.\n * They could also be _steps_ which the user has gone through, which perhaps have no\n * hierarchical relation with each other, but has eventually led the user \"here\".\n *\n * :::note\n * - Where the user currently is, is always the last step of the breadcrumb.\n * - A breadcrumbs never shows where users can go after this place.\n * It only illustrates where user has been before ending up here.\n * If the path that a user can take is not changing and if next steps are clear,\n * you can use the [Progress flow component](#/component/limel-progress-flow) instead.\n * :::\n *\n * Breadcrumbs are often placed horizontally before the main content of the current screen.\n *\n * @exampleComponent limel-example-breadcrumbs-links\n * @exampleComponent limel-example-breadcrumbs-buttons\n * @exampleComponent limel-example-breadcrumbs-icons\n * @exampleComponent limel-example-breadcrumbs-divider\n * @exampleComponent limel-example-breadcrumbs-icon-color\n * @exampleComponent limel-example-breadcrumbs-styling\n */\n\n@Component({\n    tag: 'limel-breadcrumbs',\n    shadow: true,\n    styleUrl: 'breadcrumbs.scss',\n})\nexport class Breadcrumbs {\n    /**\n     * List of items in the breadcrumbs,\n     * each representing a step or a page.\n     */\n    @Prop()\n    public items: BreadcrumbsItem[];\n\n    /**\n     * The visual divider that separates items.\n     * It must be a single character such as `-` or `,`.\n     */\n    @Prop()\n    public divider: string = '›';\n\n    /**\n     * Fired when clicking on buttons (not links!)\n     * inside the breadcrumbs.\n     */\n    @Event()\n    public select: EventEmitter<BreadcrumbsItem>;\n\n    @Element()\n    private host: HTMLLimelBreadcrumbsElement;\n\n    public render() {\n        return (\n            <ol\n                role=\"navigation\"\n                aria-label=\"Breadcrumb\"\n                style={{ '--limel-breadcrumbs-divider': `'${this.divider}'` }}\n            >\n                {this.renderSteps()}\n                {this.renderLastStep()}\n            </ol>\n        );\n    }\n\n    public componentWillLoad() {\n        makeEnterClickable(this.host);\n    }\n\n    public disconnectedCallback() {\n        removeEnterClickable(this.host);\n    }\n\n    private renderSteps = () => {\n        const allStepsWithoutLast = this.items.slice(0, -1);\n\n        if (this.areItemsLinks(this.items)) {\n            return allStepsWithoutLast.map(this.renderAsLink);\n        }\n\n        return allStepsWithoutLast.map(this.renderAsButton);\n    };\n\n    private renderAsButton = (item: BreadcrumbsItem) => {\n        const tooltipId = createRandomString();\n\n        return [\n            <button\n                role=\"listitem\"\n                id={tooltipId}\n                class=\"step\"\n                onClick={this.handleClick(item)}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </button>,\n            this.renderTooltip(item, tooltipId),\n        ];\n    };\n\n    private renderAsLink = (item: BreadcrumbsItem) => {\n        const tooltipId = createRandomString();\n\n        return [\n            <a\n                role=\"listitem\"\n                id={tooltipId}\n                class=\"step\"\n                href={item.link.href}\n                title={item.link.title}\n            >\n                {this.renderIcon(item)}\n                {this.renderLabel(item)}\n            </a>,\n            this.renderTooltip(item, tooltipId),\n        ];\n    };\n\n    private renderLastStep = () => {\n        const lastItem = this.items.slice(-1);\n\n        return (\n            <li\n                class=\"last step\"\n                tabindex=\"-1\"\n                aria-current={this.areItemsLinks(this.items) ? 'page' : 'step'}\n            >\n                {this.renderIcon(lastItem[0])}\n                <span class=\"text\">{lastItem[0].text}</span>\n            </li>\n        );\n    };\n\n    private renderIcon = (item: BreadcrumbsItem) => {\n        const name = getIconName(item.icon);\n        const color = getIconColor(item.icon);\n\n        if (!name) {\n            return;\n        }\n\n        return (\n            <limel-icon\n                style={{\n                    color: `${color}`,\n                }}\n                name={name}\n            />\n        );\n    };\n\n    private renderLabel = (item: BreadcrumbsItem) => {\n        if (item.type === 'icon-only') {\n            return;\n        }\n\n        return <span class=\"text\">{item.text}</span>;\n    };\n\n    private renderTooltip = (item: BreadcrumbsItem, tooltipId: string) => {\n        if (item.type === 'icon-only') {\n            return <limel-tooltip elementId={tooltipId} label={item.text} />;\n        }\n    };\n\n    private areItemsLinks = (items: BreadcrumbsItem[]) => {\n        return items.some((item) => 'link' in item);\n    };\n\n    private handleClick = (item: BreadcrumbsItem) => (event: MouseEvent) => {\n        event.stopPropagation();\n        this.select.emit(item);\n    };\n}\n","@use '../../style/internal/z-index';\n@use '../../style/functions';\n@use '../../style/internal/shared_input-select-picker';\n@use '../../style/mixins';\n\n@use '../../style/internal/lime-theme';\n\n@use '@material/textfield';\n@use '@material/textfield/icon';\n@use '@material/list';\n@use '@material/elevation';\n@use '@material/menu-surface';\n\n/**\n * @prop --textarea-height: Height of the field when type is set to `textarea`\n */\n\n:host(limel-input-field) {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n:host([type='textarea']) {\n    height: var(--textarea-height, 100%);\n\n    limel-notched-outline {\n        flex-grow: 1;\n    }\n\n    .mdc-text-field.mdc-text-field--textarea {\n        height: var(--textarea-height, 100%);\n\n        .mdc-text-field__input {\n            @include shared_input-select-picker.input-field-placeholder;\n            margin-top: functions.pxToRem(8);\n            margin-bottom: 0;\n        }\n    }\n}\n\n@include mixins.hide-helper-line-when-not-needed(limel-input-field);\n\n@include textfield.core-styles;\n@include icon.icon-core-styles;\n\n@include shared_input-select-picker.readonly-overrides;\n@include shared_input-select-picker.leading-icon;\n@include shared_input-select-picker.trailing-icon;\n@include shared_input-select-picker.lime-looks-like-input-value;\n\n.lime-text-field--empty {\n    .mdc-text-field__icon--trailing {\n        @include shared_input-select-picker.looks-disabled;\n        pointer-events: none;\n        box-shadow: none !important;\n    }\n}\n\nlimel-notched-outline {\n    &[has-value],\n    &:focus-within {\n        .mdc-text-field__affix {\n            opacity: 1;\n        }\n    }\n}\n\n:host(limel-input-field:not([type='textarea'])) {\n    .limel-notched-outline {\n        // Needed only for Safari,\n        // to ensure that the outlines are not rendered\n        // larger than the input element.\n        height: shared_input-select-picker.$height-of-mdc-text-field;\n    }\n}\n\n.mdc-text-field {\n    width: 100%;\n\n    &:not(.mdc-text-field--disabled) {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-900));\n        }\n    }\n    &.mdc-text-field--disabled {\n        .mdc-text-field__affix,\n        .mdc-text-field__icon {\n            color: rgb(var(--contrast-700));\n        }\n    }\n}\n\n.lime-formatted-input {\n    display: none;\n    width: calc(100% - #{functions.pxToRem(20)});\n    z-index: z-index.$input-field--formatted-value;\n\n    pointer-events: none;\n\n    .mdc-text-field:not(.mdc-text-field--focused):not(.mdc-text-field--invalid)\n        & {\n        display: block;\n    }\n\n    + .mdc-text-field__input {\n        z-index: z-index.$input-field--input-with-formatted-value;\n    }\n}\n\n.mdc-text-field:not(.mdc-text-field--focused):not(.mdc-text-field--invalid) {\n    .mdc-text-field__input[type='number'] {\n        color: transparent;\n        -webkit-text-fill-color: transparent;\n    }\n\n    &.lime-text-field--readonly {\n        .mdc-text-field__input[type='number'] {\n            visibility: hidden;\n            // Not having `visibility: hidden;` makes the unformatted\n            // value selectable; which is not so nice when users\n            // click drag to select content on the screen.\n            // The reason to have it only on `readonly` mode is\n            // 1. This is the use case where it makes most sense\n            // 2. We don't want to repeat the same thing in the\n            // accessibility tree, and make it readable for assistive\n            // technologies.\n            // 3. When not readonly, clicking on the `<input />`\n            // element sets the focus and activates the edit mode.\n            // So we cannot always have it `hidden` on.\n            // which is why we have instead\n            // `color: transparent` a few lines before this.\n        }\n    }\n}\n\n.autocomplete-list-container {\n    position: relative;\n}\n\n.autocomplete-list {\n    background-color: var(--lime-elevated-surface-background-color);\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    max-height: functions.pxToRem(200);\n    overflow-y: auto;\n}\n\n.mdc-deprecated-list-item {\n    cursor: pointer;\n}\n\n.mdc-text-field__input {\n    .mdc-text-field:not(.mdc-text-field--disabled) & {\n        color: shared_input-select-picker.$input-text-color;\n    }\n    .mdc-text-field.mdc-text-field--disabled & {\n        color: shared_input-select-picker.$input-text-color-disabled;\n    }\n}\n\ninput.mdc-text-field__input {\n    @include shared_input-select-picker.input-field-placeholder;\n\n    &::-webkit-search-cancel-button {\n        @include mixins.clear-all-button;\n\n        -webkit-appearance: none;\n\n        position: absolute;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n\n        &:active {\n            transform: none; //Makes the \"clear-all button\" work\n        }\n        .mdc-text-field--label-floating & {\n            opacity: 1;\n        }\n    }\n}\n\n@import './partial-styles/trailing-icon.scss';\n@import './partial-styles/readonly';\n\n// To make the input field render smaller than the default MDC UI\n.mdc-text-field {\n    &.mdc-text-field--outlined {\n        height: shared_input-select-picker.$height-of-mdc-text-field;\n    }\n}\n.mdc-text-field--with-trailing-icon {\n    .mdc-text-field__icon:last-child {\n        padding: 0.25rem;\n        margin-right: 0.25rem;\n    }\n}\n.mdc-text-field--outlined.mdc-text-field--with-leading-icon {\n    .mdc-text-field__icon--leading {\n        margin-left: 0.25rem;\n    }\n    .mdc-floating-label {\n        left: 1.5rem;\n    }\n}\n","import { MDCTextField } from '@material/textfield';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { debounce } from 'lodash-es';\nimport {\n    ARROW_DOWN,\n    ARROW_UP,\n    ENTER,\n    ESCAPE,\n    SPACE,\n    TAB,\n} from '../../util/keycodes';\nimport { InputType } from '../input-field/input-field.types';\nimport { ListItem } from '../list/list-item.types';\nimport { getHref, getTarget, getRel } from '../../util/link-helper';\nimport { JSXBase, Method } from '@stencil/core/internal';\nimport { createRandomString } from '../../util/random-string';\nimport { LimelListCustomEvent } from '../../components';\nimport { globalConfig } from '../../global/config';\n\ninterface LinkProperties {\n    href: string;\n    target?: string;\n    rel?: string;\n}\n\nconst CHANGE_EVENT_DEBOUNCE_TIMEOUT = 300;\nconst RESIZE_HANDLER_DEBOUNCE_TIMEOUT = 100;\n\n/**\n * @exampleComponent limel-example-input-field-text\n * @exampleComponent limel-example-input-field-placeholder\n * @exampleComponent limel-example-input-field-text-multiple\n * @exampleComponent limel-example-input-field-number\n * @exampleComponent limel-example-input-field-autocomplete\n * @exampleComponent limel-example-input-field-icon-leading\n * @exampleComponent limel-example-input-field-icon-trailing\n * @exampleComponent limel-example-input-field-icon-both\n * @exampleComponent limel-example-input-field-showlink\n * @exampleComponent limel-example-input-field-error-icon\n * @exampleComponent limel-example-input-field-textarea\n * @exampleComponent limel-example-input-field-suffix\n * @exampleComponent limel-example-input-field-prefix\n * @exampleComponent limel-example-input-field-search\n * @exampleComponent limel-example-input-field-pattern\n * @exampleComponent limel-example-input-field-focus\n */\n@Component({\n    tag: 'limel-input-field',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'input-field.scss',\n})\nexport class InputField {\n    /**\n     * Set to `true` to disable the field.\n     * Use `disabled` to indicate that the field can normally be interacted\n     * with, but is currently disabled. This tells the user that if certain\n     * requirements are met, the field may become enabled again.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Set to `true` to make the field read-only.\n     * Use `readonly` when the field is only there to present the data it holds,\n     * and will not become possible for the current user to edit.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input field is\n     * invalid.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * The input label.\n     */\n    @Prop({ reflect: true })\n    public label: string;\n\n    /**\n     * The placeholder text shown inside the input field, when the field is focused and empty.\n     */\n    @Prop({ reflect: true })\n    public placeholder: string;\n\n    /**\n     * Optional helper text to display below the input field when it has focus\n     */\n    @Prop({ reflect: true })\n    public helperText: string;\n\n    /**\n     * A short piece of text to display before the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public prefix: string;\n\n    /**\n     * A short piece of text to display after the value inside the input field.\n     * Displayed for all types except `textarea`.\n     */\n    @Prop({ reflect: true })\n    public suffix: string;\n\n    /**\n     * Set to `true` to indicate that the field is required.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * The value of the field.\n     */\n    @Prop({ reflect: true })\n    public value: string;\n\n    /**\n     * Trailing icon to show to the far right in the field.\n     */\n    @Prop({ reflect: true })\n    public trailingIcon: string;\n\n    /**\n     * Leading icon to show to the far left in the field.\n     */\n    @Prop({ reflect: true })\n    public leadingIcon: string;\n\n    /**\n     * Regular expression that the current value of the input field must match.\n     * No forward slashes should be specified around the pattern.\n     * Only used if type is `text`, `tel`, `email`, `url`, `urlAsText`,\n     * `password`, or `search`.\n     */\n    @Prop({ reflect: true })\n    public pattern: string;\n\n    /**\n     * Type of input.\n     *\n     * Note** regarding type `url`: `limel-input` uses the native validation\n     * built into the browser for many types of input fields. The native\n     * validation for `url` is very strict, and does not allow relative urls,\n     * nor any other formats that are not a \"fully qualified\" url. To allow\n     * such urls, use the type `urlAsText` instead. `urlAsText` works exactly\n     * like `text` in all regards, except that it enables use of the `showLink`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public type: InputType = 'text';\n\n    /**\n     * Set to `true` to format the current value of the input field only\n     * if the field is of type number.\n     * The number format is determined by the current language of the browser.\n     */\n    @Prop({ reflect: true })\n    public formatNumber = true;\n\n    /**\n     * Incremental values that are valid if the field type is `number`.\n     */\n    @Prop({ reflect: true })\n    public step: number | 'any' = 'any';\n\n    /**\n     * Maximum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public max: number;\n\n    /**\n     * Minimum allowed value if input type is `number`.\n     */\n    @Prop({ reflect: true })\n    public min: number;\n\n    /**\n     * Maximum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public maxlength: number;\n\n    /**\n     * Minimum length of the value if type is `password`, `search`, `tel`,\n     * `text`, `url`, or `urlAsText`.\n     */\n    @Prop({ reflect: true })\n    public minlength: number;\n\n    /**\n     * list of suggestions `value` can autocomplete to.\n     */\n    @Prop()\n    public completions: string[] = [];\n\n    /**\n     * For inputs of type `email`, `tel`, `url`, and `urlAsText`, set this to\n     * `true` to show a trailing icon with a `mailto:`,`tel:`, or normal link,\n     * respectively. The default icon can be overridden using the `trailingIcon`\n     * property.\n     */\n    @Prop({ reflect: true })\n    public showLink = false;\n\n    /**\n     * The locale to use for formatting numbers.\n     */\n    @Prop({ reflect: true })\n    public locale: string = globalConfig.defaultLocale;\n\n    /**\n     * Emitted when the input value is changed.\n     */\n    @Event()\n    private change: EventEmitter<string>;\n\n    /**\n     * Emitted when `trailingIcon` or `leadingIcon` is set\n     * and the icon is interacted with.\n     */\n    @Event()\n    private action: EventEmitter<void>;\n\n    @Element()\n    private limelInputField: HTMLLimelInputFieldElement;\n\n    @State()\n    private isFocused: boolean = false;\n\n    @State()\n    private wasInvalid: boolean = false;\n\n    @State()\n    public showCompletions: boolean = false;\n\n    @Method()\n    public async focus() {\n        this.mdcTextField?.focus();\n    }\n\n    private inputElement?: HTMLInputElement | HTMLTextAreaElement;\n    private mdcTextField: MDCTextField;\n    private completionsList: ListItem[] = [];\n    private portalId: string;\n    private helperTextId: string;\n    private labelId: string;\n\n    private changeWaiting = false;\n\n    constructor() {\n        this.portalId = createRandomString();\n        this.helperTextId = createRandomString();\n        this.labelId = createRandomString();\n    }\n\n    public connectedCallback() {\n        this.initialize();\n    }\n\n    public componentDidLoad() {\n        this.initialize();\n    }\n\n    public disconnectedCallback() {\n        if (this.mdcTextField) {\n            this.mdcTextField.destroy();\n        }\n\n        this.restyleCompletionsDropDown.cancel();\n        window.removeEventListener('resize', this.layout);\n        this.limelInputField.removeEventListener('focus', this.setFocus);\n    }\n\n    public componentDidUpdate() {\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n\n        this.mdcTextField.disabled = this.disabled || this.readonly;\n    }\n\n    public render() {\n        const properties = this.getAdditionalProps();\n        properties['aria-labelledby'] = this.labelId;\n        properties.class = 'mdc-text-field__input';\n        properties.ref = this.setInputElement;\n        properties.onInput = this.handleInput;\n        properties.onChange = this.handleChange;\n        properties.onFocus = this.onFocus;\n        properties.onBlur = this.onBlur;\n        properties.required = this.required;\n        properties.readonly = this.readonly;\n        properties.disabled = this.disabled || this.readonly;\n\n        let ariaControls = '';\n\n        if (this.hasHelperText()) {\n            ariaControls += this.helperTextId;\n            properties['aria-describedby'] = this.helperTextId;\n        }\n\n        if (this.renderAutocompleteList()) {\n            if (ariaControls) {\n                ariaControls += ' ';\n            }\n\n            ariaControls += this.portalId;\n        }\n\n        if (ariaControls) {\n            properties['aria-controls'] = ariaControls;\n        }\n\n        return [\n            <limel-notched-outline\n                labelId={this.labelId}\n                label={this.label}\n                required={this.required}\n                invalid={this.invalid || this.isInvalid()}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                hasValue={!!this.value}\n                hasLeadingIcon={!!this.leadingIcon}\n            >\n                <label slot=\"content\" class={this.getContainerClassList()}>\n                    {this.renderLeadingIcon()}\n                    {this.renderPrefix()}\n                    {this.renderFormattedNumber()}\n                    {this.renderInput(properties)}\n                    {this.renderSuffix()}\n                    {this.renderTextarea(properties)}\n                    {this.renderTrailingLinkOrButton()}\n                </label>\n            </limel-notched-outline>,\n            this.renderHelperLine(),\n            this.renderAutocompleteList(),\n        ];\n    }\n\n    @Watch('value')\n    protected valueWatcher(newValue: string) {\n        if (!this.mdcTextField) {\n            return;\n        }\n\n        if (this.changeWaiting) {\n            return;\n        }\n\n        if (\n            this.type === 'number' &&\n            this.isFocused &&\n            Number(newValue) === Number(this.mdcTextField.value)\n        ) {\n            return;\n        }\n\n        if (newValue !== this.mdcTextField.value) {\n            this.mdcTextField.value = newValue || '';\n        }\n\n        if (this.wasInvalid) {\n            this.validate();\n        }\n    }\n\n    @Watch('completions')\n    protected completionsWatcher() {\n        this.mapCompletions();\n    }\n\n    private initialize = () => {\n        const element =\n            this.limelInputField.shadowRoot.querySelector('.mdc-text-field');\n        if (!element) {\n            return;\n        }\n\n        this.mdcTextField = new MDCTextField(element);\n        if (this.value) {\n            this.mdcTextField.value = this.value;\n        }\n\n        if (this.invalid) {\n            this.mdcTextField.valid = false;\n        }\n\n        this.mapCompletions();\n\n        window.addEventListener('resize', this.layout, { passive: true });\n        this.limelInputField.addEventListener('focus', this.setFocus);\n    };\n\n    private mapCompletions = () => {\n        this.completionsList = [...this.completions].map((item) => {\n            return { text: item };\n        });\n    };\n\n    private setFocus = () => {\n        this.mdcTextField.focus();\n    };\n\n    private getContainerClassList = () => {\n        const classList = {\n            'mdc-text-field': true,\n            'mdc-text-field--outlined': true,\n            'mdc-text-field--invalid': this.isInvalid(),\n            'mdc-text-field--disabled': this.disabled || this.readonly,\n            'lime-text-field--readonly': this.readonly,\n            'mdc-text-field--required': this.required,\n            'lime-text-field--empty': this.isEmpty(),\n            'lime-has-prefix': this.hasPrefix(),\n            'lime-has-suffix': this.hasSuffix(),\n        };\n\n        if (this.type === 'textarea') {\n            classList['mdc-text-field--textarea'] = true;\n        } else {\n            classList['mdc-text-field--with-leading-icon'] = !!this.leadingIcon;\n            classList['mdc-text-field--with-trailing-icon'] =\n                !!this.getTrailingIcon();\n        }\n\n        return classList;\n    };\n\n    private isEmpty = () => {\n        if (this.type === 'number' && this.inputElement?.validity.badInput) {\n            return false;\n        }\n\n        return !this.getCurrentValue();\n    };\n\n    private getCurrentValue = () => {\n        if (this.changeWaiting && this.inputElement) {\n            return this.inputElement.value;\n        }\n\n        return this.value;\n    };\n\n    private renderInput = (\n        properties: JSXBase.InputHTMLAttributes<HTMLInputElement>,\n    ) => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const type = this.type === 'urlAsText' ? 'text' : this.type;\n\n        return (\n            <input\n                {...properties}\n                type={type}\n                pattern={this.pattern}\n                onWheel={this.handleWheel}\n                onKeyDown={this.onKeyDown}\n                placeholder={this.placeholder}\n            />\n        );\n    };\n\n    private renderTextarea = (\n        properties: JSXBase.TextareaHTMLAttributes<HTMLTextAreaElement>,\n    ) => {\n        if (this.type !== 'textarea') {\n            return;\n        }\n\n        return (\n            <span class=\"mdc-text-field__resizer\">\n                <textarea\n                    {...properties}\n                    placeholder={this.placeholder}\n                ></textarea>\n            </span>\n        );\n    };\n\n    private layout = () => {\n        this.mdcTextField?.layout();\n        this.restyleCompletionsDropDown();\n    };\n\n    private restyleCompletionsDropDown = debounce(() => {\n        const stateOfShowCompletions = this.showCompletions;\n        this.showCompletions = false;\n        requestAnimationFrame(() => {\n            this.showCompletions = stateOfShowCompletions;\n        });\n    }, RESIZE_HANDLER_DEBOUNCE_TIMEOUT);\n\n    private getAdditionalProps = () => {\n        const props: any = {};\n\n        if (this.type === 'number') {\n            props.step = this.step;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.min)) {\n            props.min = this.min;\n        }\n\n        if (this.type === 'number' && Number.isInteger(this.max)) {\n            props.max = this.max;\n        }\n\n        if (this.minlength) {\n            props.minlength = this.minlength;\n        }\n\n        if (this.maxlength) {\n            props.maxlength = this.maxlength;\n        }\n\n        return props;\n    };\n\n    private onFocus = () => {\n        this.isFocused = true;\n        this.showCompletions = true;\n    };\n\n    private onBlur = () => {\n        this.isFocused = false;\n        this.validate();\n        this.changeEmitter.flush();\n    };\n\n    private get validationMessage(): string {\n        if (this.isInvalid() && !this.invalid) {\n            return this.inputElement?.validationMessage || '';\n        }\n\n        return '';\n    }\n\n    private hasHelperText = () => {\n        return !!(this.helperText ?? this.validationMessage);\n    };\n\n    private hasHelperLine = () => {\n        return this.maxlength > 0 || this.hasHelperText();\n    };\n\n    private renderHelperLine = () => {\n        const text: string = this.getCurrentValue() || '';\n        const length = text.length;\n\n        if (!this.hasHelperLine()) {\n            return;\n        }\n\n        return (\n            <limel-helper-line\n                helperTextId={this.helperTextId}\n                helperText={this.helperText ?? this.validationMessage}\n                length={length}\n                maxLength={this.maxlength}\n                invalid={this.isInvalid()}\n            />\n        );\n    };\n\n    private renderSuffix = () => {\n        if (!this.hasSuffix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--suffix': true,\n        };\n\n        return <span class={classList}>{this.suffix}</span>;\n    };\n\n    private hasSuffix = () => {\n        return this.suffix !== null && this.suffix !== undefined;\n    };\n\n    private renderPrefix = () => {\n        if (!this.hasPrefix() || this.type === 'textarea') {\n            return;\n        }\n\n        const classList = {\n            'mdc-text-field__affix': true,\n            'mdc-text-field__affix--prefix': true,\n        };\n\n        return <span class={classList}>{this.prefix}</span>;\n    };\n\n    private hasPrefix = () => {\n        return this.prefix !== null && this.prefix !== undefined;\n    };\n\n    private isInvalid = () => {\n        if (this.readonly) {\n            // A readonly field can never be invalid.\n            return false;\n        }\n\n        if (this.invalid) {\n            // `this.invalid` is set by the consumer. If the consumer explicitly\n            // told us to consider the field invalid, we consider it invalid\n            // regardless of what our internal validation thinks, and regardless\n            // of whether the field has been modified.\n            return true;\n        }\n\n        return this.wasInvalid;\n    };\n\n    private validate = () => {\n        if (this.readonly || this.invalid) {\n            this.wasInvalid = false;\n\n            return;\n        }\n\n        if (this.inputElement) {\n            this.wasInvalid = !this.inputElement.checkValidity();\n        }\n    };\n\n    private setInputElement = (\n        element?: HTMLInputElement | HTMLTextAreaElement,\n    ) => {\n        if (element) {\n            this.inputElement = element;\n        }\n    };\n\n    private renderLeadingIcon = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        if (this.leadingIcon) {\n            return (\n                <i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\">\n                    <limel-icon name={this.leadingIcon} />\n                </i>\n            );\n        }\n    };\n\n    private renderTrailingLinkOrButton = () => {\n        if (this.type === 'textarea') {\n            return;\n        }\n\n        const trailingIcon = this.getTrailingIcon();\n\n        if (!this.isInvalid() && this.hasLink()) {\n            return this.renderLinkIcon(this.getLink(), trailingIcon);\n        } else if (trailingIcon) {\n            return this.renderTrailingIcon(trailingIcon);\n        }\n    };\n\n    private hasLink = () => {\n        return (\n            this.showLink &&\n            ['email', 'tel', 'url', 'urlAsText'].includes(this.type)\n        );\n    };\n\n    private getLink = () => {\n        const props: LinkProperties = { href: '' };\n        switch (this.type) {\n            case 'email':\n                props.href = `mailto:${this.value}`;\n                break;\n            case 'tel':\n                props.href = `tel:${this.value}`;\n                break;\n            default:\n                props.href = getHref(this.value);\n                props.target = getTarget(this.value);\n                props.rel = getRel(props.target);\n        }\n\n        return props;\n    };\n\n    private renderLinkIcon = (linkProps: LinkProperties, icon: string) => {\n        // If the trailing icon uses the class `mdc-text-field__icon--trailing`,\n        // MDC attaches a click handler to it, which apparently runs\n        // `preventDefault()` on the event. For links, we don't want that,\n        // so instead of `mdc-text-field__icon--trailing`, we use our own class\n        // `lime-trailing-icon-for-link`, which uses all the same styling. /Ads\n        return (\n            <a\n                {...linkProps}\n                class=\"material-icons mdc-text-field__icon lime-trailing-icon-for-link\"\n                tabindex={this.disabled || this.isEmpty() ? '-1' : '0'}\n                role=\"button\"\n            >\n                <limel-icon name={icon} />\n            </a>\n        );\n    };\n\n    private renderTrailingIcon = (icon: string) => {\n        if (this.isInvalid()) {\n            return (\n                <i\n                    key=\"invalid\"\n                    class=\"material-icons mdc-text-field__icon invalid-icon\"\n                >\n                    <limel-icon name={icon} />\n                </i>\n            );\n        }\n\n        return (\n            <i\n                key=\"action\"\n                class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\"\n                tabIndex={0}\n                role=\"button\"\n                onKeyDown={this.handleIconKeyPress}\n                onClick={this.handleIconClick}\n            >\n                <limel-icon name={icon} />\n            </i>\n        );\n    };\n\n    private getTrailingIcon = () => {\n        if (this.isInvalid()) {\n            return 'high_importance';\n        }\n\n        if (this.trailingIcon) {\n            return this.trailingIcon;\n        }\n\n        if (this.showLink && this.type === 'email') {\n            return 'filled_message';\n        }\n\n        if (this.showLink && this.type === 'tel') {\n            return 'phone';\n        }\n\n        if (\n            this.showLink &&\n            (this.type === 'url' || this.type === 'urlAsText')\n        ) {\n            return 'external_link';\n        }\n    };\n\n    private renderFormattedNumber = () => {\n        if (this.type !== 'number') {\n            return;\n        }\n\n        let renderValue = this.value;\n        if (this.formatNumber && this.value) {\n            renderValue = new Intl.NumberFormat(this.locale).format(\n                Number(this.value),\n            );\n            if (renderValue === 'NaN') {\n                return;\n            }\n        }\n\n        return (\n            <span class=\"lime-formatted-input lime-looks-like-input-value\">\n                {renderValue}\n            </span>\n        );\n    };\n\n    /**\n     * Key handler for the input field\n     * Will change focus to the first/last item in the dropdown list to enable selection with the keyboard\n     *\n     * @param event - event\n     */\n\n    private onKeyDown = (event: KeyboardEvent): void => {\n        this.showCompletions = true;\n        const isForwardTab =\n            event.key === TAB &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp = event.key === ARROW_UP;\n        const isDown = event.key === ARROW_DOWN;\n\n        if (event.key === TAB && event.shiftKey) {\n            this.showCompletions = false;\n        }\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        const list = document.querySelector(` #${this.portalId} limel-list`);\n\n        if (!list) {\n            return;\n        }\n\n        event.preventDefault();\n        if (isForwardTab || isDown) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:first-child',\n            );\n            listElement.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listElement: HTMLElement = list.shadowRoot.querySelector(\n                '.mdc-deprecated-list-item:last-child',\n            );\n            listElement.focus();\n        }\n    };\n\n    private handleCompletionChange = (\n        event: LimelListCustomEvent<ListItem>,\n    ) => {\n        event.stopPropagation();\n        if (!event.detail) {\n            return;\n        }\n\n        this.showCompletions = false;\n\n        /*\n         This change event doesn't need to be debounced in itself, but we want\n         to make absolutely sure that an earlier change event that *has* been\n         debounced doesn't emit after this one. Therefore, we run this through\n         the same debounced emitter function. /Ads\n         */\n        this.changeEmitter(event.detail.text);\n        this.changeEmitter.flush();\n    };\n\n    private renderAutocompleteList = () => {\n        if (this.type === 'textarea' || !this.completions.length) {\n            return;\n        }\n\n        const dropdownZIndex = getComputedStyle(\n            this.limelInputField,\n        ).getPropertyValue('--dropdown-z-index');\n\n        return (\n            <limel-portal\n                visible={this.showCompletions}\n                containerId={this.portalId}\n                inheritParentWidth={true}\n                containerStyle={{ 'z-index': dropdownZIndex }}\n            >\n                <limel-menu-surface\n                    open={this.showCompletions}\n                    allowClicksElement={this.limelInputField}\n                    style={{\n                        '--menu-surface-width': '100%',\n                        'max-height': 'inherit',\n                        display: 'flex',\n                    }}\n                    onDismiss={this.handleCloseMenu}\n                >\n                    {this.renderListResult()}\n                </limel-menu-surface>\n            </limel-portal>\n        );\n    };\n\n    private renderListResult = () => {\n        const filteredCompletions: ListItem[] = this.filterCompletions(\n            this.getCurrentValue(),\n        );\n        if (!filteredCompletions || filteredCompletions.length === 0) {\n            return null;\n        }\n\n        return (\n            <limel-list\n                onChange={this.handleCompletionChange}\n                onKeyDown={this.handleKeyDownInDropdown}\n                type=\"selectable\"\n                items={filteredCompletions}\n            />\n        );\n    };\n\n    private handleKeyDownInDropdown = (event: KeyboardEvent) => {\n        const keyFound = [TAB, ESCAPE, ENTER].includes(event.key);\n        if (keyFound) {\n            this.setFocus();\n        }\n    };\n\n    private handleCloseMenu = () => {\n        this.showCompletions = false;\n    };\n\n    private filterCompletions = (filter: string) => {\n        if (!filter) {\n            return this.completionsList;\n        }\n\n        return this.completionsList.filter(\n            (completion) =>\n                completion.text.toLowerCase().indexOf(filter.toLowerCase()) >\n                -1,\n        );\n    };\n\n    private handleInput = (event) => {\n        event.stopPropagation();\n        let value = event.target.value;\n\n        if (this.type === 'number') {\n            if (!value && event.data) {\n                event.stopPropagation();\n\n                return;\n            }\n\n            if (value) {\n                value = Number(value);\n            }\n        }\n\n        this.changeWaiting = true;\n        this.changeEmitter(value);\n    };\n\n    private changeEmitter = debounce((value: string) => {\n        this.change.emit(value);\n        this.changeWaiting = false;\n    }, CHANGE_EVENT_DEBOUNCE_TIMEOUT);\n\n    private handleChange = (event: Event) => {\n        event.stopPropagation();\n        this.changeEmitter.flush();\n    };\n\n    private handleIconClick = () => {\n        this.action.emit();\n    };\n\n    private handleIconKeyPress = (event: KeyboardEvent) => {\n        const isEnter = event.key === ENTER;\n        const isSpace = event.key === SPACE;\n\n        if (isSpace || isEnter) {\n            this.action.emit();\n        }\n    };\n\n    private handleWheel = () => {\n        // This empty event handler is here to circumvent a bug.\n        // In some browsers (Chrome for example), hovering the input with\n        // the input focused, and scrolling, will both change the value\n        // AND scroll the page. We would prefer to never change the value\n        // on scroll, instead always scrolling the page, but since we\n        // haven't found a way to do that, this is the next best thing, as\n        // it prevents the page from being scrolled, but only in the\n        // circumstances when the value is changed by the scrolling.\n        // Please test THOROUGHLY if you remove this event handler 😄\n    };\n}\n","@use '../../style/functions';\n\n// Note! The `--dropdown-z-index` property is used from `menu.tsx`.\n\n/**\n * @prop --dropdown-z-index: `z-index` of the dropdown menu.\n * @prop --menu-surface-width: Width of the menu surface. Overrides the width defined by `surfaceWidth`.\n * @prop --list-grid-item-max-width: Maximum width of items in the menu list when `gridLayout={true}`. Defaults to `10rem`.\n * @prop --list-grid-item-min-width: Minimum width of items in the menu list when `gridLayout={true}`. Defaults to `7.5rem`.\n * @prop --list-grid-gap: Distance between the items in the menu list when `gridLayout={true}`. Defaults to `0.75rem`.\n * @prop --notification-badge-text-color: Defines the text color of notification badges. Defaults to `--color-white`.\n * @prop --notification-badge-background-color: Defines the background color of notification badges. Defaults to `--color-red-default`.\n */\n\n:host(limel-menu) {\n    isolation: isolate;\n    position: relative;\n    display: inline-block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n:host([hidden]) {\n    display: none;\n}\n\n.menu__trigger {\n    border-color: transparent;\n    border-width: 1px;\n    border-style: solid;\n    background: none;\n    color: rgb(var(--contrast-800));\n    height: functions.pxToRem(36);\n\n    &-enabled {\n        &:hover {\n            border-color: rgb(var(--contrast-800));\n            color: rgb(var(--contrast-1100));\n        }\n    }\n}\n\n.mdc-menu-surface--anchor {\n    position: relative;\n}\n\nlimel-badge {\n    position: absolute;\n    top: -0.25rem;\n    right: -0.25rem;\n}\n","import {\n    Component,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Element,\n    Watch,\n    State,\n} from '@stencil/core';\nimport { createRandomString } from '../../util/random-string';\nimport { zipObject, isFunction } from 'lodash-es';\nimport {\n    LimelBreadcrumbsCustomEvent,\n    LimelInputFieldCustomEvent,\n} from '../../components';\n\nimport { BreadcrumbsItem } from '../breadcrumbs/breadcrumbs.types';\nimport { ListSeparator } from '../list/list-item.types';\nimport {\n    OpenDirection,\n    MenuItem,\n    MenuLoader,\n    SurfaceWidth,\n    MenuSearcher,\n} from './menu.types';\n\nimport {\n    ARROW_DOWN,\n    ARROW_LEFT,\n    ARROW_RIGHT,\n    ARROW_UP,\n    TAB,\n} from '../../util/keycodes';\n\ninterface MenuCrumbItem extends BreadcrumbsItem {\n    menuItem?: MenuItem;\n}\n\nconst DEFAULT_ROOT_BREADCRUMBS_ITEM: BreadcrumbsItem = {\n    text: '',\n    icon: {\n        name: 'home',\n    },\n    type: 'icon-only',\n};\n\n/**\n * @slot trigger - Element to use as a trigger for the menu.\n * @exampleComponent limel-example-menu-basic\n * @exampleComponent limel-example-menu-disabled\n * @exampleComponent limel-example-menu-open-direction\n * @exampleComponent limel-example-menu-surface-width\n * @exampleComponent limel-example-menu-separators\n * @exampleComponent limel-example-menu-icons\n * @exampleComponent limel-example-menu-badge-icons\n * @exampleComponent limel-example-menu-grid\n * @exampleComponent limel-example-menu-hotkeys\n * @exampleComponent limel-example-menu-secondary-text\n * @exampleComponent limel-example-menu-notification\n * @exampleComponent limel-example-menu-sub-menus\n * @exampleComponent limel-example-menu-sub-menu-lazy-loading\n * @exampleComponent limel-example-menu-sub-menu-lazy-loading-infinite\n * @exampleComponent limel-example-menu-searchable\n * @exampleComponent limel-example-menu-composite\n */\n@Component({\n    tag: 'limel-menu',\n    shadow: true,\n    styleUrl: 'menu.scss',\n})\nexport class Menu {\n    /**\n     * A list of items and separators to show in the menu.\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator> = [];\n\n    /**\n     * Sets the disabled state of the menu.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Decides the menu's location in relation to its trigger\n     */\n    @Prop({ reflect: true })\n    public openDirection: OpenDirection = 'bottom-start';\n\n    /**\n     * Decides the width of menu's dropdown\n     */\n    @Prop({ reflect: true })\n    public surfaceWidth: SurfaceWidth = 'inherit-from-items';\n\n    /**\n     * Sets the open state of the menu.\n     */\n    @Prop({ mutable: true, reflect: true })\n    public open = false;\n\n    /**\n     * Defines whether the menu should show badges.\n     */\n    @Prop({ reflect: true })\n    public badgeIcons = false;\n\n    /**\n     * Renders list items in a grid layout, rather than a vertical list\n     */\n    @Prop({ reflect: true })\n    public gridLayout = false;\n\n    /**\n     * :::warning Internal Use Only\n     * This property is for internal use only. We need it for now, but want to\n     * find a better implementation of the functionality it currently enables.\n     * If and when we do so, this property will be removed without prior\n     * notice. If you use it, your code _will_ break in the future.\n     * :::\n     *\n     * @internal\n     */\n    @Prop({ reflect: true })\n    public loading = false;\n\n    /**\n     * :::warning Internal Use Only\n     * This property is for internal use only. We need it for now, but want to\n     * find a better implementation of the functionality it currently enables.\n     * If and when we do so, this property will be removed without prior\n     * notice. If you use it, your code _will_ break in the future.\n     * :::\n     *\n     * @internal\n     */\n    @Prop({ mutable: true })\n    public currentSubMenu: MenuItem;\n\n    /**\n     * A root breadcrumb item to show above the menu items.\n     * Clicking it navigates back from a sub-menu to the root menu.\n     */\n    @Prop()\n    public rootItem: BreadcrumbsItem = DEFAULT_ROOT_BREADCRUMBS_ITEM;\n\n    /**\n     * Is emitted when the menu is cancelled.\n     */\n    @Event()\n    public cancel: EventEmitter<void>;\n\n    /**\n     * Is emitted when a menu item is selected.\n     */\n    @Event()\n    public select: EventEmitter<MenuItem>;\n\n    /**\n     * A search function that takes a search-string as an argument,\n     * and returns a promise that will eventually be resolved with\n     * an array of `MenuItem`:s.\n     *\n     * See the docs for the type `MenuSearcher` for type information on\n     * the searcher function itself.\n     */\n    @Prop()\n    public searcher: MenuSearcher;\n\n    /**\n     * Message to display when search returns 0 results.\n     */\n    @Prop()\n    public emptyResultMessage?: string;\n\n    /**\n     * Is emitted when a menu item with a sub-menu is selected.\n     */\n    @Event()\n    public navigateMenu: EventEmitter<MenuItem | null>;\n\n    @Element()\n    private host: HTMLLimelMenuElement;\n\n    @State()\n    private loadingSubItems: boolean;\n\n    @State()\n    private searchValue: string;\n\n    @State()\n    private searchResults: Array<MenuItem | ListSeparator> | null;\n\n    private list: HTMLLimelMenuListElement;\n    private searchInput: HTMLLimelInputFieldElement;\n    private portalId: string;\n    private triggerElement: HTMLSlotElement;\n    private selectedMenuItem?: MenuItem;\n\n    constructor() {\n        this.portalId = createRandomString();\n    }\n\n    public componentDidRender() {\n        const slotElement = this.host.shadowRoot.querySelector('slot');\n        slotElement.assignedElements().forEach(this.setTriggerAttributes);\n    }\n\n    public render() {\n        const cssProperties = this.getCssProperties();\n\n        const dropdownZIndex = getComputedStyle(this.host).getPropertyValue(\n            '--dropdown-z-index',\n        );\n\n        const menuSurfaceWidth = this.getMenuSurfaceWidth(\n            cssProperties['--menu-surface-width'],\n        );\n\n        return (\n            <div class=\"mdc-menu-surface--anchor\" onClick={this.onTriggerClick}>\n                <slot ref={this.setTriggerRef} name=\"trigger\" />\n                {this.renderNotificationBadge()}\n                <limel-portal\n                    visible={this.open}\n                    containerId={this.portalId}\n                    openDirection={this.openDirection}\n                    position=\"absolute\"\n                    containerStyle={{ 'z-index': dropdownZIndex }}\n                >\n                    <limel-menu-surface\n                        open={this.open}\n                        onDismiss={this.onClose}\n                        style={{\n                            ...cssProperties,\n                            '--menu-surface-width': menuSurfaceWidth,\n                            '--limel-menu-surface-display': 'flex',\n                            '--limel-menu-surface-flex-direction': 'column',\n                        }}\n                        class={{\n                            'has-grid-layout': this.gridLayout,\n                        }}\n                    >\n                        {this.renderSearchField()}\n                        {this.renderBreadcrumb()}\n                        {this.renderLoader()}\n                        {this.renderEmptyMessage()}\n                        {this.renderMenuList()}\n                    </limel-menu-surface>\n                </limel-portal>\n            </div>\n        );\n    }\n\n    @Watch('items')\n    protected itemsWatcher() {\n        this.clearSearch();\n        this.setFocus();\n    }\n\n    @Watch('open')\n    protected openWatcher(newValue: boolean) {\n        const opened = newValue;\n        if (opened) {\n            this.setFocus();\n        } else {\n            this.clearSearch();\n        }\n    }\n\n    private getBreadcrumbsItems() {\n        const breadCrumbItems: MenuCrumbItem[] = [];\n        let currentItem = this.currentSubMenu;\n        while (currentItem) {\n            breadCrumbItems.push({\n                text: currentItem.text,\n                icon: currentItem.icon,\n                menuItem: currentItem,\n            });\n            currentItem = currentItem.parentItem;\n        }\n\n        if (\n            breadCrumbItems.length ||\n            this.rootItem !== DEFAULT_ROOT_BREADCRUMBS_ITEM\n        ) {\n            breadCrumbItems.push(this.rootItem);\n        }\n\n        return breadCrumbItems.reverse();\n    }\n\n    private renderLoader = () => {\n        if (!this.loadingSubItems && !this.loading) {\n            return;\n        }\n\n        const cssProperties = this.getCssProperties();\n\n        return (\n            <div\n                style={{\n                    width: cssProperties['--menu-surface-width'],\n                    display: 'flex',\n                    'align-items': 'center',\n                    'justify-content': 'center',\n                    padding: '0.5rem 0',\n                }}\n            >\n                <limel-spinner size=\"mini\" limeBranded={false} />\n            </div>\n        );\n    };\n\n    private renderBreadcrumb = () => {\n        const breadcrumbsItems = this.getBreadcrumbsItems();\n        if (!breadcrumbsItems.length) {\n            return;\n        }\n\n        return (\n            <limel-breadcrumbs\n                style={{\n                    'border-bottom': 'solid 1px rgb(var(--contrast-500))',\n                    'flex-shrink': '0',\n                }}\n                onSelect={this.handleBreadcrumbsSelect}\n                items={breadcrumbsItems}\n            />\n        );\n    };\n\n    private handleBreadcrumbsSelect = (\n        event: LimelBreadcrumbsCustomEvent<MenuCrumbItem>,\n    ) => {\n        if (!event.detail.menuItem) {\n            this.currentSubMenu = null;\n            this.clearSearch();\n            this.navigateMenu.emit(null);\n\n            this.setFocus();\n\n            return;\n        }\n\n        this.handleSelect(event.detail.menuItem);\n    };\n\n    private renderSearchField = () => {\n        if (!this.searcher) {\n            return;\n        }\n\n        return (\n            <limel-input-field\n                tabindex=\"0\"\n                ref={this.setSearchElement}\n                type=\"search\"\n                leadingIcon=\"search\"\n                style={{\n                    padding: '0.25rem',\n                    'box-sizing': 'border-box',\n                }}\n                value={this.searchValue}\n                onChange={this.handleTextInput}\n                onKeyDown={this.handleInputKeyDown}\n            />\n        );\n    };\n\n    private renderEmptyMessage = () => {\n        if (\n            this.loading ||\n            this.loadingSubItems ||\n            !this.emptyResultMessage ||\n            !Array.isArray(this.searchResults) ||\n            this.searchResults?.length\n        ) {\n            return null;\n        }\n\n        return (\n            <p\n                style={{\n                    padding: '0 1rem',\n                    'text-align': 'center',\n                }}\n            >\n                {this.emptyResultMessage}\n            </p>\n        );\n    };\n\n    private renderMenuList = () => {\n        let items = this.visibleItems;\n\n        if (this.loadingSubItems || this.loading) {\n            items = [];\n        }\n\n        return (\n            <limel-menu-list\n                style={{\n                    'overflow-y': 'auto',\n                    'flex-grow': '1',\n                }}\n                class={{\n                    'has-grid-layout has-interactive-items': this.gridLayout,\n                }}\n                items={items}\n                badgeIcons={this.badgeIcons}\n                onSelect={this.onSelect}\n                ref={this.setListElement}\n                onKeyDown={this.handleMenuKeyDown}\n            />\n        );\n    };\n\n    private handleTextInput = async (\n        event: LimelInputFieldCustomEvent<string>,\n    ) => {\n        event.stopPropagation();\n\n        const query = event.detail;\n        this.searchValue = query;\n        if (query === '') {\n            this.searchResults = null;\n            this.loadingSubItems = false;\n\n            return;\n        }\n\n        this.loadingSubItems = true;\n\n        const result = await this.searcher(query);\n\n        if (this.searchValue !== query) {\n            return;\n        }\n\n        this.searchResults = result;\n        this.loadingSubItems = false;\n    };\n\n    // Key handler for the input search field\n    // Will change focus to the first/last item in the dropdown\n    // list to enable selection with the keyboard\n    private handleInputKeyDown = (event: KeyboardEvent) => {\n        const isForwardTab =\n            event.key === TAB &&\n            !event.altKey &&\n            !event.metaKey &&\n            !event.shiftKey;\n        const isUp = event.key === ARROW_UP;\n        const isDown = event.key === ARROW_DOWN;\n\n        if (!isForwardTab && !isUp && !isDown) {\n            return;\n        }\n\n        if (!this.list) {\n            return;\n        }\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (isForwardTab || isDown) {\n            const listItems =\n                this.list.shadowRoot.querySelectorAll<HTMLElement>(\n                    '.mdc-deprecated-list-item',\n                );\n            const listElement = listItems[0];\n            listElement?.focus();\n\n            return;\n        }\n\n        if (isUp) {\n            const listItems =\n                this.list.shadowRoot.querySelectorAll<HTMLElement>(\n                    '.mdc-deprecated-list-item',\n                );\n            const listElement = listItems[listItems.length - 1];\n            listElement?.focus();\n        }\n    };\n\n    // Key handler for the menu list\n    // Will change focus to the search field if using shift+tab\n    // And can go forward/back with righ/left arrow keys\n    private handleMenuKeyDown = (event: KeyboardEvent) => {\n        const isBackwardTab =\n            event.key === TAB &&\n            !event.altKey &&\n            !event.metaKey &&\n            event.shiftKey;\n\n        const isLeft = event.key === ARROW_LEFT;\n\n        const isRight = event.key === ARROW_RIGHT;\n\n        if (!isBackwardTab && !isLeft && !isRight) {\n            return;\n        }\n\n        if (isBackwardTab) {\n            event.stopPropagation();\n            event.preventDefault();\n            this.searchInput?.focus();\n        } else if (!this.gridLayout) {\n            const currentItem = this.getCurrentItem();\n\n            event.stopPropagation();\n            event.preventDefault();\n            if (isRight) {\n                this.goForward(currentItem);\n            } else if (isLeft) {\n                this.goBack();\n            }\n        }\n    };\n\n    private clearSearch = () => {\n        this.searchValue = '';\n        this.searchResults = null;\n        this.loadingSubItems = false;\n    };\n\n    private getCurrentItem = (): MenuItem => {\n        const activeItem = this.list?.shadowRoot?.querySelector(\n            '[role=\"menuitem\"][tabindex=\"0\"]',\n        );\n        const attrIndex = activeItem?.attributes?.getNamedItem('data-index');\n        const dataIndex = parseInt(attrIndex?.value || '0', 10);\n\n        return this.visibleItems[dataIndex] as MenuItem;\n    };\n\n    private goForward = (currentItem: MenuItem) => {\n        this.handleSelect(currentItem, false);\n    };\n\n    private goBack = () => {\n        if (!this.currentSubMenu) {\n            // Already in the root of the menu\n            return;\n        }\n\n        const parent = this.currentSubMenu.parentItem;\n        if (!parent) {\n            // If only one step down, go to the root of the menu.\n            // No need to load a sub-menu.\n            this.currentSubMenu = null;\n            this.clearSearch();\n            this.navigateMenu.emit(null);\n\n            this.setFocus();\n\n            return;\n        }\n\n        this.handleSelect(parent);\n    };\n\n    private setTriggerAttributes = (element: HTMLElement) => {\n        const attributes = {\n            'aria-haspopup': true,\n            'aria-expanded': this.open,\n            'aria-controls': this.portalId,\n            disabled: this.disabled,\n            role: 'button',\n        };\n\n        for (const [key, value] of Object.entries(attributes)) {\n            if (!value) {\n                element.removeAttribute(key);\n            } else {\n                element.setAttribute(key, String(value));\n            }\n        }\n    };\n\n    private onClose = () => {\n        this.cancel.emit();\n        this.open = false;\n        this.currentSubMenu = null;\n    };\n\n    private onTriggerClick = (event: MouseEvent) => {\n        event.stopPropagation();\n        if (this.disabled) {\n            return;\n        }\n\n        this.open = !this.open;\n    };\n\n    private handleSelect = async (\n        menuItem: MenuItem,\n        selectOnEmptyChildren: boolean = true,\n    ) => {\n        if (Array.isArray(menuItem?.items) && menuItem.items.length > 0) {\n            this.selectedMenuItem = menuItem;\n            this.clearSearch();\n            this.currentSubMenu = menuItem;\n            this.navigateMenu.emit(menuItem);\n\n            this.setFocus();\n\n            return;\n        } else if (isFunction(menuItem?.items)) {\n            const menuLoader = menuItem.items as MenuLoader;\n            this.selectedMenuItem = menuItem;\n            this.loadingSubItems = true;\n            const subItems = await menuLoader(menuItem);\n\n            if (this.selectedMenuItem !== menuItem) {\n                return;\n            }\n\n            menuItem.items = subItems;\n            this.loadingSubItems = false;\n\n            if (subItems?.length) {\n                this.currentSubMenu = menuItem;\n                this.clearSearch();\n                this.navigateMenu.emit(menuItem);\n\n                this.setFocus();\n\n                return;\n            }\n        }\n\n        if (!selectOnEmptyChildren) {\n            return;\n        }\n\n        this.selectedMenuItem = menuItem;\n        this.loadingSubItems = false;\n\n        this.select.emit(menuItem);\n        this.open = false;\n        this.currentSubMenu = null;\n        this.setFocus();\n    };\n\n    private onSelect = (event: CustomEvent<MenuItem>) => {\n        event.stopPropagation();\n        this.handleSelect(event.detail);\n    };\n\n    private getCssProperties() {\n        const propertyNames = [\n            '--menu-surface-width',\n            '--list-grid-item-max-width',\n            '--list-grid-item-min-width',\n            '--list-grid-gap',\n            '--notification-badge-background-color',\n            '--notification-badge-text-color',\n        ] as const;\n        const style = getComputedStyle(this.host);\n        const values = propertyNames.map((property) => {\n            return style.getPropertyValue(property);\n        });\n\n        type PropName = (typeof propertyNames)[number];\n\n        return zipObject(propertyNames, values) as Record<PropName, string>;\n    }\n\n    private setListElement = (element: HTMLLimelMenuListElement) => {\n        this.list = element;\n    };\n\n    private setFocus = () => {\n        setTimeout(() => {\n            if (this.searchInput && this.searcher) {\n                const observer = new IntersectionObserver(() => {\n                    observer.unobserve(this.searchInput);\n                    if (this.searchInput === window.document.activeElement) {\n                        return;\n                    }\n\n                    this.searchInput.focus();\n                });\n                observer.observe(this.searchInput);\n            } else if (this.list) {\n                const observer = new IntersectionObserver(() => {\n                    observer.unobserve(this.list);\n                    this.focusMenuItem();\n                });\n                observer.observe(this.list);\n            }\n        }, 0);\n    };\n\n    private setSearchElement = (element: HTMLLimelInputFieldElement) => {\n        this.searchInput = element;\n    };\n\n    private focusMenuItem = () => {\n        if (!this.list) {\n            return;\n        }\n\n        const activeElement = this.list.shadowRoot.activeElement as HTMLElement;\n        activeElement?.blur();\n\n        const menuItems = this.visibleItems.filter(this.isMenuItem);\n        const selectedIndex = Math.max(\n            menuItems.findIndex((item) => item.selected),\n            0,\n        );\n        const menuElements: HTMLElement[] = Array.from(\n            this.list.shadowRoot.querySelectorAll('[role=\"menuitem\"]'),\n        );\n        menuElements[selectedIndex]?.focus();\n    };\n\n    private isMenuItem(item: MenuItem | ListSeparator): item is MenuItem {\n        return !('separator' in item);\n    }\n\n    private renderNotificationBadge = () => {\n        if (this.items.some(this.hasNotificationBadge)) {\n            return <limel-badge />;\n        }\n    };\n\n    private hasNotificationBadge = (item: MenuItem | ListSeparator) =>\n        this.isMenuItem(item) && item.badge !== undefined;\n\n    private setTriggerRef = (elm?: HTMLSlotElement) => {\n        this.triggerElement = elm;\n    };\n\n    private getMenuSurfaceWidth(customWidth: string): string {\n        if (customWidth) {\n            return customWidth;\n        }\n\n        if (this.surfaceWidth === 'inherit-from-trigger') {\n            const assignedTriggers = this.triggerElement?.assignedElements();\n\n            if (\n                !assignedTriggers?.length ||\n                !assignedTriggers[0]?.clientWidth\n            ) {\n                return '';\n            }\n\n            return `${assignedTriggers[0].clientWidth}px`;\n        } else if (this.surfaceWidth === 'inherit-from-menu') {\n            if (!this.host?.clientWidth) {\n                return '';\n            }\n\n            return `${this.host?.clientWidth}px`;\n        }\n\n        return '';\n    }\n\n    private get visibleItems(): Array<MenuItem | ListSeparator> {\n        if (Array.isArray(this.searchResults) && this.searchValue) {\n            return this.searchResults;\n        } else if (Array.isArray(this.currentSubMenu?.items)) {\n            return this.currentSubMenu.items.map((item) => ({\n                ...item,\n                parentItem: this.currentSubMenu,\n            }));\n        }\n\n        return this.items;\n    }\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n    ANCHOR: 'mdc-menu-surface--anchor',\n    ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',\n    ANIMATING_OPEN: 'mdc-menu-surface--animating-open',\n    FIXED: 'mdc-menu-surface--fixed',\n    IS_OPEN_BELOW: 'mdc-menu-surface--is-open-below',\n    OPEN: 'mdc-menu-surface--open',\n    ROOT: 'mdc-menu-surface',\n};\n// tslint:disable:object-literal-sort-keys\nvar strings = {\n    CLOSED_EVENT: 'MDCMenuSurface:closed',\n    CLOSING_EVENT: 'MDCMenuSurface:closing',\n    OPENED_EVENT: 'MDCMenuSurface:opened',\n    FOCUSABLE_ELEMENTS: [\n        'button:not(:disabled)',\n        '[href]:not([aria-disabled=\"true\"])',\n        'input:not(:disabled)',\n        'select:not(:disabled)',\n        'textarea:not(:disabled)',\n        '[tabindex]:not([tabindex=\"-1\"]):not([aria-disabled=\"true\"])',\n    ].join(', '),\n};\n// tslint:enable:object-literal-sort-keys\nvar numbers = {\n    /** Total duration of menu-surface open animation. */\n    TRANSITION_OPEN_DURATION: 120,\n    /** Total duration of menu-surface close animation. */\n    TRANSITION_CLOSE_DURATION: 75,\n    /**\n     * Margin left to the edge of the viewport when menu-surface is at maximum\n     * possible height. Also used as a viewport margin.\n     */\n    MARGIN_TO_EDGE: 32,\n    /**\n     * Ratio of anchor width to menu-surface width for switching from corner\n     * positioning to center positioning.\n     */\n    ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,\n    /**\n     * Amount of time to wait before restoring focus when closing the menu\n     * surface. This is important because if a touch event triggered the menu\n     * close, and the subsequent mouse event occurs after focus is restored, then\n     * the restored focus would be lost.\n     */\n    TOUCH_EVENT_WAIT_MS: 30,\n};\n/**\n * Enum for bits in the {@see Corner) bitmap.\n */\nvar CornerBit;\n(function (CornerBit) {\n    CornerBit[CornerBit[\"BOTTOM\"] = 1] = \"BOTTOM\";\n    CornerBit[CornerBit[\"CENTER\"] = 2] = \"CENTER\";\n    CornerBit[CornerBit[\"RIGHT\"] = 4] = \"RIGHT\";\n    CornerBit[CornerBit[\"FLIP_RTL\"] = 8] = \"FLIP_RTL\";\n})(CornerBit || (CornerBit = {}));\n/**\n * Enum for representing an element corner for positioning the menu-surface.\n *\n * The START constants map to LEFT if element directionality is left\n * to right and RIGHT if the directionality is right to left.\n * Likewise END maps to RIGHT or LEFT depending on the directionality.\n */\nvar Corner;\n(function (Corner) {\n    Corner[Corner[\"TOP_LEFT\"] = 0] = \"TOP_LEFT\";\n    Corner[Corner[\"TOP_RIGHT\"] = 4] = \"TOP_RIGHT\";\n    Corner[Corner[\"BOTTOM_LEFT\"] = 1] = \"BOTTOM_LEFT\";\n    Corner[Corner[\"BOTTOM_RIGHT\"] = 5] = \"BOTTOM_RIGHT\";\n    Corner[Corner[\"TOP_START\"] = 8] = \"TOP_START\";\n    Corner[Corner[\"TOP_END\"] = 12] = \"TOP_END\";\n    Corner[Corner[\"BOTTOM_START\"] = 9] = \"BOTTOM_START\";\n    Corner[Corner[\"BOTTOM_END\"] = 13] = \"BOTTOM_END\";\n})(Corner || (Corner = {}));\nexport { cssClasses, strings, numbers, CornerBit, Corner };\n//# sourceMappingURL=constants.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { Corner, CornerBit, cssClasses, numbers, strings } from './constants';\nvar MDCMenuSurfaceFoundation = /** @class */ (function (_super) {\n    __extends(MDCMenuSurfaceFoundation, _super);\n    function MDCMenuSurfaceFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCMenuSurfaceFoundation.defaultAdapter), adapter)) || this;\n        _this.isSurfaceOpen = false;\n        _this.isQuickOpen = false;\n        _this.isHoistedElement = false;\n        _this.isFixedPosition = false;\n        _this.isHorizontallyCenteredOnViewport = false;\n        _this.maxHeight = 0;\n        _this.openAnimationEndTimerId = 0;\n        _this.closeAnimationEndTimerId = 0;\n        _this.animationRequestId = 0;\n        _this.anchorCorner = Corner.TOP_START;\n        /**\n         * Corner of the menu surface to which menu surface is attached to anchor.\n         *\n         *  Anchor corner --->+----------+\n         *                    |  ANCHOR  |\n         *                    +----------+\n         *  Origin corner --->+--------------+\n         *                    |              |\n         *                    |              |\n         *                    | MENU SURFACE |\n         *                    |              |\n         *                    |              |\n         *                    +--------------+\n         */\n        _this.originCorner = Corner.TOP_START;\n        _this.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 };\n        _this.position = { x: 0, y: 0 };\n        return _this;\n    }\n    Object.defineProperty(MDCMenuSurfaceFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuSurfaceFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuSurfaceFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuSurfaceFoundation, \"Corner\", {\n        get: function () {\n            return Corner;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuSurfaceFoundation, \"defaultAdapter\", {\n        /**\n         * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                hasAnchor: function () { return false; },\n                isElementInContainer: function () { return false; },\n                isFocused: function () { return false; },\n                isRtl: function () { return false; },\n                getInnerDimensions: function () { return ({ height: 0, width: 0 }); },\n                getAnchorDimensions: function () { return null; },\n                getWindowDimensions: function () { return ({ height: 0, width: 0 }); },\n                getBodyDimensions: function () { return ({ height: 0, width: 0 }); },\n                getWindowScroll: function () { return ({ x: 0, y: 0 }); },\n                setPosition: function () { return undefined; },\n                setMaxHeight: function () { return undefined; },\n                setTransformOrigin: function () { return undefined; },\n                saveFocus: function () { return undefined; },\n                restoreFocus: function () { return undefined; },\n                notifyClose: function () { return undefined; },\n                notifyOpen: function () { return undefined; },\n                notifyClosing: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCMenuSurfaceFoundation.prototype.init = function () {\n        var _a = MDCMenuSurfaceFoundation.cssClasses, ROOT = _a.ROOT, OPEN = _a.OPEN;\n        if (!this.adapter.hasClass(ROOT)) {\n            throw new Error(ROOT + \" class required in root element.\");\n        }\n        if (this.adapter.hasClass(OPEN)) {\n            this.isSurfaceOpen = true;\n        }\n    };\n    MDCMenuSurfaceFoundation.prototype.destroy = function () {\n        clearTimeout(this.openAnimationEndTimerId);\n        clearTimeout(this.closeAnimationEndTimerId);\n        // Cancel any currently running animations.\n        cancelAnimationFrame(this.animationRequestId);\n    };\n    /**\n     * @param corner Default anchor corner alignment of top-left menu surface\n     *     corner.\n     */\n    MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function (corner) {\n        this.anchorCorner = corner;\n    };\n    /**\n     * Flip menu corner horizontally.\n     */\n    MDCMenuSurfaceFoundation.prototype.flipCornerHorizontally = function () {\n        this.originCorner = this.originCorner ^ CornerBit.RIGHT;\n    };\n    /**\n     * @param margin Set of margin values from anchor.\n     */\n    MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function (margin) {\n        this.anchorMargin.top = margin.top || 0;\n        this.anchorMargin.right = margin.right || 0;\n        this.anchorMargin.bottom = margin.bottom || 0;\n        this.anchorMargin.left = margin.left || 0;\n    };\n    /** Used to indicate if the menu-surface is hoisted to the body. */\n    MDCMenuSurfaceFoundation.prototype.setIsHoisted = function (isHoisted) {\n        this.isHoistedElement = isHoisted;\n    };\n    /**\n     * Used to set the menu-surface calculations based on a fixed position menu.\n     */\n    MDCMenuSurfaceFoundation.prototype.setFixedPosition = function (isFixedPosition) {\n        this.isFixedPosition = isFixedPosition;\n    };\n    /**\n     * @return Returns true if menu is in fixed (`position: fixed`) position.\n     */\n    MDCMenuSurfaceFoundation.prototype.isFixed = function () {\n        return this.isFixedPosition;\n    };\n    /** Sets the menu-surface position on the page. */\n    MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function (x, y) {\n        this.position.x = this.isFinite(x) ? x : 0;\n        this.position.y = this.isFinite(y) ? y : 0;\n    };\n    /** Sets whether menu-surface should be horizontally centered to viewport. */\n    MDCMenuSurfaceFoundation.prototype.setIsHorizontallyCenteredOnViewport = function (isCentered) {\n        this.isHorizontallyCenteredOnViewport = isCentered;\n    };\n    MDCMenuSurfaceFoundation.prototype.setQuickOpen = function (quickOpen) {\n        this.isQuickOpen = quickOpen;\n    };\n    /**\n     * Sets maximum menu-surface height on open.\n     * @param maxHeight The desired max-height. Set to 0 (default) to\n     *     automatically calculate max height based on available viewport space.\n     */\n    MDCMenuSurfaceFoundation.prototype.setMaxHeight = function (maxHeight) {\n        this.maxHeight = maxHeight;\n    };\n    MDCMenuSurfaceFoundation.prototype.isOpen = function () {\n        return this.isSurfaceOpen;\n    };\n    /**\n     * Open the menu surface.\n     */\n    MDCMenuSurfaceFoundation.prototype.open = function () {\n        var _this = this;\n        if (this.isSurfaceOpen) {\n            return;\n        }\n        this.adapter.saveFocus();\n        if (this.isQuickOpen) {\n            this.isSurfaceOpen = true;\n            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);\n            this.dimensions = this.adapter.getInnerDimensions();\n            this.autoposition();\n            this.adapter.notifyOpen();\n        }\n        else {\n            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);\n            this.animationRequestId = requestAnimationFrame(function () {\n                _this.dimensions = _this.adapter.getInnerDimensions();\n                _this.autoposition();\n                _this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);\n                _this.openAnimationEndTimerId = setTimeout(function () {\n                    _this.openAnimationEndTimerId = 0;\n                    _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);\n                    _this.adapter.notifyOpen();\n                }, numbers.TRANSITION_OPEN_DURATION);\n            });\n            this.isSurfaceOpen = true;\n        }\n    };\n    /**\n     * Closes the menu surface.\n     */\n    MDCMenuSurfaceFoundation.prototype.close = function (skipRestoreFocus) {\n        var _this = this;\n        if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }\n        if (!this.isSurfaceOpen) {\n            return;\n        }\n        this.adapter.notifyClosing();\n        if (this.isQuickOpen) {\n            this.isSurfaceOpen = false;\n            if (!skipRestoreFocus) {\n                this.maybeRestoreFocus();\n            }\n            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);\n            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);\n            this.adapter.notifyClose();\n            return;\n        }\n        this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);\n        requestAnimationFrame(function () {\n            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);\n            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);\n            _this.closeAnimationEndTimerId = setTimeout(function () {\n                _this.closeAnimationEndTimerId = 0;\n                _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);\n                _this.adapter.notifyClose();\n            }, numbers.TRANSITION_CLOSE_DURATION);\n        });\n        this.isSurfaceOpen = false;\n        if (!skipRestoreFocus) {\n            this.maybeRestoreFocus();\n        }\n    };\n    /** Handle clicks and close if not within menu-surface element. */\n    MDCMenuSurfaceFoundation.prototype.handleBodyClick = function (evt) {\n        var el = evt.target;\n        if (this.adapter.isElementInContainer(el)) {\n            return;\n        }\n        this.close();\n    };\n    /** Handle keys that close the surface. */\n    MDCMenuSurfaceFoundation.prototype.handleKeydown = function (evt) {\n        var keyCode = evt.keyCode, key = evt.key;\n        var isEscape = key === 'Escape' || keyCode === 27;\n        if (isEscape) {\n            this.close();\n        }\n    };\n    MDCMenuSurfaceFoundation.prototype.autoposition = function () {\n        var _a;\n        // Compute measurements for autoposition methods reuse.\n        this.measurements = this.getAutoLayoutmeasurements();\n        var corner = this.getoriginCorner();\n        var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);\n        var verticalAlignment = this.hasBit(corner, CornerBit.BOTTOM) ? 'bottom' : 'top';\n        var horizontalAlignment = this.hasBit(corner, CornerBit.RIGHT) ? 'right' : 'left';\n        var horizontalOffset = this.getHorizontalOriginOffset(corner);\n        var verticalOffset = this.getVerticalOriginOffset(corner);\n        var _b = this.measurements, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;\n        var position = (_a = {},\n            _a[horizontalAlignment] = horizontalOffset,\n            _a[verticalAlignment] = verticalOffset,\n            _a);\n        // Center align when anchor width is comparable or greater than menu\n        // surface, otherwise keep corner.\n        if (anchorSize.width / surfaceSize.width >\n            numbers.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {\n            horizontalAlignment = 'center';\n        }\n        // If the menu-surface has been hoisted to the body, it's no longer relative\n        // to the anchor element\n        if (this.isHoistedElement || this.isFixedPosition) {\n            this.adjustPositionForHoistedElement(position);\n        }\n        this.adapter.setTransformOrigin(horizontalAlignment + \" \" + verticalAlignment);\n        this.adapter.setPosition(position);\n        this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');\n        // If it is opened from the top then add is-open-below class\n        if (!this.hasBit(corner, CornerBit.BOTTOM)) {\n            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);\n        }\n    };\n    /**\n     * @return Measurements used to position menu surface popup.\n     */\n    MDCMenuSurfaceFoundation.prototype.getAutoLayoutmeasurements = function () {\n        var anchorRect = this.adapter.getAnchorDimensions();\n        var bodySize = this.adapter.getBodyDimensions();\n        var viewportSize = this.adapter.getWindowDimensions();\n        var windowScroll = this.adapter.getWindowScroll();\n        if (!anchorRect) {\n            // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together\n            anchorRect = {\n                top: this.position.y,\n                right: this.position.x,\n                bottom: this.position.y,\n                left: this.position.x,\n                width: 0,\n                height: 0,\n            };\n            // tslint:enable:object-literal-sort-keys\n        }\n        return {\n            anchorSize: anchorRect,\n            bodySize: bodySize,\n            surfaceSize: this.dimensions,\n            viewportDistance: {\n                // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together\n                top: anchorRect.top,\n                right: viewportSize.width - anchorRect.right,\n                bottom: viewportSize.height - anchorRect.bottom,\n                left: anchorRect.left,\n                // tslint:enable:object-literal-sort-keys\n            },\n            viewportSize: viewportSize,\n            windowScroll: windowScroll,\n        };\n    };\n    /**\n     * Computes the corner of the anchor from which to animate and position the\n     * menu surface.\n     *\n     * Only LEFT or RIGHT bit is used to position the menu surface ignoring RTL\n     * context. E.g., menu surface will be positioned from right side on TOP_END.\n     */\n    MDCMenuSurfaceFoundation.prototype.getoriginCorner = function () {\n        var corner = this.originCorner;\n        var _a = this.measurements, viewportDistance = _a.viewportDistance, anchorSize = _a.anchorSize, surfaceSize = _a.surfaceSize;\n        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;\n        var isAnchoredToBottom = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);\n        var availableTop;\n        var availableBottom;\n        if (isAnchoredToBottom) {\n            availableTop =\n                viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.bottom;\n            availableBottom =\n                viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;\n        }\n        else {\n            availableTop =\n                viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;\n            availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE +\n                anchorSize.height - this.anchorMargin.top;\n        }\n        var isAvailableBottom = availableBottom - surfaceSize.height > 0;\n        if (!isAvailableBottom && availableTop > availableBottom) {\n            // Attach bottom side of surface to the anchor.\n            corner = this.setBit(corner, CornerBit.BOTTOM);\n        }\n        var isRtl = this.adapter.isRtl();\n        var isFlipRtl = this.hasBit(this.anchorCorner, CornerBit.FLIP_RTL);\n        var hasRightBit = this.hasBit(this.anchorCorner, CornerBit.RIGHT) ||\n            this.hasBit(corner, CornerBit.RIGHT);\n        // Whether surface attached to right side of anchor element.\n        var isAnchoredToRight = false;\n        // Anchored to start\n        if (isRtl && isFlipRtl) {\n            isAnchoredToRight = !hasRightBit;\n        }\n        else {\n            // Anchored to right\n            isAnchoredToRight = hasRightBit;\n        }\n        var availableLeft;\n        var availableRight;\n        if (isAnchoredToRight) {\n            availableLeft =\n                viewportDistance.left + anchorSize.width + this.anchorMargin.right;\n            availableRight = viewportDistance.right - this.anchorMargin.right;\n        }\n        else {\n            availableLeft = viewportDistance.left + this.anchorMargin.left;\n            availableRight =\n                viewportDistance.right + anchorSize.width - this.anchorMargin.left;\n        }\n        var isAvailableLeft = availableLeft - surfaceSize.width > 0;\n        var isAvailableRight = availableRight - surfaceSize.width > 0;\n        var isOriginCornerAlignedToEnd = this.hasBit(corner, CornerBit.FLIP_RTL) &&\n            this.hasBit(corner, CornerBit.RIGHT);\n        if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl ||\n            !isAvailableLeft && isOriginCornerAlignedToEnd) {\n            // Attach left side of surface to the anchor.\n            corner = this.unsetBit(corner, CornerBit.RIGHT);\n        }\n        else if (isAvailableLeft && isAnchoredToRight && isRtl ||\n            (isAvailableLeft && !isAnchoredToRight && hasRightBit) ||\n            (!isAvailableRight && availableLeft >= availableRight)) {\n            // Attach right side of surface to the anchor.\n            corner = this.setBit(corner, CornerBit.RIGHT);\n        }\n        return corner;\n    };\n    /**\n     * @param corner Origin corner of the menu surface.\n     * @return Maximum height of the menu surface, based on available space. 0\n     *     indicates should not be set.\n     */\n    MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight = function (corner) {\n        if (this.maxHeight > 0) {\n            return this.maxHeight;\n        }\n        var viewportDistance = this.measurements.viewportDistance;\n        var maxHeight = 0;\n        var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);\n        var isBottomAnchored = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);\n        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;\n        // When maximum height is not specified, it is handled from CSS.\n        if (isBottomAligned) {\n            maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;\n            if (!isBottomAnchored) {\n                maxHeight += this.measurements.anchorSize.height;\n            }\n        }\n        else {\n            maxHeight = viewportDistance.bottom - this.anchorMargin.bottom +\n                this.measurements.anchorSize.height - MARGIN_TO_EDGE;\n            if (isBottomAnchored) {\n                maxHeight -= this.measurements.anchorSize.height;\n            }\n        }\n        return maxHeight;\n    };\n    /**\n     * @param corner Origin corner of the menu surface.\n     * @return Horizontal offset of menu surface origin corner from corresponding\n     *     anchor corner.\n     */\n    MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset = function (corner) {\n        var anchorSize = this.measurements.anchorSize;\n        // isRightAligned corresponds to using the 'right' property on the surface.\n        var isRightAligned = this.hasBit(corner, CornerBit.RIGHT);\n        var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, CornerBit.RIGHT);\n        if (isRightAligned) {\n            var rightOffset = avoidHorizontalOverlap ?\n                anchorSize.width - this.anchorMargin.left :\n                this.anchorMargin.right;\n            // For hoisted or fixed elements, adjust the offset by the difference\n            // between viewport width and body width so when we calculate the right\n            // value (`adjustPositionForHoistedElement`) based on the element\n            // position, the right property is correct.\n            if (this.isHoistedElement || this.isFixedPosition) {\n                return rightOffset -\n                    (this.measurements.viewportSize.width -\n                        this.measurements.bodySize.width);\n            }\n            return rightOffset;\n        }\n        return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right :\n            this.anchorMargin.left;\n    };\n    /**\n     * @param corner Origin corner of the menu surface.\n     * @return Vertical offset of menu surface origin corner from corresponding\n     *     anchor corner.\n     */\n    MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset = function (corner) {\n        var anchorSize = this.measurements.anchorSize;\n        var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);\n        var avoidVerticalOverlap = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);\n        var y = 0;\n        if (isBottomAligned) {\n            y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top :\n                -this.anchorMargin.bottom;\n        }\n        else {\n            y = avoidVerticalOverlap ?\n                (anchorSize.height + this.anchorMargin.bottom) :\n                this.anchorMargin.top;\n        }\n        return y;\n    };\n    /**\n     * Calculates the offsets for positioning the menu-surface when the\n     * menu-surface has been hoisted to the body.\n     */\n    MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement = function (position) {\n        var e_1, _a;\n        var _b = this.measurements, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance, surfaceSize = _b.surfaceSize, viewportSize = _b.viewportSize;\n        var props = Object.keys(position);\n        try {\n            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {\n                var prop = props_1_1.value;\n                var value = position[prop] || 0;\n                if (this.isHorizontallyCenteredOnViewport &&\n                    (prop === 'left' || prop === 'right')) {\n                    position[prop] = (viewportSize.width - surfaceSize.width) / 2;\n                    continue;\n                }\n                // Hoisted surfaces need to have the anchor elements location on the page\n                // added to the position properties for proper alignment on the body.\n                value += viewportDistance[prop];\n                // Surfaces that are absolutely positioned need to have additional\n                // calculations for scroll and bottom positioning.\n                if (!this.isFixedPosition) {\n                    if (prop === 'top') {\n                        value += windowScroll.y;\n                    }\n                    else if (prop === 'bottom') {\n                        value -= windowScroll.y;\n                    }\n                    else if (prop === 'left') {\n                        value += windowScroll.x;\n                    }\n                    else { // prop === 'right'\n                        value -= windowScroll.x;\n                    }\n                }\n                position[prop] = value;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * The last focused element when the menu surface was opened should regain\n     * focus, if the user is focused on or within the menu surface when it is\n     * closed.\n     */\n    MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus = function () {\n        var _this = this;\n        var isRootFocused = this.adapter.isFocused();\n        var childHasFocus = document.activeElement &&\n            this.adapter.isElementInContainer(document.activeElement);\n        if (isRootFocused || childHasFocus) {\n            // Wait before restoring focus when closing the menu surface. This is\n            // important because if a touch event triggered the menu close, and the\n            // subsequent mouse event occurs after focus is restored, then the\n            // restored focus would be lost.\n            setTimeout(function () {\n                _this.adapter.restoreFocus();\n            }, numbers.TOUCH_EVENT_WAIT_MS);\n        }\n    };\n    MDCMenuSurfaceFoundation.prototype.hasBit = function (corner, bit) {\n        return Boolean(corner & bit); // tslint:disable-line:no-bitwise\n    };\n    MDCMenuSurfaceFoundation.prototype.setBit = function (corner, bit) {\n        return corner | bit; // tslint:disable-line:no-bitwise\n    };\n    MDCMenuSurfaceFoundation.prototype.unsetBit = function (corner, bit) {\n        return corner ^ bit;\n    };\n    /**\n     * isFinite that doesn't force conversion to number type.\n     * Equivalent to Number.isFinite in ES2015, which is not supported in IE.\n     */\n    MDCMenuSurfaceFoundation.prototype.isFinite = function (num) {\n        return typeof num === 'number' && isFinite(num);\n    };\n    return MDCMenuSurfaceFoundation;\n}(MDCFoundation));\nexport { MDCMenuSurfaceFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCMenuSurfaceFoundation;\n//# sourceMappingURL=foundation.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { cssClasses, strings } from './constants';\nimport { MDCMenuSurfaceFoundation } from './foundation';\nimport { getCorrectPropertyName } from '@material/animation/util';\nvar MDCMenuSurface = /** @class */ (function (_super) {\n    __extends(MDCMenuSurface, _super);\n    function MDCMenuSurface() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCMenuSurface.attachTo = function (root) {\n        return new MDCMenuSurface(root);\n    };\n    MDCMenuSurface.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        var parentEl = this.root.parentElement;\n        this.anchorElement = parentEl && parentEl.classList.contains(cssClasses.ANCHOR) ? parentEl : null;\n        if (this.root.classList.contains(cssClasses.FIXED)) {\n            this.setFixedPosition(true);\n        }\n        this.handleKeydown = function (event) {\n            _this.foundation.handleKeydown(event);\n        };\n        this.handleBodyClick = function (event) {\n            _this.foundation.handleBodyClick(event);\n        };\n        // capture so that no race between handleBodyClick and quickOpen when\n        // menusurface opened on button click which registers this listener\n        this.registerBodyClickListener = function () {\n            document.body.addEventListener('click', _this.handleBodyClick, { capture: true });\n        };\n        this.deregisterBodyClickListener = function () {\n            document.body.removeEventListener('click', _this.handleBodyClick, { capture: true });\n        };\n        this.listen('keydown', this.handleKeydown);\n        this.listen(strings.OPENED_EVENT, this.registerBodyClickListener);\n        this.listen(strings.CLOSED_EVENT, this.deregisterBodyClickListener);\n    };\n    MDCMenuSurface.prototype.destroy = function () {\n        this.unlisten('keydown', this.handleKeydown);\n        this.unlisten(strings.OPENED_EVENT, this.registerBodyClickListener);\n        this.unlisten(strings.CLOSED_EVENT, this.deregisterBodyClickListener);\n        _super.prototype.destroy.call(this);\n    };\n    MDCMenuSurface.prototype.isOpen = function () {\n        return this.foundation.isOpen();\n    };\n    MDCMenuSurface.prototype.open = function () {\n        this.foundation.open();\n    };\n    MDCMenuSurface.prototype.close = function (skipRestoreFocus) {\n        if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }\n        this.foundation.close(skipRestoreFocus);\n    };\n    Object.defineProperty(MDCMenuSurface.prototype, \"quickOpen\", {\n        set: function (quickOpen) {\n            this.foundation.setQuickOpen(quickOpen);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** Sets the foundation to use page offsets for an positioning when the menu is hoisted to the body. */\n    MDCMenuSurface.prototype.setIsHoisted = function (isHoisted) {\n        this.foundation.setIsHoisted(isHoisted);\n    };\n    /** Sets the element that the menu-surface is anchored to. */\n    MDCMenuSurface.prototype.setMenuSurfaceAnchorElement = function (element) {\n        this.anchorElement = element;\n    };\n    /** Sets the menu-surface to position: fixed. */\n    MDCMenuSurface.prototype.setFixedPosition = function (isFixed) {\n        if (isFixed) {\n            this.root.classList.add(cssClasses.FIXED);\n        }\n        else {\n            this.root.classList.remove(cssClasses.FIXED);\n        }\n        this.foundation.setFixedPosition(isFixed);\n    };\n    /** Sets the absolute x/y position to position based on. Requires the menu to be hoisted. */\n    MDCMenuSurface.prototype.setAbsolutePosition = function (x, y) {\n        this.foundation.setAbsolutePosition(x, y);\n        this.setIsHoisted(true);\n    };\n    /**\n     * @param corner Default anchor corner alignment of top-left surface corner.\n     */\n    MDCMenuSurface.prototype.setAnchorCorner = function (corner) {\n        this.foundation.setAnchorCorner(corner);\n    };\n    MDCMenuSurface.prototype.setAnchorMargin = function (margin) {\n        this.foundation.setAnchorMargin(margin);\n    };\n    MDCMenuSurface.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            hasClass: function (className) { return _this.root.classList.contains(className); },\n            hasAnchor: function () { return !!_this.anchorElement; },\n            notifyClose: function () {\n                return _this.emit(MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});\n            },\n            notifyClosing: function () {\n                _this.emit(MDCMenuSurfaceFoundation.strings.CLOSING_EVENT, {});\n            },\n            notifyOpen: function () {\n                return _this.emit(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});\n            },\n            isElementInContainer: function (el) { return _this.root.contains(el); },\n            isRtl: function () {\n                return getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl';\n            },\n            setTransformOrigin: function (origin) {\n                var propertyName = getCorrectPropertyName(window, 'transform') + \"-origin\";\n                _this.root.style.setProperty(propertyName, origin);\n            },\n            isFocused: function () { return document.activeElement === _this.root; },\n            saveFocus: function () {\n                _this.previousFocus =\n                    document.activeElement;\n            },\n            restoreFocus: function () {\n                if (_this.root.contains(document.activeElement)) {\n                    if (_this.previousFocus && _this.previousFocus.focus) {\n                        _this.previousFocus.focus();\n                    }\n                }\n            },\n            getInnerDimensions: function () {\n                return {\n                    width: _this.root.offsetWidth,\n                    height: _this.root.offsetHeight\n                };\n            },\n            getAnchorDimensions: function () { return _this.anchorElement ?\n                _this.anchorElement.getBoundingClientRect() :\n                null; },\n            getWindowDimensions: function () {\n                return { width: window.innerWidth, height: window.innerHeight };\n            },\n            getBodyDimensions: function () {\n                return { width: document.body.clientWidth, height: document.body.clientHeight };\n            },\n            getWindowScroll: function () {\n                return { x: window.pageXOffset, y: window.pageYOffset };\n            },\n            setPosition: function (position) {\n                var rootHTML = _this.root;\n                rootHTML.style.left = 'left' in position ? position.left + \"px\" : '';\n                rootHTML.style.right = 'right' in position ? position.right + \"px\" : '';\n                rootHTML.style.top = 'top' in position ? position.top + \"px\" : '';\n                rootHTML.style.bottom =\n                    'bottom' in position ? position.bottom + \"px\" : '';\n            },\n            setMaxHeight: function (height) {\n                _this.root.style.maxHeight = height;\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n        return new MDCMenuSurfaceFoundation(adapter);\n    };\n    return MDCMenuSurface;\n}(MDCComponent));\nexport { MDCMenuSurface };\n//# sourceMappingURL=component.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n    MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',\n    MENU_SELECTION_GROUP: 'mdc-menu__selection-group',\n    ROOT: 'mdc-menu',\n};\nvar strings = {\n    ARIA_CHECKED_ATTR: 'aria-checked',\n    ARIA_DISABLED_ATTR: 'aria-disabled',\n    CHECKBOX_SELECTOR: 'input[type=\"checkbox\"]',\n    LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',\n    SELECTED_EVENT: 'MDCMenu:selected',\n    SKIP_RESTORE_FOCUS: 'data-menu-item-skip-restore-focus',\n};\nvar numbers = {\n    FOCUS_ROOT_INDEX: -1,\n};\nvar DefaultFocusState;\n(function (DefaultFocusState) {\n    DefaultFocusState[DefaultFocusState[\"NONE\"] = 0] = \"NONE\";\n    DefaultFocusState[DefaultFocusState[\"LIST_ROOT\"] = 1] = \"LIST_ROOT\";\n    DefaultFocusState[DefaultFocusState[\"FIRST_ITEM\"] = 2] = \"FIRST_ITEM\";\n    DefaultFocusState[DefaultFocusState[\"LAST_ITEM\"] = 3] = \"LAST_ITEM\";\n})(DefaultFocusState || (DefaultFocusState = {}));\nexport { cssClasses, strings, numbers, DefaultFocusState };\n//# sourceMappingURL=constants.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses as listCssClasses } from '@material/list/constants';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, DefaultFocusState, numbers, strings } from './constants';\nvar MDCMenuFoundation = /** @class */ (function (_super) {\n    __extends(MDCMenuFoundation, _super);\n    function MDCMenuFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation.defaultAdapter), adapter)) || this;\n        _this.closeAnimationEndTimerId = 0;\n        _this.defaultFocusState = DefaultFocusState.LIST_ROOT;\n        _this.selectedIndex = -1;\n        return _this;\n    }\n    Object.defineProperty(MDCMenuFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenuFoundation, \"defaultAdapter\", {\n        /**\n         * @see {@link MDCMenuAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClassToElementAtIndex: function () { return undefined; },\n                removeClassFromElementAtIndex: function () { return undefined; },\n                addAttributeToElementAtIndex: function () { return undefined; },\n                removeAttributeFromElementAtIndex: function () { return undefined; },\n                getAttributeFromElementAtIndex: function () { return null; },\n                elementContainsClass: function () { return false; },\n                closeSurface: function () { return undefined; },\n                getElementIndex: function () { return -1; },\n                notifySelected: function () { return undefined; },\n                getMenuItemCount: function () { return 0; },\n                focusItemAtIndex: function () { return undefined; },\n                focusListRoot: function () { return undefined; },\n                getSelectedSiblingOfItemAtIndex: function () { return -1; },\n                isSelectableItemAtIndex: function () { return false; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCMenuFoundation.prototype.destroy = function () {\n        if (this.closeAnimationEndTimerId) {\n            clearTimeout(this.closeAnimationEndTimerId);\n        }\n        this.adapter.closeSurface();\n    };\n    MDCMenuFoundation.prototype.handleKeydown = function (evt) {\n        var key = evt.key, keyCode = evt.keyCode;\n        var isTab = key === 'Tab' || keyCode === 9;\n        if (isTab) {\n            this.adapter.closeSurface(/** skipRestoreFocus */ true);\n        }\n    };\n    MDCMenuFoundation.prototype.handleItemAction = function (listItem) {\n        var _this = this;\n        var index = this.adapter.getElementIndex(listItem);\n        if (index < 0) {\n            return;\n        }\n        this.adapter.notifySelected({ index: index });\n        var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, strings.SKIP_RESTORE_FOCUS) === 'true';\n        this.adapter.closeSurface(skipRestoreFocus);\n        // Wait for the menu to close before adding/removing classes that affect styles.\n        this.closeAnimationEndTimerId = setTimeout(function () {\n            // Recompute the index in case the menu contents have changed.\n            var recomputedIndex = _this.adapter.getElementIndex(listItem);\n            if (recomputedIndex >= 0 &&\n                _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {\n                _this.setSelectedIndex(recomputedIndex);\n            }\n        }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);\n    };\n    MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {\n        switch (this.defaultFocusState) {\n            case DefaultFocusState.FIRST_ITEM:\n                this.adapter.focusItemAtIndex(0);\n                break;\n            case DefaultFocusState.LAST_ITEM:\n                this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);\n                break;\n            case DefaultFocusState.NONE:\n                // Do nothing.\n                break;\n            default:\n                this.adapter.focusListRoot();\n                break;\n        }\n    };\n    /**\n     * Sets default focus state where the menu should focus every time when menu\n     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n     * default.\n     */\n    MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {\n        this.defaultFocusState = focusState;\n    };\n    /** @return Index of the currently selected list item within the menu. */\n    MDCMenuFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    /**\n     * Selects the list item at `index` within the menu.\n     * @param index Index of list item within the menu.\n     */\n    MDCMenuFoundation.prototype.setSelectedIndex = function (index) {\n        this.validatedIndex(index);\n        if (!this.adapter.isSelectableItemAtIndex(index)) {\n            throw new Error('MDCMenuFoundation: No selection group at specified index.');\n        }\n        var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);\n        if (prevSelectedIndex >= 0) {\n            this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, strings.ARIA_CHECKED_ATTR);\n            this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses.MENU_SELECTED_LIST_ITEM);\n        }\n        this.adapter.addClassToElementAtIndex(index, cssClasses.MENU_SELECTED_LIST_ITEM);\n        this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_CHECKED_ATTR, 'true');\n        this.selectedIndex = index;\n    };\n    /**\n     * Sets the enabled state to isEnabled for the menu item at the given index.\n     * @param index Index of the menu item\n     * @param isEnabled The desired enabled state of the menu item.\n     */\n    MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {\n        this.validatedIndex(index);\n        if (isEnabled) {\n            this.adapter.removeClassFromElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'false');\n        }\n        else {\n            this.adapter.addClassToElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'true');\n        }\n    };\n    MDCMenuFoundation.prototype.validatedIndex = function (index) {\n        var menuSize = this.adapter.getMenuItemCount();\n        var isIndexInRange = index >= 0 && index < menuSize;\n        if (!isIndexInRange) {\n            throw new Error('MDCMenuFoundation: No list item at specified index.');\n        }\n    };\n    return MDCMenuFoundation;\n}(MDCFoundation));\nexport { MDCMenuFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCMenuFoundation;\n//# sourceMappingURL=foundation.js.map","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { MDCList } from '@material/list/component';\nimport { numbers as listConstants } from '@material/list/constants';\nimport { MDCListFoundation } from '@material/list/foundation';\nimport { MDCMenuSurface } from '@material/menu-surface/component';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCMenuFoundation } from './foundation';\nvar MDCMenu = /** @class */ (function (_super) {\n    __extends(MDCMenu, _super);\n    function MDCMenu() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCMenu.attachTo = function (root) {\n        return new MDCMenu(root);\n    };\n    MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {\n        if (menuSurfaceFactory === void 0) { menuSurfaceFactory = function (el) { return new MDCMenuSurface(el); }; }\n        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }\n        this.menuSurfaceFactory = menuSurfaceFactory;\n        this.listFactory = listFactory;\n    };\n    MDCMenu.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.menuSurface = this.menuSurfaceFactory(this.root);\n        var list = this.root.querySelector(strings.LIST_SELECTOR);\n        if (list) {\n            this.list = this.listFactory(list);\n            this.list.wrapFocus = true;\n        }\n        else {\n            this.list = null;\n        }\n        this.handleKeydown = function (evt) {\n            _this.foundation.handleKeydown(evt);\n        };\n        this.handleItemAction = function (evt) {\n            _this.foundation.handleItemAction(_this.items[evt.detail.index]);\n        };\n        this.handleMenuSurfaceOpened = function () {\n            _this.foundation.handleMenuSurfaceOpened();\n        };\n        this.menuSurface.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);\n        this.listen('keydown', this.handleKeydown);\n        this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);\n    };\n    MDCMenu.prototype.destroy = function () {\n        if (this.list) {\n            this.list.destroy();\n        }\n        this.menuSurface.destroy();\n        this.menuSurface.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);\n        this.unlisten('keydown', this.handleKeydown);\n        this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);\n        _super.prototype.destroy.call(this);\n    };\n    Object.defineProperty(MDCMenu.prototype, \"open\", {\n        get: function () {\n            return this.menuSurface.isOpen();\n        },\n        set: function (value) {\n            if (value) {\n                this.menuSurface.open();\n            }\n            else {\n                this.menuSurface.close();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"wrapFocus\", {\n        get: function () {\n            return this.list ? this.list.wrapFocus : false;\n        },\n        set: function (value) {\n            if (this.list) {\n                this.list.wrapFocus = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"hasTypeahead\", {\n        /**\n         * Sets whether the menu has typeahead functionality.\n         * @param value Whether typeahead is enabled.\n         */\n        set: function (value) {\n            if (this.list) {\n                this.list.hasTypeahead = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"typeaheadInProgress\", {\n        /**\n         * @return Whether typeahead logic is currently matching some user prefix.\n         */\n        get: function () {\n            return this.list ? this.list.typeaheadInProgress : false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Given the next desired character from the user, adds it to the typeahead\n     * buffer. Then, attempts to find the next option matching the buffer. Wraps\n     * around if at the end of options.\n     *\n     * @param nextChar The next character to add to the prefix buffer.\n     * @param startingIndex The index from which to start matching. Only relevant\n     *     when starting a new match sequence. To start a new match sequence,\n     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n     *     to clear after a set interval defined in list foundation. Defaults to\n     *     the currently focused index.\n     * @return The index of the matched item, or -1 if no match.\n     */\n    MDCMenu.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {\n        if (this.list) {\n            return this.list.typeaheadMatchItem(nextChar, startingIndex);\n        }\n        return -1;\n    };\n    /**\n     * Layout the underlying list element in the case of any dynamic updates\n     * to its structure.\n     */\n    MDCMenu.prototype.layout = function () {\n        if (this.list) {\n            this.list.layout();\n        }\n    };\n    Object.defineProperty(MDCMenu.prototype, \"items\", {\n        /**\n         * Return the items within the menu. Note that this only contains the set of elements within\n         * the items container that are proper list items, and not supplemental / presentational DOM\n         * elements.\n         */\n        get: function () {\n            return this.list ? this.list.listElements : [];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"singleSelection\", {\n        /**\n         * Turns on/off the underlying list's single selection mode. Used mainly\n         * by select menu.\n         *\n         * @param singleSelection Whether to enable single selection mode.\n         */\n        set: function (singleSelection) {\n            if (this.list) {\n                this.list.singleSelection = singleSelection;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"selectedIndex\", {\n        /**\n         * Retrieves the selected index. Only applicable to select menus.\n         * @return The selected index, which is a number for single selection and\n         *     radio lists, and an array of numbers for checkbox lists.\n         */\n        get: function () {\n            return this.list ? this.list.selectedIndex : listConstants.UNSET_INDEX;\n        },\n        /**\n         * Sets the selected index of the list. Only applicable to select menus.\n         * @param index The selected index, which is a number for single selection and\n         *     radio lists, and an array of numbers for checkbox lists.\n         */\n        set: function (index) {\n            if (this.list) {\n                this.list.selectedIndex = index;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCMenu.prototype, \"quickOpen\", {\n        set: function (quickOpen) {\n            this.menuSurface.quickOpen = quickOpen;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets default focus state where the menu should focus every time when menu\n     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n     * default.\n     * @param focusState Default focus state.\n     */\n    MDCMenu.prototype.setDefaultFocusState = function (focusState) {\n        this.foundation.setDefaultFocusState(focusState);\n    };\n    /**\n     * @param corner Default anchor corner alignment of top-left menu corner.\n     */\n    MDCMenu.prototype.setAnchorCorner = function (corner) {\n        this.menuSurface.setAnchorCorner(corner);\n    };\n    MDCMenu.prototype.setAnchorMargin = function (margin) {\n        this.menuSurface.setAnchorMargin(margin);\n    };\n    /**\n     * Sets the list item as the selected row at the specified index.\n     * @param index Index of list item within menu.\n     */\n    MDCMenu.prototype.setSelectedIndex = function (index) {\n        this.foundation.setSelectedIndex(index);\n    };\n    /**\n     * Sets the enabled state to isEnabled for the menu item at the given index.\n     * @param index Index of the menu item\n     * @param isEnabled The desired enabled state of the menu item.\n     */\n    MDCMenu.prototype.setEnabled = function (index, isEnabled) {\n        this.foundation.setEnabled(index, isEnabled);\n    };\n    /**\n     * @return The item within the menu at the index specified.\n     */\n    MDCMenu.prototype.getOptionByIndex = function (index) {\n        var items = this.items;\n        if (index < items.length) {\n            return this.items[index];\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @param index A menu item's index.\n     * @return The primary text within the menu at the index specified.\n     */\n    MDCMenu.prototype.getPrimaryTextAtIndex = function (index) {\n        var item = this.getOptionByIndex(index);\n        if (item && this.list) {\n            return this.list.getPrimaryText(item) || '';\n        }\n        return '';\n    };\n    MDCMenu.prototype.setFixedPosition = function (isFixed) {\n        this.menuSurface.setFixedPosition(isFixed);\n    };\n    MDCMenu.prototype.setIsHoisted = function (isHoisted) {\n        this.menuSurface.setIsHoisted(isHoisted);\n    };\n    MDCMenu.prototype.setAbsolutePosition = function (x, y) {\n        this.menuSurface.setAbsolutePosition(x, y);\n    };\n    /**\n     * Sets the element that the menu-surface is anchored to.\n     */\n    MDCMenu.prototype.setAnchorElement = function (element) {\n        this.menuSurface.anchorElement = element;\n    };\n    MDCMenu.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClassToElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.add(className);\n            },\n            removeClassFromElementAtIndex: function (index, className) {\n                var list = _this.items;\n                list[index].classList.remove(className);\n            },\n            addAttributeToElementAtIndex: function (index, attr, value) {\n                var list = _this.items;\n                list[index].setAttribute(attr, value);\n            },\n            removeAttributeFromElementAtIndex: function (index, attr) {\n                var list = _this.items;\n                list[index].removeAttribute(attr);\n            },\n            getAttributeFromElementAtIndex: function (index, attr) {\n                var list = _this.items;\n                return list[index].getAttribute(attr);\n            },\n            elementContainsClass: function (element, className) {\n                return element.classList.contains(className);\n            },\n            closeSurface: function (skipRestoreFocus) {\n                _this.menuSurface.close(skipRestoreFocus);\n            },\n            getElementIndex: function (element) { return _this.items.indexOf(element); },\n            notifySelected: function (evtData) {\n                _this.emit(strings.SELECTED_EVENT, {\n                    index: evtData.index,\n                    item: _this.items[evtData.index],\n                });\n            },\n            getMenuItemCount: function () { return _this.items.length; },\n            focusItemAtIndex: function (index) {\n                _this.items[index].focus();\n            },\n            focusListRoot: function () {\n                _this.root.querySelector(strings.LIST_SELECTOR).focus();\n            },\n            isSelectableItemAtIndex: function (index) {\n                return !!closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n            },\n            getSelectedSiblingOfItemAtIndex: function (index) {\n                var selectionGroupEl = closest(_this.items[index], \".\" + cssClasses.MENU_SELECTION_GROUP);\n                var selectedItemEl = selectionGroupEl.querySelector(\".\" + cssClasses.MENU_SELECTED_LIST_ITEM);\n                return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n        return new MDCMenuFoundation(adapter);\n    };\n    return MDCMenu;\n}(MDCComponent));\nexport { MDCMenu };\n//# sourceMappingURL=component.js.map","import { ListSeparator } from '../list/list-item.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { h } from '@stencil/core';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\nimport {\n    getIconColor,\n    getIconName,\n    getIconTitle,\n} from '../icon/get-icon-props';\nimport { isFunction } from 'lodash-es';\n\nexport class MenuListRenderer {\n    private defaultConfig: MenuListRendererConfig = {\n        isOpen: true,\n        badgeIcons: false,\n    };\n\n    private config: MenuListRendererConfig;\n\n    private hasIcons: boolean;\n    private twoLines: boolean;\n    private avatarList: boolean;\n    private commandKey: boolean;\n\n    private applyTabIndexToItemAtIndex: number;\n\n    public render(\n        items: Array<MenuItem | ListSeparator>,\n        config: MenuListRendererConfig = {},\n    ) {\n        items = items || [];\n        this.config = { ...this.defaultConfig, ...config };\n\n        this.twoLines = items.some((item) => {\n            return 'secondaryText' in item && !!item.secondaryText;\n        });\n\n        this.commandKey = items.some((item) => {\n            return 'commandText' in item && !!item.commandText;\n        });\n\n        this.hasIcons = items.some((item) => {\n            return 'icon' in item && !!item.icon;\n        });\n\n        this.avatarList = this.config.badgeIcons && this.hasIcons;\n\n        this.applyTabIndexToItemAtIndex =\n            this.getIndexForWhichToApplyTabIndex(items);\n\n        const classNames = {\n            'mdc-deprecated-list': true,\n            'mdc-deprecated-list--two-line': this.twoLines,\n            selectable: true,\n            'mdc-deprecated-list--avatar-list': this.avatarList,\n            'list--compact':\n                this.twoLines &&\n                this.commandKey &&\n                ['small', 'x-small'].includes(this.config.iconSize),\n        };\n\n        return (\n            <ul\n                class={classNames}\n                role=\"menu\"\n                aria-orientation=\"vertical\"\n                style={{ '--maxLinesSecondaryText': '2' }}\n            >\n                {items.map(this.renderMenuItem)}\n            </ul>\n        );\n    }\n\n    /**\n     * Determine which MenuItem should have the `tab-index` attribute set,\n     * and return the index at which that MenuItem is located in `items`.\n     * Returns `undefined` if no item should have the attribute set.\n     * See https://github.com/material-components/material-components-web/tree/e66a43a75fef4f9179e24856649518e15e279a04/packages/mdc-list#accessibility\n     *\n     * @param items - the items of the list, including any `ListSeparator`:s\n     * @returns the index as per the description\n     */\n    private getIndexForWhichToApplyTabIndex = (\n        items: Array<MenuItem | ListSeparator>,\n    ) => {\n        let result;\n        for (let i = 0, max = items.length; i < max; i += 1) {\n            if ('separator' in items[i]) {\n                // Ignore ListSeparator\n            } else {\n                const item = items[i] as MenuItem<any>;\n                if (item.disabled) {\n                    // Skip disabled items - they should never get tabindex\n                    continue;\n                }\n\n                if (item.selected) {\n                    result = i;\n                    break;\n                }\n\n                if (result === undefined) {\n                    result = i;\n                    // Do NOT break, as any later item with\n                    // `selected=true` should get the tab-index instead!\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Render a single list item\n     *\n     * @param item - the item to render\n     * @param index - the index the item had in the `items` array\n     * @returns the list item\n     */\n    private renderMenuItem = (\n        item: MenuItem | ListSeparator,\n        index: number,\n    ) => {\n        if ('separator' in item) {\n            return (\n                <li class=\"mdc-deprecated-list-divider\" role=\"separator\">\n                    {this.rendertext(item)}\n                    <div class=\"limel-list-divider-line\" />\n                </li>\n            );\n        }\n\n        const classNames = {\n            'mdc-deprecated-list-item': true,\n            'mdc-deprecated-list-item--disabled': item.disabled,\n            'mdc-deprecated-list-item--selected': item.selected,\n        };\n\n        const attributes: { tabindex?: string } = {};\n        if (index === this.applyTabIndexToItemAtIndex) {\n            attributes.tabindex = '0';\n        }\n\n        return (\n            <li\n                class={classNames}\n                role=\"menuitem\"\n                aria-disabled={item.disabled ? 'true' : 'false'}\n                aria-selected={item.selected ? 'true' : 'false'}\n                data-index={index}\n                data-text={item.text}\n                {...attributes}\n            >\n                {this.renderIcon(this.config, item)}\n                {this.renderText(item)}\n                {this.renderSubMenuIcon(item)}\n                {this.renderNotification(item)}\n                {this.twoLines && this.avatarList ? this.renderDivider() : null}\n            </li>\n        );\n    };\n\n    /**\n     * Render the text of the list item\n     *\n     * @param item - the list item\n     * @returns the text for the list item\n     */\n    private renderText = (item: MenuItem) => {\n        if (this.isSimpleItem(item)) {\n            return (\n                <span class=\"mdc-deprecated-list-item__text\">{item.text}</span>\n            );\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__text\">\n                <div class=\"mdc-deprecated-list-item__primary-command-text\">\n                    <div class=\"mdc-deprecated-list-item__primary-text\">\n                        {item.text}\n                    </div>\n                    {this.renderCommandText(item)}\n                </div>\n                <div class=\"mdc-deprecated-list-item__secondary-text\">\n                    {item.secondaryText}\n                </div>\n            </div>\n        );\n    };\n\n    private renderSubMenuIcon = (item: MenuItem) => {\n        if (!this.hasSubItems(item)) {\n            return;\n        }\n\n        return <limel-icon class=\"sub-menu-icon\" name=\"-lime-caret-right\" />;\n    };\n\n    private rendertext = (item: ListSeparator) => {\n        if ('text' in item) {\n            return <h2 class=\"limel-list-divider-title\">{item.text}</h2>;\n        }\n    };\n\n    private renderCommandText = (item: MenuItem) => {\n        if (!('commandText' in item)) {\n            return;\n        }\n\n        return (\n            <div class=\"mdc-deprecated-list-item__command-text\">\n                {item.commandText}\n            </div>\n        );\n    };\n\n    private isSimpleItem = (item: MenuItem): boolean => {\n        if ('commandText' in item) {\n            return false;\n        }\n\n        return !('secondaryText' in item);\n    };\n\n    /**\n     * Render an icon for a list item\n     *\n     * @param config - the config object, passed on from the `renderMenuItem` function\n     * @param item - the list item\n     * @returns the icon element\n     */\n    private renderIcon = (config: MenuListRendererConfig, item: MenuItem) => {\n        const style: any = {};\n        const name = getIconName(item.icon);\n        if (!name) {\n            return;\n        }\n\n        // eslint-disable-next-line sonarjs/deprecation\n        const color = getIconColor(item.icon, item.iconColor);\n        const title = getIconTitle(item.icon);\n\n        if (color) {\n            if (config.badgeIcons) {\n                style['--icon-background-color'] = color;\n            } else {\n                style.color = color;\n            }\n        }\n\n        return (\n            <limel-icon\n                badge={config.badgeIcons}\n                class=\"mdc-deprecated-list-item__graphic\"\n                name={name}\n                style={style}\n                size={config.iconSize}\n                aria-label={title}\n                aria-hidden={title ? null : 'true'}\n            />\n        );\n    };\n\n    private renderNotification = (item: MenuItem) => {\n        if (item.badge !== undefined) {\n            return <limel-badge label={item.badge} />;\n        }\n    };\n\n    private renderDivider = () => {\n        const classes = {\n            'mdc-deprecated-list-divider': true,\n            'mdc-deprecated-list-divider--inset': true,\n        };\n        if (this.config.iconSize) {\n            classes[this.config.iconSize] = true;\n        }\n\n        return <hr class={classes} />;\n    };\n\n    private hasSubItems = (item: MenuItem): boolean => {\n        return (\n            (Array.isArray(item.items) && item.items.length > 0) ||\n            isFunction(item.items)\n        );\n    };\n}\n","@use '../../style/functions';\n\n@import '../list/list';\n\n:host(limel-menu-list) {\n    display: block;\n    --badge-background-color: var(\n        --notification-badge-background-color,\n        rgb(var(--color-red-default))\n    );\n    --badge-text-color: var(\n        --notification-badge-text-color,\n        rgb(var(--color-white))\n    );\n}\n\n.mdc-menu {\n    max-height: 70vh; // force tall menus render inside the viewport when menu is at the bottom of the screen\n}\n\n.mdc-deprecated-list {\n    margin: functions.pxToRem(4);\n    // added space to visualize keyboard-focused items\n    .mdc-deprecated-list-item[role='menuitem'] {\n        font-size: functions.pxToRem(13);\n\n        .mdc-deprecated-list-item__graphic {\n            margin-right: 0;\n            margin-left: -0.75rem;\n        }\n    }\n\n    hr.mdc-deprecated-list-divider {\n        &.mdc-deprecated-list-divider--inset {\n            display: none;\n        }\n    }\n}\n\nlimel-badge {\n    transform: translateX(0.75rem);\n}\n\n.sub-menu-icon {\n    width: 1rem;\n    transform: translateX(0.75rem);\n    flex-shrink: 0;\n}\n","import { IconSize } from '../icon/icon.types';\nimport { ListSeparator } from '../list/list-item.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { MDCMenu, MDCMenuItemEvent } from '@material/menu';\nimport { MDCRipple } from '@material/ripple';\nimport { strings as menuStrings } from '@material/menu/constants';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n    Watch,\n} from '@stencil/core';\nimport { MenuListRenderer } from './menu-list-renderer';\nimport { MenuListRendererConfig } from './menu-list-renderer-config';\n\nconst { SELECTED_EVENT } = menuStrings;\n\n/**\n * @private\n */\n@Component({\n    tag: 'limel-menu-list',\n    shadow: { delegatesFocus: true },\n    styleUrl: 'menu-list.scss',\n})\nexport class MenuList {\n    /**\n     * List of items to display\n     */\n    @Prop()\n    public items: Array<MenuItem | ListSeparator>;\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop()\n    public badgeIcons: boolean;\n\n    /**\n     * Size of the icons in the list\n     */\n    @Prop()\n    public iconSize: IconSize = 'small';\n\n    /**\n     * By default, lists will display 3 lines of text, and then truncate the rest.\n     * Consumers can increase or decrease this number by specifying\n     * `maxLinesSecondaryText`. If consumer enters zero or negative\n     * numbers we default to 1; and if they type decimals we round up.\n     */\n    // eslint-disable-next-line no-magic-numbers\n    @Prop() maxLinesSecondaryText: number = 3;\n\n    @Element()\n    private element: HTMLLimelMenuListElement;\n\n    private config: MenuListRendererConfig;\n    private MenuListRenderer = new MenuListRenderer();\n    private mdcMenu: MDCMenu;\n\n    /**\n     * Fired when a new value has been selected from the list.\n     */\n    @Event()\n    private select: EventEmitter<MenuItem>;\n\n    /**\n     * Fires when a user interacts with an item in the list (e.g., click,\n     * keyboard select).\n     */\n    @Event()\n    interact: EventEmitter<MenuItem>;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n        this.triggerIconColorWarning();\n    }\n\n    public render() {\n        this.config = {\n            badgeIcons: this.badgeIcons,\n            iconSize: this.iconSize,\n        };\n\n        const html = this.MenuListRenderer.render(this.items, this.config);\n\n        return <div class=\"mdc-menu mdc-menu-surface\">{html}</div>;\n    }\n\n    @Watch('items')\n    protected itemsChanged() {\n        setTimeout(() => {\n            this.setup();\n        }, 0);\n    }\n\n    private setup = () => {\n        this.setupMenu();\n        this.setupListeners();\n    };\n\n    private setupMenu = () => {\n        if (this.mdcMenu) {\n            this.teardown();\n            this.mdcMenu = null;\n        }\n\n        const element = this.element.shadowRoot.querySelector('.mdc-menu');\n        if (!element) {\n            return;\n        }\n\n        this.mdcMenu = new MDCMenu(element);\n        this.mdcMenu.hasTypeahead = true;\n        this.mdcMenu.wrapFocus = true;\n        this.mdcMenu.items.forEach((item) => new MDCRipple(item));\n    };\n\n    private setupListeners = () => {\n        if (!this.mdcMenu) {\n            return;\n        }\n\n        this.mdcMenu.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu.listen(SELECTED_EVENT, this.handleMenuSelect);\n    };\n\n    private teardown = () => {\n        this.mdcMenu?.unlisten(SELECTED_EVENT, this.handleMenuSelect);\n        this.mdcMenu?.destroy();\n    };\n\n    private handleMenuSelect = (event: MDCMenuItemEvent) => {\n        this.handleSingleSelect(event.detail.index);\n    };\n\n    private handleSingleSelect = (index: number) => {\n        const MenuItems = this.items.filter(this.isMenuItem) as MenuItem[];\n        if (MenuItems[index].disabled) {\n            return;\n        }\n\n        const selectedItem: MenuItem = MenuItems.find((item: MenuItem) => {\n            return !!item.selected;\n        });\n\n        let interactedItem: MenuItem;\n        if (selectedItem) {\n            interactedItem = { ...selectedItem, selected: false };\n            this.select.emit(interactedItem);\n        }\n\n        if (MenuItems[index] !== selectedItem) {\n            interactedItem = { ...MenuItems[index], selected: false };\n            this.select.emit(interactedItem);\n        }\n\n        this.interact.emit(interactedItem);\n    };\n\n    private isMenuItem = (item: MenuItem): boolean => {\n        return !('separator' in item);\n    };\n\n    private triggerIconColorWarning() {\n        if (this.items?.some((item) => 'iconColor' in item)) {\n            /* eslint-disable-next-line no-console */\n            console.warn(\n                \"The `iconColor` prop is deprecated now! Use the new `Icon` interface and instead of `iconColor: 'color-name'` write `icon {name: 'icon-name', color: 'color-name'}`.\",\n            );\n        }\n    }\n}\n","@use '@material/menu-surface';\n@use '@material/elevation';\n@use '@material/menu';\n\n/**\n* @prop --limel-menu-surface-display: defines whether the surface is treated as a block, flex or grid. It affects layout used to display its children. Defaults to `block`.\n* @prop --limel-menu-surface-flex-direction: defines the direction of menu-surface layout.\n*/\n\n:host(limel-menu-surface) {\n    display: block;\n    max-height: inherit;\n}\n\n@include menu-surface.core-styles;\n@include menu.core-styles;\n\n.mdc-menu-surface {\n    opacity: 1; // overrides MDC's, to enable animating the surface when used in `limel-portal`\n    display: var(--limel-menu-surface-display, block);\n    flex-direction: var(--limel-menu-surface-flex-direction, row);\n    max-height: inherit;\n    position: relative;\n    --mdc-menu-max-width: calc(\n        100vw - 2rem\n    ); // just overriding MDC's pixel-based default (`calc(100vw - 32px)`) with a `rem` value\n    width: var(--menu-surface-width, auto);\n    background-color: var(--lime-elevated-surface-background-color);\n}\n\n:host(limel-menu-surface.has-grid-layout) {\n    .mdc-menu-surface {\n        width: var(--menu-surface-width, min(calc(100vw - 2rem), 40rem));\n        max-width: unset;\n    }\n}\n","import { Corner, MDCMenuSurface } from '@material/menu-surface';\nimport {\n    Component,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Prop,\n} from '@stencil/core';\nimport { isDescendant } from '../../util/dom';\nimport { ESCAPE, TAB } from '../../util/keycodes';\n\n/**\n * @slot - Content to put inside the surface\n * @private\n */\n@Component({\n    tag: 'limel-menu-surface',\n    shadow: true,\n    styleUrl: 'menu-surface.scss',\n})\nexport class MenuSurface {\n    /**\n     * True if the menu surface is open, false otherwise\n     */\n    @Prop()\n    public open = false;\n\n    /**\n     * Clicks in this element should not be prevented when the menu surface is open\n     */\n    @Prop()\n    public allowClicksElement: HTMLElement;\n\n    /**\n     * Emitted when the menu surface is dismissed and should be closed\n     */\n    @Event()\n    public dismiss: EventEmitter<void>;\n\n    @Element()\n    private host: HTMLLimelMenuSurfaceElement;\n\n    private menuSurface: MDCMenuSurface;\n\n    public connectedCallback() {\n        this.setup();\n    }\n\n    public disconnectedCallback() {\n        this.teardown();\n    }\n\n    public componentDidLoad() {\n        this.setup();\n    }\n\n    public render() {\n        const classList = {\n            'mdc-menu': true,\n            'mdc-menu-surface': true,\n            'mdc-menu-surface--open': this.open,\n            'mdc-elevation-transition': true,\n            'mdc-elevation--z4': true,\n        };\n\n        return (\n            <div class={classList} tabindex=\"-1\">\n                <slot />\n            </div>\n        );\n    }\n\n    private setup = () => {\n        const menuElement: HTMLElement =\n            this.host.shadowRoot.querySelector('.mdc-menu-surface');\n        if (!menuElement) {\n            return;\n        }\n\n        this.menuSurface = new MDCMenuSurface(menuElement);\n        this.menuSurface.setAnchorCorner(Corner.TOP_START);\n\n        document.addEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.addEventListener('keydown', this.handleKeyDown);\n    };\n\n    private teardown = () => {\n        this.menuSurface?.destroy();\n        document.removeEventListener('mousedown', this.handleDocumentClick, {\n            capture: true,\n        });\n        this.host.removeEventListener('keydown', this.handleKeyDown);\n    };\n\n    private handleDocumentClick = (event) => {\n        const elementPath = event.composedPath ? event.composedPath() : [];\n\n        if (!this.open) {\n            return;\n        }\n\n        if (isDescendant(event.target, this.host)) {\n            return;\n        }\n\n        if (this.allowClicksElement) {\n            const clickedInAllowedElement = elementPath.includes(\n                this.allowClicksElement,\n            );\n\n            if (clickedInAllowedElement) {\n                return;\n            }\n        }\n\n        this.dismiss.emit();\n        this.preventClickEventPropagation();\n    };\n\n    private preventClickEventPropagation = () => {\n        // When the menu surface is open, we want to stop the `click` event from propagating\n        // when clicking outside the surface itself. This is to prevent any dialog that might\n        // be open from closing, etc. However, when dragging a scrollbar no `click` event is emitted,\n        // only mousedown and mouseup. So we listen for `mousedown` and attach a one-time listener\n        // for `click`, so we can capture and \"kill\" it.\n        document.addEventListener('click', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // We also capture and \"kill\" the next `mouseup` event.\n        document.addEventListener('mouseup', this.stopEvent, {\n            capture: true,\n            once: true,\n        });\n        // If the user dragged the scrollbar, no `click` event happens. So when we get the\n        // `mouseup` event, remove the handler for `click` if it's still there.\n        // Otherwise, we would catch the next click even though the menu is no longer open.\n        document.addEventListener(\n            'mouseup',\n            () => {\n                document.removeEventListener('click', this.stopEvent, {\n                    capture: true,\n                });\n            },\n            {\n                once: true,\n            },\n        );\n    };\n\n    private stopEvent = (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        const isEscape = event.key === ESCAPE;\n        const isTab = event.key === TAB;\n\n        if (this.open && (isEscape || isTab)) {\n            event.stopPropagation();\n            this.dismiss.emit();\n        }\n    };\n}\n","@use '../../style/mixins.scss';\n@use '../../style/internal/shared_input-select-picker';\n/**\n * @prop --limel-notched-outline-z-index: Defines the `z-index` of the outlines & the label, since they are absolutely positioned. Useful if there are other elements with z-indexes in the consumer.\n */\n\n$border-radius: 0.25rem;\n$value-top: 0.62rem;\n\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\nlimel-notched-outline {\n    --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color};\n    --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-normal};\n\n    display: block;\n    width: 100%;\n    height: fit-content;\n}\n\n.limel-notched-outline {\n    position: relative;\n    width: 100%;\n    height: 100%;\n\n    [slot='content'] {\n        background-color: var(--limel-notched-outline-background-color);\n        border-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n    }\n\n    // Why is everything prefixed?\n    // Because the component has `shadow: false;`\n    // and this ensures that we are not inheriting styles.\n    &--outlines {\n        pointer-events: none;\n        position: absolute;\n        inset: 0;\n        z-index: var(--limel-notched-outline-z-index, 0);\n        display: flex;\n    }\n\n    &--leading-outline,\n    &--notch,\n    &--trailing-outline {\n        transition: border-color 0.2s ease;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(--limel-notched-outline-border-color);\n    }\n\n    &--leading-outline {\n        flex-shrink: 0;\n        width: 0.75rem;\n        border-right-width: 0;\n        border-top-left-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n        border-bottom-left-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n    }\n\n    &--notch {\n        flex-shrink: 0;\n\n        position: relative;\n        z-index: 2;\n\n        border-top-color: var(\n            --limel-notched-outline-notch-border-top-color,\n            var(--limel-notched-outline-border-color)\n        );\n        border-right-width: 0;\n        border-left-width: 0;\n\n        max-width: calc(100% - 1.5rem);\n\n        label {\n            all: unset;\n            @include mixins.truncate-text;\n            position: relative;\n            transition:\n                color 0.2s ease,\n                font-size 0.2s ease,\n                transform 0.12s cubic-bezier(0.4, 0, 0.2, 1);\n\n            transform: translate3d(\n                var(--limel-notched-outline-label-transform-x, 0),\n                var(--limel-notched-outline-label-transform-y, $value-top),\n                0\n            );\n            display: block;\n            padding: 0 0.25rem;\n\n            color: var(\n                --limel-notched-outline-label-color,\n                #{shared_input-select-picker.$label-color}\n            );\n            font-size: var(\n                --limel-notched-outline-label-font-size,\n                #{shared_input-select-picker.$cropped-label-hack--font-size}\n            );\n            letter-spacing: var(\n                --mdc-typography-subtitle1-letter-spacing,\n                0.009375em\n            );\n            line-height: normal;\n\n            &:after {\n                position: absolute;\n                right: 0;\n                padding: 0 0.25rem;\n            }\n        }\n    }\n\n    &--trailing-outline {\n        flex-grow: 1;\n        border-left-width: 0;\n        border-top-right-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n        border-bottom-right-radius: var(\n            --limel-notched-outline-border-radius,\n            $border-radius\n        );\n    }\n\n    &--empty-readonly-value {\n        @include shared_input-select-picker.lime-looks-like-input-value;\n        position: absolute;\n        top: $value-top;\n        left: 1rem;\n    }\n}\n\nlimel-notched-outline {\n    &:not([disabled]:not([disabled='false'])) {\n        &:hover {\n            --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color--hovered};\n            --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-hovered};\n        }\n\n        &:has([slot='content']:focus-visible),\n        &:has([slot='content']:focus-within) {\n            --limel-notched-outline-border-color: #{shared_input-select-picker.$lime-text-field-outline-color--focused};\n            --limel-notched-outline-background-color: #{shared_input-select-picker.$background-color-focused};\n        }\n    }\n\n    &[disabled]:not([disabled='false']) {\n        --limel-notched-outline-label-color: #{shared_input-select-picker.$label-color-disabled};\n    }\n\n    &[required]:not([required='false']) {\n        .limel-notched-outline--notch {\n            label {\n                padding-right: 0.75rem;\n\n                &:after {\n                    content: '*';\n                    scale: 1.3;\n                }\n            }\n        }\n    }\n\n    &[invalid]:not([invalid='false']) {\n        &:not([disabled]:not([disabled='false'])) {\n            --limel-notched-outline-border-color: var(--lime-error-text-color);\n            &:hover {\n                --limel-notched-outline-border-color: var(\n                    --lime-error-text-color\n                );\n            }\n        }\n\n        .limel-notched-outline--notch {\n            label {\n                &:after {\n                    color: var(--lime-error-text-color);\n                }\n            }\n        }\n    }\n\n    &[readonly]:not([readonly='false']) {\n        --limel-notched-outline-border-color: transparent !important;\n        --limel-notched-outline-background-color: transparent !important;\n\n        .limel-notched-outline--notch {\n            label {\n                transition-duration: 0s;\n            }\n        }\n    }\n\n    &[has-leading-icon] {\n        &:not([has-leading-icon='false']):not([has-floating-label]):not(\n                [has-value]\n            ) {\n            --limel-notched-outline-label-transform-x: 1.25rem;\n        }\n\n        .limel-notched-outline--empty-readonly-value {\n            left: 2.25rem;\n        }\n    }\n}\n\n// Transitioning the floating label\n@mixin float-label {\n    --limel-notched-outline-label-font-size: 0.65rem; // `10.4px` similar to MDC's floating label\n    --limel-notched-outline-label-transform-x: 0;\n    --limel-notched-outline-label-transform-y: calc(-50% - 0.09375rem);\n    --limel-notched-outline-notch-border-top-color: transparent;\n}\n\nlimel-notched-outline {\n    &:not([disabled]:not([disabled='false'])) {\n        &:hover,\n        &:focus,\n        &:focus-within {\n            label {\n                will-change: color, transform, font-size;\n            }\n        }\n\n        &:has([slot='content']:focus-visible),\n        &:has([slot='content']:focus-within) {\n            @include float-label;\n        }\n    }\n\n    &[has-floating-label],\n    &[has-value]:not([has-value='false']),\n    &[readonly]:not([has-value]:not([has-value='true'])) {\n        @include float-label;\n    }\n}\n","import { Component, Prop, h } from '@stencil/core';\n\n/**\n * This is a private component, used to render a notched outline\n * around all input elements that can have a floating label.\n * Inspired by Material Design's styles for input fields.\n * We use it in various components to unify styles and avoid\n * repeating code.\n *\n * :::note\n * The component has `shadow: false`. This is to improve performance,\n * and ensure that its internal elements are considered as internal parts\n * of the consumer's DOM. This way, the value `for` in `<label for=\"id-of-input-element\">`\n * would be correctly associated with the input element's `id`, in the consumer component.\n * :::\n * @exampleComponent limel-example-notched-outline-basic\n * @private\n */\n@Component({\n    tag: 'limel-notched-outline',\n    styleUrl: 'notched-outline.scss',\n    shadow: false,\n})\nexport class NotchedOutline {\n    /**\n     * Set to `true` when the input element is required.\n     * This applies proper visual styles, such as inclusion of an asterisk\n     * beside the label.\n     */\n    @Prop({ reflect: true })\n    public required = false;\n\n    /**\n     * Set to `true` when the input element is readonly.\n     * This applies proper visual styles, such as making the outline transparent.\n     */\n    @Prop({ reflect: true })\n    public readonly = false;\n\n    /**\n     * Set to `true` to indicate that the current value of the input element is\n     * invalid. This applies proper visual styles, such as making the outlines red.\n     */\n    @Prop({ reflect: true })\n    public invalid = false;\n\n    /**\n     * Set to `true` to indicate that the input element is\n     * disabled. This applies proper visual styles, such as making the outlines\n     * and the label transparent.\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * Label to display for the input element.\n     * :::important\n     * Note that the input element of the consumer component will be\n     * labeled by this label, using the `labelId` prop.\n     * :::\n     */\n    @Prop({ reflect: true })\n    public label?: string;\n\n    /**\n     * The `id` of the input element which should be\n     * labeled by the provided label.\n     */\n    @Prop({ reflect: true })\n    public labelId?: string;\n\n    /**\n     * Set to `true` when the user has entered a value for the input element,\n     * shrinking the label in size, and visually rendering it above the entered value.\n     */\n    @Prop({ reflect: true })\n    public hasValue = false;\n\n    /**\n     * Set to `true` when the consumer element displays a leading icon.\n     * This applies proper visual styles, such as rendering the label\n     * correctly placed beside the leading icon.\n     */\n    @Prop({ reflect: true })\n    public hasLeadingIcon = false;\n\n    /**\n     * Set to `true` when the consumer element needs to render the\n     * label above the input element, despite existence of a `value`.\n     * For example in the `text-editor` or `limel-select`,\n     * where the default layout requires a floating label.\n     */\n    @Prop({ reflect: true })\n    public hasFloatingLabel = false;\n\n    public render() {\n        return (\n            <div class=\"limel-notched-outline\">\n                <slot name=\"content\" />\n                <span\n                    class=\"limel-notched-outline--outlines\"\n                    aria-hidden=\"true\"\n                >\n                    <span class=\"limel-notched-outline--leading-outline\" />\n                    {this.renderLabel()}\n                    <span class=\"limel-notched-outline--trailing-outline\" />\n                    {this.renderEmptyReadonlyValue()}\n                </span>\n            </div>\n        );\n    }\n\n    private renderLabel() {\n        if (!this.label) {\n            return;\n        }\n\n        return (\n            <span class=\"limel-notched-outline--notch\">\n                <label htmlFor={this.labelId}>{this.label}</label>\n            </span>\n        );\n    }\n\n    private renderEmptyReadonlyValue() {\n        if (!this.readonly || this.hasValue) {\n            return;\n        }\n\n        return (\n            <span\n                class=\"limel-notched-outline--empty-readonly-value\"\n                aria-hidden=\"true\"\n            >\n                –\n            </span>\n        );\n    }\n}\n"],"mappings":"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"}