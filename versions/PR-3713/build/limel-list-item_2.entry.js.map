{"version":3,"names":["listItemCss","ListItemComponent","constructor","hostRef","this","renderLabel","h","class","id","labelId","text","renderDescription","secondaryText","descriptionId","renderIcon","iconName","getIconName","icon","iconColor","iconBackgroundColor","title","color","backgroundColor","iconProps","name","style","badge","badgeIcon","size","iconSize","Object","assign","renderPrimaryComponent","primary","primaryComponent","PrimaryComponent","props","renderImage","image","src","alt","loading","renderActionMenu","actions","length","stableActions","getStableActions","items","openDirection","slot","label","actionMenuLabel","renderRadioButton","type","checked","selected","disabled","renderCheckbox","CheckboxTemplate","translate","get","language","createRandomString","render","ariaProps","undefined","Host","role","getHostRole","_a","memoizedActions","radioButtonCss","RadioButtonComponent","onChange","htmlFor"],"sources":["./src/components/list-item/list-item.scss?tag=limel-list-item","./src/components/list-item/list-item.tsx","./src/components/radio-button-group/radio-button.scss?tag=limel-radio-button","./src/components/radio-button-group/radio-button.tsx"],"sourcesContent":["/**\n * @prop --notification-badge-text-color: (Publicly documented in `limel-menu` too) Defines the text color of notification badges. Defaults to `--color-white`.\n * @prop --notification-badge-background-color: (Publicly documented in `limel-menu` too) Defines the background color of notification badges. Defaults to `--color-red-default`.\n * @prop --limel-list-item-menu-order: Defines the order of the menu, within the list item's flexbox. Defaults to `3`.\n */\n\n@use '../../style/mixins';\n@forward '../checkbox/checkbox.scss';\n\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\nlimel-list-item {\n    min-height: 2.5rem;\n    @include mixins.visualize-keyboard-focus();\n\n    transition: background-color 0.6s ease;\n    position: relative;\n    isolation: isolate;\n\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n\n    padding: 0 1rem;\n    background-color: rgb(var(--contrast-100));\n\n    &:hover {\n        z-index: 1;\n        transition: background-color 0.2s ease;\n        border-radius: 0.5rem;\n    }\n\n    &:focus,\n    &:focus-visible,\n    &:active {\n        z-index: 1;\n        border-radius: 0.5rem;\n    }\n\n    &:first-of-type {\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n    }\n\n    &:last-of-type {\n        border-bottom-left-radius: 0.5rem;\n        border-bottom-right-radius: 0.5rem;\n    }\n\n    &:not([disabled]):not([disabled='true']) {\n        cursor: pointer;\n    }\n\n    &[disabled]:not([disabled='false']) {\n        cursor: not-allowed;\n    }\n}\n\nlimel-list-item[disabled]:not([disabled='false']) {\n    cursor: not-allowed;\n\n    .text,\n    limel-icon,\n    img,\n    .boolean-input {\n        opacity: 0.4;\n    }\n}\n\nlimel-list-item:not([disabled]):not([disabled='true']):hover,\nlimel-list-item:not([disabled]):not([disabled='true']):focus-visible {\n    background-color: rgb(var(--contrast-400));\n}\n\nlimel-list-item[type='option'] {\n    &:before {\n        transition: background-color 0.6s ease;\n        content: '';\n        position: absolute;\n        inset: 0;\n\n        opacity: 0.2;\n        border-radius: 0.5rem;\n    }\n\n    &[selected]:not([selected='false']) {\n        &:before {\n            transition: background-color 0.2s ease;\n            background-color: var(--limel-theme-primary-color);\n        }\n    }\n}\n\nlimel-list-item {\n    .text {\n        flex-grow: 1;\n        min-width: 0;\n\n        display: flex;\n        flex-direction: column;\n\n        padding: 0.5rem 0;\n\n        color: var(--limel-theme-text-primary-on-background-color);\n    }\n\n    .label {\n        @include mixins.truncate-text();\n\n        font-size: var(--limel-theme-default-font-size);\n        line-height: 1rem;\n    }\n\n    .description {\n        @include mixins.truncate-text-on-line(var(--maxLinesSecondaryText));\n        line-height: 1rem;\n        font-size: var(--limel-theme-default-small-font-size);\n        opacity: 0.6;\n    }\n\n    limel-icon {\n        color: var(--limel-theme-text-secondary-on-background-color);\n        flex-shrink: 0;\n        margin-left: -0.5rem;\n\n        &:has(+ img) {\n            margin-left: 0;\n            position: absolute;\n            top: 0.125rem;\n            left: 0.125rem;\n            padding: 0.1875rem;\n            width: 1.25rem;\n            background-color: rgb(var(--contrast-200), 0.8);\n        }\n    }\n\n    img {\n        flex-shrink: 0;\n        object-fit: cover;\n        border-radius: 50%;\n        width: 2rem;\n        height: 2rem;\n        box-shadow: 0 0 0 1px rgb(var(--contrast-800), 0.5);\n    }\n\n    limel-menu {\n        margin-right: -0.5rem;\n        // Sometimes, `primaryComponent`s in list items need to get\n        // `order: 2;` to be placed after the text. But since the default `order`\n        // of all lit item children is `0`, we need to push the menu to the far right\n        // by giving it a bigger order number. Also, by making this into a variable\n        // we can handle other edge-cases in consuming components.\n        order: var(--limel-list-item-menu-order, 3);\n    }\n}\n\nlimel-list-item {\n    &[role='menuitem'] & {\n        .label {\n            font-size: var(--limel-theme-default-small-font-size);\n        }\n    }\n}\n\n// ====================\n// Checkbox and radios\n.boolean-input,\nlimel-radio-button {\n    width: var(--limel-boolean-input-box-size) !important;\n    margin-left: -0.25rem !important;\n}\n\n.boolean-input {\n    &.checkbox {\n        margin-right: 0.25rem;\n    }\n\n    limel-list-item:has(limel-icon) &,\n    limel-list-item:has(img) & {\n        margin-right: -0.25rem;\n        margin-left: 0;\n        order: 2;\n    }\n\n    .boolean-input-label {\n        @include mixins.truncate-text();\n        opacity: 0;\n        width: var(--limel-boolean-input-box-size);\n    }\n}\n// ====================\n","import { Component, Host, Prop, h } from '@stencil/core';\nimport { getIconName } from '../icon/get-icon-props';\nimport type { IconSize } from '../icon/icon.types';\nimport { createRandomString } from '../../util/random-string';\nimport { ListItem } from './list-item.types';\nimport { MenuItem } from '../menu/menu.types';\nimport { ListSeparator } from '../../global/shared-types/separator.types';\nimport { CheckboxTemplate } from '../checkbox/checkbox.template';\nimport translate from '../../global/translations';\nimport { Languages } from '../date-picker/date.types';\n\n/**\n * This components displays the list item.\n * This centralizes styles and functionality, and helps reduce redundant code\n * in consumer components such as `limel-list` and `limel-menu-list`.\n *\n * :::note\n * The component has `shadow: false`. There are a few reasons for it:\n * 1. This is to improve performance, and ensure that its internal elements are\n * considered as internal parts of the consumer's DOM.\n * 2. The consumer does not need to implement the interactive styles\n * (such as `visualize-keyboard-focus` mixin) on their own. Since there is no\n * shadow DOM, our mixins can be applied directly to the `limel-list-item` elements,\n * within the component's own styles.\n * 3. Most importantly, the MDCList checks the light DOM of each list item\n * to find native inputs to decide the list mode (checkbox/radio).\n * With `shadow: true`, those inputs would be hidden inside the `limel-list-items`’s\n * shadow DOM, so MDC wouldn’t detect them and therefore throw errors, when given\n * an array index (for the items).\n * With `shadow: false`, the native `<input type=\"checkbox/radio\">` from this template\n * would be visible to MDC.\n * :::\n * @exampleComponent limel-example-list-item-basic\n * @exampleComponent limel-example-list-item-icon\n * @exampleComponent limel-example-list-item-icon-size\n * @exampleComponent limel-example-list-item-pictures\n * @exampleComponent limel-example-list-item-multiple-lines\n * @exampleComponent limel-example-list-item-interactive\n * @exampleComponent limel-example-list-item-radio\n * @exampleComponent limel-example-list-item-checkbox\n * @exampleComponent limel-example-list-item-actions\n * @exampleComponent limel-example-list-item-primary-component\n * @exampleComponent limel-example-list-item-command-text\n * @private\n */\n@Component({\n    tag: 'limel-list-item',\n    shadow: false,\n    styleUrl: 'list-item.scss',\n})\nexport class ListItemComponent implements ListItem {\n    /**\n     * Defines the language for translations.\n     * Will translate the translatable strings on the components.\n     */\n    @Prop({ reflect: true })\n    public language: Languages = 'en';\n\n    /**\n     * {@inheritdoc ListItem.value}\n     */\n    @Prop()\n    public value?: any;\n\n    /**\n     * {@inheritdoc ListItem.text}\n     */\n    @Prop({ reflect: true })\n    public text: string;\n\n    /**\n     * {@inheritdoc ListItem.secondaryText}\n     */\n    @Prop({ reflect: true })\n    public secondaryText?: string;\n\n    /**\n     * {@inheritdoc ListItem.disabled}\n     */\n    @Prop({ reflect: true })\n    public disabled = false;\n\n    /**\n     * {@inheritdoc ListItem.icon}\n     */\n    @Prop()\n    public icon?: string | ListItem['icon'];\n\n    /**\n     * Size of the icon displayed for this item.\n     */\n    @Prop({ reflect: true })\n    public iconSize: IconSize = 'small';\n\n    /**\n     * Set to `true` if the list should display larger icons with a background\n     */\n    @Prop({ reflect: true })\n    public badgeIcon = false;\n\n    /**\n     * {@inheritdoc ListItem.selected}\n     */\n    @Prop({ reflect: true })\n    public selected = false;\n\n    /**\n     * {@inheritdoc ListItem.selected}\n     */\n    @Prop()\n    public actions?: ListItem['actions'];\n\n    /**\n     * {@inheritdoc ListItem.selected}\n     */\n    @Prop()\n    public primaryComponent?: ListItem['primaryComponent'];\n\n    /**\n     * {@inheritdoc ListItem.image}\n     */\n    @Prop()\n    public image?: ListItem['image'];\n\n    /**\n     * The semantic role of the list item. This affects the ARIA role\n     * and the interaction behavior.\n     *\n     * - 'option' → selectable via click/Enter/Space, aria-selected\n     * - 'radio'/'checkbox' → selectable, aria-checked\n     * - 'menuitem'/'listitem' → activation only, no selection toggle\n     */\n    @Prop({ reflect: true })\n    public type: 'listitem' | 'menuitem' | 'option' | 'radio' | 'checkbox' =\n        'listitem';\n\n    /**\n     * Used to describe the list item for assistive technology.\n     */\n    private readonly descriptionId: string;\n\n    /**\n     * Used to label the list item for assistive technology.\n     */\n    private readonly labelId: string;\n\n    // Memoized reference for the action items to avoid unnecessary updates\n    private memoizedActions?: Array<MenuItem | ListSeparator>;\n\n    constructor() {\n        this.labelId = createRandomString();\n        this.descriptionId = createRandomString();\n    }\n\n    public render() {\n        const ariaProps: any = {\n            'aria-labelledby': this.labelId,\n            'aria-describedby': this.secondaryText\n                ? this.descriptionId\n                : undefined,\n            'aria-disabled': this.disabled ? 'true' : 'false',\n        };\n\n        // ARIA state depending on `role`/`type`\n        if (this.type === 'radio' || this.type === 'checkbox') {\n            ariaProps['aria-checked'] = this.selected ? 'true' : 'false';\n        } else if (this.type === 'option' || this.type === 'menuitem') {\n            // aria-selected for `option` (spec);\n            // also keep for `menuitem` for visual state consistency\n            ariaProps['aria-selected'] = this.selected ? 'true' : 'false';\n        }\n\n        return (\n            <Host\n                role={this.getHostRole()}\n                class={{\n                    'has-primary-component': !!this.primaryComponent?.name,\n                }}\n                {...ariaProps}\n            >\n                {this.renderRadioButton()}\n                {this.renderCheckbox()}\n                {this.renderIcon()}\n                {this.renderImage()}\n                {this.renderPrimaryComponent()}\n                <div class=\"text\">\n                    {this.renderLabel()}\n                    {this.renderDescription()}\n                </div>\n                {this.renderActionMenu(this.actions)}\n            </Host>\n        );\n    }\n\n    private renderLabel = () => {\n        return (\n            <span class=\"label\" id={this.labelId}>\n                {this.text}\n            </span>\n        );\n    };\n\n    private renderDescription = () => {\n        if (!this.secondaryText) {\n            return;\n        }\n\n        return (\n            <span class=\"description\" id={this.descriptionId}>\n                {this.secondaryText}\n            </span>\n        );\n    };\n\n    private renderIcon = () => {\n        const iconName = getIconName(this.icon);\n        if (!iconName) {\n            return;\n        }\n\n        let iconColor: string | undefined;\n        let iconBackgroundColor: string | undefined;\n        let title: string | undefined;\n\n        if (typeof this.icon === 'object') {\n            iconColor = this.icon.color;\n            iconBackgroundColor = this.icon.backgroundColor;\n            title = this.icon.title;\n        }\n\n        const iconProps = {\n            'aria-label': title,\n            'aria-hidden': title ? null : 'true',\n            name: iconName,\n            style: {\n                color: iconColor,\n                'background-color': iconBackgroundColor,\n            },\n            badge: this.badgeIcon,\n            size: this.iconSize,\n        };\n\n        return <limel-icon {...iconProps} />;\n    };\n\n    private renderPrimaryComponent = () => {\n        const primary = this.primaryComponent;\n        if (!primary?.name) {\n            return;\n        }\n\n        const PrimaryComponent: any = primary.name;\n        const props = primary.props || {};\n\n        return <PrimaryComponent {...props} />;\n    };\n\n    private renderImage = () => {\n        if (!this.image) {\n            return;\n        }\n\n        return <img src={this.image.src} alt={this.image.alt} loading=\"lazy\" />;\n    };\n\n    private renderActionMenu = (actions: Array<MenuItem | ListSeparator>) => {\n        if (!actions || actions.length === 0) {\n            return;\n        }\n\n        const stableActions = this.getStableActions(actions);\n        return (\n            <limel-menu\n                class=\"mdc-deprecated-list-item__meta\"\n                items={stableActions}\n                openDirection=\"left-start\"\n            >\n                <limel-icon-button\n                    class=\"action-menu-trigger\"\n                    slot=\"trigger\"\n                    icon=\"menu_2\"\n                    label={this.actionMenuLabel()}\n                />\n            </limel-menu>\n        );\n    };\n\n    /**\n     * Returns a stable reference for the provided actions array to avoid\n     * unnecessary re-renders of the action menu when the reference is unchanged.\n     *\n     * @param actions The actions (and separators) to display in the menu\n     * @returns The same array instance that was previously seen, if unchanged\n     */\n    private getStableActions(\n        actions: Array<MenuItem | ListSeparator>\n    ): Array<MenuItem | ListSeparator> {\n        if (this.memoizedActions === actions) {\n            return this.memoizedActions;\n        }\n        this.memoizedActions = actions;\n        return actions;\n    }\n\n    private renderRadioButton = () => {\n        if (this.type !== 'radio') {\n            return;\n        }\n\n        return (\n            <limel-radio-button\n                id={`radio_${this.labelId}`}\n                checked={this.selected}\n                disabled={this.disabled}\n            />\n        );\n    };\n\n    private renderCheckbox = () => {\n        if (this.type !== 'checkbox') {\n            return;\n        }\n\n        return (\n            <CheckboxTemplate\n                id={`checkbox_${this.labelId}`}\n                checked={this.selected}\n                disabled={this.disabled}\n            />\n        );\n    };\n\n    private getHostRole(): string {\n        switch (this.type) {\n            case 'option': {\n                return 'option';\n            }\n            case 'radio': {\n                return 'radio';\n            }\n            case 'checkbox': {\n                return 'checkbox';\n            }\n            case 'menuitem': {\n                return 'menuitem';\n            }\n            default: {\n                return 'listitem';\n            }\n        }\n    }\n\n    private actionMenuLabel = (): string => {\n        return translate.get('file-viewer.more-actions', this.language);\n    };\n}\n","/**\n* :::important\n* The `limel-radio-button` component can be used inside the HTML of\n* other components to render a decorative radio button in\n* their UI. An example of this is the list component.\n* This means the content of `limel-radio-button` will become a part of the\n* consumer's DOM structure.\n*\n* Additionally, the consumer components also need to import the current `.scss`\n* file into their own styles file for the radio button to be rendered correctly!\n* This means, if the styles in this file are not \"specific\" enough,\n* there is a risk that the consumer component's styles are affected by\n* our styles here.\n*\n* For instance if the consumer has a `<label>`,\n* it might unintentionally inherit styles from the radio button; unless we\n* make the such styles more specific here.\n*\n* Naturally, we cannot mitigate all sorts of potential styling problems.\n* The consumer component should be aware of this issue too.\n* But we can ensure that our styles here both make sense,\n* are readable, and are as specific as possible to avoid unintended side effects.\n* :::\n*/\n\n@use '../../style/mixins';\n\n@forward '../../style/internal/boolean-input.scss';\n\n.radio-button {\n    --limel-boolean-input-box-border-radius: var(\n        --limel-boolean-input-box-size\n    );\n}\n\n.box {\n    &:after {\n        width: 100%;\n        height: 100%;\n        border-radius: 50%;\n\n        .boolean-input:has(input[type='radio']:checked) & {\n            opacity: 1;\n            transform: scale(0.6);\n            box-shadow: var(--shadow-depth-8);\n        }\n    }\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\n\n/**\n * This is a low-level private component that renders individual radio button elements.\n * It's used internally by the list-item component to render radio buttons when\n * `type=\"radio\"` is specified.\n *\n * ## Usage in the Library\n *\n * This template is primarily used by:\n * - `limel-list` component when `type=\"radio\"`\n * - `limel-radio-button-group` component (which wraps `limel-list`)\n *\n * ## Why This Exists\n *\n * While we have `limel-radio-button-group` for most use cases, this template provides\n * the actual radio button HTML structure with proper MDC classes and accessibility\n * attributes. It ensures consistent styling and behavior across all radio button\n * implementations in the library.\n *\n * ## Design Philosophy\n *\n * This follows the principle that individual radio buttons should not be standalone\n * components, as a single radio button is never useful in a UI. Instead, this template\n * is used to build groups of radio buttons through higher-level components.\n *\n * However, since this is a private component, consumers who need to use a radio button\n * outside of the context of a list or group, can still use the `limel-radio-button`\n * component directly according to in their UI needs.\n *\n * @private\n */\n@Component({\n    tag: 'limel-radio-button',\n    shadow: false,\n    styleUrl: 'radio-button.scss',\n})\nexport class RadioButtonComponent {\n    /**\n     * Indicates whether the radio button is checked.\n     */\n    @Prop({ reflect: true })\n    public checked?: boolean;\n\n    /**\n     * Disables the radio button when set to `true`.\n     */\n    @Prop({ reflect: true })\n    public disabled?: boolean;\n\n    /**\n     * Associates the internal input with an external label.\n     */\n    @Prop()\n    public id!: string;\n\n    /**\n     * Visual label shown next to the radio button.\n     */\n    @Prop()\n    public label?: string;\n\n    /**\n     * Change handler forwarded to the underlying input element.\n     */\n    @Prop()\n    public onChange?: (event: Event) => void;\n\n    public render() {\n        return (\n            <Host\n                class={{\n                    'boolean-input': true,\n                    'radio-button': true,\n                    checked: this.checked,\n                    disabled: this.disabled,\n                }}\n            >\n                <input\n                    type=\"radio\"\n                    id={this.id}\n                    checked={this.checked}\n                    disabled={this.disabled}\n                    onChange={this.onChange}\n                />\n                <div class=\"box\" />\n                <label class=\"boolean-input-label\" htmlFor={this.id}>\n                    {this.label}\n                </label>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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"}