{"version":3,"names":["schema","type","properties","name","title","description","value","lime","component","props","contentType","textEditorAsFormComponentCss","TextEditorAsFormComponentExample","this","handleFormChange","event","stopPropagation","formData","detail","formDirty","getFormDirtyState","handleSave","savedFormData","cloneDeep","handleReset","JSON","stringify","componentWillLoad","render","h","onChange","class","label","disabled","onClick","primary"],"sources":["./src/components/text-editor/examples/text-editor-form-data.ts","./src/components/text-editor/examples/text-editor-as-form-component.scss?tag=limel-example-text-editor-as-form-component&encapsulation=shadow","./src/components/text-editor/examples/text-editor-as-form-component.tsx"],"sourcesContent":["import { FormSchema } from '@limetech/lime-elements';\n\nexport interface FormComponentFormData {\n    name?: string;\n    value?: string;\n}\n\nexport const schema: FormSchema<FormComponentFormData> = {\n    type: 'object',\n    properties: {\n        name: {\n            type: 'string',\n            title: 'Name',\n            description: 'Your name',\n        },\n        value: {\n            type: 'string',\n            title: 'Description',\n            description: 'A personal description',\n            lime: {\n                component: {\n                    name: 'limel-text-editor',\n                    props: {\n                        contentType: 'html',\n                    },\n                },\n            },\n        },\n    },\n};\n",".buttons {\n    display: flex;\n    flex-direction: row-reverse;\n    column-gap: 1rem;\n    align-items: end;\n}\n","import { Component, h, State } from '@stencil/core';\nimport { FormComponentFormData, schema } from './text-editor-form-data';\nimport { cloneDeep } from 'lodash-es';\n\n/**\n * Using the text editor as a form component\n *\n * Here we have a simple form that uses the `limel-text-editor` component,\n * instead of a regular text input field.\n *\n * :::note\n * This allows the user to write rich text, with markdown support, in the form.\n * But keep in mind that the value will be saved as a markdown string,\n * and can also contain HTML tags, depending on what the users input\n * in the filed.\n * :::\n * @sourceFile text-editor-form-data.ts\n */\n@Component({\n    tag: 'limel-example-text-editor-as-form-component',\n    shadow: true,\n    styleUrl: 'text-editor-as-form-component.scss',\n})\nexport class TextEditorAsFormComponentExample {\n    @State()\n    private formData: FormComponentFormData = {\n        name: 'Muhammad Ali',\n        value: '<p>I am the <b>greatest</b>.</p>',\n    };\n\n    @State()\n    private formDirty = false;\n\n    // We fake a bit of state handling here, to\n    // be able to reset and \"save\" the form.\n    // This is mainly to visualize when the form\n    // is considered dirty.\n    private savedFormData: FormComponentFormData;\n\n    public componentWillLoad() {\n        this.savedFormData = cloneDeep(this.formData);\n    }\n\n    public render() {\n        return [\n            <limel-form\n                onChange={this.handleFormChange}\n                value={this.formData}\n                schema={schema}\n            />,\n            <div class=\"buttons\">\n                <limel-button\n                    label=\"Save\"\n                    disabled={!this.formDirty}\n                    onClick={this.handleSave}\n                    primary={true}\n                    class=\"has-reduced-presence\"\n                />\n                <limel-button\n                    label=\"Reset\"\n                    disabled={!this.formDirty}\n                    onClick={this.handleReset}\n                    class=\"has-reduced-presence\"\n                />\n            </div>,\n            <limel-example-value value={this.formData} />,\n        ];\n    }\n\n    private handleFormChange = (event: CustomEvent<FormComponentFormData>) => {\n        event.stopPropagation();\n        this.formData = event.detail;\n        this.formDirty = this.getFormDirtyState();\n    };\n\n    private handleSave = () => {\n        this.savedFormData = cloneDeep(this.formData);\n        this.formDirty = this.getFormDirtyState();\n    };\n\n    private handleReset = () => {\n        this.formData = cloneDeep(this.savedFormData);\n        this.formDirty = this.getFormDirtyState();\n    };\n\n    private getFormDirtyState = () => {\n        return (\n            JSON.stringify(this.formData) !== JSON.stringify(this.savedFormData)\n        );\n    };\n}\n"],"mappings":"weAOO,MAAMA,EAA4C,CACrDC,KAAM,SACNC,WAAY,CACRC,KAAM,CACFF,KAAM,SACNG,MAAO,OACPC,YAAa,aAEjBC,MAAO,CACHL,KAAM,SACNG,MAAO,cACPC,YAAa,yBACbE,KAAM,CACFC,UAAW,CACPL,KAAM,oBACNM,MAAO,CACHC,YAAa,aCvBrC,MAAMC,EAA+B,oF,MCuBxBC,EAAgC,M,yBA8CjCC,KAAAC,iBAAoBC,IACxBA,EAAMC,kBACNH,KAAKI,SAAWF,EAAMG,OACtBL,KAAKM,UAAYN,KAAKO,mBAAmB,EAGrCP,KAAAQ,WAAa,KACjBR,KAAKS,cAAgBC,EAAUV,KAAKI,UACpCJ,KAAKM,UAAYN,KAAKO,mBAAmB,EAGrCP,KAAAW,YAAc,KAClBX,KAAKI,SAAWM,EAAUV,KAAKS,eAC/BT,KAAKM,UAAYN,KAAKO,mBAAmB,EAGrCP,KAAAO,kBAAoB,IAEpBK,KAAKC,UAAUb,KAAKI,YAAcQ,KAAKC,UAAUb,KAAKS,e,cA9DpB,CACtCnB,KAAM,eACNG,MAAO,oC,eAIS,K,CAQbqB,oBACHd,KAAKS,cAAgBC,EAAUV,KAAKI,S,CAGjCW,SACH,MAAO,CACHC,EAAA,cACIC,SAAUjB,KAAKC,iBACfR,MAAOO,KAAKI,SACZjB,OAAQA,IAEZ6B,EAAA,OAAKE,MAAM,WACPF,EAAA,gBACIG,MAAM,OACNC,UAAWpB,KAAKM,UAChBe,QAASrB,KAAKQ,WACdc,QAAS,KACTJ,MAAM,yBAEVF,EAAA,gBACIG,MAAM,QACNC,UAAWpB,KAAKM,UAChBe,QAASrB,KAAKW,YACdO,MAAM,0BAGdF,EAAA,uBAAqBvB,MAAOO,KAAKI,W"}