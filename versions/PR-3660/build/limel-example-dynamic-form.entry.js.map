{"version":3,"names":["dynamicFormCss","DynamicFormExample","constructor","hostRef","this","handleFormChange","event","formData","detail","handleTextChange","text","json","JSON","parse","schema","error","console","log","handleValidate","errors","title","$id","description","type","required","properties","default","minLength","done","stringify","render","h","Host","language","lineNumbers","lint","fold","onChange","value","onValidate","label"],"sources":["./src/components/form/examples/dynamic-form.scss?tag=limel-example-dynamic-form&encapsulation=shadow","./src/components/form/examples/dynamic-form.tsx"],"sourcesContent":["limel-code-editor {\n    --code-editor-max-height: 20rem;\n    width: 100%;\n}\n","import { Component, h, Host, State } from '@stencil/core';\nimport { FormSchema, ValidationStatus } from '@limetech/lime-elements';\n\n/**\n * Dynamic schema\n */\n@Component({\n    tag: 'limel-example-dynamic-form',\n    shadow: true,\n    styleUrl: 'dynamic-form.scss',\n})\nexport class DynamicFormExample {\n    @State()\n    private formData: object = {\n        title: 'Test',\n    };\n    @State()\n    private errors = null;\n\n    @State()\n    private schema: FormSchema = {\n        $id: 'test',\n        title: 'My form',\n        description: 'Lorem ipsum dolor sit amet',\n        type: 'object',\n        required: ['title'],\n        properties: {\n            title: {\n                type: 'string',\n                title: 'Title',\n                default: 'A new task',\n                description: 'Lorem ipsum dolor sit amet',\n                minLength: 5,\n            },\n            done: { type: 'boolean', title: 'Done?', default: false },\n        },\n    };\n\n    @State()\n    private text: string;\n\n    constructor() {\n        this.text = JSON.stringify(this.schema, null, '    ');\n    }\n\n    public render() {\n        return (\n            <Host>\n                <limel-code-editor\n                    language=\"json\"\n                    lineNumbers={true}\n                    lint={true}\n                    fold={true}\n                    onChange={this.handleTextChange}\n                    value={this.text}\n                />\n                <br />\n                <limel-form\n                    onChange={this.handleFormChange}\n                    onValidate={this.handleValidate}\n                    value={this.formData}\n                    schema={this.schema}\n                />\n                <limel-example-value value={this.formData} />\n                <limel-example-value label=\"Errors\" value={this.errors} />\n            </Host>\n        );\n    }\n\n    private handleFormChange = (event: CustomEvent) => {\n        this.formData = event.detail;\n    };\n\n    private handleTextChange = (event) => {\n        this.text = event.detail;\n        try {\n            const json = JSON.parse(event.detail);\n            if (json) {\n                this.schema = json;\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    private handleValidate = (event: CustomEvent<ValidationStatus>) => {\n        this.errors = event.detail;\n    };\n}\n"],"mappings":"sDAAA,MAAMA,EAAiB,+D,MCWVC,EAAkB,MA8B3BC,YAAAC,G,UA4BQC,KAAAC,iBAAoBC,IACxBF,KAAKG,SAAWD,EAAME,MAAM,EAGxBJ,KAAAK,iBAAoBH,IACxBF,KAAKM,KAAOJ,EAAME,OAClB,IACI,MAAMG,EAAOC,KAAKC,MAAMP,EAAME,QAC9B,GAAIG,EAAM,CACNP,KAAKU,OAASH,C,EAEpB,MAAOI,GACLC,QAAQC,IAAIF,E,GAIZX,KAAAc,eAAkBZ,IACtBF,KAAKe,OAASb,EAAME,MAAM,E,cAzEH,CACvBY,MAAO,Q,YAGM,K,YAGY,CACzBC,IAAK,OACLD,MAAO,UACPE,YAAa,6BACbC,KAAM,SACNC,SAAU,CAAC,SACXC,WAAY,CACRL,MAAO,CACHG,KAAM,SACNH,MAAO,QACPM,QAAS,aACTJ,YAAa,6BACbK,UAAW,GAEfC,KAAM,CAAEL,KAAM,UAAWH,MAAO,QAASM,QAAS,S,oBAQtDtB,KAAKM,KAAOE,KAAKiB,UAAUzB,KAAKU,OAAQ,KAAM,O,CAG3CgB,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,qBACIE,SAAS,OACTC,YAAa,KACbC,KAAM,KACNC,KAAM,KACNC,SAAUjC,KAAKK,iBACf6B,MAAOlC,KAAKM,OAEhBqB,EAAA,WACAA,EAAA,cACIM,SAAUjC,KAAKC,iBACfkC,WAAYnC,KAAKc,eACjBoB,MAAOlC,KAAKG,SACZO,OAAQV,KAAKU,SAEjBiB,EAAA,uBAAqBO,MAAOlC,KAAKG,WACjCwB,EAAA,uBAAqBS,MAAM,SAASF,MAAOlC,KAAKe,S"}