{"version":3,"names":["TextEditorWithInlineImagesExample","this","handleFailedThumbnailChange","event","uploadImageFails","detail","handleChange","value","handleImagePasted","async","imageInserter","insertThumbnail","imageSrc","uploadImage","fileInfo","insertImage","insertFailedThumbnail","Promise","resolve","reject","setTimeout","error","console","filename","handleImageRemoved","imageInfo","log","fileInfoId","Error","render","h","Host","onChange","onImagePasted","onImageRemoved","label"],"sources":["./src/components/text-editor/examples/text-editor-with-inline-images-file-storage.tsx"],"sourcesContent":["import { Component, h, State, Host } from '@stencil/core';\nimport {\n    ImageInserter,\n    FileInfo,\n    ImageInfo,\n    LimelTextEditorCustomEvent,\n    LimelCheckboxCustomEvent,\n} from '@limetech/lime-elements';\n/**\n * Handling inline images (with external file storage)\n *\n * To allow users to paste images directly into the text editor, you can\n * listen to the `imagePasted` event, which is triggered when an image file\n * is pasted into the editor.\n *\n * The `imagePasted` event contains an `ImageInserter` object, which you can\n * use to insert a thumbnail of the pasted image into the editor.\n * After the thumbnail is inserted, you can upload the image to an external\n * file storage and insert the src url of the uploaded image using the\n * `insertImage` method.\n *\n * If the image upload fails, you can insert a failed thumbnail using the\n * `insertFailedThumbnail` method.\n *\n * :::note\n * In this example, because we don't actually upload the image you paste\n * anywhere, once the \"upload\" is done, we will replace the image you\n * pasted with a url to an image of the Lime CRM logo.\n *\n * In reality, you would of course insert the url to the newly uploaded\n * image instead.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-inline-images-file-storage',\n    shadow: true,\n})\nexport class TextEditorWithInlineImagesExample {\n    @State()\n    private value = 'Copy an image file and paste it here.';\n\n    @State()\n    private uploadImageFails = false;\n\n    public render() {\n        return (\n            <Host>\n                <limel-text-editor\n                    value={this.value}\n                    onChange={this.handleChange}\n                    onImagePasted={this.handleImagePasted}\n                    onImageRemoved={this.handleImageRemoved}\n                />\n                <limel-checkbox\n                    label=\"Upload image fails - insert failed thumbnail\"\n                    onChange={this.handleFailedThumbnailChange}\n                />\n                <limel-example-value label=\"Value\" value={this.value} />\n            </Host>\n        );\n    }\n\n    private handleFailedThumbnailChange = (\n        event: LimelCheckboxCustomEvent<boolean>,\n    ) => {\n        this.uploadImageFails = event.detail;\n    };\n\n    private handleChange = (event: LimelTextEditorCustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleImagePasted = async (\n        event: LimelTextEditorCustomEvent<ImageInserter>,\n    ) => {\n        const imageInserter = event.detail;\n\n        imageInserter.insertThumbnail();\n\n        const imageSrc = await this.uploadImage(imageInserter.fileInfo);\n        if (imageSrc) {\n            imageInserter.insertImage(imageSrc);\n        } else {\n            imageInserter.insertFailedThumbnail();\n        }\n    };\n\n    private uploadImage = async (fileInfo: FileInfo): Promise<string> => {\n        try {\n            // Upload image to external file storage.\n            // fileInfo.fileContent contains the image data.\n\n            // Simulate upload delay.\n            const imageSrc: string = await new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    if (this.uploadImageFails) {\n                        reject('Server error');\n                    } else {\n                        resolve('https://cdn.lime-crm.com/mail-addin-logo.png');\n                    }\n                }, 2000);\n            });\n\n            // Return the src url of the uploaded image.\n            return imageSrc;\n        } catch (error) {\n            console.error(\n                `Failed to upload image ${fileInfo.filename}: ${error}`,\n            );\n        }\n    };\n\n    private handleImageRemoved = (\n        event: LimelTextEditorCustomEvent<ImageInfo>,\n    ) => {\n        const imageInfo = event.detail;\n        console.log(`Image deleted: ${imageInfo.fileInfoId}`);\n\n        try {\n            throw new Error('Not implemented.');\n        } catch (error) {\n            console.error(\n                `Failed to delete image ${imageInfo.fileInfoId}`,\n                error,\n            );\n        }\n    };\n}\n"],"mappings":"4DAoCaA,EAAiC,M,yBAyBlCC,KAAAC,4BACJC,IAEAF,KAAKG,iBAAmBD,EAAME,MAAM,EAGhCJ,KAAAK,aAAgBH,IACpBF,KAAKM,MAAQJ,EAAME,MAAM,EAGrBJ,KAAAO,kBAAoBC,MACxBN,IAEA,MAAMO,EAAgBP,EAAME,OAE5BK,EAAcC,kBAEd,MAAMC,QAAiBX,KAAKY,YAAYH,EAAcI,UACtD,GAAIF,EAAU,CACVF,EAAcK,YAAYH,E,KACvB,CACHF,EAAcM,uB,GAIdf,KAAAY,YAAcJ,MAAOK,IACzB,IAKI,MAAMF,QAAyB,IAAIK,SAAQ,CAACC,EAASC,KACjDC,YAAW,KACP,GAAInB,KAAKG,iBAAkB,CACvBe,EAAO,e,KACJ,CACHD,EAAQ,+C,IAEb,IAAK,IAIZ,OAAON,C,CACT,MAAOS,GACLC,QAAQD,MACJ,0BAA0BP,EAASS,aAAaF,I,GAKpDpB,KAAAuB,mBACJrB,IAEA,MAAMsB,EAAYtB,EAAME,OACxBiB,QAAQI,IAAI,kBAAkBD,EAAUE,cAExC,IACI,MAAM,IAAIC,MAAM,mB,CAClB,MAAOP,GACLC,QAAQD,MACJ,0BAA0BI,EAAUE,aACpCN,E,cApFI,wC,sBAGW,K,CAEpBQ,SACH,OACIC,EAACC,EAAI,KACDD,EAAA,qBACIvB,MAAON,KAAKM,MACZyB,SAAU/B,KAAKK,aACf2B,cAAehC,KAAKO,kBACpB0B,eAAgBjC,KAAKuB,qBAEzBM,EAAA,kBACIK,MAAM,+CACNH,SAAU/B,KAAKC,8BAEnB4B,EAAA,uBAAqBK,MAAM,QAAQ5B,MAAON,KAAKM,Q"}