{"version":3,"names":["TextEditorWithInlineImagesExample","this","handleChange","event","value","detail","handleImagePasted","async","imageInserter","insertThumbnail","insertImage","uploadImage","fileInfo","handleImageRemoved","render","h","onChange","onImagePasted"],"sources":["./src/components/text-editor/examples/text-editor-with-inline-images.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\nimport { ImageInserter, FileInfo } from '@limetech/lime-elements';\n/**\n * Handling inline images\n *\n * To allow users to paste images directly into the text editor, you can\n * listen to the `imagePasted` event, which is triggered when an image file\n * is pasted into the editor.\n *\n * The `imagePasted` event contains an `ImageInserter` object, which you can\n * use to insert a thumbnail of the pasted image into the editor. The\n * `ImageInserter` object also contains the image file, which you can upload\n * to an external file storage. When the image is uploaded, you can insert\n * the src url of the uploaded image into the editor using the `insertImage`\n * method. If the image upload fails, you can insert an failed thumbnail\n * using the `insertFailedThumbnail` method.\n */\n@Component({\n    tag: 'limel-example-text-editor-with-inline-images',\n    shadow: true,\n})\nexport class TextEditorWithInlineImagesExample {\n    @State()\n    private value: string = 'Copy an image file and paste it here.';\n\n    public render() {\n        return (\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                onImagePasted={this.handleImagePasted}\n            />\n        );\n    }\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleImagePasted = async (event: CustomEvent<ImageInserter>) => {\n        const imageInserter = event.detail;\n\n        imageInserter.insertThumbnail();\n        imageInserter.insertImage();\n\n        // const file = await this.uploadImage(imageInserter.fileInfo);\n        // if (file) {\n        //     imageInserter.insertImage(file.src);\n        // } else {\n        //     imageInserter.insertFailedThumbnail();\n        // }\n    };\n\n    private uploadImage = async (fileInfo: FileInfo): Promise<any> => {\n        try {\n            // Upload image to external file storage\n        } catch (error) {\n            console.error('Failed to upload image', error);\n        }\n    };\n\n    private handleImageRemoved = (event: CustomEvent<string>) => {\n        const src = event.detail;\n\n        try {\n            // Delete image from external file storage\n        } catch (error) {\n            console.error('Failed to delete image', error);\n        }\n    };\n}\n"],"mappings":"qDAqBaA,EAAiC,M,yBAclCC,KAAAC,aAAgBC,IACpBF,KAAKG,MAAQD,EAAME,MAAM,EAGrBJ,KAAAK,kBAAoBC,MAAOJ,IAC/B,MAAMK,EAAgBL,EAAME,OAE5BG,EAAcC,kBACdD,EAAcE,aAAa,EAUvBT,KAAAU,YAAcJ,MAAOK,IAAPL,EAQdN,KAAAY,mBAAsBV,IAAD,E,WAtCL,uC,CAEjBW,SACH,OACIC,EAAA,qBACIX,MAAOH,KAAKG,MACZY,SAAUf,KAAKC,aACfe,cAAehB,KAAKK,mB"}