{"version":3,"names":["TextEditorWithInlineImagesExample","this","setReadonly","event","stopPropagation","readonly","detail","handleChange","value","handleImagePasted","async","imageInserter","insertThumbnail","file","uploadImage","fileInfo","insertImage","_links","contents","href","insertErrorThumbnail","http","post","fileContent","headers","filename","handleImageRemoved","fileId","split","delete","render","h","onChange","onImagePasted","onImageRemoved","checked","label"],"sources":["./src/components/text-editor/examples/text-editor-with-inline-images.tsx"],"sourcesContent":["import { Component, h, State } from '@stencil/core';\n/**\n * Handling inline images\n *\n * To allow users to paste images directly into the text editor, you can\n * listen to the `imagePasted` event, which is triggered when an image file\n * is pasted into the editor.\n *\n * Explain how the images should be hostedâ€¦\n */\n@Component({\n    tag: 'limel-example-text-editor-with-inline-images',\n    shadow: true,\n})\nexport class TextEditorWithInlineImagesExample {\n    @State()\n    private value: string = 'Copy an image file and paste it here.';\n\n    @State()\n    private readonly = false;\n\n    public render() {\n        return [\n            <limel-text-editor\n                value={this.value}\n                onChange={this.handleChange}\n                readonly={this.readonly}\n                onImagePasted={this.handleImagePasted}\n                onImageRemoved={this.handleImageRemoved}\n            />,\n            <limel-example-controls>\n                <limel-checkbox\n                    checked={this.readonly}\n                    label=\"Readonly\"\n                    onChange={this.setReadonly}\n                />\n            </limel-example-controls>,\n            <limel-example-value value={this.value} />,\n        ];\n    }\n\n    private setReadonly = (event: CustomEvent<boolean>) => {\n        event.stopPropagation();\n        this.readonly = event.detail;\n    };\n\n    private handleChange = (event: CustomEvent<string>) => {\n        this.value = event.detail;\n    };\n\n    private handleImagePasted = async (event: CustomEvent) => {\n        const imageInserter = event.detail.imageInserter;\n\n        imageInserter.insertThumbnail();\n        const file = await this.uploadImage(imageInserter.fileInfo);\n        // eslint-disable-next-line no-underscore-dangle\n        imageInserter.insertImage(file._links.contents.href);\n        imageInserter.insertErrorThumbnail(); // Comment out insertImage for this to work.\n    };\n\n    private uploadImage = async (file: any): Promise<any> => {\n        return this.http.post('api/v1/file/', file.fileContent, {\n            headers: {\n                'Content-Disposition': `inline; filename=${file.filename}`,\n            },\n        });\n    };\n\n    private handleImageRemoved = (event: CustomEvent<string>) => {\n        const fileId = event.detail.split('/')[7];\n        this.http.delete(`api/v1/file/${fileId}/`);\n    };\n}\n"],"mappings":"qDAcaA,EAAiC,M,yBA2BlCC,KAAAC,YAAeC,IACnBA,EAAMC,kBACNH,KAAKI,SAAWF,EAAMG,MAAM,EAGxBL,KAAAM,aAAgBJ,IACpBF,KAAKO,MAAQL,EAAMG,MAAM,EAGrBL,KAAAQ,kBAAoBC,MAAOP,IAC/B,MAAMQ,EAAgBR,EAAMG,OAAOK,cAEnCA,EAAcC,kBACd,MAAMC,QAAaZ,KAAKa,YAAYH,EAAcI,UAElDJ,EAAcK,YAAYH,EAAKI,OAAOC,SAASC,MAC/CR,EAAcS,sBAAsB,EAGhCnB,KAAAa,YAAcJ,MAAOG,GAClBZ,KAAKoB,KAAKC,KAAK,eAAgBT,EAAKU,YAAa,CACpDC,QAAS,CACL,sBAAuB,oBAAoBX,EAAKY,cAKpDxB,KAAAyB,mBAAsBvB,IAC1B,MAAMwB,EAASxB,EAAMG,OAAOsB,MAAM,KAAK,GACvC3B,KAAKoB,KAAKQ,OAAO,eAAeF,KAAU,E,WAtDtB,wC,cAGL,K,CAEZG,SACH,MAAO,CACHC,EAAA,qBACIvB,MAAOP,KAAKO,MACZwB,SAAU/B,KAAKM,aACfF,SAAUJ,KAAKI,SACf4B,cAAehC,KAAKQ,kBACpByB,eAAgBjC,KAAKyB,qBAEzBK,EAAA,8BACIA,EAAA,kBACII,QAASlC,KAAKI,SACd+B,MAAM,WACNJ,SAAU/B,KAAKC,eAGvB6B,EAAA,uBAAqBvB,MAAOP,KAAKO,Q"}