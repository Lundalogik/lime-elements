name: Create Backport Branch

on:
  workflow_dispatch:
    inputs:
      last_release_version:
        description: 'The version of the last release. Example: 1.2.3'
        required: true
        type: string
      new_release_version:
        description: 'The version of the new release. Example: 1.3.0'
        required: true
        type: string
      last_release_git_tag:
        description: 'The git tag of the last release. Defaults to `v{last_release_version}`. Example: v1.2.3'
        required: false
        default: ''
        type: string
  workflow_call:
    inputs:
      last_release_version:
        description: 'The version of the last release. Example: 1.2.3'
        required: true
        type: string
      new_release_version:
        description: 'The version of the new release. Example: 1.3.0'
        required: true
        type: string
      last_release_git_tag:
        description: 'The git tag of the last release. Defaults to `v{last_release_version}`. Example: v1.2.3'
        required: false
        default: ''
        type: string

jobs:
  create_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Last Release Major and Minor Versions
        id: extract_last_versions
        env:
          LAST_RELEASE_VERSION: ${{ inputs.last_release_version }}
        run: |
          IFS='.' read -r last_major last_minor last_patch <<< "$LAST_RELEASE_VERSION"
          echo "last_major=$last_major" >> "$GITHUB_OUTPUT"
          echo "last_minor=$last_minor" >> "$GITHUB_OUTPUT"
          echo "last major: $last_major"
          echo "last minor: $last_minor"

      - name: Extract New Release Major and Minor Versions
        id: extract_new_versions
        env:
          NEW_RELEASE_VERSION: ${{ inputs.new_release_version }}
        run: |
          IFS='.' read -r new_major new_minor new_patch <<< "$NEW_RELEASE_VERSION"
          echo "new_major=$new_major" >> "$GITHUB_OUTPUT"
          echo "new_minor=$new_minor" >> "$GITHUB_OUTPUT"
          echo "new major: $new_major"
          echo "new minor: $new_minor"

      - name: Determine Bump Type
        id: determine_bump
        env:
          NEW_MAJOR: ${{ steps.extract_new_versions.outputs.new_major }}
          NEW_MINOR: ${{ steps.extract_new_versions.outputs.new_minor }}
          LAST_MAJOR: ${{ steps.extract_last_versions.outputs.last_major }}
          LAST_MINOR: ${{ steps.extract_last_versions.outputs.last_minor }}
        run: |
          if [ "$NEW_MAJOR" -gt "$LAST_MAJOR" ]; then
            echo "bump_type=major" >> "$GITHUB_OUTPUT"
            echo 'bump type is `major`'
          elif [ "$NEW_MAJOR" -eq "$LAST_MAJOR" ] && [ "$NEW_MINOR" -gt "$LAST_MINOR" ]; then
            echo "bump_type=minor" >> "$GITHUB_OUTPUT"
            echo 'bump type is `minor`'
          else
            echo "bump_type=patch" >> "$GITHUB_OUTPUT"
            echo 'bump type is `patch` or other'
          fi

      - name: Determine Branch Name
        id: determine_branch_name
        env:
          BUMP_TYPE: ${{ steps.determine_bump.outputs.bump_type }}
          LAST_MAJOR: ${{ steps.extract_last_versions.outputs.last_major }}
          LAST_MINOR: ${{ steps.extract_last_versions.outputs.last_minor }}
        run: |
          if [ "$BUMP_TYPE" = "major" ]; then
            branch_name="${LAST_MAJOR}.x.x"
          elif [ "$BUMP_TYPE" = "minor" ]; then
            branch_name="${LAST_MAJOR}.${LAST_MINOR}.x"
          else
            branch_name=""
          fi
          echo "branch_name=$branch_name" >> "$GITHUB_OUTPUT"
          echo "branch name: $branch_name"

      - name: Set Last Release Git Tag
        id: set_git_tag
        if: ${{ steps.determine_branch_name.outputs.branch_name != '' }}
        env:
          LAST_RELEASE_GIT_TAG_INPUT: ${{ inputs.last_release_git_tag }}
          LAST_RELEASE_VERSION_INPUT: ${{ inputs.last_release_version }}
        run: |
          if [ -z "$LAST_RELEASE_GIT_TAG_INPUT" ]; then
            git_tag="v$LAST_RELEASE_VERSION_INPUT"
          else
            git_tag="$LAST_RELEASE_GIT_TAG_INPUT"
          fi
          echo "last_release_git_tag=${git_tag}" >> "$GITHUB_OUTPUT"
          echo "last release git tag: ${git_tag}"

      - name: Checkout Code
        if: ${{ steps.determine_branch_name.outputs.branch_name != '' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: true
          token: ${{ secrets.CREATE_RELEASE }}

      - name: Create Release Branch
        if: ${{ steps.determine_branch_name.outputs.branch_name != '' }}
        env:
          LAST_RELEASE_GIT_TAG: ${{ steps.set_git_tag.outputs.last_release_git_tag }}
          BRANCH_NAME: ${{ steps.determine_branch_name.outputs.branch_name }}
        run: |
          git fetch origin "refs/tags/$LAST_RELEASE_GIT_TAG:refs/tags/$LAST_RELEASE_GIT_TAG"
          git checkout "$LAST_RELEASE_GIT_TAG"
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          echo "branch created: $BRANCH_NAME"
